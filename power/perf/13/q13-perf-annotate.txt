
Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.96 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.58 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.08 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    5.32 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    4.30 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    4.05 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.80 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.54 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    3.29 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.04 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    3.04 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.04 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.53 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    2.03 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1095
    1.77 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    1.27 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1054
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1067
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1068
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1081
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1107
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1123
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ef10 <slot_deform_tuple>:
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    1.01 :	  46ef10:       55                      push   %rbp
    0.25 :	  46ef11:       48 89 e5                mov    %rsp,%rbp
    0.25 :	  46ef14:       41 57                   push   %r15
    0.25 :	  46ef16:       41 89 f7                mov    %esi,%r15d
    0.00 :	  46ef19:       41 56                   push   %r14
    0.00 :	  46ef1b:       49 89 fe                mov    %rdi,%r14
    0.76 :	  46ef1e:       41 55                   push   %r13
    0.76 :	  46ef20:       41 54                   push   %r12
    0.00 :	  46ef22:       53                      push   %rbx
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef23:       31 db                   xor    %ebx,%ebx
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.51 :	  46ef25:       48 83 ec 28             sub    $0x28,%rsp
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
    0.00 :	  46ef29:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  46ef2d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1054
    0.51 :	  46ef31:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1067
    0.51 :	  46ef35:       8b 77 24                mov    0x24(%rdi),%esi
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
    0.00 :	  46ef38:       4c 8b 5f 30             mov    0x30(%rdi),%r11
         :	        HeapTupleHeader tup = tuple->t_data;
    0.00 :	  46ef3c:       4c 8b 40 10             mov    0x10(%rax),%r8
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
    0.00 :	  46ef40:       41 0f b7 40 14          movzwl 0x14(%r8),%eax
    0.25 :	  46ef45:       83 e0 01                and    $0x1,%eax
    0.00 :	  46ef48:       41 89 c2                mov    %eax,%r10d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef4b:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.25 :	  46ef4f:       31 ff                   xor    %edi,%edi
    0.00 :	  46ef51:       85 f6                   test   %esi,%esi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef53:       4c 8b 48 08             mov    0x8(%rax),%r9
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1068
    0.51 :	  46ef57:       74 09                   je     46ef62 <slot_deform_tuple+0x52>
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
    0.00 :	  46ef59:       41 0f b6 7e 07          movzbl 0x7(%r14),%edi
         :	                slow = false;
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
    0.00 :	  46ef5e:       49 8b 5e 58             mov    0x58(%r14),%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1081
    0.51 :	  46ef62:       41 0f b6 40 16          movzbl 0x16(%r8),%eax
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46ef67:       44 39 fe                cmp    %r15d,%esi
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.00 :	  46ef6a:       4d 8d 2c 00             lea    (%r8,%rax,1),%r13
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46ef6e:       0f 8d c0 00 00 00       jge    46f034 <slot_deform_tuple+0x124>
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.51 :	  46ef74:       41 89 f4                mov    %esi,%r12d
    0.00 :	  46ef77:       eb 40                   jmp    46efb9 <slot_deform_tuple+0xa9>
    0.00 :	  46ef79:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
    0.00 :	  46ef80:       44 89 e0                mov    %r12d,%eax
    0.00 :	  46ef83:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  46ef86:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46ef89:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46ef8c:       48 98                   cltq   
    0.00 :	  46ef8e:       41 0f b6 44 00 17       movzbl 0x17(%r8,%rax,1),%eax
    0.00 :	  46ef94:       d3 f8                   sar    %cl,%eax
    0.00 :	  46ef96:       a8 01                   test   $0x1,%al
    0.00 :	  46ef98:       75 2b                   jne    46efc5 <slot_deform_tuple+0xb5>
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46ef9a:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
         :	                        isnull[attnum] = true;
    0.00 :	  46ef9e:       bf 01 00 00 00          mov    $0x1,%edi
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46efa3:       48 c7 04 f2 00 00 00    movq   $0x0,(%rdx,%rsi,8)
    0.00 :	  46efaa:       00 
         :	                        isnull[attnum] = true;
    0.00 :	  46efab:       41 c6 04 33 01          movb   $0x1,(%r11,%rsi,1)
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
    3.04 :	  46efb0:       41 83 c4 01             add    $0x1,%r12d
    0.51 :	  46efb4:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46efb7:       7e 78                   jle    46f031 <slot_deform_tuple+0x121>
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    0.51 :	  46efb9:       49 63 f4                movslq %r12d,%rsi
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    1.52 :	  46efbc:       45 84 d2                test   %r10b,%r10b
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    4.30 :	  46efbf:       49 8b 14 f1             mov    (%r9,%rsi,8),%rdx
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    3.54 :	  46efc3:       75 bb                   jne    46ef80 <slot_deform_tuple+0x70>
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
    0.00 :	  46efc5:       40 84 ff                test   %dil,%dil
         :	                        isnull[attnum] = true;
         :	                        slow = true;            /* can't use attcacheoff anymore */
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1095
    2.03 :	  46efc8:       41 c6 04 33 00          movb   $0x0,(%r11,%rsi,1)
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    6.08 :	  46efcd:       0f 85 7d 00 00 00       jne    46f050 <slot_deform_tuple+0x140>
    0.00 :	  46efd3:       8b 42 54                mov    0x54(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    2.53 :	  46efd6:       85 c0                   test   %eax,%eax
    0.00 :	  46efd8:       78 76                   js     46f050 <slot_deform_tuple+0x140>
         :	                        off = thisatt->attcacheoff;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.04 :	  46efda:       48 63 d8                movslq %eax,%rbx
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.78 :	  46efdd:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.25 :	  46efe1:       49 8d 44 1d 00          lea    0x0(%r13,%rbx,1),%rax
    4.05 :	  46efe6:       74 28                   je     46f010 <slot_deform_tuple+0x100>
    3.80 :	  46efe8:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
    1.01 :	  46efec:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  46eff0:       0f 84 3a 01 00 00       je     46f130 <slot_deform_tuple+0x220>
    0.25 :	  46eff6:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  46effa:       0f 84 90 01 00 00       je     46f190 <slot_deform_tuple+0x280>
    0.00 :	  46f000:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  46f004:       0f 84 a6 01 00 00       je     46f1b0 <slot_deform_tuple+0x2a0>
    0.00 :	  46f00a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
    2.78 :	  46f010:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
    1.52 :	  46f014:       48 89 04 f1             mov    %rax,(%rcx,%rsi,8)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
   16.96 :	  46f018:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.76 :	  46f01c:       66 85 c0                test   %ax,%ax
    0.00 :	  46f01f:       7e 6f                   jle    46f090 <slot_deform_tuple+0x180>
    0.00 :	  46f021:       48 0f bf c0             movswq %ax,%rax
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.27 :	  46f025:       41 83 c4 01             add    $0x1,%r12d
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    3.04 :	  46f029:       48 01 c3                add    %rax,%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.76 :	  46f02c:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46f02f:       7f 88                   jg     46efb9 <slot_deform_tuple+0xa9>
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.00 :	  46f031:       44 89 fe                mov    %r15d,%esi
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
    0.00 :	  46f034:       49 89 5e 58             mov    %rbx,0x58(%r14)
         :	        }
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    0.51 :	  46f038:       41 89 76 24             mov    %esi,0x24(%r14)
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
    0.25 :	  46f03c:       41 88 7e 07             mov    %dil,0x7(%r14)
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.51 :	  46f040:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  46f044:       5b                      pop    %rbx
    0.25 :	  46f045:       41 5c                   pop    %r12
    0.25 :	  46f047:       41 5d                   pop    %r13
    0.00 :	  46f049:       41 5e                   pop    %r14
    0.00 :	  46f04b:       41 5f                   pop    %r15
    0.76 :	  46f04d:       c9                      leaveq 
    0.51 :	  46f04e:       c3                      retq   
    0.00 :	  46f04f:       90                      nop
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
         :	                        off = thisatt->attcacheoff;
         :	                else if (thisatt->attlen == -1)
    0.00 :	  46f050:       66 83 7a 4c ff          cmpw   $0xffff,0x4c(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    5.32 :	  46f055:       74 71                   je     46f0c8 <slot_deform_tuple+0x1b8>
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    0.76 :	  46f057:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f05b:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f05d:       0f 84 1d 01 00 00       je     46f180 <slot_deform_tuple+0x270>
    0.00 :	  46f063:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f065:       74 10                   je     46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f067:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f069:       0f 84 51 01 00 00       je     46f1c0 <slot_deform_tuple+0x2b0>
    0.00 :	  46f06f:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f073:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
         :
         :	                        if (!slow)
    0.00 :	  46f077:       40 84 ff                test   %dil,%dil
    0.00 :	  46f07a:       0f 85 5d ff ff ff       jne    46efdd <slot_deform_tuple+0xcd>
         :	                                thisatt->attcacheoff = off;
    0.00 :	  46f080:       89 5a 54                mov    %ebx,0x54(%rdx)
    0.00 :	  46f083:       e9 55 ff ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f088:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f08f:       00 
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.25 :	  46f090:       66 83 c0 01             add    $0x1,%ax
    0.00 :	  46f094:       0f 85 a6 00 00 00       jne    46f140 <slot_deform_tuple+0x230>
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 :	  46f09a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
    1.77 :	  46f0a0:       3c 01                   cmp    $0x1,%al
    0.00 :	  46f0a2:       0f 84 50 01 00 00       je     46f1f8 <slot_deform_tuple+0x2e8>
    0.51 :	  46f0a8:       a8 01                   test   $0x1,%al
    0.00 :	  46f0aa:       0f 85 20 01 00 00       jne    46f1d0 <slot_deform_tuple+0x2c0>
    0.00 :	  46f0b0:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    0.00 :	  46f0b5:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  46f0b8:       89 c0                   mov    %eax,%eax
    0.51 :	  46f0ba:       48 8d 1c 18             lea    (%rax,%rbx,1),%rbx
    0.00 :	  46f0be:       e9 ad 00 00 00          jmpq   46f170 <slot_deform_tuple+0x260>
    0.00 :	  46f0c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1107
    0.51 :	  46f0c8:       40 84 ff                test   %dil,%dil
    0.00 :	  46f0cb:       75 26                   jne    46f0f3 <slot_deform_tuple+0x1e3>
    0.00 :	  46f0cd:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f0d1:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f0d3:       0f 84 4f 01 00 00       je     46f228 <slot_deform_tuple+0x318>
    0.00 :	  46f0d9:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f0db:       74 a3                   je     46f080 <slot_deform_tuple+0x170>
    0.00 :	  46f0dd:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f0df:       90                      nop
    0.00 :	  46f0e0:       0f 84 52 01 00 00       je     46f238 <slot_deform_tuple+0x328>
    0.00 :	  46f0e6:       48 8d 43 01             lea    0x1(%rbx),%rax
    0.00 :	  46f0ea:       48 83 e0 fe             and    $0xfffffffffffffffe,%rax
    0.00 :	  46f0ee:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  46f0f1:       74 8d                   je     46f080 <slot_deform_tuple+0x170>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    0.51 :	  46f0f3:       41 80 7c 1d 00 00       cmpb   $0x0,0x0(%r13,%rbx,1)
    0.51 :	  46f0f9:       0f 85 a1 00 00 00       jne    46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f0ff:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f103:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f105:       0f 84 d5 00 00 00       je     46f1e0 <slot_deform_tuple+0x2d0>
    0.00 :	  46f10b:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f10d:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f110:       0f 84 8a 00 00 00       je     46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f116:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f118:       0f 84 27 01 00 00       je     46f245 <slot_deform_tuple+0x335>
    0.00 :	  46f11e:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f122:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f127:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
    0.00 :	  46f12b:       e9 ad fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f130:       49 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%rax
    0.00 :	  46f135:       e9 d6 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f13a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f140:       49 8d 7c 1d 00          lea    0x0(%r13,%rbx,1),%rdi
    0.00 :	  46f145:       4c 89 45 c8             mov    %r8,-0x38(%rbp)
    0.00 :	  46f149:       4c 89 4d c0             mov    %r9,-0x40(%rbp)
    0.00 :	  46f14d:       44 88 55 b8             mov    %r10b,-0x48(%rbp)
    0.00 :	  46f151:       4c 89 5d b0             mov    %r11,-0x50(%rbp)
    0.00 :	  46f155:       e8 f6 a6 ff ff          callq  469850 <strlen@plt>
    0.00 :	  46f15a:       44 0f b6 55 b8          movzbl -0x48(%rbp),%r10d
    0.00 :	  46f15f:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  46f163:       48 8d 5c 03 01          lea    0x1(%rbx,%rax,1),%rbx
    0.00 :	  46f168:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  46f16c:       4c 8b 5d b0             mov    -0x50(%rbp),%r11
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    1.01 :	  46f170:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f175:       e9 36 fe ff ff          jmpq   46efb0 <slot_deform_tuple+0xa0>
    0.00 :	  46f17a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f180:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f184:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.25 :	  46f188:       e9 ea fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f18d:       0f 1f 00                nopl   (%rax)
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.29 :	  46f190:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.58 :	  46f195:       e9 76 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f19a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1123
    0.51 :	  46f1a0:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1a5:       e9 33 fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f1b0:       41 0f b7 44 1d 00       movzwl 0x0(%r13,%rbx,1),%eax
    0.00 :	  46f1b6:       e9 55 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f1bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f1c0:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f1c4:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f1c8:       e9 aa fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f1cd:       0f 1f 00                nopl   (%rax)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.51 :	  46f1d0:       d0 e8                   shr    %al
    0.00 :	  46f1d2:       0f b6 c0                movzbl %al,%eax
    0.51 :	  46f1d5:       e9 e0 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f1da:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (!slow &&
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f1e0:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f1e4:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1e9:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.00 :	  46f1ed:       e9 eb fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f1f8:       41 0f b6 54 1d 01       movzbl 0x1(%r13,%rbx,1),%edx
    0.00 :	  46f1fe:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  46f203:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  46f206:       0f 84 ae fe ff ff       je     46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f20c:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  46f20f:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  46f214:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  46f219:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  46f21d:       e9 98 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f222:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.00 :	  46f228:       48 8d 43 03             lea    0x3(%rbx),%rax
    0.00 :	  46f22c:       48 83 e0 fc             and    $0xfffffffffffffffc,%rax
    0.00 :	  46f230:       e9 b9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
    0.00 :	  46f235:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f238:       48 8d 43 07             lea    0x7(%rbx),%rax
    0.00 :	  46f23c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  46f240:       e9 a9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f245:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f249:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f24e:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f252:       e9 86 fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   46.30 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1097
   38.89 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
    4.32 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1082
    1.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1077
    0.93 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    0.93 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1055
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1057
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1070
    0.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbda0 <ExecScanHashBucket>:
         :	 * for the latter.
         :	 */
         :	bool
         :	ExecScanHashBucket(HashJoinState *hjstate,
         :	                                   ExprContext *econtext)
         :	{
    0.31 :	  5bbda0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1055
    0.62 :	  5bbda1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bbda4:       41 57                   push   %r15
    0.31 :	  5bbda6:       41 56                   push   %r14
    0.00 :	  5bbda8:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5bbdab:       41 55                   push   %r13
    0.00 :	  5bbdad:       41 54                   push   %r12
    0.00 :	  5bbdaf:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5bbdb2:       53                      push   %rbx
    0.00 :	  5bbdb3:       48 83 ec 08             sub    $0x8,%rsp
         :	        List       *hjclauses = hjstate->hashclauses;
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
         :	        HashJoinTuple hashTuple = hjstate->hj_CurTuple;
    0.00 :	  5bbdb7:       48 8b 87 c0 00 00 00    mov    0xc0(%rdi),%rax
         :	 */
         :	bool
         :	ExecScanHashBucket(HashJoinState *hjstate,
         :	                                   ExprContext *econtext)
         :	{
         :	        List       *hjclauses = hjstate->hashclauses;
    0.00 :	  5bbdbe:       4c 8b bf 88 00 00 00    mov    0x88(%rdi),%r15
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1057
    0.62 :	  5bbdc5:       48 8b 8f a8 00 00 00    mov    0xa8(%rdi),%rcx
         :	        HashJoinTuple hashTuple = hjstate->hj_CurTuple;
         :	        uint32          hashvalue = hjstate->hj_CurHashValue;
    0.00 :	  5bbdcc:       44 8b af b0 00 00 00    mov    0xb0(%rdi),%r13d
         :	         * bucket, or NULL if it's time to start scanning a new bucket.
         :	         *
         :	         * If the tuple hashed to a skew bucket then scan the skew bucket
         :	         * otherwise scan the standard hashtable bucket.
         :	         */
         :	        if (hashTuple != NULL)
    0.00 :	  5bbdd3:       48 85 c0                test   %rax,%rax
    0.00 :	  5bbdd6:       74 79                   je     5bbe51 <ExecScanHashBucket+0xb1>
         :	                hashTuple = hashTuple->next;
    0.00 :	  5bbdd8:       48 8b 18                mov    (%rax),%rbx
    0.00 :	  5bbddb:       eb 06                   jmp    5bbde3 <ExecScanHashBucket+0x43>
    0.00 :	  5bbddd:       0f 1f 00                nopl   (%rax)
         :	                                hjstate->hj_CurTuple = hashTuple;
         :	                                return true;
         :	                        }
         :	                }
         :
         :	                hashTuple = hashTuple->next;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1097
   46.30 :	  5bbde0:       48 8b 1b                mov    (%rbx),%rbx
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
         :
         :	        while (hashTuple != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    0.93 :	  5bbde3:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbde6:       74 58                   je     5bbe40 <ExecScanHashBucket+0xa0>
         :	        {
         :	                if (hashTuple->hashvalue == hashvalue)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1077
    1.23 :	  5bbde8:       44 39 6b 08             cmp    %r13d,0x8(%rbx)
    0.00 :	  5bbdec:       75 f2                   jne    5bbde0 <ExecScanHashBucket+0x40>
         :	                {
         :	                        TupleTableSlot *inntuple;
         :
         :	                        /* insert hashtable's tuple into exec slot so ExecQual sees it */
         :	                        inntuple = ExecStoreMinimalTuple(HJTUPLE_MINTUPLE(hashTuple),
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1082
    4.32 :	  5bbdee:       49 8b b4 24 d0 00 00    mov    0xd0(%r12),%rsi
    0.00 :	  5bbdf5:       00 
    0.00 :	  5bbdf6:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  5bbdfa:       31 d2                   xor    %edx,%edx
    0.00 :	  5bbdfc:       e8 df 85 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :	                                                                                         hjstate->hj_HashTupleSlot,
         :	                                                                                         false);        /* do not pfree */
         :	                        econtext->ecxt_innertuple = inntuple;
         :
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
    0.00 :	  5bbe01:       49 8b 7e 28             mov    0x28(%r14),%rdi
         :
         :	                        /* insert hashtable's tuple into exec slot so ExecQual sees it */
         :	                        inntuple = ExecStoreMinimalTuple(HJTUPLE_MINTUPLE(hashTuple),
         :	                                                                                         hjstate->hj_HashTupleSlot,
         :	                                                                                         false);        /* do not pfree */
         :	                        econtext->ecxt_innertuple = inntuple;
    0.00 :	  5bbe05:       49 89 46 10             mov    %rax,0x10(%r14)
         :
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
    0.00 :	  5bbe09:       e8 a2 cb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                        if (ExecQual(hjclauses, econtext, false))
    0.00 :	  5bbe0e:       31 d2                   xor    %edx,%edx
    0.00 :	  5bbe10:       4c 89 f6                mov    %r14,%rsi
    0.31 :	  5bbe13:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bbe16:       e8 f5 10 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5bbe1b:       84 c0                   test   %al,%al
    0.00 :	  5bbe1d:       74 c1                   je     5bbde0 <ExecScanHashBucket+0x40>
         :	                        {
         :	                                hjstate->hj_CurTuple = hashTuple;
    0.00 :	  5bbe1f:       49 89 9c 24 c0 00 00    mov    %rbx,0xc0(%r12)
    0.00 :	  5bbe26:       00 
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe27:       48 83 c4 08             add    $0x8,%rsp
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
         :
         :	                        if (ExecQual(hjclauses, econtext, false))
         :	                        {
         :	                                hjstate->hj_CurTuple = hashTuple;
    0.00 :	  5bbe2b:       b8 01 00 00 00          mov    $0x1,%eax
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe30:       5b                      pop    %rbx
    0.00 :	  5bbe31:       41 5c                   pop    %r12
    0.31 :	  5bbe33:       41 5d                   pop    %r13
    0.00 :	  5bbe35:       41 5e                   pop    %r14
    0.00 :	  5bbe37:       41 5f                   pop    %r15
    0.00 :	  5bbe39:       c9                      leaveq 
    0.31 :	  5bbe3a:       c3                      retq   
    0.00 :	  5bbe3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.62 :	  5bbe40:       48 83 c4 08             add    $0x8,%rsp
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
         :
         :	        while (hashTuple != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    0.62 :	  5bbe44:       31 c0                   xor    %eax,%eax
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe46:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1104
    0.93 :	  5bbe47:       41 5c                   pop    %r12
    0.62 :	  5bbe49:       41 5d                   pop    %r13
    0.31 :	  5bbe4b:       41 5e                   pop    %r14
    0.00 :	  5bbe4d:       41 5f                   pop    %r15
    0.62 :	  5bbe4f:       c9                      leaveq 
    0.62 :	  5bbe50:       c3                      retq   
         :	         * If the tuple hashed to a skew bucket then scan the skew bucket
         :	         * otherwise scan the standard hashtable bucket.
         :	         */
         :	        if (hashTuple != NULL)
         :	                hashTuple = hashTuple->next;
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1070
    0.62 :	  5bbe51:       8b 87 b8 00 00 00       mov    0xb8(%rdi),%eax
    0.00 :	  5bbe57:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	  5bbe5a:       74 13                   je     5bbe6f <ExecScanHashBucket+0xcf>
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
    0.00 :	  5bbe5c:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  5bbe60:       48 98                   cltq   
    0.00 :	  5bbe62:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5bbe66:       48 8b 58 08             mov    0x8(%rax),%rbx
    0.00 :	  5bbe6a:       e9 74 ff ff ff          jmpq   5bbde3 <ExecScanHashBucket+0x43>
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
    0.62 :	  5bbe6f:       48 63 97 b4 00 00 00    movslq 0xb4(%rdi),%rdx
    0.00 :	  5bbe76:       48 8b 41 18             mov    0x18(%rcx),%rax
    0.00 :	  5bbe7a:       48 8b 1c d0             mov    (%rax,%rdx,8),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
   38.89 :	  5bbe7e:       e9 60 ff ff ff          jmpq   5bbde3 <ExecScanHashBucket+0x43>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   15.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    8.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:398
    7.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    4.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    3.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    2.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    2.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:214
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:389
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    1.60 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:391
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:396
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:84
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:237
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:239
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:259
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:284
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:287
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:339
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    0.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005baf80 <BitmapHeapNext>:
         :	 *              Retrieve next tuple from the BitmapHeapScan node's currentRelation
         :	 * ----------------------------------------------------------------
         :	 */
         :	static TupleTableSlot *
         :	BitmapHeapNext(BitmapHeapScanState *node)
         :	{
    0.40 :	  5baf80:       55                      push   %rbp
    0.00 :	  5baf81:       48 89 e5                mov    %rsp,%rbp
    0.40 :	  5baf84:       41 57                   push   %r15
    0.00 :	  5baf86:       41 56                   push   %r14
    0.00 :	  5baf88:       41 55                   push   %r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.80 :	  5baf8a:       41 54                   push   %r12
    0.00 :	  5baf8c:       53                      push   %rbx
    0.80 :	  5baf8d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5baf90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        TupleTableSlot *slot;
         :
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
    0.40 :	  5baf97:       48 8b 47 60             mov    0x60(%rdi),%rax
    0.00 :	  5baf9b:       48 89 85 28 ff ff ff    mov    %rax,-0xd8(%rbp)
         :	        slot = node->ss.ss_ScanTupleSlot;
    0.00 :	  5bafa2:       48 8b 97 88 00 00 00    mov    0x88(%rdi),%rdx
    0.00 :	  5bafa9:       48 89 95 38 ff ff ff    mov    %rdx,-0xc8(%rbp)
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafb0:       48 8b 8f a0 00 00 00    mov    0xa0(%rdi),%rcx
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
    0.40 :	  5bafb7:       4c 8b a7 80 00 00 00    mov    0x80(%rdi),%r12
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafbe:       48 89 8d 30 ff ff ff    mov    %rcx,-0xd0(%rbp)
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
    0.00 :	  5bafc5:       48 83 bf 98 00 00 00    cmpq   $0x0,0x98(%rdi)
    0.00 :	  5bafcc:       00 
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
         :	        tbmres = node->tbmres;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:84
    0.80 :	  5bafcd:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
         :	#ifdef USE_PREFETCH
         :	        prefetch_iterator = node->prefetch_iterator;
    0.40 :	  5bafd4:       4c 8b bf c0 00 00 00    mov    0xc0(%rdi),%r15
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
    0.00 :	  5bafdb:       0f 84 11 06 00 00       je     5bb5f2 <BitmapHeapNext+0x672>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bafe1:       49 8d 44 24 48          lea    0x48(%r12),%rax
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bafe6:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.40 :	  5bafe9:       48 89 85 20 ff ff ff    mov    %rax,-0xe0(%rbp)
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5baff0:       0f 84 c4 01 00 00       je     5bb1ba <BitmapHeapNext+0x23a>
    0.40 :	  5baff6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5baffd:       00 00 00 
         :	                else
         :	                {
         :	                        /*
         :	                         * Continuing in previously obtained page; advance rs_cindex
         :	                         */
         :	                        scan->rs_cindex++;
    0.40 :	  5bb000:       41 83 44 24 70 01       addl   $0x1,0x70(%r12)
         :
         :	                        /*
         :	                         * Try to prefetch at least a few pages even before we get to the
         :	                         * second page if we don't stop reading after the first tuple.
         :	                         */
         :	                        if (node->prefetch_target < target_prefetch_pages)
    0.00 :	  5bb006:       49 89 d5                mov    %rdx,%r13
    0.00 :	  5bb009:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:214
    2.00 :	  5bb00f:       3b 05 4f 20 5c 00       cmp    0x5c204f(%rip),%eax        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb015:       7d 0c                   jge    5bb023 <BitmapHeapNext+0xa3>
         :	                                node->prefetch_target++;
    0.00 :	  5bb017:       83 c0 01                add    $0x1,%eax
    0.00 :	  5bb01a:       49 89 d5                mov    %rdx,%r13
    0.00 :	  5bb01d:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
         :	                }
         :
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.60 :	  5bb023:       41 8b 44 24 70          mov    0x70(%r12),%eax
    0.00 :	  5bb028:       85 c0                   test   %eax,%eax
    0.00 :	  5bb02a:       0f 88 e0 01 00 00       js     5bb210 <BitmapHeapNext+0x290>
    0.40 :	  5bb030:       41 3b 44 24 78          cmp    0x78(%r12),%eax
    0.00 :	  5bb035:       0f 8d d5 01 00 00       jge    5bb210 <BitmapHeapNext+0x290>
         :	                 * to avoid having prefetching interfere with the main I/O. Also, this
         :	                 * should happen only when we have determined there is still something
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:237
    0.80 :	  5bb03b:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb03e:       74 55                   je     5bb095 <BitmapHeapNext+0x115>
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
    0.00 :	  5bb040:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
    0.00 :	  5bb046:       3b 83 c8 00 00 00       cmp    0xc8(%rbx),%eax
    0.00 :	  5bb04c:       7f 24                   jg     5bb072 <BitmapHeapNext+0xf2>
    0.00 :	  5bb04e:       eb 45                   jmp    5bb095 <BitmapHeapNext+0x115>
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
         :	                                        break;
         :	                                }
         :	                                node->prefetch_pages++;
    0.00 :	  5bb050:       83 83 c8 00 00 00 01    addl   $0x1,0xc8(%rbx)
         :	                                PrefetchBuffer(scan->rs_rd, MAIN_FORKNUM, tbmpre->blockno);
    0.00 :	  5bb057:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb059:       8b 10                   mov    (%rax),%edx
    0.00 :	  5bb05b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb05f:       e8 6c b7 0b 00          callq  6767d0 <PrefetchBuffer>
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
    0.00 :	  5bb064:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:239
    0.80 :	  5bb06a:       3b 83 cc 00 00 00       cmp    0xcc(%rbx),%eax
    0.00 :	  5bb070:       7d 23                   jge    5bb095 <BitmapHeapNext+0x115>
         :	                        {
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb072:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb075:       e8 d6 82 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL)
    0.00 :	  5bb07a:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb07d:       75 d1                   jne    5bb050 <BitmapHeapNext+0xd0>
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb07f:       4c 89 ff                mov    %r15,%rdi
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb082:       45 31 ff                xor    %r15d,%r15d
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL)
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb085:       e8 86 84 02 00          callq  5e3510 <tbm_end_iterate>
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb08a:       48 c7 83 c0 00 00 00    movq   $0x0,0xc0(%rbx)
    0.00 :	  5bb091:       00 00 00 00 
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
    0.40 :	  5bb095:       49 63 44 24 70          movslq 0x70(%r12),%rax
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.40 :	  5bb09a:       41 8b 74 24 64          mov    0x64(%r12),%esi
    0.00 :	  5bb09f:       85 f6                   test   %esi,%esi
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:259
    0.80 :	  5bb0a1:       41 0f b7 7c 44 7c       movzwl 0x7c(%r12,%rax,2),%edi
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    2.00 :	  5bb0a7:       0f 88 73 01 00 00       js     5bb220 <BitmapHeapNext+0x2a0>
    0.00 :	  5bb0ad:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  5bb0b0:       48 63 c8                movslq %eax,%rcx
    0.00 :	  5bb0b3:       48 c1 e1 0d             shl    $0xd,%rcx
    1.60 :	  5bb0b7:       48 03 0d 3a 4a 60 00    add    0x604a3a(%rip),%rcx        # bbfaf8 <BufferBlocks>
         :	                lp = PageGetItemId(dp, targoffset);
    0.40 :	  5bb0be:       0f b7 d7                movzwl %di,%edx
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb0c1:       48 83 c2 03             add    $0x3,%rdx
    0.40 :	  5bb0c5:       0f b7 44 91 08          movzwl 0x8(%rcx,%rdx,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    7.20 :	  5bb0ca:       25 ff 7f 00 00          and    $0x7fff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    1.60 :	  5bb0cf:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    1.20 :	  5bb0d3:       49 89 44 24 58          mov    %rax,0x58(%r12)
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    1.20 :	  5bb0d8:       0f b7 44 91 0a          movzwl 0xa(%rcx,%rdx,4),%eax
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.40 :	  5bb0dd:       49 8b 14 24             mov    (%r12),%rdx
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
         :	                lp = PageGetItemId(dp, targoffset);
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb0e1:       66 d1 e8                shr    %ax
    0.40 :	  5bb0e4:       0f b7 c0                movzwl %ax,%eax
    2.00 :	  5bb0e7:       41 89 44 24 48          mov    %eax,0x48(%r12)
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb0ec:       8b 42 40                mov    0x40(%rdx),%eax
    0.00 :	  5bb0ef:       41 89 44 24 54          mov    %eax,0x54(%r12)
         :	                ItemPointerSet(&scan->rs_ctup.t_self, tbmres->blockno, targoffset);
    0.40 :	  5bb0f4:       41 8b 45 00             mov    0x0(%r13),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.80 :	  5bb0f8:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  5bb0fb:       66 41 89 44 24 4c       mov    %ax,0x4c(%r12)
    0.00 :	  5bb101:       41 8b 45 00             mov    0x0(%r13),%eax
    0.40 :	  5bb105:       66 41 89 7c 24 50       mov    %di,0x50(%r12)
    0.80 :	  5bb10b:       66 41 89 44 24 4e       mov    %ax,0x4e(%r12)
         :
         :	                pgstat_count_heap_fetch(scan->rs_rd);
    0.40 :	  5bb111:       48 8b 82 38 01 00 00    mov    0x138(%rdx),%rax
    0.40 :	  5bb118:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb11b:       74 0a                   je     5bb127 <BitmapHeapNext+0x1a7>
    0.00 :	  5bb11d:       48 83 40 20 01          addq   $0x1,0x20(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
   15.60 :	  5bb122:       41 8b 74 24 64          mov    0x64(%r12),%esi
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bb127:       89 f2                   mov    %esi,%edx
    0.00 :	  5bb129:       48 8b bd 20 ff ff ff    mov    -0xe0(%rbp),%rdi
    0.00 :	  5bb130:       48 8b b5 38 ff ff ff    mov    -0xc8(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    1.20 :	  5bb137:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bb139:       e8 42 93 ff ff          callq  5b4480 <ExecStoreTuple>
         :
         :	                /*
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:284
    0.80 :	  5bb13e:       41 80 7d 08 00          cmpb   $0x0,0x8(%r13)
    0.40 :	  5bb143:       0f 84 b1 02 00 00       je     5bb3fa <BitmapHeapNext+0x47a>
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    0.40 :	  5bb149:       48 8b 95 28 ff ff ff    mov    -0xd8(%rbp),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    2.00 :	  5bb150:       48 8b 8d 38 ff ff ff    mov    -0xc8(%rbp),%rcx
         :	                        ResetExprContext(econtext);
    0.00 :	  5bb157:       48 8b 7a 28             mov    0x28(%rdx),%rdi
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    2.40 :	  5bb15b:       48 89 4a 08             mov    %rcx,0x8(%rdx)
         :	                        ResetExprContext(econtext);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:287
    0.80 :	  5bb15f:       e8 4c d8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                        if (!ExecQual(node->bitmapqualorig, econtext, false))
    0.00 :	  5bb164:       48 8b bb 90 00 00 00    mov    0x90(%rbx),%rdi
    0.40 :	  5bb16b:       48 8b b5 28 ff ff ff    mov    -0xd8(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    0.80 :	  5bb172:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb174:       e8 97 1d ff ff          callq  5acf10 <ExecQual>
    2.00 :	  5bb179:       84 c0                   test   %al,%al
    0.00 :	  5bb17b:       0f 85 79 02 00 00       jne    5bb3fa <BitmapHeapNext+0x47a>
         :	                        {
         :	                                /* Fails recheck, so drop it and loop back for another */
         :	                                InstrCountFiltered2(node, 1);
    0.00 :	  5bb181:       48 8b 43 18             mov    0x18(%rbx),%rax
    0.00 :	  5bb185:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb188:       74 18                   je     5bb1a2 <BitmapHeapNext+0x222>
    0.00 :	  5bb18a:       f2 0f 10 05 c6 3f 1f    movsd  0x1f3fc6(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bb191:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    1.20 :	  5bb192:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bb199:       00 
    3.20 :	  5bb19a:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bb1a1:       00 
         :	                                ExecClearTuple(slot);
    0.00 :	  5bb1a2:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb1a9:       e8 62 8f ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bb1ae:       4c 89 ea                mov    %r13,%rdx
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bb1b1:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bb1b4:       0f 85 46 fe ff ff       jne    5bb000 <BitmapHeapNext+0x80>
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.00 :	  5bb1ba:       48 8b bd 30 ff ff ff    mov    -0xd0(%rbp),%rdi
    0.00 :	  5bb1c1:       e8 8a 81 02 00          callq  5e3350 <tbm_iterate>
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1c6:       48 85 c0                test   %rax,%rax
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.00 :	  5bb1c9:       49 89 c5                mov    %rax,%r13
    0.00 :	  5bb1cc:       48 89 83 a8 00 00 00    mov    %rax,0xa8(%rbx)
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1d3:       0f 84 0e 02 00 00       je     5bb3e7 <BitmapHeapNext+0x467>
         :	                                /* no more entries in the bitmap */
         :	                                break;
         :	                        }
         :
         :	#ifdef USE_PREFETCH
         :	                        if (node->prefetch_pages > 0)
    0.00 :	  5bb1d9:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
    0.00 :	  5bb1df:       85 c0                   test   %eax,%eax
    0.00 :	  5bb1e1:       0f 8e ae 01 00 00       jle    5bb395 <BitmapHeapNext+0x415>
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
    0.00 :	  5bb1e7:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb1ea:       89 83 c8 00 00 00       mov    %eax,0xc8(%rbx)
    0.00 :	  5bb1f0:       41 8b 55 00             mov    0x0(%r13),%edx
    0.00 :	  5bb1f4:       89 95 7c ff ff ff       mov    %edx,-0x84(%rbp)
         :	                         * Ignore any claimed entries past what we think is the end of the
         :	                         * relation.  (This is probably not necessary given that we got at
         :	                         * least AccessShareLock on the table before performing any of the
         :	                         * indexscans, but let's be safe.)
         :	                         */
         :	                        if (tbmres->blockno >= scan->rs_nblocks)
    0.00 :	  5bb1fa:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  5bb200:       41 39 44 24 28          cmp    %eax,0x28(%r12)
    0.00 :	  5bb205:       77 2f                   ja     5bb236 <BitmapHeapNext+0x2b6>
    0.00 :	  5bb207:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bb20e:       00 00 
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
         :	                {
         :	                        node->tbmres = tbmres = NULL;
    0.40 :	  5bb210:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb217:       00 00 00 00 
    0.00 :	  5bb21b:       45 31 ed                xor    %r13d,%r13d
         :	                        continue;
    0.00 :	  5bb21e:       eb 8e                   jmp    5bb1ae <BitmapHeapNext+0x22e>
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb220:       89 f0                   mov    %esi,%eax
    0.00 :	  5bb222:       48 8b 15 ef 1e 5c 00    mov    0x5c1eef(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb229:       f7 d0                   not    %eax
    0.00 :	  5bb22b:       48 98                   cltq   
    0.00 :	  5bb22d:       48 8b 0c c2             mov    (%rdx,%rax,8),%rcx
    0.00 :	  5bb231:       e9 88 fe ff ff          jmpq   5bb0be <BitmapHeapNext+0x13e>
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb236:       41 8b 7c 24 64          mov    0x64(%r12),%edi
    0.00 :	  5bb23b:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  5bb241:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb245:       e8 76 b4 0b 00          callq  6766c0 <ReleaseAndReadBuffer>
    0.00 :	  5bb24a:       89 85 78 ff ff ff       mov    %eax,-0x88(%rbp)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb250:       49 8b 54 24 08          mov    0x8(%r12),%rdx
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  5bb255:       89 c6                   mov    %eax,%esi
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb257:       41 89 44 24 64          mov    %eax,0x64(%r12)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb25c:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  5bb263:       49 8b 3c 24             mov    (%r12),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:339
    0.80 :	  5bb267:       e8 e4 43 ee ff          callq  49f650 <heap_page_prune_opt>
         :	        /*
         :	         * We must hold share lock on the buffer content while examining tuple
         :	         * visibility.  Afterwards, however, the tuples we have found to be
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
    0.00 :	  5bb26c:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
    0.00 :	  5bb272:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5bb277:       e8 94 94 0b 00          callq  674710 <LockBuffer>
         :
         :	        /*
         :	         * We need two separate strategies for lossy and non-lossy cases.
         :	         */
         :	        if (tbmres->ntuples >= 0)
    0.00 :	  5bb27c:       41 83 7d 04 00          cmpl   $0x0,0x4(%r13)
    0.00 :	  5bb281:       0f 8c 97 01 00 00       jl     5bb41e <BitmapHeapNext+0x49e>
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb287:       0f 84 c1 01 00 00       je     5bb44e <BitmapHeapNext+0x4ce>
    0.00 :	  5bb28d:       8b 8d 7c ff ff ff       mov    -0x84(%rbp),%ecx
    0.00 :	  5bb293:       0f b7 85 7c ff ff ff    movzwl -0x84(%rbp),%eax
    0.00 :	  5bb29a:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5bb29d:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb2a4:       00 00 00 
    0.00 :	  5bb2a7:       c1 e9 10                shr    $0x10,%ecx
    0.00 :	  5bb2aa:       66 89 4d 80             mov    %cx,-0x80(%rbp)
    0.00 :	  5bb2ae:       66 89 45 9e             mov    %ax,-0x62(%rbp)
    0.00 :	  5bb2b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2b8:       49 63 c6                movslq %r14d,%rax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2bb:       0f b7 55 80             movzwl -0x80(%rbp),%edx
    0.00 :	  5bb2bf:       0f b7 4d 9e             movzwl -0x62(%rbp),%ecx
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2c3:       41 0f b7 44 45 0a       movzwl 0xa(%r13,%rax,2),%eax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2c9:       c7 04 24 01 00 00 00    movl   $0x1,(%rsp)
    0.00 :	  5bb2d0:       4c 8d 45 a0             lea    -0x60(%rbp),%r8
    0.00 :	  5bb2d4:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  5bb2d8:       45 31 c9                xor    %r9d,%r9d
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2db:       66 89 55 c0             mov    %dx,-0x40(%rbp)
    0.00 :	  5bb2df:       66 89 4d c2             mov    %cx,-0x3e(%rbp)
    0.00 :	  5bb2e3:       66 89 45 c4             mov    %ax,-0x3c(%rbp)
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2e7:       48 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%rcx
    0.00 :	  5bb2ee:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb2f4:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb2f8:       e8 23 1f ee ff          callq  49d220 <heap_hot_search_buffer>
    0.00 :	  5bb2fd:       84 c0                   test   %al,%al
    0.00 :	  5bb2ff:       74 18                   je     5bb319 <BitmapHeapNext+0x399>
         :	                                                                           &heapTuple, NULL, true))
         :	                                scan->rs_vistuples[ntup++] = ItemPointerGetOffsetNumber(&tid);
    0.00 :	  5bb301:       48 63 95 54 ff ff ff    movslq -0xac(%rbp),%rdx
    0.00 :	  5bb308:       0f b7 45 c4             movzwl -0x3c(%rbp),%eax
    0.00 :	  5bb30c:       66 41 89 44 54 7c       mov    %ax,0x7c(%r12,%rdx,2)
    0.00 :	  5bb312:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb319:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5bb31d:       45 3b 75 04             cmp    0x4(%r13),%r14d
    0.00 :	  5bb321:       7c 95                   jl     5bb2b8 <BitmapHeapNext+0x338>
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
         :	                                                                                        buffer, snapshot);
         :	                }
         :	        }
         :
         :	        LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.40 :	  5bb323:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
    0.40 :	  5bb329:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb32b:       e8 e0 93 0b 00          callq  674710 <LockBuffer>
         :
         :	        Assert(ntup <= MaxHeapTuplesPerPage);
         :	        scan->rs_ntuples = ntup;
    0.00 :	  5bb330:       8b 85 54 ff ff ff       mov    -0xac(%rbp),%eax
    0.00 :	  5bb336:       41 89 44 24 78          mov    %eax,0x78(%r12)
         :	                        /*
         :	                         * Fetch the current heap page and identify candidate tuples.
         :	                         */
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
    0.00 :	  5bb33b:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  5bb33f:       85 c0                   test   %eax,%eax
    0.00 :	  5bb341:       0f 88 16 01 00 00       js     5bb45d <BitmapHeapNext+0x4dd>
         :	                                node->exact_pages++;
    0.00 :	  5bb347:       48 83 83 b0 00 00 00    addq   $0x1,0xb0(%rbx)
    0.00 :	  5bb34e:       01 
         :	                                node->lossy_pages++;
         :
         :	                        /*
         :	                         * Set rs_cindex to first slot to examine
         :	                         */
         :	                        scan->rs_cindex = 0;
    0.00 :	  5bb34f:       41 c7 44 24 70 00 00    movl   $0x0,0x70(%r12)
    0.00 :	  5bb356:       00 00 
         :	                         * Increase prefetch target if it's not yet at the max.  Note that
         :	                         * we will increase it to zero after fetching the very first
         :	                         * page/tuple, then to one after the second tuple is fetched, then
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
    0.00 :	  5bb358:       8b 8b cc 00 00 00       mov    0xcc(%rbx),%ecx
    0.00 :	  5bb35e:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb360:       8b 15 fe 1c 5c 00       mov    0x5c1cfe(%rip),%edx        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb366:       39 d1                   cmp    %edx,%ecx
    0.00 :	  5bb368:       0f 8d c2 fc ff ff       jge    5bb030 <BitmapHeapNext+0xb0>
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
    0.00 :	  5bb36e:       89 d0                   mov    %edx,%eax
    0.00 :	  5bb370:       c1 e8 1f                shr    $0x1f,%eax
    0.00 :	  5bb373:       01 d0                   add    %edx,%eax
    0.00 :	  5bb375:       d1 f8                   sar    %eax
    0.00 :	  5bb377:       39 c1                   cmp    %eax,%ecx
    0.00 :	  5bb379:       0f 8d 94 00 00 00       jge    5bb413 <BitmapHeapNext+0x493>
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
    0.00 :	  5bb37f:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb381:       0f 8e 5d 02 00 00       jle    5bb5e4 <BitmapHeapNext+0x664>
         :	                                node->prefetch_target *= 2;
    0.00 :	  5bb387:       8d 04 09                lea    (%rcx,%rcx,1),%eax
    0.00 :	  5bb38a:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb390:       e9 8e fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	                        if (node->prefetch_pages > 0)
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
         :	                        }
         :	                        else if (prefetch_iterator)
    0.00 :	  5bb395:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb398:       0f 84 cc 00 00 00       je     5bb46a <BitmapHeapNext+0x4ea>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb39e:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb3a1:       e8 aa 7f 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
    0.00 :	  5bb3a6:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb3a9:       74 12                   je     5bb3bd <BitmapHeapNext+0x43d>
    0.00 :	  5bb3ab:       8b 00                   mov    (%rax),%eax
    0.00 :	  5bb3ad:       89 85 7c ff ff ff       mov    %eax,-0x84(%rbp)
    0.00 :	  5bb3b3:       41 3b 45 00             cmp    0x0(%r13),%eax
    0.00 :	  5bb3b7:       0f 84 3d fe ff ff       je     5bb1fa <BitmapHeapNext+0x27a>
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb3bd:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb3c2:       be 98 00 00 00          mov    $0x98,%esi
    0.00 :	  5bb3c7:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb3cc:       e8 4f 00 1c 00          callq  77b420 <elog_start>
    0.00 :	  5bb3d1:       be 88 b8 88 00          mov    $0x88b888,%esi
    0.00 :	  5bb3d6:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb3db:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb3dd:       e8 4e fe 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb3e2:       e8 e9 e0 ea ff          callq  4694d0 <abort@plt>
         :	        }
         :
         :	        /*
         :	         * if we get here it means we are at the end of the scan..
         :	         */
         :	        return ExecClearTuple(slot);
    0.00 :	  5bb3e7:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb3ee:       e8 1d 8d ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5bb3f3:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :	}
    0.00 :	  5bb3fa:       48 8b 85 38 ff ff ff    mov    -0xc8(%rbp),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    0.80 :	  5bb401:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5bb408:       5b                      pop    %rbx
    0.40 :	  5bb409:       41 5c                   pop    %r12
    0.00 :	  5bb40b:       41 5d                   pop    %r13
    0.00 :	  5bb40d:       41 5e                   pop    %r14
    1.20 :	  5bb40f:       41 5f                   pop    %r15
    0.00 :	  5bb411:       c9                      leaveq 
    1.20 :	  5bb412:       c3                      retq   
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
    0.00 :	  5bb413:       89 93 cc 00 00 00       mov    %edx,0xcc(%rbx)
    0.00 :	  5bb419:       e9 05 fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb41e:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb424:       85 d2                   test   %edx,%edx
    0.00 :	  5bb426:       0f 88 9e 01 00 00       js     5bb5ca <BitmapHeapNext+0x64a>
    0.00 :	  5bb42c:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb432:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb435:       4c 63 c8                movslq %eax,%r9
    0.00 :	  5bb438:       49 c1 e1 0d             shl    $0xd,%r9
    0.00 :	  5bb43c:       4c 03 0d b5 46 60 00    add    0x6046b5(%rip),%r9        # bbfaf8 <BufferBlocks>
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb443:       41 0f b7 41 0c          movzwl 0xc(%r9),%eax
    0.00 :	  5bb448:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  5bb44c:       77 2b                   ja     5bb479 <BitmapHeapNext+0x4f9>
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb44e:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb455:       00 00 00 
    0.00 :	  5bb458:       e9 c6 fe ff ff          jmpq   5bb323 <BitmapHeapNext+0x3a3>
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
         :	                                node->exact_pages++;
         :	                        else
         :	                                node->lossy_pages++;
    0.00 :	  5bb45d:       48 83 83 b8 00 00 00    addq   $0x1,0xb8(%rbx)
    0.00 :	  5bb464:       01 
    0.00 :	  5bb465:       e9 e5 fe ff ff          jmpq   5bb34f <BitmapHeapNext+0x3cf>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb46a:       41 8b 4d 00             mov    0x0(%r13),%ecx
    0.00 :	  5bb46e:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  5bb474:       e9 81 fd ff ff          jmpq   5bb1fa <BitmapHeapNext+0x27a>
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb479:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb47c:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  5bb480:       48 c1 e8 02             shr    $0x2,%rax
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb484:       66 85 c0                test   %ax,%ax
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb487:       66 89 85 40 ff ff ff    mov    %ax,-0xc0(%rbp)
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb48e:       74 be                   je     5bb44e <BitmapHeapNext+0x4ce>
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb490:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  5bb496:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  5bb49c:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb4a3:       00 00 00 
    0.00 :	  5bb4a6:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  5bb4a9:       66 89 85 60 ff ff ff    mov    %ax,-0xa0(%rbp)
    0.00 :	  5bb4b0:       eb 18                   jmp    5bb4ca <BitmapHeapNext+0x54a>
    0.00 :	  5bb4b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    2.80 :	  5bb4b8:       41 83 c6 01             add    $0x1,%r14d
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb4bc:       66 44 3b b5 40 ff ff    cmp    -0xc0(%rbp),%r14w
    0.00 :	  5bb4c3:       ff 
    0.00 :	  5bb4c4:       0f 87 59 fe ff ff       ja     5bb323 <BitmapHeapNext+0x3a3>
         :	                {
         :	                        ItemId          lp;
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
    0.00 :	  5bb4ca:       41 0f b7 c6             movzwl %r14w,%eax
         :	                        if (!ItemIdIsNormal(lp))
    0.00 :	  5bb4ce:       48 8d 50 03             lea    0x3(%rax),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:389
    2.00 :	  5bb4d2:       41 8b 44 91 08          mov    0x8(%r9,%rdx,4),%eax
    0.00 :	  5bb4d7:       25 00 80 01 00          and    $0x18000,%eax
    0.00 :	  5bb4dc:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  5bb4e1:       75 d5                   jne    5bb4b8 <BitmapHeapNext+0x538>
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.40 :	  5bb4e3:       41 0f b7 44 91 08       movzwl 0x8(%r9,%rdx,4),%eax
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.40 :	  5bb4e9:       0f b7 8d 7c ff ff ff    movzwl -0x84(%rbp),%ecx
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb4f0:       48 8d 7d a0             lea    -0x60(%rbp),%rdi
    0.00 :	  5bb4f4:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.40 :	  5bb4fb:       25 ff 7f 00 00          and    $0x7fff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:391
    1.20 :	  5bb500:       49 8d 04 01             lea    (%r9,%rax,1),%rax
    0.00 :	  5bb504:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	                        loctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb508:       41 0f b7 44 91 0a       movzwl 0xa(%r9,%rdx,4),%eax
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb50e:       0f b7 95 60 ff ff ff    movzwl -0xa0(%rbp),%edx
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
    0.40 :	  5bb515:       66 d1 e8                shr    %ax
    0.00 :	  5bb518:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb51b:       89 45 a0                mov    %eax,-0x60(%rbp)
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb51e:       49 8b 04 24             mov    (%r12),%rax
    0.00 :	  5bb522:       8b 40 40                mov    0x40(%rax),%eax
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb525:       66 89 55 a4             mov    %dx,-0x5c(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb529:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb530:       66 89 4d a6             mov    %cx,-0x5a(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.60 :	  5bb534:       66 44 89 75 a8          mov    %r14w,-0x58(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.40 :	  5bb539:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb53f:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.40 :	  5bb542:       ff 16                   callq  *(%rsi)
         :	                        if (valid)
    0.40 :	  5bb544:       84 c0                   test   %al,%al
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb546:       41 89 c0                mov    %eax,%r8d
         :	                        if (valid)
    0.00 :	  5bb549:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:396
    1.20 :	  5bb550:       75 31                   jne    5bb583 <BitmapHeapNext+0x603>
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    0.80 :	  5bb552:       41 0f be f8             movsbl %r8b,%edi
    0.00 :	  5bb556:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb55a:       4c 8b 85 58 ff ff ff    mov    -0xa8(%rbp),%r8
    0.00 :	  5bb561:       8b 8d 78 ff ff ff       mov    -0x88(%rbp),%ecx
    1.60 :	  5bb567:       48 8d 55 a0             lea    -0x60(%rbp),%rdx
    0.00 :	  5bb56b:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb572:       e8 e9 90 0d 00          callq  694660 <CheckForSerializableConflictOut>
    0.00 :	  5bb577:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb57e:       e9 35 ff ff ff          jmpq   5bb4b8 <BitmapHeapNext+0x538>
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb583:       48 63 85 54 ff ff ff    movslq -0xac(%rbp),%rax
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    4.40 :	  5bb58a:       48 8d 75 a0             lea    -0x60(%rbp),%rsi
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb58e:       66 45 89 74 44 7c       mov    %r14w,0x7c(%r12,%rax,2)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:398
    8.40 :	  5bb594:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
    0.00 :	  5bb59b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb59f:       48 8b 95 58 ff ff ff    mov    -0xa8(%rbp),%rdx
    0.40 :	  5bb5a6:       44 88 85 18 ff ff ff    mov    %r8b,-0xe8(%rbp)
    0.00 :	  5bb5ad:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb5b4:       e8 e7 95 0d 00          callq  694ba0 <PredicateLockTuple>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    1.60 :	  5bb5b9:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb5c0:       44 0f b6 85 18 ff ff    movzbl -0xe8(%rbp),%r8d
    0.00 :	  5bb5c7:       ff 
    0.00 :	  5bb5c8:       eb 88                   jmp    5bb552 <BitmapHeapNext+0x5d2>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb5ca:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb5d0:       48 8b 15 41 1b 5c 00    mov    0x5c1b41(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb5d7:       f7 d0                   not    %eax
    0.00 :	  5bb5d9:       48 98                   cltq   
    0.00 :	  5bb5db:       4c 8b 0c c2             mov    (%rdx,%rax,8),%r9
    0.00 :	  5bb5df:       e9 5f fe ff ff          jmpq   5bb443 <BitmapHeapNext+0x4c3>
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
         :	                                node->prefetch_target *= 2;
         :	                        else
         :	                                node->prefetch_target++;
    0.00 :	  5bb5e4:       8d 41 01                lea    0x1(%rcx),%eax
    0.00 :	  5bb5e7:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb5ed:       e9 31 fa ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5f2:       48 8b 7f 30             mov    0x30(%rdi),%rdi
    0.00 :	  5bb5f6:       e8 d5 0d ff ff          callq  5ac3d0 <MultiExecProcNode>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb5fb:       48 85 c0                test   %rax,%rax
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5fe:       49 89 c5                mov    %rax,%r13
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb601:       74 08                   je     5bb60b <BitmapHeapNext+0x68b>
    0.00 :	  5bb603:       81 38 ba 03 00 00       cmpl   $0x3ba,(%rax)
    0.00 :	  5bb609:       74 2a                   je     5bb635 <BitmapHeapNext+0x6b5>
         :	                        elog(ERROR, "unrecognized result from subplan");
    0.00 :	  5bb60b:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb610:       be 6b 00 00 00          mov    $0x6b,%esi
    0.00 :	  5bb615:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb61a:       e8 01 fe 1b 00          callq  77b420 <elog_start>
    0.00 :	  5bb61f:       be c0 b7 88 00          mov    $0x88b7c0,%esi
    0.00 :	  5bb624:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb629:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb62b:       e8 00 fc 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb630:       e8 9b de ea ff          callq  4694d0 <abort@plt>
         :
         :	                node->tbm = tbm;
    0.00 :	  5bb635:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb63c:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bb63f:       e8 dc 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                node->tbmres = tbmres = NULL;
    0.00 :	  5bb644:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb64b:       00 00 00 00 
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb64f:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb656:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb658:       8b 0d 06 1a 5c 00       mov    0x5c1a06(%rip),%ecx        # b7d064 <target_prefetch_pages>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb65e:       48 89 85 30 ff ff ff    mov    %rax,-0xd0(%rbp)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb665:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb667:       0f 8e 74 f9 ff ff       jle    5bafe1 <BitmapHeapNext+0x61>
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb66d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5bb670:       e8 ab 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                        node->prefetch_pages = 0;
    0.00 :	  5bb675:       c7 83 c8 00 00 00 00    movl   $0x0,0xc8(%rbx)
    0.00 :	  5bb67c:       00 00 00 
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb67f:       49 89 c7                mov    %rax,%r15
    0.00 :	  5bb682:       48 89 83 c0 00 00 00    mov    %rax,0xc0(%rbx)
         :	                        node->prefetch_pages = 0;
         :	                        node->prefetch_target = -1;
    0.00 :	  5bb689:       c7 83 cc 00 00 00 ff    movl   $0xffffffff,0xcc(%rbx)
    0.00 :	  5bb690:       ff ff ff 
    0.00 :	  5bb693:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb695:       e9 47 f9 ff ff          jmpq   5bafe1 <BitmapHeapNext+0x61>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   64.84 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    6.59 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    2.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    2.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    2.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.65 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    1.65 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    1.65 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1099
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5750 <HeapTupleSatisfiesMVCC>:
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    0.55 :	  7a5750:       55                      push   %rbp
    0.55 :	  7a5751:       48 89 e5                mov    %rsp,%rbp
    1.65 :	  7a5754:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7a5758:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7a575c:       41 89 d6                mov    %edx,%r14d
    0.55 :	  7a575f:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.55 :	  7a5763:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7a5767:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tuple = htup->t_data;
    0.00 :	  7a576b:       48 8b 5f 10             mov    0x10(%rdi),%rbx
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    2.75 :	  7a576f:       49 89 f5                mov    %rsi,%r13
         :	        HeapTupleHeader tuple = htup->t_data;
         :
         :	        Assert(ItemPointerIsValid(&htup->t_self));
         :	        Assert(htup->t_tableOid != InvalidOid);
         :
         :	        if (!HeapTupleHeaderXminCommitted(tuple))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    7.14 :	  7a5772:       0f b7 4b 14             movzwl 0x14(%rbx),%ecx
   64.84 :	  7a5776:       0f b7 d1                movzwl %cx,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    1.10 :	  7a5779:       f6 c6 01                test   $0x1,%dh
    0.00 :	  7a577c:       75 72                   jne    7a57f0 <HeapTupleSatisfiesMVCC+0xa0>
         :	        {
         :	                if (HeapTupleHeaderXminInvalid(tuple))
    0.00 :	  7a577e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5780:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a5785:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  7a578a:       0f 84 06 01 00 00       je     7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :
         :	                /* Used by pre-9.0 binary upgrades */
         :	                if (tuple->t_infomask & HEAP_MOVED_OFF)
    0.00 :	  7a5790:       f6 c6 40                test   $0x40,%dh
    0.00 :	  7a5793:       0f 84 27 01 00 00       je     7a58c0 <HeapTupleSatisfiesMVCC+0x170>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a5799:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a579c:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a57a1:       74 04                   je     7a57a7 <HeapTupleSatisfiesMVCC+0x57>
    0.00 :	  7a57a3:       44 8b 63 08             mov    0x8(%rbx),%r12d
         :
         :	                        if (TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a57a7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57aa:       e8 f1 ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a57af:       84 c0                   test   %al,%al
    0.00 :	  7a57b1:       0f 85 df 00 00 00       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;
         :	                        if (!TransactionIdIsInProgress(xvac))
    0.00 :	  7a57b7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ba:       e8 f1 c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a57bf:       84 c0                   test   %al,%al
    0.00 :	  7a57c1:       0f 85 1f 01 00 00       jne    7a58e6 <HeapTupleSatisfiesMVCC+0x196>
         :	                        {
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a57c7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ca:       e8 11 ab d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a57cf:       84 c0                   test   %al,%al
    0.00 :	  7a57d1:       0f 85 79 02 00 00       jne    7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
         :	                                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a57d7:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a57dc:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a57de:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a57e1:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a57e4:       e8 b7 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a57e9:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a57ed:       0f 1f 00                nopl   (%rax)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.10 :	  7a57f0:       89 d0                   mov    %edx,%eax
    0.00 :	  7a57f2:       25 00 03 00 00          and    $0x300,%eax
    0.55 :	  7a57f7:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a57fc:       0f 85 86 00 00 00       jne    7a5888 <HeapTupleSatisfiesMVCC+0x138>
         :	                return false;                   /* treat as still in progress */
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid or aborted */
         :	                return true;
         :
         :	        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    1.65 :	  7a5802:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5808:       0f 85 a2 00 00 00       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a580e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5810:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a5815:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5818:       0f 84 92 00 00 00       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                return true;
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a581e:       f6 c6 10                test   $0x10,%dh
    0.00 :	  7a5821:       0f 85 b9 01 00 00       jne    7a59e0 <HeapTupleSatisfiesMVCC+0x290>
         :	                }
         :	                /* it must have aborted or crashed */
         :	                return true;
         :	        }
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
    0.00 :	  7a5827:       80 e6 04                and    $0x4,%dh
    0.00 :	  7a582a:       75 44                   jne    7a5870 <HeapTupleSatisfiesMVCC+0x120>
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a582c:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a582f:       90                      nop
    0.00 :	  7a5830:       e8 6b ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5835:       84 c0                   test   %al,%al
    0.00 :	  7a5837:       0f 85 43 01 00 00       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :
         :	                if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a583d:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5840:       e8 6b c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5845:       84 c0                   test   %al,%al
    0.00 :	  7a5847:       75 67                   jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5849:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a584c:       e8 8f aa d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5851:       84 c0                   test   %al,%al
    0.00 :	  7a5853:       0f 84 20 02 00 00       je     7a5a79 <HeapTupleSatisfiesMVCC+0x329>
         :	                                                InvalidTransactionId);
         :	                        return true;
         :	                }
         :
         :	                /* xmax transaction committed */
         :	                SetHintBits(tuple, buffer, HEAP_XMAX_COMMITTED,
    0.00 :	  7a5859:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	  7a585c:       ba 00 04 00 00          mov    $0x400,%edx
    0.00 :	  7a5861:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5864:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5867:       e8 34 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a586c:       0f 1f 40 00             nopl   0x0(%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5870:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5873:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5876:       e8 85 fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a587b:       84 c0                   test   %al,%al
    0.00 :	  7a587d:       0f 95 c0                setne  %al
    0.00 :	  7a5880:       eb 16                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5882:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.10 :	  7a5888:       8b 3b                   mov    (%rbx),%edi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    6.59 :	  7a588a:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a588d:       e8 6e fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    0.55 :	  7a5892:       84 c0                   test   %al,%al
    0.00 :	  7a5894:       74 6a                   je     7a5900 <HeapTupleSatisfiesMVCC+0x1b0>
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5896:       31 c0                   xor    %eax,%eax
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    2.20 :	  7a5898:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7a589c:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7a58a1:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    1.10 :	  7a58a6:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  7a58ab:       c9                      leaveq 
    1.10 :	  7a58ac:       c3                      retq   
    0.00 :	  7a58ad:       0f 1f 00                nopl   (%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1099
    1.65 :	  7a58b0:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  7a58b5:       eb e1                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a58b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7a58be:       00 00 
         :	                                SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                        InvalidTransactionId);
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
    0.00 :	  7a58c0:       66 85 c9                test   %cx,%cx
    0.00 :	  7a58c3:       79 4b                   jns    7a5910 <HeapTupleSatisfiesMVCC+0x1c0>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a58c5:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a58c8:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a58cd:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a58d0:       0f 85 fa 00 00 00       jne    7a59d0 <HeapTupleSatisfiesMVCC+0x280>
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a58d6:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a58d9:       e8 c2 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a58de:       84 c0                   test   %al,%al
    0.00 :	  7a58e0:       0f 84 4a 01 00 00       je     7a5a30 <HeapTupleSatisfiesMVCC+0x2e0>
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a58e6:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a58ea:       89 d0                   mov    %edx,%eax
    0.00 :	  7a58ec:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a58f1:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a58f6:       0f 84 06 ff ff ff       je     7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a58fc:       eb 8a                   jmp    7a5888 <HeapTupleSatisfiesMVCC+0x138>
    0.00 :	  7a58fe:       66 90                   xchg   %ax,%ax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    2.20 :	  7a5900:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.55 :	  7a5904:       e9 f9 fe ff ff          jmpq   7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a5909:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                InvalidTransactionId);
         :	                                        return false;
         :	                                }
         :	                        }
         :	                }
         :	                else if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5910:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a5912:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5918:       e8 83 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a591d:       84 c0                   test   %al,%al
    0.00 :	  7a591f:       90                      nop
    0.00 :	  7a5920:       74 76                   je     7a5998 <HeapTupleSatisfiesMVCC+0x248>
         :	                {
         :	                        if (HeapTupleHeaderGetCmin(tuple) >= snapshot->curcid)
    0.00 :	  7a5922:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5925:       e8 96 eb ff ff          callq  7a44c0 <HeapTupleHeaderGetCmin>
    0.00 :	  7a592a:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a592e:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5930:       0f 83 60 ff ff ff       jae    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;   /* inserted after scan started */
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid */
    0.00 :	  7a5936:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :	                                return true;
         :
         :	                        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))        /* not deleter */
    0.00 :	  7a593a:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5940:       0f 85 6a ff ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5946:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5948:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a594d:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5950:       0f 84 5a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                                return true;
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a5956:       80 e6 10                and    $0x10,%dh
    0.00 :	  7a5959:       0f 84 0a 01 00 00       je     7a5a69 <HeapTupleSatisfiesMVCC+0x319>
         :	                        {
         :	                                TransactionId xmax;
         :
         :	                                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a595f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5962:       e8 b9 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  7a5967:       89 c7                   mov    %eax,%edi
         :
         :	                                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                                Assert(TransactionIdIsValid(xmax));
         :
         :	                                /* updating subtransaction must have aborted */
         :	                                if (!TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a5969:       e8 32 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a596e:       84 c0                   test   %al,%al
    0.00 :	  7a5970:       0f 84 3a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5976:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  7a597d:       00 00 00 
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
    0.00 :	  7a5980:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5983:       e8 58 eb ff ff          callq  7a44e0 <HeapTupleHeaderGetCmax>
    0.00 :	  7a5988:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a598c:       0f 93 c0                setae  %al
    0.00 :	  7a598f:       e9 04 ff ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5998:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a599a:       e8 11 c3 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a599f:       84 c0                   test   %al,%al
    0.00 :	  7a59a1:       0f 85 ef fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a59a7:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a59a9:       e8 32 a9 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a59ae:       84 c0                   test   %al,%al
    0.00 :	  7a59b0:       0f 84 9a 00 00 00       je     7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a59b6:       8b 0b                   mov    (%rbx),%ecx
    0.00 :	  7a59b8:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a59bd:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a59c0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59c3:       e8 d8 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a59c8:       e9 19 ff ff ff          jmpq   7a58e6 <HeapTupleSatisfiesMVCC+0x196>
    0.00 :	  7a59cd:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a59d0:       44 8b 63 08             mov    0x8(%rbx),%r12d
    0.00 :	  7a59d4:       e9 fd fe ff ff          jmpq   7a58d6 <HeapTupleSatisfiesMVCC+0x186>
    0.00 :	  7a59d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59e0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a59e8:       e8 33 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59ed:       89 c7                   mov    %eax,%edi
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59ef:       41 89 c4                mov    %eax,%r12d
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59f2:       e8 a9 ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a59f7:       84 c0                   test   %al,%al
    0.00 :	  7a59f9:       75 85                   jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                if (TransactionIdIsInProgress(xmax))
    0.00 :	  7a59fb:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a59fe:       e8 ad c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a03:       84 c0                   test   %al,%al
    0.00 :	  7a5a05:       0f 85 a5 fe ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :	                if (TransactionIdDidCommit(xmax))
    0.00 :	  7a5a0b:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a0e:       e8 cd a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a13:       84 c0                   test   %al,%al
    0.00 :	  7a5a15:       0f 84 95 fe ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                {
         :	                        /* updating transaction committed, but when? */
         :	                        if (XidInMVCCSnapshot(xmax, snapshot))
    0.00 :	  7a5a1b:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5a1e:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a21:       e8 da fb ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5a26:       84 c0                   test   %al,%al
    0.00 :	  7a5a28:       0f 95 c0                setne  %al
    0.00 :	  7a5a2b:       e9 68 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
    0.00 :	  7a5a30:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a33:       e8 78 c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a38:       84 c0                   test   %al,%al
    0.00 :	  7a5a3a:       0f 85 56 fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a5a40:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a43:       e8 98 a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a48:       84 c0                   test   %al,%al
    0.00 :	  7a5a4a:       0f 85 87 fd ff ff       jne    7a57d7 <HeapTupleSatisfiesMVCC+0x87>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                HeapTupleHeaderGetRawXmin(tuple));
         :	                else
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_INVALID,
    0.00 :	  7a5a50:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a52:       ba 00 02 00 00          mov    $0x200,%edx
    0.00 :	  7a5a57:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a5a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a5d:       e8 3e f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a62:       31 c0                   xor    %eax,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a64:       e9 2f fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                                        return true;    /* updated after scan started */
         :	                                else
         :	                                        return false;           /* updated before scan started */
         :	                        }
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5a69:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5a6c:       e8 2f ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5a71:       84 c0                   test   %al,%al
    0.00 :	  7a5a73:       0f 85 07 ff ff ff       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMAX_INVALID,
    0.00 :	  7a5a79:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a7b:       ba 00 08 00 00          mov    $0x800,%edx
    0.00 :	  7a5a80:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a83:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a86:       e8 15 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a8b:       b8 01 00 00 00          mov    $0x1,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a90:       e9 03 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   14.96 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
   13.39 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
   10.24 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    6.30 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    5.51 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    4.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    4.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    3.94 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    3.15 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    3.15 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    3.15 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    3.15 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    3.15 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    2.36 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    2.36 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1157
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1185
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    1.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1195
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    0.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f400 <slot_getattr>:
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.79 :	  46f400:       55                      push   %rbp
    0.00 :	  46f401:       48 89 e5                mov    %rsp,%rbp
    3.15 :	  46f404:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    1.57 :	  46f408:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.79 :	  46f40c:       48 89 fb                mov    %rdi,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    6.30 :	  46f40f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  46f413:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  46f417:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f41b:       85 f6                   test   %esi,%esi
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    3.15 :	  46f41d:       49 89 d4                mov    %rdx,%r12
         :	        HeapTuple       tuple = slot->tts_tuple;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1157
    1.57 :	  46f420:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
    0.00 :	  46f424:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f428:       0f 8e a2 00 00 00       jle    46f4d0 <slot_getattr+0xd0>
         :	        }
         :
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    3.15 :	  46f42e:       3b 73 24                cmp    0x24(%rbx),%esi
    0.00 :	  46f431:       7e 65                   jle    46f498 <slot_getattr+0x98>
         :	        }
         :
         :	        /*
         :	         * return NULL if attnum is out of range according to the tupdesc
         :	         */
         :	        if (attnum > tupleDesc->natts)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1185
    1.57 :	  46f433:       3b 32                   cmp    (%rdx),%esi
    0.00 :	  46f435:       7f 51                   jg     46f488 <slot_getattr+0x88>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1195
    0.79 :	  46f437:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f43a:       0f 84 34 01 00 00       je     46f574 <slot_getattr+0x174>
         :	         *
         :	         * (We have to check this separately because of various inheritance and
         :	         * table-alteration scenarios: the tuple could be either longer or shorter
         :	         * than the tupdesc.)
         :	         */
         :	        tup = tuple->t_data;
    0.00 :	  46f440:       48 8b 7f 10             mov    0x10(%rdi),%rdi
         :	        if (attnum > HeapTupleHeaderGetNatts(tup))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    0.79 :	  46f444:       0f b7 47 12             movzwl 0x12(%rdi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
   13.39 :	  46f448:       25 ff 07 00 00          and    $0x7ff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.57 :	  46f44d:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f44f:       7f 37                   jg     46f488 <slot_getattr+0x88>
         :	        }
         :
         :	        /*
         :	         * check if target attribute is null: no point in groveling through tuple
         :	         */
         :	        if (HeapTupleHasNulls(tuple) && att_isnull(attnum - 1, tup->t_bits))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    3.94 :	  46f451:       f6 47 14 01             testb  $0x1,0x14(%rdi)
    2.36 :	  46f455:       74 18                   je     46f46f <slot_getattr+0x6f>
    0.00 :	  46f457:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  46f45a:       89 c8                   mov    %ecx,%eax
    0.00 :	  46f45c:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46f45f:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46f462:       48 98                   cltq   
    0.00 :	  46f464:       0f b6 44 07 17          movzbl 0x17(%rdi,%rax,1),%eax
    0.00 :	  46f469:       d3 f8                   sar    %cl,%eax
    0.00 :	  46f46b:       a8 01                   test   $0x1,%al
    0.00 :	  46f46d:       74 19                   je     46f488 <slot_getattr+0x88>
         :	        /*
         :	         * If the attribute's column has been dropped, we force a NULL result.
         :	         * This case should not happen in normal use, but it could happen if we
         :	         * are executing a plan cached before the column was dropped.
         :	         */
         :	        if (tupleDesc->attrs[attnum - 1]->attisdropped)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    1.57 :	  46f46f:       4c 63 ee                movslq %esi,%r13
    0.00 :	  46f472:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  46f476:       4d 8d 75 ff             lea    -0x1(%r13),%r14
    0.00 :	  46f47a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
    4.72 :	  46f47e:       80 78 61 00             cmpb   $0x0,0x61(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
   10.24 :	  46f482:       74 7c                   je     46f500 <slot_getattr+0x100>
    0.00 :	  46f484:       0f 1f 40 00             nopl   0x0(%rax)
         :	        {
         :	                *isnull = true;
    0.00 :	  46f488:       41 c6 04 24 01          movb   $0x1,(%r12)
    0.00 :	  46f48d:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f48f:       eb 20                   jmp    46f4b1 <slot_getattr+0xb1>
    0.00 :	  46f491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
         :	        {
         :	                *isnull = slot->tts_isnull[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    0.79 :	  46f498:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  46f49c:       48 63 d6                movslq %esi,%rdx
    0.00 :	  46f49f:       0f b6 44 10 ff          movzbl -0x1(%rax,%rdx,1),%eax
    0.79 :	  46f4a4:       41 88 04 24             mov    %al,(%r12)
         :	                return slot->tts_values[attnum - 1];
    0.00 :	  46f4a8:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f4ac:       48 8b 44 d0 f8          mov    -0x8(%rax,%rdx,8),%rax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4b1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4b5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    0.79 :	  46f4ba:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.79 :	  46f4bf:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    3.15 :	  46f4c4:       c9                      leaveq 
    4.72 :	  46f4c5:       c3                      retq   
    0.00 :	  46f4c6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46f4cd:       00 00 00 
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
    0.00 :	  46f4d0:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f4d3:       74 4b                   je     46f520 <slot_getattr+0x120>
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
    0.00 :	  46f4d5:       48 8d 43 40             lea    0x40(%rbx),%rax
    0.00 :	  46f4d9:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  46f4dc:       74 6c                   je     46f54a <slot_getattr+0x14a>
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4de:       4c 89 e1                mov    %r12,%rcx
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4e1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4e5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  46f4ea:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4ef:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  46f4f4:       c9                      leaveq 
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4f5:       e9 d6 f7 ff ff          jmpq   46ecd0 <heap_getsysattr>
    0.00 :	  46f4fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Extract the attribute, along with any preceding attributes.
         :	         */
         :	        slot_deform_tuple(slot, attnum);
    0.00 :	  46f500:       48 89 df                mov    %rbx,%rdi
    0.00 :	  46f503:       e8 08 fa ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    5.51 :	  46f508:       48 8b 43 30             mov    0x30(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    2.36 :	  46f50c:       42 0f b6 44 28 ff       movzbl -0x1(%rax,%r13,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
   14.96 :	  46f512:       41 88 04 24             mov    %al,(%r12)
         :	        return slot->tts_values[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    3.15 :	  46f516:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f51a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.57 :	  46f51e:       eb 91                   jmp    46f4b1 <slot_getattr+0xb1>
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
    0.00 :	  46f520:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f525:       be 8f 04 00 00          mov    $0x48f,%esi
    0.00 :	  46f52a:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f52f:       e8 ec be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f534:       be 40 f7 7a 00          mov    $0x7af740,%esi
    0.00 :	  46f539:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f53e:       31 c0                   xor    %eax,%eax
    0.00 :	  46f540:       e8 eb bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f545:       e8 86 9f ff ff          callq  4694d0 <abort@plt>
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
    0.00 :	  46f54a:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f54f:       be 91 04 00 00          mov    $0x491,%esi
    0.00 :	  46f554:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f559:       e8 c2 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f55e:       be 78 f7 7a 00          mov    $0x7af778,%esi
    0.00 :	  46f563:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f568:       31 c0                   xor    %eax,%eax
    0.00 :	  46f56a:       e8 c1 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f56f:       e8 5c 9f ff ff          callq  4694d0 <abort@plt>
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f574:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f579:       be ac 04 00 00          mov    $0x4ac,%esi
    0.00 :	  46f57e:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f583:       e8 98 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f588:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f58d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f592:       31 c0                   xor    %eax,%eax
    0.00 :	  46f594:       e8 97 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f599:       e8 32 9f ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

    8.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    7.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    7.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1960
    6.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1995
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1964
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b1430 <ExecMakeFunctionResultNoSets>:
         :	static Datum
         :	ExecMakeFunctionResultNoSets(FuncExprState *fcache,
         :	                                                         ExprContext *econtext,
         :	                                                         bool *isNull,
         :	                                                         ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    6.00 :	  5b1430:       55                      push   %rbp
    0.00 :	  5b1431:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b1434:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    3.00 :	  5b1436:       49 89 d7                mov    %rdx,%r15
    0.00 :	  5b1439:       41 56                   push   %r14
    0.00 :	  5b143b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5b143e:       41 55                   push   %r13
    1.00 :	  5b1440:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5b1443:       41 54                   push   %r12
    0.00 :	  5b1445:       53                      push   %rbx
    1.00 :	  5b1446:       48 89 cb                mov    %rcx,%rbx
    2.00 :	  5b1449:       48 83 ec 48             sub    $0x48,%rsp
         :	        FunctionCallInfo fcinfo;
         :	        PgStat_FunctionCallUsage fcusage;
         :	        int                     i;
         :
         :	        /* Guard against stack overflow due to overly complex expressions */
         :	        check_stack_depth();
    0.00 :	  5b144d:       e8 8e a5 0e 00          callq  69b9e0 <check_stack_depth>
         :
         :	        if (isDone)
    0.00 :	  5b1452:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b1455:       74 06                   je     5b145d <ExecMakeFunctionResultNoSets+0x2d>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b1457:       c7 03 00 00 00 00       movl   $0x0,(%rbx)
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    5.00 :	  5b145d:       49 8b 45 18             mov    0x18(%r13),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5b1461:       48 85 c0                test   %rax,%rax
    0.00 :	  5b1464:       0f 84 c2 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b146a:       4c 8b 60 08             mov    0x8(%rax),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.00 :	  5b146e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b1471:       0f 84 b5 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    3.00 :	  5b1477:       31 db                   xor    %ebx,%ebx
    0.00 :	  5b1479:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1964
    1.00 :	  5b1480:       49 8b 04 24             mov    (%r12),%rax
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.00 :	  5b1484:       49 8d 94 1d b0 03 00    lea    0x3b0(%r13,%rbx,1),%rdx
    0.00 :	  5b148b:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    5.00 :	  5b148c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b148e:       4c 89 f6                mov    %r14,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.00 :	  5b1491:       48 89 c7                mov    %rax,%rdi
    1.00 :	  5b1494:       ff 50 10                callq  *0x10(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    5.00 :	  5b1497:       49 89 84 dd 90 00 00    mov    %rax,0x90(%r13,%rbx,8)
    0.00 :	  5b149e:       00 
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.00 :	  5b149f:       4d 8b 64 24 08          mov    0x8(%r12),%r12
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    4.00 :	  5b14a4:       8d 53 01                lea    0x1(%rbx),%edx
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    3.00 :	  5b14a7:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  5b14ab:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b14ae:       75 d0                   jne    5b1480 <ExecMakeFunctionResultNoSets+0x50>
         :
         :	        /*
         :	         * If function is strict, and there are any NULL arguments, skip calling
         :	         * the function and return NULL.
         :	         */
         :	        if (fcache->func.fn_strict)
    0.00 :	  5b14b0:       41 80 7d 2e 00          cmpb   $0x0,0x2e(%r13)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    3.00 :	  5b14b5:       74 34                   je     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
    0.00 :	  5b14b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b14be:       00 00 
         :	        {
         :	                while (--i >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    3.00 :	  5b14c0:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5b14c3:       78 26                   js     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
         :	                {
         :	                        if (fcinfo->argnull[i])
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.00 :	  5b14c5:       48 63 c2                movslq %edx,%rax
    0.00 :	  5b14c8:       41 80 bc 05 b0 03 00    cmpb   $0x0,0x3b0(%r13,%rax,1)
    0.00 :	  5b14cf:       00 00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    7.00 :	  5b14d1:       74 ed                   je     5b14c0 <ExecMakeFunctionResultNoSets+0x90>
         :	                        {
         :	                                *isNull = true;
    0.00 :	  5b14d3:       41 c6 07 01             movb   $0x1,(%r15)
    0.00 :	  5b14d7:       31 db                   xor    %ebx,%ebx
         :	        *isNull = fcinfo->isnull;
         :
         :	        pgstat_end_function_usage(&fcusage, true);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.00 :	  5b14d9:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5b14dd:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b14e0:       5b                      pop    %rbx
    4.00 :	  5b14e1:       41 5c                   pop    %r12
    0.00 :	  5b14e3:       41 5d                   pop    %r13
    1.00 :	  5b14e5:       41 5e                   pop    %r14
    0.00 :	  5b14e7:       41 5f                   pop    %r15
    1.00 :	  5b14e9:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    8.00 :	  5b14ea:       c3                      retq   
         :
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1960
    7.00 :	  5b14eb:       49 8d 5d 70             lea    0x70(%r13),%rbx
         :	                                return (Datum) 0;
         :	                        }
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
    0.00 :	  5b14ef:       4c 8d 65 90             lea    -0x70(%rbp),%r12
    0.00 :	  5b14f3:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b14f6:       4c 89 e6                mov    %r12,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
    3.00 :	  5b14f9:       e8 82 12 09 00          callq  642780 <pgstat_init_function_usage>
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    1.00 :	  5b14fe:       49 8b 45 70             mov    0x70(%r13),%rax
    2.00 :	  5b1502:       48 89 df                mov    %rbx,%rdi
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
    0.00 :	  5b1505:       41 c6 85 8c 00 00 00    movb   $0x0,0x8c(%r13)
    0.00 :	  5b150c:       00 
         :	        result = FunctionCallInvoke(fcinfo);
    1.00 :	  5b150d:       ff 10                   callq  *(%rax)
    2.00 :	  5b150f:       48 89 c3                mov    %rax,%rbx
         :	        *isNull = fcinfo->isnull;
    0.00 :	  5b1512:       41 0f b6 85 8c 00 00    movzbl 0x8c(%r13),%eax
    0.00 :	  5b1519:       00 
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.00 :	  5b151a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5b151f:       4c 89 e7                mov    %r12,%rdi
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
         :	        *isNull = fcinfo->isnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    2.00 :	  5b1522:       41 88 07                mov    %al,(%r15)
         :
         :	        pgstat_end_function_usage(&fcusage, true);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1995
    2.00 :	  5b1525:       e8 a6 10 09 00          callq  6425d0 <pgstat_end_function_usage>
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    5.00 :	  5b152a:       eb ad                   jmp    5b14d9 <ExecMakeFunctionResultNoSets+0xa9>
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b152c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b152e:       eb 80                   jmp    5b14b0 <ExecMakeFunctionResultNoSets+0x80>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   13.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   11.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
   11.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    7.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    3.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:193
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674520 <GetPrivateRefCountEntry>:
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.00 :	  674520:       55                      push   %rbp
    1.00 :	  674521:       48 89 e5                mov    %rsp,%rbp
    4.00 :	  674524:       41 57                   push   %r15
    4.00 :	  674526:       41 89 f7                mov    %esi,%r15d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674529:       89 fe                   mov    %edi,%esi
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67452b:       41 56                   push   %r14
    0.00 :	  67452d:       41 55                   push   %r13
    2.00 :	  67452f:       41 54                   push   %r12
    1.00 :	  674531:       41 89 d4                mov    %edx,%r12d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674534:       ba c0 d0 b7 00          mov    $0xb7d0c0,%edx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674539:       53                      push   %rbx
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    1.00 :	  67453a:       31 db                   xor    %ebx,%ebx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67453c:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  674540:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	        PrivateRefCountEntry *res;
         :	        PrivateRefCountEntry *free = NULL;
         :	        bool            found = false;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
    4.00 :	  674543:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
    0.00 :	  674547:       eb 14                   jmp    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674549:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                if (res->buffer == buffer)
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    1.00 :	  674550:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
    0.00 :	  674554:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  67455b:       74 2b                   je     674588 <GetPrivateRefCountEntry+0x68>
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    8.00 :	  67455d:       8b 0a                   mov    (%rdx),%ecx
   11.00 :	  67455f:       48 89 d0                mov    %rdx,%rax
    8.00 :	  674562:       39 f1                   cmp    %esi,%ecx
    0.00 :	  674564:       0f 84 c8 00 00 00       je     674632 <GetPrivateRefCountEntry+0x112>
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    7.00 :	  67456a:       48 85 db                test   %rbx,%rbx
    0.00 :	  67456d:       75 e1                   jne    674550 <GetPrivateRefCountEntry+0x30>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    1.00 :	  67456f:       85 c9                   test   %ecx,%ecx
    0.00 :	  674571:       48 0f 44 da             cmove  %rdx,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   13.00 :	  674575:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    4.00 :	  674579:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    2.00 :	  674580:       75 db                   jne    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674582:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674588:       8b 05 e2 8a 50 00       mov    0x508ae2(%rip),%eax        # b7d070 <PrivateRefCountOverflowed>
         :	        /*
         :	         * By here we know that the buffer, if already pinned, isn't residing in
         :	         * the array.
         :	         */
         :	        res = NULL;
         :	        found = false;
    0.00 :	  67458e:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674592:       85 c0                   test   %eax,%eax
    0.00 :	  674594:       0f 8e ee 00 00 00       jle    674688 <GetPrivateRefCountEntry+0x168>
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  67459a:       4c 8d 75 d7             lea    -0x29(%rbp),%r14
    0.00 :	  67459e:       48 8b 3d d3 8a 50 00    mov    0x508ad3(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745a5:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  6745a9:       31 d2                   xor    %edx,%edx
    0.00 :	  6745ab:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745ae:       e8 ed 00 11 00          callq  7846a0 <hash_search>
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  6745b7:       49 89 c5                mov    %rax,%r13
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745ba:       0f 84 c8 00 00 00       je     674688 <GetPrivateRefCountEntry+0x168>
         :
         :	                }
         :	        }
         :	        else
         :	        {
         :	                if (!do_move)
    0.00 :	  6745c0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  6745c3:       74 6d                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        return res;
         :	                }
         :	                else if (found && free != NULL)
    0.00 :	  6745c5:       48 85 db                test   %rbx,%rbx
    0.00 :	  6745c8:       75 7e                   jne    674648 <GetPrivateRefCountEntry+0x128>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745ca:       8b 05 b0 8a 50 00       mov    0x508ab0(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745d0:       48 8b 3d a1 8a 50 00    mov    0x508aa1(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745d7:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745da:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745df:       49 89 c4                mov    %rax,%r12
    0.00 :	  6745e2:       83 c0 01                add    $0x1,%eax
    0.00 :	  6745e5:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6745e9:       89 05 91 8a 50 00       mov    %eax,0x508a91(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6745ef:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6745f6:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745f7:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6745fa:       e8 a1 00 11 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6745ff:       8b 53 04                mov    0x4(%rbx),%edx
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674602:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674605:       48 89 de                mov    %rbx,%rsi
         :	                        hashent = hash_search(PrivateRefCountHash,
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  674608:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  67460b:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67460f:       ba 02 00 00 00          mov    $0x2,%edx
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  674614:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  67461b:       00 
         :	                        arrayent->refcount = res->refcount;
    0.00 :	  67461c:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674620:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674623:       48 8b 3d 4e 8a 50 00    mov    0x508a4e(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  67462a:       e8 71 00 11 00          callq  7846a0 <hash_search>
    0.00 :	  67462f:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    4.00 :	  674632:       48 83 c4 18             add    $0x18,%rsp
    1.00 :	  674636:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
   11.00 :	  674637:       41 5c                   pop    %r12
    0.00 :	  674639:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    2.00 :	  67463b:       41 5e                   pop    %r14
    2.00 :	  67463d:       41 5f                   pop    %r15
    3.00 :	  67463f:       c9                      leaveq 
    3.00 :	  674640:       c3                      retq   
    0.00 :	  674641:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674648:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = res->refcount;
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67464b:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  67464f:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674652:       ba 02 00 00 00          mov    $0x2,%edx
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674657:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = res->refcount;
    0.00 :	  674659:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  67465d:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674660:       48 8b 3d 11 8a 50 00    mov    0x508a11(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674667:       e8 34 00 11 00          callq  7846a0 <hash_search>
         :	                                                (void *) &buffer,
         :	                                                HASH_REMOVE,
         :	                                                &found);
         :	                        Assert(found);
         :	                        Assert(PrivateRefCountOverflowed > 0);
         :	                        PrivateRefCountOverflowed--;
    0.00 :	  67466c:       83 2d fd 89 50 00 01    subl   $0x1,0x5089fd(%rip)        # b7d070 <PrivateRefCountOverflowed>
    0.00 :	  674673:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674676:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  67467a:       5b                      pop    %rbx
    0.00 :	  67467b:       41 5c                   pop    %r12
    0.00 :	  67467d:       41 5d                   pop    %r13
    0.00 :	  67467f:       41 5e                   pop    %r14
    0.00 :	  674681:       41 5f                   pop    %r15
    0.00 :	  674683:       c9                      leaveq 
    0.00 :	  674684:       c3                      retq   
    0.00 :	  674685:       0f 1f 00                nopl   (%rax)
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
         :	        {
         :	                if (!create)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:193
    1.00 :	  674688:       31 c0                   xor    %eax,%eax
    0.00 :	  67468a:       45 84 ff                test   %r15b,%r15b
    0.00 :	  67468d:       74 a3                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        /* Neither array nor hash have an entry and no new entry is needed */
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
    0.00 :	  67468f:       48 85 db                test   %rbx,%rbx
    0.00 :	  674692:       74 11                   je     6746a5 <GetPrivateRefCountEntry+0x185>
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674694:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = 0;
    0.00 :	  674697:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  67469e:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = 0;
    0.00 :	  6746a0:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746a3:       eb 8d                   jmp    674632 <GetPrivateRefCountEntry+0x112>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746a5:       8b 05 d5 89 50 00       mov    0x5089d5(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746ab:       48 8b 3d c6 89 50 00    mov    0x5089c6(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6746b2:       48 8d 4d d7             lea    -0x29(%rbp),%rcx
    0.00 :	  6746b6:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746bb:       49 89 c4                mov    %rax,%r12
    0.00 :	  6746be:       83 c0 01                add    $0x1,%eax
    0.00 :	  6746c1:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6746c5:       89 05 b5 89 50 00       mov    %eax,0x5089b5(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6746cb:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6746d2:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746d3:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6746d6:       e8 c5 ff 10 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6746db:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  6746de:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill the now free array slot */
         :	                        arrayent->buffer = buffer;
    0.00 :	  6746e1:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  6746e4:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  6746eb:       00 
         :	                        arrayent->refcount = 0;
    0.00 :	  6746ec:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :
         :	                        PrivateRefCountOverflowed++;
    0.00 :	  6746f3:       48 89 d8                mov    %rbx,%rax
    0.00 :	  6746f6:       83 05 73 89 50 00 01    addl   $0x1,0x508973(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746fd:       e9 30 ff ff ff          jmpq   674632 <GetPrivateRefCountEntry+0x112>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   49.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   26.44 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    5.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    5.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    2.30 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:812
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782ca0 <CHashBucketScan>:
         :	CHashBucketScan(CHashTable table,
         :	                                CHashPtr *start,
         :	                                uint32 hashcode,
         :	                                const void *key,
         :	                                CHashScanResult *res)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    2.30 :	  782ca0:       55                      push   %rbp
    0.00 :	  782ca1:       48 89 e5                mov    %rsp,%rbp
    1.15 :	  782ca4:       41 57                   push   %r15
    0.00 :	  782ca6:       41 89 d7                mov    %edx,%r15d
    0.00 :	  782ca9:       41 56                   push   %r14
    0.00 :	  782cab:       41 55                   push   %r13
    0.00 :	  782cad:       49 89 fd                mov    %rdi,%r13
    0.00 :	  782cb0:       41 54                   push   %r12
    0.00 :	  782cb2:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  782cb5:       53                      push   %rbx
    0.00 :	  782cb6:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  782cba:       48 89 75 d0             mov    %rsi,-0x30(%rbp)
    0.00 :	  782cbe:       48 89 4d c8             mov    %rcx,-0x38(%rbp)
    0.00 :	  782cc2:       4c 89 45 c0             mov    %r8,-0x40(%rbp)
         :	        CHashPtr   *pointer_to_target;
         :	        CHashNode  *target_node = NULL;
         :
         :	retry:
         :	        pointer_to_target = start;
         :	        target = *pointer_to_target;
    0.00 :	  782cc6:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  782cca:       44 8b 10                mov    (%rax),%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
   26.44 :	  782ccd:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cd1:       0f 87 ff 00 00 00       ja     782dd6 <CHashBucketScan+0x136>
         :	                {
         :	                        res->found = false;
         :	                        break;
    0.00 :	  782cd7:       4c 8b 75 d0             mov    -0x30(%rbp),%r14
    0.00 :	  782cdb:       eb 21                   jmp    782cfe <CHashBucketScan+0x5e>
    0.00 :	  782cdd:       0f 1f 00                nopl   (%rax)
         :	                /*
         :	                 * Bucket chains are kept in order, so that there is exactly one legal
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
    0.00 :	  782ce0:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	                if (h == hashcode)
    0.00 :	  782ce5:       44 39 f8                cmp    %r15d,%eax
    0.00 :	  782ce8:       74 5e                   je     782d48 <CHashBucketScan+0xa8>
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
         :	                                                 table->desc.key_size);
         :	                else if (h > hashcode)
    0.00 :	  782cea:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  782ced:       0f 1f 00                nopl   (%rax)
    0.00 :	  782cf0:       72 7b                   jb     782d6d <CHashBucketScan+0xcd>
         :	                                break;
         :	                        }
         :	                }
         :
         :	                /* Continue scan from next node. */
         :	                pointer_to_target = &target_node->next;
    0.00 :	  782cf2:       4d 89 e6                mov    %r12,%r14
    0.00 :	  782cf5:       45 89 c2                mov    %r8d,%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
    0.00 :	  782cf8:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cfc:       77 79                   ja     782d77 <CHashBucketScan+0xd7>
         :	                {
         :	                        res->found = false;
         :	                        break;
         :	                }
         :	                target_node = CHashTableGetNode(table, target);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    1.15 :	  782cfe:       44 89 d0                mov    %r10d,%eax
    1.15 :	  782d01:       d1 e8                   shr    %eax
    1.15 :	  782d03:       41 89 c4                mov    %eax,%r12d
    0.00 :	  782d06:       45 0f af 65 1c          imul   0x1c(%r13),%r12d
    0.00 :	  782d0b:       4d 03 65 30             add    0x30(%r13),%r12
         :	                 * target may have been fetched from an arena entry that could be
         :	                 * concurrently modified, so a dependency barrier is required before
         :	                 * dereferencing the derived pointer.
         :	                 */
         :	                pg_read_barrier_depends();
         :	                next = target_node->next;
    0.00 :	  782d0f:       45 8b 04 24             mov    (%r12),%r8d
         :	                 * ensures that delete-marked elements are removed from bucket chains
         :	                 * as quickly as possible and reduces code duplication.  See
         :	                 * CHashDelete for further comments about why delete-marking is
         :	                 * necessary and how it allows safe deletion.
         :	                 */
         :	                if (CHashPtrIsMarked(next))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   49.43 :	  782d13:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d17:       74 c7                   je     782ce0 <CHashBucketScan+0x40>
         :	                {
         :	zap:
         :	                        if (__sync_bool_compare_and_swap(pointer_to_target,
    0.00 :	  782d19:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  782d1c:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d1f:       83 e3 fe                and    $0xfffffffe,%ebx
    0.00 :	  782d22:       f0 41 0f b1 1e          lock cmpxchg %ebx,(%r14)
    0.00 :	  782d27:       74 77                   je     782da0 <CHashBucketScan+0x100>
         :	                                 * the node which precedes it before we advance to the next
         :	                                 * node.  That could certainly happen occasionally, but we'd
         :	                                 * have to be pretty unlucky to have it happen even twice in
         :	                                 * a row.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge_Fail);
    0.00 :	  782d29:       49 83 85 88 00 00 00    addq   $0x1,0x88(%r13)
    0.00 :	  782d30:       01 
         :	                                target = *pointer_to_target;
    0.00 :	  782d31:       45 8b 16                mov    (%r14),%r10d
         :	                                if (CHashPtrIsMarked(target))
    0.00 :	  782d34:       41 f6 c2 01             test   $0x1,%r10b
    0.00 :	  782d38:       74 be                   je     782cf8 <CHashBucketScan+0x58>
         :	                                {
         :	                                        CHashTableIncrementStatistic(table, CHS_Scan_Restart);
    0.00 :	  782d3a:       49 83 85 90 00 00 00    addq   $0x1,0x90(%r13)
    0.00 :	  782d41:       01 
         :	                                        goto retry;
    0.00 :	  782d42:       eb 82                   jmp    782cc6 <CHashBucketScan+0x26>
    0.00 :	  782d44:       0f 1f 40 00             nopl   0x0(%rax)
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
         :	                if (h == hashcode)
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.15 :	  782d48:       41 0f b7 4d 0e          movzwl 0xe(%r13),%ecx
    0.00 :	  782d4d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  782d51:       49 8d 74 24 08          lea    0x8(%r12),%rsi
    0.00 :	  782d56:       48 39 c9                cmp    %rcx,%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    5.75 :	  782d59:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
    5.75 :	  782d5b:       0f 97 c0                seta   %al
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.15 :	  782d5e:       0f 92 c2                setb   %dl
    0.00 :	  782d61:       28 d0                   sub    %dl,%al
    0.00 :	  782d63:       0f be c0                movsbl %al,%eax
         :	                 * the point where we expect to find the key OR someone delete-marked
         :	                 * the item and overwrote the hashcode with a gcnext pointer.  In the
         :	                 * latter case we must take care not to be fooled into stopping the
         :	                 * scan early.
         :	                 */
         :	                if (cmp >= 0)
    0.00 :	  782d66:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  782d69:       7c 87                   jl     782cf2 <CHashBucketScan+0x52>
         :	                {
         :	                        if (cmp == 0)
    0.00 :	  782d6b:       74 5b                   je     782dc8 <CHashBucketScan+0x128>
         :	                                /*
         :	                                 * pg_read_barrier() prevents the reread of the next pointer
         :	                                 * from being speculated ahead of the read of the hash value.
         :	                                 */
         :	                                pg_read_barrier();
         :	                                next = target_node->next;
    0.00 :	  782d6d:       45 8b 04 24             mov    (%r12),%r8d
         :	                                if (CHashPtrIsMarked(next))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:812
    1.15 :	  782d71:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d75:       75 a2                   jne    782d19 <CHashBucketScan+0x79>
         :	                                        goto zap;
         :	                                res->found = false;
    0.00 :	  782d77:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  782d7b:       c6 47 18 00             movb   $0x0,0x18(%rdi)
         :	                pointer_to_target = &target_node->next;
         :	                target = next;
         :	        }
         :
         :	        /* Send results back to caller. */
         :	        res->target = target;
    0.00 :	  782d7f:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782d83:       44 89 10                mov    %r10d,(%rax)
         :	        res->pointer_to_target = pointer_to_target;
    0.00 :	  782d86:       4c 89 70 08             mov    %r14,0x8(%rax)
         :	        res->target_node = target_node;
    0.00 :	  782d8a:       4c 89 60 10             mov    %r12,0x10(%rax)
         :	}
    0.00 :	  782d8e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  782d92:       5b                      pop    %rbx
    0.00 :	  782d93:       41 5c                   pop    %r12
    0.00 :	  782d95:       41 5d                   pop    %r13
    0.00 :	  782d97:       41 5e                   pop    %r14
    0.00 :	  782d99:       41 5f                   pop    %r15
    0.00 :	  782d9b:       c9                      leaveq 
    0.00 :	  782d9c:       c3                      retq   
    0.00 :	  782d9d:       0f 1f 00                nopl   (%rax)
         :	                                 * delete-mark has been applied.  Thus, if we just keep
         :	                                 * following the next pointers, we're guaranteed to visit
         :	                                 * all non-deleted items (and possibly some deleted items)
         :	                                 * that were present at the time we began the scan.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge);
    0.00 :	  782da0:       49 83 85 80 00 00 00    addq   $0x1,0x80(%r13)
    0.00 :	  782da7:       01 
         :	                                CHashAddToGarbage(table, hashcode & table->bucket_mask,
    0.00 :	  782da8:       44 89 fe                mov    %r15d,%esi
    0.00 :	  782dab:       41 23 75 10             and    0x10(%r13),%esi
    0.00 :	  782daf:       44 89 d2                mov    %r10d,%edx
    0.00 :	  782db2:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  782db5:       e8 96 fe ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782dba:       41 89 da                mov    %ebx,%r10d
    0.00 :	  782dbd:       e9 36 ff ff ff          jmpq   782cf8 <CHashBucketScan+0x58>
    0.00 :	  782dc2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 */
         :	                if (cmp >= 0)
         :	                {
         :	                        if (cmp == 0)
         :	                        {
         :	                                res->found = true;
    0.00 :	  782dc8:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782dcc:       c6 40 18 01             movb   $0x1,0x18(%rax)
         :	                                res->next = next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
    1.15 :	  782dd0:       44 89 40 04             mov    %r8d,0x4(%rax)
         :	                                break;
    0.00 :	  782dd4:       eb a9                   jmp    782d7f <CHashBucketScan+0xdf>
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    1.15 :	  782dd6:       49 89 c6                mov    %rax,%r14
    0.00 :	  782dd9:       eb 9c                   jmp    782d77 <CHashBucketScan+0xd7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

    5.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:137
    5.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    4.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:94
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:82
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:140
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:141
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:141
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:144
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    2.74 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:79
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:138
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:140
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:143
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:145
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:145
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    1.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7bd0 <InstrStopNode>:
         :	}
         :
         :	/* Exit from a plan node */
         :	void
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
    0.00 :	  5b7bd0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    2.74 :	  5b7bd1:       48 89 e5                mov    %rsp,%rbp
    1.37 :	  5b7bd4:       53                      push   %rbx
    0.00 :	  5b7bd5:       48 89 fb                mov    %rdi,%rbx
    1.37 :	  5b7bd8:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    1.37 :	  5b7bdc:       80 3f 00                cmpb   $0x0,(%rdi)
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
         :	        instr_time      endtime;
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    1.37 :	  5b7bdf:       f2 0f 58 47 30          addsd  0x30(%rdi),%xmm0
    2.74 :	  5b7be4:       f2 0f 11 47 30          movsd  %xmm0,0x30(%rdi)
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    2.74 :	  5b7be9:       0f 84 90 00 00 00       je     5b7c7f <InstrStopNode+0xaf>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7bef:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:79
    1.37 :	  5b7bf4:       75 0b                   jne    5b7c01 <InstrStopNode+0x31>
    0.00 :	  5b7bf6:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7bfb:       0f 84 d1 02 00 00       je     5b7ed2 <InstrStopNode+0x302>
         :	                        elog(ERROR, "InstrStopNode called without start");
         :
         :	                INSTR_TIME_SET_CURRENT(endtime);
    0.00 :	  5b7c01:       48 8d 7d e0             lea    -0x20(%rbp),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:82
    2.74 :	  5b7c05:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7c07:       e8 b4 19 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                INSTR_TIME_ACCUM_DIFF(instr->counter, endtime, instr->starttime);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    1.37 :	  5b7c0c:       48 8b 45 e0             mov    -0x20(%rbp),%rax
    0.00 :	  5b7c10:       48 03 43 18             add    0x18(%rbx),%rax
    0.00 :	  5b7c14:       48 2b 43 08             sub    0x8(%rbx),%rax
    0.00 :	  5b7c18:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  5b7c1c:       48 8b 45 e8             mov    -0x18(%rbp),%rax
    0.00 :	  5b7c20:       48 03 43 20             add    0x20(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.48 :	  5b7c24:       48 2b 43 10             sub    0x10(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    2.74 :	  5b7c28:       48 85 c0                test   %rax,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.48 :	  5b7c2b:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c2f:       79 36                   jns    5b7c67 <InstrStopNode+0x97>
    0.00 :	  5b7c31:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b7c38:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7c3e:       48 83 6b 18 01          subq   $0x1,0x18(%rbx)
    0.00 :	  5b7c43:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7c46:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c4a:       78 ec                   js     5b7c38 <InstrStopNode+0x68>
    0.00 :	  5b7c4c:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c52:       7e 1b                   jle    5b7c6f <InstrStopNode+0x9f>
    0.00 :	  5b7c54:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b7c58:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  5b7c5d:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7c63:       48 89 43 20             mov    %rax,0x20(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    1.37 :	  5b7c67:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c6d:       7f e9                   jg     5b7c58 <InstrStopNode+0x88>
         :
         :	                INSTR_TIME_SET_ZERO(instr->starttime);
    0.00 :	  5b7c6f:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b7c76:       00 
    0.00 :	  5b7c77:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	  5b7c7e:       00 
         :	        }
         :
         :	        /* Add delta of buffer usage since entry to node's totals */
         :	        if (instr->need_bufusage)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    1.37 :	  5b7c7f:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
    0.00 :	  5b7c83:       75 33                   jne    5b7cb8 <InstrStopNode+0xe8>
         :	                BufferUsageAccumDiff(&instr->bufusage,
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:94
    4.11 :	  5b7c85:       80 7b 02 00             cmpb   $0x0,0x2(%rbx)
    0.00 :	  5b7c89:       75 21                   jne    5b7cac <InstrStopNode+0xdc>
         :	        {
         :	                instr->running = true;
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7c8b:       f2 48 0f 2a 43 20       cvtsi2sdq 0x20(%rbx),%xmm0
    0.00 :	  5b7c91:       f2 0f 5e 05 47 49 2c    divsd  0x2c4947(%rip),%xmm0        # 87c5e0 <__func__.18742+0x1b>
    0.00 :	  5b7c98:       00 
    0.00 :	  5b7c99:       f2 48 0f 2a 4b 18       cvtsi2sdq 0x18(%rbx),%xmm1
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
         :	        {
         :	                instr->running = true;
    0.00 :	  5b7c9f:       c6 43 02 01             movb   $0x1,0x2(%rbx)
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7ca3:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  5b7ca7:       f2 0f 11 4b 28          movsd  %xmm1,0x28(%rbx)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    1.37 :	  5b7cac:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b7cb0:       5b                      pop    %rbx
    1.37 :	  5b7cb1:       c9                      leaveq 
    2.74 :	  5b7cb2:       c3                      retq   
    0.00 :	  5b7cb3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	static void
         :	BufferUsageAccumDiff(BufferUsage *dst,
         :	                                         const BufferUsage *add,
         :	                                         const BufferUsage *sub)
         :	{
         :	        dst->shared_blks_hit += add->shared_blks_hit - sub->shared_blks_hit;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    1.37 :	  5b7cb8:       48 8b 05 a1 7a 60 00    mov    0x607aa1(%rip),%rax        # bbf760 <pgBufferUsage>
    1.37 :	  5b7cbf:       48 03 83 d8 00 00 00    add    0xd8(%rbx),%rax
    0.00 :	  5b7cc6:       48 2b 43 38             sub    0x38(%rbx),%rax
    1.37 :	  5b7cca:       48 89 83 d8 00 00 00    mov    %rax,0xd8(%rbx)
         :	        dst->shared_blks_read += add->shared_blks_read - sub->shared_blks_read;
    0.00 :	  5b7cd1:       48 8b 05 90 7a 60 00    mov    0x607a90(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7cd8:       48 03 83 e0 00 00 00    add    0xe0(%rbx),%rax
    0.00 :	  5b7cdf:       48 2b 43 40             sub    0x40(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:137
    5.48 :	  5b7ce3:       48 89 83 e0 00 00 00    mov    %rax,0xe0(%rbx)
         :	        dst->shared_blks_dirtied += add->shared_blks_dirtied - sub->shared_blks_dirtied;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:138
    1.37 :	  5b7cea:       48 8b 05 7f 7a 60 00    mov    0x607a7f(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7cf1:       48 03 83 e8 00 00 00    add    0xe8(%rbx),%rax
    0.00 :	  5b7cf8:       48 2b 43 48             sub    0x48(%rbx),%rax
    0.00 :	  5b7cfc:       48 89 83 e8 00 00 00    mov    %rax,0xe8(%rbx)
         :	        dst->shared_blks_written += add->shared_blks_written - sub->shared_blks_written;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
    1.37 :	  5b7d03:       48 8b 05 6e 7a 60 00    mov    0x607a6e(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7d0a:       48 03 83 f0 00 00 00    add    0xf0(%rbx),%rax
    0.00 :	  5b7d11:       48 2b 43 50             sub    0x50(%rbx),%rax
    1.37 :	  5b7d15:       48 89 83 f0 00 00 00    mov    %rax,0xf0(%rbx)
         :	        dst->local_blks_hit += add->local_blks_hit - sub->local_blks_hit;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:140
    2.74 :	  5b7d1c:       48 8b 05 5d 7a 60 00    mov    0x607a5d(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7d23:       48 03 83 f8 00 00 00    add    0xf8(%rbx),%rax
    0.00 :	  5b7d2a:       48 2b 43 58             sub    0x58(%rbx),%rax
    1.37 :	  5b7d2e:       48 89 83 f8 00 00 00    mov    %rax,0xf8(%rbx)
         :	        dst->local_blks_read += add->local_blks_read - sub->local_blks_read;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:141
    2.74 :	  5b7d35:       48 8b 05 4c 7a 60 00    mov    0x607a4c(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7d3c:       48 03 83 00 01 00 00    add    0x100(%rbx),%rax
    0.00 :	  5b7d43:       48 2b 43 60             sub    0x60(%rbx),%rax
    2.74 :	  5b7d47:       48 89 83 00 01 00 00    mov    %rax,0x100(%rbx)
         :	        dst->local_blks_dirtied += add->local_blks_dirtied - sub->local_blks_dirtied;
    0.00 :	  5b7d4e:       48 8b 05 3b 7a 60 00    mov    0x607a3b(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7d55:       48 03 83 08 01 00 00    add    0x108(%rbx),%rax
    0.00 :	  5b7d5c:       48 2b 43 68             sub    0x68(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    2.74 :	  5b7d60:       48 89 83 08 01 00 00    mov    %rax,0x108(%rbx)
         :	        dst->local_blks_written += add->local_blks_written - sub->local_blks_written;
    0.00 :	  5b7d67:       48 8b 05 2a 7a 60 00    mov    0x607a2a(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7d6e:       48 03 83 10 01 00 00    add    0x110(%rbx),%rax
    0.00 :	  5b7d75:       48 2b 43 70             sub    0x70(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:143
    1.37 :	  5b7d79:       48 89 83 10 01 00 00    mov    %rax,0x110(%rbx)
         :	        dst->temp_blks_read += add->temp_blks_read - sub->temp_blks_read;
    0.00 :	  5b7d80:       48 8b 05 19 7a 60 00    mov    0x607a19(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7d87:       48 03 83 18 01 00 00    add    0x118(%rbx),%rax
    0.00 :	  5b7d8e:       48 2b 43 78             sub    0x78(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:144
    2.74 :	  5b7d92:       48 89 83 18 01 00 00    mov    %rax,0x118(%rbx)
         :	        dst->temp_blks_written += add->temp_blks_written - sub->temp_blks_written;
    0.00 :	  5b7d99:       48 8b 05 08 7a 60 00    mov    0x607a08(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7da0:       48 03 83 20 01 00 00    add    0x120(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:145
    1.37 :	  5b7da7:       48 2b 83 80 00 00 00    sub    0x80(%rbx),%rax
    1.37 :	  5b7dae:       48 89 83 20 01 00 00    mov    %rax,0x120(%rbx)
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_read_time,
    0.00 :	  5b7db5:       48 8b 05 f4 79 60 00    mov    0x6079f4(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7dbc:       48 03 83 28 01 00 00    add    0x128(%rbx),%rax
    0.00 :	  5b7dc3:       48 2b 83 88 00 00 00    sub    0x88(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    1.37 :	  5b7dca:       48 89 83 28 01 00 00    mov    %rax,0x128(%rbx)
    0.00 :	  5b7dd1:       48 8b 05 e0 79 60 00    mov    0x6079e0(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7dd8:       48 03 83 30 01 00 00    add    0x130(%rbx),%rax
    0.00 :	  5b7ddf:       48 2b 83 90 00 00 00    sub    0x90(%rbx),%rax
    2.74 :	  5b7de6:       48 85 c0                test   %rax,%rax
    2.74 :	  5b7de9:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7df0:       79 43                   jns    5b7e35 <InstrStopNode+0x265>
    0.00 :	  5b7df2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7df8:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7dfe:       48 83 ab 28 01 00 00    subq   $0x1,0x128(%rbx)
    0.00 :	  5b7e05:       01 
    0.00 :	  5b7e06:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e09:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e10:       78 e6                   js     5b7df8 <InstrStopNode+0x228>
    0.00 :	  5b7e12:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e18:       7e 23                   jle    5b7e3d <InstrStopNode+0x26d>
    0.00 :	  5b7e1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e20:       48 83 83 28 01 00 00    addq   $0x1,0x128(%rbx)
    0.00 :	  5b7e27:       01 
    0.00 :	  5b7e28:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7e2e:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    5.48 :	  5b7e35:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e3b:       7f e3                   jg     5b7e20 <InstrStopNode+0x250>
         :	                                                  add->blk_read_time, sub->blk_read_time);
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_write_time,
    0.00 :	  5b7e3d:       48 8b 05 7c 79 60 00    mov    0x60797c(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7e44:       48 03 83 38 01 00 00    add    0x138(%rbx),%rax
    0.00 :	  5b7e4b:       48 2b 83 98 00 00 00    sub    0x98(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    1.37 :	  5b7e52:       48 89 83 38 01 00 00    mov    %rax,0x138(%rbx)
    2.74 :	  5b7e59:       48 8b 05 68 79 60 00    mov    0x607968(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b7e60:       48 03 83 40 01 00 00    add    0x140(%rbx),%rax
    1.37 :	  5b7e67:       48 2b 83 a0 00 00 00    sub    0xa0(%rbx),%rax
    1.37 :	  5b7e6e:       48 85 c0                test   %rax,%rax
    2.74 :	  5b7e71:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e78:       79 4b                   jns    5b7ec5 <InstrStopNode+0x2f5>
    0.00 :	  5b7e7a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e80:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7e86:       48 83 ab 38 01 00 00    subq   $0x1,0x138(%rbx)
    0.00 :	  5b7e8d:       01 
    0.00 :	  5b7e8e:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e91:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e98:       78 e6                   js     5b7e80 <InstrStopNode+0x2b0>
    0.00 :	  5b7e9a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ea0:       0f 8e df fd ff ff       jle    5b7c85 <InstrStopNode+0xb5>
    0.00 :	  5b7ea6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b7ead:       00 00 00 
    0.00 :	  5b7eb0:       48 83 83 38 01 00 00    addq   $0x1,0x138(%rbx)
    0.00 :	  5b7eb7:       01 
    0.00 :	  5b7eb8:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7ebe:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7ec5:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ecb:       7f e3                   jg     5b7eb0 <InstrStopNode+0x2e0>
    0.00 :	  5b7ecd:       e9 b3 fd ff ff          jmpq   5b7c85 <InstrStopNode+0xb5>
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        elog(ERROR, "InstrStopNode called without start");
    0.00 :	  5b7ed2:       ba 8a b6 88 00          mov    $0x88b68a,%edx
    0.00 :	  5b7ed7:       be 50 00 00 00          mov    $0x50,%esi
    0.00 :	  5b7edc:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7ee1:       e8 3a 35 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7ee6:       be 30 b6 88 00          mov    $0x88b630,%esi
    0.00 :	  5b7eeb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7ef0:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7ef2:       e8 39 33 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7ef7:       e8 d4 15 eb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   15.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
   10.34 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
   10.34 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5163
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005acf10 <ExecQual>:
         :	 *
         :	 * ----------------------------------------------------------------
         :	 */
         :	bool
         :	ExecQual(List *qual, ExprContext *econtext, bool resultForNull)
         :	{
    0.00 :	  5acf10:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    5.17 :	  5acf11:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5acf14:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.72 :	  5acf16:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    5.17 :	  5acf18:       41 89 d6                mov    %edx,%r14d
    0.00 :	  5acf1b:       41 55                   push   %r13
    0.00 :	  5acf1d:       41 54                   push   %r12
    0.00 :	  5acf1f:       49 89 f4                mov    %rsi,%r12
    6.90 :	  5acf22:       53                      push   %rbx
    0.00 :	  5acf23:       48 83 ec 18             sub    $0x18,%rsp
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf27:       48 8b 46 28             mov    0x28(%rsi),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    3.45 :	  5acf2b:       48 85 ff                test   %rdi,%rdi
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5acf2e:       4c 8b 3d 2b d9 60 00    mov    0x60d92b(%rip),%r15        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf35:       48 89 05 24 d9 60 00    mov    %rax,0x60d924(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5acf3c:       74 4a                   je     5acf88 <ExecQual+0x78>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
   10.34 :	  5acf3e:       48 8b 5f 08             mov    0x8(%rdi),%rbx
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf42:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf45:       74 41                   je     5acf88 <ExecQual+0x78>
    0.00 :	  5acf47:       4c 8d 6d d7             lea    -0x29(%rbp),%r13
    0.00 :	  5acf4b:       eb 11                   jmp    5acf5e <ExecQual+0x4e>
    0.00 :	  5acf4d:       0f 1f 00                nopl   (%rax)
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
         :
         :	                if (isNull)
         :	                {
         :	                        if (resultForNull == false)
    0.00 :	  5acf50:       45 84 f6                test   %r14b,%r14b
    0.00 :	  5acf53:       74 24                   je     5acf79 <ExecQual+0x69>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf55:       48 8b 5b 08             mov    0x8(%rbx),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    3.45 :	  5acf59:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf5c:       74 2a                   je     5acf88 <ExecQual+0x78>
         :	        {
         :	                ExprState  *clause = (ExprState *) lfirst(l);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5163
    6.90 :	  5acf5e:       48 8b 03                mov    (%rbx),%rax
         :	                Datum           expr_value;
         :	                bool            isNull;
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
    0.00 :	  5acf61:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5acf63:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  5acf66:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5acf69:       48 89 c7                mov    %rax,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    1.72 :	  5acf6c:       ff 50 10                callq  *0x10(%rax)
         :
         :	                if (isNull)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
   10.34 :	  5acf6f:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
   15.52 :	  5acf73:       75 db                   jne    5acf50 <ExecQual+0x40>
         :	                                break;
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        if (!DatumGetBool(expr_value))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    3.45 :	  5acf75:       84 c0                   test   %al,%al
    0.00 :	  5acf77:       75 dc                   jne    5acf55 <ExecQual+0x45>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf79:       31 c0                   xor    %eax,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    1.72 :	  5acf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5acf80:       eb 0b                   jmp    5acf8d <ExecQual+0x7d>
    0.00 :	  5acf82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    1.72 :	  5acf88:       b8 01 00 00 00          mov    $0x1,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    5.17 :	  5acf8d:       4c 89 3d cc d8 60 00    mov    %r15,0x60d8cc(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    3.45 :	  5acf94:       48 83 c4 18             add    $0x18,%rsp
    1.72 :	  5acf98:       5b                      pop    %rbx
    0.00 :	  5acf99:       41 5c                   pop    %r12
    0.00 :	  5acf9b:       41 5d                   pop    %r13
    1.72 :	  5acf9d:       41 5e                   pop    %r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    5.17 :	  5acf9f:       41 5f                   pop    %r15
    5.17 :	  5acfa1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   21.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:995
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:970
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:984
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:985
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:939
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:995
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:934
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:995
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbe90 <ExecHashGetHashValue>:
         :	                                         ExprContext *econtext,
         :	                                         List *hashkeys,
         :	                                         bool outer_tuple,
         :	                                         bool keep_nulls,
         :	                                         uint32 *hashvalue)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    7.02 :	  5bbe90:       55                      push   %rbp
    0.00 :	  5bbe91:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    3.51 :	  5bbe94:       41 57                   push   %r15
    0.00 :	  5bbe96:       49 89 ff                mov    %rdi,%r15
    1.75 :	  5bbe99:       41 56                   push   %r14
    1.75 :	  5bbe9b:       49 89 f6                mov    %rsi,%r14
    1.75 :	  5bbe9e:       41 55                   push   %r13
    0.00 :	  5bbea0:       41 54                   push   %r12
    1.75 :	  5bbea2:       49 89 d4                mov    %rdx,%r12
    0.00 :	  5bbea5:       53                      push   %rbx
    0.00 :	  5bbea6:       89 cb                   mov    %ecx,%ebx
    0.00 :	  5bbea8:       48 83 ec 38             sub    $0x38,%rsp
    1.75 :	  5bbeac:       4c 89 4d a8             mov    %r9,-0x58(%rbp)
    3.51 :	  5bbeb0:       44 88 45 b7             mov    %r8b,-0x49(%rbp)
         :
         :	        /*
         :	         * We reset the eval context each time to reclaim any memory leaked in the
         :	         * hashkey expressions.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5bbeb4:       48 8b 7e 28             mov    0x28(%rsi),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:934
    1.75 :	  5bbeb8:       e8 f3 ca 1d 00          callq  7989b0 <MemoryContextReset>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5bbebd:       48 8b 05 9c e9 5f 00    mov    0x5fe99c(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
    0.00 :	  5bbec4:       84 db                   test   %bl,%bl
    0.00 :	  5bbec6:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :
         :	        CurrentMemoryContext = context;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
   10.53 :	  5bbeca:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5bbece:       48 89 05 8b e9 5f 00    mov    %rax,0x5fe98b(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5bbed5:       0f 84 d5 00 00 00       je     5bbfb0 <ExecHashGetHashValue+0x120>
         :	                hashfunctions = hashtable->outer_hashfunctions;
    0.00 :	  5bbedb:       49 8b 47 78             mov    0x78(%r15),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:939
    3.51 :	  5bbedf:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    3.51 :	  5bbee3:       4d 85 e4                test   %r12,%r12
    0.00 :	  5bbee6:       0f 84 94 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    1.75 :	  5bbeec:       49 8b 5c 24 08          mov    0x8(%r12),%rbx
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
    0.00 :	  5bbef1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbef4:       0f 84 86 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    0.00 :	  5bbefa:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbefd:       45 31 e4                xor    %r12d,%r12d
         :	        {
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
    0.00 :	  5bbf00:       48 8b 03                mov    (%rbx),%rax
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    7.02 :	  5bbf03:       31 c9                   xor    %ecx,%ecx
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
         :	                Datum           keyval;
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
    0.00 :	  5bbf05:       41 d1 c5                rol    %r13d
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
    0.00 :	  5bbf08:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    1.75 :	  5bbf0c:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5bbf0f:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bbf12:       ff 50 10                callq  *0x10(%rax)
         :	                 *
         :	                 * Note: currently, all hashjoinable operators must be strict since
         :	                 * the hash index AM assumes that.  However, it takes so little extra
         :	                 * code here to allow non-strict that we may as well do it.
         :	                 */
         :	                if (isNull)
    0.00 :	  5bbf15:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:970
    7.02 :	  5bbf19:       74 35                   je     5bbf50 <ExecHashGetHashValue+0xc0>
         :	                {
         :	                        if (hashtable->hashStrict[i] && !keep_nulls)
    0.00 :	  5bbf1b:       49 8b 87 88 00 00 00    mov    0x88(%r15),%rax
    0.00 :	  5bbf22:       49 63 d4                movslq %r12d,%rdx
    0.00 :	  5bbf25:       80 3c 10 00             cmpb   $0x0,(%rax,%rdx,1)
    0.00 :	  5bbf29:       74 41                   je     5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf2b:       80 7d b7 00             cmpb   $0x0,-0x49(%rbp)
    0.00 :	  5bbf2f:       75 3b                   jne    5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf31:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf35:       48 89 05 24 e9 5f 00    mov    %rax,0x5fe924(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
         :	        return true;
         :	}
    0.00 :	  5bbf3c:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5bbf40:       31 c0                   xor    %eax,%eax
    0.00 :	  5bbf42:       5b                      pop    %rbx
    0.00 :	  5bbf43:       41 5c                   pop    %r12
    0.00 :	  5bbf45:       41 5d                   pop    %r13
    0.00 :	  5bbf47:       41 5e                   pop    %r14
    0.00 :	  5bbf49:       41 5f                   pop    %r15
    0.00 :	  5bbf4b:       c9                      leaveq 
    0.00 :	  5bbf4c:       c3                      retq   
    0.00 :	  5bbf4d:       0f 1f 00                nopl   (%rax)
         :	                else
         :	                {
         :	                        /* Compute the hash function */
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
    0.00 :	  5bbf50:       49 63 fc                movslq %r12d,%rdi
    0.00 :	  5bbf53:       48 89 c2                mov    %rax,%rdx
    0.00 :	  5bbf56:       31 f6                   xor    %esi,%esi
    0.00 :	  5bbf58:       48 8d 3c 7f             lea    (%rdi,%rdi,2),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:984
    7.02 :	  5bbf5c:       48 c1 e7 04             shl    $0x4,%rdi
    0.00 :	  5bbf60:       48 03 7d b8             add    -0x48(%rbp),%rdi
    0.00 :	  5bbf64:       e8 67 21 1c 00          callq  77e0d0 <FunctionCall1Coll>
         :	                        hashkey ^= hkey;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:985
    5.26 :	  5bbf69:       41 31 c5                xor    %eax,%r13d
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
    0.00 :	  5bbf6c:       48 8b 5b 08             mov    0x8(%rbx),%rbx
    0.00 :	  5bbf70:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbf73:       74 13                   je     5bbf88 <ExecHashGetHashValue+0xf8>
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
         :	                        hashkey ^= hkey;
         :	                }
         :
         :	                i++;
    0.00 :	  5bbf75:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  5bbf79:       eb 85                   jmp    5bbf00 <ExecHashGetHashValue+0x70>
    0.00 :	  5bbf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbf80:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbf83:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    1.75 :	  5bbf88:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf8c:       48 89 05 cd e8 5f 00    mov    %rax,0x5fe8cd(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf93:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  5bbf97:       44 89 28                mov    %r13d,(%rax)
         :	        return true;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:995
   21.05 :	  5bbf9a:       48 83 c4 38             add    $0x38,%rsp
         :	                i++;
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf9e:       b8 01 00 00 00          mov    $0x1,%eax
         :	        return true;
         :	}
    0.00 :	  5bbfa3:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:995
    1.75 :	  5bbfa4:       41 5c                   pop    %r12
    0.00 :	  5bbfa6:       41 5d                   pop    %r13
    0.00 :	  5bbfa8:       41 5e                   pop    %r14
    0.00 :	  5bbfaa:       41 5f                   pop    %r15
    3.51 :	  5bbfac:       c9                      leaveq 
    0.00 :	  5bbfad:       c3                      retq   
    0.00 :	  5bbfae:       66 90                   xchg   %ax,%ax
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
    0.00 :	  5bbfb0:       49 8b 87 80 00 00 00    mov    0x80(%r15),%rax
    0.00 :	  5bbfb7:       48 89 45 b8             mov    %rax,-0x48(%rbp)
    0.00 :	  5bbfbb:       e9 23 ff ff ff          jmpq   5bbee3 <ExecHashGetHashValue+0x53>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

    8.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:113
    8.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:651
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:237
    7.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:345
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:345
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:213
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:63
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:234
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:237
    3.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:239
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:63
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:106
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:655
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:661
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:662
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:672
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:675
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:675
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:675
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:675
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:227
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:235
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:235
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:235
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:245
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:261
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:272
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:277
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:281
    1.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:426
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bdaa0 <ExecHashJoin>:
         :	 *                        the other one is "outer".
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: a tuple or NULL */
         :	ExecHashJoin(HashJoinState *node)
         :	{
    0.00 :	  5bdaa0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:63
    1.75 :	  5bdaa1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bdaa4:       41 57                   push   %r15
    3.51 :	  5bdaa6:       41 56                   push   %r14
    0.00 :	  5bdaa8:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5bdaab:       41 55                   push   %r13
    0.00 :	  5bdaad:       41 54                   push   %r12
    0.00 :	  5bdaaf:       53                      push   %rbx
    0.00 :	  5bdab0:       48 83 ec 58             sub    $0x58,%rsp
         :	        int                     batchno;
         :
         :	        /*
         :	         * get information from HashJoin node
         :	         */
         :	        joinqual = node->js.joinqual;
    0.00 :	  5bdab4:       48 8b 87 80 00 00 00    mov    0x80(%rdi),%rax
    0.00 :	  5bdabb:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :	        otherqual = node->js.ps.qual;
    0.00 :	  5bdabf:       48 8b 57 28             mov    0x28(%rdi),%rdx
    0.00 :	  5bdac3:       48 89 55 a8             mov    %rdx,-0x58(%rbp)
         :	        hashNode = (HashState *) innerPlanState(node);
    0.00 :	  5bdac7:       48 8b 4f 38             mov    0x38(%rdi),%rcx
    0.00 :	  5bdacb:       48 89 4d 98             mov    %rcx,-0x68(%rbp)
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bdacf:       48 8b 47 30             mov    0x30(%rdi),%rax
    0.00 :	  5bdad3:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	        hashtable = node->hj_HashTable;
    0.00 :	  5bdad7:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
    0.00 :	  5bdade:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        econtext = node->js.ps.ps_ExprContext;
    0.00 :	  5bdae2:       48 8b 4f 60             mov    0x60(%rdi),%rcx
    0.00 :	  5bdae6:       48 89 4d b0             mov    %rcx,-0x50(%rbp)
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous join
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->js.ps.ps_TupFromTlist)
    0.00 :	  5bdaea:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5bdaee:       74 1c                   je     5bdb0c <ExecHashJoin+0x6c>
         :	        {
         :	                TupleTableSlot *result;
         :
         :	                result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5bdaf0:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5bdaf4:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5bdaf8:       e8 03 f5 fe ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5bdafd:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5bdb01:       0f 84 91 04 00 00       je     5bdf98 <ExecHashJoin+0x4f8>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->js.ps.ps_TupFromTlist = false;
    0.00 :	  5bdb07:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a join tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5bdb0c:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5bdb10:       48 8b 78 28             mov    0x28(%rax),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:106
    1.75 :	  5bdb14:       e8 97 ae 1d 00          callq  7989b0 <MemoryContextReset>
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
    0.00 :	  5bdb19:       49 8d 96 b4 00 00 00    lea    0xb4(%r14),%rdx
    0.00 :	  5bdb20:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5bdb24:       0f 1f 40 00             nopl   0x0(%rax)
         :	        /*
         :	         * run the hash join state machine
         :	         */
         :	        for (;;)
         :	        {
         :	                switch (node->hj_JoinState)
    0.00 :	  5bdb28:       41 83 be f0 00 00 00    cmpl   $0x6,0xf0(%r14)
    0.00 :	  5bdb2f:       06 
    0.00 :	  5bdb30:       76 36                   jbe    5bdb68 <ExecHashJoin+0xc8>
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :	                                break;
         :
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
    0.00 :	  5bdb32:       ba c1 ba 88 00          mov    $0x88bac1,%edx
    0.00 :	  5bdb37:       be a7 01 00 00          mov    $0x1a7,%esi
    0.00 :	  5bdb3c:       bf 58 b9 88 00          mov    $0x88b958,%edi
    0.00 :	  5bdb41:       e8 da d8 1b 00          callq  77b420 <elog_start>
    0.00 :	  5bdb46:       41 8b 96 f0 00 00 00    mov    0xf0(%r14),%edx
    0.00 :	  5bdb4d:       be 00 ba 88 00          mov    $0x88ba00,%esi
    0.00 :	  5bdb52:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bdb57:       31 c0                   xor    %eax,%eax
    0.00 :	  5bdb59:       e8 d2 d6 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bdb5e:       e8 6d b9 ea ff          callq  4694d0 <abort@plt>
    0.00 :	  5bdb63:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /*
         :	         * run the hash join state machine
         :	         */
         :	        for (;;)
         :	        {
         :	                switch (node->hj_JoinState)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:113
    8.77 :	  5bdb68:       41 8b 86 f0 00 00 00    mov    0xf0(%r14),%eax
    0.00 :	  5bdb6f:       ff 24 c5 50 ba 88 00    jmpq   *0x88ba50(,%rax,8)
    0.00 :	  5bdb76:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bdb7d:       00 00 00 
         :	                                 *
         :	                                 * The only way to make the check is to try to fetch a tuple
         :	                                 * from the outer plan node.  If we succeed, we have to stash
         :	                                 * it away for later consumption by ExecHashJoinOuterGetTuple.
         :	                                 */
         :	                                if (HJ_FILL_INNER(node))
    0.00 :	  5bdb80:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdb87:       00 
    0.00 :	  5bdb88:       0f 84 da 05 00 00       je     5be168 <ExecHashJoin+0x6c8>
         :	                                        }
         :	                                        else
         :	                                                node->hj_OuterNotEmpty = true;
         :	                                }
         :	                                else
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
    0.00 :	  5bdb8e:       49 c7 86 e8 00 00 00    movq   $0x0,0xe8(%r14)
    0.00 :	  5bdb95:       00 00 00 00 
         :
         :	                                /*
         :	                                 * create the hash table
         :	                                 */
         :	                                hashtable = ExecHashTableCreate((Hash *) hashNode->ps.plan,
    0.00 :	  5bdb99:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5bdb9d:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdb9f:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdba6:       00 
    0.00 :	  5bdba7:       49 8b b6 a0 00 00 00    mov    0xa0(%r14),%rsi
    0.00 :	  5bdbae:       48 8b 78 08             mov    0x8(%rax),%rdi
    0.00 :	  5bdbb2:       0f 95 c2                setne  %dl
    0.00 :	  5bdbb5:       e8 e6 ec ff ff          callq  5bc8a0 <ExecHashTableCreate>
         :	                                node->hj_HashTable = hashtable;
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
    0.00 :	  5bdbba:       48 8b 55 98             mov    -0x68(%rbp),%rdx
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :
         :	                                /*
         :	                                 * create the hash table
         :	                                 */
         :	                                hashtable = ExecHashTableCreate((Hash *) hashNode->ps.plan,
    0.00 :	  5bdbbe:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                                                                                                node->hj_HashOperators,
         :	                                                                                                HJ_FILL_INNER(node));
         :	                                node->hj_HashTable = hashtable;
    0.00 :	  5bdbc2:       49 89 86 a8 00 00 00    mov    %rax,0xa8(%r14)
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
         :	                                (void) MultiExecProcNode((PlanState *) hashNode);
    0.00 :	  5bdbc9:       48 89 d7                mov    %rdx,%rdi
         :	                                node->hj_HashTable = hashtable;
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
    0.00 :	  5bdbcc:       48 89 42 78             mov    %rax,0x78(%rdx)
         :	                                (void) MultiExecProcNode((PlanState *) hashNode);
    0.00 :	  5bdbd0:       e8 fb e7 fe ff          callq  5ac3d0 <MultiExecProcNode>
         :	                                /*
         :	                                 * If the inner relation is completely empty, and we're not
         :	                                 * doing a left outer join, we can quit without scanning the
         :	                                 * outer relation.
         :	                                 */
         :	                                if (hashtable->totalTuples == 0 && !HJ_FILL_OUTER(node))
    0.00 :	  5bdbd5:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5bdbd9:       48 8b 4d b8             mov    -0x48(%rbp),%rcx
    0.00 :	  5bdbdd:       66 0f 2e 41 58          ucomisd 0x58(%rcx),%xmm0
    0.00 :	  5bdbe2:       0f 84 6b 06 00 00       je     5be253 <ExecHashJoin+0x7b3>
         :
         :	                                /*
         :	                                 * need to remember whether nbatch has increased since we
         :	                                 * began scanning the outer relation
         :	                                 */
         :	                                hashtable->nbatch_outstart = hashtable->nbatch;
    0.00 :	  5bdbe8:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5bdbec:       8b 42 40                mov    0x40(%rdx),%eax
    0.00 :	  5bdbef:       89 42 4c                mov    %eax,0x4c(%rdx)
         :	                                /*
         :	                                 * Reset OuterNotEmpty for scan.  (It's OK if we fetched a
         :	                                 * tuple above, because ExecHashJoinOuterGetTuple will
         :	                                 * immediately set it again.)
         :	                                 */
         :	                                node->hj_OuterNotEmpty = false;
    0.00 :	  5bdbf2:       41 c6 86 f5 00 00 00    movb   $0x0,0xf5(%r14)
    0.00 :	  5bdbf9:       00 
         :
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5bdbfa:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5bdc01:       02 00 00 00 
         :	static TupleTableSlot *
         :	ExecHashJoinOuterGetTuple(PlanState *outerNode,
         :	                                                  HashJoinState *hjstate,
         :	                                                  uint32 *hashvalue)
         :	{
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:651
    7.02 :	  5bdc05:       49 8b 9e a8 00 00 00    mov    0xa8(%r14),%rbx
         :	        int                     curbatch = hashtable->curbatch;
    0.00 :	  5bdc0c:       8b 43 44                mov    0x44(%rbx),%eax
         :	        TupleTableSlot *slot;
         :
         :	        if (curbatch == 0)                      /* if it is the first pass */
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:655
    1.75 :	  5bdc0f:       85 c0                   test   %eax,%eax
    0.00 :	  5bdc11:       0f 85 a9 00 00 00       jne    5bdcc0 <ExecHashJoin+0x220>
         :	        {
         :	                /*
         :	                 * Check to see if first outer tuple was already fetched by
         :	                 * ExecHashJoin() and not used yet.
         :	                 */
         :	                slot = hjstate->hj_FirstOuterTupleSlot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:661
    1.75 :	  5bdc17:       4d 8b a6 e8 00 00 00    mov    0xe8(%r14),%r12
         :	                if (!TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:662
    1.75 :	  5bdc1e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5bdc21:       74 5d                   je     5bdc80 <ExecHashJoin+0x1e0>
    0.00 :	  5bdc23:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
    0.00 :	  5bdc29:       75 55                   jne    5bdc80 <ExecHashJoin+0x1e0>
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
    0.00 :	  5bdc2b:       49 c7 86 e8 00 00 00    movq   $0x0,0xe8(%r14)
    0.00 :	  5bdc32:       00 00 00 00 
    0.00 :	  5bdc36:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bdc3d:       00 00 00 
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
    0.00 :	  5bdc40:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
    1.75 :	  5bdc46:       75 50                   jne    5bdc98 <ExecHashJoin+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have to compute the tuple's hash value.
         :	                         */
         :	                        ExprContext *econtext = hjstate->js.ps.ps_ExprContext;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:672
    1.75 :	  5bdc48:       49 8b 76 60             mov    0x60(%r14),%rsi
         :
         :	                        econtext->ecxt_outertuple = slot;
         :	                        if (ExecHashGetHashValue(hashtable, econtext,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:675
    1.75 :	  5bdc4c:       4c 8d 4d d0             lea    -0x30(%rbp),%r9
    1.75 :	  5bdc50:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5bdc55:       48 89 df                mov    %rbx,%rdi
         :	                        /*
         :	                         * We have to compute the tuple's hash value.
         :	                         */
         :	                        ExprContext *econtext = hjstate->js.ps.ps_ExprContext;
         :
         :	                        econtext->ecxt_outertuple = slot;
    0.00 :	  5bdc58:       4c 89 66 18             mov    %r12,0x18(%rsi)
         :	                        if (ExecHashGetHashValue(hashtable, econtext,
    1.75 :	  5bdc5c:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5bdc63:       00 
    0.00 :	  5bdc64:       49 8b 96 90 00 00 00    mov    0x90(%r14),%rdx
    0.00 :	  5bdc6b:       41 0f 95 c0             setne  %r8b
    0.00 :	  5bdc6f:       41 83 e0 01             and    $0x1,%r8d
    0.00 :	  5bdc73:       e8 18 e2 ff ff          callq  5bbe90 <ExecHashGetHashValue>
    1.75 :	  5bdc78:       84 c0                   test   %al,%al
    0.00 :	  5bdc7a:       0f 85 90 04 00 00       jne    5be110 <ExecHashJoin+0x670>
         :
         :	                        /*
         :	                         * That tuple couldn't match because of a NULL, so discard it and
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
    0.00 :	  5bdc80:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  5bdc84:       e8 17 e8 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                if (!TupIsNull(slot))
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
    8.77 :	  5bdc89:       48 85 c0                test   %rax,%rax
         :
         :	                        /*
         :	                         * That tuple couldn't match because of a NULL, so discard it and
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
    0.00 :	  5bdc8c:       49 89 c4                mov    %rax,%r12
         :	                if (!TupIsNull(slot))
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
    0.00 :	  5bdc8f:       75 af                   jne    5bdc40 <ExecHashJoin+0x1a0>
    0.00 :	  5bdc91:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                                                                   node,
         :	                                                                                                                   &hashvalue);
         :	                                if (TupIsNull(outerTupleSlot))
         :	                                {
         :	                                        /* end of batch, or maybe whole join */
         :	                                        if (HJ_FILL_INNER(node))
    0.00 :	  5bdc98:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdc9f:       00 
    0.00 :	  5bdca0:       0f 84 0a 03 00 00       je     5bdfb0 <ExecHashJoin+0x510>
         :	                                        {
         :	                                                /* set up to scan for unmatched inner tuples */
         :	                                                ExecPrepHashTableForUnmatched(node);
    0.00 :	  5bdca6:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdca9:       e8 52 de ff ff          callq  5bbb00 <ExecPrepHashTableForUnmatched>
         :	                                                node->hj_JoinState = HJ_FILL_INNER_TUPLES;
    0.00 :	  5bdcae:       41 c7 86 f0 00 00 00    movl   $0x5,0xf0(%r14)
    0.00 :	  5bdcb5:       05 00 00 00 
    0.00 :	  5bdcb9:       e9 6a fe ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdcbe:       66 90                   xchg   %ax,%ax
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
         :	                }
         :	        }
         :	        else if (curbatch < hashtable->nbatch)
    0.00 :	  5bdcc0:       3b 43 40                cmp    0x40(%rbx),%eax
    0.00 :	  5bdcc3:       7d d3                   jge    5bdc98 <ExecHashJoin+0x1f8>
         :	        {
         :	                BufFile    *file = hashtable->outerBatchFile[curbatch];
    0.00 :	  5bdcc5:       48 63 d0                movslq %eax,%rdx
    0.00 :	  5bdcc8:       48 8b 43 70             mov    0x70(%rbx),%rax
    0.00 :	  5bdccc:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
         :
         :	                /*
         :	                 * In outer-join cases, we could get here even though the batch file
         :	                 * is empty.
         :	                 */
         :	                if (file == NULL)
    0.00 :	  5bdcd0:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5bdcd3:       74 c3                   je     5bdc98 <ExecHashJoin+0x1f8>
         :	                        return NULL;
         :
         :	                slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5bdcd5:       49 8b 8e c8 00 00 00    mov    0xc8(%r14),%rcx
    0.00 :	  5bdcdc:       48 8d 55 d0             lea    -0x30(%rbp),%rdx
    0.00 :	  5bdce0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdce3:       e8 c8 fc ff ff          callq  5bd9b0 <ExecHashJoinGetSavedTuple>
         :	                                                                                 file,
         :	                                                                                 hashvalue,
         :	                                                                                 hjstate->hj_OuterTupleSlot);
         :	                if (!TupIsNull(slot))
    0.00 :	  5bdce8:       48 85 c0                test   %rax,%rax
         :	                 * is empty.
         :	                 */
         :	                if (file == NULL)
         :	                        return NULL;
         :
         :	                slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5bdceb:       49 89 c4                mov    %rax,%r12
         :	                                                                                 file,
         :	                                                                                 hashvalue,
         :	                                                                                 hjstate->hj_OuterTupleSlot);
         :	                if (!TupIsNull(slot))
    0.00 :	  5bdcee:       74 a8                   je     5bdc98 <ExecHashJoin+0x1f8>
    0.00 :	  5bdcf0:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5bdcf4:       75 a2                   jne    5bdc98 <ExecHashJoin+0x1f8>
         :	                                        else
         :	                                                node->hj_JoinState = HJ_NEED_NEW_BATCH;
         :	                                        continue;
         :	                                }
         :
         :	                                econtext->ecxt_outertuple = outerTupleSlot;
    0.00 :	  5bdcf6:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:227
    1.75 :	  5bdcfa:       4c 89 61 18             mov    %r12,0x18(%rcx)
         :
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:234
    3.51 :	  5bdcfe:       8b 75 d0                mov    -0x30(%rbp),%esi
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:235
    1.75 :	  5bdd01:       48 8d 4d cc             lea    -0x34(%rbp),%rcx
    0.00 :	  5bdd05:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    1.75 :	  5bdd09:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
         :	                                                node->hj_JoinState = HJ_NEED_NEW_BATCH;
         :	                                        continue;
         :	                                }
         :
         :	                                econtext->ecxt_outertuple = outerTupleSlot;
         :	                                node->hj_MatchedOuter = false;
    0.00 :	  5bdd0d:       41 c6 86 f4 00 00 00    movb   $0x0,0xf4(%r14)
    0.00 :	  5bdd14:       00 
         :
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
    0.00 :	  5bdd15:       41 89 b6 b0 00 00 00    mov    %esi,0xb0(%r14)
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
    1.75 :	  5bdd1c:       e8 9f dd ff ff          callq  5bbac0 <ExecHashGetBucketAndBatch>
         :	                                                                                  &node->hj_CurBucketNo, &batchno);
         :	                                node->hj_CurSkewBucketNo = ExecHashGetSkewBucket(hashtable,
    0.00 :	  5bdd21:       8b 75 d0                mov    -0x30(%rbp),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:237
    7.02 :	  5bdd24:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5bdd28:       e8 83 de ff ff          callq  5bbbb0 <ExecHashGetSkewBucket>
         :
         :	                                /*
         :	                                 * The tuple might not belong to the current batch (where
         :	                                 * "current batch" includes the skew buckets if any).
         :	                                 */
         :	                                if (batchno != hashtable->curbatch &&
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:245
    1.75 :	  5bdd2d:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
         :	                                                                                  &node->hj_CurBucketNo, &batchno);
         :	                                node->hj_CurSkewBucketNo = ExecHashGetSkewBucket(hashtable,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:237
    3.51 :	  5bdd31:       41 89 86 b8 00 00 00    mov    %eax,0xb8(%r14)
         :	                                                                                                                                 hashvalue);
         :	                                node->hj_CurTuple = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:239
    3.51 :	  5bdd38:       49 c7 86 c0 00 00 00    movq   $0x0,0xc0(%r14)
    0.00 :	  5bdd3f:       00 00 00 00 
         :
         :	                                /*
         :	                                 * The tuple might not belong to the current batch (where
         :	                                 * "current batch" includes the skew buckets if any).
         :	                                 */
         :	                                if (batchno != hashtable->curbatch &&
    0.00 :	  5bdd43:       8b 45 cc                mov    -0x34(%rbp),%eax
    0.00 :	  5bdd46:       39 42 44                cmp    %eax,0x44(%rdx)
    0.00 :	  5bdd49:       74 0e                   je     5bdd59 <ExecHashJoin+0x2b9>
    0.00 :	  5bdd4b:       41 83 be b8 00 00 00    cmpl   $0xffffffff,0xb8(%r14)
    0.00 :	  5bdd52:       ff 
    0.00 :	  5bdd53:       0f 84 4d 04 00 00       je     5be1a6 <ExecHashJoin+0x706>
         :	                                        /* Loop around, staying in HJ_NEED_NEW_OUTER state */
         :	                                        continue;
         :	                                }
         :
         :	                                /* OK, let's scan the bucket for matches */
         :	                                node->hj_JoinState = HJ_SCAN_BUCKET;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:261
    1.75 :	  5bdd59:       41 c7 86 f0 00 00 00    movl   $0x3,0xf0(%r14)
    0.00 :	  5bdd60:       03 00 00 00 
         :	                                /*
         :	                                 * We check for interrupts here because this corresponds to
         :	                                 * where we'd fetch a row from a child plan node in other join
         :	                                 * types.
         :	                                 */
         :	                                CHECK_FOR_INTERRUPTS();
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:272
    1.75 :	  5bdd64:       0f b6 05 25 c3 5f 00    movzbl 0x5fc325(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5bdd6b:       84 c0                   test   %al,%al
    0.00 :	  5bdd6d:       0f 85 8d 03 00 00       jne    5be100 <ExecHashJoin+0x660>
         :
         :	                                /*
         :	                                 * Scan the selected hash bucket for matches to current outer
         :	                                 */
         :	                                if (!ExecScanHashBucket(node, econtext))
    0.00 :	  5bdd73:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdd77:       4c 89 f7                mov    %r14,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:277
    1.75 :	  5bdd7a:       e8 21 e0 ff ff          callq  5bbda0 <ExecScanHashBucket>
    0.00 :	  5bdd7f:       84 c0                   test   %al,%al
    0.00 :	  5bdd81:       0f 85 39 02 00 00       jne    5bdfc0 <ExecHashJoin+0x520>
         :	                                {
         :	                                        /* out of matches; check for possible outer-join fill */
         :	                                        node->hj_JoinState = HJ_FILL_OUTER_TUPLE;
    0.00 :	  5bdd87:       41 c7 86 f0 00 00 00    movl   $0x4,0xf0(%r14)
    0.00 :	  5bdd8e:       04 00 00 00 
         :	                                        continue;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:281
    1.75 :	  5bdd92:       e9 91 fd ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdd97:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bdd9e:       00 00 
         :	 * Returns true if successful, false if there are no more batches.
         :	 */
         :	static bool
         :	ExecHashJoinNewBatch(HashJoinState *hjstate)
         :	{
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
    0.00 :	  5bdda0:       4d 8b a6 a8 00 00 00    mov    0xa8(%r14),%r12
         :	        BufFile    *innerFile;
         :	        TupleTableSlot *slot;
         :	        uint32          hashvalue;
         :
         :	        nbatch = hashtable->nbatch;
         :	        curbatch = hashtable->curbatch;
    0.00 :	  5bdda7:       41 8b 5c 24 44          mov    0x44(%r12),%ebx
         :	        int                     curbatch;
         :	        BufFile    *innerFile;
         :	        TupleTableSlot *slot;
         :	        uint32          hashvalue;
         :
         :	        nbatch = hashtable->nbatch;
    0.00 :	  5bddac:       45 8b 7c 24 40          mov    0x40(%r12),%r15d
         :	        curbatch = hashtable->curbatch;
         :
         :	        if (curbatch > 0)
    0.00 :	  5bddb1:       85 db                   test   %ebx,%ebx
    0.00 :	  5bddb3:       0f 8e 77 03 00 00       jle    5be130 <ExecHashJoin+0x690>
         :	        {
         :	                /*
         :	                 * We no longer need the previous outer batch file; close it right
         :	                 * away to free disk space.
         :	                 */
         :	                if (hashtable->outerBatchFile[curbatch])
    0.00 :	  5bddb9:       48 63 c3                movslq %ebx,%rax
    0.00 :	  5bddbc:       4c 8d 2c c5 00 00 00    lea    0x0(,%rax,8),%r13
    0.00 :	  5bddc3:       00 
    0.00 :	  5bddc4:       4c 89 e8                mov    %r13,%rax
    0.00 :	  5bddc7:       49 03 44 24 70          add    0x70(%r12),%rax
    0.00 :	  5bddcc:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5bddcf:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bddd2:       74 0d                   je     5bdde1 <ExecHashJoin+0x341>
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
    0.00 :	  5bddd4:       e8 d7 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bddd9:       4c 89 e8                mov    %r13,%rax
    0.00 :	  5bdddc:       49 03 44 24 70          add    0x70(%r12),%rax
         :	                hashtable->outerBatchFile[curbatch] = NULL;
    0.00 :	  5bdde1:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
         :	         *
         :	         * 3. Similarly, if we have increased nbatch since starting the outer
         :	         * scan, we have to rescan outer batches in case they contain tuples that
         :	         * need to be reassigned.
         :	         */
         :	        curbatch++;
    0.00 :	  5bdde8:       44 8d 6b 01             lea    0x1(%rbx),%r13d
         :	        while (curbatch < nbatch &&
    0.00 :	  5bddec:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  5bddef:       7f 73                   jg     5bde64 <ExecHashJoin+0x3c4>
    0.00 :	  5bddf1:       e9 7a 04 00 00          jmpq   5be270 <ExecHashJoin+0x7d0>
    0.00 :	  5bddf6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bddfd:       00 00 00 
    0.00 :	  5bde00:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bde05:       48 83 3c d8 00          cmpq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde0a:       0f 85 38 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                   (hashtable->outerBatchFile[curbatch] == NULL ||
         :	                        hashtable->innerBatchFile[curbatch] == NULL))
         :	        {
         :	                if (hashtable->outerBatchFile[curbatch] &&
    0.00 :	  5bde10:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5bde17:       00 
    0.00 :	  5bde18:       0f 85 2a 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        HJ_FILL_INNER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
         :	                        nbatch != hashtable->nbatch_original)
         :	                        break;                          /* must process due to rule 2 */
         :	                if (hashtable->outerBatchFile[curbatch] &&
    0.00 :	  5bde1e:       45 3b 7c 24 4c          cmp    0x4c(%r12),%r15d
    0.00 :	  5bde23:       0f 85 1f 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        break;                          /* must process due to rule 3 */
         :	                /* We can ignore this batch. */
         :	                /* Release associated temp files right away. */
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
         :	                hashtable->innerBatchFile[curbatch] = NULL;
    0.00 :	  5bde29:       48 c7 04 d8 00 00 00    movq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde30:       00 
         :	                if (hashtable->outerBatchFile[curbatch])
    0.00 :	  5bde31:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bde35:       49 03 44 24 70          add    0x70(%r12),%rax
    0.00 :	  5bde3a:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5bde3d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bde40:       74 0e                   je     5bde50 <ExecHashJoin+0x3b0>
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
    0.00 :	  5bde42:       e8 69 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bde47:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bde4b:       49 03 44 24 70          add    0x70(%r12),%rax
         :	                hashtable->outerBatchFile[curbatch] = NULL;
         :	                curbatch++;
    0.00 :	  5bde50:       41 83 c5 01             add    $0x1,%r13d
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
         :	                hashtable->innerBatchFile[curbatch] = NULL;
         :	                if (hashtable->outerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
         :	                hashtable->outerBatchFile[curbatch] = NULL;
    0.00 :	  5bde54:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
         :	         * 3. Similarly, if we have increased nbatch since starting the outer
         :	         * scan, we have to rescan outer batches in case they contain tuples that
         :	         * need to be reassigned.
         :	         */
         :	        curbatch++;
         :	        while (curbatch < nbatch &&
    0.00 :	  5bde5b:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  5bde5e:       0f 8e 0c 04 00 00       jle    5be270 <ExecHashJoin+0x7d0>
    0.00 :	  5bde64:       49 63 dd                movslq %r13d,%rbx
    0.00 :	  5bde67:       48 8d 0c dd 00 00 00    lea    0x0(,%rbx,8),%rcx
    0.00 :	  5bde6e:       00 
    0.00 :	  5bde6f:       48 89 4d c0             mov    %rcx,-0x40(%rbp)
    0.00 :	  5bde73:       49 8b 44 24 70          mov    0x70(%r12),%rax
    0.00 :	  5bde78:       48 83 3c d8 00          cmpq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde7d:       75 81                   jne    5bde00 <ExecHashJoin+0x360>
         :	                        hashtable->innerBatchFile[curbatch] == NULL))
         :	        {
         :	                if (hashtable->outerBatchFile[curbatch] &&
         :	                        HJ_FILL_OUTER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
    0.00 :	  5bde7f:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bde84:       48 8b 3c d8             mov    (%rax,%rbx,8),%rdi
    0.00 :	  5bde88:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bde8b:       74 9c                   je     5bde29 <ExecHashJoin+0x389>
    0.00 :	  5bde8d:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bde94:       00 
    0.00 :	  5bde95:       0f 85 ad 01 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        HJ_FILL_INNER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
    0.00 :	  5bde9b:       45 3b 7c 24 48          cmp    0x48(%r12),%r15d
    0.00 :	  5bdea0:       0f 85 a2 01 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        nbatch != hashtable->nbatch_outstart)
         :	                        break;                          /* must process due to rule 3 */
         :	                /* We can ignore this batch. */
         :	                /* Release associated temp files right away. */
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
    0.00 :	  5bdea6:       e8 05 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bdeab:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bdeb0:       e9 74 ff ff ff          jmpq   5bde29 <ExecHashJoin+0x389>
    0.00 :	  5bdeb5:       0f 1f 00                nopl   (%rax)
         :	                                /*
         :	                                 * We have finished a batch, but we are doing right/full join,
         :	                                 * so any unmatched inner tuples in the hashtable have to be
         :	                                 * emitted before we continue to the next batch.
         :	                                 */
         :	                                if (!ExecScanHashTableForUnmatched(node, econtext))
    0.00 :	  5bdeb8:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdebc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdebf:       e8 ec dd ff ff          callq  5bbcb0 <ExecScanHashTableForUnmatched>
    0.00 :	  5bdec4:       84 c0                   test   %al,%al
    0.00 :	  5bdec6:       0f 84 e4 00 00 00       je     5bdfb0 <ExecHashJoin+0x510>
         :
         :	                                /*
         :	                                 * Generate a fake join tuple with nulls for the outer tuple,
         :	                                 * and return it if it passes the non-join quals.
         :	                                 */
         :	                                econtext->ecxt_outertuple = node->hj_NullOuterTupleSlot;
    0.00 :	  5bdecc:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
    0.00 :	  5bded3:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5bded7:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                                if (otherqual == NIL ||
    0.00 :	  5bdedb:       48 83 7d a8 00          cmpq   $0x0,-0x58(%rbp)
    0.00 :	  5bdee0:       0f 84 8c 00 00 00       je     5bdf72 <ExecHashJoin+0x4d2>
    0.00 :	  5bdee6:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdeea:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bdeee:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdef0:       e8 1b f0 fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdef5:       84 c0                   test   %al,%al
    0.00 :	  5bdef7:       75 79                   jne    5bdf72 <ExecHashJoin+0x4d2>
         :	                                                        (isDone == ExprMultipleResult);
         :	                                                return result;
         :	                                        }
         :	                                }
         :	                                else
         :	                                        InstrCountFiltered2(node, 1);
    0.00 :	  5bdef9:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5bdefd:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdf00:       0f 84 22 fc ff ff       je     5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf06:       f2 0f 10 05 4a 12 1f    movsd  0x1f124a(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bdf0d:       00 
    0.00 :	  5bdf0e:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bdf15:       00 
    0.00 :	  5bdf16:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bdf1d:       00 
    0.00 :	  5bdf1e:       e9 05 fc ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf23:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                 * whether to emit a dummy outer-join tuple.  Whether we emit
         :	                                 * one or not, the next state is NEED_NEW_OUTER.
         :	                                 */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :
         :	                                if (!node->hj_MatchedOuter &&
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:345
    7.02 :	  5bdf28:       41 80 be f4 00 00 00    cmpb   $0x0,0xf4(%r14)
    0.00 :	  5bdf2f:       00 
         :	                                /*
         :	                                 * The current outer tuple has run out of matches, so check
         :	                                 * whether to emit a dummy outer-join tuple.  Whether we emit
         :	                                 * one or not, the next state is NEED_NEW_OUTER.
         :	                                 */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5bdf30:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5bdf37:       02 00 00 00 
         :
         :	                                if (!node->hj_MatchedOuter &&
    0.00 :	  5bdf3b:       0f 85 e7 fb ff ff       jne    5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf41:       49 8b 86 e0 00 00 00    mov    0xe0(%r14),%rax
    5.26 :	  5bdf48:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdf4b:       0f 84 d7 fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
         :	                                {
         :	                                        /*
         :	                                         * Generate a fake join tuple with nulls for the inner
         :	                                         * tuple, and return it if it passes the non-join quals.
         :	                                         */
         :	                                        econtext->ecxt_innertuple = node->hj_NullInnerTupleSlot;
    0.00 :	  5bdf51:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
    0.00 :	  5bdf55:       48 89 41 10             mov    %rax,0x10(%rcx)
         :
         :	                                        if (otherqual == NIL ||
    0.00 :	  5bdf59:       48 83 7d a8 00          cmpq   $0x0,-0x58(%rbp)
    0.00 :	  5bdf5e:       74 12                   je     5bdf72 <ExecHashJoin+0x4d2>
    0.00 :	  5bdf60:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bdf64:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdf66:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  5bdf69:       e8 a2 ef fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdf6e:       84 c0                   test   %al,%al
    0.00 :	  5bdf70:       74 87                   je     5bdef9 <ExecHashJoin+0x459>
         :	                                if (otherqual == NIL ||
         :	                                        ExecQual(otherqual, econtext, false))
         :	                                {
         :	                                        TupleTableSlot *result;
         :
         :	                                        result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5bdf72:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5bdf76:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5bdf7a:       e8 81 f0 fe ff          callq  5ad000 <ExecProject>
         :
         :	                                        if (isDone != ExprEndResult)
    0.00 :	  5bdf7f:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5bdf82:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5bdf85:       0f 84 9d fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
         :	                                        {
         :	                                                node->js.ps.ps_TupFromTlist =
    0.00 :	  5bdf8b:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bdf8e:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5bdf93:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
         :	                                         (int) node->hj_JoinState);
         :	                }
         :	        }
         :	}
    0.00 :	  5bdf98:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  5bdf9c:       5b                      pop    %rbx
    0.00 :	  5bdf9d:       41 5c                   pop    %r12
    0.00 :	  5bdf9f:       41 5d                   pop    %r13
    0.00 :	  5bdfa1:       41 5e                   pop    %r14
    0.00 :	  5bdfa3:       41 5f                   pop    %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:426
    1.75 :	  5bdfa5:       c9                      leaveq 
    0.00 :	  5bdfa6:       c3                      retq   
    0.00 :	  5bdfa7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bdfae:       00 00 
         :	                                 * emitted before we continue to the next batch.
         :	                                 */
         :	                                if (!ExecScanHashTableForUnmatched(node, econtext))
         :	                                {
         :	                                        /* no more unmatched tuples */
         :	                                        node->hj_JoinState = HJ_NEED_NEW_BATCH;
    0.00 :	  5bdfb0:       41 c7 86 f0 00 00 00    movl   $0x6,0xf0(%r14)
    0.00 :	  5bdfb7:       06 00 00 00 
         :	                                        continue;
    0.00 :	  5bdfbb:       e9 68 fb ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
         :	                                 * table, and return the slot.
         :	                                 *
         :	                                 * Only the joinquals determine tuple match status, but all
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
    0.00 :	  5bdfc0:       48 83 7d a0 00          cmpq   $0x0,-0x60(%rbp)
    0.00 :	  5bdfc5:       74 41                   je     5be008 <ExecHashJoin+0x568>
    0.00 :	  5bdfc7:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdfcb:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  5bdfcf:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdfd1:       e8 3a ef fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdfd6:       84 c0                   test   %al,%al
    0.00 :	  5bdfd8:       75 2e                   jne    5be008 <ExecHashJoin+0x568>
         :	                                        }
         :	                                        else
         :	                                                InstrCountFiltered2(node, 1);
         :	                                }
         :	                                else
         :	                                        InstrCountFiltered1(node, 1);
    0.00 :	  5bdfda:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5bdfde:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdfe1:       0f 84 41 fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdfe7:       f2 0f 10 05 69 11 1f    movsd  0x1f1169(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bdfee:       00 
    0.00 :	  5bdfef:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5bdff6:       00 
    0.00 :	  5bdff7:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5bdffe:       00 
    0.00 :	  5bdfff:       e9 24 fb ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5be004:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
         :	                                {
         :	                                        node->hj_MatchedOuter = true;
         :	                                        HeapTupleHeaderSetMatch(HJTUPLE_MINTUPLE(node->hj_CurTuple));
    0.00 :	  5be008:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	                                 * Only the joinquals determine tuple match status, but all
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
         :	                                {
         :	                                        node->hj_MatchedOuter = true;
    0.00 :	  5be00f:       41 c6 86 f4 00 00 00    movb   $0x1,0xf4(%r14)
    0.00 :	  5be016:       01 
         :	                                        HeapTupleHeaderSetMatch(HJTUPLE_MINTUPLE(node->hj_CurTuple));
    0.00 :	  5be017:       66 81 48 1a 00 80       orw    $0x8000,0x1a(%rax)
         :
         :	                                        /* In an antijoin, we never return a matched tuple */
         :	                                        if (node->js.jointype == JOIN_ANTI)
    0.00 :	  5be01d:       41 8b 46 78             mov    0x78(%r14),%eax
    0.00 :	  5be021:       83 f8 05                cmp    $0x5,%eax
    0.00 :	  5be024:       0f 84 bd 00 00 00       je     5be0e7 <ExecHashJoin+0x647>
         :
         :	                                        /*
         :	                                         * In a semijoin, we'll consider returning the first
         :	                                         * match, but after that we're done with this outer tuple.
         :	                                         */
         :	                                        if (node->js.jointype == JOIN_SEMI)
    0.00 :	  5be02a:       83 f8 04                cmp    $0x4,%eax
    0.00 :	  5be02d:       0f 85 a8 fe ff ff       jne    5bdedb <ExecHashJoin+0x43b>
         :	                                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5be033:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5be03a:       02 00 00 00 
    0.00 :	  5be03e:       e9 98 fe ff ff          jmpq   5bdedb <ExecHashJoin+0x43b>
    0.00 :	  5be043:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        }
         :
         :	        if (curbatch >= nbatch)
         :	                return false;                   /* no more batches */
         :
         :	        hashtable->curbatch = curbatch;
    0.00 :	  5be048:       45 89 6c 24 44          mov    %r13d,0x44(%r12)
         :
         :	        /*
         :	         * Reload the hash table with the new inner batch (which could be empty)
         :	         */
         :	        ExecHashTableReset(hashtable);
    0.00 :	  5be04d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be050:       e8 db db ff ff          callq  5bbc30 <ExecHashTableReset>
         :
         :	        innerFile = hashtable->innerBatchFile[curbatch];
    0.00 :	  5be055:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5be05a:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5be05e:       48 8b 1c 10             mov    (%rax,%rdx,1),%rbx
         :
         :	        if (innerFile != NULL)
    0.00 :	  5be062:       48 85 db                test   %rbx,%rbx
    0.00 :	  5be065:       74 5b                   je     5be0c2 <ExecHashJoin+0x622>
         :	        {
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
    0.00 :	  5be067:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5be069:       31 d2                   xor    %edx,%edx
    0.00 :	  5be06b:       31 f6                   xor    %esi,%esi
    0.00 :	  5be06d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5be070:       e8 8b ca 0b 00          callq  67ab00 <BufFileSeek>
    0.00 :	  5be075:       85 c0                   test   %eax,%eax
    0.00 :	  5be077:       74 15                   je     5be08e <ExecHashJoin+0x5ee>
    0.00 :	  5be079:       e9 08 02 00 00          jmpq   5be286 <ExecHashJoin+0x7e6>
    0.00 :	  5be07e:       66 90                   xchg   %ax,%ax
         :	                {
         :	                        /*
         :	                         * NOTE: some tuples may be sent to future batches.  Also, it is
         :	                         * possible for hashtable->nbatch to be increased here!
         :	                         */
         :	                        ExecHashTableInsert(hashtable, slot, hashvalue);
    0.00 :	  5be080:       8b 55 c8                mov    -0x38(%rbp),%edx
    0.00 :	  5be083:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5be086:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be089:       e8 82 e3 ff ff          callq  5bc410 <ExecHashTableInsert>
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
         :	                                        (errcode_for_file_access(),
         :	                                   errmsg("could not rewind hash-join temporary file: %m")));
         :
         :	                while ((slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5be08e:       49 8b 8e d0 00 00 00    mov    0xd0(%r14),%rcx
    0.00 :	  5be095:       48 8d 55 c8             lea    -0x38(%rbp),%rdx
    0.00 :	  5be099:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5be09c:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5be09f:       e8 0c f9 ff ff          callq  5bd9b0 <ExecHashJoinGetSavedTuple>
    0.00 :	  5be0a4:       48 85 c0                test   %rax,%rax
    0.00 :	  5be0a7:       75 d7                   jne    5be080 <ExecHashJoin+0x5e0>
         :
         :	                /*
         :	                 * after we build the hash table, the inner batch file is no longer
         :	                 * needed
         :	                 */
         :	                BufFileClose(innerFile);
    0.00 :	  5be0a9:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5be0ac:       e8 ff ce 0b 00          callq  67afb0 <BufFileClose>
         :	                hashtable->innerBatchFile[curbatch] = NULL;
    0.00 :	  5be0b1:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5be0b6:       48 8b 4d c0             mov    -0x40(%rbp),%rcx
    0.00 :	  5be0ba:       48 c7 04 08 00 00 00    movq   $0x0,(%rax,%rcx,1)
    0.00 :	  5be0c1:       00 
         :	        }
         :
         :	        /*
         :	         * Rewind outer batch file (if present), so that we can start reading it.
         :	         */
         :	        if (hashtable->outerBatchFile[curbatch] != NULL)
    0.00 :	  5be0c2:       49 8b 44 24 70          mov    0x70(%r12),%rax
    0.00 :	  5be0c7:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5be0cb:       48 8b 3c 10             mov    (%rax,%rdx,1),%rdi
    0.00 :	  5be0cf:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5be0d2:       74 13                   je     5be0e7 <ExecHashJoin+0x647>
         :	        {
         :	                if (BufFileSeek(hashtable->outerBatchFile[curbatch], 0, 0L, SEEK_SET))
    0.00 :	  5be0d4:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5be0d6:       31 d2                   xor    %edx,%edx
    0.00 :	  5be0d8:       31 f6                   xor    %esi,%esi
    0.00 :	  5be0da:       e8 21 ca 0b 00          callq  67ab00 <BufFileSeek>
    0.00 :	  5be0df:       85 c0                   test   %eax,%eax
    0.00 :	  5be0e1:       0f 85 ea 00 00 00       jne    5be1d1 <ExecHashJoin+0x731>
         :	                                /*
         :	                                 * Try to advance to next batch.  Done if there are no more.
         :	                                 */
         :	                                if (!ExecHashJoinNewBatch(node))
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5be0e7:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5be0ee:       02 00 00 00 
    0.00 :	  5be0f2:       e9 31 fa ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5be0f7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5be0fe:       00 00 
         :	                                /*
         :	                                 * We check for interrupts here because this corresponds to
         :	                                 * where we'd fetch a row from a child plan node in other join
         :	                                 * types.
         :	                                 */
         :	                                CHECK_FOR_INTERRUPTS();
    0.00 :	  5be100:       e8 9b e1 0d 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5be105:       e9 69 fc ff ff          jmpq   5bdd73 <ExecHashJoin+0x2d3>
    0.00 :	  5be10a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                                                         true,          /* outer tuple */
         :	                                                                         HJ_FILL_OUTER(hjstate),
         :	                                                                         hashvalue))
         :	                        {
         :	                                /* remember outer relation is not empty for possible rescan */
         :	                                hjstate->hj_OuterNotEmpty = true;
    0.00 :	  5be110:       41 c6 86 f5 00 00 00    movb   $0x1,0xf5(%r14)
    0.00 :	  5be117:       01 
         :	                                 * We don't have an outer tuple, try to get the next one
         :	                                 */
         :	                                outerTupleSlot = ExecHashJoinOuterGetTuple(outerNode,
         :	                                                                                                                   node,
         :	                                                                                                                   &hashvalue);
         :	                                if (TupIsNull(outerTupleSlot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:213
    5.26 :	  5be118:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
    0.00 :	  5be11e:       0f 85 74 fb ff ff       jne    5bdc98 <ExecHashJoin+0x1f8>
    0.00 :	  5be124:       e9 cd fb ff ff          jmpq   5bdcf6 <ExecHashJoin+0x256>
    0.00 :	  5be129:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                 * Reset some of the skew optimization state variables, since we no
         :	                 * longer need to consider skew tuples after the first batch. The
         :	                 * memory context reset we are about to do will release the skew
         :	                 * hashtable itself.
         :	                 */
         :	                hashtable->skewEnabled = false;
    0.00 :	  5be130:       41 c6 44 24 21 00       movb   $0x0,0x21(%r12)
         :	                hashtable->skewBucket = NULL;
    0.00 :	  5be136:       49 c7 44 24 28 00 00    movq   $0x0,0x28(%r12)
    0.00 :	  5be13d:       00 00 
         :	                hashtable->skewBucketNums = NULL;
    0.00 :	  5be13f:       49 c7 44 24 38 00 00    movq   $0x0,0x38(%r12)
    0.00 :	  5be146:       00 00 
         :	                hashtable->nSkewBuckets = 0;
    0.00 :	  5be148:       41 c7 44 24 34 00 00    movl   $0x0,0x34(%r12)
    0.00 :	  5be14f:       00 00 
         :	                hashtable->spaceUsedSkew = 0;
    0.00 :	  5be151:       49 c7 84 24 a8 00 00    movq   $0x0,0xa8(%r12)
    0.00 :	  5be158:       00 00 00 00 00 
    0.00 :	  5be15d:       e9 86 fc ff ff          jmpq   5bdde8 <ExecHashJoin+0x348>
    0.00 :	  5be162:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be168:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5be16f:       00 
    0.00 :	  5be170:       0f 84 aa 00 00 00       je     5be220 <ExecHashJoin+0x780>
         :	                                                 (outerNode->plan->startup_cost < hashNode->ps.plan->total_cost &&
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
    0.00 :	  5be176:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  5be17a:       e8 21 e3 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
    0.00 :	  5be17f:       48 85 c0                test   %rax,%rax
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
         :	                                                 (outerNode->plan->startup_cost < hashNode->ps.plan->total_cost &&
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
    0.00 :	  5be182:       49 89 86 e8 00 00 00    mov    %rax,0xe8(%r14)
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
    0.00 :	  5be189:       0f 84 e8 00 00 00       je     5be277 <ExecHashJoin+0x7d7>
    0.00 :	  5be18f:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5be193:       0f 85 de 00 00 00       jne    5be277 <ExecHashJoin+0x7d7>
         :	                                        {
         :	                                                node->hj_OuterNotEmpty = false;
         :	                                                return NULL;
         :	                                        }
         :	                                        else
         :	                                                node->hj_OuterNotEmpty = true;
    0.00 :	  5be199:       41 c6 86 f5 00 00 00    movb   $0x1,0xf5(%r14)
    0.00 :	  5be1a0:       01 
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be1a1:       e9 f3 f9 ff ff          jmpq   5bdb99 <ExecHashJoin+0xf9>
         :	                                        /*
         :	                                         * Need to postpone this outer tuple to a later batch.
         :	                                         * Save it in the corresponding outer-batch file.
         :	                                         */
         :	                                        Assert(batchno > hashtable->curbatch);
         :	                                        ExecHashJoinSaveTuple(ExecFetchSlotMinimalTuple(outerTupleSlot),
    0.00 :	  5be1a6:       48 98                   cltq   
    0.00 :	  5be1a8:       8b 5d d0                mov    -0x30(%rbp),%ebx
    0.00 :	  5be1ab:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be1ae:       4c 8d 2c c5 00 00 00    lea    0x0(,%rax,8),%r13
    0.00 :	  5be1b5:       00 
    0.00 :	  5be1b6:       4c 03 6a 70             add    0x70(%rdx),%r13
    0.00 :	  5be1ba:       e8 91 5d ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
    0.00 :	  5be1bf:       89 de                   mov    %ebx,%esi
    0.00 :	  5be1c1:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5be1c4:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  5be1c7:       e8 94 f3 ff ff          callq  5bd560 <ExecHashJoinSaveTuple>
         :	                                                                                  hashvalue,
         :	                                                                                &hashtable->outerBatchFile[batchno]);
         :	                                        /* Loop around, staying in HJ_NEED_NEW_OUTER state */
         :	                                        continue;
    0.00 :	  5be1cc:       e9 57 f9 ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
         :	         * Rewind outer batch file (if present), so that we can start reading it.
         :	         */
         :	        if (hashtable->outerBatchFile[curbatch] != NULL)
         :	        {
         :	                if (BufFileSeek(hashtable->outerBatchFile[curbatch], 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
    0.00 :	  5be1d1:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5be1d4:       b9 f0 ba 88 00          mov    $0x88baf0,%ecx
    0.00 :	  5be1d9:       ba 55 03 00 00          mov    $0x355,%edx
    0.00 :	  5be1de:       be 58 b9 88 00          mov    $0x88b958,%esi
    0.00 :	  5be1e3:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5be1e8:       e8 d3 c8 1b 00          callq  77aac0 <errstart>
    0.00 :	  5be1ed:       84 c0                   test   %al,%al
    0.00 :	  5be1ef:       0f 84 69 f9 ff ff       je     5bdb5e <ExecHashJoin+0xbe>
    0.00 :	  5be1f5:       bf d0 b9 88 00          mov    $0x88b9d0,%edi
    0.00 :	  5be1fa:       31 c0                   xor    %eax,%eax
    0.00 :	  5be1fc:       e8 9f e6 1b 00          callq  77c8a0 <errmsg>
    0.00 :	  5be201:       89 c3                   mov    %eax,%ebx
    0.00 :	  5be203:       e8 e8 e8 1b 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  5be208:       89 de                   mov    %ebx,%esi
    0.00 :	  5be20a:       89 c7                   mov    %eax,%edi
    0.00 :	  5be20c:       31 c0                   xor    %eax,%eax
    0.00 :	  5be20e:       e8 cd c3 1b 00          callq  77a5e0 <errfinish>
    0.00 :	  5be213:       e9 46 f9 ff ff          jmpq   5bdb5e <ExecHashJoin+0xbe>
    0.00 :	  5be218:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5be21f:       00 
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be220:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5be224:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  5be228:       48 8b 4d 98             mov    -0x68(%rbp),%rcx
    0.00 :	  5be22c:       48 8b 51 08             mov    0x8(%rcx),%rdx
    0.00 :	  5be230:       f2 0f 10 42 10          movsd  0x10(%rdx),%xmm0
    0.00 :	  5be235:       66 0f 2e 40 08          ucomisd 0x8(%rax),%xmm0
    0.00 :	  5be23a:       0f 86 4e f9 ff ff       jbe    5bdb8e <ExecHashJoin+0xee>
    0.00 :	  5be240:       41 80 be f5 00 00 00    cmpb   $0x0,0xf5(%r14)
    0.00 :	  5be247:       00 
    0.00 :	  5be248:       0f 85 40 f9 ff ff       jne    5bdb8e <ExecHashJoin+0xee>
    0.00 :	  5be24e:       e9 23 ff ff ff          jmpq   5be176 <ExecHashJoin+0x6d6>
         :	                                /*
         :	                                 * If the inner relation is completely empty, and we're not
         :	                                 * doing a left outer join, we can quit without scanning the
         :	                                 * outer relation.
         :	                                 */
         :	                                if (hashtable->totalTuples == 0 && !HJ_FILL_OUTER(node))
    0.00 :	  5be253:       0f 8a 8f f9 ff ff       jp     5bdbe8 <ExecHashJoin+0x148>
    0.00 :	  5be259:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5be260:       00 
    0.00 :	  5be261:       0f 85 81 f9 ff ff       jne    5bdbe8 <ExecHashJoin+0x148>
    0.00 :	  5be267:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5be26e:       00 00 
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :	                                break;
         :
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
    0.00 :	  5be270:       31 c0                   xor    %eax,%eax
    0.00 :	  5be272:       e9 21 fd ff ff          jmpq   5bdf98 <ExecHashJoin+0x4f8>
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
         :	                                        {
         :	                                                node->hj_OuterNotEmpty = false;
    0.00 :	  5be277:       41 c6 86 f5 00 00 00    movb   $0x0,0xf5(%r14)
    0.00 :	  5be27e:       00 
    0.00 :	  5be27f:       31 c0                   xor    %eax,%eax
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
         :	                                         (int) node->hj_JoinState);
         :	                }
         :	        }
         :	}
    0.00 :	  5be281:       e9 12 fd ff ff          jmpq   5bdf98 <ExecHashJoin+0x4f8>
         :	        innerFile = hashtable->innerBatchFile[curbatch];
         :
         :	        if (innerFile != NULL)
         :	        {
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
    0.00 :	  5be286:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5be289:       b9 f0 ba 88 00          mov    $0x88baf0,%ecx
    0.00 :	  5be28e:       ba 37 03 00 00          mov    $0x337,%edx
    0.00 :	  5be293:       e9 46 ff ff ff          jmpq   5be1de <ExecHashJoin+0x73e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   31.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   29.63 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:680
    1.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:669
    1.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b16a0 <ExecEvalScalarVarFast>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   31.48 :	  5b16a0:       55                      push   %rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:669
    1.85 :	  5b16a1:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Var                *variable = (Var *) exprstate->expr;
    0.00 :	  5b16a4:       4c 8b 47 08             mov    0x8(%rdi),%r8
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
    5.56 :	  5b16a8:       48 89 e5                mov    %rsp,%rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16ab:       74 06                   je     5b16b3 <ExecEvalScalarVarFast+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b16ad:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.85 :	  5b16b3:       41 8b 40 04             mov    0x4(%r8),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   29.63 :	  5b16b7:       3d e8 fd 00 00          cmp    $0xfde8,%eax
    0.00 :	  5b16bc:       74 1a                   je     5b16d8 <ExecEvalScalarVarFast+0x38>
    5.56 :	  5b16be:       3d e9 fd 00 00          cmp    $0xfde9,%eax
    0.00 :	  5b16c3:       74 2b                   je     5b16f0 <ExecEvalScalarVarFast+0x50>
         :
         :	                        /* INDEX_VAR is handled by default case */
         :
         :	                default:                                /* get the tuple from the relation being
         :	                                                                 * scanned */
         :	                        slot = econtext->ecxt_scantuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
    3.70 :	  5b16c5:       48 8b 7e 08             mov    0x8(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16c9:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16ce:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
   11.11 :	  5b16cf:       e9 2c dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16d4:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
         :	        {
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
    0.00 :	  5b16d8:       48 8b 7e 10             mov    0x10(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16dc:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16e1:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16e2:       e9 19 dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b16ee:       00 00 
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
         :	                        break;
         :
         :	                case OUTER_VAR: /* get the tuple from the outer node */
         :	                        slot = econtext->ecxt_outertuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:680
    3.70 :	  5b16f0:       48 8b 7e 18             mov    0x18(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16f4:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16f9:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    5.56 :	  5b16fa:       e9 01 dd eb ff          jmpq   46f400 <slot_getattr>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
   16.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
   12.24 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   12.24 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   12.24 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
   10.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    6.12 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    6.12 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
    2.04 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    2.04 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007989b0 <MemoryContextReset>:
         :	 * The type-specific reset routine handles the context itself, but we
         :	 * have to do the recursion for the children.
         :	 */
         :	void
         :	MemoryContextReset(MemoryContext context)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
   10.20 :	  7989b0:       55                      push   %rbp
    6.12 :	  7989b1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7989b4:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    2.04 :	  7989b5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7989b8:       48 83 ec 08             sub    $0x8,%rsp
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        /* save a function call in common case where there are no children */
         :	        if (context->firstchild != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   12.24 :	  7989bc:       48 83 7f 18 00          cmpq   $0x0,0x18(%rdi)
   12.24 :	  7989c1:       74 05                   je     7989c8 <MemoryContextReset+0x18>
         :	                MemoryContextResetChildren(context);
    0.00 :	  7989c3:       e8 b8 ff ff ff          callq  798980 <MemoryContextResetChildren>
         :
         :	        /* Nothing to do if no pallocs since startup or last reset */
         :	        if (!context->isReset)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
    6.12 :	  7989c8:       80 7b 30 00             cmpb   $0x0,0x30(%rbx)
   12.24 :	  7989cc:       75 0e                   jne    7989dc <MemoryContextReset+0x2c>
         :	        {
         :	                (*context->methods->reset) (context);
    0.00 :	  7989ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7989d2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7989d5:       ff 50 20                callq  *0x20(%rax)
         :	                context->isReset = true;
    0.00 :	  7989d8:       c6 43 30 01             movb   $0x1,0x30(%rbx)
         :	                VALGRIND_DESTROY_MEMPOOL(context);
         :	                VALGRIND_CREATE_MEMPOOL(context, 0, false);
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
   20.41 :	  7989dc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7989e0:       5b                      pop    %rbx
   18.37 :	  7989e1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   27.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:488
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:489
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:887
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:504
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:540
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:931
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:935
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:936
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:936
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    2.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:991
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782f20 <CHashInsert>:
         :	 * degrading performance; or CHashAllocate may enter a tight loop until such
         :	 * time as an element is deleted).
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:488
    2.08 :	  782f20:       55                      push   %rbp
    0.00 :	  782f21:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782f24:       41 57                   push   %r15
    0.00 :	  782f26:       41 56                   push   %r14
    0.00 :	  782f28:       41 55                   push   %r13
    0.00 :	  782f2a:       41 54                   push   %r12
    0.00 :	  782f2c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  782f2f:       53                      push   %rbx
    0.00 :	  782f30:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  782f34:       48 89 75 a0             mov    %rsi,-0x60(%rbp)
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782f38:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:489
    2.08 :	  782f3c:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  782f40:       e8 0b d4 d0 ff          callq  490350 <hash_any>
    0.00 :	  782f45:       89 45 a8                mov    %eax,-0x58(%rbp)
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f48:       41 23 44 24 10          and    0x10(%r12),%eax
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f4d:       8b 35 b5 5b 3e 00       mov    0x3e5bb5(%rip),%esi        # b68b08 <MyBackendId>
    0.00 :	  782f53:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f59:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f5c:       89 c0                   mov    %eax,%eax
    0.00 :	  782f5e:       4c 8d 3c 85 00 00 00    lea    0x0(,%rax,4),%r15
    0.00 :	  782f65:       00 
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f66:       8b 05 78 cd 43 00       mov    0x43cd78(%rip),%eax        # bbfce4 <MyProcPid>
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f6c:       4d 03 7c 24 20          add    0x20(%r12),%r15
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f71:       41 39 44 24 38          cmp    %eax,0x38(%r12)
    0.00 :	  782f76:       74 26                   je     782f9e <CHashInsert+0x7e>
         :	        {
         :	                table->gc_pid = MyProcPid;
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f78:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  782f7e:       41 8b 54 24 10          mov    0x10(%r12),%edx
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
         :	        {
         :	                table->gc_pid = MyProcPid;
    0.00 :	  782f83:       41 89 44 24 38          mov    %eax,0x38(%r12)
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f88:       8b 05 56 cd 43 00       mov    0x43cd56(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  782f8e:       83 c2 01                add    $0x1,%edx
    0.00 :	  782f91:       d3 ea                   shr    %cl,%edx
    0.00 :	  782f93:       89 d1                   mov    %edx,%ecx
    0.00 :	  782f95:       31 d2                   xor    %edx,%edx
    0.00 :	  782f97:       f7 f1                   div    %ecx
    0.00 :	  782f99:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f9e:       0f b7 cf                movzwl %di,%ecx
    0.00 :	  782fa1:       89 f0                   mov    %esi,%eax
    0.00 :	  782fa3:       31 d2                   xor    %edx,%edx
    0.00 :	  782fa5:       f7 f1                   div    %ecx
    0.00 :	  782fa7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  782fad:       49 8b 74 24 28          mov    0x28(%r12),%rsi
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  782fb2:       41 bb fe ff ff ff       mov    $0xfffffffe,%r11d
         :	                 * If we attempt to pop the free-list and fail, we retry immediately
         :	                 * with the same free-list.  This reduces the frequency with which
         :	                 * we're obliged to update our hazard pointers, which is a material
         :	                 * savings due to the associated memory barrier.
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
    0.00 :	  782fb8:       44 8d 42 01             lea    0x1(%rdx),%r8d
    0.00 :	  782fbc:       44 89 c0                mov    %r8d,%eax
    0.00 :	  782fbf:       d3 e0                   shl    %cl,%eax
    0.00 :	  782fc1:       01 d0                   add    %edx,%eax
    0.00 :	  782fc3:       48 8d 0c 86             lea    (%rsi,%rax,4),%rcx
         :	                MyProc->hazard[0] = b;
    0.00 :	  782fc7:       48 8b 05 7a a9 3f 00    mov    0x3fa97a(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782fce:       48 89 88 e8 02 00 00    mov    %rcx,0x2e8(%rax)
         :	                pg_memory_barrier();
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:887
    2.08 :	  782fd5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                new = *b;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
    4.17 :	  782fda:       8b 19                   mov    (%rcx),%ebx
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782fdc:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782fdf:       76 23                   jbe    783004 <CHashInsert+0xe4>
    0.00 :	  782fe1:       e9 52 01 00 00          jmpq   783138 <CHashInsert+0x218>
    0.00 :	  782fe6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  782fed:       00 00 00 
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
         :	                                return new;
         :	                        CHashTableIncrementStatistic(table, CHS_Allocate_Fail);
    0.00 :	  782ff0:       49 83 84 24 a0 00 00    addq   $0x1,0xa0(%r12)
    0.00 :	  782ff7:       00 01 
         :	                        new = *b;
    0.00 :	  782ff9:       8b 19                   mov    (%rcx),%ebx
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782ffb:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782ffe:       0f 87 34 01 00 00       ja     783138 <CHashInsert+0x218>
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  783004:       89 de                   mov    %ebx,%esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  783006:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  78300b:       d1 ee                   shr    %esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  78300d:       89 f2                   mov    %esi,%edx
    0.00 :	  78300f:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783015:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
    0.00 :	  783019:       89 d8                   mov    %ebx,%eax
    0.00 :	  78301b:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
    2.08 :	  78301f:       75 cf                   jne    782ff0 <CHashInsert+0xd0>
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783021:       41 89 f5                mov    %esi,%r13d
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783024:       8b 4d a8                mov    -0x58(%rbp),%ecx
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783027:       45 0f af 6c 24 1c       imul   0x1c(%r12),%r13d
    0.00 :	  78302d:       4d 03 6c 24 30          add    0x30(%r12),%r13
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783032:       41 89 4d 04             mov    %ecx,0x4(%r13)
         :	        memcpy(CHashNodeGetItem(nnew), entry, table->desc.element_size);
    0.00 :	  783036:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  78303c:       49 8d 7d 08             lea    0x8(%r13),%rdi
    0.00 :	  783040:       48 8b 75 a0             mov    -0x60(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:504
    2.08 :	  783044:       e8 a7 6b ce ff          callq  469bf0 <memcpy@plt>
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783049:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  78304f:       8b 55 ac                mov    -0x54(%rbp),%edx
    0.00 :	  783052:       d3 ea                   shr    %cl,%edx
    0.00 :	  783054:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78305a:       89 d0                   mov    %edx,%eax
    0.00 :	  78305c:       d3 e8                   shr    %cl,%eax
    0.00 :	  78305e:       01 d0                   add    %edx,%eax
    0.00 :	  783060:       48 8b 15 e1 a8 3f 00    mov    0x3fa8e1(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  783067:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  78306b:       49 03 44 24 28          add    0x28(%r12),%rax
    0.00 :	  783070:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  783077:       f0 83 04 24 00          lock addl $0x0,(%rsp)
    0.00 :	  78307c:       4c 8d 75 b0             lea    -0x50(%rbp),%r14
    0.00 :	  783080:       eb 20                   jmp    7830a2 <CHashInsert+0x182>
    0.00 :	  783082:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * where N is the number of buckets and M is the number of elements
         :	                 * in the table.  Even for a quite modestly size table this is likely
         :	                 * to exceed the number of CPU cores.
         :	                 */
         :	                Assert(!CHashPtrIsMarked(scan.target));
         :	                nnew->next = scan.target;
    0.00 :	  783088:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  78308b:       41 89 45 00             mov    %eax,0x0(%r13)
         :	                if (!__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  78308f:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  783093:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  783096:       f0 0f b1 1a             lock cmpxchg %ebx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:540
    2.08 :	  78309a:       74 49                   je     7830e5 <CHashInsert+0x1c5>
         :	                                                                                  scan.target, new))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Insert_Retry);
    0.00 :	  78309c:       49 83 44 24 60 01       addq   $0x1,0x60(%r12)
         :	         * Scan the bucket.  If we don't find a match, use compare-and-swap to
         :	         * insert the new node at the insert position.  If we do find a match,
         :	         * return the data to the caller.
         :	         */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  7830a2:       48 8b 4d a0             mov    -0x60(%rbp),%rcx
    0.00 :	  7830a6:       8b 55 a8                mov    -0x58(%rbp),%edx
    0.00 :	  7830a9:       4d 89 f0                mov    %r14,%r8
    0.00 :	  7830ac:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  7830af:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  7830b2:       e8 e9 fb ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  7830b7:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  7830bb:       74 cb                   je     783088 <CHashInsert+0x168>
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  7830bd:       41 0f b7 44 24 0e       movzwl 0xe(%r12),%eax
    0.00 :	  7830c3:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  7830c7:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  7830cd:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  7830d0:       48 01 f7                add    %rsi,%rdi
    0.00 :	  7830d3:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7830d7:       48 03 75 c0             add    -0x40(%rbp),%rsi
    0.00 :	  7830db:       29 c2                   sub    %eax,%edx
    0.00 :	  7830dd:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7830e0:       e8 0b 6b ce ff          callq  469bf0 <memcpy@plt>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  7830e5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7830ea:       48 8b 05 57 a8 3f 00    mov    0x3fa857(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7830f1:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7830f8:       00 00 00 00 
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
         :	        if (scan.found)
    0.00 :	  7830fc:       31 c0                   xor    %eax,%eax
         :	         * progress at the time we popped the freelist has completed.  This
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
    0.00 :	  7830fe:       49 83 44 24 50 01       addq   $0x1,0x50(%r12)
         :	        if (scan.found)
    0.00 :	  783104:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  783108:       74 17                   je     783121 <CHashInsert+0x201>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Insert_Failed);
    0.00 :	  78310a:       49 83 44 24 58 01       addq   $0x1,0x58(%r12)
         :	                CHashAddToGarbage(table, bucket, new);
    0.00 :	  783110:       8b 75 ac                mov    -0x54(%rbp),%esi
    0.00 :	  783113:       89 da                   mov    %ebx,%edx
    0.00 :	  783115:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783118:       e8 33 fb ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  78311d:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
    0.00 :	  783121:       84 c0                   test   %al,%al
    0.00 :	  783123:       0f 94 c0                sete   %al
         :	        }
         :
         :	        /* The insert succeeded if and only if no duplicate was found. */
         :	        return !scan.found;
         :	}
    0.00 :	  783126:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  78312a:       5b                      pop    %rbx
    0.00 :	  78312b:       41 5c                   pop    %r12
    0.00 :	  78312d:       41 5d                   pop    %r13
    0.00 :	  78312f:       41 5e                   pop    %r14
    0.00 :	  783131:       41 5f                   pop    %r15
    0.00 :	  783133:       c9                      leaveq 
    0.00 :	  783134:       c3                      retq   
    0.00 :	  783135:       0f 1f 00                nopl   (%rax)
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783138:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  78313e:       8b 05 c4 59 3e 00       mov    0x3e59c4(%rip),%eax        # b68b08 <MyBackendId>
    0.00 :	  783144:       31 d2                   xor    %edx,%edx
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783146:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78314c:       4d 8b 4c 24 28          mov    0x28(%r12),%r9
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:931
    2.08 :	  783151:       f7 f7                   div    %edi
         :	        fh = CHashTableGetFreeList(table, f_home);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    4.17 :	  783153:       8d 42 01                lea    0x1(%rdx),%eax
    0.00 :	  783156:       d3 e0                   shl    %cl,%eax
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783158:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  78315e:       01 d0                   add    %edx,%eax
    2.08 :	  783160:       4c 8d 14 85 00 00 00    lea    0x0(,%rax,4),%r10
    0.00 :	  783167:       00 
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:935
    2.08 :	  783168:       41 8b 44 24 3c          mov    0x3c(%r12),%eax
    0.00 :	  78316d:       8d 50 01                lea    0x1(%rax),%edx
    0.00 :	  783170:       41 8b 44 24 10          mov    0x10(%r12),%eax
    0.00 :	  783175:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  783178:       89 d0                   mov    %edx,%eax
    0.00 :	  78317a:       31 d2                   xor    %edx,%edx
    0.00 :	  78317c:       d3 ee                   shr    %cl,%esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:936
    2.08 :	  78317e:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783184:       f7 f6                   div    %esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    2.08 :	  783186:       4c 89 ce                mov    %r9,%rsi
    0.00 :	  783189:       89 d0                   mov    %edx,%eax
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  78318b:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783190:       d3 e8                   shr    %cl,%eax
    0.00 :	  783192:       01 d0                   add    %edx,%eax
    0.00 :	  783194:       49 8d 14 81             lea    (%r9,%rax,4),%rdx
         :	        garbage = *b;
    0.00 :	  783198:       8b 1a                   mov    (%rdx),%ebx
         :
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    2.08 :	  78319a:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  78319d:       76 11                   jbe    7831b0 <CHashInsert+0x290>
         :	                new = CHashAllocateViaGC(table);
         :	                if (!CHashPtrIsInvalid(new))
         :	                        return new;
         :
         :	                /* Advance to next freelist. */
         :	                f_current = (f_current + 1) % CHashTableNFreeLists(table);
    0.00 :	  78319f:       44 89 c0                mov    %r8d,%eax
    0.00 :	  7831a2:       31 d2                   xor    %edx,%edx
    0.00 :	  7831a4:       f7 f7                   div    %edi
    0.00 :	  7831a6:       e9 0d fe ff ff          jmpq   782fb8 <CHashInsert+0x98>
    0.00 :	  7831ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  7831b0:       89 d8                   mov    %ebx,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    2.08 :	  7831b2:       f0 44 0f b1 1a          lock cmpxchg %r11d,(%rdx)
    2.08 :	  7831b7:       74 1c                   je     7831d5 <CHashInsert+0x2b5>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Dequeue_Fail);
    0.00 :	  7831b9:       49 83 84 24 b0 00 00    addq   $0x1,0xb0(%r12)
    0.00 :	  7831c0:       00 01 
    0.00 :	  7831c2:       49 8b 74 24 28          mov    0x28(%r12),%rsi
    0.00 :	  7831c7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  7831cd:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  7831d3:       eb ca                   jmp    78319f <CHashInsert+0x27f>
         :	         * requeues the garbage if it's not immediately recycleable, but
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
    0.00 :	  7831d5:       49 83 84 24 b8 00 00    addq   $0x1,0xb8(%r12)
    0.00 :	  7831dc:       00 01 
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  7831de:       4f 8d 04 11             lea    (%r9,%r10,1),%r8
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7831e2:       48 8b 05 5f a7 3f 00    mov    0x3fa75f(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7831e9:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7831f0:       00 00 00 00 
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  7831f4:       48 8b 35 5d a7 3f 00    mov    0x3fa75d(%rip),%rsi        # b7d958 <ProcGlobal>
    0.00 :	  7831fb:       8b 46 10                mov    0x10(%rsi),%eax
    0.00 :	  7831fe:       85 c0                   test   %eax,%eax
    0.00 :	  783200:       74 5f                   je     783261 <CHashInsert+0x341>
    0.00 :	  783202:       31 ff                   xor    %edi,%edi
    0.00 :	  783204:       eb 1a                   jmp    783220 <CHashInsert+0x300>
    0.00 :	  783206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78320d:       00 00 00 
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    2.08 :	  783210:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783213:       74 23                   je     783238 <CHashInsert+0x318>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783215:       83 c7 01                add    $0x1,%edi
    0.00 :	  783218:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78321b:       73 44                   jae    783261 <CHashInsert+0x341>
    0.00 :	  78321d:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    2.08 :	  783220:       89 f8                   mov    %edi,%eax
    2.08 :	  783222:       48 69 c0 f0 02 00 00    imul   $0x2f0,%rax,%rax
    0.00 :	  783229:       48 03 06                add    (%rsi),%rax
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    2.08 :	  78322c:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
   25.00 :	  783233:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  783236:       75 d8                   jne    783210 <CHashInsert+0x2f0>
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Spin);
    0.00 :	  783238:       49 83 84 24 c0 00 00    addq   $0x1,0xc0(%r12)
    0.00 :	  78323f:       00 01 
         :	                        do
         :	                        {
         :	                                hazard = proc->hazard[0];
    0.00 :	  783241:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                        } while (hazard == b || hazard == fh);
    0.00 :	  783248:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  78324b:       74 f4                   je     783241 <CHashInsert+0x321>
    0.00 :	  78324d:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783250:       74 ef                   je     783241 <CHashInsert+0x321>
    0.00 :	  783252:       48 8b 35 ff a6 3f 00    mov    0x3fa6ff(%rip),%rsi        # b7d958 <ProcGlobal>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783259:       83 c7 01                add    $0x1,%edi
    0.00 :	  78325c:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78325f:       72 bf                   jb     783220 <CHashInsert+0x300>
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783261:       89 de                   mov    %ebx,%esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  783263:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783268:       d1 ee                   shr    %esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  78326a:       89 f2                   mov    %esi,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:991
    2.08 :	  78326c:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783272:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
         :
         :	        if (CHashPtrIsInvalid(fhead))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   27.08 :	  783276:       83 fa fd                cmp    $0xfffffffd,%edx
    0.00 :	  783279:       76 13                   jbe    78328e <CHashInsert+0x36e>
         :	                 * before we overwrite n->un.gcnext with a new hashcode.
         :	                 * (This is only needed when we reclaim exactly one node,
         :	                 * because in any other case we'll do a compare-and-swap
         :	                 * before returning, which implies a full barrier.)
         :	                 */
         :	                pg_memory_barrier();
    0.00 :	  78327b:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Skipped);
    0.00 :	  783280:       49 83 84 24 c8 00 00    addq   $0x1,0xc8(%r12)
    0.00 :	  783287:       00 01 
    0.00 :	  783289:       e9 93 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        }
         :	        else if (__sync_bool_compare_and_swap(fh, InvalidCHashPtr, fhead))
    0.00 :	  78328e:       b8 fe ff ff ff          mov    $0xfffffffe,%eax
    0.00 :	  783293:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  783298:       74 41                   je     7832db <CHashInsert+0x3bb>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  78329a:       4d 8b 4c 24 30          mov    0x30(%r12),%r9
    0.00 :	  78329f:       41 8b 7c 24 1c          mov    0x1c(%r12),%edi
    0.00 :	  7832a4:       89 d0                   mov    %edx,%eax
         :
         :	                /* Walk list of reclaimed elements to end. */
         :	                fcurrent = fhead;
         :	                for (;;)
         :	                {
         :	                        n = CHashTableGetNode(table, fcurrent);
    0.00 :	  7832a6:       d1 e8                   shr    %eax
    0.00 :	  7832a8:       0f af c7                imul   %edi,%eax
    0.00 :	  7832ab:       49 8d 0c 01             lea    (%r9,%rax,1),%rcx
         :	                        fnext = n->un.gcnext;
    0.00 :	  7832af:       8b 41 04                mov    0x4(%rcx),%eax
         :	                        if (CHashPtrIsInvalid(fnext))
    0.00 :	  7832b2:       83 f8 fd                cmp    $0xfffffffd,%eax
    0.00 :	  7832b5:       76 ef                   jbe    7832a6 <CHashInsert+0x386>
    0.00 :	  7832b7:       eb 10                   jmp    7832c9 <CHashInsert+0x3a9>
    0.00 :	  7832b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        oldhead = *fh;
         :	                        n->un.gcnext = oldhead;
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
         :	                                break;
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Retry);
    0.00 :	  7832c0:       49 83 84 24 d8 00 00    addq   $0x1,0xd8(%r12)
    0.00 :	  7832c7:       00 01 
         :	                }
         :
         :	                /* Push reclaimed elements onto home free list. */
         :	                for (;;)
         :	                {
         :	                        oldhead = *fh;
    0.00 :	  7832c9:       41 8b 00                mov    (%r8),%eax
         :	                        n->un.gcnext = oldhead;
    0.00 :	  7832cc:       89 41 04                mov    %eax,0x4(%rcx)
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
    0.00 :	  7832cf:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  7832d4:       75 ea                   jne    7832c0 <CHashInsert+0x3a0>
    0.00 :	  7832d6:       e9 46 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  7832db:       49 83 84 24 d0 00 00    addq   $0x1,0xd0(%r12)
    0.00 :	  7832e2:       00 01 
    0.00 :	  7832e4:       e9 38 fd ff ff          jmpq   783021 <CHashInsert+0x101>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   17.95 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:510
   10.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:457
    5.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    5.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:356
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:356
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:356
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:509
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:457
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:457
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ac4a0 <ExecProcNode>:
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    5.13 :	  5ac4a0:       0f b6 05 e9 db 60 00    movzbl 0x60dbe9(%rip),%eax        # bba090 <InterruptPending>
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:356
    2.56 :	  5ac4a7:       55                      push   %rbp
    2.56 :	  5ac4a8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ac4ab:       41 54                   push   %r12
    2.56 :	  5ac4ad:       49 89 fc                mov    %rdi,%r12
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b0:       84 c0                   test   %al,%al
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4b2:       53                      push   %rbx
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    2.56 :	  5ac4b3:       75 6b                   jne    5ac520 <ExecProcNode+0x80>
         :
         :	        if (node->chgParam != NULL) /* something changed */
    0.00 :	  5ac4b5:       49 83 7c 24 50 00       cmpq   $0x0,0x50(%r12)
    0.00 :	  5ac4bb:       74 08                   je     5ac4c5 <ExecProcNode+0x25>
         :	                ExecReScan(node);               /* let ReScan handle this */
    0.00 :	  5ac4bd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac4c0:       e8 db bf ff ff          callq  5a84a0 <ExecReScan>
         :
         :	        if (node->instrument)
    0.00 :	  5ac4c5:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac4ca:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac4cd:       74 05                   je     5ac4d4 <ExecProcNode+0x34>
         :	                InstrStartNode(node->instrument);
    0.00 :	  5ac4cf:       e8 2c ba 00 00          callq  5b7f00 <InstrStartNode>
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac4d4:       41 8b 04 24             mov    (%r12),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    5.13 :	  5ac4d8:       2d c9 00 00 00          sub    $0xc9,%eax
    0.00 :	  5ac4dd:       83 f8 21                cmp    $0x21,%eax
    0.00 :	  5ac4e0:       76 2e                   jbe    5ac510 <ExecProcNode+0x70>
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
         :	                        break;
         :
         :	                default:
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
    0.00 :	  5ac4e2:       ba e2 a3 88 00          mov    $0x88a3e2,%edx
    0.00 :	  5ac4e7:       be f8 01 00 00          mov    $0x1f8,%esi
    0.00 :	  5ac4ec:       bf 75 a0 88 00          mov    $0x88a075,%edi
    0.00 :	  5ac4f1:       e8 2a ef 1c 00          callq  77b420 <elog_start>
    0.00 :	  5ac4f6:       41 8b 14 24             mov    (%r12),%edx
    0.00 :	  5ac4fa:       be 5c 17 87 00          mov    $0x87175c,%esi
    0.00 :	  5ac4ff:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ac504:       31 c0                   xor    %eax,%eax
    0.00 :	  5ac506:       e8 25 ed 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5ac50b:       e8 c0 cf eb ff          callq  4694d0 <abort@plt>
         :	                ExecReScan(node);               /* let ReScan handle this */
         :
         :	        if (node->instrument)
         :	                InstrStartNode(node->instrument);
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac510:       89 c0                   mov    %eax,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    2.56 :	  5ac512:       ff 24 c5 a0 a1 88 00    jmpq   *0x88a1a0(,%rax,8)
    0.00 :	  5ac519:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac520:       e8 7b fd 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5ac525:       eb 8e                   jmp    5ac4b5 <ExecProcNode+0x15>
    0.00 :	  5ac527:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ac52e:       00 00 
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
         :	                        break;
         :
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
    0.00 :	  5ac530:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac533:       e8 a8 3c 01 00          callq  5c01e0 <ExecLimit>
    0.00 :	  5ac538:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5ac53b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:509
    2.56 :	  5ac540:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac545:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac548:       74 20                   je     5ac56a <ExecProcNode+0xca>
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac54a:       48 85 db                test   %rbx,%rbx
    0.00 :	  5ac54d:       0f 84 ed 01 00 00       je     5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac553:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5ac557:       0f 85 e3 01 00 00       jne    5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac55d:       f2 0f 10 05 f3 2b 20    movsd  0x202bf3(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5ac564:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:510
   17.95 :	  5ac565:       e8 66 b6 00 00          callq  5b7bd0 <InstrStopNode>
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
    2.56 :	  5ac56a:       48 89 d8                mov    %rbx,%rax
    2.56 :	  5ac56d:       5b                      pop    %rbx
    2.56 :	  5ac56e:       41 5c                   pop    %r12
    0.00 :	  5ac570:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   20.51 :	  5ac571:       c3                      retq   
    0.00 :	  5ac572:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
         :	                        break;
         :
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
    0.00 :	  5ac578:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac57b:       e8 a0 40 01 00          callq  5c0620 <ExecLockRows>
    0.00 :	  5ac580:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac583:       eb bb                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac585:       0f 1f 00                nopl   (%rax)
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
         :	                        break;
         :
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
    0.00 :	  5ac588:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac58b:       e8 60 98 01 00          callq  5c5df0 <ExecSetOp>
    0.00 :	  5ac590:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac593:       eb ab                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac595:       0f 1f 00                nopl   (%rax)
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
         :	                        break;
         :
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
    0.00 :	  5ac598:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac59b:       e8 d0 02 01 00          callq  5bc870 <ExecHash>
    0.00 :	  5ac5a0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5a3:       eb 9b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5a5:       0f 1f 00                nopl   (%rax)
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
         :	                        break;
         :
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
    0.00 :	  5ac5a8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5ab:       e8 20 a0 01 00          callq  5c65d0 <ExecUnique>
    0.00 :	  5ac5b0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5b3:       eb 8b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5b5:       0f 1f 00                nopl   (%rax)
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
         :	                        break;
         :
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
    0.00 :	  5ac5b8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5bb:       e8 90 00 02 00          callq  5cc650 <ExecWindowAgg>
    0.00 :	  5ac5c0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5c3:       e9 78 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ac5cf:       00 
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
         :	                        break;
         :
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
    0.00 :	  5ac5d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5d3:       e8 a8 d7 00 00          callq  5b9d80 <ExecAgg>
    0.00 :	  5ac5d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5db:       e9 60 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
         :	                        break;
         :
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
    0.00 :	  5ac5e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5e3:       e8 88 ab 01 00          callq  5c7170 <ExecGroup>
    0.00 :	  5ac5e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5eb:       e9 50 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
         :	                        break;
         :
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
    0.00 :	  5ac5f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5f3:       e8 48 9d 01 00          callq  5c6340 <ExecSort>
    0.00 :	  5ac5f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5fb:       e9 40 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * materialization nodes
         :	                         */
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
    0.00 :	  5ac600:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac603:       e8 38 47 01 00          callq  5c0d40 <ExecMaterial>
    0.00 :	  5ac608:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac60b:       e9 30 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
         :	                        break;
         :
         :	                case T_HashJoinState:
         :	                        result = ExecHashJoin((HashJoinState *) node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:457
    7.69 :	  5ac610:       4c 89 e7                mov    %r12,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:457
    2.56 :	  5ac613:       e8 88 14 01 00          callq  5bdaa0 <ExecHashJoin>
    2.56 :	  5ac618:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac61b:       e9 20 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
         :	                        break;
         :
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
    0.00 :	  5ac620:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac623:       e8 08 5a 01 00          callq  5c2030 <ExecMergeJoin>
    0.00 :	  5ac628:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac62b:       e9 10 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * join nodes
         :	                         */
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
    0.00 :	  5ac630:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac633:       e8 08 7c 01 00          callq  5c4240 <ExecNestLoop>
    0.00 :	  5ac638:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac63b:       e9 00 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
         :	                        break;
         :
         :	                case T_ForeignScanState:
         :	                        result = ExecForeignScan((ForeignScanState *) node);
    0.00 :	  5ac640:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac643:       e8 f8 d2 01 00          callq  5c9940 <ExecForeignScan>
    0.00 :	  5ac648:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac64b:       e9 f0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
         :	                        break;
         :
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
    0.00 :	  5ac650:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac653:       e8 f8 a8 01 00          callq  5c6f50 <ExecWorkTableScan>
    0.00 :	  5ac658:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac65b:       e9 e0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
         :	                        break;
         :
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
    0.00 :	  5ac660:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac663:       e8 28 a6 01 00          callq  5c6c90 <ExecCteScan>
    0.00 :	  5ac668:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac66b:       e9 d0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
         :	                        break;
         :
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
    0.00 :	  5ac670:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac673:       e8 18 a2 01 00          callq  5c6890 <ExecValuesScan>
    0.00 :	  5ac678:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac67b:       e9 c0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
         :	                        break;
         :
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
    0.00 :	  5ac680:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac683:       e8 28 86 01 00          callq  5c4cb0 <ExecFunctionScan>
    0.00 :	  5ac688:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac68b:       e9 b0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
         :	                        break;
         :
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
    0.00 :	  5ac690:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac693:       e8 d8 c7 01 00          callq  5c8e70 <ExecSubqueryScan>
    0.00 :	  5ac698:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac69b:       e9 a0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
         :	                        break;
         :
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
    0.00 :	  5ac6a0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6a3:       e8 58 ca 01 00          callq  5c9100 <ExecTidScan>
    0.00 :	  5ac6a8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6ab:       e9 90 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        break;
         :
         :	                        /* BitmapIndexScanState does not yield tuples */
         :
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
    2.56 :	  5ac6b0:       4c 89 e7                mov    %r12,%rdi
    2.56 :	  5ac6b3:       e8 68 e8 00 00          callq  5baf20 <ExecBitmapHeapScan>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
   10.26 :	  5ac6b8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6bb:       e9 80 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
         :	                        break;
         :
         :	                case T_IndexOnlyScanState:
         :	                        result = ExecIndexOnlyScan((IndexOnlyScanState *) node);
    0.00 :	  5ac6c0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6c3:       e8 b8 33 01 00          callq  5bfa80 <ExecIndexOnlyScan>
    0.00 :	  5ac6c8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6cb:       e9 70 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
         :	                        break;
         :
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
    0.00 :	  5ac6d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6d3:       e8 08 2e 01 00          callq  5bf4e0 <ExecIndexScan>
    0.00 :	  5ac6d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6db:       e9 60 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * scan nodes
         :	                         */
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
    0.00 :	  5ac6e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6e3:       e8 28 92 01 00          callq  5c5910 <ExecSeqScan>
    0.00 :	  5ac6e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6eb:       e9 50 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
         :	                        break;
         :
         :	                case T_RecursiveUnionState:
         :	                        result = ExecRecursiveUnion((RecursiveUnionState *) node);
    0.00 :	  5ac6f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6f3:       e8 d8 8b 01 00          callq  5c52d0 <ExecRecursiveUnion>
    0.00 :	  5ac6f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6fb:       e9 40 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
         :	                        break;
         :
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
    0.00 :	  5ac700:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac703:       e8 c8 48 01 00          callq  5c0fd0 <ExecMergeAppend>
    0.00 :	  5ac708:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac70b:       e9 30 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
         :	                        break;
         :
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
    0.00 :	  5ac710:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac713:       e8 68 ba 00 00          callq  5b8180 <ExecAppend>
    0.00 :	  5ac718:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac71b:       e9 20 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
         :	                        break;
         :
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
    0.00 :	  5ac720:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac723:       e8 d8 6a 01 00          callq  5c3200 <ExecModifyTable>
    0.00 :	  5ac728:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac72b:       e9 10 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	        {
         :	                        /*
         :	                         * control nodes
         :	                         */
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
    0.00 :	  5ac730:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac733:       e8 08 8f 01 00          callq  5c5640 <ExecResult>
    0.00 :	  5ac738:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac73b:       e9 00 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac740:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5ac744:       e9 1c fe ff ff          jmpq   5ac565 <ExecProcNode+0xc5>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   17.14 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    8.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    5.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    5.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    5.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:375
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4480 <ExecStoreTuple>:
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b4480:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
   17.14 :	  5b4481:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4484:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    2.86 :	  5b4488:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    5.71 :	  5b448c:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b448f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  5b4493:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  5b4497:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b449b:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b449f:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b44a2:       41 89 d4                mov    %edx,%r12d
    0.00 :	  5b44a5:       41 89 cd                mov    %ecx,%r13d
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    5.71 :	  5b44a8:       0f 85 92 00 00 00       jne    5b4540 <ExecStoreTuple+0xc0>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b44ae:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b44b2:       75 74                   jne    5b4528 <ExecStoreTuple+0xa8>
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44b4:       8b 7b 20                mov    0x20(%rbx),%edi
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    2.86 :	  5b44b7:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = shouldFree;
    0.00 :	  5b44bb:       44 88 6b 05             mov    %r13b,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b44bf:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :	        slot->tts_tuple = tuple;
    0.00 :	  5b44c3:       4c 89 73 08             mov    %r14,0x8(%rbx)
         :	        slot->tts_mintuple = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    5.71 :	  5b44c7:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b44ce:       00 
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44cf:       44 39 e7                cmp    %r12d,%edi
         :	        slot->tts_shouldFreeMin = false;
         :	        slot->tts_tuple = tuple;
         :	        slot->tts_mintuple = NULL;
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b44d2:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44d9:       74 0d                   je     5b44e8 <ExecStoreTuple+0x68>
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:375
    2.86 :	  5b44db:       85 ff                   test   %edi,%edi
    0.00 :	  5b44dd:       75 31                   jne    5b4510 <ExecStoreTuple+0x90>
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44df:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b44e2:       44 89 63 20             mov    %r12d,0x20(%rbx)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44e6:       75 18                   jne    5b4500 <ExecStoreTuple+0x80>
         :	                        IncrBufferRefCount(buffer);
         :	        }
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.57 :	  5b44e8:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b44eb:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  5b44f0:       48 8b 1c 24             mov    (%rsp),%rbx
    8.57 :	  5b44f4:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    2.86 :	  5b44f9:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  5b44fe:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   20.00 :	  5b44ff:       c3                      retq   
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
         :	                        IncrBufferRefCount(buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    2.86 :	  5b4500:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5b4503:       e8 58 06 0c 00          callq  674b60 <IncrBufferRefCount>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
   14.29 :	  5b4508:       eb de                   jmp    5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b450a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4510:       e8 4b 09 0c 00          callq  674e60 <ReleaseBuffer>
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4515:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b4518:       44 89 63 20             mov    %r12d,0x20(%rbx)
    0.00 :	  5b451c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4520:       74 c6                   je     5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b4522:       eb dc                   jmp    5b4500 <ExecStoreTuple+0x80>
    0.00 :	  5b4524:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4528:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b452c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b4530:       e8 7b a7 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4535:       e9 7a ff ff ff          jmpq   5b44b4 <ExecStoreTuple+0x34>
    0.00 :	  5b453a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4540:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4544:       e8 77 a7 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4549:       e9 60 ff ff ff          jmpq   5b44ae <ExecStoreTuple+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   17.65 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    8.82 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    8.82 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006425d0 <pgstat_end_function_usage>:
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    8.82 :	  6425d0:       55                      push   %rbp
   11.76 :	  6425d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6425d4:       41 55                   push   %r13
   17.65 :	  6425d6:       41 89 f5                mov    %esi,%r13d
    8.82 :	  6425d9:       41 54                   push   %r12
    5.88 :	  6425db:       49 89 fc                mov    %rdi,%r12
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    2.94 :	  6425de:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.76 :	  6425df:       48 83 ec 18             sub    $0x18,%rsp
         :	        PgStat_FunctionCounts *fs = fcu->fs;
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
    5.88 :	  6425e3:       48 8b 1f                mov    (%rdi),%rbx
         :	        instr_time      f_total;
         :	        instr_time      f_others;
         :	        instr_time      f_self;
         :
         :	        /* stats not wanted? */
         :	        if (fs == NULL)
    0.00 :	  6425e6:       48 85 db                test   %rbx,%rbx
    0.00 :	  6425e9:       0f 84 6f 01 00 00       je     64275e <pgstat_end_function_usage+0x18e>
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
    0.00 :	  6425ef:       48 8d 7d d0             lea    -0x30(%rbp),%rdi
    0.00 :	  6425f3:       31 f6                   xor    %esi,%esi
    0.00 :	  6425f5:       e8 c6 6f e2 ff          callq  4695c0 <gettimeofday@plt>
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  6425fa:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
    0.00 :	  6425fe:       49 2b 4c 24 30          sub    0x30(%r12),%rcx
    0.00 :	  642603:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642607:       49 2b 44 24 28          sub    0x28(%r12),%rax
    0.00 :	  64260c:       48 85 c9                test   %rcx,%rcx
    0.00 :	  64260f:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642613:       49 89 c1                mov    %rax,%r9
    0.00 :	  642616:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  64261a:       79 1c                   jns    642638 <pgstat_end_function_usage+0x68>
    0.00 :	  64261c:       0f 1f 40 00             nopl   0x0(%rax)
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  642620:       48 83 e8 01             sub    $0x1,%rax
         :	        if (fs == NULL)
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  642624:       48 81 c1 40 42 0f 00    add    $0xf4240,%rcx
    0.00 :	  64262b:       78 f3                   js     642620 <pgstat_end_function_usage+0x50>
    0.00 :	  64262d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  642631:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642635:       49 89 c1                mov    %rax,%r9
         :
         :	        /* self usage: elapsed minus anything already charged to other calls */
         :	        f_others = total_func_time;
    0.00 :	  642638:       4c 8b 05 e9 98 53 00    mov    0x5398e9(%rip),%r8        # b7bf28 <total_func_time+0x8>
    0.00 :	  64263f:       4c 8b 15 da 98 53 00    mov    0x5398da(%rip),%r10        # b7bf20 <total_func_time>
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
    0.00 :	  642646:       4c 89 c0                mov    %r8,%rax
    0.00 :	  642649:       4c 89 d2                mov    %r10,%rdx
    0.00 :	  64264c:       49 2b 54 24 18          sub    0x18(%r12),%rdx
    0.00 :	  642651:       49 2b 44 24 20          sub    0x20(%r12),%rax
    0.00 :	  642656:       79 14                   jns    64266c <pgstat_end_function_usage+0x9c>
    0.00 :	  642658:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  64265f:       00 
    0.00 :	  642660:       48 83 ea 01             sub    $0x1,%rdx
    0.00 :	  642664:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  64266a:       78 f4                   js     642660 <pgstat_end_function_usage+0x90>
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
    0.00 :	  64266c:       4c 89 cf                mov    %r9,%rdi
    0.00 :	  64266f:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  642672:       48 29 d7                sub    %rdx,%rdi
    0.00 :	  642675:       48 29 c6                sub    %rax,%rsi
    0.00 :	  642678:       79 13                   jns    64268d <pgstat_end_function_usage+0xbd>
    0.00 :	  64267a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  642680:       48 83 ef 01             sub    $0x1,%rdi
    0.00 :	  642684:       48 81 c6 40 42 0f 00    add    $0xf4240,%rsi
    0.00 :	  64268b:       78 f3                   js     642680 <pgstat_end_function_usage+0xb0>
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  64268d:       4a 8d 04 06             lea    (%rsi,%r8,1),%rax
    0.00 :	  642691:       4a 8d 14 17             lea    (%rdi,%r10,1),%rdx
    0.00 :	  642695:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  64269b:       48 89 15 7e 98 53 00    mov    %rdx,0x53987e(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426a2:       48 89 05 7f 98 53 00    mov    %rax,0x53987f(%rip)        # b7bf28 <total_func_time+0x8>
    0.00 :	  6426a9:       7e 25                   jle    6426d0 <pgstat_end_function_usage+0x100>
    0.00 :	  6426ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6426b0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426b6:       48 83 c2 01             add    $0x1,%rdx
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  6426ba:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426c0:       7f ee                   jg     6426b0 <pgstat_end_function_usage+0xe0>
    0.00 :	  6426c2:       48 89 15 57 98 53 00    mov    %rdx,0x539857(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426c9:       48 89 05 58 98 53 00    mov    %rax,0x539858(%rip)        # b7bf28 <total_func_time+0x8>
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426d0:       48 89 c8                mov    %rcx,%rax
    0.00 :	  6426d3:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	  6426d8:       4c 89 ca                mov    %r9,%rdx
    0.00 :	  6426db:       49 03 54 24 08          add    0x8(%r12),%rdx
    0.00 :	  6426e0:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426e6:       48 89 45 d8             mov    %rax,-0x28(%rbp)
    0.00 :	  6426ea:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  6426ee:       7e 1a                   jle    64270a <pgstat_end_function_usage+0x13a>
    0.00 :	  6426f0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426f6:       48 83 c2 01             add    $0x1,%rdx
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426fa:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642700:       7f ee                   jg     6426f0 <pgstat_end_function_usage+0x120>
    0.00 :	  642702:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  642706:       48 89 45 d8             mov    %rax,-0x28(%rbp)
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
    0.00 :	  64270a:       45 84 ed                test   %r13b,%r13b
    0.00 :	  64270d:       75 61                   jne    642770 <pgstat_end_function_usage+0x1a0>
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64270f:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642713:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  642717:       48 8b 45 d8             mov    -0x28(%rbp),%rax
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  64271b:       48 01 7b 18             add    %rdi,0x18(%rbx)
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64271f:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  642723:       48 89 f0                mov    %rsi,%rax
    0.00 :	  642726:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	  64272a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642730:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642734:       7e 21                   jle    642757 <pgstat_end_function_usage+0x187>
    0.00 :	  642736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64273d:       00 00 00 
    0.00 :	  642740:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  642746:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  64274b:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642751:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642755:       7f e9                   jg     642740 <pgstat_end_function_usage+0x170>
         :
         :	        /* indicate that we have something to send */
         :	        have_function_stats = true;
    0.00 :	  642757:       c6 05 4a 95 53 00 01    movb   $0x1,0x53954a(%rip)        # b7bca8 <have_function_stats>
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
   11.76 :	  64275e:       48 83 c4 18             add    $0x18,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.94 :	  642762:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    5.88 :	  642763:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.94 :	  642765:       41 5d                   pop    %r13
    2.94 :	  642767:       c9                      leaveq 
    0.00 :	  642768:       c3                      retq   
    0.00 :	  642769:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
    0.00 :	  642770:       48 83 03 01             addq   $0x1,(%rbx)
    0.00 :	  642774:       eb 99                   jmp    64270f <pgstat_end_function_usage+0x13f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   48.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   24.24 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   15.15 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
    3.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005aca20 <ExecEvalConst>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   24.24 :	  5aca20:       55                      push   %rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
    0.00 :	  5aca21:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Const      *con = (Const *) exprstate->expr;
    0.00 :	  5aca24:       48 8b 77 08             mov    0x8(%rdi),%rsi
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5aca28:       48 89 e5                mov    %rsp,%rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
    9.09 :	  5aca2b:       74 06                   je     5aca33 <ExecEvalConst+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5aca2d:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        *isNull = con->constisnull;
    0.00 :	  5aca33:       0f b6 46 20             movzbl 0x20(%rsi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   48.48 :	  5aca37:       88 02                   mov    %al,(%rdx)
   15.15 :	  5aca39:       48 8b 46 18             mov    0x18(%rsi),%rax
         :	        return con->constvalue;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
    3.03 :	  5aca3d:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
   16.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
   12.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    6.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    6.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    6.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    6.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    6.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:122
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    3.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3750 <ExecScan>:
         :	 */
         :	TupleTableSlot *
         :	ExecScan(ScanState *node,
         :	                 ExecScanAccessMtd accessMtd,   /* function returning a tuple */
         :	                 ExecScanRecheckMtd recheckMtd)
         :	{
    0.00 :	  5b3750:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.23 :	  5b3751:       48 89 e5                mov    %rsp,%rbp
    3.23 :	  5b3754:       41 57                   push   %r15
    0.00 :	  5b3756:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    6.45 :	  5b3758:       41 55                   push   %r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.23 :	  5b375a:       41 54                   push   %r12
    0.00 :	  5b375c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b375f:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    6.45 :	  5b3760:       48 83 ec 28             sub    $0x28,%rsp
    6.45 :	  5b3764:       48 89 75 b8             mov    %rsi,-0x48(%rbp)
    0.00 :	  5b3768:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b376c:       48 8b 47 28             mov    0x28(%rdi),%rax
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b3770:       48 85 c0                test   %rax,%rax
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b3773:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        projInfo = node->ps.ps_ProjInfo;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:122
    3.23 :	  5b3777:       4c 8b 77 68             mov    0x68(%rdi),%r14
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5b377b:       4c 8b 6f 60             mov    0x60(%rdi),%r13
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b377f:       41 0f 94 c7             sete   %r15b
    0.00 :	  5b3783:       75 09                   jne    5b378e <ExecScan+0x3e>
    0.00 :	  5b3785:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3788:       0f 84 d6 01 00 00       je     5b3964 <ExecScan+0x214>
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous scan
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
    0.00 :	  5b378e:       41 80 7c 24 70 00       cmpb   $0x0,0x70(%r12)
    0.00 :	  5b3794:       0f 85 a6 01 00 00       jne    5b3940 <ExecScan+0x1f0>
    0.00 :	  5b379a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a scan tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5b37a0:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b37a4:       e8 07 52 1e 00          callq  7989b0 <MemoryContextReset>
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b37a9:       0f b6 05 e0 68 60 00    movzbl 0x6068e0(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5b37b0:       84 c0                   test   %al,%al
    0.00 :	  5b37b2:       0f 85 50 01 00 00       jne    5b3908 <ExecScan+0x1b8>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b37b8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b37bd:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b37c4:       00 
    0.00 :	  5b37c5:       0f 84 0d 01 00 00       je     5b38d8 <ExecScan+0x188>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b37cb:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b37d0:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b37d3:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b37d6:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b37dd:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b37e1:       0f 84 f1 00 00 00       je     5b38d8 <ExecScan+0x188>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37e7:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b37ea:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b37f1:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b37f8:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37f9:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b37fc:       0f 85 16 01 00 00       jne    5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b3802:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b3805:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b380c:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b3810:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3813:       0f 84 ff 00 00 00       je     5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b3819:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b381b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b381d:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3820:       e8 5b 0c 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b3825:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3828:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b382b:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b382e:       84 c0                   test   %al,%al
    0.00 :	  5b3830:       0f 84 fa 00 00 00       je     5b3930 <ExecScan+0x1e0>
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b3836:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b3839:       0f 84 ab 00 00 00       je     5b38ea <ExecScan+0x19a>
    0.00 :	  5b383f:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5b3843:       0f 85 a1 00 00 00       jne    5b38ea <ExecScan+0x19a>
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3849:       45 84 ff                test   %r15b,%r15b
         :	                }
         :
         :	                /*
         :	                 * place the current tuple into the expr context
         :	                 */
         :	                econtext->ecxt_scantuple = slot;
    0.00 :	  5b384c:       49 89 5d 08             mov    %rbx,0x8(%r13)
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3850:       75 3e                   jne    5b3890 <ExecScan+0x140>
    0.00 :	  5b3852:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5b3856:       31 d2                   xor    %edx,%edx
    0.00 :	  5b3858:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  5b385b:       e8 b0 96 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b3860:       84 c0                   test   %al,%al
    0.00 :	  5b3862:       75 2c                   jne    5b3890 <ExecScan+0x140>
         :	                                 */
         :	                                return slot;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(node, 1);
    0.00 :	  5b3864:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  5b3869:       48 85 c0                test   %rax,%rax
    0.00 :	  5b386c:       0f 84 2e ff ff ff       je     5b37a0 <ExecScan+0x50>
    0.00 :	  5b3872:       f2 0f 10 05 de b8 1f    movsd  0x1fb8de(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b3879:       00 
    0.00 :	  5b387a:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b3881:       00 
    0.00 :	  5b3882:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b3889:       00 
    0.00 :	  5b388a:       e9 11 ff ff ff          jmpq   5b37a0 <ExecScan+0x50>
    0.00 :	  5b388f:       90                      nop
         :	                if (!qual || ExecQual(qual, econtext, false))
         :	                {
         :	                        /*
         :	                         * Found a satisfactory scan tuple.
         :	                         */
         :	                        if (projInfo)
    0.00 :	  5b3890:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3893:       74 2b                   je     5b38c0 <ExecScan+0x170>
         :	                                /*
         :	                                 * Form a projection tuple, store it in the result tuple slot
         :	                                 * and return it --- unless we find we can project no tuples
         :	                                 * from this scan tuple, in which case continue scan.
         :	                                 */
         :	                                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3895:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3899:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b389c:       e8 5f 97 ff ff          callq  5ad000 <ExecProject>
    0.00 :	  5b38a1:       48 89 c3                mov    %rax,%rbx
         :	                                if (isDone != ExprEndResult)
    0.00 :	  5b38a4:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  5b38a7:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5b38aa:       0f 84 f0 fe ff ff       je     5b37a0 <ExecScan+0x50>
         :	                                {
         :	                                        node->ps.ps_TupFromTlist = (isDone == ExprMultipleResult);
    0.00 :	  5b38b0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5b38b3:       41 0f 94 44 24 70       sete   0x70(%r12)
    0.00 :	  5b38b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    3.23 :	  5b38c0:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  5b38c4:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b38c7:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
   16.13 :	  5b38c8:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    3.23 :	  5b38ca:       41 5d                   pop    %r13
    3.23 :	  5b38cc:       41 5e                   pop    %r14
    0.00 :	  5b38ce:       41 5f                   pop    %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    6.45 :	  5b38d0:       c9                      leaveq 
    0.00 :	  5b38d1:       c3                      retq   
    0.00 :	  5b38d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b38d8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b38db:       ff 55 b8                callq  *-0x48(%rbp)
    0.00 :	  5b38de:       48 89 c3                mov    %rax,%rbx
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b38e1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b38e4:       0f 85 55 ff ff ff       jne    5b383f <ExecScan+0xef>
         :	                {
         :	                        if (projInfo)
    0.00 :	  5b38ea:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b38ed:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b38f0:       74 ce                   je     5b38c0 <ExecScan+0x170>
         :	                                return ExecClearTuple(projInfo->pi_slot);
    0.00 :	  5b38f2:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5b38f6:       e8 15 08 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b38fb:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b38fe:       66 90                   xchg   %ax,%ax
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b3900:       eb be                   jmp    5b38c0 <ExecScan+0x170>
    0.00 :	  5b3902:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b3908:       e8 93 89 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5b390d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b3910:       e9 a3 fe ff ff          jmpq   5b37b8 <ExecScan+0x68>
    0.00 :	  5b3915:       0f 1f 00                nopl   (%rax)
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3918:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b391b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5b3920:       e8 eb 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3925:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3928:       e9 09 ff ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b392d:       0f 1f 00                nopl   (%rax)
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b3930:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3933:       e8 d8 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3938:       e9 f9 fe ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b393d:       0f 1f 00                nopl   (%rax)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3940:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3944:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b3947:       e8 b4 96 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b394c:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3950:       48 89 c3                mov    %rax,%rbx
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b3953:       0f 84 67 ff ff ff       je     5b38c0 <ExecScan+0x170>
         :	                        return resultSlot;
         :	                /* Done with that source tuple... */
         :	                node->ps.ps_TupFromTlist = false;
    0.00 :	  5b3959:       41 c6 44 24 70 00       movb   $0x0,0x70(%r12)
    0.00 :	  5b395f:       e9 3c fe ff ff          jmpq   5b37a0 <ExecScan+0x50>
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
         :	        {
         :	                ResetExprContext(econtext);
    0.00 :	  5b3964:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b3968:       e8 43 50 1e 00          callq  7989b0 <MemoryContextReset>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b396d:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b3972:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b3979:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
   16.13 :	  5b397a:       74 74                   je     5b39f0 <ExecScan+0x2a0>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b397c:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b3981:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b3984:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b3987:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b398e:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b3992:       74 5c                   je     5b39f0 <ExecScan+0x2a0>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b3994:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b3997:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b399e:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b39a5:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b39a6:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b39a9:       75 5a                   jne    5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b39ab:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b39ae:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b39b5:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b39b9:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b39bc:       74 47                   je     5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b39be:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b39c0:       31 d2                   xor    %edx,%edx
    0.00 :	  5b39c2:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39c5:       e8 b6 0a 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b39ca:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39cd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39d0:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b39d3:       84 c0                   test   %al,%al
    0.00 :	  5b39d5:       0f 85 e5 fe ff ff       jne    5b38c0 <ExecScan+0x170>
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b39db:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b39de:       e8 2d 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b39e3:       e9 d8 fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
    0.00 :	  5b39e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b39ef:       00 
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b39f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39f3:       ff 55 b8                callq  *-0x48(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
   12.90 :	  5b39f6:       48 89 c3                mov    %rax,%rbx
    6.45 :	  5b39f9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b3a00:       e9 bb fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3a05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3a08:       e8 03 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3a0d:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3a10:       e9 ab fe ff ff          jmpq   5b38c0 <ExecScan+0x170>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   26.92 ??:0
   23.08 ??:0
   23.08 ??:0
   15.38 ??:0
   11.54 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000099390 <__gettimeofday>:
 ??:0
   23.08 :	   99390:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   99394:       48 8b 05 ad de 2d 00    mov    0x2ddead(%rip),%rax        # 377248 <__vdso_gettimeofday>
   15.38 :	   9939b:       48 c1 c8 11             ror    $0x11,%rax
   26.92 :	   9939f:       64 48 33 04 25 30 00    xor    %fs:0x30,%rax
    0.00 :	   993a6:       00 00 
   23.08 :	   993a8:       ff d0                   callq  *%rax
   11.54 :	   993aa:       3d 01 f0 ff ff          cmp    $0xfffff001,%eax
    0.00 :	   993af:       73 05                   jae    993b6 <__gettimeofday+0x26>
    0.00 :	   993b1:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   993b5:       c3                      retq   
    0.00 :	   993b6:       48 8b 0d 7b 8a 2d 00    mov    0x2d8a7b(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   993bd:       31 d2                   xor    %edx,%edx
    0.00 :	   993bf:       48 29 c2                sub    %rax,%rdx
    0.00 :	   993c2:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   993c5:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   993c9:       eb e6                   jmp    993b1 <__gettimeofday+0x21>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   54.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:130
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000677560 <StrategyGetBuffer>:
         :	 *      To ensure that no one else can pin the buffer before we do, we must
         :	 *      return the buffer with the buffer header spinlock still held.
         :	 */
         :	volatile BufferDesc *
         :	StrategyGetBuffer(BufferAccessStrategy strategy)
         :	{
    0.00 :	  677560:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
    4.17 :	  677561:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  677564:       41 57                   push   %r15
    0.00 :	  677566:       41 56                   push   %r14
    0.00 :	  677568:       41 55                   push   %r13
    0.00 :	  67756a:       49 89 fd                mov    %rdi,%r13
    0.00 :	  67756d:       41 54                   push   %r12
    0.00 :	  67756f:       53                      push   %rbx
    0.00 :	  677570:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * If given a strategy object, see whether it can select a buffer. We
         :	         * assume strategy objects don't need buffer_strategy_lock.
         :	         */
         :	        if (strategy != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:130
    4.17 :	  677574:       48 85 ff                test   %rdi,%rdi
    0.00 :	  677577:       74 65                   je     6775de <StrategyGetBuffer+0x7e>
         :	{
         :	        volatile BufferDesc *buf;
         :	        Buffer          bufnum;
         :
         :	        /* Advance to next ring slot */
         :	        if (++strategy->current >= strategy->ring_size)
    0.00 :	  677579:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  67757c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67757f:       3b 47 04                cmp    0x4(%rdi),%eax
    0.00 :	  677582:       89 47 08                mov    %eax,0x8(%rdi)
    0.00 :	  677585:       7c 09                   jl     677590 <StrategyGetBuffer+0x30>
         :	                strategy->current = 0;
    0.00 :	  677587:       c7 47 08 00 00 00 00    movl   $0x0,0x8(%rdi)
    0.00 :	  67758e:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * If the slot hasn't been filled yet, tell the caller to allocate a new
         :	         * buffer with the normal allocation strategy.  He will then fill this
         :	         * slot by calling AddBufferToRing with the new buffer.
         :	         */
         :	        bufnum = strategy->buffers[strategy->current];
    0.00 :	  677590:       48 98                   cltq   
    0.00 :	  677592:       41 8b 44 85 10          mov    0x10(%r13,%rax,4),%eax
         :	        if (bufnum == InvalidBuffer)
    0.00 :	  677597:       85 c0                   test   %eax,%eax
    0.00 :	  677599:       74 3e                   je     6775d9 <StrategyGetBuffer+0x79>
         :	         * since our own previous usage of the ring element would have left it
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
    0.00 :	  67759b:       48 98                   cltq   
    0.00 :	  67759d:       48 8d 58 ff             lea    -0x1(%rax),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6775a1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6775a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6775aa:       48 03 1d 4f 85 54 00    add    0x54854f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	        LockBufHdr(buf);
    0.00 :	  6775b1:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6775b5:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  6775b8:       84 c0                   test   %al,%al
    0.00 :	  6775ba:       0f 85 b8 02 00 00       jne    677878 <StrategyGetBuffer+0x318>
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
    0.00 :	  6775c0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6775c3:       85 c0                   test   %eax,%eax
    0.00 :	  6775c5:       75 0e                   jne    6775d5 <StrategyGetBuffer+0x75>
    0.00 :	  6775c7:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  6775cb:       66 83 f8 01             cmp    $0x1,%ax
    0.00 :	  6775cf:       0f 86 92 02 00 00       jbe    677867 <StrategyGetBuffer+0x307>
         :	        {
         :	                strategy->current_was_in_ring = true;
         :	                return buf;
         :	        }
         :	        UnlockBufHdr(buf);
    0.00 :	  6775d5:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Tell caller to allocate a new buffer with the normal allocation
         :	         * strategy.  He'll then replace this ring element via AddBufferToRing.
         :	         */
         :	        strategy->current_was_in_ring = false;
    0.00 :	  6775d9:       41 c6 45 0c 00          movb   $0x0,0xc(%r13)
         :	        /*
         :	         * We count buffer allocation requests so that the bgwriter can estimate
         :	         * the rate of buffer consumption.  Note that buffers recycled by a
         :	         * strategy object are intentionally not counted here.
         :	         */
         :	        pg_atomic_fetch_add_u32(&StrategyControl->numBufferAllocs, 1);
    0.00 :	  6775de:       48 8b 05 1b 5b 50 00    mov    0x505b1b(%rip),%rax        # b7d100 <StrategyControl>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  6775e5:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6775ea:       48 83 c0 14             add    $0x14,%rax
    0.00 :	  6775ee:       f0 0f c1 10             lock xadd %edx,(%rax)
         :	         * Since we're not guaranteed atomic 8 byte reads we need to acquire the
         :	         * spinlock if not null to be sure we get a correct pointer. Because we
         :	         * don't want to set the latch while holding the buffer_strategy_lock we
         :	         * just grab the lock to read and reset the pointer.
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    8.33 :	  6775f2:       48 8b 15 07 5b 50 00    mov    0x505b07(%rip),%rdx        # b7d100 <StrategyControl>
         :	        if (bgwriterLatch)
    0.00 :	  6775f9:       48 83 7a 18 00          cmpq   $0x0,0x18(%rdx)
    0.00 :	  6775fe:       74 3e                   je     67763e <StrategyGetBuffer+0xde>
    0.00 :	  677600:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  677605:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677608:       84 c0                   test   %al,%al
    0.00 :	  67760a:       0f 85 21 02 00 00       jne    677831 <StrategyGetBuffer+0x2d1>
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
    0.00 :	  677610:       48 8b 05 e9 5a 50 00    mov    0x505ae9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677617:       48 8b 78 18             mov    0x18(%rax),%rdi
         :	                StrategyControl->bgwriterLatch = NULL;
    0.00 :	  67761b:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  677622:       00 
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677623:       48 8b 05 d6 5a 50 00    mov    0x505ad6(%rip),%rax        # b7d100 <StrategyControl>
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  67762a:       48 85 ff                test   %rdi,%rdi
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	                StrategyControl->bgwriterLatch = NULL;
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67762d:       c6 00 00                movb   $0x0,(%rax)
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  677630:       74 05                   je     677637 <StrategyGetBuffer+0xd7>
         :	                        SetLatch(bgwriterLatch);
    0.00 :	  677632:       e8 89 1a fc ff          callq  6390c0 <SetLatch>
    0.00 :	  677637:       48 8b 15 c2 5a 50 00    mov    0x505ac2(%rip),%rdx        # b7d100 <StrategyControl>
         :	         *
         :	         * Note that the freeNext fields are considered to be protected by
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
    0.00 :	  67763e:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  677641:       85 c0                   test   %eax,%eax
    0.00 :	  677643:       0f 88 08 01 00 00       js     677751 <StrategyGetBuffer+0x1f1>
    0.00 :	  677649:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  67764e:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677651:       84 c0                   test   %al,%al
    0.00 :	  677653:       0f 85 f3 01 00 00       jne    67784c <StrategyGetBuffer+0x2ec>
    0.00 :	  677659:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67765f:       eb 30                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677661:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
         :	                        if (buf->refcount == 0 && buf->usage_count == 0)
    0.00 :	  677668:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  67766b:       85 c0                   test   %eax,%eax
    0.00 :	  67766d:       75 0d                   jne    67767c <StrategyGetBuffer+0x11c>
    0.00 :	  67766f:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677673:       66 85 c0                test   %ax,%ax
    0.00 :	  677676:       0f 84 94 00 00 00       je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
    0.00 :	  67767c:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  677680:       44 89 e0                mov    %r12d,%eax
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677683:       48 8b 15 76 5a 50 00    mov    0x505a76(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  67768a:       f0 86 02                lock xchg %al,(%rdx)
    0.00 :	  67768d:       84 c0                   test   %al,%al
    0.00 :	  67768f:       75 5f                   jne    6776f0 <StrategyGetBuffer+0x190>
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :
         :	                while (StrategyControl->firstFreeBuffer >= 0)
    0.00 :	  677691:       48 8b 15 68 5a 50 00    mov    0x505a68(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  677698:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67769b:       85 c0                   test   %eax,%eax
    0.00 :	  67769d:       0f 88 9d 00 00 00       js     677740 <StrategyGetBuffer+0x1e0>
         :	                {
         :	                        buf = &BufferDescriptors[StrategyControl->firstFreeBuffer];
    0.00 :	  6776a3:       48 63 d8                movslq %eax,%rbx
    0.00 :	  6776a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6776aa:       48 03 1d 4f 84 54 00    add    0x54844f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        Assert(buf->freeNext != FREENEXT_NOT_IN_LIST);
         :
         :	                        /* Unconditionally remove buffer from freelist */
         :	                        StrategyControl->firstFreeBuffer = buf->freeNext;
    0.00 :	  6776b1:       8b 43 28                mov    0x28(%rbx),%eax
    0.00 :	  6776b4:       89 42 08                mov    %eax,0x8(%rdx)
         :	                        buf->freeNext = FREENEXT_NOT_IN_LIST;
    0.00 :	  6776b7:       c7 43 28 fe ff ff ff    movl   $0xfffffffe,0x28(%rbx)
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776be:       48 8b 05 3b 5a 50 00    mov    0x505a3b(%rip),%rax        # b7d100 <StrategyControl>
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776c5:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776c9:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  6776cc:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6776cf:       f0 86 07                lock xchg %al,(%rdi)
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776d2:       84 c0                   test   %al,%al
    0.00 :	  6776d4:       74 92                   je     677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776d6:       ba d0 00 00 00          mov    $0xd0,%edx
    0.00 :	  6776db:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  6776e0:       e8 5b 89 01 00          callq  690040 <s_lock>
    0.00 :	  6776e5:       eb 81                   jmp    677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6776ee:       00 00 
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776f0:       48 8b 3d 09 5a 50 00    mov    0x505a09(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  6776f7:       ba da 00 00 00          mov    $0xda,%edx
    0.00 :	  6776fc:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677701:       e8 3a 89 01 00          callq  690040 <s_lock>
    0.00 :	  677706:       eb 89                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677708:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67770f:       00 
         :	                                trycounter = NBuffers;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Found a usable buffer */
         :	                                if (strategy != NULL)
    0.00 :	  677710:       4d 85 ed                test   %r13,%r13
    0.00 :	  677713:       74 0f                   je     677724 <StrategyGetBuffer+0x1c4>
         :	 * is called with the spinlock held, it had better be quite cheap.
         :	 */
         :	static void
         :	AddBufferToRing(BufferAccessStrategy strategy, volatile BufferDesc *buf)
         :	{
         :	        strategy->buffers[strategy->current] = BufferDescriptorGetBuffer(buf);
    0.00 :	  677715:       8b 43 24                mov    0x24(%rbx),%eax
    0.00 :	  677718:       49 63 55 08             movslq 0x8(%r13),%rdx
    0.00 :	  67771c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67771f:       41 89 44 95 10          mov    %eax,0x10(%r13,%rdx,4)
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
         :	        }
         :	}
    0.00 :	  677724:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  677728:       48 89 d8                mov    %rbx,%rax
    0.00 :	  67772b:       5b                      pop    %rbx
    0.00 :	  67772c:       41 5c                   pop    %r12
    0.00 :	  67772e:       41 5d                   pop    %r13
    0.00 :	  677730:       41 5e                   pop    %r14
    0.00 :	  677732:       41 5f                   pop    %r15
    0.00 :	  677734:       c9                      leaveq 
    0.00 :	  677735:       c3                      retq   
    0.00 :	  677736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67773d:       00 00 00 
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                }
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677740:       48 8b 05 b9 59 50 00    mov    0x5059b9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677747:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  67774a:       48 8b 15 af 59 50 00    mov    0x5059af(%rip),%rdx        # b7d100 <StrategyControl>
         :	        }
         :
         :	        /* Nothing on the freelist, so run the "clock sweep" algorithm */
         :	        trycounter = NBuffers;
    0.00 :	  677751:       44 8b 25 c8 13 4f 00    mov    0x4f13c8(%rip),%r12d        # b68b20 <NBuffers>
    0.00 :	  677758:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  67775e:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  677764:       eb 30                   jmp    677796 <StrategyGetBuffer+0x236>
    0.00 :	  677766:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67776d:       00 00 00 
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
         :	                if (buf->refcount == 0)
         :	                {
         :	                        if (buf->usage_count > 0)
    0.00 :	  677770:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677774:       66 85 c0                test   %ax,%ax
    0.00 :	  677777:       74 97                   je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                buf->usage_count--;
    0.00 :	  677779:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  67777d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  677780:       66 89 43 16             mov    %ax,0x16(%rbx)
         :	                                trycounter = NBuffers;
    0.00 :	  677784:       44 8b 25 95 13 4f 00    mov    0x4f1395(%rip),%r12d        # b68b20 <NBuffers>
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
    0.00 :	  67778b:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  67778f:       48 8b 15 6a 59 50 00    mov    0x50596a(%rip),%rdx        # b7d100 <StrategyControl>
         :	        trycounter = NBuffers;
         :	        for (;;)
         :	        {
         :	                int victim;
         :
         :	                victim = pg_atomic_fetch_add_u32(&StrategyControl->nextVictimBuffer, 1);
    0.00 :	  677796:       48 8d 42 04             lea    0x4(%rdx),%rax
    0.00 :	  67779a:       44 89 f2                mov    %r14d,%edx
    0.00 :	  67779d:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                buf = &BufferDescriptors[victim % NBuffers];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
   16.67 :	  6777a1:       89 d0                   mov    %edx,%eax
    0.00 :	  6777a3:       c1 fa 1f                sar    $0x1f,%edx
    0.00 :	  6777a6:       f7 3d 74 13 4f 00       idivl  0x4f1374(%rip)        # b68b20 <NBuffers>
   12.50 :	  6777ac:       48 63 da                movslq %edx,%rbx
    0.00 :	  6777af:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6777b3:       48 03 1d 46 83 54 00    add    0x548346(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                if (victim % NBuffers == 0)
    0.00 :	  6777ba:       85 d2                   test   %edx,%edx
    0.00 :	  6777bc:       75 12                   jne    6777d0 <StrategyGetBuffer+0x270>
         :	                {
         :	                        pg_atomic_add_fetch_u32(&StrategyControl->completePasses, 1);
    0.00 :	  6777be:       48 8b 05 3b 59 50 00    mov    0x50593b(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  6777c5:       44 89 f2                mov    %r14d,%edx
    0.00 :	  6777c8:       48 83 c0 10             add    $0x10,%rax
    0.00 :	  6777cc:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6777d0:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6777d4:       44 89 f8                mov    %r15d,%eax
    0.00 :	  6777d7:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   54.17 :	  6777da:       84 c0                   test   %al,%al
    0.00 :	  6777dc:       75 42                   jne    677820 <StrategyGetBuffer+0x2c0>
         :	                if (buf->refcount == 0)
    0.00 :	  6777de:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6777e1:       85 c0                   test   %eax,%eax
    0.00 :	  6777e3:       74 8b                   je     677770 <StrategyGetBuffer+0x210>
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                }
         :	                else if (--trycounter == 0)
    0.00 :	  6777e5:       41 83 ec 01             sub    $0x1,%r12d
    0.00 :	  6777e9:       75 a0                   jne    67778b <StrategyGetBuffer+0x22b>
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777eb:       ba 80 a1 8a 00          mov    $0x8aa180,%edx
    0.00 :	  6777f0:       be 0c 01 00 00          mov    $0x10c,%esi
    0.00 :	  6777f5:       bf ec a0 8a 00          mov    $0x8aa0ec,%edi
         :	                         * so all the buffers are pinned (or were when we looked at them).
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
    0.00 :	  6777fa:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777fe:       e8 1d 3c 10 00          callq  77b420 <elog_start>
    0.00 :	  677803:       be 0e a1 8a 00          mov    $0x8aa10e,%esi
    0.00 :	  677808:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67780d:       31 c0                   xor    %eax,%eax
    0.00 :	  67780f:       e8 1c 3a 10 00          callq  77b230 <elog_finish>
    0.00 :	  677814:       e8 b7 1c df ff          callq  4694d0 <abort@plt>
    0.00 :	  677819:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  677820:       ba f2 00 00 00          mov    $0xf2,%edx
    0.00 :	  677825:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67782a:       e8 11 88 01 00          callq  690040 <s_lock>
    0.00 :	  67782f:       eb ad                   jmp    6777de <StrategyGetBuffer+0x27e>
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	        if (bgwriterLatch)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677831:       48 8b 3d c8 58 50 00    mov    0x5058c8(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677838:       ba 9f 00 00 00          mov    $0x9f,%edx
    0.00 :	  67783d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677842:       e8 f9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677847:       e9 c4 fd ff ff          jmpq   677610 <StrategyGetBuffer+0xb0>
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67784c:       48 8b 3d ad 58 50 00    mov    0x5058ad(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677853:       ba b8 00 00 00          mov    $0xb8,%edx
    0.00 :	  677858:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67785d:       e8 de 87 01 00          callq  690040 <s_lock>
    0.00 :	  677862:       e9 f2 fd ff ff          jmpq   677659 <StrategyGetBuffer+0xf9>
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
         :	        {
         :	                strategy->current_was_in_ring = true;
    0.00 :	  677867:       41 c6 45 0c 01          movb   $0x1,0xc(%r13)
    0.00 :	  67786c:       e9 b3 fe ff ff          jmpq   677724 <StrategyGetBuffer+0x1c4>
    0.00 :	  677871:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
    0.00 :	  677878:       ba 20 02 00 00          mov    $0x220,%edx
    0.00 :	  67787d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677882:       e8 b9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677887:       e9 34 fd ff ff          jmpq   6775c0 <StrategyGetBuffer+0x60>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   26.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
   13.04 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2769
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2766
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2778
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2784
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2784
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2785
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2787
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674e60 <ReleaseBuffer>:
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.35 :	  674e60:       55                      push   %rbp
    0.00 :	  674e61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674e64:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    4.35 :	  674e68:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  674e6c:       48 83 ec 10             sub    $0x10,%rsp
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2766
    4.35 :	  674e70:       85 ff                   test   %edi,%edi
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
    0.00 :	  674e72:       89 fb                   mov    %edi,%ebx
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
    0.00 :	  674e74:       74 7f                   je     674ef5 <ReleaseBuffer+0x95>
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
         :
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2769
   13.04 :	  674e76:       89 fe                   mov    %edi,%esi
    0.00 :	  674e78:       48 8b 3d 41 5a 54 00    mov    0x545a41(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e7f:       e8 7c 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
         :
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674e84:       85 db                   test   %ebx,%ebx
    0.00 :	  674e86:       78 38                   js     674ec0 <ReleaseBuffer+0x60>
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
    0.00 :	  674e88:       31 d2                   xor    %edx,%edx
    0.00 :	  674e8a:       31 f6                   xor    %esi,%esi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
    4.35 :	  674e8c:       89 df                   mov    %ebx,%edi
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2778
    4.35 :	  674e8e:       4c 8b 25 6b ac 54 00    mov    0x54ac6b(%rip),%r12        # bbfb00 <BufferDescriptors>
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
    8.70 :	  674e95:       e8 86 f6 ff ff          callq  674520 <GetPrivateRefCountEntry>
   26.09 :	  674e9a:       48 89 c2                mov    %rax,%rdx
         :	        Assert(ref != NULL);
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2784
    4.35 :	  674e9d:       8b 40 04                mov    0x4(%rax),%eax
    4.35 :	  674ea0:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  674ea3:       7e 33                   jle    674ed8 <ReleaseBuffer+0x78>
         :	                ref->refcount--;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2785
    4.35 :	  674ea5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674ea8:       89 42 04                mov    %eax,0x4(%rdx)
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
    0.00 :	  674eab:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    4.35 :	  674eaf:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eb4:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    8.70 :	  674eb5:       c3                      retq   
    0.00 :	  674eb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  674ebd:       00 00 00 
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
         :
         :	        if (BufferIsLocal(buffer))
         :	        {
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
    0.00 :	  674ec0:       f7 d3                   not    %ebx
    0.00 :	  674ec2:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674ec5:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674ec9:       48 03 05 50 82 50 00    add    0x508250(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674ed0:       83 28 01                subl   $0x1,(%rax)
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
    0.00 :	  674ed3:       eb d6                   jmp    674eab <ReleaseBuffer+0x4b>
    0.00 :	  674ed5:       0f 1f 00                nopl   (%rax)
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ed8:       48 63 c3                movslq %ebx,%rax
         :	}
    0.00 :	  674edb:       48 8b 1c 24             mov    (%rsp),%rbx
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2787
    4.35 :	  674edf:       31 f6                   xor    %esi,%esi
    0.00 :	  674ee1:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  674ee5:       49 8d 7c 04 c0          lea    -0x40(%r12,%rax,1),%rdi
         :	}
    0.00 :	  674eea:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eef:       c9                      leaveq 
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ef0:       e9 3b fe ff ff          jmpq   674d30 <UnpinBuffer>
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
    0.00 :	  674ef5:       ba 34 a0 8a 00          mov    $0x8aa034,%edx
    0.00 :	  674efa:       be cf 0a 00 00          mov    $0xacf,%esi
    0.00 :	  674eff:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674f04:       e8 17 65 10 00          callq  77b420 <elog_start>
    0.00 :	  674f09:       31 d2                   xor    %edx,%edx
    0.00 :	  674f0b:       be 5c 9d 8a 00          mov    $0x8a9d5c,%esi
    0.00 :	  674f10:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  674f15:       31 c0                   xor    %eax,%eax
    0.00 :	  674f17:       e8 14 63 10 00          callq  77b230 <elog_finish>
    0.00 :	  674f1c:       e8 af 45 df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    9.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
    9.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    9.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    9.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:54
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:56
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:63
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:65
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7f00 <InstrStartNode>:
         :	}
         :
         :	/* Entry to a plan node */
         :	void
         :	InstrStartNode(Instrumentation *instr)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
    4.76 :	  5b7f00:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
    9.52 :	  5b7f01:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7f04:       53                      push   %rbx
    0.00 :	  5b7f05:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7f08:       48 83 ec 08             sub    $0x8,%rsp
         :	        if (instr->need_timer)
    0.00 :	  5b7f0c:       80 3f 00                cmpb   $0x0,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:54
    4.76 :	  5b7f0f:       74 4a                   je     5b7f5b <InstrStartNode+0x5b>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:56
    4.76 :	  5b7f11:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7f16:       75 07                   jne    5b7f1f <InstrStartNode+0x1f>
    0.00 :	  5b7f18:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7f1d:       74 31                   je     5b7f50 <InstrStartNode+0x50>
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
    0.00 :	  5b7f1f:       ba 98 b6 88 00          mov    $0x88b698,%edx
    0.00 :	  5b7f24:       be 3b 00 00 00          mov    $0x3b,%esi
    0.00 :	  5b7f29:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7f2e:       e8 ed 34 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7f33:       be 58 b6 88 00          mov    $0x88b658,%esi
    0.00 :	  5b7f38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7f3d:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7f3f:       e8 ec 32 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7f44:       e8 87 15 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5b7f49:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	InstrStartNode(Instrumentation *instr)
         :	{
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
    0.00 :	  5b7f50:       48 8d 7f 08             lea    0x8(%rdi),%rdi
    0.00 :	  5b7f54:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7f56:       e8 65 16 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
         :	        }
         :
         :	        /* save buffer usage totals at node entry, if needed */
         :	        if (instr->need_bufusage)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:63
    4.76 :	  5b7f5b:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
    0.00 :	  5b7f5f:       0f 84 a9 00 00 00       je     5b800e <InstrStartNode+0x10e>
         :	                instr->bufusage_start = pgBufferUsage;
    0.00 :	  5b7f65:       48 8b 05 f4 77 60 00    mov    0x6077f4(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7f6c:       48 89 43 38             mov    %rax,0x38(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   14.29 :	  5b7f70:       48 8b 05 f1 77 60 00    mov    0x6077f1(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7f77:       48 89 43 40             mov    %rax,0x40(%rbx)
    0.00 :	  5b7f7b:       48 8b 05 ee 77 60 00    mov    0x6077ee(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7f82:       48 89 43 48             mov    %rax,0x48(%rbx)
    0.00 :	  5b7f86:       48 8b 05 eb 77 60 00    mov    0x6077eb(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7f8d:       48 89 43 50             mov    %rax,0x50(%rbx)
    0.00 :	  5b7f91:       48 8b 05 e8 77 60 00    mov    0x6077e8(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7f98:       48 89 43 58             mov    %rax,0x58(%rbx)
    9.52 :	  5b7f9c:       48 8b 05 e5 77 60 00    mov    0x6077e5(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7fa3:       48 89 43 60             mov    %rax,0x60(%rbx)
    0.00 :	  5b7fa7:       48 8b 05 e2 77 60 00    mov    0x6077e2(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7fae:       48 89 43 68             mov    %rax,0x68(%rbx)
    9.52 :	  5b7fb2:       48 8b 05 df 77 60 00    mov    0x6077df(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7fb9:       48 89 43 70             mov    %rax,0x70(%rbx)
    0.00 :	  5b7fbd:       48 8b 05 dc 77 60 00    mov    0x6077dc(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    4.76 :	  5b7fc4:       48 89 43 78             mov    %rax,0x78(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    9.52 :	  5b7fc8:       48 8b 05 d9 77 60 00    mov    0x6077d9(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7fcf:       48 89 83 80 00 00 00    mov    %rax,0x80(%rbx)
    0.00 :	  5b7fd6:       48 8b 05 d3 77 60 00    mov    0x6077d3(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7fdd:       48 89 83 88 00 00 00    mov    %rax,0x88(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    4.76 :	  5b7fe4:       48 8b 05 cd 77 60 00    mov    0x6077cd(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7feb:       48 89 83 90 00 00 00    mov    %rax,0x90(%rbx)
    0.00 :	  5b7ff2:       48 8b 05 c7 77 60 00    mov    0x6077c7(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7ff9:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   14.29 :	  5b8000:       48 8b 05 c1 77 60 00    mov    0x6077c1(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b8007:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	}
    0.00 :	  5b800e:       48 83 c4 08             add    $0x8,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:65
    4.76 :	  5b8012:       5b                      pop    %rbx
    0.00 :	  5b8013:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   90.48 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1037
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bc410 <ExecHashTableInsert>:
         :	 */
         :	void
         :	ExecHashTableInsert(HashJoinTable hashtable,
         :	                                        TupleTableSlot *slot,
         :	                                        uint32 hashvalue)
         :	{
    0.00 :	  5bc410:       55                      push   %rbp
    0.00 :	  5bc411:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bc414:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5bc418:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  5bc41c:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5bc41f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  5bc423:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5bc427:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5bc42a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    4.76 :	  5bc42e:       48 83 ec 40             sub    $0x40,%rsp
    0.00 :	  5bc432:       89 d3                   mov    %edx,%ebx
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bc434:       e8 17 7b ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
    0.00 :	  5bc439:       49 89 c7                mov    %rax,%r15
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
    0.00 :	  5bc43c:       41 8b 45 40             mov    0x40(%r13),%eax
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bc440:       41 8b 55 00             mov    0x0(%r13),%edx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
    0.00 :	  5bc444:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5bc447:       0f 86 0b 01 00 00       jbe    5bc558 <ExecHashTableInsert+0x148>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc44d:       41 8b 4d 04             mov    0x4(%r13),%ecx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc451:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc455:       89 da                   mov    %ebx,%edx
    0.00 :	  5bc457:       83 e8 01                sub    $0x1,%eax
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc45a:       41 21 de                and    %ebx,%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc45d:       d3 ea                   shr    %cl,%edx
    0.00 :	  5bc45f:       21 c2                   and    %eax,%edx
         :	                                                          &bucketno, &batchno);
         :
         :	        /*
         :	         * decide whether to put the tuple in the hash table or a temp file
         :	         */
         :	        if (batchno == hashtable->curbatch)
    0.00 :	  5bc461:       41 39 55 44             cmp    %edx,0x44(%r13)
    0.00 :	  5bc465:       74 31                   je     5bc498 <ExecHashTableInsert+0x88>
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc467:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5bc46a:       89 de                   mov    %ebx,%esi
    0.00 :	  5bc46c:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bc46f:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  5bc473:       49 03 55 68             add    0x68(%r13),%rdx
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc477:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc47b:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc47f:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc483:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc487:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc48b:       c9                      leaveq 
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc48c:       e9 cf 10 00 00          jmpq   5bd560 <ExecHashJoinSaveTuple>
    0.00 :	  5bc491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc498:       f2 41 0f 10 45 58       movsd  0x58(%r13),%xmm0
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc49e:       4c 89 ef                mov    %r13,%rdi
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc4a1:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc4a6:       f2 41 0f 10 4d 60       movsd  0x60(%r13),%xmm1
    0.00 :	  5bc4ac:       f2 0f 11 4d c8          movsd  %xmm1,-0x38(%rbp)
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc4b1:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bc4b4:       83 c0 10                add    $0x10,%eax
    0.00 :	  5bc4b7:       48 98                   cltq   
    0.00 :	  5bc4b9:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5bc4bc:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5bc4c0:       e8 fb fa ff ff          callq  5bbfc0 <dense_alloc>
         :
         :	                hashTuple->hashvalue = hashvalue;
    0.00 :	  5bc4c5:       89 58 08                mov    %ebx,0x8(%rax)
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bc4c8:       41 8b 17                mov    (%r15),%edx
    0.00 :	  5bc4cb:       48 8d 58 10             lea    0x10(%rax),%rbx
    0.00 :	  5bc4cf:       4c 89 fe                mov    %r15,%rsi
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc4d2:       49 89 c4                mov    %rax,%r12
         :
         :	                hashTuple->hashvalue = hashvalue;
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bc4d5:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bc4d8:       e8 13 d7 ea ff          callq  469bf0 <memcpy@plt>
         :	                 * We always reset the tuple-matched flag on insertion.  This is okay
         :	                 * even when reloading a tuple from a batch file, since the tuple
         :	                 * could not possibly have been matched to an outer tuple before it
         :	                 * went into the batch file.
         :	                 */
         :	                HeapTupleHeaderClearMatch(HJTUPLE_MINTUPLE(hashTuple));
    0.00 :	  5bc4dd:       66 81 63 0a ff 7f       andw   $0x7fff,0xa(%rbx)
         :
         :	                /* Push it onto the front of the bucket's list */
         :	                hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bc4e3:       49 63 d6                movslq %r14d,%rdx
    0.00 :	  5bc4e6:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bc4ea:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
   90.48 :	  5bc4ee:       49 89 04 24             mov    %rax,(%r12)
         :	                hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bc4f2:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bc4f6:       4c 89 24 d0             mov    %r12,(%rax,%rdx,8)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc4fa:       41 83 7d 40 01          cmpl   $0x1,0x40(%r13)
    0.00 :	  5bc4ff:       74 7f                   je     5bc580 <ExecHashTableInsert+0x170>
    0.00 :	  5bc501:       41 8b 55 0c             mov    0xc(%r13),%edx
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bc505:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5bc509:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bc510:       49 3b 85 a0 00 00 00    cmp    0xa0(%r13),%rax
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bc517:       49 89 85 90 00 00 00    mov    %rax,0x90(%r13)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bc51e:       77 50                   ja     5bc570 <ExecHashTableInsert+0x160>
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
    0.00 :	  5bc520:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bc523:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bc527:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
    0.00 :	  5bc52e:       49 3b 85 98 00 00 00    cmp    0x98(%r13),%rax
    0.00 :	  5bc535:       0f 87 8d 00 00 00       ja     5bc5c8 <ExecHashTableInsert+0x1b8>
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc53b:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc53f:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc543:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc547:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc54b:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc54f:       c9                      leaveq 
    0.00 :	  5bc550:       c3                      retq   
    0.00 :	  5bc551:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1037
    4.76 :	  5bc558:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
    0.00 :	  5bc55c:       31 d2                   xor    %edx,%edx
    0.00 :	  5bc55e:       41 21 de                and    %ebx,%r14d
    0.00 :	  5bc561:       e9 fb fe ff ff          jmpq   5bc461 <ExecHashTableInsert+0x51>
    0.00 :	  5bc566:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bc56d:       00 00 00 
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bc570:       49 89 85 a0 00 00 00    mov    %rax,0xa0(%r13)
    0.00 :	  5bc577:       eb a7                   jmp    5bc520 <ExecHashTableInsert+0x110>
    0.00 :	  5bc579:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc580:       41 8b 55 0c             mov    0xc(%r13),%edx
    0.00 :	  5bc584:       81 fa ff ff ff 3f       cmp    $0x3fffffff,%edx
    0.00 :	  5bc58a:       0f 8f 75 ff ff ff       jg     5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc590:       f2 0f 10 45 c0          movsd  -0x40(%rbp),%xmm0
    0.00 :	  5bc595:       f2 0f 5c 45 c8          subsd  -0x38(%rbp),%xmm0
    0.00 :	  5bc59a:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc59f:       f2 0f 2a c2             cvtsi2sd %edx,%xmm0
    0.00 :	  5bc5a3:       f2 0f 10 4d c0          movsd  -0x40(%rbp),%xmm1
    0.00 :	  5bc5a8:       66 0f 2e c8             ucomisd %xmm0,%xmm1
    0.00 :	  5bc5ac:       0f 82 53 ff ff ff       jb     5bc505 <ExecHashTableInsert+0xf5>
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5b2:       8d 04 12                lea    (%rdx,%rdx,1),%eax
         :	                        hashtable->log2_nbuckets_optimal += 1;
    0.00 :	  5bc5b5:       41 83 45 10 01          addl   $0x1,0x10(%r13)
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5ba:       41 89 45 0c             mov    %eax,0xc(%r13)
    0.00 :	  5bc5be:       89 c2                   mov    %eax,%edx
    0.00 :	  5bc5c0:       e9 40 ff ff ff          jmpq   5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc5c5:       0f 1f 00                nopl   (%rax)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5c8:       4c 89 ef                mov    %r13,%rdi
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc5cb:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc5cf:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc5d3:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc5d7:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc5db:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc5df:       c9                      leaveq 
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5e0:       e9 fb fa ff ff          jmpq   5bc0e0 <ExecHashIncreaseNumBatches>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:461
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:466
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:480
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:459
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4110 <ExecClearTuple>:
         :	 *              NB: only the tuple is cleared, not the tuple descriptor (if any).
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: slot passed */
         :	ExecClearTuple(TupleTableSlot *slot)    /* slot in which to store tuple */
         :	{
    0.00 :	  5b4110:       55                      push   %rbp
    0.00 :	  5b4111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4114:       53                      push   %rbx
    0.00 :	  5b4115:       48 89 fb                mov    %rdi,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   10.00 :	  5b4118:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(slot != NULL);
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b411c:       80 7f 05 00             cmpb   $0x0,0x5(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:459
    5.00 :	  5b4120:       75 5e                   jne    5b4180 <ExecClearTuple+0x70>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:461
   20.00 :	  5b4122:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4126:       75 48                   jne    5b4170 <ExecClearTuple+0x60>
         :	        slot->tts_shouldFreeMin = false;
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4128:       8b 7b 20                mov    0x20(%rbx),%edi
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        slot->tts_tuple = NULL;
    0.00 :	  5b412b:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b4132:       00 
         :	        slot->tts_mintuple = NULL;
    0.00 :	  5b4133:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b413a:       00 
         :	        slot->tts_shouldFree = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:466
   10.00 :	  5b413b:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b413f:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
    5.00 :	  5b4143:       85 ff                   test   %edi,%edi
    0.00 :	  5b4145:       74 05                   je     5b414c <ExecClearTuple+0x3c>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4147:       e8 14 0d 0c 00          callq  674e60 <ReleaseBuffer>
         :
         :	        slot->tts_buffer = InvalidBuffer;
    0.00 :	  5b414c:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:480
   10.00 :	  5b4153:       c6 43 04 01             movb   $0x1,0x4(%rbx)
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    5.00 :	  5b4157:       48 89 d8                mov    %rbx,%rax
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b415a:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :
         :	        return slot;
         :	}
    5.00 :	  5b4161:       48 83 c4 08             add    $0x8,%rsp
    5.00 :	  5b4165:       5b                      pop    %rbx
    0.00 :	  5b4166:       c9                      leaveq 
   25.00 :	  5b4167:       c3                      retq   
    0.00 :	  5b4168:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b416f:       00 
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4170:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4174:       e8 37 ab eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4179:       eb ad                   jmp    5b4128 <ExecClearTuple+0x18>
    0.00 :	  5b417b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4180:       48 8b 7f 08             mov    0x8(%rdi),%rdi
    0.00 :	  5b4184:       e8 37 ab eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4189:       eb 97                   jmp    5b4122 <ExecClearTuple+0x12>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   30.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2821
   15.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2814
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2815
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674b60 <IncrBufferRefCount>:
         :	 *              This function cannot be used on a buffer we do not have pinned,
         :	 *              because it doesn't change the shared buffer state.
         :	 */
         :	void
         :	IncrBufferRefCount(Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    5.00 :	  674b60:       55                      push   %rbp
   10.00 :	  674b61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674b64:       53                      push   %rbx
   10.00 :	  674b65:       89 fb                   mov    %edi,%ebx
    0.00 :	  674b67:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  674b6b:       48 8b 3d 4e 5d 54 00    mov    0x545d4e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2814
   15.00 :	  674b72:       e8 f9 62 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
    0.00 :	  674b77:       48 8b 3d 42 5d 54 00    mov    0x545d42(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2815
    5.00 :	  674b7e:       89 de                   mov    %ebx,%esi
    0.00 :	  674b80:       e8 1b 56 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674b85:       85 db                   test   %ebx,%ebx
    0.00 :	  674b87:       78 1f                   js     674ba8 <IncrBufferRefCount+0x48>
         :	                LocalRefCount[-buffer - 1]++;
         :	        else
         :	        {
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
    0.00 :	  674b89:       89 df                   mov    %ebx,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2821
   20.00 :	  674b8b:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  674b90:       31 f6                   xor    %esi,%esi
    0.00 :	  674b92:       e8 89 f9 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
    0.00 :	  674b97:       83 40 04 01             addl   $0x1,0x4(%rax)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
    5.00 :	  674b9b:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674b9f:       5b                      pop    %rbx
    0.00 :	  674ba0:       c9                      leaveq 
   30.00 :	  674ba1:       c3                      retq   
    0.00 :	  674ba2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	{
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
         :	        if (BufferIsLocal(buffer))
         :	                LocalRefCount[-buffer - 1]++;
    0.00 :	  674ba8:       f7 d3                   not    %ebx
    0.00 :	  674baa:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674bad:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674bb1:       48 03 05 68 85 50 00    add    0x508568(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674bb8:       83 00 01                addl   $0x1,(%rax)
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
         :	        }
         :	}
    0.00 :	  674bbb:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674bbf:       5b                      pop    %rbx
    0.00 :	  674bc0:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   30.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   15.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694ba0 <PredicateLockTuple>:
         :	 * Skip if not in full serializable transaction isolation level.
         :	 * Skip if this is a temporary table.
         :	 */
         :	void
         :	PredicateLockTuple(Relation relation, HeapTuple tuple, Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   25.00 :	  694ba0:       55                      push   %rbp
    0.00 :	  694ba1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694ba4:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    5.00 :	  694ba8:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  694bac:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  694baf:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  694bb3:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
   10.00 :	  694bb7:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694bbb:       48 8b 0d fe 9a 4e 00    mov    0x4e9afe(%rip),%rcx        # b7e6c0 <MySerializableXact>
         :	 * Skip if not in full serializable transaction isolation level.
         :	 * Skip if this is a temporary table.
         :	 */
         :	void
         :	PredicateLockTuple(Relation relation, HeapTuple tuple, Snapshot snapshot)
         :	{
    0.00 :	  694bc2:       49 89 f4                mov    %rsi,%r12
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694bc5:       48 85 c9                test   %rcx,%rcx
    0.00 :	  694bc8:       74 13                   je     694bdd <PredicateLockTuple+0x3d>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694bca:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  694bcd:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  694bd3:       74 1b                   je     694bf0 <PredicateLockTuple+0x50>
    0.00 :	  694bd5:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694bdb:       74 13                   je     694bf0 <PredicateLockTuple+0x50>
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
   15.00 :	  694bdd:       48 8b 5d e0             mov    -0x20(%rbp),%rbx
    0.00 :	  694be1:       4c 8b 65 e8             mov    -0x18(%rbp),%r12
    0.00 :	  694be5:       4c 8b 6d f0             mov    -0x10(%rbp),%r13
   10.00 :	  694be9:       4c 8b 75 f8             mov    -0x8(%rbp),%r14
   30.00 :	  694bed:       c9                      leaveq 
    5.00 :	  694bee:       c3                      retq   
    0.00 :	  694bef:       90                      nop
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  694bf0:       80 79 7c 00             cmpb   $0x0,0x7c(%rcx)
    0.00 :	  694bf4:       0f 88 9e 00 00 00       js     694c98 <PredicateLockTuple+0xf8>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  694bfa:       8b 53 40                mov    0x40(%rbx),%edx
    0.00 :	  694bfd:       81 fa 0f 27 00 00       cmp    $0x270f,%edx
    0.00 :	  694c03:       76 d8                   jbe    694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c05:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  694c09:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  694c0d:       74 ce                   je     694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c0f:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  694c13:       74 c8                   je     694bdd <PredicateLockTuple+0x3d>
         :	                return;
         :
         :	        /*
         :	         * If it's a heap tuple, return if this xact wrote it.
         :	         */
         :	        if (relation->rd_index == NULL)
    0.00 :	  694c15:       48 83 bb a0 00 00 00    cmpq   $0x0,0xa0(%rbx)
    0.00 :	  694c1c:       00 
    0.00 :	  694c1d:       0f 84 85 00 00 00       je     694ca8 <PredicateLockTuple+0x108>
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c23:       8b 43 04                mov    0x4(%rbx),%eax
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c26:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  694c2a:       48 8b 3d 9f 9a 4e 00    mov    0x4e9a9f(%rip),%rdi        # b7e6d0 <LocalPredicateLockHash>
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c31:       89 55 d4                mov    %edx,-0x2c(%rbp)
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c34:       31 c9                   xor    %ecx,%ecx
    0.00 :	  694c36:       31 d2                   xor    %edx,%edx
    0.00 :	  694c38:       4c 89 ee                mov    %r13,%rsi
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c3b:       c7 45 d8 ff ff ff ff    movl   $0xffffffff,-0x28(%rbp)
    0.00 :	  694c42:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%rbp)
    0.00 :	  694c49:       89 45 d0                mov    %eax,-0x30(%rbp)
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c4c:       e8 4f fa 0e 00          callq  7846a0 <hash_search>
         :	                                                                                          targettag,
         :	                                                                                          HASH_FIND, NULL);
         :
         :	        if (!lock)
    0.00 :	  694c51:       48 85 c0                test   %rax,%rax
    0.00 :	  694c54:       74 06                   je     694c5c <PredicateLockTuple+0xbc>
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
         :	                                                                                relation->rd_node.dbNode,
         :	                                                                                relation->rd_id);
         :	        if (PredicateLockExists(&tag))
    0.00 :	  694c56:       80 78 10 00             cmpb   $0x0,0x10(%rax)
    0.00 :	  694c5a:       75 81                   jne    694bdd <PredicateLockTuple+0x3d>
         :	                return;
         :
         :	        tid = &(tuple->t_self);
         :	        SET_PREDICATELOCKTARGETTAG_TUPLE(tag,
    0.00 :	  694c5c:       8b 43 04                mov    0x4(%rbx),%eax
    0.00 :	  694c5f:       41 0f b7 54 24 06       movzwl 0x6(%r12),%edx
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
    0.00 :	  694c65:       4c 89 ef                mov    %r13,%rdi
         :	                                                                                relation->rd_id);
         :	        if (PredicateLockExists(&tag))
         :	                return;
         :
         :	        tid = &(tuple->t_self);
         :	        SET_PREDICATELOCKTARGETTAG_TUPLE(tag,
    0.00 :	  694c68:       89 45 d0                mov    %eax,-0x30(%rbp)
    0.00 :	  694c6b:       8b 43 40                mov    0x40(%rbx),%eax
    0.00 :	  694c6e:       89 45 d4                mov    %eax,-0x2c(%rbp)
    0.00 :	  694c71:       41 0f b7 44 24 04       movzwl 0x4(%r12),%eax
    0.00 :	  694c77:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  694c7a:       09 d0                   or     %edx,%eax
    0.00 :	  694c7c:       89 45 d8                mov    %eax,-0x28(%rbp)
    0.00 :	  694c7f:       41 0f b7 44 24 08       movzwl 0x8(%r12),%eax
    0.00 :	  694c85:       89 45 dc                mov    %eax,-0x24(%rbp)
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
    0.00 :	  694c88:       e8 a3 d3 ff ff          callq  692030 <PredicateLockAcquire>
    0.00 :	  694c8d:       e9 4b ff ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c92:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694c98:       31 ff                   xor    %edi,%edi
    0.00 :	  694c9a:       e8 51 dc ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694c9f:       90                      nop
    0.00 :	  694ca0:       e9 38 ff ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694ca5:       0f 1f 00                nopl   (%rax)
         :	         */
         :	        if (relation->rd_index == NULL)
         :	        {
         :	                TransactionId myxid;
         :
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694ca8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
    0.00 :	  694cad:       41 bd 02 00 00 00       mov    $0x2,%r13d
    0.00 :	  694cb3:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694cb7:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  694cbc:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694cc1:       74 03                   je     694cc6 <PredicateLockTuple+0x126>
    0.00 :	  694cc3:       44 8b 2a                mov    (%rdx),%r13d
         :
         :	                myxid = GetTopTransactionIdIfAny();
    0.00 :	  694cc6:       e8 b5 be e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
         :	                if (TransactionIdIsValid(myxid))
    0.00 :	  694ccb:       85 c0                   test   %eax,%eax
         :	        {
         :	                TransactionId myxid;
         :
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
         :
         :	                myxid = GetTopTransactionIdIfAny();
    0.00 :	  694ccd:       41 89 c6                mov    %eax,%r14d
         :	                if (TransactionIdIsValid(myxid))
    0.00 :	  694cd0:       75 0e                   jne    694ce0 <PredicateLockTuple+0x140>
         :	                                TransactionId xid = SubTransGetTopmostTransaction(targetxmin);
         :
         :	                                if (TransactionIdEquals(xid, myxid))
         :	                                {
         :	                                        /* We wrote it; we already have a write lock. */
         :	                                        return;
    0.00 :	  694cd2:       8b 53 40                mov    0x40(%rbx),%edx
    0.00 :	  694cd5:       e9 49 ff ff ff          jmpq   694c23 <PredicateLockTuple+0x83>
    0.00 :	  694cda:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
         :
         :	                myxid = GetTopTransactionIdIfAny();
         :	                if (TransactionIdIsValid(myxid))
         :	                {
         :	                        if (TransactionIdFollowsOrEquals(targetxmin, TransactionXmin))
    0.00 :	  694ce0:       8b 35 72 da 4d 00       mov    0x4dda72(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694ce6:       44 89 ef                mov    %r13d,%edi
    0.00 :	  694ce9:       e8 82 b3 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  694cee:       84 c0                   test   %al,%al
    0.00 :	  694cf0:       74 e0                   je     694cd2 <PredicateLockTuple+0x132>
         :	                        {
         :	                                TransactionId xid = SubTransGetTopmostTransaction(targetxmin);
    0.00 :	  694cf2:       44 89 ef                mov    %r13d,%edi
    0.00 :	  694cf5:       e8 f6 1b e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :
         :	                                if (TransactionIdEquals(xid, myxid))
    0.00 :	  694cfa:       41 39 c6                cmp    %eax,%r14d
    0.00 :	  694cfd:       75 d3                   jne    694cd2 <PredicateLockTuple+0x132>
    0.00 :	  694cff:       90                      nop
    0.00 :	  694d00:       e9 d8 fe ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   26.32 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
   21.05 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
   15.79 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000642780 <pgstat_init_function_usage>:
         :	 * Called by the executor before invoking a function.
         :	 */
         :	void
         :	pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
         :	                                                   PgStat_FunctionCallUsage *fcu)
         :	{
    0.00 :	  642780:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    5.26 :	  642781:       48 89 e5                mov    %rsp,%rbp
   10.53 :	  642784:       41 54                   push   %r12
   10.53 :	  642786:       49 89 fc                mov    %rdi,%r12
    0.00 :	  642789:       53                      push   %rbx
   15.79 :	  64278a:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  64278d:       48 83 ec 70             sub    $0x70,%rsp
         :	        PgStat_BackendFunctionEntry *htabent;
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
    0.00 :	  642791:       48 8b 17                mov    (%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
    5.26 :	  642794:       0f b6 42 10             movzbl 0x10(%rdx),%eax
    5.26 :	  642798:       3b 05 06 94 53 00       cmp    0x539406(%rip),%eax        # b7bba4 <pgstat_track_functions>
    0.00 :	  64279e:       0f 8d ac 00 00 00       jge    642850 <pgstat_init_function_usage+0xd0>
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
         :	                return;
         :	        }
         :
         :	        if (!pgStatFunctions)
    0.00 :	  6427a4:       48 83 3d 04 95 53 00    cmpq   $0x0,0x539504(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427ab:       00 
    0.00 :	  6427ac:       0f 84 de 00 00 00       je     642890 <pgstat_init_function_usage+0x110>
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427b2:       48 8b 3d f7 94 53 00    mov    0x5394f7(%rip),%rdi        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427b9:       48 8d 72 08             lea    0x8(%rdx),%rsi
    0.00 :	  6427bd:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  6427c1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6427c6:       e8 d5 1e 14 00          callq  7846a0 <hash_search>
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427cb:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427cf:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6427d2:       48 8d 40 08             lea    0x8(%rax),%rax
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427d6:       74 40                   je     642818 <pgstat_init_function_usage+0x98>
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
    0.00 :	  6427d8:       48 89 03                mov    %rax,(%rbx)
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427db:       48 8b 42 10             mov    0x10(%rdx),%rax
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  6427df:       48 8d 7b 28             lea    0x28(%rbx),%rdi
    0.00 :	  6427e3:       31 f6                   xor    %esi,%esi
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427e5:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  6427e9:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  6427ed:       48 89 43 10             mov    %rax,0x10(%rbx)
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
    0.00 :	  6427f1:       48 8b 05 28 97 53 00    mov    0x539728(%rip),%rax        # b7bf20 <total_func_time>
    0.00 :	  6427f8:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  6427fc:       48 8b 05 25 97 53 00    mov    0x539725(%rip),%rax        # b7bf28 <total_func_time+0x8>
    0.00 :	  642803:       48 89 43 20             mov    %rax,0x20(%rbx)
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  642807:       e8 b4 6d e2 ff          callq  4695c0 <gettimeofday@plt>
         :	}
    0.00 :	  64280c:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  642810:       5b                      pop    %rbx
    0.00 :	  642811:       41 5c                   pop    %r12
    0.00 :	  642813:       c9                      leaveq 
    0.00 :	  642814:       c3                      retq   
    0.00 :	  642815:       0f 1f 00                nopl   (%rax)
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642818:       a8 07                   test   $0x7,%al
    0.00 :	  64281a:       75 44                   jne    642860 <pgstat_init_function_usage+0xe0>
    0.00 :	  64281c:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642823:       00 
    0.00 :	  642824:       48 c7 42 10 00 00 00    movq   $0x0,0x10(%rdx)
    0.00 :	  64282b:       00 
    0.00 :	  64282c:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  642833:       00 
    0.00 :	  642834:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	  64283b:       00 
    0.00 :	  64283c:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	  642843:       00 
    0.00 :	  642844:       eb 92                   jmp    6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  642846:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64284d:       00 00 00 
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
         :	        {
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
    0.00 :	  642850:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
   26.32 :	  642857:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  64285b:       5b                      pop    %rbx
    0.00 :	  64285c:       41 5c                   pop    %r12
    0.00 :	  64285e:       c9                      leaveq 
   21.05 :	  64285f:       c3                      retq   
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642860:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642867:       00 
    0.00 :	  642868:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  64286f:       00 
    0.00 :	  642870:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  642877:       00 
    0.00 :	  642878:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  64287f:       00 
    0.00 :	  642880:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  642887:       00 
    0.00 :	  642888:       e9 4b ff ff ff          jmpq   6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  64288d:       0f 1f 00                nopl   (%rax)
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  642890:       48 8d 55 80             lea    -0x80(%rbp),%rdx
    0.00 :	  642894:       31 c0                   xor    %eax,%eax
    0.00 :	  642896:       b9 0d 00 00 00          mov    $0xd,%ecx
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  64289b:       be 00 02 00 00          mov    $0x200,%esi
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  6428a0:       48 89 d7                mov    %rdx,%rdi
    0.00 :	  6428a3:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                hash_ctl.keysize = sizeof(Oid);
    0.00 :	  6428a6:       48 c7 45 a8 04 00 00    movq   $0x4,-0x58(%rbp)
    0.00 :	  6428ad:       00 
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
    0.00 :	  6428ae:       48 c7 45 b0 30 00 00    movq   $0x30,-0x50(%rbp)
    0.00 :	  6428b5:       00 
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428b6:       bf 1c f0 89 00          mov    $0x89f01c,%edi
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
    0.00 :	  6428bb:       48 c7 45 b8 50 4f 78    movq   $0x784f50,-0x48(%rbp)
    0.00 :	  6428c2:       00 
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428c3:       b1 30                   mov    $0x30,%cl
    0.00 :	  6428c5:       e8 e6 1f 14 00          callq  7848b0 <hash_create>
    0.00 :	  6428ca:       48 89 05 df 93 53 00    mov    %rax,0x5393df(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6428d1:       49 8b 14 24             mov    (%r12),%rdx
    0.00 :	  6428d5:       e9 d8 fe ff ff          jmpq   6427b2 <pgstat_init_function_usage+0x32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   27.78 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1517
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5600 <XidInMVCCSnapshot>:
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   16.67 :	  7a5600:       55                      push   %rbp
    5.56 :	  7a5601:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5604:       41 54                   push   %r12
    5.56 :	  7a5606:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7a5609:       53                      push   %rbx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560a:       8b 76 08                mov    0x8(%rsi),%esi
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
    0.00 :	  7a560d:       89 fb                   mov    %edi,%ebx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
   16.67 :	  7a560f:       e8 cc a9 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    5.56 :	  7a5614:       84 c0                   test   %al,%al
    0.00 :	  7a5616:       74 08                   je     7a5620 <XidInMVCCSnapshot+0x20>
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
   11.11 :	  7a5618:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1517
    5.56 :	  7a5619:       31 c0                   xor    %eax,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a561b:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
    5.56 :	  7a561d:       c9                      leaveq 
   27.78 :	  7a561e:       c3                      retq   
    0.00 :	  7a561f:       90                      nop
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                return false;
         :	        /* Any xid >= xmax is in-progress */
         :	        if (TransactionIdFollowsOrEquals(xid, snapshot->xmax))
    0.00 :	  7a5620:       41 8b 74 24 0c          mov    0xc(%r12),%esi
    0.00 :	  7a5625:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5627:       e8 44 aa d1 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  7a562c:       84 c0                   test   %al,%al
    0.00 :	  7a562e:       0f 85 7c 00 00 00       jne    7a56b0 <XidInMVCCSnapshot+0xb0>
         :
         :	        /*
         :	         * Snapshot information is stored slightly differently in snapshots taken
         :	         * during recovery.
         :	         */
         :	        if (!snapshot->takenDuringRecovery)
    0.00 :	  7a5634:       41 80 7c 24 29 00       cmpb   $0x0,0x29(%r12)
    0.00 :	  7a563a:       0f 85 80 00 00 00       jne    7a56c0 <XidInMVCCSnapshot+0xc0>
         :	                 * check things is just to compare the given XID against both subxact
         :	                 * XIDs and top-level XIDs.  If the snapshot overflowed, we have to
         :	                 * use pg_subtrans to convert a subxact XID to its parent XID, but
         :	                 * then we need only look at top-level XIDs not subxacts.
         :	                 */
         :	                if (!snapshot->suboverflowed)
    0.00 :	  7a5640:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a5646:       0f 85 b4 00 00 00       jne    7a5700 <XidInMVCCSnapshot+0x100>
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a564c:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a5651:       85 f6                   test   %esi,%esi
    0.00 :	  7a5653:       7e 25                   jle    7a567a <XidInMVCCSnapshot+0x7a>
         :	                        {
         :	                                if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a5655:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a565a:       31 d2                   xor    %edx,%edx
    0.00 :	  7a565c:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a565e:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a5661:       75 10                   jne    7a5673 <XidInMVCCSnapshot+0x73>
    0.00 :	  7a5663:       eb 4b                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5665:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a5668:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a566b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a566f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a5671:       74 3d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                if (!snapshot->suboverflowed)
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5673:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a5676:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a5678:       7c ee                   jl     7a5668 <XidInMVCCSnapshot+0x68>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a567a:       41 8b 74 24 18          mov    0x18(%r12),%esi
    0.00 :	  7a567f:       85 f6                   test   %esi,%esi
    0.00 :	  7a5681:       74 95                   je     7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->xip[i]))
    0.00 :	  7a5683:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  7a5688:       31 d2                   xor    %edx,%edx
    0.00 :	  7a568a:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a568c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a568f:       75 12                   jne    7a56a3 <XidInMVCCSnapshot+0xa3>
    0.00 :	  7a5691:       eb 1d                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5693:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a5698:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a569b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a569f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56a1:       74 0d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a56a3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56a6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56a8:       72 ee                   jb     7a5698 <XidInMVCCSnapshot+0x98>
    0.00 :	  7a56aa:       e9 69 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56af:       90                      nop
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b0:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56b1:       b8 01 00 00 00          mov    $0x1,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b6:       41 5c                   pop    %r12
    0.00 :	  7a56b8:       c9                      leaveq 
    0.00 :	  7a56b9:       c3                      retq   
    0.00 :	  7a56ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * far the bigger array, and we mostly don't know which xids are
         :	                 * top-level and which are subxacts. The xip array is empty.
         :	                 *
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
    0.00 :	  7a56c0:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a56c6:       75 60                   jne    7a5728 <XidInMVCCSnapshot+0x128>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56c8:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a56cd:       85 f6                   test   %esi,%esi
    0.00 :	  7a56cf:       0f 8e 43 ff ff ff       jle    7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a56d5:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a56da:       31 d2                   xor    %edx,%edx
    0.00 :	  7a56dc:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a56de:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a56e1:       75 10                   jne    7a56f3 <XidInMVCCSnapshot+0xf3>
    0.00 :	  7a56e3:       eb cb                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a56e5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a56e8:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a56eb:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a56ef:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56f1:       74 bd                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56f3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56f6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56f8:       7c ee                   jl     7a56e8 <XidInMVCCSnapshot+0xe8>
    0.00 :	  7a56fa:       e9 19 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56ff:       90                      nop
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5700:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5702:       e8 e9 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5707:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a570c:       89 c7                   mov    %eax,%edi
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a570e:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5710:       e8 cb a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5715:       84 c0                   test   %al,%al
    0.00 :	  7a5717:       0f 84 5d ff ff ff       je     7a567a <XidInMVCCSnapshot+0x7a>
    0.00 :	  7a571d:       e9 f6 fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a5722:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5728:       89 df                   mov    %ebx,%edi
    0.00 :	  7a572a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5730:       e8 bb 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5735:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a573a:       89 c7                   mov    %eax,%edi
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a573c:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a573e:       e8 9d a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5743:       84 c0                   test   %al,%al
    0.00 :	  7a5745:       74 81                   je     7a56c8 <XidInMVCCSnapshot+0xc8>
    0.00 :	  7a5747:       e9 cc fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.53 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490660 <hash_uint32>:
         :	        register uint32 a,
         :	                                b,
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
    0.00 :	  490660:       81 ef ac a9 8c 61       sub    $0x618ca9ac,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490666:       55                      push   %rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490667:       81 f7 64 d8 6a 2a       xor    $0x2a6ad864,%edi
    0.00 :	  49066d:       81 ef 53 21 c3 56       sub    $0x56c32153,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490673:       48 89 e5                mov    %rsp,%rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490676:       89 fe                   mov    %edi,%esi
    5.88 :	  490678:       89 f8                   mov    %edi,%eax
    0.00 :	  49067a:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49067d:       81 f6 54 56 73 9e       xor    $0x9e735654,%esi
    0.00 :	  490683:       29 c6                   sub    %eax,%esi
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490685:       c9                      leaveq 
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490686:       89 f0                   mov    %esi,%eax
    0.00 :	  490688:       89 f2                   mov    %esi,%edx
    0.00 :	  49068a:       c1 ca 10                ror    $0x10,%edx
   11.76 :	  49068d:       35 64 d8 6a 2a          xor    $0x2a6ad864,%eax
    0.00 :	  490692:       29 d0                   sub    %edx,%eax
    0.00 :	  490694:       89 c2                   mov    %eax,%edx
   23.53 :	  490696:       89 c1                   mov    %eax,%ecx
    0.00 :	  490698:       c1 c9 1c                ror    $0x1c,%ecx
   11.76 :	  49069b:       31 fa                   xor    %edi,%edx
    0.00 :	  49069d:       29 ca                   sub    %ecx,%edx
   11.76 :	  49069f:       89 d1                   mov    %edx,%ecx
    0.00 :	  4906a1:       c1 ca 12                ror    $0x12,%edx
   17.65 :	  4906a4:       31 f1                   xor    %esi,%ecx
    0.00 :	  4906a6:       29 d1                   sub    %edx,%ecx
    5.88 :	  4906a8:       31 c8                   xor    %ecx,%eax
    5.88 :	  4906aa:       c1 c9 08                ror    $0x8,%ecx
    5.88 :	  4906ad:       29 c8                   sub    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   58.82 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:152
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:85
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:152
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049f650 <heap_page_prune_opt>:
         :	 * OldestXmin is the cutoff XID used to distinguish whether tuples are DEAD
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
    0.00 :	  49f650:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    5.88 :	  49f651:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  49f654:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  49f658:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  49f65c:       41 89 f4                mov    %esi,%r12d
    0.00 :	  49f65f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    5.88 :	  49f663:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  49f667:       49 89 fe                mov    %rdi,%r14
    0.00 :	  49f66a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  49f66e:       48 83 ec 40             sub    $0x40,%rsp
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f672:       85 f6                   test   %esi,%esi
    0.00 :	  49f674:       0f 88 fe 00 00 00       js     49f778 <heap_page_prune_opt+0x128>
    0.00 :	  49f67a:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  49f67f:       48 63 d8                movslq %eax,%rbx
    0.00 :	  49f682:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  49f686:       48 03 1d 6b 04 72 00    add    0x72046b(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        /*
         :	         * We can't write WAL in recovery mode, so there's no point trying to
         :	         * clean the page. The master will likely issue a cleaning WAL record soon
         :	         * anyway, so this is no particular loss.
         :	         */
         :	        if (RecoveryInProgress())
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:85
    5.88 :	  49f68d:       e8 2e de 02 00          callq  4cd4c0 <RecoveryInProgress>
    0.00 :	  49f692:       84 c0                   test   %al,%al
    0.00 :	  49f694:       74 1a                   je     49f6b0 <heap_page_prune_opt+0x60>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
         :	        }
         :	}
    0.00 :	  49f696:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  49f69a:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  49f69e:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  49f6a2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  49f6a6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:152
    5.88 :	  49f6aa:       c9                      leaveq 
   11.76 :	  49f6ab:       c3                      retq   
    0.00 :	  49f6ac:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f6b0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f6b3:       e8 28 37 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f6b8:       84 c0                   test   %al,%al
    0.00 :	  49f6ba:       0f 84 d0 00 00 00       je     49f790 <heap_page_prune_opt+0x140>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
    0.00 :	  49f6c0:       44 8b 3d 39 b2 71 00    mov    0x71b239(%rip),%r15d        # bba900 <RecentGlobalXmin>
         :	         * Let's see if we really need pruning.
         :	         *
         :	         * Forget it if page is not hinted to contain something prunable that's
         :	         * older than OldestXmin.
         :	         */
         :	        if (!PageIsPrunable(page, OldestXmin))
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
    5.88 :	  49f6c7:       8b 7b 14                mov    0x14(%rbx),%edi
   58.82 :	  49f6ca:       85 ff                   test   %edi,%edi
    0.00 :	  49f6cc:       74 c8                   je     49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f6ce:       44 89 fe                mov    %r15d,%esi
    0.00 :	  49f6d1:       e8 0a 09 02 00          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  49f6d6:       84 c0                   test   %al,%al
    0.00 :	  49f6d8:       74 bc                   je     49f696 <heap_page_prune_opt+0x46>
         :	         * unlikely to be *seriously* wrong, though, since reading either pd_lower
         :	         * or pd_upper is probably atomic.  Avoiding taking a lock seems more
         :	         * important than sometimes getting a wrong answer in what is after all
         :	         * just a heuristic estimate.
         :	         */
         :	        minfree = RelationGetTargetPageFreeSpace(relation,
    0.00 :	  49f6da:       49 8b 96 98 00 00 00    mov    0x98(%r14),%rdx
    0.00 :	  49f6e1:       41 bd 33 03 00 00       mov    $0x333,%r13d
    0.00 :	  49f6e7:       48 85 d2                test   %rdx,%rdx
    0.00 :	  49f6ea:       74 2f                   je     49f71b <heap_page_prune_opt+0xcb>
    0.00 :	  49f6ec:       b9 64 00 00 00          mov    $0x64,%ecx
    0.00 :	  49f6f1:       2b 4a 04                sub    0x4(%rdx),%ecx
    0.00 :	  49f6f4:       ba 1f 85 eb 51          mov    $0x51eb851f,%edx
    0.00 :	  49f6f9:       c1 e1 0d                shl    $0xd,%ecx
    0.00 :	  49f6fc:       89 c8                   mov    %ecx,%eax
    0.00 :	  49f6fe:       c1 f9 1f                sar    $0x1f,%ecx
    0.00 :	  49f701:       f7 ea                   imul   %edx
    0.00 :	  49f703:       b8 33 03 00 00          mov    $0x333,%eax
    0.00 :	  49f708:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  49f70b:       29 ca                   sub    %ecx,%edx
    0.00 :	  49f70d:       4c 63 ea                movslq %edx,%r13
    0.00 :	  49f710:       49 81 fd 33 03 00 00    cmp    $0x333,%r13
    0.00 :	  49f717:       4c 0f 42 e8             cmovb  %rax,%r13
         :	                                                                                         HEAP_DEFAULT_FILLFACTOR);
         :	        minfree = Max(minfree, BLCKSZ / 10);
         :
         :	        if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f71b:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f71f:       75 11                   jne    49f732 <heap_page_prune_opt+0xe2>
    0.00 :	  49f721:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f724:       e8 37 56 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f729:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f72c:       0f 83 64 ff ff ff       jae    49f696 <heap_page_prune_opt+0x46>
         :	        {
         :	                /* OK, try to get exclusive buffer lock */
         :	                if (!ConditionalLockBufferForCleanup(buffer))
    0.00 :	  49f732:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f735:       e8 26 78 1d 00          callq  676f60 <ConditionalLockBufferForCleanup>
    0.00 :	  49f73a:       84 c0                   test   %al,%al
    0.00 :	  49f73c:       0f 84 54 ff ff ff       je     49f696 <heap_page_prune_opt+0x46>
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f742:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f746:       74 68                   je     49f7b0 <heap_page_prune_opt+0x160>
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f748:       4c 8d 45 d4             lea    -0x2c(%rbp),%r8
    0.00 :	  49f74c:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  49f751:       44 89 fa                mov    %r15d,%edx
    0.00 :	  49f754:       44 89 e6                mov    %r12d,%esi
    0.00 :	  49f757:       4c 89 f7                mov    %r14,%rdi
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
    0.00 :	  49f75a:       c7 45 d4 00 00 00 00    movl   $0x0,-0x2c(%rbp)
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f761:       e8 5a f4 ff ff          callq  49ebc0 <heap_page_prune>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  49f766:       31 f6                   xor    %esi,%esi
    0.00 :	  49f768:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f76b:       e8 a0 4f 1d 00          callq  674710 <LockBuffer>
    0.00 :	  49f770:       e9 21 ff ff ff          jmpq   49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f775:       0f 1f 00                nopl   (%rax)
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f778:       89 f0                   mov    %esi,%eax
    0.00 :	  49f77a:       48 8b 15 97 d9 6d 00    mov    0x6dd997(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49f781:       f7 d0                   not    %eax
    0.00 :	  49f783:       48 98                   cltq   
    0.00 :	  49f785:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  49f789:       e9 ff fe ff ff          jmpq   49f68d <heap_page_prune_opt+0x3d>
    0.00 :	  49f78e:       66 90                   xchg   %ax,%ax
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f790:       83 3d c5 99 6d 00 02    cmpl   $0x2,0x6d99c5(%rip)        # b7915c <wal_level>
    0.00 :	  49f797:       7e 0a                   jle    49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f799:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  49f79d:       80 78 6e 70             cmpb   $0x70,0x6e(%rax)
    0.00 :	  49f7a1:       74 25                   je     49f7c8 <heap_page_prune_opt+0x178>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
         :	        else
         :	                OldestXmin = RecentGlobalDataXmin;
    0.00 :	  49f7a3:       44 8b 3d 5a b1 71 00    mov    0x71b15a(%rip),%r15d        # bba904 <RecentGlobalDataXmin>
    0.00 :	  49f7aa:       e9 18 ff ff ff          jmpq   49f6c7 <heap_page_prune_opt+0x77>
    0.00 :	  49f7af:       90                      nop
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f7b0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f7b3:       e8 a8 55 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f7b8:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f7bb:       73 a9                   jae    49f766 <heap_page_prune_opt+0x116>
    0.00 :	  49f7bd:       0f 1f 00                nopl   (%rax)
    0.00 :	  49f7c0:       eb 86                   jmp    49f748 <heap_page_prune_opt+0xf8>
    0.00 :	  49f7c2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f7c8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f7cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  49f7d0:       e8 0b 36 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f7d5:       84 c0                   test   %al,%al
    0.00 :	  49f7d7:       0f 85 e3 fe ff ff       jne    49f6c0 <heap_page_prune_opt+0x70>
    0.00 :	  49f7dd:       49 8b 86 98 00 00 00    mov    0x98(%r14),%rax
    0.00 :	  49f7e4:       48 85 c0                test   %rax,%rax
    0.00 :	  49f7e7:       74 ba                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7e9:       80 78 48 00             cmpb   $0x0,0x48(%rax)
    0.00 :	  49f7ed:       74 b4                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7ef:       90                      nop
    0.00 :	  49f7f0:       e9 cb fe ff ff          jmpq   49f6c0 <heap_page_prune_opt+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   58.82 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   23.53 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:602
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068eec0 <LWLockAttemptLock>:
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:602
    5.88 :	  68eec0:       55                      push   %rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec1:       48 85 d2                test   %rdx,%rdx
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec4:       48 89 e5                mov    %rsp,%rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec7:       74 03                   je     68eecc <LWLockAttemptLock+0xc>
         :	                *potentially_spurious = false;
    0.00 :	  68eec9:       c6 02 00                movb   $0x0,(%rdx)
         :
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68eecc:       85 f6                   test   %esi,%esi
    0.00 :	  68eece:       75 28                   jne    68eef8 <LWLockAttemptLock+0x38>
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68eed0:       8b 47 04                mov    0x4(%rdi),%eax
         :	                 * First check whether the variable is free without a atomic
         :	                 * operation; it's often quite a bit cheaper for contended
         :	                 * locks. Doing so can cause a superflous shared-exclusive cacheline
         :	                 * transition, but benchmarks show that it's still worth doing so.
         :	                 */
         :	                expected = pg_atomic_read_u32(&lock->lockcount);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
   23.53 :	  68eed3:       48 8d 57 04             lea    0x4(%rdi),%rdx
         :
         :	                if (expected != 0)
    0.00 :	  68eed7:       85 c0                   test   %eax,%eax
    0.00 :	  68eed9:       75 65                   jne    68ef40 <LWLockAttemptLock+0x80>
         :
         :	        /*
         :	         * Perform cmpxchg and use the zero flag which it implicitly sets when
         :	         * equal to measure the success.
         :	         */
         :	        __asm__ __volatile__(
    0.00 :	  68eedb:       b9 00 00 00 40          mov    $0x40000000,%ecx
    0.00 :	  68eee0:       89 f0                   mov    %esi,%eax
    0.00 :	  68eee2:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
   11.76 :	  68eee6:       40 0f 94 c6             sete   %sil
    0.00 :	  68eeea:       40 84 f6                test   %sil,%sil
    0.00 :	  68eeed:       0f 94 c1                sete   %cl
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68eef0:       89 c8                   mov    %ecx,%eax
    0.00 :	  68eef2:       c9                      leaveq 
    0.00 :	  68eef3:       c3                      retq   
    0.00 :	  68eef4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                /*
         :	                 * If the caller is interested in spurious locks, do an unlocked check
         :	                 * first.  This is useful if potentially spurious results have a
         :	                 * noticeable cost.
         :	                 */
         :	                if (potentially_spurious != NULL &&
    0.00 :	  68eef8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68eefb:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68eeff:       74 0e                   je     68ef0f <LWLockAttemptLock+0x4f>
    0.00 :	  68ef01:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  68ef04:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68ef08:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef0d:       77 31                   ja     68ef40 <LWLockAttemptLock+0x80>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68ef0f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68ef14:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                 * might have to back out again if it turns out somebody else has an
         :	                 * exclusive lock.
         :	                 */
         :	                oldstate = pg_atomic_fetch_add_u32(&lock->lockcount, 1);
         :
         :	                if (oldstate >= EXCLUSIVE_LOCK)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   58.82 :	  68ef18:       31 c9                   xor    %ecx,%ecx
    0.00 :	  68ef1a:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef1f:       76 cf                   jbe    68eef0 <LWLockAttemptLock+0x30>
    0.00 :	  68ef21:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68ef26:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                         * problems exist.
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
    0.00 :	  68ef2a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68ef2d:       74 11                   je     68ef40 <LWLockAttemptLock+0x80>
         :	                                *potentially_spurious = true;
    0.00 :	  68ef2f:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  68ef34:       c6 02 01                movb   $0x1,(%rdx)
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef37:       89 c8                   mov    %ecx,%eax
    0.00 :	  68ef39:       c9                      leaveq 
    0.00 :	  68ef3a:       c3                      retq   
    0.00 :	  68ef3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
         :	                                *potentially_spurious = true;
    0.00 :	  68ef40:       b9 01 00 00 00          mov    $0x1,%ecx
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef45:       c9                      leaveq 
    0.00 :	  68ef46:       89 c8                   mov    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.53 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:824
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:773
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:869
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784050 <hash_search_with_hash_value>:
         :	hash_search_with_hash_value(HTAB *hashp,
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
    0.00 :	  784050:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:824
    5.88 :	  784051:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  784054:       41 57                   push   %r15
    0.00 :	  784056:       41 89 d7                mov    %edx,%r15d
    0.00 :	  784059:       41 56                   push   %r14
    0.00 :	  78405b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  78405e:       41 55                   push   %r13
    0.00 :	  784060:       41 54                   push   %r12
    0.00 :	  784062:       53                      push   %rbx
    0.00 :	  784063:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  784067:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  78406d:       48 89 75 80             mov    %rsi,-0x80(%rbp)
    0.00 :	  784071:       4c 89 85 70 ff ff ff    mov    %r8,-0x90(%rbp)
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784078:       48 8b 07                mov    (%rdi),%rax
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  78407b:       83 f9 03                cmp    $0x3,%ecx
    0.00 :	  78407e:       0f 94 45 8f             sete   -0x71(%rbp)
    0.00 :	  784082:       83 e9 01                sub    $0x1,%ecx
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784085:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  784089:       0f 84 d9 00 00 00       je     784168 <hash_search_with_hash_value+0x118>
    0.00 :	  78408f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  784093:       0f 85 cf 00 00 00       jne    784168 <hash_search_with_hash_value+0x118>
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
         :	        *newlink = NULL;
    0.00 :	  784099:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78409c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  7840a0:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7840a4:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  7840a8:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  7840ac:       44 89 fb                mov    %r15d,%ebx
    0.00 :	  7840af:       23 5a 2c                and    0x2c(%rdx),%ebx
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7840b2:       39 f3                   cmp    %esi,%ebx
    0.00 :	  7840b4:       76 03                   jbe    7840b9 <hash_search_with_hash_value+0x69>
         :	                bucket = bucket & hctl->low_mask;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:773
    5.88 :	  7840b6:       23 5a 30                and    0x30(%rdx),%ebx
         :	        bucket = calc_bucket(hctl, hashvalue);
         :
         :	        segment_num = bucket >> hashp->sshift;
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
    0.00 :	  7840b9:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840bb:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	  7840bf:       d3 e8                   shr    %cl,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:869
    5.88 :	  7840c1:       89 c0                   mov    %eax,%eax
    0.00 :	  7840c3:       4c 8b 24 c2             mov    (%rdx,%rax,8),%r12
         :
         :	        if (segp == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
   11.76 :	  7840c7:       4d 85 e4                test   %r12,%r12
    0.00 :	  7840ca:       0f 84 b7 02 00 00       je     784387 <hash_search_with_hash_value+0x337>
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840d2:       44 21 e8                and    %r13d,%eax
         :	        currBucket = *prevBucketPtr;
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
    0.00 :	  7840d5:       4d 8b 6e 18             mov    0x18(%r14),%r13
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d9:       4d 8d 24 c4             lea    (%r12,%rax,8),%r12
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
    5.88 :	  7840dd:       49 8b 46 48             mov    0x48(%r14),%rax
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
         :	        currBucket = *prevBucketPtr;
    0.00 :	  7840e1:       49 8b 1c 24             mov    (%r12),%rbx
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
   17.65 :	  7840e5:       48 89 45 98             mov    %rax,-0x68(%rbp)
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840e9:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840ec:       75 0d                   jne    7840fb <hash_search_with_hash_value+0xab>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    5.88 :	  7840ee:       eb 28                   jmp    784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
         :	                        match(ELEMENTKEY(currBucket), keyPtr, keysize) == 0)
         :	                        break;
         :	                prevBucketPtr = &(currBucket->link);
    0.00 :	  7840f0:       49 89 dc                mov    %rbx,%r12
         :	                currBucket = *prevBucketPtr;
    0.00 :	  7840f3:       48 8b 1b                mov    (%rbx),%rbx
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840f6:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840f9:       74 1d                   je     784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
    0.00 :	  7840fb:       44 39 7b 08             cmp    %r15d,0x8(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
    5.88 :	  7840ff:       90                      nop
    0.00 :	  784100:       75 ee                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784102:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  784106:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  78410a:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78410e:       41 ff d5                callq  *%r13
    0.00 :	  784111:       85 c0                   test   %eax,%eax
    0.00 :	  784113:       75 db                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784115:       0f 1f 00                nopl   (%rax)
         :	                hash_collisions++;
         :	                hctl->collisions++;
         :	#endif
         :	        }
         :
         :	        if (foundPtr)
    0.00 :	  784118:       48 83 bd 70 ff ff ff    cmpq   $0x0,-0x90(%rbp)
    0.00 :	  78411f:       00 
    0.00 :	  784120:       74 0d                   je     78412f <hash_search_with_hash_value+0xdf>
         :	                *foundPtr = (bool) (currBucket != NULL);
    0.00 :	  784122:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  784129:       48 85 db                test   %rbx,%rbx
    0.00 :	  78412c:       0f 95 02                setne  (%rdx)
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  78412f:       83 bd 7c ff ff ff 01    cmpl   $0x1,-0x84(%rbp)
    0.00 :	  784136:       0f 84 5c 01 00 00       je     784298 <hash_search_with_hash_value+0x248>
    0.00 :	  78413c:       0f 83 ee 00 00 00       jae    784230 <hash_search_with_hash_value+0x1e0>
         :	        {
         :	                case HASH_FIND:
         :	                        if (currBucket != NULL)
    0.00 :	  784142:       48 85 db                test   %rbx,%rbx
    0.00 :	  784145:       0f 84 35 02 00 00       je     784380 <hash_search_with_hash_value+0x330>
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
    0.00 :	  78414b:       48 83 c3 10             add    $0x10,%rbx
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  78414f:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  784153:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784156:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
    5.88 :	  784157:       41 5c                   pop    %r12
    0.00 :	  784159:       41 5d                   pop    %r13
    0.00 :	  78415b:       41 5e                   pop    %r14
    0.00 :	  78415d:       41 5f                   pop    %r15
    0.00 :	  78415f:       c9                      leaveq 
    0.00 :	  784160:       c3                      retq   
    0.00 :	  784161:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784168:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78416c:       48 83 7a 48 00          cmpq   $0x0,0x48(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    5.88 :	  784171:       0f 85 09 01 00 00       jne    784280 <hash_search_with_hash_value+0x230>
    0.00 :	  784177:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  78417c:       0f 85 e6 01 00 00       jne    784368 <hash_search_with_hash_value+0x318>
    0.00 :	  784182:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784186:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78418a:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78418d:       8d 56 01                lea    0x1(%rsi),%edx
    0.00 :	  784190:       41 89 f0                mov    %esi,%r8d
    0.00 :	  784193:       89 55 d4                mov    %edx,-0x2c(%rbp)
    0.00 :	  784196:       41 89 d4                mov    %edx,%r12d
    0.00 :	  784199:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	  78419d:       48 89 d0                mov    %rdx,%rax
    0.00 :	  7841a0:       48 c1 fa 3f             sar    $0x3f,%rdx
    0.00 :	  7841a4:       49 f7 fc                idiv   %r12
   23.53 :	  7841a7:       48 3b 43 50             cmp    0x50(%rbx),%rax
    0.00 :	  7841ab:       0f 8c eb fe ff ff       jl     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841b1:       8b 3d 09 5a 43 00       mov    0x435a09(%rip),%edi        # bb9bc0 <num_seq_scans>
    0.00 :	  7841b7:       85 ff                   test   %edi,%edi
    0.00 :	  7841b9:       7e 2c                   jle    7841e7 <hash_search_with_hash_value+0x197>
         :	        {
         :	                if (seq_scan_tables[i] == hashp)
    0.00 :	  7841bb:       31 d2                   xor    %edx,%edx
    0.00 :	  7841bd:       4c 3b 35 1c 5a 43 00    cmp    0x435a1c(%rip),%r14        # bb9be0 <seq_scan_tables>
    0.00 :	  7841c4:       b9 e8 9b bb 00          mov    $0xbb9be8,%ecx
    0.00 :	  7841c9:       75 15                   jne    7841e0 <hash_search_with_hash_value+0x190>
    0.00 :	  7841cb:       e9 cc fe ff ff          jmpq   78409c <hash_search_with_hash_value+0x4c>
    0.00 :	  7841d0:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  7841d3:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  7841d7:       49 39 c6                cmp    %rax,%r14
    0.00 :	  7841da:       0f 84 bc fe ff ff       je     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841e0:       83 c2 01                add    $0x1,%edx
    0.00 :	  7841e3:       39 fa                   cmp    %edi,%edx
    0.00 :	  7841e5:       7c e9                   jl     7841d0 <hash_search_with_hash_value+0x180>
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841e7:       49 8b 46 50             mov    0x50(%r14),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841eb:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7841ef:       4c 89 e3                mov    %r12,%rbx
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841f2:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  7841f6:       48 8b 45 90             mov    -0x70(%rbp),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841fa:       48 d3 fb                sar    %cl,%rbx
    0.00 :	  7841fd:       48 89 5d c0             mov    %rbx,-0x40(%rbp)
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784201:       48 3b 58 20             cmp    0x20(%rax),%rbx
    0.00 :	  784205:       0f 8c 05 02 00 00       jl     784410 <hash_search_with_hash_value+0x3c0>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
    0.00 :	  78420b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  78420f:       48 8b 58 18             mov    0x18(%rax),%rbx
    0.00 :	  784213:       48 39 5d c0             cmp    %rbx,-0x40(%rbp)
    0.00 :	  784217:       0f 8c 1d 03 00 00       jl     78453a <hash_search_with_hash_value+0x4ea>
         :	        HASHSEGMENT *old_p;
         :	        long            new_dsize;
         :	        long            old_dirsize;
         :	        long            new_dirsize;
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
    0.00 :	  78421d:       48 83 78 58 ff          cmpq   $0xffffffffffffffff,0x58(%rax)
    0.00 :	  784222:       0f 84 4a 03 00 00       je     784572 <hash_search_with_hash_value+0x522>
         :	                hashp->dir = p;
         :	                hashp->hctl->dsize = new_dsize;
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784228:       44 89 c6                mov    %r8d,%esi
    0.00 :	  78422b:       e9 78 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                *foundPtr = (bool) (currBucket != NULL);
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  784230:       83 bd 7c ff ff ff 02    cmpl   $0x2,-0x84(%rbp)
    0.00 :	  784237:       0f 84 d6 00 00 00       je     784313 <hash_search_with_hash_value+0x2c3>
    0.00 :	  78423d:       83 bd 7c ff ff ff 03    cmpl   $0x3,-0x84(%rbp)
    0.00 :	  784244:       74 52                   je     784298 <hash_search_with_hash_value+0x248>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784246:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  78424b:       be df 03 00 00          mov    $0x3df,%esi
    0.00 :	  784250:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  784255:       e8 c6 71 ff ff          callq  77b420 <elog_start>
    0.00 :	  78425a:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  784260:       be f0 5a 8d 00          mov    $0x8d5af0,%esi
    0.00 :	  784265:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78426a:       31 c0                   xor    %eax,%eax
    0.00 :	  78426c:       e8 bf 6f ff ff          callq  77b230 <elog_finish>
    0.00 :	  784271:       e8 5a 52 ce ff          callq  4694d0 <abort@plt>
    0.00 :	  784276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78427d:       00 00 00 
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784280:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784284:       8b 72 28                mov    0x28(%rdx),%esi
    0.00 :	  784287:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  78428b:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78428f:       e9 14 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
    0.00 :	  784294:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        Assert(hashp->alloc != DynaHashAlloc);
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
    0.00 :	  784298:       48 85 db                test   %rbx,%rbx
    0.00 :	  78429b:       0f 85 aa fe ff ff       jne    78414b <hash_search_with_hash_value+0xfb>
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
    0.00 :	  7842a1:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  7842a6:       0f 85 a3 03 00 00       jne    78464f <hash_search_with_hash_value+0x5ff>
         :	 */
         :	static HASHBUCKET
         :	get_hash_entry(HTAB *hashp)
         :	{
         :	        /* use volatile pointer to prevent code rearrangement */
         :	        volatile HASHHDR *hctlv = hashp->hctl;
    0.00 :	  7842ac:       49 8b 1e                mov    (%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  7842af:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  7842b5:       eb 35                   jmp    7842ec <hash_search_with_hash_value+0x29c>
    0.00 :	  7842b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7842be:       00 00 
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
         :	                        SpinLockAcquire(&hctlv->mutex);
         :
         :	                /* try to get an entry from the freelist */
         :	                newElement = hctlv->freeList;
    0.00 :	  7842c0:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                if (newElement != NULL)
    0.00 :	  7842c4:       48 85 d2                test   %rdx,%rdx
    0.00 :	  7842c7:       0f 85 04 02 00 00       jne    7844d1 <hash_search_with_hash_value+0x481>
         :	                        break;
         :
         :	                /* no free elements.  allocate another chunk of buckets */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842cd:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842d1:       48 85 c0                test   %rax,%rax
    0.00 :	  7842d4:       74 03                   je     7842d9 <hash_search_with_hash_value+0x289>
         :	                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  7842d6:       c6 03 00                movb   $0x0,(%rbx)
         :
         :	                if (!element_alloc(hashp, hctlv->nelem_alloc))
    0.00 :	  7842d9:       8b 73 6c                mov    0x6c(%rbx),%esi
    0.00 :	  7842dc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  7842df:       e8 dc fb ff ff          callq  783ec0 <element_alloc>
    0.00 :	  7842e4:       84 c0                   test   %al,%al
    0.00 :	  7842e6:       0f 84 be 00 00 00       je     7843aa <hash_search_with_hash_value+0x35a>
         :	        HASHBUCKET      newElement;
         :
         :	        for (;;)
         :	        {
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842ec:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842f0:       48 85 c0                test   %rax,%rax
    0.00 :	  7842f3:       74 cb                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842f5:       44 89 e8                mov    %r13d,%eax
    0.00 :	  7842f8:       f0 86 03                lock xchg %al,(%rbx)
         :	                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  7842fb:       84 c0                   test   %al,%al
    0.00 :	  7842fd:       74 c1                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842ff:       ba 87 04 00 00          mov    $0x487,%edx
    0.00 :	  784304:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  784309:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78430c:       e8 2f bd f0 ff          callq  690040 <s_lock>
    0.00 :	  784311:       eb ad                   jmp    7842c0 <hash_search_with_hash_value+0x270>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :	                        return NULL;
         :
         :	                case HASH_REMOVE:
         :	                        if (currBucket != NULL)
    0.00 :	  784313:       48 85 db                test   %rbx,%rbx
    0.00 :	  784316:       74 68                   je     784380 <hash_search_with_hash_value+0x330>
         :	                        {
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784318:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78431c:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784320:       48 85 c0                test   %rax,%rax
    0.00 :	  784323:       74 0c                   je     784331 <hash_search_with_hash_value+0x2e1>
    0.00 :	  784325:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  78432a:       f0 86 02                lock xchg %al,(%rdx)
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  78432d:       84 c0                   test   %al,%al
    0.00 :	  78432f:       75 64                   jne    784395 <hash_search_with_hash_value+0x345>
         :
         :	                                Assert(hctlv->nentries > 0);
         :	                                hctlv->nentries--;
    0.00 :	  784331:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784335:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  784339:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78433d:       48 89 42 08             mov    %rax,0x8(%rdx)
         :
         :	                                /* remove record from hash bucket's chain. */
         :	                                *prevBucketPtr = currBucket->link;
    0.00 :	  784341:       48 8b 03                mov    (%rbx),%rax
    0.00 :	  784344:       49 89 04 24             mov    %rax,(%r12)
         :
         :	                                /* add the record to the freelist for this table.  */
         :	                                currBucket->link = hctlv->freeList;
    0.00 :	  784348:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	  78434c:       48 89 03                mov    %rax,(%rbx)
         :	                                hctlv->freeList = currBucket;
    0.00 :	  78434f:       48 89 5a 10             mov    %rbx,0x10(%rdx)
         :
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784353:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784357:       48 85 c0                test   %rax,%rax
    0.00 :	  78435a:       0f 84 eb fd ff ff       je     78414b <hash_search_with_hash_value+0xfb>
         :	                                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  784360:       c6 02 00                movb   $0x0,(%rdx)
    0.00 :	  784363:       e9 e3 fd ff ff          jmpq   78414b <hash_search_with_hash_value+0xfb>
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784368:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78436c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784370:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784374:       8b 73 28                mov    0x28(%rbx),%esi
    0.00 :	  784377:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78437b:       e9 28 fd ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784380:       31 db                   xor    %ebx,%ebx
    0.00 :	  784382:       e9 c8 fd ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
    0.00 :	  784387:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  78438a:       e8 01 f8 ff ff          callq  783b90 <hash_corrupted>
    0.00 :	  78438f:       90                      nop
    0.00 :	  784390:       e9 3b fd ff ff          jmpq   7840d0 <hash_search_with_hash_value+0x80>
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  784395:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  784399:       ba 95 03 00 00          mov    $0x395,%edx
    0.00 :	  78439e:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843a3:       e8 98 bc f0 ff          callq  690040 <s_lock>
    0.00 :	  7843a8:       eb 87                   jmp    784331 <hash_search_with_hash_value+0x2e1>
         :
         :	                        currBucket = get_hash_entry(hashp);
         :	                        if (currBucket == NULL)
         :	                        {
         :	                                /* out of memory */
         :	                                if (action == HASH_ENTER_NULL)
    0.00 :	  7843aa:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  7843ae:       75 d0                   jne    784380 <hash_search_with_hash_value+0x330>
         :	                                        return NULL;
         :	                                /* report a generic message */
         :	                                if (hashp->isshared)
    0.00 :	  7843b0:       41 80 7e 40 00          cmpb   $0x0,0x40(%r14)
    0.00 :	  7843b5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7843b8:       0f 84 4a 02 00 00       je     784608 <hash_search_with_hash_value+0x5b8>
         :	                                        ereport(ERROR,
    0.00 :	  7843be:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  7843c1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  7843c6:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  7843cb:       ba c6 03 00 00          mov    $0x3c6,%edx
    0.00 :	  7843d0:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843d5:       e8 e6 66 ff ff          callq  77aac0 <errstart>
    0.00 :	  7843da:       84 c0                   test   %al,%al
    0.00 :	  7843dc:       bf 47 ba 8a 00          mov    $0x8aba47,%edi
    0.00 :	  7843e1:       0f 84 8a fe ff ff       je     784271 <hash_search_with_hash_value+0x221>
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  7843e7:       31 c0                   xor    %eax,%eax
    0.00 :	  7843e9:       e8 b2 84 ff ff          callq  77c8a0 <errmsg>
    0.00 :	  7843ee:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  7843f3:       89 c3                   mov    %eax,%ebx
    0.00 :	  7843f5:       e8 56 89 ff ff          callq  77cd50 <errcode>
    0.00 :	  7843fa:       89 de                   mov    %ebx,%esi
    0.00 :	  7843fc:       89 c7                   mov    %eax,%edi
    0.00 :	  7843fe:       31 c0                   xor    %eax,%eax
    0.00 :	  784400:       e8 db 61 ff ff          callq  77a5e0 <errfinish>
    0.00 :	  784405:       e9 67 fe ff ff          jmpq   784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78440a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784410:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  784413:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784417:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  78441b:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  78441f:       4d 89 e1                mov    %r12,%r9
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  784422:       89 43 28                mov    %eax,0x28(%rbx)
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  784425:       8b 43 30                mov    0x30(%rbx),%eax
    0.00 :	  784428:       49 21 c1                and    %rax,%r9
         :
         :	        /*
         :	         * If we crossed a power of 2, readjust masks.
         :	         */
         :	        if ((uint32) new_bucket > hctl->high_mask)
    0.00 :	  78442b:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  78442e:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  784431:       76 0c                   jbe    78443f <hash_search_with_hash_value+0x3ef>
         :	        {
         :	                hctl->low_mask = hctl->high_mask;
    0.00 :	  784433:       89 43 30                mov    %eax,0x30(%rbx)
         :	                hctl->high_mask = (uint32) new_bucket | hctl->low_mask;
    0.00 :	  784436:       09 45 d4                or     %eax,-0x2c(%rbp)
    0.00 :	  784439:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  78443c:       89 43 2c                mov    %eax,0x2c(%rbx)
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  78443f:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784443:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784447:       4c 89 ca                mov    %r9,%rdx
         :	         * that might not be true!
         :	         */
         :	        old_segnum = old_bucket >> hashp->sshift;
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
    0.00 :	  78444a:       49 8b 76 08             mov    0x8(%r14),%rsi
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78444e:       4d 21 ec                and    %r13,%r12
    0.00 :	  784451:       4a 8d 3c e5 00 00 00    lea    0x0(,%r12,8),%rdi
    0.00 :	  784458:       00 
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  784459:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78445d:       48 d3 fa                sar    %cl,%rdx
    0.00 :	  784460:       4c 21 c8                and    %r9,%rax
    0.00 :	  784463:       4c 8d 04 c5 00 00 00    lea    0x0(,%rax,8),%r8
    0.00 :	  78446a:       00 
    0.00 :	  78446b:       4c 03 04 d6             add    (%rsi,%rdx,8),%r8
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78446f:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  784473:       48 03 3c 16             add    (%rsi,%rdx,1),%rdi
         :
         :	        for (currElement = *oldlink;
    0.00 :	  784477:       49 8b 10                mov    (%r8),%rdx
         :	                 currElement != NULL;
    0.00 :	  78447a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  78447d:       75 17                   jne    784496 <hash_search_with_hash_value+0x446>
    0.00 :	  78447f:       eb 39                   jmp    7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784481:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        *oldlink = currElement;
         :	                        oldlink = &currElement->link;
         :	                }
         :	                else
         :	                {
         :	                        *newlink = currElement;
    0.00 :	  784488:       48 89 17                mov    %rdx,(%rdi)
         :	                        newlink = &currElement->link;
    0.00 :	  78448b:       48 89 d7                mov    %rdx,%rdi
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
    0.00 :	  78448e:       48 85 c9                test   %rcx,%rcx
    0.00 :	  784491:       74 27                   je     7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784493:       48 89 ca                mov    %rcx,%rdx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  784496:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
    0.00 :	  78449a:       48 8b 0a                mov    (%rdx),%rcx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  78449d:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  7844a0:       23 42 08                and    0x8(%rdx),%eax
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7844a3:       3b 43 28                cmp    0x28(%rbx),%eax
    0.00 :	  7844a6:       76 03                   jbe    7844ab <hash_search_with_hash_value+0x45b>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7844a8:       23 43 30                and    0x30(%rbx),%eax
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
         :	                if ((long) calc_bucket(hctl, currElement->hashvalue) == old_bucket)
    0.00 :	  7844ab:       89 c0                   mov    %eax,%eax
    0.00 :	  7844ad:       49 39 c1                cmp    %rax,%r9
    0.00 :	  7844b0:       75 d6                   jne    784488 <hash_search_with_hash_value+0x438>
         :	                {
         :	                        *oldlink = currElement;
    0.00 :	  7844b2:       49 89 10                mov    %rdx,(%r8)
         :	                        oldlink = &currElement->link;
    0.00 :	  7844b5:       49 89 d0                mov    %rdx,%r8
    0.00 :	  7844b8:       eb d4                   jmp    78448e <hash_search_with_hash_value+0x43e>
         :	                        *newlink = currElement;
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
    0.00 :	  7844ba:       49 c7 00 00 00 00 00    movq   $0x0,(%r8)
         :	        *newlink = NULL;
    0.00 :	  7844c1:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7844c8:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  7844cc:       e9 c8 fb ff ff          jmpq   784099 <hash_search_with_hash_value+0x49>
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* remove entry from freelist, bump nentries */
         :	        hctlv->freeList = newElement->link;
    0.00 :	  7844d1:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  7844d4:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        hctlv->nentries++;
    0.00 :	  7844d8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7844dc:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  7844e0:       48 89 43 08             mov    %rax,0x8(%rbx)
         :
         :	        if (IS_PARTITIONED(hctlv))
    0.00 :	  7844e4:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7844e8:       48 85 c0                test   %rax,%rax
    0.00 :	  7844eb:       74 03                   je     7844f0 <hash_search_with_hash_value+0x4a0>
         :	                SpinLockRelease(&hctlv->mutex);
    0.00 :	  7844ed:       c6 03 00                movb   $0x0,(%rbx)
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  7844f0:       48 8d 5a 10             lea    0x10(%rdx),%rbx
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
    0.00 :	  7844f4:       49 89 14 24             mov    %rdx,(%r12)
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
    0.00 :	  7844f8:       44 89 7a 08             mov    %r15d,0x8(%rdx)
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
    0.00 :	  7844fc:       48 c7 02 00 00 00 00    movq   $0x0,(%rdx)
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  784503:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  784507:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78450b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78450e:       41 ff 56 20             callq  *0x20(%r14)
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  784512:       e9 38 fc ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  784517:       31 f6                   xor    %esi,%esi
    0.00 :	  784519:       e8 02 4f ce ff          callq  469420 <memset@plt>
         :	                hashp->dir = p;
    0.00 :	  78451e:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  784522:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
         :	                hashp->dir = p;
    0.00 :	  784526:       49 89 46 08             mov    %rax,0x8(%r14)
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  78452a:       49 8b 06                mov    (%r14),%rax
    0.00 :	  78452d:       48 89 50 18             mov    %rdx,0x18(%rax)
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784531:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  784535:       e8 46 46 01 00          callq  798b80 <pfree>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78453a:       48 8b 5d c0             mov    -0x40(%rbp),%rbx
    0.00 :	  78453e:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  784541:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784545:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
    0.00 :	  784549:       49 03 5e 08             add    0x8(%r14),%rbx
    0.00 :	  78454d:       e8 7e fa ff ff          callq  783fd0 <seg_alloc>
    0.00 :	  784552:       48 85 c0                test   %rax,%rax
    0.00 :	  784555:       48 89 03                mov    %rax,(%rbx)
    0.00 :	  784558:       0f 84 1f 01 00 00       je     78467d <hash_search_with_hash_value+0x62d>
         :	                        return false;
         :	                hctl->nsegs++;
    0.00 :	  78455e:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784562:       8b 42 28                mov    0x28(%rdx),%eax
    0.00 :	  784565:       48 83 42 20 01          addq   $0x1,0x20(%rdx)
    0.00 :	  78456a:       83 c0 01                add    $0x1,%eax
    0.00 :	  78456d:       e9 a9 fe ff ff          jmpq   78441b <hash_search_with_hash_value+0x3cb>
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784572:       48 8d 14 1b             lea    (%rbx,%rbx,1),%rdx
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
    0.00 :	  784576:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784579:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  78457d:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784581:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784585:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784589:       49 8b 56 08             mov    0x8(%r14),%rdx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78458d:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784591:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784595:       48 89 05 2c 56 43 00    mov    %rax,0x43562c(%rip)        # bb9bc8 <CurrentDynaHashCxt>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78459c:       41 ff 56 28             callq  *0x28(%r14)
         :
         :	        if (p != NULL)
    0.00 :	  7845a0:       48 85 c0                test   %rax,%rax
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  7845a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        if (p != NULL)
    0.00 :	  7845a7:       0f 84 89 00 00 00       je     784636 <hash_search_with_hash_value+0x5e6>
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845ad:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845b1:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
    0.00 :	  7845b5:       48 c1 e3 03             shl    $0x3,%rbx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845b9:       48 89 da                mov    %rbx,%rdx
    0.00 :	  7845bc:       e8 2f 56 ce ff          callq  469bf0 <memcpy@plt>
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  7845c1:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845c5:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  7845c9:       48 01 df                add    %rbx,%rdi
    0.00 :	  7845cc:       48 29 da                sub    %rbx,%rdx
    0.00 :	  7845cf:       40 f6 c7 07             test   $0x7,%dil
    0.00 :	  7845d3:       0f 85 3e ff ff ff       jne    784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845d9:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  7845e0:       0f 87 31 ff ff ff       ja     784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845e6:       48 8d 04 17             lea    (%rdi,%rdx,1),%rax
    0.00 :	  7845ea:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  7845ed:       0f 83 2b ff ff ff       jae    78451e <hash_search_with_hash_value+0x4ce>
    0.00 :	  7845f3:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7845fa:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	  7845fe:       48 39 f8                cmp    %rdi,%rax
    0.00 :	  784601:       77 f0                   ja     7845f3 <hash_search_with_hash_value+0x5a3>
    0.00 :	  784603:       e9 16 ff ff ff          jmpq   78451e <hash_search_with_hash_value+0x4ce>
         :	                                if (hashp->isshared)
         :	                                        ereport(ERROR,
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  784608:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  78460b:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  784610:       ba ca 03 00 00          mov    $0x3ca,%edx
    0.00 :	  784615:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  78461a:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78461f:       e8 9c 64 ff ff          callq  77aac0 <errstart>
    0.00 :	  784624:       84 c0                   test   %al,%al
    0.00 :	  784626:       0f 84 45 fc ff ff       je     784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78462c:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  784631:       e9 b1 fd ff ff          jmpq   7843e7 <hash_search_with_hash_value+0x397>
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
    0.00 :	  784636:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78463a:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78463e:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784642:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784646:       44 8b 43 28             mov    0x28(%rbx),%r8d
    0.00 :	  78464a:       e9 d9 fb ff ff          jmpq   784228 <hash_search_with_hash_value+0x1d8>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
         :	                                elog(ERROR, "cannot insert into frozen hashtable \"%s\"",
    0.00 :	  78464f:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  784654:       be ba 03 00 00          mov    $0x3ba,%esi
    0.00 :	  784659:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  78465e:       e8 bd 6d ff ff          callq  77b420 <elog_start>
    0.00 :	  784663:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  784667:       be c0 5a 8d 00          mov    $0x8d5ac0,%esi
    0.00 :	  78466c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  784671:       31 c0                   xor    %eax,%eax
    0.00 :	  784673:       e8 b8 6b ff ff          callq  77b230 <elog_finish>
    0.00 :	  784678:       e8 53 4e ce ff          callq  4694d0 <abort@plt>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78467d:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784681:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784685:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  784688:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78468c:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784690:       e9 13 fa ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.75 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:645
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:660
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:719
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:645
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:646
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:655
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:711
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:723
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:727
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e3350 <tbm_iterate>:
         :	 * be examined, but the condition must be rechecked anyway.  (For ease of
         :	 * testing, recheck is always set true when ntuples < 0.)
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:645
    6.25 :	  5e3350:       55                      push   %rbp
   18.75 :	  5e3351:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5e3354:       53                      push   %rbx
         :	        TIDBitmap  *tbm = iterator->tbm;
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:646
    6.25 :	  5e3355:       4c 8b 1f                mov    (%rdi),%r11
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:655
    6.25 :	  5e3358:       44 8b 57 0c             mov    0xc(%rdi),%r10d
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
         :	        TIDBitmap  *tbm = iterator->tbm;
         :	        TBMIterateResult *output = &(iterator->output);
    0.00 :	  5e335c:       48 8d 5f 14             lea    0x14(%rdi),%rbx
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3360:       45 3b 53 2c             cmp    0x2c(%r11),%r10d
    0.00 :	  5e3364:       0f 8d 9f 00 00 00       jge    5e3409 <tbm_iterate+0xb9>
         :	                while (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
   12.50 :	  5e336a:       41 b9 01 00 00 00       mov    $0x1,%r9d
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
    0.00 :	  5e3370:       8b 77 10                mov    0x10(%rdi),%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3373:       49 8b 43 70             mov    0x70(%r11),%rax
    0.00 :	  5e3377:       49 63 d2                movslq %r10d,%rdx
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e337a:       81 fe ff 00 00 00       cmp    $0xff,%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3380:       4c 8b 04 d0             mov    (%rax,%rdx,8),%r8
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:660
   12.50 :	  5e3384:       7f 68                   jg     5e33ee <tbm_iterate+0x9e>
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
    0.00 :	  5e3386:       8d 56 1f                lea    0x1f(%rsi),%edx
    0.00 :	  5e3389:       85 f6                   test   %esi,%esi
    0.00 :	  5e338b:       89 f0                   mov    %esi,%eax
    0.00 :	  5e338d:       0f 49 d6                cmovns %esi,%edx
    0.00 :	  5e3390:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e3393:       c1 e8 1b                shr    $0x1b,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    6.25 :	  5e3396:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  5e3399:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e339c:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5e339f:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33a2:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33a4:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33a7:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33a9:       41 85 44 90 08          test   %eax,0x8(%r8,%rdx,4)
    0.00 :	  5e33ae:       74 33                   je     5e33e3 <tbm_iterate+0x93>
    0.00 :	  5e33b0:       eb 6e                   jmp    5e3420 <tbm_iterate+0xd0>
    0.00 :	  5e33b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5e33b8:       89 f0                   mov    %esi,%eax
    0.00 :	  5e33ba:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e33bd:       c1 e8 1b                shr    $0x1b,%eax
    0.00 :	  5e33c0:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e33c3:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33c6:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33c8:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33cb:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33cd:       85 f6                   test   %esi,%esi
    0.00 :	  5e33cf:       89 c1                   mov    %eax,%ecx
    0.00 :	  5e33d1:       8d 46 1f                lea    0x1f(%rsi),%eax
    0.00 :	  5e33d4:       0f 49 c6                cmovns %esi,%eax
    0.00 :	  5e33d7:       c1 f8 05                sar    $0x5,%eax
    0.00 :	  5e33da:       48 98                   cltq   
    0.00 :	  5e33dc:       41 85 4c 80 08          test   %ecx,0x8(%r8,%rax,4)
    0.00 :	  5e33e1:       75 3d                   jne    5e3420 <tbm_iterate+0xd0>
         :	                                break;
         :	                        schunkbit++;
    0.00 :	  5e33e3:       83 c6 01                add    $0x1,%esi
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e33e6:       81 fe 00 01 00 00       cmp    $0x100,%esi
    0.00 :	  5e33ec:       75 ca                   jne    5e33b8 <tbm_iterate+0x68>
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33ee:       41 8d 42 01             lea    0x1(%r10),%eax
         :	                iterator->schunkbit = 0;
    0.00 :	  5e33f2:       c7 47 10 00 00 00 00    movl   $0x0,0x10(%rdi)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33f9:       89 47 0c                mov    %eax,0xc(%rdi)
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e33fc:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e3400:       41 89 c2                mov    %eax,%r10d
    0.00 :	  5e3403:       0f 8c 67 ff ff ff       jl     5e3370 <tbm_iterate+0x20>
         :	                        iterator->schunkbit++;
         :	                        return output;
         :	                }
         :	        }
         :
         :	        if (iterator->spageptr < tbm->npages)
    0.00 :	  5e3409:       8b 77 08                mov    0x8(%rdi),%esi
    0.00 :	  5e340c:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3410:       7c 44                   jl     5e3456 <tbm_iterate+0x106>
    0.00 :	  5e3412:       31 db                   xor    %ebx,%ebx
    0.00 :	  5e3414:       e9 c9 00 00 00          jmpq   5e34e2 <tbm_iterate+0x192>
    0.00 :	  5e3419:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                break;
         :	                        schunkbit++;
         :	                }
         :	                if (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
    0.00 :	  5e3420:       89 77 10                mov    %esi,0x10(%rdi)
         :
         :	        /*
         :	         * If both chunk and per-page data remain, must output the numerically
         :	         * earlier page.
         :	         */
         :	        if (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3423:       8b 47 0c                mov    0xc(%rdi),%eax
    0.00 :	  5e3426:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e342a:       7d dd                   jge    5e3409 <tbm_iterate+0xb9>
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
    0.00 :	  5e342c:       49 8b 53 70             mov    0x70(%r11),%rdx
    0.00 :	  5e3430:       48 98                   cltq   
    0.00 :	  5e3432:       89 f1                   mov    %esi,%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e3434:       8b 77 08                mov    0x8(%rdi),%esi
         :	        if (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
    0.00 :	  5e3437:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e343b:       03 08                   add    (%rax),%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e343d:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3441:       0f 8d 89 00 00 00       jge    5e34d0 <tbm_iterate+0x180>
    0.00 :	  5e3447:       49 8b 53 68             mov    0x68(%r11),%rdx
    0.00 :	  5e344b:       48 63 c6                movslq %esi,%rax
    0.00 :	  5e344e:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e3452:       3b 08                   cmp    (%rax),%ecx
    0.00 :	  5e3454:       72 7a                   jb     5e34d0 <tbm_iterate+0x180>
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
    0.00 :	  5e3456:       41 83 7b 10 01          cmpl   $0x1,0x10(%r11)
         :	                        page = &tbm->entry1;
    0.00 :	  5e345b:       49 8d 53 34             lea    0x34(%r11),%rdx
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
    0.00 :	  5e345f:       74 0b                   je     5e346c <tbm_iterate+0x11c>
         :	                        page = &tbm->entry1;
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
    0.00 :	  5e3461:       49 8b 43 68             mov    0x68(%r11),%rax
    0.00 :	  5e3465:       48 63 d6                movslq %esi,%rdx
    0.00 :	  5e3468:       48 8b 14 d0             mov    (%rax,%rdx,8),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:711
    6.25 :	  5e346c:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5e346f:       45 31 c9                xor    %r9d,%r9d
    0.00 :	  5e3472:       41 ba 01 00 00 00       mov    $0x1,%r10d
    0.00 :	  5e3478:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5e347f:       00 
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
         :	                {
         :	                        bitmapword      w = page->words[wordnum];
    0.00 :	  5e3480:       42 8b 4c 0a 08          mov    0x8(%rdx,%r9,1),%ecx
         :
         :	                        if (w != 0)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:719
   12.50 :	  5e3485:       85 c9                   test   %ecx,%ecx
    0.00 :	  5e3487:       74 1f                   je     5e34a8 <tbm_iterate+0x158>
    0.00 :	  5e3489:       44 89 d6                mov    %r10d,%esi
    0.00 :	  5e348c:       eb 05                   jmp    5e3493 <tbm_iterate+0x143>
    0.00 :	  5e348e:       66 90                   xchg   %ax,%ax
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
    0.00 :	  5e3490:       83 c6 01                add    $0x1,%esi
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
    0.00 :	  5e3493:       f6 c1 01                test   $0x1,%cl
    0.00 :	  5e3496:       74 0c                   je     5e34a4 <tbm_iterate+0x154>
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
    0.00 :	  5e3498:       49 63 c0                movslq %r8d,%rax
    0.00 :	  5e349b:       41 83 c0 01             add    $0x1,%r8d
    0.00 :	  5e349f:       66 89 74 47 1e          mov    %si,0x1e(%rdi,%rax,2)
         :
         :	                        if (w != 0)
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:723
    6.25 :	  5e34a4:       d1 e9                   shr    %ecx
    0.00 :	  5e34a6:       75 e8                   jne    5e3490 <tbm_iterate+0x140>
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:727
    6.25 :	  5e34a8:       49 83 c1 04             add    $0x4,%r9
    0.00 :	  5e34ac:       41 83 c2 20             add    $0x20,%r10d
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
    0.00 :	  5e34b0:       49 83 f9 28             cmp    $0x28,%r9
    0.00 :	  5e34b4:       75 ca                   jne    5e3480 <tbm_iterate+0x130>
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34b6:       8b 02                   mov    (%rdx),%eax
         :	                output->ntuples = ntuples;
    0.00 :	  5e34b8:       44 89 47 18             mov    %r8d,0x18(%rdi)
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34bc:       89 47 14                mov    %eax,0x14(%rdi)
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34bf:       0f b6 42 05             movzbl 0x5(%rdx),%eax
         :	                iterator->spageptr++;
    0.00 :	  5e34c3:       83 47 08 01             addl   $0x1,0x8(%rdi)
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34c7:       88 47 1c                mov    %al,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34ca:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34cd:       5b                      pop    %rbx
    0.00 :	  5e34ce:       c9                      leaveq 
    0.00 :	  5e34cf:       c3                      retq   
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
         :	                        output->ntuples = -1;
         :	                        output->recheck = true;
         :	                        iterator->schunkbit++;
    0.00 :	  5e34d0:       83 47 10 01             addl   $0x1,0x10(%rdi)
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
         :	                if (iterator->spageptr >= tbm->npages ||
         :	                        chunk_blockno < tbm->spages[iterator->spageptr]->blockno)
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
    0.00 :	  5e34d4:       89 4f 14                mov    %ecx,0x14(%rdi)
         :	                        output->ntuples = -1;
    0.00 :	  5e34d7:       c7 47 18 ff ff ff ff    movl   $0xffffffff,0x18(%rdi)
         :	                        output->recheck = true;
    0.00 :	  5e34de:       c6 47 1c 01             movb   $0x1,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34e2:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34e5:       5b                      pop    %rbx
    0.00 :	  5e34e6:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:655
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:628
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:655
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a900 <ResourceOwnerForgetBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 :	  79a900:       55                      push   %rbp
         :	        if (owner != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:628
   13.33 :	  79a901:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a904:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    6.67 :	  79a907:       41 54                   push   %r12
    6.67 :	  79a909:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79a90c:       53                      push   %rbx
    6.67 :	  79a90d:       89 f3                   mov    %esi,%ebx
         :	        if (owner != NULL)
    0.00 :	  79a90f:       74 4d                   je     79a95e <ResourceOwnerForgetBuffer+0x5e>
         :	        {
         :	                Buffer     *buffers = owner->buffers;
         :	                int                     nb1 = owner->nbuffers - 1;
    0.00 :	  79a911:       8b 47 20                mov    0x20(%rdi),%eax
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
         :	        if (owner != NULL)
         :	        {
         :	                Buffer     *buffers = owner->buffers;
    0.00 :	  79a914:       48 8b 77 28             mov    0x28(%rdi),%rsi
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
   13.33 :	  79a918:       89 c7                   mov    %eax,%edi
    0.00 :	  79a91a:       83 ef 01                sub    $0x1,%edi
    6.67 :	  79a91d:       78 49                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a91f:       48 63 c7                movslq %edi,%rax
         :	                                while (i < nb1)
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
    0.00 :	  79a922:       89 fa                   mov    %edi,%edx
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a924:       39 1c 86                cmp    %ebx,(%rsi,%rax,4)
    0.00 :	  79a927:       74 30                   je     79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a929:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
    0.00 :	  79a930:       83 ea 01                sub    $0x1,%edx
    0.00 :	  79a933:       78 33                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a935:       48 63 ca                movslq %edx,%rcx
    0.00 :	  79a938:       39 1c 8e                cmp    %ebx,(%rsi,%rcx,4)
    0.00 :	  79a93b:       75 f3                   jne    79a930 <ResourceOwnerForgetBuffer+0x30>
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a93d:       39 d7                   cmp    %edx,%edi
    0.00 :	  79a93f:       90                      nop
    0.00 :	  79a940:       7f 09                   jg     79a94b <ResourceOwnerForgetBuffer+0x4b>
    0.00 :	  79a942:       eb 15                   jmp    79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a944:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  79a948:       48 63 ca                movslq %edx,%rcx
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a94b:       8b 44 8e 04             mov    0x4(%rsi,%rcx,4),%eax
         :	                                        i++;
    0.00 :	  79a94f:       83 c2 01                add    $0x1,%edx
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a952:       39 d7                   cmp    %edx,%edi
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a954:       89 04 8e                mov    %eax,(%rsi,%rcx,4)
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a957:       7f ef                   jg     79a948 <ResourceOwnerForgetBuffer+0x48>
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   13.33 :	  79a959:       41 89 7c 24 20          mov    %edi,0x20(%r12)
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
         :	                         buffer, owner->name);
         :	        }
         :	}
    0.00 :	  79a95e:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:655
    6.67 :	  79a95f:       41 5c                   pop    %r12
    0.00 :	  79a961:       c9                      leaveq 
   20.00 :	  79a962:       c3                      retq   
    0.00 :	  79a963:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                }
         :	                                owner->nbuffers = nb1;
         :	                                return;
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
    0.00 :	  79a968:       ba 70 27 8e 00          mov    $0x8e2770,%edx
    0.00 :	  79a96d:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  79a972:       bf 90 22 8e 00          mov    $0x8e2290,%edi
    0.00 :	  79a977:       e8 a4 0a fe ff          callq  77b420 <elog_start>
    0.00 :	  79a97c:       49 8b 4c 24 18          mov    0x18(%r12),%rcx
    0.00 :	  79a981:       89 da                   mov    %ebx,%edx
    0.00 :	  79a983:       be b8 24 8e 00          mov    $0x8e24b8,%esi
    0.00 :	  79a988:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  79a98d:       31 c0                   xor    %eax,%eax
    0.00 :	  79a98f:       e8 9c 08 fe ff          callq  77b230 <elog_finish>
    0.00 :	  79a994:       e8 37 eb cc ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:306
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:306
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490350 <hash_any>:
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:306
   14.29 :	  490350:       55                      push   %rbp
    7.14 :	  490351:       41 89 f2                mov    %esi,%r10d
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490354:       40 f6 c7 03             test   $0x3,%dil
         :	                                c,
         :	                                len;
         :
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
    0.00 :	  490358:       45 8d 82 50 56 73 9e    lea    -0x618ca9b0(%r10),%r8d
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  49035f:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  490362:       53                      push   %rbx
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490363:       0f 84 f7 00 00 00       je     490460 <hash_any+0x110>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490369:       83 fe 0b                cmp    $0xb,%esi
         :	                                /* fall through */
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
         :	                                /* fall through */
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49036c:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  49036f:       44 89 c2                mov    %r8d,%edx
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490372:       0f 86 7e 02 00 00       jbe    4905f6 <hash_any+0x2a6>
    0.00 :	  490378:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49037f:       00 
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  490380:       0f b6 4f 05             movzbl 0x5(%rdi),%ecx
    0.00 :	  490384:       0f b6 47 06             movzbl 0x6(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490388:       0f b6 77 09             movzbl 0x9(%rdi),%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49038c:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49038f:       c1 e1 08                shl    $0x8,%ecx
    0.00 :	  490392:       01 c1                   add    %eax,%ecx
    0.00 :	  490394:       0f b6 47 04             movzbl 0x4(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490398:       c1 e6 08                shl    $0x8,%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49039b:       01 c1                   add    %eax,%ecx
    0.00 :	  49039d:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  4903a1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903a4:       01 c1                   add    %eax,%ecx
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903a6:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  4903aa:       01 d1                   add    %edx,%ecx
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ac:       0f b6 57 01             movzbl 0x1(%rdi),%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903b0:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903b3:       01 c6                   add    %eax,%esi
    0.00 :	  4903b5:       0f b6 47 08             movzbl 0x8(%rdi),%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903b9:       c1 e2 08                shl    $0x8,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903bc:       01 c6                   add    %eax,%esi
    0.00 :	  4903be:       0f b6 47 0b             movzbl 0xb(%rdi),%eax
    0.00 :	  4903c2:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903c5:       01 c6                   add    %eax,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903c7:       0f b6 47 02             movzbl 0x2(%rdi),%eax
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903cb:       44 01 c6                add    %r8d,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ce:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903d1:       01 c2                   add    %eax,%edx
    0.00 :	  4903d3:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  4903d6:       01 c2                   add    %eax,%edx
    0.00 :	  4903d8:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  4903dc:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903df:       01 c2                   add    %eax,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e1:       89 f0                   mov    %esi,%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903e3:       44 01 ca                add    %r9d,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e6:       c1 c8 1c                ror    $0x1c,%eax
    0.00 :	  4903e9:       29 f2                   sub    %esi,%edx
    0.00 :	  4903eb:       01 ce                   add    %ecx,%esi
    0.00 :	  4903ed:       31 c2                   xor    %eax,%edx
    0.00 :	  4903ef:       89 d0                   mov    %edx,%eax
    0.00 :	  4903f1:       29 d1                   sub    %edx,%ecx
    0.00 :	  4903f3:       01 f2                   add    %esi,%edx
    0.00 :	  4903f5:       c1 c8 1a                ror    $0x1a,%eax
    0.00 :	  4903f8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4903fa:       89 c1                   mov    %eax,%ecx
    0.00 :	  4903fc:       29 c6                   sub    %eax,%esi
    0.00 :	  4903fe:       01 d0                   add    %edx,%eax
    0.00 :	  490400:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  490403:       31 f1                   xor    %esi,%ecx
    0.00 :	  490405:       89 ce                   mov    %ecx,%esi
    0.00 :	  490407:       29 ca                   sub    %ecx,%edx
    0.00 :	  490409:       01 c1                   add    %eax,%ecx
    0.00 :	  49040b:       c1 ce 10                ror    $0x10,%esi
         :	                        k += 12;
         :	                        len -= 12;
    0.00 :	  49040e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
         :	                        k += 12;
    0.00 :	  490412:       48 83 c7 0c             add    $0xc,%rdi
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  490416:       31 d6                   xor    %edx,%esi
    0.00 :	  490418:       89 f2                   mov    %esi,%edx
    0.00 :	  49041a:       29 f0                   sub    %esi,%eax
    0.00 :	  49041c:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  490420:       c1 ca 0d                ror    $0xd,%edx
    0.00 :	  490423:       31 c2                   xor    %eax,%edx
    0.00 :	  490425:       41 89 d0                mov    %edx,%r8d
    0.00 :	  490428:       29 d1                   sub    %edx,%ecx
    0.00 :	  49042a:       44 01 ca                add    %r9d,%edx
    0.00 :	  49042d:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  490431:       41 31 c8                xor    %ecx,%r8d
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490434:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  490438:       0f 87 42 ff ff ff       ja     490380 <hash_any+0x30>
    0.00 :	  49043e:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  490441:       89 d6                   mov    %edx,%esi
    0.00 :	  490443:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
    0.00 :	  490446:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  49044a:       0f 87 01 01 00 00       ja     490551 <hash_any+0x201>
    0.00 :	  490450:       44 89 d0                mov    %r10d,%eax
    0.00 :	  490453:       ff 24 c5 18 22 7b 00    jmpq   *0x7b2218(,%rax,8)
    0.00 :	  49045a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490460:       83 fe 0b                cmp    $0xb,%esi
    0.00 :	  490463:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  490466:       44 89 c1                mov    %r8d,%ecx
    0.00 :	  490469:       0f 86 79 01 00 00       jbe    4905e8 <hash_any+0x298>
    0.00 :	  49046f:       90                      nop
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
    0.00 :	  490470:       44 89 c6                mov    %r8d,%esi
    0.00 :	  490473:       03 77 08                add    0x8(%rdi),%esi
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
    0.00 :	  490476:       44 89 c8                mov    %r9d,%eax
    0.00 :	  490479:       03 07                   add    (%rdi),%eax
         :	                        b += ka[1];
    0.00 :	  49047b:       03 4f 04                add    0x4(%rdi),%ecx
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
         :	                        len -= 12;
    0.00 :	  49047e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
    0.00 :	  490482:       48 83 c7 0c             add    $0xc,%rdi
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  490486:       89 f2                   mov    %esi,%edx
    0.00 :	  490488:       29 f0                   sub    %esi,%eax
    0.00 :	  49048a:       c1 ca 1c                ror    $0x1c,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    7.14 :	  49048d:       01 ce                   add    %ecx,%esi
    0.00 :	  49048f:       31 d0                   xor    %edx,%eax
    0.00 :	  490491:       89 c2                   mov    %eax,%edx
    0.00 :	  490493:       29 c1                   sub    %eax,%ecx
    0.00 :	  490495:       01 f0                   add    %esi,%eax
    0.00 :	  490497:       c1 ca 1a                ror    $0x1a,%edx
    0.00 :	  49049a:       31 ca                   xor    %ecx,%edx
    0.00 :	  49049c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49049e:       29 d6                   sub    %edx,%esi
    0.00 :	  4904a0:       01 c2                   add    %eax,%edx
    7.14 :	  4904a2:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  4904a5:       31 f1                   xor    %esi,%ecx
    0.00 :	  4904a7:       89 ce                   mov    %ecx,%esi
    7.14 :	  4904a9:       29 c8                   sub    %ecx,%eax
    0.00 :	  4904ab:       01 d1                   add    %edx,%ecx
    0.00 :	  4904ad:       c1 ce 10                ror    $0x10,%esi
    7.14 :	  4904b0:       31 c6                   xor    %eax,%esi
    0.00 :	  4904b2:       89 f0                   mov    %esi,%eax
    7.14 :	  4904b4:       29 f2                   sub    %esi,%edx
    0.00 :	  4904b6:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  4904ba:       c1 c8 0d                ror    $0xd,%eax
    0.00 :	  4904bd:       31 d0                   xor    %edx,%eax
    0.00 :	  4904bf:       41 89 c0                mov    %eax,%r8d
    0.00 :	  4904c2:       29 c1                   sub    %eax,%ecx
    0.00 :	  4904c4:       41 c1 c8 1c             ror    $0x1c,%r8d
    7.14 :	  4904c8:       41 31 c8                xor    %ecx,%r8d
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904cb:       41 83 fa 0b             cmp    $0xb,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  4904cf:       42 8d 0c 08             lea    (%rax,%r9,1),%ecx
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904d3:       77 9b                   ja     490470 <hash_any+0x120>
    0.00 :	  4904d5:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4904d8:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904da:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
    0.00 :	  4904dd:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  4904e1:       77 6e                   ja     490551 <hash_any+0x201>
    0.00 :	  4904e3:       44 89 d0                mov    %r10d,%eax
    0.00 :	  4904e6:       ff 24 c5 78 22 7b 00    jmpq   *0x7b2278(,%rax,8)
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4904ed:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4904f1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4904f4:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4904f8:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4904fc:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4904ff:       01 c3                   add    %eax,%ebx
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  490501:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  490505:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490508:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                        case 8:
         :	                                b += ((uint32) k[7] << 24);
    0.00 :	  49050a:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  49050e:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490511:       8d 34 10                lea    (%rax,%rdx,1),%esi
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  490514:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  490518:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49051b:       01 c6                   add    %eax,%esi
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  49051d:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  490521:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490524:       01 c6                   add    %eax,%esi
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  490526:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  49052a:       01 c6                   add    %eax,%esi
         :	                        case 4:
         :	                                a += ((uint32) k[3] << 24);
    0.00 :	  49052c:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  490530:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490533:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490537:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  49053b:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49053e:       41 01 c3                add    %eax,%r11d
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
    0.00 :	  490541:       0f b6 47 01             movzbl 0x1(%rdi),%eax
    0.00 :	  490545:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490548:       41 01 c3                add    %eax,%r11d
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49054b:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  49054e:       41 01 c3                add    %eax,%r11d
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#endif   /* WORDS_BIGENDIAN */
         :	        }
         :
         :	        final(a, b, c);
    0.00 :	  490551:       89 da                   mov    %ebx,%edx
    0.00 :	  490553:       89 f0                   mov    %esi,%eax
    0.00 :	  490555:       31 f2                   xor    %esi,%edx
    0.00 :	  490557:       c1 c8 12                ror    $0x12,%eax
    0.00 :	  49055a:       29 c2                   sub    %eax,%edx
    0.00 :	  49055c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49055e:       89 d0                   mov    %edx,%eax
    0.00 :	  490560:       c1 c8 15                ror    $0x15,%eax
    0.00 :	  490563:       44 31 d9                xor    %r11d,%ecx
    0.00 :	  490566:       29 c1                   sub    %eax,%ecx
    0.00 :	  490568:       89 c8                   mov    %ecx,%eax
    0.00 :	  49056a:       31 ce                   xor    %ecx,%esi
    0.00 :	  49056c:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49056f:       29 c6                   sub    %eax,%esi
    0.00 :	  490571:       89 f0                   mov    %esi,%eax
    0.00 :	  490573:       31 d0                   xor    %edx,%eax
    0.00 :	  490575:       89 f2                   mov    %esi,%edx
    0.00 :	  490577:       c1 ca 10                ror    $0x10,%edx
    0.00 :	  49057a:       29 d0                   sub    %edx,%eax
    0.00 :	  49057c:       89 c2                   mov    %eax,%edx
    0.00 :	  49057e:       31 ca                   xor    %ecx,%edx
    0.00 :	  490580:       89 c1                   mov    %eax,%ecx
    0.00 :	  490582:       c1 c9 1c                ror    $0x1c,%ecx
    0.00 :	  490585:       29 ca                   sub    %ecx,%edx
    0.00 :	  490587:       89 d1                   mov    %edx,%ecx
    0.00 :	  490589:       c1 ca 12                ror    $0x12,%edx
    0.00 :	  49058c:       31 f1                   xor    %esi,%ecx
    0.00 :	  49058e:       29 d1                   sub    %edx,%ecx
    0.00 :	  490590:       31 c8                   xor    %ecx,%eax
    0.00 :	  490592:       c1 c9 08                ror    $0x8,%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    7.14 :	  490595:       29 c8                   sub    %ecx,%eax
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490597:       5b                      pop    %rbx
    0.00 :	  490598:       c9                      leaveq 
    0.00 :	  490599:       c3                      retq   
         :	                        case 8:
         :	                                b += ka[1];
         :	                                a += ka[0];
         :	                                break;
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  49059a:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  49059e:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905a1:       8d 34 08                lea    (%rax,%rcx,1),%esi
         :	                                /* fall through */
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  4905a4:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  4905a8:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905ab:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  4905ad:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  4905b1:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
    0.00 :	  4905b3:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4905b6:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905b9:       eb 96                   jmp    490551 <hash_any+0x201>
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4905bb:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4905bf:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4905c2:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                                /* fall through */
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4905c6:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4905ca:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905cd:       01 c3                   add    %eax,%ebx
         :	                                /* fall through */
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  4905cf:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  4905d3:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905d6:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
   28.57 :	  4905d8:       89 ce                   mov    %ecx,%esi
         :	                                a += ka[0];
    0.00 :	  4905da:       45 89 cb                mov    %r9d,%r11d
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
    0.00 :	  4905dd:       03 77 04                add    0x4(%rdi),%esi
         :	                                a += ka[0];
    0.00 :	  4905e0:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905e3:       e9 69 ff ff ff          jmpq   490551 <hash_any+0x201>
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905e8:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905eb:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905ee:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905f1:       e9 e7 fe ff ff          jmpq   4904dd <hash_any+0x18d>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905f6:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905f9:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905fc:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905ff:       e9 42 fe ff ff          jmpq   490446 <hash_any+0xf6>
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
         :	                                break;
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490604:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  490608:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49060b:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
    0.00 :	  49060f:       e9 2d ff ff ff          jmpq   490541 <hash_any+0x1f1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   35.71 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694660 <CheckForSerializableConflictOut>:
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    7.14 :	  694660:       55                      push   %rbp
    0.00 :	  694661:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694664:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
   21.43 :	  694668:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  69466c:       49 89 d4                mov    %rdx,%r12
    0.00 :	  69466f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  694673:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
    7.14 :	  694677:       48 8b 15 42 a0 4e 00    mov    0x4ea042(%rip),%rdx        # b7e6c0 <MySerializableXact>
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
    0.00 :	  69467e:       41 89 fd                mov    %edi,%r13d
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694681:       48 85 d2                test   %rdx,%rdx
    0.00 :	  694684:       74 13                   je     694699 <CheckForSerializableConflictOut+0x39>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694686:       49 8b 00                mov    (%r8),%rax
    0.00 :	  694689:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  69468f:       74 1f                   je     6946b0 <CheckForSerializableConflictOut+0x50>
    0.00 :	  694691:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694697:       74 17                   je     6946b0 <CheckForSerializableConflictOut+0x50>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  694699:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   35.71 :	  69469d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6946a1:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
   14.29 :	  6946a5:       c9                      leaveq 
   14.29 :	  6946a6:       c3                      retq   
    0.00 :	  6946a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6946ae:       00 00 
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  6946b0:       8b 52 7c                mov    0x7c(%rdx),%edx
    0.00 :	  6946b3:       84 d2                   test   %dl,%dl
    0.00 :	  6946b5:       78 69                   js     694720 <CheckForSerializableConflictOut+0xc0>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  6946b7:       81 7e 40 0f 27 00 00    cmpl   $0x270f,0x40(%rsi)
    0.00 :	  6946be:       76 d9                   jbe    694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946c0:       48 8b 46 30             mov    0x30(%rsi),%rax
    0.00 :	  6946c4:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6946c8:       74 cf                   je     694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946ca:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  6946ce:       66 90                   xchg   %ax,%ax
    0.00 :	  6946d0:       74 c7                   je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        if (!SerializationNeededForRead(relation, snapshot))
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
    0.00 :	  6946d2:       83 e2 08                and    $0x8,%edx
    0.00 :	  6946d5:       0f 85 55 02 00 00       jne    694930 <CheckForSerializableConflictOut+0x2d0>
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946db:       8b 35 77 e0 4d 00       mov    0x4de077(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  6946e1:       89 ca                   mov    %ecx,%edx
    0.00 :	  6946e3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6946e6:       e8 35 04 11 00          callq  7a4b20 <HeapTupleSatisfiesVacuum>
         :	        switch (htsvResult)
    0.00 :	  6946eb:       83 f8 04                cmp    $0x4,%eax
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946ee:       89 c3                   mov    %eax,%ebx
         :	        switch (htsvResult)
    0.00 :	  6946f0:       76 3e                   jbe    694730 <CheckForSerializableConflictOut+0xd0>
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  6946f2:       ba e0 da 8a 00          mov    $0x8adae0,%edx
    0.00 :	  6946f7:       be 56 0f 00 00          mov    $0xf56,%esi
    0.00 :	  6946fc:       bf d3 d1 8a 00          mov    $0x8ad1d3,%edi
    0.00 :	  694701:       e8 1a 6d 0e 00          callq  77b420 <elog_start>
    0.00 :	  694706:       89 da                   mov    %ebx,%edx
    0.00 :	  694708:       be a0 d8 8a 00          mov    $0x8ad8a0,%esi
    0.00 :	  69470d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694712:       31 c0                   xor    %eax,%eax
    0.00 :	  694714:       e8 17 6b 0e 00          callq  77b230 <elog_finish>
    0.00 :	  694719:       e8 b2 4d dd ff          callq  4694d0 <abort@plt>
    0.00 :	  69471e:       66 90                   xchg   %ax,%ax
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694720:       31 ff                   xor    %edi,%edi
    0.00 :	  694722:       e8 c9 e1 ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694727:       e9 6d ff ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69472c:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
    0.00 :	  694730:       89 c0                   mov    %eax,%eax
    0.00 :	  694732:       ff 24 c5 c0 d9 8a 00    jmpq   *0x8ad9c0(,%rax,8)
    0.00 :	  694739:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        if (visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_RECENTLY_DEAD:
         :	                        if (!visible)
    0.00 :	  694740:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694743:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  694748:       0f 84 4b ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  69474e:       49 8b 7c 24 10          mov    0x10(%r12),%rdi
    0.00 :	  694753:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  694757:       89 d0                   mov    %edx,%eax
    0.00 :	  694759:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  69475e:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  694763:       0f 84 f7 00 00 00       je     694860 <CheckForSerializableConflictOut+0x200>
    0.00 :	  694769:       8b 5f 04                mov    0x4(%rdi),%ebx
         :
         :	        /*
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  69476c:       e8 0f c4 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  694771:       39 d8                   cmp    %ebx,%eax
    0.00 :	  694773:       0f 84 20 ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694779:       89 df                   mov    %ebx,%edi
    0.00 :	  69477b:       e8 70 21 e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  694780:       8b 35 d2 df 4d 00       mov    0x4ddfd2(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694786:       89 c7                   mov    %eax,%edi
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694788:       89 c3                   mov    %eax,%ebx
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  69478a:       e8 51 b8 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  69478f:       84 c0                   test   %al,%al
    0.00 :	  694791:       0f 85 02 ff ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  694797:       e8 e4 c3 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  69479c:       39 c3                   cmp    %eax,%ebx
    0.00 :	  69479e:       66 90                   xchg   %ax,%ax
    0.00 :	  6947a0:       0f 84 f3 fe ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947a6:       48 8b 3d 53 92 4e 00    mov    0x4e9253(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6947ad:       31 f6                   xor    %esi,%esi
         :	                return;
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
    0.00 :	  6947af:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947b2:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6947b9:       e8 32 b3 ff ff          callq  68faf0 <LWLockAcquire>
         :	        sxid = (SERIALIZABLEXID *)
    0.00 :	  6947be:       48 8b 3d 93 9f 4e 00    mov    0x4e9f93(%rip),%rdi        # b7e758 <SerializableXidHash>
    0.00 :	  6947c5:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6947c9:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6947cb:       31 d2                   xor    %edx,%edx
    0.00 :	  6947cd:       e8 ce fe 0e 00          callq  7846a0 <hash_search>
         :	                hash_search(SerializableXidHash, &sxidtag, HASH_FIND, NULL);
         :	        if (!sxid)
    0.00 :	  6947d2:       48 85 c0                test   %rax,%rax
    0.00 :	  6947d5:       0f 84 c5 01 00 00       je     6949a0 <CheckForSerializableConflictOut+0x340>
         :
         :	                /* It's not serializable or otherwise not important. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :	        sxact = sxid->myXact;
    0.00 :	  6947db:       4c 8b 60 08             mov    0x8(%rax),%r12
         :	        Assert(TransactionIdEquals(sxact->topXid, xid));
         :	        if (sxact == MySerializableXact || SxactIsDoomed(sxact))
    0.00 :	  6947df:       48 8b 0d da 9e 4e 00    mov    0x4e9eda(%rip),%rcx        # b7e6c0 <MySerializableXact>
    0.00 :	  6947e6:       49 39 cc                cmp    %rcx,%r12
    0.00 :	  6947e9:       0f 84 b1 00 00 00       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6947ef:       41 8b 54 24 7c          mov    0x7c(%r12),%edx
    0.00 :	  6947f4:       f6 c2 08                test   $0x8,%dl
    0.00 :	  6947f7:       0f 85 a3 00 00 00       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	         * We have a conflict out to a transaction which has a conflict out to a
         :	         * summarized transaction.  That summarized transaction must have
         :	         * committed first, and we can't tell when it committed in relation to our
         :	         * snapshot acquisition, so something needs to be canceled.
         :	         */
         :	        if (SxactHasSummaryConflictOut(sxact))
    0.00 :	  6947fd:       f6 c6 04                test   $0x4,%dh
    0.00 :	  694800:       0f 84 b2 00 00 00       je     6948b8 <CheckForSerializableConflictOut+0x258>
         :	        {
         :	                if (!SxactIsPrepared(sxact))
    0.00 :	  694806:       f6 c2 02                test   $0x2,%dl
    0.00 :	  694809:       0f 85 39 03 00 00       jne    694b48 <CheckForSerializableConflictOut+0x4e8>
         :	                {
         :	                        sxact->flags |= SXACT_FLAG_DOOMED;
    0.00 :	  69480f:       83 ca 08                or     $0x8,%edx
    0.00 :	  694812:       41 89 54 24 7c          mov    %edx,0x7c(%r12)
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694817:       48 8b 3d e2 91 4e 00    mov    0x4e91e2(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  69481e:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694825:       e8 76 ab ff ff          callq  68f3a0 <LWLockRelease>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  69482a:       e9 6a fe ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69482f:       90                      nop
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
         :	        {
         :	                case HEAPTUPLE_LIVE:
         :	                        if (visible)
    0.00 :	  694830:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694833:       0f 85 60 fe ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694839:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  69483e:       bb 02 00 00 00          mov    $0x2,%ebx
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694843:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694847:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  69484c:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694851:       0f 84 15 ff ff ff       je     69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  694857:       8b 1a                   mov    (%rdx),%ebx
    0.00 :	  694859:       e9 0e ff ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  69485e:       66 90                   xchg   %ax,%ax
         :	                        if (!visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  694860:       84 d2                   test   %dl,%dl
    0.00 :	  694862:       0f 88 01 ff ff ff       js     694769 <CheckForSerializableConflictOut+0x109>
    0.00 :	  694868:       e8 b3 28 e0 ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  69486d:       89 c3                   mov    %eax,%ebx
    0.00 :	  69486f:       90                      nop
    0.00 :	  694870:       e9 f7 fe ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
         :	                /* This write was already in our snapshot; no conflict. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :
         :	        if (RWConflictExists(MySerializableXact, sxact))
    0.00 :	  694875:       48 8b 3d 44 9e 4e 00    mov    0x4e9e44(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69487c:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  69487f:       e8 1c cc ff ff          callq  6914a0 <RWConflictExists>
    0.00 :	  694884:       84 c0                   test   %al,%al
    0.00 :	  694886:       75 18                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
    0.00 :	  694888:       48 8b 3d 31 9e 4e 00    mov    0x4e9e31(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69488f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  694892:       e8 79 c5 ff ff          callq  690e10 <FlagRWConflict>
    0.00 :	  694897:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  69489e:       00 00 
         :	        LWLockRelease(SerializableXactHashLock);
    0.00 :	  6948a0:       48 8b 3d 59 91 4e 00    mov    0x4e9159(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6948a7:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6948ae:       e8 ed aa ff ff          callq  68f3a0 <LWLockRelease>
    0.00 :	  6948b3:       e9 e1 fd ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  6948b8:       f6 41 7c 20             testb  $0x20,0x7c(%rcx)
    0.00 :	  6948bc:       74 10                   je     6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  6948be:       89 d0                   mov    %edx,%eax
    0.00 :	  6948c0:       25 01 04 00 00          and    $0x401,%eax
    0.00 :	  6948c5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  6948c8:       0f 84 e9 01 00 00       je     694ab7 <CheckForSerializableConflictOut+0x457>
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948ce:       e8 3d 2d 11 00          callq  7a7610 <GetTransactionSnapshot>
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948d3:       8b 70 08                mov    0x8(%rax),%esi
    0.00 :	  6948d6:       89 df                   mov    %ebx,%edi
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948d8:       49 89 c5                mov    %rax,%r13
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948db:       e8 00 b7 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6948e0:       84 c0                   test   %al,%al
    0.00 :	  6948e2:       75 bc                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
    0.00 :	  6948e4:       41 8b 75 0c             mov    0xc(%r13),%esi
    0.00 :	  6948e8:       89 df                   mov    %ebx,%edi
    0.00 :	  6948ea:       e8 81 b7 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  6948ef:       84 c0                   test   %al,%al
    0.00 :	  6948f1:       75 82                   jne    694875 <CheckForSerializableConflictOut+0x215>
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  6948f3:       41 8b 75 18             mov    0x18(%r13),%esi
    0.00 :	  6948f7:       85 f6                   test   %esi,%esi
    0.00 :	  6948f9:       74 a5                   je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	        {
         :	                if (xid == snap->xip[i])
    0.00 :	  6948fb:       49 8b 45 10             mov    0x10(%r13),%rax
    0.00 :	  6948ff:       31 d2                   xor    %edx,%edx
    0.00 :	  694901:       3b 18                   cmp    (%rax),%ebx
    0.00 :	  694903:       48 89 c1                mov    %rax,%rcx
    0.00 :	  694906:       75 17                   jne    69491f <CheckForSerializableConflictOut+0x2bf>
    0.00 :	  694908:       e9 68 ff ff ff          jmpq   694875 <CheckForSerializableConflictOut+0x215>
    0.00 :	  69490d:       0f 1f 00                nopl   (%rax)
    0.00 :	  694910:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  694913:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  694917:       39 c3                   cmp    %eax,%ebx
    0.00 :	  694919:       0f 84 56 ff ff ff       je     694875 <CheckForSerializableConflictOut+0x215>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  69491f:       83 c2 01                add    $0x1,%edx
    0.00 :	  694922:       39 f2                   cmp    %esi,%edx
    0.00 :	  694924:       72 ea                   jb     694910 <CheckForSerializableConflictOut+0x2b0>
    0.00 :	  694926:       e9 75 ff ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  69492b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
         :	        {
         :	                ereport(ERROR,
    0.00 :	  694930:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694933:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694938:       ba 30 0f 00 00          mov    $0xf30,%edx
    0.00 :	  69493d:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694942:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694947:       e8 74 61 0e 00          callq  77aac0 <errstart>
    0.00 :	  69494c:       84 c0                   test   %al,%al
    0.00 :	  69494e:       0f 84 c5 fd ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694954:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694959:       31 c0                   xor    %eax,%eax
    0.00 :	  69495b:       e8 40 73 0e 00          callq  77bca0 <errhint>
    0.00 :	  694960:       bf 48 d8 8a 00          mov    $0x8ad848,%edi
    0.00 :	  694965:       41 89 c5                mov    %eax,%r13d
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        ereport(ERROR,
    0.00 :	  694968:       31 c0                   xor    %eax,%eax
    0.00 :	  69496a:       e8 11 7a 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  69496f:       89 c3                   mov    %eax,%ebx
    0.00 :	  694971:       bf 48 d3 8a 00          mov    $0x8ad348,%edi
    0.00 :	  694976:       31 c0                   xor    %eax,%eax
    0.00 :	  694978:       e8 23 7f 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69497d:       bf 04 00 00 01          mov    $0x1000004,%edi
    0.00 :	  694982:       41 89 c4                mov    %eax,%r12d
    0.00 :	  694985:       e8 c6 83 0e 00          callq  77cd50 <errcode>
    0.00 :	  69498a:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  69498d:       89 c7                   mov    %eax,%edi
    0.00 :	  69498f:       89 da                   mov    %ebx,%edx
    0.00 :	  694991:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694994:       31 c0                   xor    %eax,%eax
    0.00 :	  694996:       e8 45 5c 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69499b:       e9 79 fd ff ff          jmpq   694719 <CheckForSerializableConflictOut+0xb9>
         :	        SerCommitSeqNo val;
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
    0.00 :	  6949a0:       48 8b 3d 59 90 4e 00    mov    0x4e9059(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6949a7:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6949ac:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
    0.00 :	  6949b3:       e8 38 b1 ff ff          callq  68faf0 <LWLockAcquire>
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949b8:       48 8b 05 79 9d 4e 00    mov    0x4e9d79(%rip),%rax        # b7e738 <oldSerXidControl>
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949bf:       48 8b 3d 3a 90 4e 00    mov    0x4e903a(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949c6:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949ca:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
         :	        tailXid = oldSerXidControl->tailXid;
    0.00 :	  6949d1:       44 8b 68 08             mov    0x8(%rax),%r13d
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949d5:       e8 c6 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :
         :	        if (!TransactionIdIsValid(headXid))
    0.00 :	  6949da:       45 85 e4                test   %r12d,%r12d
    0.00 :	  6949dd:       0f 84 bd fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return 0;
         :
         :	        Assert(TransactionIdIsValid(tailXid));
         :
         :	        if (TransactionIdPrecedes(xid, tailXid)
    0.00 :	  6949e3:       44 89 ee                mov    %r13d,%esi
    0.00 :	  6949e6:       89 df                   mov    %ebx,%edi
    0.00 :	  6949e8:       e8 f3 b5 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6949ed:       84 c0                   test   %al,%al
    0.00 :	  6949ef:       0f 85 ab fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6949f5:       44 89 e6                mov    %r12d,%esi
    0.00 :	  6949f8:       89 df                   mov    %ebx,%edi
    0.00 :	  6949fa:       e8 41 b6 e2 ff          callq  4c0040 <TransactionIdFollows>
    0.00 :	  6949ff:       84 c0                   test   %al,%al
    0.00 :	  694a01:       0f 85 99 fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
    0.00 :	  694a07:       89 de                   mov    %ebx,%esi
    0.00 :	  694a09:       89 da                   mov    %ebx,%edx
    0.00 :	  694a0b:       bf e0 e6 b7 00          mov    $0xb7e6e0,%edi
    0.00 :	  694a10:       c1 ee 0a                shr    $0xa,%esi
    0.00 :	  694a13:       81 e6 ff ff 1f 00       and    $0x1fffff,%esi
    0.00 :	  694a19:       e8 02 1a e3 ff          callq  4c6420 <SimpleLruReadPage_ReadOnly>
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a1e:       48 8b 15 bb 9c 4e 00    mov    0x4e9cbb(%rip),%rdx        # b7e6e0 <OldSerXidSlruCtlData>
    0.00 :	  694a25:       48 98                   cltq   
    0.00 :	  694a27:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  694a2a:       81 e1 ff 03 00 00       and    $0x3ff,%ecx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a30:       48 8b 3d c9 8f 4e 00    mov    0x4e8fc9(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a37:       48 8b 52 10             mov    0x10(%rdx),%rdx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a3b:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a42:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  694a46:       4c 8b 24 c8             mov    (%rax,%rcx,8),%r12
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a4a:       e8 51 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :	                 * got pushed out to SLRU storage for "old committed" transactions.
         :	                 */
         :	                SerCommitSeqNo conflictCommitSeqNo;
         :
         :	                conflictCommitSeqNo = OldSerXidGetMinConflictCommitSeqNo(xid);
         :	                if (conflictCommitSeqNo != 0)
    0.00 :	  694a4f:       4d 85 e4                test   %r12,%r12
    0.00 :	  694a52:       0f 84 48 fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                {
         :	                        if (conflictCommitSeqNo != InvalidSerCommitSeqNo
    0.00 :	  694a58:       49 83 fc ff             cmp    $0xffffffffffffffff,%r12
    0.00 :	  694a5c:       74 77                   je     694ad5 <CheckForSerializableConflictOut+0x475>
    0.00 :	  694a5e:       48 8b 05 5b 9c 4e 00    mov    0x4e9c5b(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694a65:       f6 40 7c 20             testb  $0x20,0x7c(%rax)
    0.00 :	  694a69:       74 06                   je     694a71 <CheckForSerializableConflictOut+0x411>
    0.00 :	  694a6b:       4c 39 60 18             cmp    %r12,0x18(%rax)
    0.00 :	  694a6f:       72 6b                   jb     694adc <CheckForSerializableConflictOut+0x47c>
         :	                                && (!SxactIsReadOnly(MySerializableXact)
         :	                                        || conflictCommitSeqNo
         :	                                        <= MySerializableXact->SeqNo.lastCommitBeforeSnapshot))
         :	                                ereport(ERROR,
    0.00 :	  694a71:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694a74:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694a79:       ba 89 0f 00 00          mov    $0xf89,%edx
    0.00 :	  694a7e:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694a83:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694a88:       e8 33 60 0e 00          callq  77aac0 <errstart>
    0.00 :	  694a8d:       84 c0                   test   %al,%al
    0.00 :	  694a8f:       0f 84 84 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694a95:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694a9a:       31 c0                   xor    %eax,%eax
    0.00 :	  694a9c:       e8 ff 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694aa1:       89 de                   mov    %ebx,%esi
    0.00 :	  694aa3:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694aa6:       bf e0 d8 8a 00          mov    $0x8ad8e0,%edi
    0.00 :	  694aab:       31 c0                   xor    %eax,%eax
    0.00 :	  694aad:       e8 ce 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694ab2:       e9 b8 fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  694ab7:       83 e2 10                and    $0x10,%edx
    0.00 :	  694aba:       0f 84 e0 fd ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ac0:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  694ac5:       48 39 41 18             cmp    %rax,0x18(%rcx)
    0.00 :	  694ac9:       0f 83 ff fd ff ff       jae    6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  694acf:       90                      nop
    0.00 :	  694ad0:       e9 cb fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ad5:       48 8b 05 e4 9b 4e 00    mov    0x4e9be4(%rip),%rax        # b7e6c0 <MySerializableXact>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on conflict out to old pivot %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        if (SxactHasSummaryConflictIn(MySerializableXact)
    0.00 :	  694adc:       f6 40 7d 02             testb  $0x2,0x7d(%rax)
    0.00 :	  694ae0:       75 0d                   jne    694aef <CheckForSerializableConflictOut+0x48f>
    0.00 :	  694ae2:       48 8d 78 30             lea    0x30(%rax),%rdi
    0.00 :	  694ae6:       e8 25 ea fe ff          callq  683510 <SHMQueueEmpty>
    0.00 :	  694aeb:       84 c0                   test   %al,%al
    0.00 :	  694aed:       75 46                   jne    694b35 <CheckForSerializableConflictOut+0x4d5>
         :	                                || !SHMQueueEmpty(&MySerializableXact->inConflicts))
         :	                                ereport(ERROR,
    0.00 :	  694aef:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694af2:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694af7:       ba 91 0f 00 00          mov    $0xf91,%edx
    0.00 :	  694afc:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b01:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b06:       e8 b5 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b0b:       84 c0                   test   %al,%al
    0.00 :	  694b0d:       0f 84 06 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b13:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b18:       31 c0                   xor    %eax,%eax
    0.00 :	  694b1a:       e8 81 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b1f:       89 de                   mov    %ebx,%esi
    0.00 :	  694b21:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b24:       bf 18 d9 8a 00          mov    $0x8ad918,%edi
    0.00 :	  694b29:       31 c0                   xor    %eax,%eax
    0.00 :	  694b2b:       e8 50 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694b30:       e9 3a fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on identification as a pivot, with conflict out to old committed transaction %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        MySerializableXact->flags |= SXACT_FLAG_SUMMARY_CONFLICT_OUT;
    0.00 :	  694b35:       48 8b 05 84 9b 4e 00    mov    0x4e9b84(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694b3c:       81 48 7c 00 04 00 00    orl    $0x400,0x7c(%rax)
    0.00 :	  694b43:       e9 58 fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694b48:       48 8b 3d b1 8e 4e 00    mov    0x4e8eb1(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  694b4f:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694b56:       e8 45 a8 ff ff          callq  68f3a0 <LWLockRelease>
         :	                        ereport(ERROR,
    0.00 :	  694b5b:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694b5e:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694b63:       ba b8 0f 00 00          mov    $0xfb8,%edx
    0.00 :	  694b68:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b6d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b72:       e8 49 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b77:       84 c0                   test   %al,%al
    0.00 :	  694b79:       0f 84 9a fb ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b7f:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b84:       31 c0                   xor    %eax,%eax
    0.00 :	  694b86:       e8 15 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b8b:       bf 80 d9 8a 00          mov    $0x8ad980,%edi
    0.00 :	  694b90:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b93:       e9 d0 fd ff ff          jmpq   694968 <CheckForSerializableConflictOut+0x308>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   21.43 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000069b9e0 <check_stack_depth>:
         :	 * overflow as an unrecoverable SIGSEGV, so we want to error out ourselves
         :	 * before hitting the hardware limit.
         :	 */
         :	void
         :	check_stack_depth(void)
         :	{
   14.29 :	  69b9e0:       55                      push   %rbp
    0.00 :	  69b9e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  69b9e4:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
   21.43 :	  69b9e8:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    7.14 :	  69b9ec:       48 83 ec 20             sub    $0x20,%rsp
         :	        long            stack_depth;
         :
         :	        /*
         :	         * Compute distance from reference point to my local variables
         :	         */
         :	        stack_depth = (long) (stack_base_ptr - &stack_top_loc);
    0.00 :	  69b9f0:       48 8b 0d f9 2d 4e 00    mov    0x4e2df9(%rip),%rcx        # b7e7f0 <stack_base_ptr>
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    7.14 :	  69b9f7:       48 8d 45 ef             lea    -0x11(%rbp),%rax
    7.14 :	  69b9fb:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  69b9fe:       48 29 c2                sub    %rax,%rdx
    0.00 :	  69ba01:       48 89 d0                mov    %rdx,%rax
         :	         * The test on stack_base_ptr prevents us from erroring out if called
         :	         * during process setup or in a non-backend process.  Logically it should
         :	         * be done first, but putting it here avoids wasting cycles during normal
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
    0.00 :	  69ba04:       48 c1 fa 3f             sar    $0x3f,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    7.14 :	  69ba08:       48 31 d0                xor    %rdx,%rax
    0.00 :	  69ba0b:       48 29 d0                sub    %rdx,%rax
    0.00 :	  69ba0e:       48 39 05 a3 cd 4c 00    cmp    %rax,0x4ccda3(%rip)        # b687b8 <max_stack_depth_bytes>
    0.00 :	  69ba15:       7d 05                   jge    69ba1c <check_stack_depth+0x3c>
    0.00 :	  69ba17:       48 85 c9                test   %rcx,%rcx
    0.00 :	  69ba1a:       75 0a                   jne    69ba26 <check_stack_depth+0x46>
         :	                                 errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), "
         :	                          "after ensuring the platform's stack depth limit is adequate.",
         :	                                                 max_stack_depth)));
         :	        }
         :	#endif   /* IA64 */
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
   14.29 :	  69ba1c:       48 8b 5d f0             mov    -0x10(%rbp),%rbx
    0.00 :	  69ba20:       4c 8b 65 f8             mov    -0x8(%rbp),%r12
    0.00 :	  69ba24:       c9                      leaveq 
   21.43 :	  69ba25:       c3                      retq   
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
         :	                stack_base_ptr != NULL)
         :	        {
         :	                ereport(ERROR,
    0.00 :	  69ba26:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  69ba29:       b9 e0 00 8b 00          mov    $0x8b00e0,%ecx
    0.00 :	  69ba2e:       ba 19 0c 00 00          mov    $0xc19,%edx
    0.00 :	  69ba33:       be d0 e8 8a 00          mov    $0x8ae8d0,%esi
    0.00 :	  69ba38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  69ba3d:       e8 7e f0 0d 00          callq  77aac0 <errstart>
    0.00 :	  69ba42:       84 c0                   test   %al,%al
    0.00 :	  69ba44:       75 05                   jne    69ba4b <check_stack_depth+0x6b>
    0.00 :	  69ba46:       e8 85 da dc ff          callq  4694d0 <abort@plt>
    0.00 :	  69ba4b:       8b 35 5b cd 4c 00       mov    0x4ccd5b(%rip),%esi        # b687ac <max_stack_depth>
    0.00 :	  69ba51:       bf 60 f0 8a 00          mov    $0x8af060,%edi
    0.00 :	  69ba56:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba58:       e8 43 02 0e 00          callq  77bca0 <errhint>
    0.00 :	  69ba5d:       bf 00 ea 8a 00          mov    $0x8aea00,%edi
    0.00 :	  69ba62:       41 89 c4                mov    %eax,%r12d
    0.00 :	  69ba65:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba67:       e8 34 0e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69ba6c:       bf 05 01 00 01          mov    $0x1000105,%edi
    0.00 :	  69ba71:       89 c3                   mov    %eax,%ebx
    0.00 :	  69ba73:       e8 d8 12 0e 00          callq  77cd50 <errcode>
    0.00 :	  69ba78:       44 89 e2                mov    %r12d,%edx
    0.00 :	  69ba7b:       89 c7                   mov    %eax,%edi
    0.00 :	  69ba7d:       89 de                   mov    %ebx,%esi
    0.00 :	  69ba7f:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba81:       e8 5a eb 0d 00          callq  77a5e0 <errfinish>
    0.00 :	  69ba86:       eb be                   jmp    69ba46 <check_stack_depth+0x66>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   42.86 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:615
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a1a0 <ResourceOwnerRememberBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a1a0:       55                      push   %rbp
         :	        if (owner != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
    7.14 :	  79a1a1:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a1a4:       48 89 e5                mov    %rsp,%rbp
         :	        if (owner != NULL)
    0.00 :	  79a1a7:       74 0f                   je     79a1b8 <ResourceOwnerRememberBuffer+0x18>
         :	        {
         :	                Assert(owner->nbuffers < owner->maxbuffers);
         :	                owner->buffers[owner->nbuffers] = buffer;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
   21.43 :	  79a1a9:       48 63 57 20             movslq 0x20(%rdi),%rdx
    0.00 :	  79a1ad:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  79a1b1:       89 34 90                mov    %esi,(%rax,%rdx,4)
         :	                owner->nbuffers++;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:615
   42.86 :	  79a1b4:       83 47 20 01             addl   $0x1,0x20(%rdi)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
   28.57 :	  79a1b8:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1025
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1038
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1037
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1027
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1029
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1037
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1040
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbac0 <ExecHashGetBucketAndBatch>:
         :	void
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
    0.00 :	  5bbac0:       55                      push   %rbp
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1027
    8.33 :	  5bbac1:       44 8b 47 40             mov    0x40(%rdi),%r8d
         :	void
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
    0.00 :	  5bbac5:       49 89 c9                mov    %rcx,%r9
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bbac8:       8b 07                   mov    (%rdi),%eax
         :	void
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1025
   25.00 :	  5bbaca:       48 89 e5                mov    %rsp,%rbp
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1029
    8.33 :	  5bbacd:       41 83 f8 01             cmp    $0x1,%r8d
    0.00 :	  5bbad1:       76 1d                   jbe    5bbaf0 <ExecHashGetBucketAndBatch+0x30>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bbad3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bbad6:       21 f0                   and    %esi,%eax
    0.00 :	  5bbad8:       89 02                   mov    %eax,(%rdx)
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bbada:       8b 4f 04                mov    0x4(%rdi),%ecx
    0.00 :	  5bbadd:       41 8d 40 ff             lea    -0x1(%r8),%eax
    0.00 :	  5bbae1:       d3 ee                   shr    %cl,%esi
    0.00 :	  5bbae3:       21 f0                   and    %esi,%eax
    0.00 :	  5bbae5:       41 89 01                mov    %eax,(%r9)
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = 0;
         :	        }
         :	}
    0.00 :	  5bbae8:       c9                      leaveq 
    0.00 :	  5bbae9:       c3                      retq   
    0.00 :	  5bbaea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1037
   16.67 :	  5bbaf0:       83 e8 01                sub    $0x1,%eax
    8.33 :	  5bbaf3:       21 f0                   and    %esi,%eax
    0.00 :	  5bbaf5:       89 02                   mov    %eax,(%rdx)
         :	                *batchno = 0;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1038
   25.00 :	  5bbaf7:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1040
    8.33 :	  5bbafd:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   58.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1872
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675260 <SyncOneBuffer>:
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675260:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675261:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675266:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    8.33 :	  675269:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  67526d:       48 63 df                movslq %edi,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675270:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  675274:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  675278:       48 c1 e3 06             shl    $0x6,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    8.33 :	  67527c:       48 83 ec 20             sub    $0x20,%rsp
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  675280:       48 03 1d 79 a8 54 00    add    0x54a879(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675287:       41 89 f5                mov    %esi,%r13d
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    8.33 :	  67528a:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  67528e:       f0 86 07                lock xchg %al,(%rdi)
   58.33 :	  675291:       84 c0                   test   %al,%al
    0.00 :	  675293:       75 5b                   jne    6752f0 <SyncOneBuffer+0x90>
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  675295:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  675298:       85 c0                   test   %eax,%eax
    0.00 :	  67529a:       75 0f                   jne    6752ab <SyncOneBuffer+0x4b>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1872
    8.33 :	  67529c:       0f b7 43 16             movzwl 0x16(%rbx),%eax
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752a0:       41 bc 02 00 00 00       mov    $0x2,%r12d
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  6752a6:       66 85 c0                test   %ax,%ax
    0.00 :	  6752a9:       74 08                   je     6752b3 <SyncOneBuffer+0x53>
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
    0.00 :	  6752ab:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752ae:       45 84 ed                test   %r13b,%r13b
    0.00 :	  6752b1:       75 2d                   jne    6752e0 <SyncOneBuffer+0x80>
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
         :	                return result;
         :	        }
         :
         :	        if (!(bufHdr->flags & BM_VALID) || !(bufHdr->flags & BM_DIRTY))
    0.00 :	  6752b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752b7:       a8 02                   test   $0x2,%al
    0.00 :	  6752b9:       74 08                   je     6752c3 <SyncOneBuffer+0x63>
    0.00 :	  6752bb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752bf:       a8 01                   test   $0x1,%al
    0.00 :	  6752c1:       75 45                   jne    675308 <SyncOneBuffer+0xa8>
         :	        {
         :	                /* It's clean, so nothing to do */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752c3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752c7:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6752ca:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6752ce:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6752d2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
    8.33 :	  6752d6:       c9                      leaveq 
    0.00 :	  6752d7:       c3                      retq   
    0.00 :	  6752d8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  6752df:       00 
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752e0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752e3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752e7:       eb de                   jmp    6752c7 <SyncOneBuffer+0x67>
    0.00 :	  6752e9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
    0.00 :	  6752f0:       ba 4e 07 00 00          mov    $0x74e,%edx
    0.00 :	  6752f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6752fa:       e8 41 ad 01 00          callq  690040 <s_lock>
    0.00 :	  6752ff:       eb 94                   jmp    675295 <SyncOneBuffer+0x35>
    0.00 :	  675301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  675308:       48 89 df                mov    %rbx,%rdi
         :	        FlushBuffer(bufHdr, NULL);
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
    0.00 :	  67530b:       41 83 cc 01             or     $0x1,%r12d
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  67530f:       e8 bc f8 ff ff          callq  674bd0 <PinBuffer_Locked>
         :	        LWLockAcquire(bufHdr->content_lock, LW_SHARED);
    0.00 :	  675314:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675318:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67531d:       e8 ce a7 01 00          callq  68faf0 <LWLockAcquire>
         :
         :	        FlushBuffer(bufHdr, NULL);
    0.00 :	  675322:       31 f6                   xor    %esi,%esi
    0.00 :	  675324:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675327:       e8 24 fc ff ff          callq  674f50 <FlushBuffer>
         :
         :	        LWLockRelease(bufHdr->content_lock);
    0.00 :	  67532c:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675330:       e8 6b a0 01 00          callq  68f3a0 <LWLockRelease>
         :	        UnpinBuffer(bufHdr, true);
    0.00 :	  675335:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67533a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  67533d:       e8 ee f9 ff ff          callq  674d30 <UnpinBuffer>
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  675342:       eb 83                   jmp    6752c7 <SyncOneBuffer+0x67>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1781
   30.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1797
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1779
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006756f0 <BgBufferSync>:
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756f0:       55                      push   %rbp
    0.00 :	  6756f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6756f4:       41 57                   push   %r15
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  6756f6:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6756fa:       48 8d 7d d4             lea    -0x2c(%rbp),%rdi
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756fe:       41 56                   push   %r14
    0.00 :	  675700:       41 55                   push   %r13
    0.00 :	  675702:       41 54                   push   %r12
    0.00 :	  675704:       53                      push   %rbx
    0.00 :	  675705:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675709:       e8 22 1d 00 00          callq  677430 <StrategySyncStart>
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67570e:       44 8b 55 d0             mov    -0x30(%rbp),%r10d
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675712:       44 8b 1d 77 2f 4f 00    mov    0x4f2f77(%rip),%r11d        # b68690 <bgwriter_lru_maxpages>
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675719:       89 c6                   mov    %eax,%esi
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67571b:       45 89 d1                mov    %r10d,%r9d
    0.00 :	  67571e:       4c 01 0d 5b a3 54 00    add    %r9,0x54a35b(%rip)        # bbfa80 <BgWriterStats+0x40>
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675725:       45 85 db                test   %r11d,%r11d
    0.00 :	  675728:       0f 8e a2 02 00 00       jle    6759d0 <BgBufferSync+0x2e0>
         :	         * see if we are still ahead of the clock sweep, and if so, how many
         :	         * buffers we could scan before we'd catch up with it and "lap" it. Note:
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
    0.00 :	  67572e:       80 3d 6f 79 50 00 00    cmpb   $0x0,0x50796f(%rip)        # b7d0a4 <saved_info_valid.17628>
    0.00 :	  675735:       0f 85 4d 01 00 00       jne    675888 <BgBufferSync+0x198>
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  67573b:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	#ifdef BGW_DEBUG
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
    0.00 :	  675740:       89 05 52 79 50 00       mov    %eax,0x507952(%rip)        # b7d098 <next_to_clean.17631>
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  675746:       8b 3d d4 33 4f 00       mov    0x4f33d4(%rip),%edi        # b68b20 <NBuffers>
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67574c:       8b 45 d4                mov    -0x2c(%rbp),%eax
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  67574f:       89 35 4b 79 50 00       mov    %esi,0x50794b(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  675755:       c6 05 48 79 50 00 01    movb   $0x1,0x507948(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  67575c:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67575f:       89 05 2f 79 50 00       mov    %eax,0x50792f(%rip)        # b7d094 <next_passes.17632>
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  675765:       89 05 31 79 50 00       mov    %eax,0x507931(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	         * Estimate how many reusable buffers there are between the current
         :	         * strategy point and where we've scanned ahead to, based on the smoothed
         :	         * density estimate.
         :	         */
         :	        bufs_ahead = NBuffers - bufs_to_lap;
         :	        reusable_buffers_est = (float) bufs_ahead / smoothed_density;
    0.00 :	  67576b:       89 f8                   mov    %edi,%eax
    0.00 :	  67576d:       2b 45 c4                sub    -0x3c(%rbp),%eax
    0.00 :	  675770:       f3 0f 2a c0             cvtsi2ss %eax,%xmm0
    0.00 :	  675774:       f3 0f 5e 05 24 2f 4f    divss  0x4f2f24(%rip),%xmm0        # b686a0 <smoothed_density.17634>
    0.00 :	  67577b:       00 
    0.00 :	  67577c:       f3 44 0f 2c f8          cvttss2si %xmm0,%r15d
         :	        /*
         :	         * Track a moving average of recent buffer allocations.  Here, rather than
         :	         * a true average we want a fast-attack, slow-decline behavior: we
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
    0.00 :	  675781:       f3 0f 10 05 07 79 50    movss  0x507907(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675788:       00 
    0.00 :	  675789:       0f 2e d0                ucomiss %xmm0,%xmm2
    0.00 :	  67578c:       0f 82 1e 02 00 00       jb     6759b0 <BgBufferSync+0x2c0>
         :	                smoothed_alloc = recent_alloc;
    0.00 :	  675792:       f3 0f 11 15 f6 78 50    movss  %xmm2,0x5078f6(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675799:       00 
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
         :	                        smoothing_samples;
         :
         :	        /* Scale the estimate by a GUC to allow more aggressive tuning. */
         :	        upcoming_alloc_est = (int) (smoothed_alloc * bgwriter_lru_multiplier);
    0.00 :	  67579a:       f3 0f 10 05 ee 78 50    movss  0x5078ee(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757a1:       00 
    0.00 :	  6757a2:       0f 5a c0                cvtps2pd %xmm0,%xmm0
    0.00 :	  6757a5:       f2 0f 59 05 eb 2e 4f    mulsd  0x4f2eeb(%rip),%xmm0        # b68698 <bgwriter_lru_multiplier>
    0.00 :	  6757ac:       00 
    0.00 :	  6757ad:       f2 0f 2c d0             cvttsd2si %xmm0,%edx
         :	         * kernel warnings on some platforms.  Once upcoming_alloc_est has gone to
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
    0.00 :	  6757b1:       85 d2                   test   %edx,%edx
    0.00 :	  6757b3:       75 0a                   jne    6757bf <BgBufferSync+0xcf>
         :	                smoothed_alloc = 0;
    0.00 :	  6757b5:       c7 05 d1 78 50 00 00    movl   $0x0,0x5078d1(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757bc:       00 00 00 
    0.00 :	  6757bf:       f3 0f 2a 15 29 2e 4f    cvtsi2ssl 0x4f2e29(%rip),%xmm2        # b685f0 <BgWriterDelay>
    0.00 :	  6757c6:       00 
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757c7:       45 89 fc                mov    %r15d,%r12d
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757ca:       f3 0f 10 05 16 49 23    movss  0x234916(%rip),%xmm0        # 8aa0e8 <__func__.17063+0x15>
    0.00 :	  6757d1:       00 
    0.00 :	  6757d2:       f3 0f 2a cf             cvtsi2ss %edi,%xmm1
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757d6:       48 8b 3d e3 50 54 00    mov    0x5450e3(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757dd:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  6757e1:       f3 0f 5e c8             divss  %xmm0,%xmm1
    0.00 :	  6757e5:       f3 0f 2c c1             cvttss2si %xmm1,%eax
    0.00 :	  6757e9:       45 8d 34 07             lea    (%r15,%rax,1),%r14d
    0.00 :	  6757ed:       41 39 d6                cmp    %edx,%r14d
    0.00 :	  6757f0:       44 0f 4c f2             cmovl  %edx,%r14d
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757f4:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  6757f7:       e8 74 56 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
    0.00 :	  6757fc:       8b 5d c4                mov    -0x3c(%rbp),%ebx
    0.00 :	  6757ff:       90                      nop
         :	        num_to_scan = bufs_to_lap;
         :	        num_written = 0;
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
    0.00 :	  675800:       85 db                   test   %ebx,%ebx
    0.00 :	  675802:       7e 09                   jle    67580d <BgBufferSync+0x11d>
    0.00 :	  675804:       45 39 e6                cmp    %r12d,%r14d
    0.00 :	  675807:       0f 8f 23 01 00 00       jg     675930 <BgBufferSync+0x240>
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
         :	                        reusable_buffers++;
         :	        }
         :
         :	        BgWriterStats.m_buf_written_clean += num_written;
    0.00 :	  67580d:       49 63 c5                movslq %r13d,%rax
    0.00 :	  675810:       48 01 05 49 a2 54 00    add    %rax,0x54a249(%rip)        # bbfa60 <BgWriterStats+0x20>
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675817:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
    0.00 :	  67581a:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67581d:       44 29 fa                sub    %r15d,%edx
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675820:       29 d8                   sub    %ebx,%eax
    0.00 :	  675822:       48 98                   cltq   
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
         :	        if (new_strategy_delta > 0 && new_recent_alloc > 0)
    0.00 :	  675824:       48 85 c0                test   %rax,%rax
    0.00 :	  675827:       7e 34                   jle    67585d <BgBufferSync+0x16d>
    0.00 :	  675829:       85 d2                   test   %edx,%edx
    0.00 :	  67582b:       74 30                   je     67585d <BgBufferSync+0x16d>
         :	        {
         :	                scans_per_alloc = (float) new_strategy_delta / (float) new_recent_alloc;
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  67582d:       f3 48 0f 2a c0          cvtsi2ss %rax,%xmm0
    0.00 :	  675832:       89 d0                   mov    %edx,%eax
    0.00 :	  675834:       f3 48 0f 2a c8          cvtsi2ss %rax,%xmm1
    0.00 :	  675839:       f3 0f 10 15 5f 2e 4f    movss  0x4f2e5f(%rip),%xmm2        # b686a0 <smoothed_density.17634>
    0.00 :	  675840:       00 
    0.00 :	  675841:       f3 0f 5e c1             divss  %xmm1,%xmm0
    0.00 :	  675845:       f3 0f 5c c2             subss  %xmm2,%xmm0
    0.00 :	  675849:       f3 0f 59 05 93 48 23    mulss  0x234893(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  675850:       00 
    0.00 :	  675851:       f3 0f 58 d0             addss  %xmm0,%xmm2
    0.00 :	  675855:       f3 0f 11 15 43 2e 4f    movss  %xmm2,0x4f2e43(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  67585c:       00 
         :	                         scans_per_alloc, smoothed_density);
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
    0.00 :	  67585d:       44 8b 55 c4             mov    -0x3c(%rbp),%r10d
    0.00 :	  675861:       31 c0                   xor    %eax,%eax
    0.00 :	  675863:       45 85 d2                test   %r10d,%r10d
    0.00 :	  675866:       75 0a                   jne    675872 <BgBufferSync+0x182>
    0.00 :	  675868:       44 8b 4d d0             mov    -0x30(%rbp),%r9d
    0.00 :	  67586c:       45 85 c9                test   %r9d,%r9d
    0.00 :	  67586f:       0f 94 c0                sete   %al
         :	}
    0.00 :	  675872:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  675876:       5b                      pop    %rbx
    0.00 :	  675877:       41 5c                   pop    %r12
    0.00 :	  675879:       41 5d                   pop    %r13
    0.00 :	  67587b:       41 5e                   pop    %r14
    0.00 :	  67587d:       41 5f                   pop    %r15
    0.00 :	  67587f:       c9                      leaveq 
    0.00 :	  675880:       c3                      retq   
    0.00 :	  675881:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
    0.00 :	  675888:       44 8b 45 d4             mov    -0x2c(%rbp),%r8d
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  67588c:       89 c1                   mov    %eax,%ecx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67588e:       8b 3d 8c 32 4f 00       mov    0x4f328c(%rip),%edi        # b68b20 <NBuffers>
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  675894:       2b 0d 06 78 50 00       sub    0x507806(%rip),%ecx        # b7d0a0 <prev_strategy_buf_id.17629>
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67589a:       44 89 c0                mov    %r8d,%eax
    0.00 :	  67589d:       2b 05 f9 77 50 00       sub    0x5077f9(%rip),%eax        # b7d09c <prev_strategy_passes.17630>
    0.00 :	  6758a3:       48 63 d7                movslq %edi,%rdx
    0.00 :	  6758a6:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  6758a9:       48 63 c9                movslq %ecx,%rcx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758ac:       48 98                   cltq   
    0.00 :	  6758ae:       48 0f af c2             imul   %rdx,%rax
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758b2:       8b 15 dc 77 50 00       mov    0x5077dc(%rip),%edx        # b7d094 <next_passes.17632>
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758b8:       48 01 c1                add    %rax,%rcx
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758bb:       89 d0                   mov    %edx,%eax
    0.00 :	  6758bd:       44 29 c0                sub    %r8d,%eax
    0.00 :	  6758c0:       85 c0                   test   %eax,%eax
    0.00 :	  6758c2:       0f 8e 23 01 00 00       jle    6759eb <BgBufferSync+0x2fb>
         :	                {
         :	                        /* we're one pass ahead of the strategy point */
         :	                        bufs_to_lap = strategy_buf_id - next_to_clean;
    0.00 :	  6758c8:       89 f0                   mov    %esi,%eax
    0.00 :	  6758ca:       2b 05 c8 77 50 00       sub    0x5077c8(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  6758d0:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758d3:       48 85 c9                test   %rcx,%rcx
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  6758d6:       89 35 c4 77 50 00       mov    %esi,0x5077c4(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  6758dc:       44 89 05 b9 77 50 00    mov    %r8d,0x5077b9(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	        saved_info_valid = true;
    0.00 :	  6758e3:       c6 05 ba 77 50 00 01    movb   $0x1,0x5077ba(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758ea:       0f 8e 2c 01 00 00       jle    675a1c <BgBufferSync+0x32c>
    0.00 :	  6758f0:       45 85 d2                test   %r10d,%r10d
    0.00 :	  6758f3:       0f 57 d2                xorps  %xmm2,%xmm2
    0.00 :	  6758f6:       0f 84 6f fe ff ff       je     67576b <BgBufferSync+0x7b>
         :	        {
         :	                scans_per_alloc = (float) strategy_delta / (float) recent_alloc;
    0.00 :	  6758fc:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  675901:       f3 48 0f 2a c1          cvtsi2ss %rcx,%xmm0
    0.00 :	  675906:       f3 0f 10 0d 92 2d 4f    movss  0x4f2d92(%rip),%xmm1        # b686a0 <smoothed_density.17634>
    0.00 :	  67590d:       00 
    0.00 :	  67590e:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  675912:       f3 0f 5c c1             subss  %xmm1,%xmm0
    0.00 :	  675916:       f3 0f 59 05 c6 47 23    mulss  0x2347c6(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  67591d:       00 
    0.00 :	  67591e:       f3 0f 58 c8             addss  %xmm0,%xmm1
    0.00 :	  675922:       f3 0f 11 0d 76 2d 4f    movss  %xmm1,0x4f2d76(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  675929:       00 
    0.00 :	  67592a:       e9 3c fe ff ff          jmpq   67576b <BgBufferSync+0x7b>
    0.00 :	  67592f:       90                      nop
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
    0.00 :	  675930:       8b 3d 62 77 50 00       mov    0x507762(%rip),%edi        # b7d098 <next_to_clean.17631>
    0.00 :	  675936:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67593b:       e8 20 f9 ff ff          callq  675260 <SyncOneBuffer>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1779
   20.00 :	  675940:       89 c2                   mov    %eax,%edx
         :
         :	                if (++next_to_clean >= NBuffers)
    0.00 :	  675942:       8b 05 50 77 50 00       mov    0x507750(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675948:       83 c0 01                add    $0x1,%eax
    0.00 :	  67594b:       3b 05 cf 31 4f 00       cmp    0x4f31cf(%rip),%eax        # b68b20 <NBuffers>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1781
   40.00 :	  675951:       89 05 41 77 50 00       mov    %eax,0x507741(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675957:       7c 11                   jl     67596a <BgBufferSync+0x27a>
         :	                {
         :	                        next_to_clean = 0;
         :	                        next_passes++;
    0.00 :	  675959:       83 05 34 77 50 00 01    addl   $0x1,0x507734(%rip)        # b7d094 <next_passes.17632>
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
         :
         :	                if (++next_to_clean >= NBuffers)
         :	                {
         :	                        next_to_clean = 0;
    0.00 :	  675960:       c7 05 2e 77 50 00 00    movl   $0x0,0x50772e(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675967:       00 00 00 
         :	                        next_passes++;
         :	                }
         :	                num_to_scan--;
    0.00 :	  67596a:       83 eb 01                sub    $0x1,%ebx
         :
         :	                if (buffer_state & BUF_WRITTEN)
    0.00 :	  67596d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675970:       74 26                   je     675998 <BgBufferSync+0x2a8>
         :	                {
         :	                        reusable_buffers++;
    0.00 :	  675972:       41 83 c4 01             add    $0x1,%r12d
         :	                        if (++num_written >= bgwriter_lru_maxpages)
    0.00 :	  675976:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  67597a:       44 3b 2d 0f 2d 4f 00    cmp    0x4f2d0f(%rip),%r13d        # b68690 <bgwriter_lru_maxpages>
    0.00 :	  675981:       0f 8c 79 fe ff ff       jl     675800 <BgBufferSync+0x110>
         :	                        {
         :	                                BgWriterStats.m_maxwritten_clean++;
    0.00 :	  675987:       48 83 05 d9 a0 54 00    addq   $0x1,0x54a0d9(%rip)        # bbfa68 <BgWriterStats+0x28>
    0.00 :	  67598e:       01 
         :	                                break;
    0.00 :	  67598f:       e9 79 fe ff ff          jmpq   67580d <BgBufferSync+0x11d>
    0.00 :	  675994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        }
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1797
   30.00 :	  675998:       83 e2 02                and    $0x2,%edx
         :	                        reusable_buffers++;
    0.00 :	  67599b:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  67599e:       41 83 dc ff             sbb    $0xffffffff,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
   10.00 :	  6759a2:       e9 59 fe ff ff          jmpq   675800 <BgBufferSync+0x110>
    0.00 :	  6759a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6759ae:       00 00 
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
         :	                smoothed_alloc = recent_alloc;
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
    0.00 :	  6759b0:       f3 0f 5c d0             subss  %xmm0,%xmm2
    0.00 :	  6759b4:       f3 0f 59 15 28 47 23    mulss  0x234728(%rip),%xmm2        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  6759bb:       00 
    0.00 :	  6759bc:       f3 0f 58 c2             addss  %xmm2,%xmm0
    0.00 :	  6759c0:       f3 0f 11 05 c8 76 50    movss  %xmm0,0x5076c8(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6759c7:       00 
    0.00 :	  6759c8:       e9 cd fd ff ff          jmpq   67579a <BgBufferSync+0xaa>
    0.00 :	  6759cd:       0f 1f 00                nopl   (%rax)
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759d0:       c6 05 cd 76 50 00 00    movb   $0x0,0x5076cd(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759d7:       48 83 c4 18             add    $0x18,%rsp
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759db:       b8 01 00 00 00          mov    $0x1,%eax
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759e0:       5b                      pop    %rbx
    0.00 :	  6759e1:       41 5c                   pop    %r12
    0.00 :	  6759e3:       41 5d                   pop    %r13
    0.00 :	  6759e5:       41 5e                   pop    %r14
    0.00 :	  6759e7:       41 5f                   pop    %r15
    0.00 :	  6759e9:       c9                      leaveq 
    0.00 :	  6759ea:       c3                      retq   
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  6759eb:       41 39 d0                cmp    %edx,%r8d
    0.00 :	  6759ee:       74 12                   je     675a02 <BgBufferSync+0x312>
         :	                        elog(DEBUG2, "bgwriter behind: bgw %u-%u strategy %u-%u delta=%ld",
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta);
         :	#endif
         :	                        next_to_clean = strategy_buf_id;
    0.00 :	  6759f0:       89 35 a2 76 50 00       mov    %esi,0x5076a2(%rip)        # b7d098 <next_to_clean.17631>
         :	                        next_passes = strategy_passes;
    0.00 :	  6759f6:       44 89 05 97 76 50 00    mov    %r8d,0x507697(%rip)        # b7d094 <next_passes.17632>
    0.00 :	  6759fd:       e9 d1 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a02:       8b 05 90 76 50 00       mov    0x507690(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675a08:       39 c6                   cmp    %eax,%esi
    0.00 :	  675a0a:       7f e4                   jg     6759f0 <BgBufferSync+0x300>
         :	                                 next_to_clean >= strategy_buf_id)
         :	                {
         :	                        /* on same pass, but ahead or at least not behind */
         :	                        bufs_to_lap = NBuffers - (next_to_clean - strategy_buf_id);
    0.00 :	  675a0c:       89 fa                   mov    %edi,%edx
    0.00 :	  675a0e:       29 c2                   sub    %eax,%edx
    0.00 :	  675a10:       89 d0                   mov    %edx,%eax
    0.00 :	  675a12:       01 f0                   add    %esi,%eax
    0.00 :	  675a14:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a17:       e9 b7 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  675a1c:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
    0.00 :	  675a21:       e9 45 fd ff ff          jmpq   67576b <BgBufferSync+0x7b>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004bffe0 <TransactionIdPrecedes>:
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
    0.00 :	  4bffe0:       55                      push   %rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   11.11 :	  4bffe1:       83 ff 02                cmp    $0x2,%edi
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   22.22 :	  4bffe4:       48 89 e5                mov    %rsp,%rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   11.11 :	  4bffe7:       76 17                   jbe    4c0000 <TransactionIdPrecedes+0x20>
    0.00 :	  4bffe9:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  4bffec:       76 12                   jbe    4c0000 <TransactionIdPrecedes+0x20>
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   33.33 :	  4bffee:       29 f7                   sub    %esi,%edi
         :	}
    0.00 :	  4bfff0:       c9                      leaveq 
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
   11.11 :	  4bfff1:       89 f8                   mov    %edi,%eax
   11.11 :	  4bfff3:       c1 e8 1f                shr    $0x1f,%eax
         :	}
    0.00 :	  4bfff6:       c3                      retq   
    0.00 :	  4bfff7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4bfffe:       00 00 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0000:       39 f7                   cmp    %esi,%edi
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
         :	}
    0.00 :	  4c0002:       c9                      leaveq 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0003:       0f 92 c0                setb   %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077e0d0 <FunctionCall1Coll>:
         :	 * directly-computed parameter list.  Note that neither arguments nor result
         :	 * are allowed to be NULL.
         :	 */
         :	Datum
         :	FunctionCall1Coll(FmgrInfo *flinfo, Oid collation, Datum arg1)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   11.11 :	  77e0d0:       55                      push   %rbp
   11.11 :	  77e0d1:       48 89 f8                mov    %rdi,%rax
    0.00 :	  77e0d4:       48 89 e5                mov    %rsp,%rbp
   11.11 :	  77e0d7:       48 81 ec b0 03 00 00    sub    $0x3b0,%rsp
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 1, collation, NULL, NULL);
    0.00 :	  77e0de:       48 89 bd 50 fc ff ff    mov    %rdi,-0x3b0(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
   11.11 :	  77e0e5:       48 c7 85 58 fc ff ff    movq   $0x0,-0x3a8(%rbp)
    0.00 :	  77e0ec:       00 00 00 00 
         :
         :	        fcinfo.arg[0] = arg1;
         :	        fcinfo.argnull[0] = false;
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e0f0:       48 8d bd 50 fc ff ff    lea    -0x3b0(%rbp),%rdi
         :	FunctionCall1Coll(FmgrInfo *flinfo, Oid collation, Datum arg1)
         :	{
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 1, collation, NULL, NULL);
   33.33 :	  77e0f7:       48 c7 85 60 fc ff ff    movq   $0x0,-0x3a0(%rbp)
    0.00 :	  77e0fe:       00 00 00 00 
    0.00 :	  77e102:       89 b5 68 fc ff ff       mov    %esi,-0x398(%rbp)
   22.22 :	  77e108:       c6 85 6c fc ff ff 00    movb   $0x0,-0x394(%rbp)
    0.00 :	  77e10f:       66 c7 85 6e fc ff ff    movw   $0x1,-0x392(%rbp)
    0.00 :	  77e116:       01 00 
         :
         :	        fcinfo.arg[0] = arg1;
    0.00 :	  77e118:       48 89 95 70 fc ff ff    mov    %rdx,-0x390(%rbp)
         :	        fcinfo.argnull[0] = false;
    0.00 :	  77e11f:       c6 45 90 00             movb   $0x0,-0x70(%rbp)
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e123:       ff 10                   callq  *(%rax)
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
    0.00 :	  77e125:       80 bd 6c fc ff ff 00    cmpb   $0x0,-0x394(%rbp)
    0.00 :	  77e12c:       75 02                   jne    77e130 <FunctionCall1Coll+0x60>
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
         :
         :	        return result;
         :	}
    0.00 :	  77e12e:       c9                      leaveq 
    0.00 :	  77e12f:       c3                      retq   
         :
         :	        result = FunctionCallInvoke(&fcinfo);
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
    0.00 :	  77e130:       ba 60 52 8d 00          mov    $0x8d5260,%edx
    0.00 :	  77e135:       be 16 05 00 00          mov    $0x516,%esi
    0.00 :	  77e13a:       bf b3 47 8d 00          mov    $0x8d47b3,%edi
    0.00 :	  77e13f:       e8 dc d2 ff ff          callq  77b420 <elog_start>
    0.00 :	  77e144:       48 8b 85 50 fc ff ff    mov    -0x3b0(%rbp),%rax
    0.00 :	  77e14b:       be 97 4c 8d 00          mov    $0x8d4c97,%esi
    0.00 :	  77e150:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  77e155:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	  77e158:       31 c0                   xor    %eax,%eax
    0.00 :	  77e15a:       e8 d1 d0 ff ff          callq  77b230 <elog_finish>
    0.00 :	  77e15f:       e8 6c b3 ce ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:452
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:452
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:468
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007832f0 <CHashSearch>:
         :	 * from the data in the hash table and return true.  If not, it will return
         :	 * false.
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
   11.11 :	  7832f0:       55                      push   %rbp
    0.00 :	  7832f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7832f4:       41 54                   push   %r12
    0.00 :	  7832f6:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7832f9:       53                      push   %rbx
    0.00 :	  7832fa:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7832fd:       48 83 ec 20             sub    $0x20,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  783301:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  783305:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783308:       e8 43 d0 d0 ff          callq  490350 <hash_any>
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  78330d:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  783311:       8b 7b 10                mov    0x10(%rbx),%edi
    0.00 :	  783314:       21 c7                   and    %eax,%edi
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783316:       89 fe                   mov    %edi,%esi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783318:       d3 ef                   shr    %cl,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:452
   11.11 :	  78331a:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  78331e:       89 fa                   mov    %edi,%edx
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783320:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  783324:       48 03 73 20             add    0x20(%rbx),%rsi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
   22.22 :	  783328:       d3 ea                   shr    %cl,%edx
    0.00 :	  78332a:       48 8b 0d 17 a6 3f 00    mov    0x3fa617(%rip),%rcx        # b7d948 <MyProc>
    0.00 :	  783331:       01 fa                   add    %edi,%edx
    0.00 :	  783333:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	  783337:       48 03 53 28             add    0x28(%rbx),%rdx
    0.00 :	  78333b:       48 89 91 e8 02 00 00    mov    %rdx,0x2e8(%rcx)
         :	        pg_memory_barrier();
    0.00 :	  783342:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
   22.22 :	  783347:       4c 8d 45 d0             lea    -0x30(%rbp),%r8
    0.00 :	  78334b:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  78334e:       89 c2                   mov    %eax,%edx
    0.00 :	  783350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  783353:       e8 48 f9 ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  783358:       80 7d e8 00             cmpb   $0x0,-0x18(%rbp)
    0.00 :	  78335c:       75 32                   jne    783390 <CHashSearch+0xa0>
         :	                           CHashNodeGetItem(scan.target_node) + table->desc.key_size,
         :	                           table->desc.element_size - table->desc.key_size);
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  78335e:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
   22.22 :	  783363:       48 8b 05 de a5 3f 00    mov    0x3fa5de(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  78336a:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  783371:       00 00 00 00 
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
         :	        if (!scan.found)
    0.00 :	  783375:       0f b6 45 e8             movzbl -0x18(%rbp),%eax
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
    0.00 :	  783379:       48 83 43 40 01          addq   $0x1,0x40(%rbx)
         :	        if (!scan.found)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:468
   11.11 :	  78337e:       84 c0                   test   %al,%al
    0.00 :	  783380:       75 05                   jne    783387 <CHashSearch+0x97>
         :	                CHashTableIncrementStatistic(table, CHS_Search_Failed);
    0.00 :	  783382:       48 83 43 48 01          addq   $0x1,0x48(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  783387:       48 83 c4 20             add    $0x20,%rsp
    0.00 :	  78338b:       5b                      pop    %rbx
    0.00 :	  78338c:       41 5c                   pop    %r12
    0.00 :	  78338e:       c9                      leaveq 
    0.00 :	  78338f:       c3                      retq   
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
         :	        if (scan.found)
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  783390:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  783394:       0f b7 53 0c             movzwl 0xc(%rbx),%edx
    0.00 :	  783398:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  78339b:       29 c2                   sub    %eax,%edx
    0.00 :	  78339d:       49 8d 3c 34             lea    (%r12,%rsi,1),%rdi
    0.00 :	  7833a1:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7833a5:       48 03 75 e0             add    -0x20(%rbp),%rsi
    0.00 :	  7833a9:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7833ac:       e8 3f 68 ce ff          callq  469bf0 <memcpy@plt>
    0.00 :	  7833b1:       eb ab                   jmp    78335e <CHashSearch+0x6e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   62.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:440
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:439
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:440
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005baf20 <ExecBitmapHeapScan>:
         :	 *              ExecBitmapHeapScan(node)
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:439
   25.00 :	  5baf20:       55                      push   %rbp
         :	        return ExecScan(&node->ss,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:440
   12.50 :	  5baf21:       ba 40 af 5b 00          mov    $0x5baf40,%edx
    0.00 :	  5baf26:       be 80 af 5b 00          mov    $0x5baf80,%esi
         :	 *              ExecBitmapHeapScan(node)
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
    0.00 :	  5baf2b:       48 89 e5                mov    %rsp,%rbp
         :	        return ExecScan(&node->ss,
         :	                                        (ExecScanAccessMtd) BitmapHeapNext,
         :	                                        (ExecScanRecheckMtd) BitmapHeapRecheck);
         :	}
    0.00 :	  5baf2e:       c9                      leaveq 
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
         :	        return ExecScan(&node->ss,
   62.50 :	  5baf2f:       e9 1c 88 ff ff          jmpq   5b3750 <ExecScan>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:824
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:842
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:765
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1064
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1067
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675ca0 <ReadBuffer_common>:
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  675ca0:       55                      push   %rbp
    0.00 :	  675ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  675ca4:       41 57                   push   %r15
    0.00 :	  675ca6:       4d 89 cf                mov    %r9,%r15
    0.00 :	  675ca9:       41 56                   push   %r14
    0.00 :	  675cab:       41 55                   push   %r13
    0.00 :	  675cad:       41 54                   push   %r12
    0.00 :	  675caf:       53                      push   %rbx
    0.00 :	  675cb0:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  675cb4:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
    0.00 :	  675cb8:       89 95 78 ff ff ff       mov    %edx,-0x88(%rbp)
    0.00 :	  675cbe:       89 8d 74 ff ff ff       mov    %ecx,-0x8c(%rbp)
    0.00 :	  675cc4:       44 89 85 70 ff ff ff    mov    %r8d,-0x90(%rbp)
    0.00 :	  675ccb:       40 88 b5 7f ff ff ff    mov    %sil,-0x81(%rbp)
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cd2:       83 7f 0c ff             cmpl   $0xffffffff,0xc(%rdi)
         :
         :	        *hit = false;
    0.00 :	  675cd6:       48 8b 45 10             mov    0x10(%rbp),%rax
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cda:       0f 95 45 8f             setne  -0x71(%rbp)
         :
         :	        *hit = false;
    0.00 :	  675cde:       c6 00 00                movb   $0x0,(%rax)
         :
         :	        /* Make sure we will have room to remember the buffer pin */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  675ce1:       48 8b 3d d8 4b 54 00    mov    0x544bd8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  675ce8:       e8 83 51 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :
         :	        isExtend = (blockNum == P_NEW);
    0.00 :	  675ced:       83 bd 74 ff ff ff ff    cmpl   $0xffffffff,-0x8c(%rbp)
         :	                                                                           smgr->smgr_rnode.node.relNode,
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
    0.00 :	  675cf4:       0f 94 45 8e             sete   -0x72(%rbp)
    0.00 :	  675cf8:       0f 84 2f 05 00 00       je     67622d <ReadBuffer_common+0x58d>
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
    0.00 :	  675cfe:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675d02:       74 7b                   je     675d7f <ReadBuffer_common+0xdf>
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d04:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d0a:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675d10:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  675d14:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675d18:       e8 c3 20 00 00          callq  677de0 <LocalBufferAlloc>
         :	                if (found)
    0.00 :	  675d1d:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d21:       49 89 c6                mov    %rax,%r14
         :	                if (found)
    0.00 :	  675d24:       0f 85 1b 04 00 00       jne    676145 <ReadBuffer_common+0x4a5>
         :	                        pgBufferUsage.local_blks_hit++;
         :	                else
         :	                        pgBufferUsage.local_blks_read++;
    0.00 :	  675d2a:       48 83 05 56 9a 54 00    addq   $0x1,0x549a56(%rip)        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  675d31:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675d32:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675d36:       0f 84 fa 00 00 00       je     675e36 <ReadBuffer_common+0x196>
         :	        {
         :	                if (!isExtend)
    0.00 :	  675d3c:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  675d40:       0f 85 01 05 00 00       jne    676247 <ReadBuffer_common+0x5a7>
         :	                {
         :	                        /* Just need to update stats before we exit */
         :	                        *hit = true;
    0.00 :	  675d46:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	  675d4a:       c6 00 01                movb   $0x1,(%rax)
         :	                        VacuumPageHit++;
    0.00 :	  675d4d:       83 05 80 43 54 00 01    addl   $0x1,0x544380(%rip)        # bba0d4 <VacuumPageHit>
         :
         :	                        if (VacuumCostActive)
    0.00 :	  675d54:       80 3d 89 43 54 00 00    cmpb   $0x0,0x544389(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675d5b:       74 0c                   je     675d69 <ReadBuffer_common+0xc9>
         :	                                VacuumCostBalance += VacuumCostPageHit;
    0.00 :	  675d5d:       8b 05 c9 2d 4f 00       mov    0x4f2dc9(%rip),%eax        # b68b2c <VacuumCostPageHit>
    0.00 :	  675d63:       01 05 77 43 54 00       add    %eax,0x544377(%rip)        # bba0e0 <VacuumCostBalance>
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d69:       41 8b 46 24             mov    0x24(%r14),%eax
         :	}
    0.00 :	  675d6d:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  675d71:       5b                      pop    %rbx
    0.00 :	  675d72:       41 5c                   pop    %r12
    0.00 :	  675d74:       41 5d                   pop    %r13
    0.00 :	  675d76:       41 5e                   pop    %r14
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d78:       83 c0 01                add    $0x1,%eax
         :	}
    0.00 :	  675d7b:       41 5f                   pop    %r15
    0.00 :	  675d7d:       c9                      leaveq 
    0.00 :	  675d7e:       c3                      retq   
         :	        int                     buf_id;
         :	        volatile BufferDesc *buf;
         :	        bool            valid;
         :
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
    0.00 :	  675d7f:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  675d83:       48 8b 02                mov    (%rdx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:824
   12.50 :	  675d86:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  675d8a:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  675d8d:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d93:       89 45 b8                mov    %eax,-0x48(%rbp)
    0.00 :	  675d96:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  675d9c:       89 55 c0                mov    %edx,-0x40(%rbp)
    0.00 :	  675d9f:       89 45 bc                mov    %eax,-0x44(%rbp)
    0.00 :	  675da2:       eb 11                   jmp    675db5 <ReadBuffer_common+0x115>
    0.00 :	  675da4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                valid = PinBuffer(foundbuf, strategy);
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
    0.00 :	  675da8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675dad:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675db0:       e8 7b ef ff ff          callq  674d30 <UnpinBuffer>
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
         :
         :	        /* see if the block is in the buffer pool already */
         :	start:
         :	        buf_id = BufTableLookup(&newTag);
    0.00 :	  675db5:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675db9:       e8 22 e0 ff ff          callq  673de0 <BufTableLookup>
         :	        if (buf_id >= 0)
    0.00 :	  675dbe:       85 c0                   test   %eax,%eax
    0.00 :	  675dc0:       0f 88 bb 01 00 00       js     675f81 <ReadBuffer_common+0x2e1>
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dc6:       48 63 d8                movslq %eax,%rbx
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dc9:       4c 89 fe                mov    %r15,%rsi
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dcc:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675dd0:       48 03 1d 29 9d 54 00    add    0x549d29(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dd7:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675dda:       49 89 dc                mov    %rbx,%r12
    0.00 :	  675ddd:       e8 4e ee ff ff          callq  674c30 <PinBuffer>
    0.00 :	  675de2:       89 c2                   mov    %eax,%edx
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  675de4:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  675de7:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  675dea:       75 bc                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dec:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  675def:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  675df2:       75 b4                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675df4:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  675df7:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  675df9:       75 ad                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dfb:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  675dfe:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  675e01:       75 a5                   jne    675da8 <ReadBuffer_common+0x108>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:842
   12.50 :	  675e03:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  675e06:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  675e09:       75 9d                   jne    675da8 <ReadBuffer_common+0x108>
         :	                }
         :
         :	                *foundPtr = TRUE;
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e0b:       84 d2                   test   %dl,%dl
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
         :	                        goto start;
         :	                }
         :
         :	                *foundPtr = TRUE;
    0.00 :	  675e0d:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e11:       0f 84 33 02 00 00       je     67604a <ReadBuffer_common+0x3aa>
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e17:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e1b:       4d 89 e6                mov    %r12,%r14
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e1e:       0f 84 9a 03 00 00       je     6761be <ReadBuffer_common+0x51e>
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e24:       48 83 05 34 99 54 00    addq   $0x1,0x549934(%rip)        # bbf760 <pgBufferUsage>
    0.00 :	  675e2b:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675e2c:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675e30:       0f 85 06 ff ff ff       jne    675d3c <ReadBuffer_common+0x9c>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e36:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675e3a:       0f 84 8b 03 00 00       je     6761cb <ReadBuffer_common+0x52b>
    0.00 :	  675e40:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  675e44:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  675e49:       29 c2                   sub    %eax,%edx
         :
         :	        if (isExtend)
    0.00 :	  675e4b:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e4f:       48 8b 05 c2 72 50 00    mov    0x5072c2(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  675e56:       48 63 d2                movslq %edx,%rdx
    0.00 :	  675e59:       4c 8b 24 d0             mov    (%rax,%rdx,8),%r12
         :
         :	        if (isExtend)
    0.00 :	  675e5d:       0f 85 84 03 00 00       jne    6761e7 <ReadBuffer_common+0x547>
         :	        {
         :	                /*
         :	                 * Read in the page, unless the caller intends to overwrite it and
         :	                 * just wants us to allocate a buffer.
         :	                 */
         :	                if (mode == RBM_ZERO)
    0.00 :	  675e63:       83 bd 70 ff ff ff 01    cmpl   $0x1,-0x90(%rbp)
    0.00 :	  675e6a:       74 7e                   je     675eea <ReadBuffer_common+0x24a>
         :	                else
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
    0.00 :	  675e6c:       80 3d ee 71 50 00 00    cmpb   $0x0,0x5071ee(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e73:       0f 85 d1 04 00 00       jne    67634a <ReadBuffer_common+0x6aa>
         :	                                INSTR_TIME_SET_CURRENT(io_start);
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
    0.00 :	  675e79:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675e7f:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675e85:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  675e88:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675e8c:       e8 7f 35 02 00          callq  699410 <smgrread>
         :
         :	                        if (track_io_timing)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
   12.50 :	  675e91:       80 3d c9 71 50 00 00    cmpb   $0x0,0x5071c9(%rip)        # b7d061 <track_io_timing>
   25.00 :	  675e98:       0f 85 bc 04 00 00       jne    67635a <ReadBuffer_common+0x6ba>
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
         :	                        }
         :
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
    0.00 :	  675e9e:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  675ea4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ea7:       e8 24 f0 01 00          callq  694ed0 <PageIsVerified>
    0.00 :	  675eac:       84 c0                   test   %al,%al
    0.00 :	  675eae:       75 47                   jne    675ef7 <ReadBuffer_common+0x257>
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
    0.00 :	  675eb0:       83 bd 70 ff ff ff 02    cmpl   $0x2,-0x90(%rbp)
    0.00 :	  675eb7:       74 0d                   je     675ec6 <ReadBuffer_common+0x226>
    0.00 :	  675eb9:       80 3d a0 71 50 00 00    cmpb   $0x0,0x5071a0(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  675ec0:       0f 84 51 05 00 00       je     676417 <ReadBuffer_common+0x777>
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  675ec6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  675ec9:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  675ece:       ba f0 02 00 00          mov    $0x2f0,%edx
    0.00 :	  675ed3:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  675ed8:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  675edd:       e8 de 4b 10 00          callq  77aac0 <errstart>
    0.00 :	  675ee2:       84 c0                   test   %al,%al
    0.00 :	  675ee4:       0f 85 11 04 00 00       jne    6762fb <ReadBuffer_common+0x65b>
         :	                                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                                         errmsg("invalid page in block %u of relation %s; zeroing out page",
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  675eea:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  675eef:       31 c0                   xor    %eax,%eax
    0.00 :	  675ef1:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ef4:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:765
   12.50 :	  675ef7:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675efb:       0f 84 18 03 00 00       je     676219 <ReadBuffer_common+0x579>
         :	        {
         :	                /* Only need to adjust flags */
         :	                bufHdr->flags |= BM_VALID;
    0.00 :	  675f01:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  675f06:       83 c8 02                or     $0x2,%eax
    0.00 :	  675f09:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
         :	        }
         :
         :	        VacuumPageMiss++;
    0.00 :	  675f0e:       83 05 c3 41 54 00 01    addl   $0x1,0x5441c3(%rip)        # bba0d8 <VacuumPageMiss>
         :	        if (VacuumCostActive)
    0.00 :	  675f15:       80 3d c8 41 54 00 00    cmpb   $0x0,0x5441c8(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675f1c:       0f 84 47 fe ff ff       je     675d69 <ReadBuffer_common+0xc9>
         :	                VacuumCostBalance += VacuumCostPageMiss;
    0.00 :	  675f22:       8b 05 08 2c 4f 00       mov    0x4f2c08(%rip),%eax        # b68b30 <VacuumCostPageMiss>
    0.00 :	  675f28:       01 05 b2 41 54 00       add    %eax,0x5441b2(%rip)        # bba0e0 <VacuumCostBalance>
    0.00 :	  675f2e:       e9 36 fe ff ff          jmpq   675d69 <ReadBuffer_common+0xc9>
    0.00 :	  675f33:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  675f38:       49 8d 5e 20             lea    0x20(%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675f3c:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675f41:       f0 86 03                lock xchg %al,(%rbx)
    0.00 :	  675f44:       84 c0                   test   %al,%al
    0.00 :	  675f46:       0f 85 a4 01 00 00       jne    6760f0 <ReadBuffer_common+0x450>
         :	                 * Somebody could have pinned or re-dirtied the buffer while we were
         :	                 * doing the I/O and making the new hashtable entry.  If so, we can't
         :	                 * recycle this buffer; we must undo everything we've done and start
         :	                 * over with a new victim buffer.
         :	                 */
         :	                oldFlags = buf->flags;
    0.00 :	  675f4c:       41 0f b7 56 14          movzwl 0x14(%r14),%edx
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
    0.00 :	  675f51:       41 8b 46 18             mov    0x18(%r14),%eax
    0.00 :	  675f55:       83 e8 01                sub    $0x1,%eax
    0.00 :	  675f58:       75 0c                   jne    675f66 <ReadBuffer_common+0x2c6>
    0.00 :	  675f5a:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  675f5d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675f60:       0f 84 ec 01 00 00       je     676152 <ReadBuffer_common+0x4b2>
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
         :	                BufTableDelete(&newTag);
    0.00 :	  675f66:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
         :	                 */
         :	                oldFlags = buf->flags;
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
    0.00 :	  675f6a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                BufTableDelete(&newTag);
    0.00 :	  675f6f:       e8 dc dd ff ff          callq  673d50 <BufTableDelete>
         :	                UnpinBuffer(buf, true);
    0.00 :	  675f74:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675f79:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  675f7c:       e8 af ed ff ff          callq  674d30 <UnpinBuffer>
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f81:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  675f84:       e8 d7 15 00 00          callq  677560 <StrategyGetBuffer>
         :
         :	                Assert(buf->refcount == 0);
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
    0.00 :	  675f89:       0f b7 58 14             movzwl 0x14(%rax),%ebx
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f8d:       48 89 c7                mov    %rax,%rdi
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f90:       49 89 c6                mov    %rax,%r14
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f93:       e8 38 ec ff ff          callq  674bd0 <PinBuffer_Locked>
         :	                 * condition here, in that someone might dirty it after we released it
         :	                 * above, or even while we are writing it out (since our share-lock
         :	                 * won't prevent hint-bit updates).  We will recheck the dirty bit
         :	                 * after re-locking the buffer header.
         :	                 */
         :	                if (oldFlags & BM_DIRTY)
    0.00 :	  675f98:       0f b7 db                movzwl %bx,%ebx
    0.00 :	  675f9b:       f6 c3 01                test   $0x1,%bl
    0.00 :	  675f9e:       0f 85 cc 00 00 00       jne    676070 <ReadBuffer_common+0x3d0>
         :
         :	                /*
         :	                 * To change the association of a valid buffer, we'll need to have
         :	                 * exclusive lock on both the old and new mapping partitions.
         :	                 */
         :	                if (oldFlags & BM_TAG_VALID)
    0.00 :	  675fa4:       83 e3 04                and    $0x4,%ebx
    0.00 :	  675fa7:       74 2c                   je     675fd5 <ReadBuffer_common+0x335>
         :	                {
         :	                        /* Save old tag. */
         :	                        oldTag = buf->tag;
    0.00 :	  675fa9:       49 8b 06                mov    (%r14),%rax
    0.00 :	  675fac:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  675fb0:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  675fb4:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  675fb8:       41 8b 46 10             mov    0x10(%r14),%eax
    0.00 :	  675fbc:       89 45 a0                mov    %eax,-0x60(%rbp)
    0.00 :	  675fbf:       eb 14                   jmp    675fd5 <ReadBuffer_common+0x335>
    0.00 :	  675fc1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
         :	                        valid = PinBuffer(foundbuf, strategy);
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                        {
         :	                                UnpinBuffer(foundbuf, true);
    0.00 :	  675fc8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675fcd:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675fd0:       e8 5b ed ff ff          callq  674d30 <UnpinBuffer>
         :	                 * allocated another buffer for the same block we want to read in.
         :	                 * Note that we have not yet removed the hashtable entry for the old
         :	                 * tag.
         :	                 */
         :	enter:
         :	                buf_id = BufTableInsert(&newTag, buf->buf_id);
    0.00 :	  675fd5:       41 8b 76 24             mov    0x24(%r14),%esi
    0.00 :	  675fd9:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675fdd:       e8 be dd ff ff          callq  673da0 <BufTableInsert>
         :
         :	                if (buf_id >= 0)
    0.00 :	  675fe2:       85 c0                   test   %eax,%eax
    0.00 :	  675fe4:       0f 88 4e ff ff ff       js     675f38 <ReadBuffer_common+0x298>
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675fea:       48 63 d8                movslq %eax,%rbx
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675fed:       4c 89 fe                mov    %r15,%rsi
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675ff0:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675ff4:       48 03 1d 05 9b 54 00    add    0x549b05(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675ffb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675ffe:       49 89 dc                mov    %rbx,%r12
    0.00 :	  676001:       e8 2a ec ff ff          callq  674c30 <PinBuffer>
    0.00 :	  676006:       41 89 c5                mov    %eax,%r13d
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  676009:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  67600c:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  67600f:       75 b7                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676011:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  676014:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  676017:       75 af                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676019:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  67601c:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  67601e:       75 a8                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676020:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676023:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  676026:       75 a0                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676028:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  67602b:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  67602e:       75 98                   jne    675fc8 <ReadBuffer_common+0x328>
         :
         :	                        /*
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
    0.00 :	  676030:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676035:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676038:       e8 f3 ec ff ff          callq  674d30 <UnpinBuffer>
         :
         :	                        *foundPtr = TRUE;
         :
         :	                        if (!valid)
    0.00 :	  67603d:       45 84 ed                test   %r13b,%r13b
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
         :
         :	                        *foundPtr = TRUE;
    0.00 :	  676040:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                        if (!valid)
    0.00 :	  676044:       0f 85 cd fd ff ff       jne    675e17 <ReadBuffer_common+0x177>
         :	                                 * in the page, or (b) a previous read attempt failed.  We
         :	                                 * have to wait for any active read attempt to finish, and
         :	                                 * then set up our own read attempt if the page is still not
         :	                                 * BM_VALID.  StartBufferIO does it all.
         :	                                 */
         :	                                if (StartBufferIO(foundbuf, true))
    0.00 :	  67604a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67604f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  676052:       e8 e9 e3 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  676057:       84 c0                   test   %al,%al
    0.00 :	  676059:       0f 84 b8 fd ff ff       je     675e17 <ReadBuffer_common+0x177>
         :	                                {
         :	                                        /*
         :	                                         * If we get here, previous attempts to read the buffer
         :	                                         * must have failed ... but we shall bravely try again.
         :	                                         */
         :	                                        *foundPtr = FALSE;
    0.00 :	  67605f:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
    0.00 :	  676063:       e9 af fd ff ff          jmpq   675e17 <ReadBuffer_common+0x177>
    0.00 :	  676068:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67606f:       00 
         :	                         * (This has been observed to happen when two backends are both
         :	                         * trying to split btree index pages, and the second one just
         :	                         * happens to be trying to split the page the first one got from
         :	                         * StrategyGetBuffer.)
         :	                         */
         :	                        if (LWLockConditionalAcquire(buf->content_lock, LW_SHARED))
    0.00 :	  676070:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  676074:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676079:       e8 22 8f 01 00          callq  68efa0 <LWLockConditionalAcquire>
    0.00 :	  67607e:       84 c0                   test   %al,%al
    0.00 :	  676080:       0f 84 ee fe ff ff       je     675f74 <ReadBuffer_common+0x2d4>
         :	                                 * would require a WAL flush, let the strategy decide whether
         :	                                 * to go ahead and write/reuse the buffer or to choose another
         :	                                 * victim.  We need lock to inspect the page LSN, so this
         :	                                 * can't be done inside StrategyGetBuffer.
         :	                                 */
         :	                                if (strategy != NULL)
    0.00 :	  676086:       4d 85 ff                test   %r15,%r15
    0.00 :	  676089:       74 4c                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  67608b:       49 8d 7e 20             lea    0x20(%r14),%rdi
    0.00 :	  67608f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  676094:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  676097:       84 c0                   test   %al,%al
    0.00 :	  676099:       0f 85 92 00 00 00       jne    676131 <ReadBuffer_common+0x491>
         :	                                        lsn = BufferGetLSN(buf);
    0.00 :	  67609f:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6760a3:       41 8b 56 24             mov    0x24(%r14),%edx
    0.00 :	  6760a7:       48 8b 0d 4a 9a 54 00    mov    0x549a4a(%rip),%rcx        # bbfaf8 <BufferBlocks>
    0.00 :	  6760ae:       48 98                   cltq   
    0.00 :	  6760b0:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6760b3:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  6760b7:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  6760bb:       8b 3c 01                mov    (%rcx,%rax,1),%edi
    0.00 :	  6760be:       8b 44 11 04             mov    0x4(%rcx,%rdx,1),%eax
    0.00 :	  6760c2:       48 c1 e7 20             shl    $0x20,%rdi
    0.00 :	  6760c6:       48 09 c7                or     %rax,%rdi
         :	                                        UnlockBufHdr(buf);
    0.00 :	  6760c9:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  6760ce:       e8 dd dc e5 ff          callq  4d3db0 <XLogNeedsFlush>
    0.00 :	  6760d3:       84 c0                   test   %al,%al
    0.00 :	  6760d5:       75 30                   jne    676107 <ReadBuffer_common+0x467>
         :	                                TRACE_POSTGRESQL_BUFFER_WRITE_DIRTY_START(forkNum, blockNum,
         :	                                                                                           smgr->smgr_rnode.node.spcNode,
         :	                                                                                                smgr->smgr_rnode.node.dbNode,
         :	                                                                                          smgr->smgr_rnode.node.relNode);
         :
         :	                                FlushBuffer(buf, NULL);
    0.00 :	  6760d7:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6760da:       31 f6                   xor    %esi,%esi
    0.00 :	  6760dc:       e8 6f ee ff ff          callq  674f50 <FlushBuffer>
         :	                                LWLockRelease(buf->content_lock);
    0.00 :	  6760e1:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  6760e5:       e8 b6 92 01 00          callq  68f3a0 <LWLockRelease>
    0.00 :	  6760ea:       e9 b5 fe ff ff          jmpq   675fa4 <ReadBuffer_common+0x304>
    0.00 :	  6760ef:       90                      nop
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6760f0:       ba 0f 04 00 00          mov    $0x40f,%edx
    0.00 :	  6760f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6760fa:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6760fd:       e8 3e 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676102:       e9 45 fe ff ff          jmpq   675f4c <ReadBuffer_common+0x2ac>
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
         :	                                        lsn = BufferGetLSN(buf);
         :	                                        UnlockBufHdr(buf);
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  676107:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  67610a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  67610d:       e8 0e 11 00 00          callq  677220 <StrategyRejectBuffer>
    0.00 :	  676112:       84 c0                   test   %al,%al
    0.00 :	  676114:       74 c1                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                                StrategyRejectBuffer(strategy, buf))
         :	                                        {
         :	                                                /* Drop lock/pin and loop around for another buffer */
         :	                                                LWLockRelease(buf->content_lock);
    0.00 :	  676116:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  67611a:       e8 81 92 01 00          callq  68f3a0 <LWLockRelease>
         :	                                                UnpinBuffer(buf, true);
    0.00 :	  67611f:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676124:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676127:       e8 04 ec ff ff          callq  674d30 <UnpinBuffer>
    0.00 :	  67612c:       e9 50 fe ff ff          jmpq   675f81 <ReadBuffer_common+0x2e1>
         :	                                if (strategy != NULL)
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  676131:       ba a0 03 00 00          mov    $0x3a0,%edx
    0.00 :	  676136:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67613b:       e8 00 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676140:       e9 5a ff ff ff          jmpq   67609f <ReadBuffer_common+0x3ff>
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
         :	                if (found)
         :	                        pgBufferUsage.local_blks_hit++;
    0.00 :	  676145:       48 83 05 33 96 54 00    addq   $0x1,0x549633(%rip)        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  67614c:       01 
    0.00 :	  67614d:       e9 e0 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * Clearing BM_VALID here is necessary, clearing the dirtybits is just
         :	         * paranoia.  We also reset the usage_count since any recency of use of
         :	         * the old content is no longer relevant.  (The usage_count starts out at
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
    0.00 :	  676152:       48 8b 45 b0             mov    -0x50(%rbp),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1064
   12.50 :	  676156:       49 89 06                mov    %rax,(%r14)
    0.00 :	  676159:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  67615d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	  676161:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676164:       41 89 46 10             mov    %eax,0x10(%r14)
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
    0.00 :	  676168:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  67616d:       66 25 4c fe             and    $0xfe4c,%ax
    0.00 :	  676171:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
    0.00 :	  676176:       80 bd 7f ff ff ff 70    cmpb   $0x70,-0x81(%rbp)
    0.00 :	  67617d:       0f 84 73 02 00 00       je     6763f6 <ReadBuffer_common+0x756>
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
    0.00 :	  676183:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676188:       83 c8 04                or     $0x4,%eax
    0.00 :	  67618b:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        buf->usage_count = 1;
    0.00 :	  676190:       66 41 c7 46 16 01 00    movw   $0x1,0x16(%r14)
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  676197:       83 e2 04                and    $0x4,%edx
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67619a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  67619f:       0f 85 64 02 00 00       jne    676409 <ReadBuffer_common+0x769>
         :	        /*
         :	         * Buffer contents are currently invalid.  Try to get the io_in_progress
         :	         * lock.  If StartBufferIO returns false, then someone else managed to
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
    0.00 :	  6761a5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6761aa:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6761ad:       e8 8e e2 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6761b2:       84 c0                   test   %al,%al
    0.00 :	  6761b4:       0f 84 d5 00 00 00       je     67628f <ReadBuffer_common+0x5ef>
         :	                *foundPtr = FALSE;
    0.00 :	  6761ba:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
         :	                        pgBufferUsage.shared_blks_hit++;
         :	                else
         :	                        pgBufferUsage.shared_blks_read++;
    0.00 :	  6761be:       48 83 05 a2 95 54 00    addq   $0x1,0x5495a2(%rip)        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  6761c5:       01 
    0.00 :	  6761c6:       e9 67 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6761cb:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6761cf:       4c 63 e0                movslq %eax,%r12
    0.00 :	  6761d2:       49 c1 e4 0d             shl    $0xd,%r12
    0.00 :	  6761d6:       4c 03 25 1b 99 54 00    add    0x54991b(%rip),%r12        # bbfaf8 <BufferBlocks>
         :
         :	        if (isExtend)
    0.00 :	  6761dd:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  6761e1:       0f 84 7c fc ff ff       je     675e63 <ReadBuffer_common+0x1c3>
         :	        {
         :	                /* new buffers are zero-filled */
         :	                MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  6761e7:       31 c0                   xor    %eax,%eax
    0.00 :	  6761e9:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  6761ee:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6761f1:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                /* don't set checksum for all-zero page */
         :	                smgrextend(smgr, forkNum, blockNum, (char *) bufBlock, false);
    0.00 :	  6761f4:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6761f7:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  6761fa:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  676200:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676206:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  67620a:       e8 c1 31 02 00          callq  6993d0 <smgrextend>
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  67620f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676213:       0f 85 e8 fc ff ff       jne    675f01 <ReadBuffer_common+0x261>
         :	                bufHdr->flags |= BM_VALID;
         :	        }
         :	        else
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
    0.00 :	  676219:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  67621e:       31 f6                   xor    %esi,%esi
    0.00 :	  676220:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676223:       e8 a8 df ff ff          callq  6741d0 <TerminateBufferIO>
    0.00 :	  676228:       e9 e1 fc ff ff          jmpq   675f0e <ReadBuffer_common+0x26e>
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
    0.00 :	  67622d:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676233:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  676237:       e8 14 32 02 00          callq  699450 <smgrnblocks>
    0.00 :	  67623c:       89 85 74 ff ff ff       mov    %eax,-0x8c(%rbp)
    0.00 :	  676242:       e9 b7 fa ff ff          jmpq   675cfe <ReadBuffer_common+0x5e>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  676247:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  67624b:       0f 85 8c 00 00 00       jne    6762dd <ReadBuffer_common+0x63d>
    0.00 :	  676251:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  676255:       48 98                   cltq   
    0.00 :	  676257:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  67625b:       48 03 05 96 98 54 00    add    0x549896(%rip),%rax        # bbfaf8 <BufferBlocks>
         :	                if (!PageIsNew((Page) bufBlock))
    0.00 :	  676262:       66 83 78 0e 00          cmpw   $0x0,0xe(%rax)
    0.00 :	  676267:       0f 85 19 02 00 00       jne    676486 <ReadBuffer_common+0x7e6>
         :	                 * We *must* do smgrextend before succeeding, else the page will not
         :	                 * be reserved by the kernel, and the next P_NEW call will decide to
         :	                 * return the same page.  Clear the BM_VALID bit, do the StartBufferIO
         :	                 * call that BufferAlloc didn't, and proceed.
         :	                 */
         :	                if (isLocalBuf)
    0.00 :	  67626d:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676271:       49 8d 5e 20             lea    0x20(%r14),%rbx
    0.00 :	  676275:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67627b:       74 54                   je     6762d1 <ReadBuffer_common+0x631>
         :	                {
         :	                        /* Only need to adjust flags */
         :	                        Assert(bufHdr->flags & BM_VALID);
         :	                        bufHdr->flags &= ~BM_VALID;
    0.00 :	  67627d:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676282:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  676285:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  67628a:       e9 b1 fb ff ff          jmpq   675e40 <ReadBuffer_common+0x1a0>
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
         :	                *foundPtr = FALSE;
         :	        else
         :	                *foundPtr = TRUE;
    0.00 :	  67628f:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
    0.00 :	  676293:       e9 8c fb ff ff          jmpq   675e24 <ReadBuffer_common+0x184>
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  676298:       ba ae 02 00 00          mov    $0x2ae,%edx
    0.00 :	  67629d:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6762a2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6762a5:       e8 96 9d 01 00          callq  690040 <s_lock>
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
    0.00 :	  6762aa:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6762af:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  6762b2:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	                                UnlockBufHdr(bufHdr);
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762b7:       be 01 00 00 00          mov    $0x1,%esi
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
         :	                                UnlockBufHdr(bufHdr);
    0.00 :	  6762bc:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762c1:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6762c4:       e8 77 e1 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6762c9:       84 c0                   test   %al,%al
    0.00 :	  6762cb:       0f 85 fa fe ff ff       jne    6761cb <ReadBuffer_common+0x52b>
    0.00 :	  6762d1:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6762d4:       f0 86 03                lock xchg %al,(%rbx)
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  6762d7:       84 c0                   test   %al,%al
    0.00 :	  6762d9:       74 cf                   je     6762aa <ReadBuffer_common+0x60a>
    0.00 :	  6762db:       eb bb                   jmp    676298 <ReadBuffer_common+0x5f8>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6762dd:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6762e1:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  6762e6:       29 c2                   sub    %eax,%edx
    0.00 :	  6762e8:       48 8b 05 29 6e 50 00    mov    0x506e29(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  6762ef:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6762f2:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  6762f6:       e9 67 ff ff ff          jmpq   676262 <ReadBuffer_common+0x5c2>
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  6762fb:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6762ff:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676306:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676309:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  67630c:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67630f:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  676312:       8b 30                   mov    (%rax),%esi
    0.00 :	  676314:       e8 b7 82 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676319:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67631f:       48 89 c2                mov    %rax,%rdx
    0.00 :	  676322:       bf c8 9e 8a 00          mov    $0x8a9ec8,%edi
    0.00 :	  676327:       31 c0                   xor    %eax,%eax
    0.00 :	  676329:       e8 72 65 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67632e:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  676333:       89 c3                   mov    %eax,%ebx
    0.00 :	  676335:       e8 16 6a 10 00          callq  77cd50 <errcode>
    0.00 :	  67633a:       89 de                   mov    %ebx,%esi
    0.00 :	  67633c:       89 c7                   mov    %eax,%edi
    0.00 :	  67633e:       31 c0                   xor    %eax,%eax
    0.00 :	  676340:       e8 9b 42 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676345:       e9 a0 fb ff ff          jmpq   675eea <ReadBuffer_common+0x24a>
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
         :	                                INSTR_TIME_SET_CURRENT(io_start);
    0.00 :	  67634a:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67634e:       31 f6                   xor    %esi,%esi
    0.00 :	  676350:       e8 6b 32 df ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  676355:       e9 1f fb ff ff          jmpq   675e79 <ReadBuffer_common+0x1d9>
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
    0.00 :	  67635a:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  67635e:       31 f6                   xor    %esi,%esi
    0.00 :	  676360:       e8 5b 32 df ff          callq  4695c0 <gettimeofday@plt>
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676365:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  676369:       48 2b 55 98             sub    -0x68(%rbp),%rdx
    0.00 :	  67636d:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676371:       48 2b 45 90             sub    -0x70(%rbp),%rax
    0.00 :	  676375:       48 85 d2                test   %rdx,%rdx
    0.00 :	  676378:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67637c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  67637f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676383:       79 18                   jns    67639d <ReadBuffer_common+0x6fd>
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  676385:       48 83 e8 01             sub    $0x1,%rax
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676389:       48 81 c2 40 42 0f 00    add    $0xf4240,%rdx
    0.00 :	  676390:       78 f3                   js     676385 <ReadBuffer_common+0x6e5>
    0.00 :	  676392:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676396:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67639a:       48 89 c1                mov    %rax,%rcx
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  67639d:       48 69 c1 40 42 0f 00    imul   $0xf4240,%rcx,%rax
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763a4:       48 01 0d 05 94 54 00    add    %rcx,0x549405(%rip)        # bbf7b0 <pgBufferUsage+0x50>
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  6763ab:       48 8d 04 02             lea    (%rdx,%rax,1),%rax
    0.00 :	  6763af:       48 01 05 0a 58 50 00    add    %rax,0x50580a(%rip)        # b7bbc0 <pgStatBlockReadTime>
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763b6:       48 8b 05 fb 93 54 00    mov    0x5493fb(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763bd:       48 03 45 b8             add    -0x48(%rbp),%rax
    0.00 :	  6763c1:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763c7:       48 89 05 ea 93 54 00    mov    %rax,0x5493ea(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ce:       0f 8e ca fa ff ff       jle    675e9e <ReadBuffer_common+0x1fe>
    0.00 :	  6763d4:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  6763da:       48 83 05 ce 93 54 00    addq   $0x1,0x5493ce(%rip)        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  6763e1:       01 
    0.00 :	  6763e2:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763e8:       48 89 05 c9 93 54 00    mov    %rax,0x5493c9(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ef:       7f e3                   jg     6763d4 <ReadBuffer_common+0x734>
    0.00 :	  6763f1:       e9 a8 fa ff ff          jmpq   675e9e <ReadBuffer_common+0x1fe>
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
    0.00 :	  6763f6:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6763fb:       66 0d 04 01             or     $0x104,%ax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1067
   12.50 :	  6763ff:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  676404:       e9 87 fd ff ff          jmpq   676190 <ReadBuffer_common+0x4f0>
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
         :	                BufTableDelete(&oldTag);
    0.00 :	  676409:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67640d:       e8 3e d9 ff ff          callq  673d50 <BufTableDelete>
    0.00 :	  676412:       e9 8e fd ff ff          jmpq   6761a5 <ReadBuffer_common+0x505>
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
         :	                                }
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  676417:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  67641a:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67641f:       ba f8 02 00 00          mov    $0x2f8,%edx
    0.00 :	  676424:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676429:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67642e:       e8 8d 46 10 00          callq  77aac0 <errstart>
    0.00 :	  676433:       84 c0                   test   %al,%al
    0.00 :	  676435:       74 4a                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  676437:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  67643b:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676442:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676445:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  676448:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67644b:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  67644e:       8b 30                   mov    (%rax),%esi
    0.00 :	  676450:       e8 7b 81 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676455:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67645b:       48 89 c2                mov    %rax,%rdx
    0.00 :	  67645e:       bf 48 28 88 00          mov    $0x882848,%edi
    0.00 :	  676463:       31 c0                   xor    %eax,%eax
    0.00 :	  676465:       e8 36 64 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67646a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  67646f:       89 c3                   mov    %eax,%ebx
    0.00 :	  676471:       e8 da 68 10 00          callq  77cd50 <errcode>
    0.00 :	  676476:       89 de                   mov    %ebx,%esi
    0.00 :	  676478:       89 c7                   mov    %eax,%edi
    0.00 :	  67647a:       31 c0                   xor    %eax,%eax
    0.00 :	  67647c:       e8 5f 41 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676481:       e8 4a 30 df ff          callq  4694d0 <abort@plt>
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
         :	                if (!PageIsNew((Page) bufBlock))
         :	                        ereport(ERROR,
    0.00 :	  676486:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676489:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67648e:       ba 97 02 00 00          mov    $0x297,%edx
    0.00 :	  676493:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676498:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67649d:       e8 1e 46 10 00          callq  77aac0 <errstart>
    0.00 :	  6764a2:       84 c0                   test   %al,%al
    0.00 :	  6764a4:       74 db                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  6764a6:       bf 40 9e 8a 00          mov    $0x8a9e40,%edi
    0.00 :	  6764ab:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ad:       e8 ee 57 10 00          callq  77bca0 <errhint>
    0.00 :	  6764b2:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6764b6:       89 c3                   mov    %eax,%ebx
    0.00 :	  6764b8:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  6764bf:       48 89 d0                mov    %rdx,%rax
    0.00 :	  6764c2:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  6764c5:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  6764c8:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  6764cb:       8b 30                   mov    (%rax),%esi
    0.00 :	  6764cd:       e8 fe 80 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  6764d2:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  6764d8:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6764db:       bf 90 9e 8a 00          mov    $0x8a9e90,%edi
    0.00 :	  6764e0:       31 c0                   xor    %eax,%eax
    0.00 :	  6764e2:       e8 b9 63 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6764e7:       89 de                   mov    %ebx,%esi
    0.00 :	  6764e9:       89 c7                   mov    %eax,%edi
    0.00 :	  6764eb:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ed:       e8 ee 40 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6764f2:       eb 8d                   jmp    676481 <ReadBuffer_common+0x7e1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   37.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:330
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:330
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:330
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:330
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:335
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6b30 <date_gt>:
         :	        PG_RETURN_BOOL(dateVal1 <= dateVal2);
         :	}
         :
         :	Datum
         :	date_gt(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:330
   37.50 :	  6c6b30:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  6c6b34:       39 47 20                cmp    %eax,0x20(%rdi)
   12.50 :	  6c6b37:       55                      push   %rbp
    0.00 :	  6c6b38:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
    0.00 :	  6c6b3b:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 <= dateVal2);
         :	}
         :
         :	Datum
         :	date_gt(PG_FUNCTION_ARGS)
         :	{
   25.00 :	  6c6b3c:       0f 9f c0                setg   %al
   25.00 :	  6c6b3f:       0f b6 c0                movzbl %al,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5438
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5421
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5441
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad000 <ExecProject>:
         :	 *              data will be valid, he must call ExecMaterializeSlot on the
         :	 *              result slot.
         :	 */
         :	TupleTableSlot *
         :	ExecProject(ProjectionInfo *projInfo, ExprDoneCond *isDone)
         :	{
    0.00 :	  5ad000:       55                      push   %rbp
    0.00 :	  5ad001:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ad004:       41 57                   push   %r15
    0.00 :	  5ad006:       41 56                   push   %r14
    0.00 :	  5ad008:       41 55                   push   %r13
    0.00 :	  5ad00a:       41 54                   push   %r12
    0.00 :	  5ad00c:       53                      push   %rbx
    0.00 :	  5ad00d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5ad010:       48 83 ec 48             sub    $0x48,%rsp
    0.00 :	  5ad014:       48 89 75 90             mov    %rsi,-0x70(%rbp)
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad018:       48 8b 47 18             mov    0x18(%rdi),%rax
         :	        econtext = projInfo->pi_exprContext;
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad01c:       48 85 f6                test   %rsi,%rsi
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad01f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	        econtext = projInfo->pi_exprContext;
    0.00 :	  5ad023:       4c 8b 77 10             mov    0x10(%rdi),%r14
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad027:       74 06                   je     5ad02f <ExecProject+0x2f>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5ad029:       c7 06 00 00 00 00       movl   $0x0,(%rsi)
         :	        /*
         :	         * Clear any former contents of the result slot.  This makes it safe for
         :	         * us to use the slot's Datum/isnull arrays as workspace. (Also, we can
         :	         * return the slot as-is if we decide no rows can be projected.)
         :	         */
         :	        ExecClearTuple(slot);
    0.00 :	  5ad02f:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  5ad033:       e8 d8 70 00 00          callq  5b4110 <ExecClearTuple>
         :	        /*
         :	         * Force extraction of all input values that we'll need.  The
         :	         * Var-extraction loops below depend on this, and we are also prefetching
         :	         * all attributes that will be referenced in the generic expressions.
         :	         */
         :	        if (projInfo->pi_lastInnerVar > 0)
    0.00 :	  5ad038:       8b 73 48                mov    0x48(%rbx),%esi
    0.00 :	  5ad03b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad03d:       7e 09                   jle    5ad048 <ExecProject+0x48>
         :	                slot_getsomeattrs(econtext->ecxt_innertuple,
    0.00 :	  5ad03f:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  5ad043:       e8 18 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastInnerVar);
         :	        if (projInfo->pi_lastOuterVar > 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5421
   14.29 :	  5ad048:       8b 73 4c                mov    0x4c(%rbx),%esi
    0.00 :	  5ad04b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad04d:       7e 09                   jle    5ad058 <ExecProject+0x58>
         :	                slot_getsomeattrs(econtext->ecxt_outertuple,
    0.00 :	  5ad04f:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5ad053:       e8 08 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastOuterVar);
         :	        if (projInfo->pi_lastScanVar > 0)
    0.00 :	  5ad058:       8b 73 50                mov    0x50(%rbx),%esi
    0.00 :	  5ad05b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad05d:       7e 09                   jle    5ad068 <ExecProject+0x68>
         :	                slot_getsomeattrs(econtext->ecxt_scantuple,
    0.00 :	  5ad05f:       49 8b 7e 08             mov    0x8(%r14),%rdi
    0.00 :	  5ad063:       e8 f8 21 ec ff          callq  46f260 <slot_getsomeattrs>
         :
         :	        /*
         :	         * Assign simple Vars to result by direct extraction of fields from source
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
    0.00 :	  5ad068:       44 8b 43 2c             mov    0x2c(%rbx),%r8d
         :	        if (numSimpleVars > 0)
    0.00 :	  5ad06c:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5ad06f:       7e 5d                   jle    5ad0ce <ExecProject+0xce>
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5441
   14.29 :	  5ad071:       80 7b 28 00             cmpb   $0x0,0x28(%rbx)
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad075:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
    0.00 :	  5ad079:       4c 8b 5b 30             mov    0x30(%rbx),%r11
         :	                int                *varNumbers = projInfo->pi_varNumbers;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5438
   28.57 :	  5ad07d:       4c 8b 53 38             mov    0x38(%rbx),%r10
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad081:       4c 8b 6a 28             mov    0x28(%rdx),%r13
         :	                bool       *isnull = slot->tts_isnull;
    0.00 :	  5ad085:       4c 8b 62 30             mov    0x30(%rdx),%r12
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad089:       0f 84 e1 01 00 00       je     5ad270 <ExecProject+0x270>
    0.00 :	  5ad08f:       4c 89 df                mov    %r11,%rdi
    0.00 :	  5ad092:       31 f6                   xor    %esi,%esi
    0.00 :	  5ad094:       0f 1f 40 00             nopl   0x0(%rax)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad098:       48 63 07                movslq (%rdi),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad09b:       48 83 c7 04             add    $0x4,%rdi
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad09f:       49 8b 0c 06             mov    (%r14,%rax,1),%rcx
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
    0.00 :	  5ad0a3:       41 8b 04 b2             mov    (%r10,%rsi,4),%eax
    0.00 :	  5ad0a7:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  5ad0ab:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad0ae:       48 98                   cltq   
    0.00 :	  5ad0b0:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
   14.29 :	  5ad0b4:       49 89 54 f5 00          mov    %rdx,0x0(%r13,%rsi,8)
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad0b9:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  5ad0bd:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad0c1:       41 88 04 34             mov    %al,(%r12,%rsi,1)
    0.00 :	  5ad0c5:       48 83 c6 01             add    $0x1,%rsi
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad0c9:       41 39 f0                cmp    %esi,%r8d
    0.00 :	  5ad0cc:       7f ca                   jg     5ad098 <ExecProject+0x98>
         :	         * If there are any generic expressions, evaluate them.  It's possible
         :	         * that there are set-returning functions in such expressions; if so and
         :	         * we have reached the end of the set, we return the result slot, which we
         :	         * already marked empty.
         :	         */
         :	        if (projInfo->pi_targetlist)
    0.00 :	  5ad0ce:       48 8b 43 08             mov    0x8(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
   14.29 :	  5ad0d2:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad0d5:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5ad0d9:       0f 84 fc 00 00 00       je     5ad1db <ExecProject+0x1db>
         :	        {
         :	                if (!ExecTargetList(projInfo->pi_targetlist,
    0.00 :	  5ad0df:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5ad0e3:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad0e7:       4c 8b 7b 20             mov    0x20(%rbx),%r15
    0.00 :	  5ad0eb:       48 8b 52 30             mov    0x30(%rdx),%rdx
    0.00 :	  5ad0ef:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ad0f3:       48 8b 15 66 d7 60 00    mov    0x60d766(%rip),%rdx        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad0fa:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ad0fe:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
    0.00 :	  5ad102:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ad106:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5ad10a:       48 89 05 4f d7 60 00    mov    %rax,0x60d74f(%rip)        # bba860 <CurrentMemoryContext>
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ad111:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad115:       4c 8b 68 08             mov    0x8(%rax),%r13
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad119:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad11c:       0f 84 ae 00 00 00       je     5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad122:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  5ad126:       eb 15                   jmp    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad128:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad12f:       00 
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad130:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad134:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad138:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad13b:       74 63                   je     5ad1a0 <ExecProject+0x1a0>
         :	        {
         :	                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad13d:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                AttrNumber      resind = tle->resno - 1;
         :
         :	                values[resind] = ExecEvalExpr(gstate->arg,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
   14.29 :	  5ad141:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad144:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad148:       0f b7 58 10             movzwl 0x10(%rax),%ebx
    0.00 :	  5ad14c:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad150:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad154:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad157:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  5ad15a:       48 0f bf db             movswq %bx,%rbx
    0.00 :	  5ad15e:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad162:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad165:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad168:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad16b:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad16f:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                          econtext,
         :	                                                                          &isnull[resind],
         :	                                                                          &itemIsDone[resind]);
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
    0.00 :	  5ad173:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ad177:       85 c0                   test   %eax,%eax
    0.00 :	  5ad179:       74 b9                   je     5ad134 <ExecProject+0x134>
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
    0.00 :	  5ad17b:       48 83 7d 90 00          cmpq   $0x0,-0x70(%rbp)
    0.00 :	  5ad180:       0f 84 fd 01 00 00       je     5ad383 <ExecProject+0x383>
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad186:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad189:       75 a5                   jne    5ad130 <ExecProject+0x130>
         :	                        {
         :	                                /* we have undone sets in the tlist, set flag */
         :	                                *isDone = ExprMultipleResult;
    0.00 :	  5ad18b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad18f:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad195:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad199:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad19c:       75 9f                   jne    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad19e:       66 90                   xchg   %ax,%ax
         :	                                haveDoneSets = true;
         :	                        }
         :	                }
         :	        }
         :
         :	        if (haveDoneSets)
    0.00 :	  5ad1a0:       80 7d c7 00             cmpb   $0x0,-0x39(%rbp)
    0.00 :	  5ad1a4:       74 2a                   je     5ad1d0 <ExecProject+0x1d0>
         :	        {
         :	                /*
         :	                 * note: can't get here unless we verified isDone != NULL
         :	                 */
         :	                if (*isDone == ExprSingleResult)
    0.00 :	  5ad1a6:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad1aa:       8b 02                   mov    (%rdx),%eax
    0.00 :	  5ad1ac:       85 c0                   test   %eax,%eax
    0.00 :	  5ad1ae:       0f 84 bc 01 00 00       je     5ad370 <ExecProject+0x370>
    0.00 :	  5ad1b4:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ad1b8:       4c 8b 6a 08             mov    0x8(%rdx),%r13
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad1bc:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad1bf:       75 6f                   jne    5ad230 <ExecProject+0x230>
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad1c1:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad1c4:       0f 84 02 01 00 00       je     5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad1ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad1d0:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad1d4:       48 89 05 85 d6 60 00    mov    %rax,0x60d685(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1db:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
         :	}
    0.00 :	  5ad1df:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad1e3:       5b                      pop    %rbx
    0.00 :	  5ad1e4:       41 5c                   pop    %r12
    0.00 :	  5ad1e6:       41 5d                   pop    %r13
    0.00 :	  5ad1e8:       41 5e                   pop    %r14
    0.00 :	  5ad1ea:       41 5f                   pop    %r15
    0.00 :	  5ad1ec:       c9                      leaveq 
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1ed:       e9 2e 68 00 00          jmpq   5b3a20 <ExecStoreVirtualTuple>
    0.00 :	  5ad1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
         :	                                {
         :	                                        values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad1f8:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad1fc:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad200:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad203:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad206:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad209:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad20c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad20f:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad213:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                                                  econtext,
         :	                                                                                                  &isnull[resind],
         :	                                                                                                  &itemIsDone[resind]);
         :
         :	                                        if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad217:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad21c:       0f 84 a0 00 00 00       je     5ad2c2 <ExecProject+0x2c2>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad222:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad226:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad229:       74 2c                   je     5ad257 <ExecProject+0x257>
    0.00 :	  5ad22b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        {
         :	                                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad230:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad234:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad238:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad23c:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad23f:       48 0f bf d8             movswq %ax,%rbx
    0.00 :	  5ad243:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad247:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad24c:       74 aa                   je     5ad1f8 <ExecProject+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad24e:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad252:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad255:       75 d9                   jne    5ad230 <ExecProject+0x230>
    0.00 :	  5ad257:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad25b:       8b 02                   mov    (%rdx),%eax
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad25d:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad260:       0f 85 6a ff ff ff       jne    5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad266:       eb 64                   jmp    5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad268:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad26f:       00 
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
    0.00 :	  5ad270:       4c 8b 4b 40             mov    0x40(%rbx),%r9
    0.00 :	  5ad274:       31 ff                   xor    %edi,%edi
    0.00 :	  5ad276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5ad27d:       00 00 00 
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad280:       49 63 04 bb             movslq (%r11,%rdi,4),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad284:       41 8b 0c b9             mov    (%r9,%rdi,4),%ecx
    0.00 :	  5ad288:       83 e9 01                sub    $0x1,%ecx
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad28b:       49 8b 34 06             mov    (%r14,%rax,1),%rsi
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad28f:       41 8b 04 ba             mov    (%r10,%rdi,4),%eax
    0.00 :	  5ad293:       48 63 c9                movslq %ecx,%rcx
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad296:       48 83 c7 01             add    $0x1,%rdi
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad29a:       48 8b 56 28             mov    0x28(%rsi),%rdx
    0.00 :	  5ad29e:       83 e8 01                sub    $0x1,%eax
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2a1:       41 39 f8                cmp    %edi,%r8d
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad2a4:       48 98                   cltq   
    0.00 :	  5ad2a6:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad2aa:       49 89 54 cd 00          mov    %rdx,0x0(%r13,%rcx,8)
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad2af:       48 8b 56 30             mov    0x30(%rsi),%rdx
    0.00 :	  5ad2b3:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad2b7:       41 88 04 0c             mov    %al,(%r12,%rcx,1)
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2bb:       7f c3                   jg     5ad280 <ExecProject+0x280>
    0.00 :	  5ad2bd:       e9 0c fe ff ff          jmpq   5ad0ce <ExecProject+0xce>
         :	                                        {
         :	                                                /*
         :	                                                 * Oh dear, this item is returning an empty set. Guess
         :	                                                 * we can't make a tuple after all.
         :	                                                 */
         :	                                                *isDone = ExprEndResult;
    0.00 :	  5ad2c2:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad2c6:       c7 00 02 00 00 00       movl   $0x2,(%rax)
    0.00 :	  5ad2cc:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad2d0:       48 8b 40 08             mov    0x8(%rax),%rax
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad2d4:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad2d7:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad2db:       74 6c                   je     5ad349 <ExecProject+0x349>
    0.00 :	  5ad2dd:       0f 1f 00                nopl   (%rax)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad2e0:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  5ad2e4:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	  5ad2e7:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad2eb:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad2ef:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad2f3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad2f6:       48 0f bf c0             movswq %ax,%rax
    0.00 :	  5ad2fa:       49 8d 1c 87             lea    (%r15,%rax,4),%rbx
    0.00 :	  5ad2fe:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad301:       75 35                   jne    5ad338 <ExecProject+0x338>
    0.00 :	  5ad303:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad307:       4c 8b 65 a0             mov    -0x60(%rbp),%r12
    0.00 :	  5ad30b:       4c 8d 2c c2             lea    (%rdx,%rax,8),%r13
    0.00 :	  5ad30f:       49 01 c4                add    %rax,%r12
    0.00 :	  5ad312:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        {
         :	                                                values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad318:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5ad31c:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  5ad31f:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad322:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad326:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  5ad329:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad32c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad32f:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad333:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad336:       74 e0                   je     5ad318 <ExecProject+0x318>
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad338:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5ad33c:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5ad340:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad343:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad347:       75 97                   jne    5ad2e0 <ExecProject+0x2e0>
    0.00 :	  5ad349:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  5ad34d:       48 89 15 0c d5 60 00    mov    %rdx,0x60d50c(%rip)        # bba860 <CurrentMemoryContext>
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
         :	}
    0.00 :	  5ad354:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad358:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad35c:       5b                      pop    %rbx
    0.00 :	  5ad35d:       41 5c                   pop    %r12
    0.00 :	  5ad35f:       41 5d                   pop    %r13
    0.00 :	  5ad361:       41 5e                   pop    %r14
    0.00 :	  5ad363:       41 5f                   pop    %r15
    0.00 :	  5ad365:       c9                      leaveq 
    0.00 :	  5ad366:       c3                      retq   
    0.00 :	  5ad367:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad36e:       00 00 
         :	                if (*isDone == ExprSingleResult)
         :	                {
         :	                        /*
         :	                         * all sets are done, so report that tlist expansion is complete.
         :	                         */
         :	                        *isDone = ExprEndResult;
    0.00 :	  5ad370:       c7 02 02 00 00 00       movl   $0x2,(%rdx)
    0.00 :	  5ad376:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad37a:       48 89 05 df d4 60 00    mov    %rax,0x60d4df(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad381:       eb d1                   jmp    5ad354 <ExecProject+0x354>
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
    0.00 :	  5ad383:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5ad386:       b9 f0 ad 88 00          mov    $0x88adf0,%ecx
    0.00 :	  5ad38b:       ba 9c 14 00 00          mov    $0x149c,%edx
    0.00 :	  5ad390:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5ad395:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad39a:       e8 21 d7 1c 00          callq  77aac0 <errstart>
    0.00 :	  5ad39f:       84 c0                   test   %al,%al
    0.00 :	  5ad3a1:       75 05                   jne    5ad3a8 <ExecProject+0x3a8>
    0.00 :	  5ad3a3:       e8 28 c1 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5ad3a8:       bf 30 b3 87 00          mov    $0x87b330,%edi
    0.00 :	  5ad3ad:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3af:       e8 ec f4 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5ad3b4:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  5ad3b9:       89 c3                   mov    %eax,%ebx
    0.00 :	  5ad3bb:       e8 90 f9 1c 00          callq  77cd50 <errcode>
    0.00 :	  5ad3c0:       89 de                   mov    %ebx,%esi
    0.00 :	  5ad3c2:       89 c7                   mov    %eax,%edi
    0.00 :	  5ad3c4:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3c6:       e8 15 d2 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5ad3cb:       eb d6                   jmp    5ad3a3 <ExecProject+0x3a3>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3007
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3020
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674710 <LockBuffer>:
         :	/*
         :	 * Acquire or release the content_lock for the buffer.
         :	 */
         :	void
         :	LockBuffer(Buffer buffer, int mode)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
   50.00 :	  674710:       55                      push   %rbp
   16.67 :	  674711:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674714:       53                      push   %rbx
    0.00 :	  674715:       89 f3                   mov    %esi,%ebx
    0.00 :	  674717:       48 83 ec 08             sub    $0x8,%rsp
         :	        volatile BufferDesc *buf;
         :
         :	        Assert(BufferIsValid(buffer));
         :	        if (BufferIsLocal(buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3007
   16.67 :	  67471b:       85 ff                   test   %edi,%edi
    0.00 :	  67471d:       78 31                   js     674750 <LockBuffer+0x40>
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
    0.00 :	  67471f:       48 63 c7                movslq %edi,%rax
    0.00 :	  674722:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  674726:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67472a:       48 03 05 cf b3 54 00    add    0x54b3cf(%rip),%rax        # bbfb00 <BufferDescriptors>
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
    0.00 :	  674731:       85 f6                   test   %esi,%esi
    0.00 :	  674733:       74 2b                   je     674760 <LockBuffer+0x50>
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
    0.00 :	  674735:       83 fe 01                cmp    $0x1,%esi
    0.00 :	  674738:       74 36                   je     674770 <LockBuffer+0x60>
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
    0.00 :	  67473a:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  67473d:       75 45                   jne    674784 <LockBuffer+0x74>
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67473f:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674743:       48 83 c4 08             add    $0x8,%rsp
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  674747:       31 f6                   xor    %esi,%esi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674749:       5b                      pop    %rbx
    0.00 :	  67474a:       c9                      leaveq 
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67474b:       e9 a0 b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674750:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674754:       5b                      pop    %rbx
    0.00 :	  674755:       c9                      leaveq 
    0.00 :	  674756:       c3                      retq   
    0.00 :	  674757:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  67475e:       00 00 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
    0.00 :	  674760:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674764:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674768:       5b                      pop    %rbx
    0.00 :	  674769:       c9                      leaveq 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
    0.00 :	  67476a:       e9 31 ac 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67476f:       90                      nop
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674770:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674774:       48 83 c4 08             add    $0x8,%rsp
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674778:       be 01 00 00 00          mov    $0x1,%esi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  67477d:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3020
   16.67 :	  67477e:       c9                      leaveq 
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  67477f:       e9 6c b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
    0.00 :	  674784:       ba 15 a0 8a 00          mov    $0x8aa015,%edx
    0.00 :	  674789:       be cb 0b 00 00          mov    $0xbcb,%esi
    0.00 :	  67478e:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674793:       e8 88 6c 10 00          callq  77b420 <elog_start>
    0.00 :	  674798:       89 da                   mov    %ebx,%edx
    0.00 :	  67479a:       be f8 9d 8a 00          mov    $0x8a9df8,%esi
    0.00 :	  67479f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6747a4:       31 c0                   xor    %eax,%eax
    0.00 :	  6747a6:       e8 85 6a 10 00          callq  77b230 <elog_finish>
    0.00 :	  6747ab:       e8 20 4d df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   83.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674c30 <PinBuffer>:
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
    0.00 :	  674c30:       55                      push   %rbp
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c31:       ba 01 00 00 00          mov    $0x1,%edx
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
    0.00 :	  674c36:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
   16.67 :	  674c39:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  674c3d:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  674c41:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674c44:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  674c48:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  674c4c:       48 83 ec 20             sub    $0x20,%rsp
         :	        int                     b = buf->buf_id;
    0.00 :	  674c50:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
   83.33 :	  674c53:       49 89 f6                mov    %rsi,%r14
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c56:       be 01 00 00 00          mov    $0x1,%esi
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c5b:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	{
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c61:       83 c7 01                add    $0x1,%edi
    0.00 :	  674c64:       e8 b7 f8 ff ff          callq  674520 <GetPrivateRefCountEntry>
    0.00 :	  674c69:       49 89 c4                mov    %rax,%r12
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c6c:       8b 40 04                mov    0x4(%rax),%eax
    0.00 :	  674c6f:       85 c0                   test   %eax,%eax
    0.00 :	  674c71:       75 43                   jne    674cb6 <PinBuffer+0x86>
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674c73:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674c77:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674c7c:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  674c7f:       84 c0                   test   %al,%al
    0.00 :	  674c81:       75 6d                   jne    674cf0 <PinBuffer+0xc0>
         :	                buf->refcount++;
    0.00 :	  674c83:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674c86:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674c89:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674c8c:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674c8f:       74 7c                   je     674d0d <PinBuffer+0xdd>
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
         :	                                buf->usage_count++;
         :	                }
         :	                else
         :	                {
         :	                        if (buf->usage_count == 0)
    0.00 :	  674c91:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674c95:       66 85 c0                test   %ax,%ax
    0.00 :	  674c98:       75 06                   jne    674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count = 1;
    0.00 :	  674c9a:       66 c7 43 16 01 00       movw   $0x1,0x16(%rbx)
         :	                }
         :	                result = (buf->flags & BM_VALID) != 0;
    0.00 :	  674ca0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674ca4:       d1 e8                   shr    %eax
    0.00 :	  674ca6:       41 89 c5                mov    %eax,%r13d
    0.00 :	  674ca9:       41 83 e5 01             and    $0x1,%r13d
         :	                UnlockBufHdr(buf);
    0.00 :	  674cad:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  674cb1:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	        {
         :	                /* If we previously pinned the buffer, it must surely be valid */
         :	                result = true;
         :	        }
         :
         :	        ref->refcount++;
    0.00 :	  674cb6:       83 c0 01                add    $0x1,%eax
    0.00 :	  674cb9:       41 89 44 24 04          mov    %eax,0x4(%r12)
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674cbe:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674cc1:       48 8b 3d f8 5b 54 00    mov    0x545bf8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674cc8:       83 c6 01                add    $0x1,%esi
    0.00 :	  674ccb:       e8 d0 54 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	                                                                BufferDescriptorGetBuffer(buf));
         :	        return result;
         :	}
    0.00 :	  674cd0:       44 89 e8                mov    %r13d,%eax
    0.00 :	  674cd3:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  674cd7:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674cdc:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  674ce1:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  674ce6:       c9                      leaveq 
    0.00 :	  674ce7:       c3                      retq   
    0.00 :	  674ce8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674cef:       00 
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674cf0:       ba 0c 05 00 00          mov    $0x50c,%edx
    0.00 :	  674cf5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674cfa:       e8 41 b3 01 00          callq  690040 <s_lock>
         :	                buf->refcount++;
    0.00 :	  674cff:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d02:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674d05:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674d08:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674d0b:       75 84                   jne    674c91 <PinBuffer+0x61>
         :	                {
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
    0.00 :	  674d0d:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d11:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  674d15:       77 89                   ja     674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count++;
    0.00 :	  674d17:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d1b:       83 c0 01                add    $0x1,%eax
    0.00 :	  674d1e:       66 89 43 16             mov    %ax,0x16(%rbx)
    0.00 :	  674d22:       e9 79 ff ff ff          jmpq   674ca0 <PinBuffer+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079ae70 <ResourceOwnerEnlargeBuffers>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   16.67 :	  79ae70:       55                      push   %rbp
   16.67 :	  79ae71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  79ae74:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  79ae78:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  79ae7c:       48 83 ec 10             sub    $0x10,%rsp
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae80:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae83:       49 89 fc                mov    %rdi,%r12
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae86:       74 2a                   je     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
    0.00 :	  79ae88:       8b 47 30                mov    0x30(%rdi),%eax
    0.00 :	  79ae8b:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  79ae8e:       7c 22                   jl     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
         :	                owner->nbuffers < owner->maxbuffers)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
    0.00 :	  79ae90:       48 8b 7f 28             mov    0x28(%rdi),%rdi
    0.00 :	  79ae94:       48 85 ff                test   %rdi,%rdi
    0.00 :	  79ae97:       74 27                   je     79aec0 <ResourceOwnerEnlargeBuffers+0x50>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
    0.00 :	  79ae99:       8d 1c 00                lea    (%rax,%rax,1),%ebx
         :	                owner->buffers = (Buffer *)
    0.00 :	  79ae9c:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  79ae9f:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  79aea3:       e8 48 de ff ff          callq  798cf0 <repalloc>
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aea8:       41 89 5c 24 30          mov    %ebx,0x30(%r12)
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aead:       49 89 44 24 28          mov    %rax,0x28(%r12)
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	}
    0.00 :	  79aeb2:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
   33.33 :	  79aeb6:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  79aebb:       c9                      leaveq 
   33.33 :	  79aebc:       c3                      retq   
    0.00 :	  79aebd:       0f 1f 00                nopl   (%rax)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aec0:       48 8b 3d a1 f9 41 00    mov    0x41f9a1(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  79aec7:       be 40 00 00 00          mov    $0x40,%esi
    0.00 :	  79aecc:       e8 bf df ff ff          callq  798e90 <MemoryContextAlloc>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aed1:       41 c7 44 24 30 10 00    movl   $0x10,0x30(%r12)
    0.00 :	  79aed8:       00 00 
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aeda:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	  79aedf:       eb d1                   jmp    79aeb2 <ResourceOwnerEnlargeBuffers+0x42>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1044
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1043
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1359
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9d80 <ExecAgg>:
         :	 *        stored in the expression context to be used when ExecProject evaluates
         :	 *        the result tuple.
         :	 */
         :	TupleTableSlot *
         :	ExecAgg(AggState *node)
         :	{
    0.00 :	  5b9d80:       55                      push   %rbp
    0.00 :	  5b9d81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9d84:       41 57                   push   %r15
    0.00 :	  5b9d86:       41 56                   push   %r14
    0.00 :	  5b9d88:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b9d8b:       41 55                   push   %r13
    0.00 :	  5b9d8d:       41 54                   push   %r12
    0.00 :	  5b9d8f:       53                      push   %rbx
    0.00 :	  5b9d90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous agg
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ss.ps.ps_TupFromTlist)
    0.00 :	  5b9d97:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5b9d9b:       74 1c                   je     5b9db9 <ExecAgg+0x39>
         :	        {
         :	                TupleTableSlot *result;
         :	                ExprDoneCond isDone;
         :
         :	                result = ExecProject(node->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5b9d9d:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5b9da1:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b9da5:       e8 56 32 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b9daa:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5b9dae:       0f 84 04 02 00 00       je     5b9fb8 <ExecAgg+0x238>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->ss.ps.ps_TupFromTlist = false;
    0.00 :	  5b9db4:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Exit if nothing left to do.  (We must do the ps_TupFromTlist check
         :	         * first, because in some cases agg_done gets set before we emit the final
         :	         * aggregate tuple, and we have to finish running SRFs for it.)
         :	         */
         :	        if (node->agg_done)
    0.00 :	  5b9db9:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9dbb:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9dc2:       00 
    0.00 :	  5b9dc3:       0f 85 ef 01 00 00       jne    5b9fb8 <ExecAgg+0x238>
         :	                return NULL;
         :
         :	        /* Dispatch based on strategy */
         :	        if (((Agg *) node->ss.ps.plan)->aggstrategy == AGG_HASHED)
    0.00 :	  5b9dc9:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  5b9dcd:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	  5b9dd4:       83 78 60 02             cmpl   $0x2,0x60(%rax)
    0.00 :	  5b9dd8:       0f 85 ec 01 00 00       jne    5b9fca <ExecAgg+0x24a>
         :	        {
         :	                if (!node->table_filled)
    0.00 :	  5b9dde:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9de0:       41 80 be 00 01 00 00    cmpb   $0x0,0x100(%r14)
    0.00 :	  5b9de7:       00 
    0.00 :	  5b9de8:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5b9def:       0f 84 5d 07 00 00       je     5ba552 <ExecAgg+0x7d2>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9df5:       4d 8b 6e 60             mov    0x60(%r14),%r13
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9df9:       49 8b 55 40             mov    0x40(%r13),%rdx
    0.00 :	  5b9dfd:       48 89 95 30 ff ff ff    mov    %rdx,-0xd0(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9e04:       49 8b 55 48             mov    0x48(%r13),%rdx
    0.00 :	  5b9e08:       48 89 95 28 ff ff ff    mov    %rdx,-0xd8(%rbp)
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9e0f:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
    0.00 :	  5b9e16:       48 89 95 20 ff ff ff    mov    %rdx,-0xe0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5b9e1d:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
    0.00 :	  5b9e24:       48 89 95 18 ff ff ff    mov    %rdx,-0xe8(%rbp)
         :
         :	        /*
         :	         * We loop retrieving groups until we find one satisfying
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9e2b:       84 c0                   test   %al,%al
    0.00 :	  5b9e2d:       0f 85 83 01 00 00       jne    5b9fb6 <ExecAgg+0x236>
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e33:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9e36:       e8 85 9c 1c 00          callq  783ac0 <hash_seq_search>
         :	                if (entry == NULL)
    0.00 :	  5b9e3b:       48 85 c0                test   %rax,%rax
         :	        while (!aggstate->agg_done)
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e3e:       49 89 c4                mov    %rax,%r12
         :	                if (entry == NULL)
    0.00 :	  5b9e41:       0f 84 fc 06 00 00       je     5ba543 <ExecAgg+0x7c3>
         :	                 *
         :	                 * We intentionally don't use ReScanExprContext here; if any aggs have
         :	                 * registered shutdown callbacks, they mustn't be called yet, since we
         :	                 * might not be done with that agg.
         :	                 */
         :	                ResetExprContext(econtext);
    0.00 :	  5b9e47:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b9e4b:       e8 60 eb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                /*
         :	                 * Store the copied first input tuple in the tuple table slot reserved
         :	                 * for it, so that it can be used in ExecProject.
         :	                 */
         :	                ExecStoreMinimalTuple(entry->shared.firstTuple,
    0.00 :	  5b9e50:       48 8b b5 18 ff ff ff    mov    -0xe8(%rbp),%rsi
    0.00 :	  5b9e57:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5b9e5b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9e5d:       e8 7e a5 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e62:       41 8b 96 98 00 00 00    mov    0x98(%r14),%edx
    0.00 :	  5b9e69:       85 d2                   test   %edx,%edx
    0.00 :	  5b9e6b:       7e 49                   jle    5b9eb6 <ExecAgg+0x136>
    0.00 :	  5b9e6d:       31 db                   xor    %ebx,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e6f:       48 8b 85 30 ff ff ff    mov    -0xd0(%rbp),%rax
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b9e76:       48 63 fb                movslq %ebx,%rdi
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e79:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e7c:       48 69 f7 a8 04 00 00    imul   $0x4a8,%rdi,%rsi
    0.00 :	  5b9e83:       48 03 b5 20 ff ff ff    add    -0xe0(%rbp),%rsi
    0.00 :	  5b9e8a:       48 8d 0c f8             lea    (%rax,%rdi,8),%rcx
    0.00 :	  5b9e8e:       48 89 f8                mov    %rdi,%rax
    0.00 :	  5b9e91:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5b9e95:       49 8d 54 04 08          lea    0x8(%r12,%rax,1),%rdx
    0.00 :	  5b9e9a:       48 8b 85 28 ff ff ff    mov    -0xd8(%rbp),%rax
    0.00 :	  5b9ea1:       4c 8d 04 38             lea    (%rax,%rdi,1),%r8
    0.00 :	  5b9ea5:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9ea8:       e8 13 fc ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9ead:       41 3b 9e 98 00 00 00    cmp    0x98(%r14),%ebx
    0.00 :	  5b9eb4:       7c b9                   jl     5b9e6f <ExecAgg+0xef>
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9eb6:       48 8b 95 18 ff ff ff    mov    -0xe8(%rbp),%rdx
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ebd:       4c 89 ee                mov    %r13,%rsi
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9ec0:       49 89 55 18             mov    %rdx,0x18(%r13)
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ec4:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9ec8:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9eca:       e8 41 30 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9ecf:       84 c0                   test   %al,%al
    0.00 :	  5b9ed1:       0f 85 4e 06 00 00       jne    5ba525 <ExecAgg+0x7a5>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9ed7:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9edb:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9ede:       74 18                   je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5b9ee0:       f2 0f 10 05 70 52 1f    movsd  0x1f5270(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9ee7:       00 
    0.00 :	  5b9ee8:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9eef:       00 
    0.00 :	  5b9ef0:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9ef7:       00 
    0.00 :	  5b9ef8:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5b9eff:       00 
    0.00 :	  5b9f00:       e9 26 ff ff ff          jmpq   5b9e2b <ExecAgg+0xab>
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
         :	        }
         :
         :	        if (slot2)
    0.00 :	  5b9f05:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b9f08:       74 08                   je     5b9f12 <ExecAgg+0x192>
         :	                ExecClearTuple(slot2);
    0.00 :	  5b9f0a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9f0d:       e8 fe a1 ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        tuplesort_end(peraggstate->sortstate);
    0.00 :	  5b9f12:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5b9f19:       00 
    0.00 :	  5b9f1a:       e8 c1 52 1e 00          callq  79f1e0 <tuplesort_end>
         :	        peraggstate->sortstate = NULL;
    0.00 :	  5b9f1f:       49 c7 84 24 f8 00 00    movq   $0x0,0xf8(%r12)
    0.00 :	  5b9f26:       00 00 00 00 00 
         :	                                        process_ordered_aggregate_multi(aggstate,
         :	                                                                                                        peraggstate,
         :	                                                                                                        pergroupstate);
         :	                        }
         :
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9f2b:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	  5b9f2f:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5b9f36:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5b9f39:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9f3c:       48 8d 0c d0             lea    (%rax,%rdx,8),%rcx
    0.00 :	  5b9f40:       48 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%rax
    0.00 :	  5b9f47:       4c 8d 04 10             lea    (%rax,%rdx,1),%r8
    0.00 :	  5b9f4b:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5b9f52:       e8 69 fb ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9f57:       83 85 44 ff ff ff 01    addl   $0x1,-0xbc(%rbp)
    0.00 :	  5b9f5e:       8b 95 44 ff ff ff       mov    -0xbc(%rbp),%edx
    0.00 :	  5b9f64:       41 3b 96 98 00 00 00    cmp    0x98(%r14),%edx
    0.00 :	  5b9f6b:       0f 8c f6 01 00 00       jl     5ba167 <ExecAgg+0x3e7>
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9f71:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9f75:       48 8b b5 78 ff ff ff    mov    -0x88(%rbp),%rsi
    0.00 :	  5b9f7c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9f7e:       e8 8d 2f ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9f83:       84 c0                   test   %al,%al
    0.00 :	  5b9f85:       0f 85 18 05 00 00       jne    5ba4a3 <ExecAgg+0x723>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9f8b:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9f8f:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9f92:       74 18                   je     5b9fac <ExecAgg+0x22c>
    0.00 :	  5b9f94:       f2 0f 10 05 bc 51 1f    movsd  0x1f51bc(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9f9b:       00 
    0.00 :	  5b9f9c:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9fa3:       00 
    0.00 :	  5b9fa4:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9fab:       00 
         :
         :	        /*
         :	         * We loop retrieving groups until we find one matching
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9fac:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9fb3:       00 
    0.00 :	  5b9fb4:       74 75                   je     5ba02b <ExecAgg+0x2ab>
    0.00 :	  5b9fb6:       31 c0                   xor    %eax,%eax
         :	                        agg_fill_hash_table(node);
         :	                return agg_retrieve_hash_table(node);
         :	        }
         :	        else
         :	                return agg_retrieve_direct(node);
         :	}
    0.00 :	  5b9fb8:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5b9fbf:       5b                      pop    %rbx
    0.00 :	  5b9fc0:       41 5c                   pop    %r12
    0.00 :	  5b9fc2:       41 5d                   pop    %r13
    0.00 :	  5b9fc4:       41 5e                   pop    %r14
    0.00 :	  5b9fc6:       41 5f                   pop    %r15
    0.00 :	  5b9fc8:       c9                      leaveq 
    0.00 :	  5b9fc9:       c3                      retq   
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fca:       49 8b 56 60             mov    0x60(%r14),%rdx
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fce:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fd2:       48 89 95 78 ff ff ff    mov    %rdx,-0x88(%rbp)
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fd9:       48 89 45 80             mov    %rax,-0x80(%rbp)
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9fdd:       48 8b 42 40             mov    0x40(%rdx),%rax
    0.00 :	  5b9fe1:       48 89 85 68 ff ff ff    mov    %rax,-0x98(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9fe8:       48 8b 52 48             mov    0x48(%rdx),%rdx
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5b9fec:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9ff3:       48 89 95 60 ff ff ff    mov    %rdx,-0xa0(%rbp)
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9ffa:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba001:       48 89 85 70 ff ff ff    mov    %rax,-0x90(%rbp)
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba008:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5ba00f:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        pergroup = aggstate->pergroup;
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba016:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba01d:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba024:       48 89 95 48 ff ff ff    mov    %rdx,-0xb8(%rbp)
         :	        {
         :	                /*
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
    0.00 :	  5ba02b:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5ba032:       00 
    0.00 :	  5ba033:       0f 84 a4 04 00 00       je     5ba4dd <ExecAgg+0x75d>
         :	                 * We use ReScanExprContext not just ResetExprContext because we want
         :	                 * any registered shutdown callbacks to be called.  That allows
         :	                 * aggregate functions to ensure they've cleaned up any non-memory
         :	                 * resources.
         :	                 */
         :	                ReScanExprContext(econtext);
    0.00 :	  5ba039:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5ba040:       e8 3b b1 ff ff          callq  5b5180 <ReScanExprContext>
         :
         :	                MemoryContextResetAndDeleteChildren(aggstate->aggcontext);
    0.00 :	  5ba045:       49 8b be b8 00 00 00    mov    0xb8(%r14),%rdi
    0.00 :	  5ba04c:       e8 bf eb 1d 00          callq  798c10 <MemoryContextResetAndDeleteChildren>
         :
         :	                /*
         :	                 * Initialize working state for a new input tuple group
         :	                 */
         :	                initialize_aggregates(aggstate, peragg, pergroup);
    0.00 :	  5ba051:       48 8b 95 50 ff ff ff    mov    -0xb0(%rbp),%rdx
    0.00 :	  5ba058:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
    0.00 :	  5ba05f:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba062:       e8 69 f5 ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                if (aggstate->grp_firstTuple != NULL)
    0.00 :	  5ba067:       49 8b be e0 00 00 00    mov    0xe0(%r14),%rdi
    0.00 :	  5ba06e:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ba071:       0f 84 c5 00 00 00       je     5ba13c <ExecAgg+0x3bc>
         :	                        /*
         :	                         * Store the copied first input tuple in the tuple table slot
         :	                         * reserved for it.  The tuple will be deleted when it is cleared
         :	                         * from the slot.
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
    0.00 :	  5ba077:       48 8b b5 48 ff ff ff    mov    -0xb8(%rbp),%rsi
    0.00 :	  5ba07e:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba080:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5ba085:       e8 f6 a3 ff ff          callq  5b4480 <ExecStoreTuple>
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba08a:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba091:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
         :	                                                   firstSlot,
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
    0.00 :	  5ba098:       49 c7 86 e0 00 00 00    movq   $0x0,0xe0(%r14)
    0.00 :	  5ba09f:       00 00 00 00 
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba0a3:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                         * Process each outer-plan tuple, and then fetch the next one,
         :	                         * until we exhaust the outer plan or cross a group boundary.
         :	                         */
         :	                        for (;;)
         :	                        {
         :	                                advance_aggregates(aggstate, pergroup);
    0.00 :	  5ba0a7:       48 8b b5 50 ff ff ff    mov    -0xb0(%rbp),%rsi
    0.00 :	  5ba0ae:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba0b1:       e8 9a f8 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
    0.00 :	  5ba0b6:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5ba0bd:       48 8b 7a 28             mov    0x28(%rdx),%rdi
    0.00 :	  5ba0c1:       e8 ea e8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0c6:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba0ca:       e8 d1 23 ff ff          callq  5ac4a0 <ExecProcNode>
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0cf:       48 85 c0                test   %rax,%rax
         :	                                advance_aggregates(aggstate, pergroup);
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0d2:       48 89 c3                mov    %rax,%rbx
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0d5:       0f 84 f5 03 00 00       je     5ba4d0 <ExecAgg+0x750>
    0.00 :	  5ba0db:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba0df:       0f 85 eb 03 00 00       jne    5ba4d0 <ExecAgg+0x750>
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
         :	                                        break;
         :	                                }
         :	                                /* set up for next advance_aggregates call */
         :	                                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba0e5:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba0ec:       48 89 58 18             mov    %rbx,0x18(%rax)
         :
         :	                                /*
         :	                                 * If we are grouping, check whether we've crossed a group
         :	                                 * boundary.
         :	                                 */
         :	                                if (node->aggstrategy == AGG_SORTED)
    0.00 :	  5ba0f0:       48 8b 95 10 ff ff ff    mov    -0xf0(%rbp),%rdx
    0.00 :	  5ba0f7:       83 7a 60 01             cmpl   $0x1,0x60(%rdx)
    0.00 :	  5ba0fb:       75 aa                   jne    5ba0a7 <ExecAgg+0x327>
         :	                                {
         :	                                        if (!execTuplesMatch(firstSlot,
    0.00 :	  5ba0fd:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba104:       48 8b 4a 68             mov    0x68(%rdx),%rcx
    0.00 :	  5ba108:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba10b:       8b 52 64                mov    0x64(%rdx),%edx
    0.00 :	  5ba10e:       4d 8b 86 a0 00 00 00    mov    0xa0(%r14),%r8
    0.00 :	  5ba115:       48 8b bd 48 ff ff ff    mov    -0xb8(%rbp),%rdi
    0.00 :	  5ba11c:       4c 8b 48 28             mov    0x28(%rax),%r9
    0.00 :	  5ba120:       e8 1b f3 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba125:       84 c0                   test   %al,%al
    0.00 :	  5ba127:       0f 85 7a ff ff ff       jne    5ba0a7 <ExecAgg+0x327>
         :	                                                                                 tmpcontext->ecxt_per_tuple_memory))
         :	                                        {
         :	                                                /*
         :	                                                 * Save the first input tuple of the next group.
         :	                                                 */
         :	                                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba12d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba130:       e8 7b 9e ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba135:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
         :	                 * qual, and the tlist.  (If we are not grouping, and there are no
         :	                 * input rows at all, we will come here with an empty firstSlot ...
         :	                 * but if not grouping, there can't be any references to
         :	                 * non-aggregated input columns, so no problem.)
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba13c:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba143:       48 8b 95 78 ff ff ff    mov    -0x88(%rbp),%rdx
    0.00 :	  5ba14a:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5ba14e:       41 8b 86 98 00 00 00    mov    0x98(%r14),%eax
    0.00 :	  5ba155:       85 c0                   test   %eax,%eax
    0.00 :	  5ba157:       0f 8e 14 fe ff ff       jle    5b9f71 <ExecAgg+0x1f1>
    0.00 :	  5ba15d:       c7 85 44 ff ff ff 00    movl   $0x0,-0xbc(%rbp)
    0.00 :	  5ba164:       00 00 00 
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5ba167:       48 63 95 44 ff ff ff    movslq -0xbc(%rbp),%rdx
    0.00 :	  5ba16e:       4c 8b a5 58 ff ff ff    mov    -0xa8(%rbp),%r12
    0.00 :	  5ba175:       48 69 c2 a8 04 00 00    imul   $0x4a8,%rdx,%rax
    0.00 :	  5ba17c:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5ba180:       49 01 c4                add    %rax,%r12
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5ba183:       48 89 d0                mov    %rdx,%rax
    0.00 :	  5ba186:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5ba18a:       48 03 85 50 ff ff ff    add    -0xb0(%rbp),%rax
    0.00 :	  5ba191:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :
         :	                        if (peraggstate->numSortCols > 0)
    0.00 :	  5ba198:       41 8b 84 24 8c 00 00    mov    0x8c(%r12),%eax
    0.00 :	  5ba19f:       00 
    0.00 :	  5ba1a0:       85 c0                   test   %eax,%eax
    0.00 :	  5ba1a2:       0f 8e 83 fd ff ff       jle    5b9f2b <ExecAgg+0x1ab>
         :	                        {
         :	                                if (peraggstate->numInputs == 1)
    0.00 :	  5ba1a8:       41 83 7c 24 14 01       cmpl   $0x1,0x14(%r12)
    0.00 :	  5ba1ae:       0f 84 3e 01 00 00       je     5ba2f2 <ExecAgg+0x572>
         :	static void
         :	process_ordered_aggregate_multi(AggState *aggstate,
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba1b4:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
    0.00 :	  5ba1bb:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba1bf:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
         :	        int                     numTransInputs = peraggstate->numTransInputs;
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1c3:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba1ca:       00 
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
    0.00 :	  5ba1cb:       49 8b 9c 24 e8 00 00    mov    0xe8(%r12),%rbx
    0.00 :	  5ba1d2:       00 
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
    0.00 :	  5ba1d3:       4d 8b bc 24 f0 00 00    mov    0xf0(%r12),%r15
    0.00 :	  5ba1da:       00 
         :	        int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5ba1db:       45 8b 6c 24 18          mov    0x18(%r12),%r13d
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1e0:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	        bool            haveOldValue = false;
         :	        int                     i;
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba1e3:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba1ea:       00 
    0.00 :	  5ba1eb:       e8 00 7e 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        ExecClearTuple(slot1);
    0.00 :	  5ba1f0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba1f3:       e8 18 9f ff ff          callq  5b4110 <ExecClearTuple>
         :	        if (slot2)
    0.00 :	  5ba1f8:       4d 85 ff                test   %r15,%r15
    0.00 :	  5ba1fb:       74 08                   je     5ba205 <ExecAgg+0x485>
         :	                ExecClearTuple(slot2);
    0.00 :	  5ba1fd:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba200:       e8 0b 9f ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5ba205:       c6 45 bb 00             movb   $0x0,-0x45(%rbp)
    0.00 :	  5ba209:       eb 3d                   jmp    5ba248 <ExecAgg+0x4c8>
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba20b:       80 7d bb 00             cmpb   $0x0,-0x45(%rbp)
    0.00 :	  5ba20f:       90                      nop
    0.00 :	  5ba210:       74 6c                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba212:       49 8b 8c 24 98 00 00    mov    0x98(%r12),%rcx
    0.00 :	  5ba219:       00 
    0.00 :	  5ba21a:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  5ba21e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5ba221:       4d 8b 84 24 b8 00 00    mov    0xb8(%r12),%r8
    0.00 :	  5ba228:       00 
    0.00 :	  5ba229:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  5ba22c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba22f:       e8 0c f2 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba234:       84 c0                   test   %al,%al
    0.00 :	  5ba236:       74 46                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba238:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba23c:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
    0.00 :	  5ba240:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba243:       e8 c8 9e ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        ExecClearTuple(slot1);
         :	        if (slot2)
         :	                ExecClearTuple(slot2);
         :
         :	        while (tuplesort_gettupleslot(peraggstate->sortstate, true, slot1))
    0.00 :	  5ba248:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba24f:       00 
    0.00 :	  5ba250:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba253:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba258:       e8 33 40 1e 00          callq  79e290 <tuplesort_gettupleslot>
    0.00 :	  5ba25d:       84 c0                   test   %al,%al
    0.00 :	  5ba25f:       0f 84 a0 fc ff ff       je     5b9f05 <ExecAgg+0x185>
         :	                /*
         :	                 * Extract the first numTransInputs columns as datums to pass to the
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
    0.00 :	  5ba265:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5ba268:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba26b:       e8 f0 4f eb ff          callq  46f260 <slot_getsomeattrs>
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba270:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba273:       85 c0                   test   %eax,%eax
    0.00 :	  5ba275:       0f 94 85 0f ff ff ff    sete   -0xf1(%rbp)
    0.00 :	  5ba27c:       75 8d                   jne    5ba20b <ExecAgg+0x48b>
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba27e:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5ba281:       7e 2e                   jle    5ba2b1 <ExecAgg+0x531>
    0.00 :	  5ba283:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba285:       0f 1f 00                nopl   (%rax)
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
    0.00 :	  5ba288:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  5ba28c:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5ba290:       49 89 84 d4 28 01 00    mov    %rax,0x128(%r12,%rdx,8)
    0.00 :	  5ba297:       00 
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
    0.00 :	  5ba298:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  5ba29c:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5ba2a0:       41 88 84 14 41 04 00    mov    %al,0x441(%r12,%rdx,1)
    0.00 :	  5ba2a7:       00 
    0.00 :	  5ba2a8:       48 83 c2 01             add    $0x1,%rdx
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba2ac:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  5ba2af:       7f d7                   jg     5ba288 <ExecAgg+0x508>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba2b1:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba2b8:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba2bb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba2be:       e8 cd f4 ff ff          callq  5b9790 <advance_transition_function>
         :
         :	                        if (numDistinctCols > 0)
    0.00 :	  5ba2c3:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba2c6:       85 c0                   test   %eax,%eax
    0.00 :	  5ba2c8:       7e 0d                   jle    5ba2d7 <ExecAgg+0x557>
    0.00 :	  5ba2ca:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba2cd:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba2d1:       4c 89 fb                mov    %r15,%rbx
    0.00 :	  5ba2d4:       49 89 ff                mov    %rdi,%r15
         :	                                haveOldValue = true;
         :	                        }
         :	                }
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
    0.00 :	  5ba2d7:       80 bd 0f ff ff ff 00    cmpb   $0x0,-0xf1(%rbp)
    0.00 :	  5ba2de:       0f 84 5c ff ff ff       je     5ba240 <ExecAgg+0x4c0>
         :	                        MemoryContextReset(workcontext);
    0.00 :	  5ba2e4:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5ba2e8:       e8 c3 e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba2ed:       e9 4e ff ff ff          jmpq   5ba240 <ExecAgg+0x4c0>
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba2f2:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba2f9:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5ba2fc:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5ba301:       45 31 ff                xor    %r15d,%r15d
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba304:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba308:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            isDistinct = (peraggstate->numDistinctCols > 0);
    0.00 :	  5ba30c:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba313:       00 
    0.00 :	  5ba314:       89 45 b4                mov    %eax,-0x4c(%rbp)
         :	        Datum      *newVal;
         :	        bool       *isNull;
         :
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba317:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba31e:       00 
    0.00 :	  5ba31f:       e8 cc 7c 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba324:       49 8d 94 24 28 01 00    lea    0x128(%r12),%rdx
    0.00 :	  5ba32b:       00 
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba32c:       49 8d 84 24 41 04 00    lea    0x441(%r12),%rax
    0.00 :	  5ba333:       00 
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba334:       48 89 55 98             mov    %rdx,-0x68(%rbp)
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba338:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  5ba33c:       eb 3c                   jmp    5ba37a <ExecAgg+0x5fa>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba33e:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba345:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba348:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba34b:       e8 40 f4 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba350:       84 db                   test   %bl,%bl
    0.00 :	  5ba352:       0f 84 98 00 00 00       je     5ba3f0 <ExecAgg+0x670>
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
         :	                        oldIsNull = *isNull;
    0.00 :	  5ba358:       41 0f b6 9c 24 41 04    movzbl 0x441(%r12),%ebx
    0.00 :	  5ba35f:       00 00 
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
    0.00 :	  5ba361:       4d 8b bc 24 28 01 00    mov    0x128(%r12),%r15
    0.00 :	  5ba368:       00 
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba369:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ba36d:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  5ba373:       48 89 15 e6 04 60 00    mov    %rdx,0x6004e6(%rip)        # bba860 <CurrentMemoryContext>
         :	         * Note: if input type is pass-by-ref, the datums returned by the sort are
         :	         * freshly palloc'd in the per-query context, so we must be careful to
         :	         * pfree them when they are no longer needed.
         :	         */
         :
         :	        while (tuplesort_getdatum(peraggstate->sortstate, true,
    0.00 :	  5ba37a:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba381:       00 
    0.00 :	  5ba382:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5ba386:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba38b:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ba38f:       e8 2c 3e 1e 00          callq  79e1c0 <tuplesort_getdatum>
    0.00 :	  5ba394:       84 c0                   test   %al,%al
    0.00 :	  5ba396:       0f 84 e0 00 00 00       je     5ba47c <ExecAgg+0x6fc>
         :	        {
         :	                /*
         :	                 * Clear and select the working context for evaluation of the equality
         :	                 * function and transition function.
         :	                 */
         :	                MemoryContextReset(workcontext);
    0.00 :	  5ba39c:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5ba3a0:       e8 0b e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba3a5:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3a9:       48 8b 15 b0 04 60 00    mov    0x6004b0(%rip),%rdx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba3b0:       48 89 05 a9 04 60 00    mov    %rax,0x6004a9(%rip)        # bba860 <CurrentMemoryContext>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba3b7:       8b 45 b4                mov    -0x4c(%rbp),%eax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3ba:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
    0.00 :	  5ba3be:       85 c0                   test   %eax,%eax
    0.00 :	  5ba3c0:       0f 8e 78 ff ff ff       jle    5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3c6:       45 84 ed                test   %r13b,%r13b
    0.00 :	  5ba3c9:       0f 84 6f ff ff ff       je     5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3cf:       84 db                   test   %bl,%bl
    0.00 :	  5ba3d1:       75 39                   jne    5ba40c <ExecAgg+0x68c>
    0.00 :	  5ba3d3:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba3da:       00 00 
    0.00 :	  5ba3dc:       74 50                   je     5ba42e <ExecAgg+0x6ae>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba3de:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba3e5:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba3e8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba3eb:       e8 a0 f3 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba3f0:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba3f7:       00 00 
    0.00 :	  5ba3f9:       0f 85 59 ff ff ff       jne    5ba358 <ExecAgg+0x5d8>
         :	                                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba3ff:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba402:       e8 79 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba407:       e9 4c ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba40c:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba413:       00 00 
    0.00 :	  5ba415:       75 35                   jne    5ba44c <ExecAgg+0x6cc>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba417:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba41e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba421:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba424:       e8 67 f3 ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5ba429:       e9 2a ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba42e:       49 8b 8c 24 28 01 00    mov    0x128(%r12),%rcx
    0.00 :	  5ba435:       00 
    0.00 :	  5ba436:       49 8b bc 24 b8 00 00    mov    0xb8(%r12),%rdi
    0.00 :	  5ba43d:       00 
    0.00 :	  5ba43e:       31 f6                   xor    %esi,%esi
    0.00 :	  5ba440:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  5ba443:       e8 e8 3b 1c 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  5ba448:       84 c0                   test   %al,%al
    0.00 :	  5ba44a:       74 92                   je     5ba3de <ExecAgg+0x65e>
         :	                         (!oldIsNull && !*isNull &&
         :	                          DatumGetBool(FunctionCall2(&peraggstate->equalfns[0],
         :	                                                                                 oldVal, *newVal)))))
         :	                {
         :	                        /* equal to prior, so forget this one */
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
    0.00 :	  5ba44c:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba453:       00 00 
    0.00 :	  5ba455:       0f 85 0e ff ff ff       jne    5ba369 <ExecAgg+0x5e9>
    0.00 :	  5ba45b:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba462:       00 00 
    0.00 :	  5ba464:       0f 85 ff fe ff ff       jne    5ba369 <ExecAgg+0x5e9>
         :	                                pfree(DatumGetPointer(*newVal));
    0.00 :	  5ba46a:       49 8b bc 24 28 01 00    mov    0x128(%r12),%rdi
    0.00 :	  5ba471:       00 
    0.00 :	  5ba472:       e8 09 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba477:       e9 ed fe ff ff          jmpq   5ba369 <ExecAgg+0x5e9>
         :	                }
         :
         :	                MemoryContextSwitchTo(oldContext);
         :	        }
         :
         :	        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba47c:       84 db                   test   %bl,%bl
    0.00 :	  5ba47e:       0f 85 8e fa ff ff       jne    5b9f12 <ExecAgg+0x192>
    0.00 :	  5ba484:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba48b:       00 00 
    0.00 :	  5ba48d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5ba490:       0f 85 7c fa ff ff       jne    5b9f12 <ExecAgg+0x192>
         :	                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba496:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba499:       e8 e2 e6 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba49e:       e9 6f fa ff ff          jmpq   5b9f12 <ExecAgg+0x192>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba4a3:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba4a7:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba4ab:       e8 50 2b ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba4b0:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba4b3:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba4b6:       0f 84 f0 fa ff ff       je     5b9fac <ExecAgg+0x22c>
         :	                        {
         :	                                aggstate->ss.ps.ps_TupFromTlist =
    0.00 :	  5ba4bc:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5ba4bf:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5ba4c4:       e9 ef fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
    0.00 :	  5ba4c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                                outerslot = ExecProcNode(outerPlan);
         :	                                if (TupIsNull(outerslot))
         :	                                {
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
    0.00 :	  5ba4d0:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba4d7:       01 
    0.00 :	  5ba4d8:       e9 5f fc ff ff          jmpq   5ba13c <ExecAgg+0x3bc>
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4dd:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba4e1:       e8 ba 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4e6:       48 85 c0                test   %rax,%rax
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4e9:       48 89 c7                mov    %rax,%rdi
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4ec:       74 06                   je     5ba4f4 <ExecAgg+0x774>
    0.00 :	  5ba4ee:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba4f2:       74 1f                   je     5ba513 <ExecAgg+0x793>
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba4f4:       48 8b 85 10 ff ff ff    mov    -0xf0(%rbp),%rax
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
    0.00 :	  5ba4fb:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba502:       01 
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba503:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5ba506:       85 c0                   test   %eax,%eax
    0.00 :	  5ba508:       0f 84 2b fb ff ff       je     5ba039 <ExecAgg+0x2b9>
    0.00 :	  5ba50e:       e9 a3 fa ff ff          jmpq   5b9fb6 <ExecAgg+0x236>
         :	                        {
         :	                                /*
         :	                                 * Make a copy of the first input tuple; we will use this for
         :	                                 * comparisons (in group mode) and for projection.
         :	                                 */
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba513:       e8 98 9a ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba518:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
    0.00 :	  5ba51f:       90                      nop
    0.00 :	  5ba520:       e9 14 fb ff ff          jmpq   5ba039 <ExecAgg+0x2b9>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba525:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba529:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba52d:       e8 ce 2a ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba532:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba535:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba538:       0f 84 ba f9 ff ff       je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5ba53e:       e9 79 ff ff ff          jmpq   5ba4bc <ExecAgg+0x73c>
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
         :	                if (entry == NULL)
         :	                {
         :	                        /* No more entries in hashtable, so done */
         :	                        aggstate->agg_done = TRUE;
    0.00 :	  5ba543:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba54a:       01 
    0.00 :	  5ba54b:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba54d:       e9 66 fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
         :	        TupleTableSlot *outerslot;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5ba552:       4d 8b 6e 30             mov    0x30(%r14),%r13
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba556:       4d 8b be c0 00 00 00    mov    0xc0(%r14),%r15
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba55d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5ba560:       e8 3b 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba565:       48 85 c0                test   %rax,%rax
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba568:       48 89 c3                mov    %rax,%rbx
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba56b:       0f 84 db 00 00 00       je     5ba64c <ExecAgg+0x8cc>
    0.00 :	  5ba571:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba575:       0f 85 d1 00 00 00       jne    5ba64c <ExecAgg+0x8cc>
         :	                        break;
         :	                /* set up for advance_aggregates call */
         :	                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba57b:       49 89 47 18             mov    %rax,0x18(%r15)
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static AggHashEntry
         :	lookup_hash_entry(AggState *aggstate, TupleTableSlot *inputslot)
         :	{
         :	        TupleTableSlot *hashslot = aggstate->hashslot;
    0.00 :	  5ba57f:       4d 8b a6 f0 00 00 00    mov    0xf0(%r14),%r12
         :	        ListCell   *l;
         :	        AggHashEntry entry;
         :	        bool            isnew;
         :
         :	        /* if first time through, initialize hashslot by cloning input slot */
         :	        if (hashslot->tts_tupleDescriptor == NULL)
    0.00 :	  5ba586:       49 83 7c 24 10 00       cmpq   $0x0,0x10(%r12)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   20.00 :	  5ba58c:       75 14                   jne    5ba5a2 <ExecAgg+0x822>
         :	        {
         :	                ExecSetSlotDescriptor(hashslot, inputslot->tts_tupleDescriptor);
    0.00 :	  5ba58e:       48 8b 70 10             mov    0x10(%rax),%rsi
    0.00 :	  5ba592:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba595:       e8 16 a0 ff ff          callq  5b45b0 <ExecSetSlotDescriptor>
         :	                /* Make sure all unused columns are NULLs */
         :	                ExecStoreAllNullTuple(hashslot);
    0.00 :	  5ba59a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba59d:       e8 1e 9d ff ff          callq  5b42c0 <ExecStoreAllNullTuple>
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
    0.00 :	  5ba5a2:       49 8b 96 f8 00 00 00    mov    0xf8(%r14),%rdx
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ba5a9:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba5ab:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5ba5ae:       74 04                   je     5ba5b4 <ExecAgg+0x834>
    0.00 :	  5ba5b0:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ba5b4:       8b 30                   mov    (%rax),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1043
   20.00 :	  5ba5b6:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba5b9:       e8 a2 4c eb ff          callq  46f260 <slot_getsomeattrs>
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5be:       49 8b 86 f8 00 00 00    mov    0xf8(%r14),%rax
    0.00 :	  5ba5c5:       48 85 c0                test   %rax,%rax
    0.00 :	  5ba5c8:       74 3a                   je     5ba604 <ExecAgg+0x884>
    0.00 :	  5ba5ca:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  5ba5ce:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba5d1:       74 31                   je     5ba604 <ExecAgg+0x884>
         :	        {
         :	                int                     varNumber = lfirst_int(l) - 1;
         :
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
    0.00 :	  5ba5d3:       8b 06                   mov    (%rsi),%eax
    0.00 :	  5ba5d5:       48 8b 53 28             mov    0x28(%rbx),%rdx
    0.00 :	  5ba5d9:       49 8b 4c 24 28          mov    0x28(%r12),%rcx
    0.00 :	  5ba5de:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ba5e1:       48 98                   cltq   
    0.00 :	  5ba5e3:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ba5e7:       48 89 14 c1             mov    %rdx,(%rcx,%rax,8)
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
    0.00 :	  5ba5eb:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  5ba5ef:       49 8b 4c 24 30          mov    0x30(%r12),%rcx
    0.00 :	  5ba5f4:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	  5ba5f8:       88 14 01                mov    %dl,(%rcx,%rax,1)
         :	                ExecStoreAllNullTuple(hashslot);
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
         :	        foreach(l, aggstate->hash_needed)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1044
   40.00 :	  5ba5fb:       48 8b 76 08             mov    0x8(%rsi),%rsi
    0.00 :	  5ba5ff:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba602:       75 cf                   jne    5ba5d3 <ExecAgg+0x853>
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
         :	        }
         :
         :	        /* find or create the hashtable entry using the filtered tuple */
         :	        entry = (AggHashEntry) LookupTupleHashEntry(aggstate->hashtable,
    0.00 :	  5ba604:       49 8b be e8 00 00 00    mov    0xe8(%r14),%rdi
    0.00 :	  5ba60b:       48 8d 55 d4             lea    -0x2c(%rbp),%rdx
    0.00 :	  5ba60f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba612:       e8 59 e8 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                                                                                                hashslot,
         :	                                                                                                &isnew);
         :
         :	        if (isnew)
    0.00 :	  5ba617:       80 7d d4 00             cmpb   $0x0,-0x2c(%rbp)
    0.00 :	  5ba61b:       48 8d 58 08             lea    0x8(%rax),%rbx
    0.00 :	  5ba61f:       74 12                   je     5ba633 <ExecAgg+0x8b3>
         :	        {
         :	                /* initialize aggregates for new tuple group */
         :	                initialize_aggregates(aggstate, aggstate->peragg, entry->pergroup);
    0.00 :	  5ba621:       49 8b b6 b0 00 00 00    mov    0xb0(%r14),%rsi
    0.00 :	  5ba628:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba62b:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba62e:       e8 9d ef ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                /* Find or build hashtable entry for this tuple's group */
         :	                entry = lookup_hash_entry(aggstate, outerslot);
         :
         :	                /* Advance the aggregates */
         :	                advance_aggregates(aggstate, entry->pergroup);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1359
   20.00 :	  5ba633:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba636:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba639:       e8 12 f3 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
    0.00 :	  5ba63e:       49 8b 7f 28             mov    0x28(%r15),%rdi
    0.00 :	  5ba642:       e8 69 e3 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba647:       e9 11 ff ff ff          jmpq   5ba55d <ExecAgg+0x7dd>
         :	        }
         :
         :	        aggstate->table_filled = true;
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba64c:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
         :	        }
         :
         :	        aggstate->table_filled = true;
    0.00 :	  5ba653:       41 c6 86 00 01 00 00    movb   $0x1,0x100(%r14)
    0.00 :	  5ba65a:       01 
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba65b:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5ba662:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5ba665:       e8 f6 92 1c 00          callq  783960 <hash_freeze>
    0.00 :	  5ba66a:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
    0.00 :	  5ba671:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba674:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5ba677:       e8 b4 97 1c 00          callq  783e30 <hash_seq_init>
    0.00 :	  5ba67c:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5ba683:       00 
    0.00 :	  5ba684:       e9 6c f7 ff ff          jmpq   5b9df5 <ExecAgg+0x75>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:105
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:126
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bd030 <MultiExecHash>:
         :	 *              than one batch is required.
         :	 * ----------------------------------------------------------------
         :	 */
         :	Node *
         :	MultiExecHash(HashState *node)
         :	{
    0.00 :	  5bd030:       55                      push   %rbp
    0.00 :	  5bd031:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bd034:       41 57                   push   %r15
    0.00 :	  5bd036:       41 56                   push   %r14
    0.00 :	  5bd038:       41 55                   push   %r13
    0.00 :	  5bd03a:       41 54                   push   %r12
    0.00 :	  5bd03c:       53                      push   %rbx
    0.00 :	  5bd03d:       48 83 ec 58             sub    $0x58,%rsp
    0.00 :	  5bd041:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
         :	        TupleTableSlot *slot;
         :	        ExprContext *econtext;
         :	        uint32          hashvalue;
         :
         :	        /* must provide our own instrumentation support */
         :	        if (node->ps.instrument)
    0.00 :	  5bd045:       48 8b 7f 18             mov    0x18(%rdi),%rdi
    0.00 :	  5bd049:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd04c:       74 05                   je     5bd053 <MultiExecHash+0x23>
         :	                InstrStartNode(node->ps.instrument);
    0.00 :	  5bd04e:       e8 ad ae ff ff          callq  5b7f00 <InstrStartNode>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bd053:       48 8b 55 80             mov    -0x80(%rbp),%rdx
         :	        hashtable = node->hashtable;
    0.00 :	  5bd057:       48 8b 45 80             mov    -0x80(%rbp),%rax
         :	                InstrStartNode(node->ps.instrument);
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bd05b:       48 8b 52 30             mov    0x30(%rdx),%rdx
    0.00 :	  5bd05f:       48 89 55 88             mov    %rdx,-0x78(%rbp)
         :	        hashtable = node->hashtable;
         :
         :	        /*
         :	         * set expression context
         :	         */
         :	        hashkeys = node->hashkeys;
    0.00 :	  5bd063:       48 8b 90 80 00 00 00    mov    0x80(%rax),%rdx
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
         :	        hashtable = node->hashtable;
    0.00 :	  5bd06a:       4c 8b 78 78             mov    0x78(%rax),%r15
         :
         :	        /*
         :	         * set expression context
         :	         */
         :	        hashkeys = node->hashkeys;
    0.00 :	  5bd06e:       48 89 55 90             mov    %rdx,-0x70(%rbp)
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5bd072:       48 8b 40 60             mov    0x60(%rax),%rax
    0.00 :	  5bd076:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5bd07a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * get all inner tuples and insert into the hash table (or temp files)
         :	         */
         :	        for (;;)
         :	        {
         :	                slot = ExecProcNode(outerNode);
    0.00 :	  5bd080:       48 8b 7d 88             mov    -0x78(%rbp),%rdi
    0.00 :	  5bd084:       e8 17 f4 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(slot))
    0.00 :	  5bd089:       48 85 c0                test   %rax,%rax
         :	        /*
         :	         * get all inner tuples and insert into the hash table (or temp files)
         :	         */
         :	        for (;;)
         :	        {
         :	                slot = ExecProcNode(outerNode);
    0.00 :	  5bd08c:       49 89 c4                mov    %rax,%r12
         :	                if (TupIsNull(slot))
    0.00 :	  5bd08f:       0f 84 9e 02 00 00       je     5bd333 <MultiExecHash+0x303>
    0.00 :	  5bd095:       80 78 04 00             cmpb   $0x0,0x4(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:105
   20.00 :	  5bd099:       0f 85 94 02 00 00       jne    5bd333 <MultiExecHash+0x303>
         :	                        break;
         :	                /* We have to compute the hash value */
         :	                econtext->ecxt_innertuple = slot;
    0.00 :	  5bd09f:       48 8b 55 98             mov    -0x68(%rbp),%rdx
         :	                if (ExecHashGetHashValue(hashtable, econtext, hashkeys,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   40.00 :	  5bd0a3:       4c 8d 4d d4             lea    -0x2c(%rbp),%r9
    0.00 :	  5bd0a7:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bd0a9:       4c 89 ff                mov    %r15,%rdi
         :	        {
         :	                slot = ExecProcNode(outerNode);
         :	                if (TupIsNull(slot))
         :	                        break;
         :	                /* We have to compute the hash value */
         :	                econtext->ecxt_innertuple = slot;
    0.00 :	  5bd0ac:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                if (ExecHashGetHashValue(hashtable, econtext, hashkeys,
   20.00 :	  5bd0b0:       45 0f be 47 20          movsbl 0x20(%r15),%r8d
    0.00 :	  5bd0b5:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5bd0b9:       48 8b 75 98             mov    -0x68(%rbp),%rsi
    0.00 :	  5bd0bd:       e8 ce ed ff ff          callq  5bbe90 <ExecHashGetHashValue>
    0.00 :	  5bd0c2:       84 c0                   test   %al,%al
    0.00 :	  5bd0c4:       74 ba                   je     5bd080 <MultiExecHash+0x50>
         :	                                                                 false, hashtable->keepNulls,
         :	                                                                 &hashvalue))
         :	                {
         :	                        int                     bucketNumber;
         :
         :	                        bucketNumber = ExecHashGetSkewBucket(hashtable, hashvalue);
    0.00 :	  5bd0c6:       8b 75 d4                mov    -0x2c(%rbp),%esi
    0.00 :	  5bd0c9:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bd0cc:       e8 df ea ff ff          callq  5bbbb0 <ExecHashGetSkewBucket>
    0.00 :	  5bd0d1:       89 45 a0                mov    %eax,-0x60(%rbp)
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
    0.00 :	  5bd0d4:       83 c0 01                add    $0x1,%eax
    0.00 :	  5bd0d7:       0f 84 b0 02 00 00       je     5bd38d <MultiExecHash+0x35d>
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0dd:       4c 89 e7                mov    %r12,%rdi
         :
         :	                        bucketNumber = ExecHashGetSkewBucket(hashtable, hashvalue);
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
         :	                        {
         :	                                /* It's a skew tuple, so put it into that hash table */
         :	                                ExecHashSkewTableInsert(hashtable, slot, hashvalue,
    0.00 :	  5bd0e0:       8b 5d d4                mov    -0x2c(%rbp),%ebx
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0e3:       e8 68 6e ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd0e8:       44 8b 20                mov    (%rax),%r12d
    0.00 :	  5bd0eb:       49 8b bf c0 00 00 00    mov    0xc0(%r15),%rdi
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0f2:       49 89 c6                mov    %rax,%r14
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd0f5:       41 83 c4 10             add    $0x10,%r12d
    0.00 :	  5bd0f9:       4d 63 e4                movslq %r12d,%r12
    0.00 :	  5bd0fc:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5bd0ff:       e8 8c bd 1d 00          callq  798e90 <MemoryContextAlloc>
         :	                                                                                                   hashTupleSize);
         :	        hashTuple->hashvalue = hashvalue;
    0.00 :	  5bd104:       89 58 08                mov    %ebx,0x8(%rax)
         :	        memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bd107:       41 8b 16                mov    (%r14),%edx
    0.00 :	  5bd10a:       48 8d 58 10             lea    0x10(%rax),%rbx
    0.00 :	  5bd10e:       4c 89 f6                mov    %r14,%rsi
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd111:       49 89 c5                mov    %rax,%r13
         :	                                                                                                   hashTupleSize);
         :	        hashTuple->hashvalue = hashvalue;
         :	        memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bd114:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bd117:       e8 d4 ca ea ff          callq  469bf0 <memcpy@plt>
         :	        HeapTupleHeaderClearMatch(HJTUPLE_MINTUPLE(hashTuple));
    0.00 :	  5bd11c:       66 81 63 0a ff 7f       andw   $0x7fff,0xa(%rbx)
         :
         :	        /* Push it onto the front of the skew bucket's list */
         :	        hashTuple->next = hashtable->skewBucket[bucketNumber]->tuples;
    0.00 :	  5bd122:       48 63 55 a0             movslq -0x60(%rbp),%rdx
    0.00 :	  5bd126:       49 8b 47 28             mov    0x28(%r15),%rax
    0.00 :	  5bd12a:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd12e:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5bd132:       49 89 45 00             mov    %rax,0x0(%r13)
         :	        hashtable->skewBucket[bucketNumber]->tuples = hashTuple;
    0.00 :	  5bd136:       49 8b 47 28             mov    0x28(%r15),%rax
    0.00 :	  5bd13a:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd13e:       4c 89 68 08             mov    %r13,0x8(%rax)
         :
         :	        /* Account for space used, and back off if we've used too much */
         :	        hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bd142:       4d 01 a7 90 00 00 00    add    %r12,0x90(%r15)
         :	        hashtable->spaceUsedSkew += hashTupleSize;
    0.00 :	  5bd149:       4d 01 a7 a8 00 00 00    add    %r12,0xa8(%r15)
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd150:       49 8b 87 90 00 00 00    mov    0x90(%r15),%rax
    0.00 :	  5bd157:       49 3b 87 a0 00 00 00    cmp    0xa0(%r15),%rax
    0.00 :	  5bd15e:       76 10                   jbe    5bd170 <MultiExecHash+0x140>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bd160:       49 89 87 a0 00 00 00    mov    %rax,0xa0(%r15)
    0.00 :	  5bd167:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bd16e:       00 00 
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
    0.00 :	  5bd170:       49 8b 87 b0 00 00 00    mov    0xb0(%r15),%rax
    0.00 :	  5bd177:       49 39 87 a8 00 00 00    cmp    %rax,0xa8(%r15)
    0.00 :	  5bd17e:       0f 86 72 01 00 00       jbe    5bd2f6 <MultiExecHash+0x2c6>
         :	        int                     batchno;
         :	        HashJoinTuple hashTuple;
         :
         :	        /* Locate the bucket to remove */
         :	        bucketToRemove = hashtable->skewBucketNums[hashtable->nSkewBuckets - 1];
         :	        bucket = hashtable->skewBucket[bucketToRemove];
    0.00 :	  5bd184:       49 63 47 34             movslq 0x34(%r15),%rax
    0.00 :	  5bd188:       49 8b 57 38             mov    0x38(%r15),%rdx
    0.00 :	  5bd18c:       48 63 44 82 fc          movslq -0x4(%rdx,%rax,4),%rax
    0.00 :	  5bd191:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd195:       48 89 45 c0             mov    %rax,-0x40(%rbp)
    0.00 :	  5bd199:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5bd19c:       49 03 77 28             add    0x28(%r15),%rsi
    0.00 :	  5bd1a0:       48 8b 06                mov    (%rsi),%rax
    0.00 :	  5bd1a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	         * Calculate which bucket and batch the tuples belong to in the main
         :	         * hashtable.  They all have the same hash value, so it's the same for all
         :	         * of them.  Also note that it's not possible for nbatch to increase while
         :	         * we are processing the tuples.
         :	         */
         :	        hashvalue = bucket->hashvalue;
    0.00 :	  5bd1a7:       8b 10                   mov    (%rax),%edx
    0.00 :	  5bd1a9:       89 55 a4                mov    %edx,-0x5c(%rbp)
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
    0.00 :	  5bd1ac:       41 8b 47 40             mov    0x40(%r15),%eax
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bd1b0:       41 8b 17                mov    (%r15),%edx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
    0.00 :	  5bd1b3:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5bd1b6:       0f 86 2c 01 00 00       jbe    5bd2e8 <MultiExecHash+0x2b8>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bd1bc:       44 8d 70 ff             lea    -0x1(%rax),%r14d
    0.00 :	  5bd1c0:       41 8b 4f 04             mov    0x4(%r15),%ecx
    0.00 :	  5bd1c4:       8b 45 a4                mov    -0x5c(%rbp),%eax
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd1c7:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bd1ca:       23 55 a4                and    -0x5c(%rbp),%edx
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bd1cd:       d3 e8                   shr    %cl,%eax
    0.00 :	  5bd1cf:       41 21 c6                and    %eax,%r14d
         :	         */
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
    0.00 :	  5bd1d2:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  5bd1d6:       48 8b 58 08             mov    0x8(%rax),%rbx
         :	        while (hashTuple != NULL)
    0.00 :	  5bd1da:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bd1dd:       0f 84 8a 00 00 00       je     5bd26d <MultiExecHash+0x23d>
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
         :	                {
         :	                        /* Move the tuple to the main hash table */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd1e3:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bd1e6:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd1ea:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                }
         :	                else
         :	                {
         :	                        /* Put the tuple into a temp file for later batches */
         :	                        Assert(batchno > hashtable->curbatch);
         :	                        ExecHashJoinSaveTuple(tuple, hashvalue,
    0.00 :	  5bd1ee:       49 63 c6                movslq %r14d,%rax
    0.00 :	  5bd1f1:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd1f5:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  5bd1f9:       eb 2b                   jmp    5bd226 <MultiExecHash+0x1f6>
    0.00 :	  5bd1fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
         :	                {
         :	                        /* Move the tuple to the main hash table */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd200:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5bd204:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd208:       48 8b 04 10             mov    (%rax,%rdx,1),%rax
    0.00 :	  5bd20c:       48 89 03                mov    %rax,(%rbx)
         :	                        hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bd20f:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd213:       48 89 1c 10             mov    %rbx,(%rax,%rdx,1)
         :	                        /* We have reduced skew space, but overall space doesn't change */
         :	                        hashtable->spaceUsedSkew -= tupleSize;
    0.00 :	  5bd217:       4d 29 a7 a8 00 00 00    sub    %r12,0xa8(%r15)
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
    0.00 :	  5bd21e:       4d 85 ed                test   %r13,%r13
    0.00 :	  5bd221:       74 42                   je     5bd265 <MultiExecHash+0x235>
    0.00 :	  5bd223:       4c 89 eb                mov    %r13,%rbx
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
         :	                tupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
    0.00 :	  5bd226:       8b 43 10                mov    0x10(%rbx),%eax
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
    0.00 :	  5bd229:       45 39 77 44             cmp    %r14d,0x44(%r15)
         :	                /*
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
    0.00 :	  5bd22d:       48 8d 7b 10             lea    0x10(%rbx),%rdi
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
         :	        {
         :	                HashJoinTuple nextHashTuple = hashTuple->next;
    0.00 :	  5bd231:       4c 8b 2b                mov    (%rbx),%r13
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
         :	                tupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
    0.00 :	  5bd234:       4c 8d 60 10             lea    0x10(%rax),%r12
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
    0.00 :	  5bd238:       74 c6                   je     5bd200 <MultiExecHash+0x1d0>
         :	                }
         :	                else
         :	                {
         :	                        /* Put the tuple into a temp file for later batches */
         :	                        Assert(batchno > hashtable->curbatch);
         :	                        ExecHashJoinSaveTuple(tuple, hashvalue,
    0.00 :	  5bd23a:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5bd23e:       49 03 57 68             add    0x68(%r15),%rdx
    0.00 :	  5bd242:       8b 75 a4                mov    -0x5c(%rbp),%esi
    0.00 :	  5bd245:       e8 16 03 00 00          callq  5bd560 <ExecHashJoinSaveTuple>
         :	                                                                  &hashtable->innerBatchFile[batchno]);
         :	                        pfree(hashTuple);
    0.00 :	  5bd24a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bd24d:       e8 2e b9 1d 00          callq  798b80 <pfree>
         :	                        hashtable->spaceUsed -= tupleSize;
    0.00 :	  5bd252:       4d 29 a7 90 00 00 00    sub    %r12,0x90(%r15)
         :	                        hashtable->spaceUsedSkew -= tupleSize;
    0.00 :	  5bd259:       4d 29 a7 a8 00 00 00    sub    %r12,0xa8(%r15)
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
    0.00 :	  5bd260:       4d 85 ed                test   %r13,%r13
    0.00 :	  5bd263:       75 be                   jne    5bd223 <MultiExecHash+0x1f3>
    0.00 :	  5bd265:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  5bd269:       49 03 77 28             add    0x28(%r15),%rsi
         :	         * to remove A first then ExecHashGetSkewBucket would mistakenly start
         :	         * reporting that B is not in the hashtable, because it would hit the NULL
         :	         * before finding B.  However, we always remove entries in the reverse
         :	         * order of creation, so this failure cannot happen.
         :	         */
         :	        hashtable->skewBucket[bucketToRemove] = NULL;
    0.00 :	  5bd26d:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        hashtable->nSkewBuckets--;
    0.00 :	  5bd274:       41 83 6f 34 01          subl   $0x1,0x34(%r15)
         :	        pfree(bucket);
    0.00 :	  5bd279:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bd27d:       e8 fe b8 1d 00          callq  798b80 <pfree>
         :
         :	        /*
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
    0.00 :	  5bd282:       41 8b 4f 34             mov    0x34(%r15),%ecx
         :	         * order of creation, so this failure cannot happen.
         :	         */
         :	        hashtable->skewBucket[bucketToRemove] = NULL;
         :	        hashtable->nSkewBuckets--;
         :	        pfree(bucket);
         :	        hashtable->spaceUsed -= SKEW_BUCKET_OVERHEAD;
    0.00 :	  5bd286:       49 83 af 90 00 00 00    subq   $0x10,0x90(%r15)
    0.00 :	  5bd28d:       10 
         :	        hashtable->spaceUsedSkew -= SKEW_BUCKET_OVERHEAD;
    0.00 :	  5bd28e:       49 83 af a8 00 00 00    subq   $0x10,0xa8(%r15)
    0.00 :	  5bd295:       10 
         :
         :	        /*
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
    0.00 :	  5bd296:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bd298:       0f 85 d2 fe ff ff       jne    5bd170 <MultiExecHash+0x140>
         :	        {
         :	                hashtable->skewEnabled = false;
         :	                pfree(hashtable->skewBucket);
    0.00 :	  5bd29e:       49 8b 7f 28             mov    0x28(%r15),%rdi
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
         :	        {
         :	                hashtable->skewEnabled = false;
    0.00 :	  5bd2a2:       41 c6 47 21 00          movb   $0x0,0x21(%r15)
         :	                pfree(hashtable->skewBucket);
    0.00 :	  5bd2a7:       e8 d4 b8 1d 00          callq  798b80 <pfree>
         :	                pfree(hashtable->skewBucketNums);
    0.00 :	  5bd2ac:       49 8b 7f 38             mov    0x38(%r15),%rdi
    0.00 :	  5bd2b0:       e8 cb b8 1d 00          callq  798b80 <pfree>
         :	                hashtable->skewBucket = NULL;
         :	                hashtable->skewBucketNums = NULL;
         :	                hashtable->spaceUsed -= hashtable->spaceUsedSkew;
    0.00 :	  5bd2b5:       49 8b 87 a8 00 00 00    mov    0xa8(%r15),%rax
         :	        if (hashtable->nSkewBuckets == 0)
         :	        {
         :	                hashtable->skewEnabled = false;
         :	                pfree(hashtable->skewBucket);
         :	                pfree(hashtable->skewBucketNums);
         :	                hashtable->skewBucket = NULL;
    0.00 :	  5bd2bc:       49 c7 47 28 00 00 00    movq   $0x0,0x28(%r15)
    0.00 :	  5bd2c3:       00 
         :	                hashtable->skewBucketNums = NULL;
    0.00 :	  5bd2c4:       49 c7 47 38 00 00 00    movq   $0x0,0x38(%r15)
    0.00 :	  5bd2cb:       00 
         :	                hashtable->spaceUsed -= hashtable->spaceUsedSkew;
    0.00 :	  5bd2cc:       49 29 87 90 00 00 00    sub    %rax,0x90(%r15)
         :	                hashtable->spaceUsedSkew = 0;
    0.00 :	  5bd2d3:       49 c7 87 a8 00 00 00    movq   $0x0,0xa8(%r15)
    0.00 :	  5bd2da:       00 00 00 00 
    0.00 :	  5bd2de:       e9 8d fe ff ff          jmpq   5bd170 <MultiExecHash+0x140>
    0.00 :	  5bd2e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd2e8:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bd2eb:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5bd2ee:       23 55 a4                and    -0x5c(%rbp),%edx
    0.00 :	  5bd2f1:       e9 dc fe ff ff          jmpq   5bd1d2 <MultiExecHash+0x1a2>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
         :	                ExecHashRemoveNextSkewBucket(hashtable);
         :
         :	        /* Check we are not over the total spaceAllowed, either */
         :	        if (hashtable->spaceUsed > hashtable->spaceAllowed)
    0.00 :	  5bd2f6:       49 8b 97 98 00 00 00    mov    0x98(%r15),%rdx
    0.00 :	  5bd2fd:       49 39 97 90 00 00 00    cmp    %rdx,0x90(%r15)
    0.00 :	  5bd304:       0f 87 40 01 00 00       ja     5bd44a <MultiExecHash+0x41a>
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
         :	                        {
         :	                                /* It's a skew tuple, so put it into that hash table */
         :	                                ExecHashSkewTableInsert(hashtable, slot, hashvalue,
         :	                                                                                bucketNumber);
         :	                                hashtable->skewTuples += 1;
    0.00 :	  5bd30a:       f2 0f 10 0d 46 1e 1f    movsd  0x1f1e46(%rip),%xmm1        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bd311:       00 
    0.00 :	  5bd312:       66 0f 28 c1             movapd %xmm1,%xmm0
    0.00 :	  5bd316:       f2 41 0f 58 47 60       addsd  0x60(%r15),%xmm0
    0.00 :	  5bd31c:       f2 41 0f 11 47 60       movsd  %xmm0,0x60(%r15)
         :	                        else
         :	                        {
         :	                                /* Not subject to skew optimization, so insert normally */
         :	                                ExecHashTableInsert(hashtable, slot, hashvalue);
         :	                        }
         :	                        hashtable->totalTuples += 1;
    0.00 :	  5bd322:       f2 41 0f 58 4f 58       addsd  0x58(%r15),%xmm1
    0.00 :	  5bd328:       f2 41 0f 11 4f 58       movsd  %xmm1,0x58(%r15)
    0.00 :	  5bd32e:       e9 4d fd ff ff          jmpq   5bd080 <MultiExecHash+0x50>
         :	                }
         :	        }
         :
         :	        /* resize the hash table if needed (NTUP_PER_BUCKET exceeded) */
         :	        if (hashtable->nbuckets != hashtable->nbuckets_optimal)
    0.00 :	  5bd333:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bd336:       41 8b 57 0c             mov    0xc(%r15),%edx
    0.00 :	  5bd33a:       39 d0                   cmp    %edx,%eax
    0.00 :	  5bd33c:       74 02                   je     5bd340 <MultiExecHash+0x310>
         :	ExecHashIncreaseNumBuckets(HashJoinTable hashtable)
         :	{
         :	        HashMemoryChunk chunk;
         :
         :	        /* do nothing if not an increase (it's called increase for a reason) */
         :	        if (hashtable->nbuckets >= hashtable->nbuckets_optimal)
    0.00 :	  5bd33e:       7c 68                   jl     5bd3a8 <MultiExecHash+0x378>
         :
         :	                ExecHashIncreaseNumBuckets(hashtable);
         :	        }
         :
         :	        /* Account for the buckets in spaceUsed (reported in EXPLAIN ANALYZE) */
         :	        hashtable->spaceUsed += hashtable->nbuckets * sizeof(HashJoinTuple);
    0.00 :	  5bd340:       48 98                   cltq   
    0.00 :	  5bd342:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd346:       49 03 87 90 00 00 00    add    0x90(%r15),%rax
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd34d:       49 3b 87 a0 00 00 00    cmp    0xa0(%r15),%rax
         :
         :	                ExecHashIncreaseNumBuckets(hashtable);
         :	        }
         :
         :	        /* Account for the buckets in spaceUsed (reported in EXPLAIN ANALYZE) */
         :	        hashtable->spaceUsed += hashtable->nbuckets * sizeof(HashJoinTuple);
    0.00 :	  5bd354:       49 89 87 90 00 00 00    mov    %rax,0x90(%r15)
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd35b:       76 07                   jbe    5bd364 <MultiExecHash+0x334>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bd35d:       49 89 87 a0 00 00 00    mov    %rax,0xa0(%r15)
         :
         :	        /* must provide our own instrumentation support */
         :	        if (node->ps.instrument)
    0.00 :	  5bd364:       48 8b 45 80             mov    -0x80(%rbp),%rax
    0.00 :	  5bd368:       48 8b 78 18             mov    0x18(%rax),%rdi
    0.00 :	  5bd36c:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd36f:       74 0b                   je     5bd37c <MultiExecHash+0x34c>
         :	                InstrStopNode(node->ps.instrument, hashtable->totalTuples);
    0.00 :	  5bd371:       f2 41 0f 10 47 58       movsd  0x58(%r15),%xmm0
    0.00 :	  5bd377:       e8 54 a8 ff ff          callq  5b7bd0 <InstrStopNode>
         :	         * parent Hashjoin node is expected to know how to fish it out of our node
         :	         * state.  Ugly but not really worth cleaning up, since Hashjoin knows
         :	         * quite a bit more about Hash besides that.
         :	         */
         :	        return NULL;
         :	}
    0.00 :	  5bd37c:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  5bd380:       31 c0                   xor    %eax,%eax
    0.00 :	  5bd382:       5b                      pop    %rbx
    0.00 :	  5bd383:       41 5c                   pop    %r12
    0.00 :	  5bd385:       41 5d                   pop    %r13
    0.00 :	  5bd387:       41 5e                   pop    %r14
    0.00 :	  5bd389:       41 5f                   pop    %r15
    0.00 :	  5bd38b:       c9                      leaveq 
    0.00 :	  5bd38c:       c3                      retq   
         :	                                hashtable->skewTuples += 1;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Not subject to skew optimization, so insert normally */
         :	                                ExecHashTableInsert(hashtable, slot, hashvalue);
    0.00 :	  5bd38d:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5bd390:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5bd393:       4c 89 ff                mov    %r15,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:126
   20.00 :	  5bd396:       e8 75 f0 ff ff          callq  5bc410 <ExecHashTableInsert>
    0.00 :	  5bd39b:       f2 0f 10 0d b5 1d 1f    movsd  0x1f1db5(%rip),%xmm1        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bd3a2:       00 
    0.00 :	  5bd3a3:       e9 7a ff ff ff          jmpq   5bd322 <MultiExecHash+0x2f2>
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3a8:       48 63 fa                movslq %edx,%rdi
         :
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
    0.00 :	  5bd3ab:       41 89 17                mov    %edx,(%r15)
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3ae:       e8 4d 64 1c 00          callq  783800 <my_log2>
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3b3:       49 63 37                movslq (%r15),%rsi
    0.00 :	  5bd3b6:       49 8b 7f 18             mov    0x18(%r15),%rdi
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3ba:       41 89 47 04             mov    %eax,0x4(%r15)
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3be:       48 c1 e6 03             shl    $0x3,%rsi
    0.00 :	  5bd3c2:       e8 29 b9 1d 00          callq  798cf0 <repalloc>
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3c7:       49 63 17                movslq (%r15),%rdx
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3ca:       48 89 c7                mov    %rax,%rdi
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3cd:       31 f6                   xor    %esi,%esi
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3cf:       49 89 47 18             mov    %rax,0x18(%r15)
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3d3:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  5bd3d7:       e8 44 c0 ea ff          callq  469420 <memset@plt>
         :
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
    0.00 :	  5bd3dc:       49 8b bf c8 00 00 00    mov    0xc8(%r15),%rdi
    0.00 :	  5bd3e3:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd3e6:       74 5a                   je     5bd442 <MultiExecHash+0x412>
    0.00 :	  5bd3e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5bd3ef:       00 
         :	        {
         :	                /* process all tuples stored in this chunk */
         :	                size_t idx = 0;
         :	                while (idx < chunk->used)
    0.00 :	  5bd3f0:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5bd3f5:       74 42                   je     5bd439 <MultiExecHash+0x409>
         :	                {
         :	                        HashJoinTuple hashTuple = (HashJoinTuple) (chunk->data + idx);
    0.00 :	  5bd3f7:       4c 8d 47 20             lea    0x20(%rdi),%r8
    0.00 :	  5bd3fb:       31 f6                   xor    %esi,%esi
    0.00 :	  5bd3fd:       0f 1f 00                nopl   (%rax)
    0.00 :	  5bd400:       49 8d 0c 30             lea    (%r8,%rsi,1),%rcx
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bd404:       41 8b 07                mov    (%r15),%eax
         :	                {
         :	                        HashJoinTuple hashTuple = (HashJoinTuple) (chunk->data + idx);
         :	                        int             bucketno;
         :	                        int             batchno;
         :
         :	                        ExecHashGetBucketAndBatch(hashtable, hashTuple->hashvalue,
    0.00 :	  5bd407:       8b 51 08                mov    0x8(%rcx),%edx
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd40a:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bd40d:       21 d0                   and    %edx,%eax
         :
         :	                        ExecHashGetBucketAndBatch(hashtable, hashTuple->hashvalue,
         :	                                                                          &bucketno, &batchno);
         :
         :	                        /* add the tuple to the proper bucket */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd40f:       48 63 d0                movslq %eax,%rdx
    0.00 :	  5bd412:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd416:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd41a:       48 89 01                mov    %rax,(%rcx)
         :	                        hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bd41d:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd421:       48 89 0c d0             mov    %rcx,(%rax,%rdx,8)
         :
         :	                        /* advance index past the tuple */
         :	                        idx += MAXALIGN(HJTUPLE_OVERHEAD +
    0.00 :	  5bd425:       8b 41 10                mov    0x10(%rcx),%eax
    0.00 :	  5bd428:       48 83 c0 17             add    $0x17,%rax
    0.00 :	  5bd42c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  5bd430:       48 01 c6                add    %rax,%rsi
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
         :	        {
         :	                /* process all tuples stored in this chunk */
         :	                size_t idx = 0;
         :	                while (idx < chunk->used)
    0.00 :	  5bd433:       48 3b 77 10             cmp    0x10(%rdi),%rsi
    0.00 :	  5bd437:       72 c7                   jb     5bd400 <MultiExecHash+0x3d0>
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
         :
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
    0.00 :	  5bd439:       48 8b 7f 18             mov    0x18(%rdi),%rdi
    0.00 :	  5bd43d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd440:       75 ae                   jne    5bd3f0 <MultiExecHash+0x3c0>
    0.00 :	  5bd442:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bd445:       e9 f6 fe ff ff          jmpq   5bd340 <MultiExecHash+0x310>
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
         :	                ExecHashRemoveNextSkewBucket(hashtable);
         :
         :	        /* Check we are not over the total spaceAllowed, either */
         :	        if (hashtable->spaceUsed > hashtable->spaceAllowed)
         :	                ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bd44a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bd44d:       e8 8e ec ff ff          callq  5bc0e0 <ExecHashIncreaseNumBatches>
    0.00 :	  5bd452:       e9 b3 fe ff ff          jmpq   5bd30a <MultiExecHash+0x2da>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782c50 <CHashAddToGarbage>:
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c50:       0f b6 4f 14             movzbl 0x14(%rdi),%ecx
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c54:       89 d0                   mov    %edx,%eax
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c56:       55                      push   %rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c57:       d1 e8                   shr    %eax
    0.00 :	  782c59:       41 89 c0                mov    %eax,%r8d
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c5c:       48 89 e5                mov    %rsp,%rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c5f:       44 0f af 47 1c          imul   0x1c(%rdi),%r8d
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c64:       d3 ee                   shr    %cl,%esi
    0.00 :	  782c66:       0f b6 4f 15             movzbl 0x15(%rdi),%ecx
    0.00 :	  782c6a:       89 f0                   mov    %esi,%eax
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c6c:       4c 03 47 30             add    0x30(%rdi),%r8
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c70:       d3 e8                   shr    %cl,%eax
    0.00 :	  782c72:       01 f0                   add    %esi,%eax
    0.00 :	  782c74:       48 8d 0c 85 00 00 00    lea    0x0(,%rax,4),%rcx
    0.00 :	  782c7b:       00 
    0.00 :	  782c7c:       48 03 4f 28             add    0x28(%rdi),%rcx
    0.00 :	  782c80:       eb 0e                   jmp    782c90 <CHashAddToGarbage+0x40>
    0.00 :	  782c82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                g = *garbage;
         :	                n->un.gcnext = g;
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
    0.00 :	  782c88:       48 83 87 a8 00 00 00    addq   $0x1,0xa8(%rdi)
    0.00 :	  782c8f:       01 
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
         :
         :	        while (1)
         :	        {
         :	                g = *garbage;
    0.00 :	  782c90:       8b 01                   mov    (%rcx),%eax
         :	                n->un.gcnext = g;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
  100.00 :	  782c92:       41 89 40 04             mov    %eax,0x4(%r8)
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
    0.00 :	  782c96:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
    0.00 :	  782c9a:       75 ec                   jne    782c88 <CHashAddToGarbage+0x38>
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
         :	        }
         :	}
    0.00 :	  782c9c:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:90
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:93
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:113
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000470370 <heap_compute_data_size>:
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470370:       55                      push   %rbp
    0.00 :	  470371:       49 89 f0                mov    %rsi,%r8
    0.00 :	  470374:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  470377:       41 57                   push   %r15
    0.00 :	  470379:       41 56                   push   %r14
    0.00 :	  47037b:       49 89 d6                mov    %rdx,%r14
    0.00 :	  47037e:       41 55                   push   %r13
    0.00 :	  470380:       41 54                   push   %r12
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470382:       45 31 e4                xor    %r12d,%r12d
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470385:       53                      push   %rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470386:       31 db                   xor    %ebx,%ebx
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470388:       48 83 ec 08             sub    $0x8,%rsp
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:90
   25.00 :	  47038c:       44 8b 2f                mov    (%rdi),%r13d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  47038f:       4c 8b 7f 08             mov    0x8(%rdi),%r15
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470393:       45 85 ed                test   %r13d,%r13d
    0.00 :	  470396:       7f 43                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470398:       e9 c3 00 00 00          jmpq   470460 <heap_compute_data_size+0xf0>
    0.00 :	  47039d:       0f 1f 00                nopl   (%rax)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  4703a0:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  4703a4:       3c 69                   cmp    $0x69,%al
    0.00 :	  4703a6:       0f 84 cc 00 00 00       je     470478 <heap_compute_data_size+0x108>
    0.00 :	  4703ac:       3c 63                   cmp    $0x63,%al
    0.00 :	  4703ae:       66 90                   xchg   %ax,%ax
    0.00 :	  4703b0:       74 10                   je     4703c2 <heap_compute_data_size+0x52>
    0.00 :	  4703b2:       3c 64                   cmp    $0x64,%al
    0.00 :	  4703b4:       0f 84 ce 00 00 00       je     470488 <heap_compute_data_size+0x118>
    0.00 :	  4703ba:       49 83 c4 01             add    $0x1,%r12
    0.00 :	  4703be:       49 83 e4 fe             and    $0xfffffffffffffffe,%r12
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  4703c2:       66 85 c9                test   %cx,%cx
    0.00 :	  4703c5:       7e 71                   jle    470438 <heap_compute_data_size+0xc8>
    0.00 :	  4703c7:       48 0f bf c1             movswq %cx,%rax
    0.00 :	  4703cb:       49 01 c4                add    %rax,%r12
    0.00 :	  4703ce:       48 83 c3 01             add    $0x1,%rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:93
   25.00 :	  4703d2:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  4703d5:       0f 8e 85 00 00 00       jle    470460 <heap_compute_data_size+0xf0>
         :	        {
         :	                Datum           val;
         :
         :	                if (isnull[i])
    0.00 :	  4703db:       41 80 3c 1e 00          cmpb   $0x0,(%r14,%rbx,1)
    0.00 :	  4703e0:       75 ec                   jne    4703ce <heap_compute_data_size+0x5e>
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4703e2:       49 8b 14 df             mov    (%r15,%rbx,8),%rdx
         :	                Datum           val;
         :
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
    0.00 :	  4703e6:       49 8b 3c d8             mov    (%r8,%rbx,8),%rdi
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4703ea:       0f b7 4a 4c             movzwl 0x4c(%rdx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
   25.00 :	  4703ee:       66 83 f9 ff             cmp    $0xffff,%cx
    0.00 :	  4703f2:       75 ac                   jne    4703a0 <heap_compute_data_size+0x30>
    0.00 :	  4703f4:       80 7a 5d 70             cmpb   $0x70,0x5d(%rdx)
    0.00 :	  4703f8:       0f 84 c2 00 00 00       je     4704c0 <heap_compute_data_size+0x150>
    0.00 :	  4703fe:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  470401:       40 f6 c6 03             test   $0x3,%sil
    0.00 :	  470405:       75 12                   jne    470419 <heap_compute_data_size+0xa9>
    0.00 :	  470407:       8b 07                   mov    (%rdi),%eax
    0.00 :	  470409:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  47040c:       83 e8 04                sub    $0x4,%eax
    0.00 :	  47040f:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  470413:       48 83 f8 7f             cmp    $0x7f,%rax
    0.00 :	  470417:       76 b2                   jbe    4703cb <heap_compute_data_size+0x5b>
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  470419:       83 e6 01                and    $0x1,%esi
    0.00 :	  47041c:       74 82                   je     4703a0 <heap_compute_data_size+0x30>
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47041e:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  470421:       3c 01                   cmp    $0x1,%al
    0.00 :	  470423:       74 73                   je     470498 <heap_compute_data_size+0x128>
    0.00 :	  470425:       a8 01                   test   $0x1,%al
    0.00 :	  470427:       0f 84 a3 00 00 00       je     4704d0 <heap_compute_data_size+0x160>
    0.00 :	  47042d:       d0 e8                   shr    %al
    0.00 :	  47042f:       0f b6 c0                movzbl %al,%eax
    0.00 :	  470432:       eb 97                   jmp    4703cb <heap_compute_data_size+0x5b>
    0.00 :	  470434:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  470438:       66 83 c1 01             add    $0x1,%cx
    0.00 :	  47043c:       74 e0                   je     47041e <heap_compute_data_size+0xae>
    0.00 :	  47043e:       4c 89 45 d0             mov    %r8,-0x30(%rbp)
    0.00 :	  470442:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  470446:       e8 05 94 ff ff          callq  469850 <strlen@plt>
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47044b:       41 39 dd                cmp    %ebx,%r13d
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47044e:       4d 8d 64 04 01          lea    0x1(%r12,%rax,1),%r12
    0.00 :	  470453:       4c 8b 45 d0             mov    -0x30(%rbp),%r8
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470457:       7f 82                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470459:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                                          val);
         :	                }
         :	        }
         :
         :	        return data_length;
         :	}
    0.00 :	  470460:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  470464:       4c 89 e0                mov    %r12,%rax
    0.00 :	  470467:       5b                      pop    %rbx
    0.00 :	  470468:       41 5c                   pop    %r12
    0.00 :	  47046a:       41 5d                   pop    %r13
    0.00 :	  47046c:       41 5e                   pop    %r14
    0.00 :	  47046e:       41 5f                   pop    %r15
    0.00 :	  470470:       c9                      leaveq 
    0.00 :	  470471:       c3                      retq   
    0.00 :	  470472:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  470478:       49 83 c4 03             add    $0x3,%r12
    0.00 :	  47047c:       49 83 e4 fc             and    $0xfffffffffffffffc,%r12
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:113
   25.00 :	  470480:       e9 3d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470485:       0f 1f 00                nopl   (%rax)
    0.00 :	  470488:       49 83 c4 07             add    $0x7,%r12
    0.00 :	  47048c:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	  470490:       e9 2d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470495:       0f 1f 00                nopl   (%rax)
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  470498:       0f b6 57 01             movzbl 0x1(%rdi),%edx
    0.00 :	  47049c:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  4704a1:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  4704a4:       0f 84 21 ff ff ff       je     4703cb <heap_compute_data_size+0x5b>
    0.00 :	  4704aa:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  4704ad:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  4704b2:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4704b7:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  4704bb:       e9 0b ff ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4704c0:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  4704c3:       e9 51 ff ff ff          jmpq   470419 <heap_compute_data_size+0xa9>
    0.00 :	  4704c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4704cf:       00 
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  4704d0:       8b 07                   mov    (%rdi),%eax
    0.00 :	  4704d2:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  4704d5:       89 c0                   mov    %eax,%eax
    0.00 :	  4704d7:       e9 ef fe ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:47
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004906f0 <hashint4>:
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:47
   75.00 :	  4906f0:       55                      push   %rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
    0.00 :	  4906f1:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4906f5:       48 89 e5                mov    %rsp,%rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
         :	}
    0.00 :	  4906f8:       c9                      leaveq 
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
         :	        return hash_uint32(PG_GETARG_INT32(0));
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
   25.00 :	  4906f9:       e9 62 ff ff ff          jmpq   490660 <hash_uint32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1742
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1720
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049d220 <heap_hot_search_buffer>:
         :	 */
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
    0.00 :	  49d220:       55                      push   %rbp
    0.00 :	  49d221:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  49d224:       41 57                   push   %r15
    0.00 :	  49d226:       4d 89 cf                mov    %r9,%r15
    0.00 :	  49d229:       41 56                   push   %r14
    0.00 :	  49d22b:       4d 89 c6                mov    %r8,%r14
    0.00 :	  49d22e:       41 55                   push   %r13
    0.00 :	  49d230:       41 54                   push   %r12
    0.00 :	  49d232:       53                      push   %rbx
    0.00 :	  49d233:       48 83 ec 28             sub    $0x28,%rsp
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d237:       85 d2                   test   %edx,%edx
         :	 */
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
    0.00 :	  49d239:       48 89 4d b8             mov    %rcx,-0x48(%rbp)
    0.00 :	  49d23d:       48 89 7d d0             mov    %rdi,-0x30(%rbp)
    0.00 :	  49d241:       48 89 75 c8             mov    %rsi,-0x38(%rbp)
    0.00 :	  49d245:       89 55 c4                mov    %edx,-0x3c(%rbp)
    0.00 :	  49d248:       0f b6 4d 10             movzbl 0x10(%rbp),%ecx
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d24c:       0f 88 5e 02 00 00       js     49d4b0 <heap_hot_search_buffer+0x290>
    0.00 :	  49d252:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  49d255:       83 e8 01                sub    $0x1,%eax
    0.00 :	  49d258:       4c 63 e8                movslq %eax,%r13
    0.00 :	  49d25b:       49 c1 e5 0d             shl    $0xd,%r13
    0.00 :	  49d25f:       4c 03 2d 92 28 72 00    add    0x722892(%rip),%r13        # bbfaf8 <BufferBlocks>
         :	        bool            at_chain_start;
         :	        bool            valid;
         :	        bool            skip;
         :
         :	        /* If this is not the first call, previous call returned a (live!) tuple */
         :	        if (all_dead)
    0.00 :	  49d266:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d269:       74 03                   je     49d26e <heap_hot_search_buffer+0x4e>
         :	                *all_dead = first_call;
    0.00 :	  49d26b:       41 88 0f                mov    %cl,(%r15)
         :
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
    0.00 :	  49d26e:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  49d272:       44 0f b7 60 04          movzwl 0x4(%rax),%r12d
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
         :
         :	        heapTuple->t_self = *tid;
    0.00 :	  49d277:       48 89 c2                mov    %rax,%rdx
    0.00 :	  49d27a:       8b 00                   mov    (%rax),%eax
    0.00 :	  49d27c:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	  49d280:       0f b7 42 04             movzwl 0x4(%rdx),%eax
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d284:       66 45 85 e4             test   %r12w,%r12w
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
         :
         :	        heapTuple->t_self = *tid;
    0.00 :	  49d288:       66 41 89 46 08          mov    %ax,0x8(%r14)
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d28d:       74 4e                   je     49d2dd <heap_hot_search_buffer+0xbd>
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
    0.00 :	  49d28f:       84 c9                   test   %cl,%cl
    0.00 :	  49d291:       89 ce                   mov    %ecx,%esi
    0.00 :	  49d293:       41 0f 94 c0             sete   %r8b
    0.00 :	  49d297:       31 ff                   xor    %edi,%edi
    0.00 :	  49d299:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d2a0:       41 0f b7 55 0c          movzwl 0xc(%r13),%edx
    0.00 :	  49d2a5:       31 c0                   xor    %eax,%eax
    0.00 :	  49d2a7:       41 0f b7 cc             movzwl %r12w,%ecx
    0.00 :	  49d2ab:       66 83 fa 18             cmp    $0x18,%dx
    0.00 :	  49d2af:       76 0b                   jbe    49d2bc <heap_hot_search_buffer+0x9c>
    0.00 :	  49d2b1:       0f b7 c2                movzwl %dx,%eax
    0.00 :	  49d2b4:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  49d2b8:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  49d2bc:       48 39 c8                cmp    %rcx,%rax
    0.00 :	  49d2bf:       72 1c                   jb     49d2dd <heap_hot_search_buffer+0xbd>
         :	                        break;
         :
         :	                lp = PageGetItemId(dp, offnum);
         :
         :	                /* check for unused, dead, or redirected items */
         :	                if (!ItemIdIsNormal(lp))
    0.00 :	  49d2c1:       48 8d 51 03             lea    0x3(%rcx),%rdx
    0.00 :	  49d2c5:       41 8b 44 95 08          mov    0x8(%r13,%rdx,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1720
   25.00 :	  49d2ca:       25 00 80 01 00          and    $0x18000,%eax
    0.00 :	  49d2cf:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  49d2d4:       74 3a                   je     49d310 <heap_hot_search_buffer+0xf0>
         :	                {
         :	                        /* We should only see a redirect at start of chain */
         :	                        if (ItemIdIsRedirected(lp) && at_chain_start)
    0.00 :	  49d2d6:       3d 00 00 01 00          cmp    $0x10000,%eax
    0.00 :	  49d2db:       74 13                   je     49d2f0 <heap_hot_search_buffer+0xd0>
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d2dd:       31 c0                   xor    %eax,%eax
         :	                else
         :	                        break;                          /* end of chain */
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  49d2df:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  49d2e3:       5b                      pop    %rbx
    0.00 :	  49d2e4:       41 5c                   pop    %r12
    0.00 :	  49d2e6:       41 5d                   pop    %r13
    0.00 :	  49d2e8:       41 5e                   pop    %r14
    0.00 :	  49d2ea:       41 5f                   pop    %r15
    0.00 :	  49d2ec:       c9                      leaveq 
    0.00 :	  49d2ed:       c3                      retq   
    0.00 :	  49d2ee:       66 90                   xchg   %ax,%ax
         :
         :	                /* check for unused, dead, or redirected items */
         :	                if (!ItemIdIsNormal(lp))
         :	                {
         :	                        /* We should only see a redirect at start of chain */
         :	                        if (ItemIdIsRedirected(lp) && at_chain_start)
    0.00 :	  49d2f0:       40 84 f6                test   %sil,%sil
    0.00 :	  49d2f3:       74 e8                   je     49d2dd <heap_hot_search_buffer+0xbd>
         :	                        {
         :	                                /* Follow the redirect */
         :	                                offnum = ItemIdGetRedirect(lp);
    0.00 :	  49d2f5:       45 0f b7 64 95 08       movzwl 0x8(%r13,%rdx,4),%r12d
    0.00 :	  49d2fb:       66 41 81 e4 ff 7f       and    $0x7fff,%r12w
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
    0.00 :	  49d301:       31 f6                   xor    %esi,%esi
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d303:       66 45 85 e4             test   %r12w,%r12w
    0.00 :	  49d307:       75 97                   jne    49d2a0 <heap_hot_search_buffer+0x80>
    0.00 :	  49d309:       eb d2                   jmp    49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d30b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
    0.00 :	  49d310:       41 0f b7 44 95 08       movzwl 0x8(%r13,%rdx,4),%eax
    0.00 :	  49d316:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  49d31b:       49 8d 4c 05 00          lea    0x0(%r13,%rax,1),%rcx
    0.00 :	  49d320:       49 89 4e 10             mov    %rcx,0x10(%r14)
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d324:       41 0f b7 44 95 0a       movzwl 0xa(%r13,%rdx,4),%eax
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d32a:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d32e:       66 d1 e8                shr    %ax
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
         :
         :	                /*
         :	                 * Shouldn't see a HEAP_ONLY tuple at chain start.
         :	                 */
         :	                if (at_chain_start && HeapTupleIsHeapOnly(heapTuple))
    0.00 :	  49d331:       40 84 f6                test   %sil,%sil
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d334:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  49d337:       41 89 06                mov    %eax,(%r14)
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d33a:       8b 42 40                mov    0x40(%rdx),%eax
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
    0.00 :	  49d33d:       66 45 89 66 08          mov    %r12w,0x8(%r14)
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d342:       41 89 46 0c             mov    %eax,0xc(%r14)
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
         :
         :	                /*
         :	                 * Shouldn't see a HEAP_ONLY tuple at chain start.
         :	                 */
         :	                if (at_chain_start && HeapTupleIsHeapOnly(heapTuple))
    0.00 :	  49d346:       74 07                   je     49d34f <heap_hot_search_buffer+0x12f>
    0.00 :	  49d348:       66 83 79 12 00          cmpw   $0x0,0x12(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1742
   75.00 :	  49d34d:       78 8e                   js     49d2dd <heap_hot_search_buffer+0xbd>
         :
         :	                /*
         :	                 * The xmin should match the previous xmax value, else chain is
         :	                 * broken.
         :	                 */
         :	                if (TransactionIdIsValid(prev_xmax) &&
    0.00 :	  49d34f:       85 ff                   test   %edi,%edi
    0.00 :	  49d351:       74 23                   je     49d376 <heap_hot_search_buffer+0x156>
    0.00 :	  49d353:       49 8b 4e 10             mov    0x10(%r14),%rcx
    0.00 :	  49d357:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  49d35c:       0f b7 41 14             movzwl 0x14(%rcx),%eax
    0.00 :	  49d360:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  49d365:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  49d36a:       74 02                   je     49d36e <heap_hot_search_buffer+0x14e>
    0.00 :	  49d36c:       8b 11                   mov    (%rcx),%edx
    0.00 :	  49d36e:       39 fa                   cmp    %edi,%edx
    0.00 :	  49d370:       0f 85 67 ff ff ff       jne    49d2dd <heap_hot_search_buffer+0xbd>
         :	                 * return the first tuple we find.  But on later passes, heapTuple
         :	                 * will initially be pointing to the tuple we returned last time.
         :	                 * Returning it again would be incorrect (and would loop forever), so
         :	                 * we skip it and return the next match we find.
         :	                 */
         :	                if (!skip)
    0.00 :	  49d376:       45 84 c0                test   %r8b,%r8b
    0.00 :	  49d379:       74 65                   je     49d3e0 <heap_hot_search_buffer+0x1c0>
         :	                /*
         :	                 * If we can't see it, maybe no one else can either.  At caller
         :	                 * request, check whether all chain members are dead to all
         :	                 * transactions.
         :	                 */
         :	                if (all_dead && *all_dead &&
    0.00 :	  49d37b:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d37e:       66 90                   xchg   %ax,%ax
    0.00 :	  49d380:       74 0a                   je     49d38c <heap_hot_search_buffer+0x16c>
    0.00 :	  49d382:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	  49d386:       0f 85 04 01 00 00       jne    49d490 <heap_hot_search_buffer+0x270>
         :
         :	                /*
         :	                 * Check to see if HOT chain continues past this tuple; if so fetch
         :	                 * the next offnum and loop around.
         :	                 */
         :	                if (HeapTupleIsHotUpdated(heapTuple))
    0.00 :	  49d38c:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  49d390:       f6 47 13 40             testb  $0x40,0x13(%rdi)
    0.00 :	  49d394:       0f 84 43 ff ff ff       je     49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d39a:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  49d39e:       f6 c6 08                test   $0x8,%dh
    0.00 :	  49d3a1:       0f 85 36 ff ff ff       jne    49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d3a7:       89 d0                   mov    %edx,%eax
    0.00 :	  49d3a9:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  49d3ae:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  49d3b3:       0f 84 24 ff ff ff       je     49d2dd <heap_hot_search_buffer+0xbd>
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d3b9:       89 d0                   mov    %edx,%eax
         :	                 */
         :	                if (HeapTupleIsHotUpdated(heapTuple))
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
    0.00 :	  49d3bb:       44 0f b7 67 10          movzwl 0x10(%rdi),%r12d
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d3c0:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  49d3c5:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  49d3ca:       0f 84 a8 00 00 00       je     49d478 <heap_hot_search_buffer+0x258>
    0.00 :	  49d3d0:       8b 7f 04                mov    0x4(%rdi),%edi
    0.00 :	  49d3d3:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  49d3d6:       e9 26 ff ff ff          jmpq   49d301 <heap_hot_search_buffer+0xe1>
    0.00 :	  49d3db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * element of the HOT chain we're currently investigating instead
         :	                         * of the root tuple of the HOT chain. This is important because
         :	                         * the *Satisfies routine for historical mvcc snapshots needs the
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
    0.00 :	  49d3e0:       8b 7d c4                mov    -0x3c(%rbp),%edi
    0.00 :	  49d3e3:       e8 48 6c 1d 00          callq  674030 <BufferGetBlockNumber>
    0.00 :	  49d3e8:       8b 7d c4                mov    -0x3c(%rbp),%edi
    0.00 :	  49d3eb:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  49d3ee:       66 41 89 46 04          mov    %ax,0x4(%r14)
    0.00 :	  49d3f3:       e8 38 6c 1d 00          callq  674030 <BufferGetBlockNumber>
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d3f8:       48 8b 75 b8             mov    -0x48(%rbp),%rsi
    0.00 :	  49d3fc:       8b 55 c4                mov    -0x3c(%rbp),%edx
    0.00 :	  49d3ff:       4c 89 f7                mov    %r14,%rdi
         :	                         * element of the HOT chain we're currently investigating instead
         :	                         * of the root tuple of the HOT chain. This is important because
         :	                         * the *Satisfies routine for historical mvcc snapshots needs the
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
    0.00 :	  49d402:       66 41 89 46 06          mov    %ax,0x6(%r14)
    0.00 :	  49d407:       66 45 89 66 08          mov    %r12w,0x8(%r14)
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d40c:       ff 16                   callq  *(%rsi)
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
    0.00 :	  49d40e:       8b 4d c4                mov    -0x3c(%rbp),%ecx
    0.00 :	  49d411:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  49d415:       0f be f8                movsbl %al,%edi
    0.00 :	  49d418:       48 8b 75 c8             mov    -0x38(%rbp),%rsi
    0.00 :	  49d41c:       4c 89 f2                mov    %r14,%rdx
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d41f:       89 c3                   mov    %eax,%ebx
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
    0.00 :	  49d421:       e8 3a 72 1f 00          callq  694660 <CheckForSerializableConflictOut>
         :	                                                                                        buffer, snapshot);
         :	                        /* reset to original, non-redirected, tid */
         :	                        heapTuple->t_self = *tid;
    0.00 :	  49d426:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
         :
         :	                        if (valid)
    0.00 :	  49d42a:       84 db                   test   %bl,%bl
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
         :	                                                                                        buffer, snapshot);
         :	                        /* reset to original, non-redirected, tid */
         :	                        heapTuple->t_self = *tid;
    0.00 :	  49d42c:       8b 01                   mov    (%rcx),%eax
    0.00 :	  49d42e:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	  49d432:       0f b7 41 04             movzwl 0x4(%rcx),%eax
    0.00 :	  49d436:       66 41 89 46 08          mov    %ax,0x8(%r14)
         :
         :	                        if (valid)
    0.00 :	  49d43b:       0f 84 3a ff ff ff       je     49d37b <heap_hot_search_buffer+0x15b>
         :	                        {
         :	                                ItemPointerSetOffsetNumber(tid, offnum);
    0.00 :	  49d441:       66 44 89 61 04          mov    %r12w,0x4(%rcx)
         :	                                PredicateLockTuple(relation, heapTuple, snapshot);
    0.00 :	  49d446:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  49d44a:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  49d44d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  49d451:       e8 4a 77 1f 00          callq  694ba0 <PredicateLockTuple>
         :	                                if (all_dead)
    0.00 :	  49d456:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d459:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  49d45e:       0f 84 7b fe ff ff       je     49d2df <heap_hot_search_buffer+0xbf>
         :	                                        *all_dead = false;
    0.00 :	  49d464:       41 c6 07 00             movb   $0x0,(%r15)
    0.00 :	  49d468:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  49d46d:       e9 6d fe ff ff          jmpq   49d2df <heap_hot_search_buffer+0xbf>
    0.00 :	  49d472:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d478:       84 d2                   test   %dl,%dl
    0.00 :	  49d47a:       0f 88 50 ff ff ff       js     49d3d0 <heap_hot_search_buffer+0x1b0>
    0.00 :	  49d480:       e8 9b 9c ff ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  49d485:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  49d488:       89 c7                   mov    %eax,%edi
    0.00 :	  49d48a:       e9 72 fe ff ff          jmpq   49d301 <heap_hot_search_buffer+0xe1>
    0.00 :	  49d48f:       90                      nop
         :	                /*
         :	                 * If we can't see it, maybe no one else can either.  At caller
         :	                 * request, check whether all chain members are dead to all
         :	                 * transactions.
         :	                 */
         :	                if (all_dead && *all_dead &&
    0.00 :	  49d490:       8b 35 6a d4 71 00       mov    0x71d46a(%rip),%esi        # bba900 <RecentGlobalXmin>
    0.00 :	  49d496:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49d499:       e8 62 72 30 00          callq  7a4700 <HeapTupleIsSurelyDead>
    0.00 :	  49d49e:       84 c0                   test   %al,%al
    0.00 :	  49d4a0:       0f 85 e6 fe ff ff       jne    49d38c <heap_hot_search_buffer+0x16c>
         :	                        !HeapTupleIsSurelyDead(heapTuple, RecentGlobalXmin))
         :	                        *all_dead = false;
    0.00 :	  49d4a6:       41 c6 07 00             movb   $0x0,(%r15)
    0.00 :	  49d4aa:       e9 dd fe ff ff          jmpq   49d38c <heap_hot_search_buffer+0x16c>
    0.00 :	  49d4af:       90                      nop
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d4b0:       89 d0                   mov    %edx,%eax
    0.00 :	  49d4b2:       48 8b 15 5f fc 6d 00    mov    0x6dfc5f(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49d4b9:       f7 d0                   not    %eax
    0.00 :	  49d4bb:       48 98                   cltq   
    0.00 :	  49d4bd:       4c 8b 2c c2             mov    (%rdx,%rax,8),%r13
    0.00 :	  49d4c1:       e9 a0 fd ff ff          jmpq   49d266 <heap_hot_search_buffer+0x46>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:91
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2de0 <IsCatalogRelation>:
         :	 *              but this function returns true only for toast relations of system
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
    0.00 :	  4e2de0:       55                      push   %rbp
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:91
  100.00 :	  4e2de1:       48 8b 77 30             mov    0x30(%rdi),%rsi
    0.00 :	  4e2de5:       8b 7f 40                mov    0x40(%rdi),%edi
         :	 *              but this function returns true only for toast relations of system
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
    0.00 :	  4e2de8:       48 89 e5                mov    %rsp,%rbp
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
         :	}
    0.00 :	  4e2deb:       c9                      leaveq 
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
    0.00 :	  4e2dec:       e9 bf ff ff ff          jmpq   4e2db0 <IsCatalogClass>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3329
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006741d0 <TerminateBufferIO>:
         :	 * be 0, or BM_VALID if we just finished reading in the page.
         :	 */
         :	static void
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
   25.00 :	  6741d0:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6741d1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6741d6:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6741d9:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6741dd:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6741e1:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6741e4:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6741e8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  6741eb:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  6741ef:       41 89 d5                mov    %edx,%r13d
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  6741f2:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	  6741f6:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3329
   75.00 :	  6741f9:       84 c0                   test   %al,%al
    0.00 :	  6741fb:       75 53                   jne    674250 <TerminateBufferIO+0x80>
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  6741fd:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674201:       83 e0 e7                and    $0xffffffe7,%eax
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  674204:       45 84 e4                test   %r12b,%r12b
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  674207:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  67420b:       74 12                   je     67421f <TerminateBufferIO+0x4f>
    0.00 :	  67420d:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674211:       a8 20                   test   $0x20,%al
    0.00 :	  674213:       75 0a                   jne    67421f <TerminateBufferIO+0x4f>
         :	                buf->flags &= ~(BM_DIRTY | BM_CHECKPOINT_NEEDED);
    0.00 :	  674215:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674219:       24 7e                   and    $0x7e,%al
    0.00 :	  67421b:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        buf->flags |= set_flag_bits;
    0.00 :	  67421f:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674223:       44 09 e8                or     %r13d,%eax
    0.00 :	  674226:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67422a:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = NULL;
    0.00 :	  67422e:       48 c7 05 2f 8e 50 00    movq   $0x0,0x508e2f(%rip)        # b7d068 <InProgressBuf>
    0.00 :	  674235:       00 00 00 00 
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674239:       48 8b 7b 30             mov    0x30(%rbx),%rdi
         :	}
    0.00 :	  67423d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674241:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674245:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674249:       c9                      leaveq 
         :
         :	        UnlockBufHdr(buf);
         :
         :	        InProgressBuf = NULL;
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67424a:       e9 51 b1 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67424f:       90                      nop
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  674250:       ba 01 0d 00 00          mov    $0xd01,%edx
    0.00 :	  674255:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67425a:       e8 e1 bd 01 00          callq  690040 <s_lock>
    0.00 :	  67425f:       eb 9c                   jmp    6741fd <TerminateBufferIO+0x2d>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1586
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068f3a0 <LWLockRelease>:
         :	/*
         :	 * LWLockRelease - release a previously acquired lock
         :	 */
         :	void
         :	LWLockRelease(LWLock *lock)
         :	{
    0.00 :	  68f3a0:       55                      push   %rbp
    0.00 :	  68f3a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68f3a4:       41 55                   push   %r13
    0.00 :	  68f3a6:       41 54                   push   %r12
    0.00 :	  68f3a8:       49 89 fc                mov    %rdi,%r12
    0.00 :	  68f3ab:       53                      push   %rbx
    0.00 :	  68f3ac:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f3b0:       8b 35 52 e6 4e 00       mov    0x4ee652(%rip),%esi        # b7da08 <num_held_lwlocks>
    0.00 :	  68f3b6:       89 f0                   mov    %esi,%eax
    0.00 :	  68f3b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68f3bf:       00 
    0.00 :	  68f3c0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f3c3:       0f 88 1f 02 00 00       js     68f5e8 <LWLockRelease+0x248>
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
    0.00 :	  68f3c9:       48 63 d0                movslq %eax,%rdx
    0.00 :	  68f3cc:       41 b9 40 da b7 00       mov    $0xb7da40,%r9d
    0.00 :	  68f3d2:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f3d5:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f3d9:       48 8b 99 40 da b7 00    mov    0xb7da40(%rcx),%rbx
    0.00 :	  68f3e0:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	  68f3e3:       75 db                   jne    68f3c0 <LWLockRelease+0x20>
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1586
   25.00 :	  68f3e5:       44 8d 46 ff             lea    -0x1(%rsi),%r8d
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
         :	                {
         :	                        mode = held_lwlocks[i].mode;
    0.00 :	  68f3e9:       44 8b 91 48 da b7 00    mov    0xb7da48(%rcx),%r10d
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3f0:       41 39 c0                cmp    %eax,%r8d
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3f3:       44 89 05 0e e6 4e 00    mov    %r8d,0x4ee60e(%rip)        # b7da08 <num_held_lwlocks>
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3fa:       7f 09                   jg     68f405 <LWLockRelease+0x65>
    0.00 :	  68f3fc:       eb 3a                   jmp    68f438 <LWLockRelease+0x98>
    0.00 :	  68f3fe:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f400:       89 f0                   mov    %esi,%eax
    0.00 :	  68f402:       48 89 fa                mov    %rdi,%rdx
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f405:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  68f408:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f40b:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f40f:       48 63 fe                movslq %esi,%rdi
    0.00 :	  68f412:       48 89 fa                mov    %rdi,%rdx
    0.00 :	  68f415:       48 c1 e2 04             shl    $0x4,%rdx
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f419:       41 39 f0                cmp    %esi,%r8d
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f41c:       48 8b 82 40 da b7 00    mov    0xb7da40(%rdx),%rax
    0.00 :	  68f423:       48 89 81 40 da b7 00    mov    %rax,0xb7da40(%rcx)
    0.00 :	  68f42a:       48 8b 82 48 da b7 00    mov    0xb7da48(%rdx),%rax
    0.00 :	  68f431:       49 89 44 09 08          mov    %rax,0x8(%r9,%rcx,1)
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f436:       7f c8                   jg     68f400 <LWLockRelease+0x60>
         :
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68f438:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f43b:       0f 84 77 01 00 00       je     68f5b8 <LWLockRelease+0x218>
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
         :	        else
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, 1);
    0.00 :	  68f441:       49 8d 54 24 04          lea    0x4(%r12),%rdx
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68f446:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68f44b:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   25.00 :	  68f44f:       8d 50 ff                lea    -0x1(%rax),%edx
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68f452:       8b 43 08                mov    0x8(%rbx),%eax
         :	        /*
         :	         * Anybody we need to wakeup needs to have started queueing before we
         :	         * removed ourselves from the queue and the atomic operations above are
         :	         * full barriers. So we can just do plain read.
         :	         */
         :	        if (pg_atomic_read_u32(&lock->nwaiters) > 0)
    0.00 :	  68f455:       85 c0                   test   %eax,%eax
    0.00 :	  68f457:       0f 84 3a 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	        /*
         :	         * If we just released an exclusive lock always wakeup waiters, even if
         :	         * lockcount is still > 0. A shared acquisition temporarily (and
         :	         * spuriously) might have increased the value.
         :	         */
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
    0.00 :	  68f45d:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f460:       0f 85 fc 01 00 00       jne    68f662 <LWLockRelease+0x2c2>
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f466:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  68f46a:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f46e:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
         :	        /*
         :	         * We're still waiting for backends to get scheduled, don't wake them up
         :	         * again.
         :	         */
         :	        pg_read_barrier(); /* pairs with nwaiters-- */
         :	        if (!BOOL_ACCESS_ONCE(lock->releaseOK))
    0.00 :	  68f472:       0f b6 43 01             movzbl 0x1(%rbx),%eax
    0.00 :	  68f476:       84 c0                   test   %al,%al
    0.00 :	  68f478:       0f 84 19 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  68f47e:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68f483:       f0 86 03                lock xchg %al,(%rbx)
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f486:       84 c0                   test   %al,%al
    0.00 :	  68f488:       0f 85 b2 01 00 00       jne    68f640 <LWLockRelease+0x2a0>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f48e:       48 8b 53 18             mov    0x18(%rbx),%rdx
    0.00 :	  68f492:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68f495:       0f 84 bc 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f49b:       4d 8d 4c 24 10          lea    0x10(%r12),%r9
    0.00 :	  68f4a0:       48 8b 72 08             mov    0x8(%rdx),%rsi
    0.00 :	  68f4a4:       49 39 d1                cmp    %rdx,%r9
    0.00 :	  68f4a7:       0f 84 aa 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f4ad:       31 ff                   xor    %edi,%edi
    0.00 :	  68f4af:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f4b5:       eb 23                   jmp    68f4da <LWLockRelease+0x13a>
    0.00 :	  68f4b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  68f4be:       00 00 
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4c0:       80 7a fa 00             cmpb   $0x0,-0x6(%rdx)
    0.00 :	  68f4c4:       75 1d                   jne    68f4e3 <LWLockRelease+0x143>
    0.00 :	  68f4c6:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f4cb:       49 39 f1                cmp    %rsi,%r9
    0.00 :	  68f4ce:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f4d2:       74 6a                   je     68f53e <LWLockRelease+0x19e>
    0.00 :	  68f4d4:       48 89 f2                mov    %rsi,%rdx
    0.00 :	  68f4d7:       48 89 c6                mov    %rax,%rsi
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4da:       40 84 ff                test   %dil,%dil
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f4dd:       48 8d 4a b8             lea    -0x48(%rdx),%rcx
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4e1:       75 dd                   jne    68f4c0 <LWLockRelease+0x120>
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f4e3:       48 8b 51 48             mov    0x48(%rcx),%rdx
    0.00 :	  68f4e7:       48 8b 41 50             mov    0x50(%rcx),%rax
    0.00 :	  68f4eb:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f4ef:       48 8b 51 50             mov    0x50(%rcx),%rdx
    0.00 :	  68f4f3:       48 8b 41 48             mov    0x48(%rcx),%rax
    0.00 :	  68f4f7:       48 89 02                mov    %rax,(%rdx)
         :	 * Insert a node at the end of the list.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_push_tail(dlist_head *head, dlist_node *node)
         :	{
         :	        if (head->head.next == NULL)    /* convert NULL header to circular */
    0.00 :	  68f4fa:       48 83 7d d8 00          cmpq   $0x0,-0x28(%rbp)
         :	                        continue;
         :
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                dlist_push_tail(&wakeup, &waiter->lwWaitLink);
    0.00 :	  68f4ff:       48 8d 51 48             lea    0x48(%rcx),%rdx
    0.00 :	  68f503:       0f 84 cf 00 00 00       je     68f5d8 <LWLockRelease+0x238>
         :	                dlist_init(head);
         :
         :	        node->next = &head->head;
    0.00 :	  68f509:       4c 89 69 50             mov    %r13,0x50(%rcx)
         :	        node->prev = head->head.prev;
    0.00 :	  68f50d:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68f511:       48 89 41 48             mov    %rax,0x48(%rcx)
         :	        node->prev->next = node;
    0.00 :	  68f515:       48 89 50 08             mov    %rdx,0x8(%rax)
         :	        head->head.prev = node;
    0.00 :	  68f519:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
         :
         :	                if (waiter->lwWaitMode != LW_WAIT_UNTIL_FREE)
    0.00 :	  68f51d:       0f b6 41 42             movzbl 0x42(%rcx),%eax
    0.00 :	  68f521:       3c 02                   cmp    $0x2,%al
    0.00 :	  68f523:       74 a6                   je     68f4cb <LWLockRelease+0x12b>
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f525:       84 c0                   test   %al,%al
    0.00 :	  68f527:       0f 84 0b 01 00 00       je     68f638 <LWLockRelease+0x298>
    0.00 :	  68f52d:       45 31 c0                xor    %r8d,%r8d
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f530:       49 39 f1                cmp    %rsi,%r9
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f533:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f538:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f53c:       75 96                   jne    68f4d4 <LWLockRelease+0x134>
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
         :	                        break;
         :	        }
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
    0.00 :	  68f53e:       44 88 43 01             mov    %r8b,0x1(%rbx)
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f542:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
         :
         :	        /* We are done updating shared state of the lock queue. */
         :	        SpinLockRelease(&lock->mutex);
    0.00 :	  68f546:       41 c6 04 24 00          movb   $0x0,(%r12)
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f54b:       48 85 c9                test   %rcx,%rcx
    0.00 :	  68f54e:       74 47                   je     68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f550:       4c 39 e9                cmp    %r13,%rcx
    0.00 :	  68f553:       48 8b 59 08             mov    0x8(%rcx),%rbx
    0.00 :	  68f557:       75 0d                   jne    68f566 <LWLockRelease+0x1c6>
    0.00 :	  68f559:       eb 3c                   jmp    68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f55b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  68f560:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  68f563:       48 89 c3                mov    %rax,%rbx
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f566:       48 8d 79 b8             lea    -0x48(%rcx),%rdi
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f56a:       48 8b 57 48             mov    0x48(%rdi),%rdx
    0.00 :	  68f56e:       48 8b 47 50             mov    0x50(%rdi),%rax
    0.00 :	  68f572:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f576:       48 8b 57 50             mov    0x50(%rdi),%rdx
    0.00 :	  68f57a:       48 8b 47 48             mov    0x48(%rdi),%rax
    0.00 :	  68f57e:       48 89 02                mov    %rax,(%rdx)
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f581:       48 83 c7 10             add    $0x10,%rdi
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
    0.00 :	  68f585:       c6 41 f9 00             movb   $0x0,-0x7(%rcx)
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f589:       e8 02 8b fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f58e:       4c 39 eb                cmp    %r13,%rbx
    0.00 :	  68f591:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  68f595:       75 c9                   jne    68f560 <LWLockRelease+0x1c0>
         :	        TRACE_POSTGRESQL_LWLOCK_RELEASE(T_NAME(lock), T_ID(lock));
         :
         :	        /*
         :	         * Now okay to allow cancel/die interrupts.
         :	         */
         :	        RESUME_INTERRUPTS();
    0.00 :	  68f597:       8b 05 fb aa 52 00       mov    0x52aafb(%rip),%eax        # bba098 <InterruptHoldoffCount>
    0.00 :	  68f59d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f5a0:       89 05 f2 aa 52 00       mov    %eax,0x52aaf2(%rip)        # bba098 <InterruptHoldoffCount>
         :	}
    0.00 :	  68f5a6:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68f5aa:       5b                      pop    %rbx
    0.00 :	  68f5ab:       41 5c                   pop    %r12
    0.00 :	  68f5ad:       41 5d                   pop    %r13
    0.00 :	  68f5af:       c9                      leaveq 
    0.00 :	  68f5b0:       c3                      retq   
    0.00 :	  68f5b1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
    0.00 :	  68f5b8:       49 8d 54 24 04          lea    0x4(%r12),%rdx
    0.00 :	  68f5bd:       b8 00 00 00 c0          mov    $0xc0000000,%eax
    0.00 :	  68f5c2:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
   50.00 :	  68f5c6:       8d 90 00 00 00 c0       lea    -0x40000000(%rax),%edx
    0.00 :	  68f5cc:       e9 81 fe ff ff          jmpq   68f452 <LWLockRelease+0xb2>
    0.00 :	  68f5d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f5d8:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f5dc:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
    0.00 :	  68f5e0:       e9 24 ff ff ff          jmpq   68f509 <LWLockRelease+0x169>
    0.00 :	  68f5e5:       0f 1f 00                nopl   (%rax)
         :	                        mode = held_lwlocks[i].mode;
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
    0.00 :	  68f5e8:       ba 10 d1 8a 00          mov    $0x8ad110,%edx
    0.00 :	  68f5ed:       be 31 06 00 00          mov    $0x631,%esi
    0.00 :	  68f5f2:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68f5f7:       e8 24 be 0e 00          callq  77b420 <elog_start>
    0.00 :	  68f5fc:       49 63 54 24 0c          movslq 0xc(%r12),%rdx
    0.00 :	  68f601:       48 8b 05 08 e4 4e 00    mov    0x4ee408(%rip),%rax        # b7da10 <LWLockTrancheArray>
    0.00 :	  68f608:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68f60d:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
    0.00 :	  68f611:       31 d2                   xor    %edx,%edx
    0.00 :	  68f613:       4c 2b 66 08             sub    0x8(%rsi),%r12
    0.00 :	  68f617:       4c 89 e0                mov    %r12,%rax
    0.00 :	  68f61a:       48 f7 76 10             divq   0x10(%rsi)
    0.00 :	  68f61e:       48 8b 16                mov    (%rsi),%rdx
    0.00 :	  68f621:       be bf d0 8a 00          mov    $0x8ad0bf,%esi
    0.00 :	  68f626:       89 c1                   mov    %eax,%ecx
    0.00 :	  68f628:       31 c0                   xor    %eax,%eax
    0.00 :	  68f62a:       e8 01 bc 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68f62f:       e8 9c 9e dd ff          callq  4694d0 <abort@plt>
    0.00 :	  68f634:       0f 1f 40 00             nopl   0x0(%rax)
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f638:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  68f63b:       e9 fe fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f640:       ba e1 02 00 00          mov    $0x2e1,%edx
    0.00 :	  68f645:       be 85 d0 8a 00          mov    $0x8ad085,%esi
    0.00 :	  68f64a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  68f64d:       e8 ee 09 00 00          callq  690040 <s_lock>
    0.00 :	  68f652:       e9 37 fe ff ff          jmpq   68f48e <LWLockRelease+0xee>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f657:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f65d:       e9 dc fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
         :	                check_waiters = true;
         :	        /*
         :	         * nobody has this locked anymore, potential exclusive lockers get a chance
         :	         */
         :	        else if (lockcount == 0 && have_waiters)
    0.00 :	  68f662:       85 d2                   test   %edx,%edx
    0.00 :	  68f664:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  68f668:       0f 84 f8 fd ff ff       je     68f466 <LWLockRelease+0xc6>
    0.00 :	  68f66e:       66 90                   xchg   %ax,%ax
    0.00 :	  68f670:       e9 22 ff ff ff          jmpq   68f597 <LWLockRelease+0x1f7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:323
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:736
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798110 <AllocSetAlloc>:
         :	 *              MAXALIGN_DOWN(SIZE_MAX) - ALLOC_BLOCKHDRSZ - ALLOC_CHUNKHDRSZ
         :	 * All callers use a much-lower limit.
         :	 */
         :	static void *
         :	AllocSetAlloc(MemoryContext context, Size size)
         :	{
    0.00 :	  798110:       55                      push   %rbp
    0.00 :	  798111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798114:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  798118:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  79811c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79811f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  798123:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  798127:       49 89 f6                mov    %rsi,%r14
    0.00 :	  79812a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  79812e:       48 83 ec 30             sub    $0x30,%rsp
         :
         :	        /*
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
    0.00 :	  798132:       48 39 b7 b0 00 00 00    cmp    %rsi,0xb0(%rdi)
    0.00 :	  798139:       72 6d                   jb     7981a8 <AllocSetAlloc+0x98>
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:323
   25.00 :	  79813b:       31 f6                   xor    %esi,%esi
    0.00 :	  79813d:       49 83 fe 08             cmp    $0x8,%r14
    0.00 :	  798141:       77 3d                   ja     798180 <AllocSetAlloc+0x70>
         :	         * corresponding free list to see if there is a free chunk we could reuse.
         :	         * If one is found, remove it from the free list, make it again a member
         :	         * of the alloc set and return its data address.
         :	         */
         :	        fidx = AllocSetFreeIndex(size);
         :	        chunk = set->freelist[fidx];
    0.00 :	  798143:       48 63 c6                movslq %esi,%rax
    0.00 :	  798146:       48 8d 48 08             lea    0x8(%rax),%rcx
    0.00 :	  79814a:       49 8b 14 cc             mov    (%r12,%rcx,8),%rdx
         :	        if (chunk != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:736
   25.00 :	  79814e:       48 85 d2                test   %rdx,%rdx
    0.00 :	  798151:       0f 84 c9 00 00 00       je     798220 <AllocSetAlloc+0x110>
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
    0.00 :	  798157:       48 8b 02                mov    (%rdx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
   25.00 :	  79815a:       49 89 04 cc             mov    %rax,(%r12,%rcx,8)
         :	                /* fill the allocated space with junk */
         :	                randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	                AllocAllocInfo(set, chunk);
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  79815e:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
         :
         :	                chunk->aset = (void *) set;
    0.00 :	  798162:       4c 89 22                mov    %r12,(%rdx)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
   25.00 :	  798165:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  798169:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  79816d:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  798171:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  798175:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  798179:       c9                      leaveq 
    0.00 :	  79817a:       c3                      retq   
    0.00 :	  79817b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798180:       49 8d 46 ff             lea    -0x1(%r14),%rax
    0.00 :	  798184:       48 89 c2                mov    %rax,%rdx
    0.00 :	  798187:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  79818b:       89 d0                   mov    %edx,%eax
    0.00 :	  79818d:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798190:       85 c0                   test   %eax,%eax
    0.00 :	  798192:       74 7c                   je     798210 <AllocSetAlloc+0x100>
    0.00 :	  798194:       89 c0                   mov    %eax,%eax
    0.00 :	  798196:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  79819d:       8d 70 08                lea    0x8(%rax),%esi
    0.00 :	  7981a0:       eb a1                   jmp    798143 <AllocSetAlloc+0x33>
    0.00 :	  7981a2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
    0.00 :	  7981a8:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  7981ac:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  7981b0:       4c 8d 6b 30             lea    0x30(%rbx),%r13
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981b4:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7981b7:       e8 74 14 cd ff          callq  469630 <malloc@plt>
         :	                if (block == NULL)
    0.00 :	  7981bc:       48 85 c0                test   %rax,%rax
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981bf:       48 89 c2                mov    %rax,%rdx
         :	                if (block == NULL)
    0.00 :	  7981c2:       0f 84 2e 02 00 00       je     7983f6 <AllocSetAlloc+0x2e6>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
    0.00 :	  7981c8:       4c 89 20                mov    %r12,(%rax)
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
    0.00 :	  7981cb:       48 8d 72 20             lea    0x20(%rdx),%rsi
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981cf:       4a 8d 04 28             lea    (%rax,%r13,1),%rax
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
    0.00 :	  7981d3:       4c 89 62 20             mov    %r12,0x20(%rdx)
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981d7:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	  7981db:       48 89 42 10             mov    %rax,0x10(%rdx)
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
         :	                chunk->size = chunk_size;
    0.00 :	  7981df:       48 89 5e 08             mov    %rbx,0x8(%rsi)
         :
         :	                /*
         :	                 * Stick the new block underneath the active allocation block, so that
         :	                 * we don't lose the use of the space remaining therein.
         :	                 */
         :	                if (set->blocks != NULL)
    0.00 :	  7981e3:       49 8b 4c 24 38          mov    0x38(%r12),%rcx
    0.00 :	  7981e8:       48 85 c9                test   %rcx,%rcx
    0.00 :	  7981eb:       0f 84 cf 01 00 00       je     7983c0 <AllocSetAlloc+0x2b0>
         :	                {
         :	                        block->next = set->blocks->next;
    0.00 :	  7981f1:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  7981f5:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                        set->blocks->next = block;
    0.00 :	  7981f9:       48 89 51 08             mov    %rdx,0x8(%rcx)
         :	                 * if any, NOACCESS.
         :	                 */
         :	                VALGRIND_MAKE_MEM_NOACCESS((char *) chunk + ALLOC_CHUNK_PUBLIC,
         :	                                                 chunk_size + ALLOC_CHUNKHDRSZ - ALLOC_CHUNK_PUBLIC);
         :
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  7981fd:       48 8d 46 10             lea    0x10(%rsi),%rax
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798201:       e9 5f ff ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  798206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  79820d:       00 00 00 
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798210:       89 d0                   mov    %edx,%eax
    0.00 :	  798212:       0f b6 b0 80 1e 8e 00    movzbl 0x8e1e80(%rax),%esi
    0.00 :	  798219:       e9 25 ff ff ff          jmpq   798143 <AllocSetAlloc+0x33>
    0.00 :	  79821e:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798220:       4d 8b 4c 24 38          mov    0x38(%r12),%r9
         :	        }
         :
         :	        /*
         :	         * Choose the actual chunk size to allocate.
         :	         */
         :	        chunk_size = (1 << ALLOC_MINBITS) << fidx;
    0.00 :	  798225:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  79822a:       89 f1                   mov    %esi,%ecx
    0.00 :	  79822c:       d3 e0                   shl    %cl,%eax
    0.00 :	  79822e:       4c 63 f8                movslq %eax,%r15
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798231:       4d 85 c9                test   %r9,%r9
    0.00 :	  798234:       0f 84 ce 00 00 00       je     798308 <AllocSetAlloc+0x1f8>
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  79823a:       49 8b 79 10             mov    0x10(%r9),%rdi
    0.00 :	  79823e:       4d 8b 41 18             mov    0x18(%r9),%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798242:       49 8d 47 10             lea    0x10(%r15),%rax
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  798246:       49 29 f8                sub    %rdi,%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798249:       49 39 c0                cmp    %rax,%r8
    0.00 :	  79824c:       0f 83 52 01 00 00       jae    7983a4 <AllocSetAlloc+0x294>
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  798252:       49 83 f8 17             cmp    $0x17,%r8
    0.00 :	  798256:       0f 86 ac 00 00 00       jbe    798308 <AllocSetAlloc+0x1f8>
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  79825c:       41 ba 01 00 00 00       mov    $0x1,%r10d
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798262:       49 c7 c3 f0 ff ff ff    mov    $0xfffffffffffffff0,%r11
    0.00 :	  798269:       eb 5d                   jmp    7982c8 <AllocSetAlloc+0x1b8>
    0.00 :	  79826b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798270:       89 c0                   mov    %eax,%eax
    0.00 :	  798272:       0f b6 88 80 1e 8e 00    movzbl 0x8e1e80(%rax),%ecx
    0.00 :	  798279:       4c 89 d0                mov    %r10,%rax
    0.00 :	  79827c:       8d 51 08                lea    0x8(%rcx),%edx
    0.00 :	  79827f:       83 c1 0b                add    $0xb,%ecx
    0.00 :	  798282:       48 d3 e0                shl    %cl,%rax
         :	                                /*
         :	                                 * In most cases, we'll get back the index of the next larger
         :	                                 * freelist than the one we need to put this chunk on.  The
         :	                                 * exception is when availchunk is exactly a power of 2.
         :	                                 */
         :	                                if (availchunk != ((Size) 1 << (a_fidx + ALLOC_MINBITS)))
    0.00 :	  798285:       48 39 c6                cmp    %rax,%rsi
    0.00 :	  798288:       74 0c                   je     798296 <AllocSetAlloc+0x186>
         :	                                {
         :	                                        a_fidx--;
    0.00 :	  79828a:       83 ea 01                sub    $0x1,%edx
         :	                                        Assert(a_fidx >= 0);
         :	                                        availchunk = ((Size) 1 << (a_fidx + ALLOC_MINBITS));
    0.00 :	  79828d:       4c 89 d6                mov    %r10,%rsi
    0.00 :	  798290:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  798293:       48 d3 e6                shl    %cl,%rsi
         :	                                chunk = (AllocChunk) (block->freeptr);
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798296:       48 8d 44 37 10          lea    0x10(%rdi,%rsi,1),%rax
    0.00 :	  79829b:       49 89 41 10             mov    %rax,0x10(%r9)
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  79829f:       4c 89 d8                mov    %r11,%rax
         :
         :	                                chunk->size = availchunk;
    0.00 :	  7982a2:       48 89 77 08             mov    %rsi,0x8(%rdi)
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  7982a6:       48 29 f0                sub    %rsi,%rax
    0.00 :	  7982a9:       49 01 c0                add    %rax,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982ac:       48 63 c2                movslq %edx,%rax
    0.00 :	  7982af:       48 83 c0 08             add    $0x8,%rax
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982b3:       49 83 f8 17             cmp    $0x17,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982b7:       49 8b 14 c4             mov    (%r12,%rax,8),%rdx
    0.00 :	  7982bb:       48 89 17                mov    %rdx,(%rdi)
         :	                                set->freelist[a_fidx] = chunk;
    0.00 :	  7982be:       49 89 3c c4             mov    %rdi,(%r12,%rax,8)
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982c2:       76 44                   jbe    798308 <AllocSetAlloc+0x1f8>
    0.00 :	  7982c4:       49 8b 79 10             mov    0x10(%r9),%rdi
         :	                        {
         :	                                Size            availchunk = availspace - ALLOC_CHUNKHDRSZ;
    0.00 :	  7982c8:       49 8d 70 f0             lea    -0x10(%r8),%rsi
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  7982cc:       31 d2                   xor    %edx,%edx
    0.00 :	  7982ce:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  7982d3:       48 83 fe 08             cmp    $0x8,%rsi
    0.00 :	  7982d7:       76 ac                   jbe    798285 <AllocSetAlloc+0x175>
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  7982d9:       49 8d 40 ef             lea    -0x11(%r8),%rax
    0.00 :	  7982dd:       48 89 c2                mov    %rax,%rdx
    0.00 :	  7982e0:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  7982e4:       89 d0                   mov    %edx,%eax
    0.00 :	  7982e6:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7982e9:       85 c0                   test   %eax,%eax
    0.00 :	  7982eb:       75 83                   jne    798270 <AllocSetAlloc+0x160>
    0.00 :	  7982ed:       89 d0                   mov    %edx,%eax
    0.00 :	  7982ef:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
    0.00 :	  7982f6:       4c 89 d0                mov    %r10,%rax
    0.00 :	  7982f9:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  7982fc:       48 d3 e0                shl    %cl,%rax
    0.00 :	  7982ff:       eb 84                   jmp    798285 <AllocSetAlloc+0x175>
    0.00 :	  798301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
    0.00 :	  798308:       49 8b 94 24 a8 00 00    mov    0xa8(%r12),%rdx
    0.00 :	  79830f:       00 
         :	                set->nextBlockSize <<= 1;
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798310:       49 8b 8c 24 a0 00 00    mov    0xa0(%r12),%rcx
    0.00 :	  798317:       00 
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  798318:       48 8d 04 12             lea    (%rdx,%rdx,1),%rax
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  79831c:       48 39 c8                cmp    %rcx,%rax
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  79831f:       49 89 84 24 a8 00 00    mov    %rax,0xa8(%r12)
    0.00 :	  798326:       00 
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798327:       76 08                   jbe    798331 <AllocSetAlloc+0x221>
         :	                        set->nextBlockSize = set->maxBlockSize;
    0.00 :	  798329:       49 89 8c 24 a8 00 00    mov    %rcx,0xa8(%r12)
    0.00 :	  798330:       00 
         :
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  798331:       4d 8d 6f 30             lea    0x30(%r15),%r13
         :	                while (blksize < required_size)
    0.00 :	  798335:       4c 39 ea                cmp    %r13,%rdx
    0.00 :	  798338:       73 0e                   jae    798348 <AllocSetAlloc+0x238>
    0.00 :	  79833a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        blksize <<= 1;
    0.00 :	  798340:       48 01 d2                add    %rdx,%rdx
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                while (blksize < required_size)
    0.00 :	  798343:       49 39 d5                cmp    %rdx,%r13
    0.00 :	  798346:       77 f8                   ja     798340 <AllocSetAlloc+0x230>
    0.00 :	  798348:       48 89 d3                mov    %rdx,%rbx
    0.00 :	  79834b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                while (block == NULL && blksize > 1024 * 1024)
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  798350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  798353:       e8 d8 12 cd ff          callq  469630 <malloc@plt>
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798358:       48 85 c0                test   %rax,%rax
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  79835b:       48 89 c2                mov    %rax,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  79835e:       74 78                   je     7983d8 <AllocSetAlloc+0x2c8>
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798360:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798363:       49 89 d1                mov    %rdx,%r9
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798366:       0f 84 10 01 00 00       je     79847c <AllocSetAlloc+0x36c>
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  79836c:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
    0.00 :	  798370:       4c 89 22                mov    %r12,(%rdx)
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  798373:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                block->endptr = ((char *) block) + blksize;
    0.00 :	  798377:       48 8d 04 1a             lea    (%rdx,%rbx,1),%rax
    0.00 :	  79837b:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  79837f:       49 83 bc 24 b8 00 00    cmpq   $0x0,0xb8(%r12)
    0.00 :	  798386:       00 00 
    0.00 :	  798388:       0f 84 99 00 00 00       je     798427 <AllocSetAlloc+0x317>
         :
         :	                /* Mark unallocated space NOACCESS. */
         :	                VALGRIND_MAKE_MEM_NOACCESS(block->freeptr,
         :	                                                                   blksize - ALLOC_BLOCKHDRSZ);
         :
         :	                block->next = set->blocks;
    0.00 :	  79838e:       49 8b 44 24 38          mov    0x38(%r12),%rax
    0.00 :	  798393:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                set->blocks = block;
    0.00 :	  798397:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  79839c:       49 8d 47 10             lea    0x10(%r15),%rax
    0.00 :	  7983a0:       48 8b 7a 10             mov    0x10(%rdx),%rdi
         :	        chunk = (AllocChunk) (block->freeptr);
         :
         :	        /* Prepare to initialize the chunk header. */
         :	        VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
    0.00 :	  7983a4:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  7983a8:       49 89 41 10             mov    %rax,0x10(%r9)
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
    0.00 :	  7983ac:       4c 89 27                mov    %r12,(%rdi)
         :	        /* fill the allocated space with junk */
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
    0.00 :	  7983af:       48 8d 47 10             lea    0x10(%rdi),%rax
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
         :	        chunk->size = chunk_size;
    0.00 :	  7983b3:       4c 89 7f 08             mov    %r15,0x8(%rdi)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  7983b7:       e9 a9 fd ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  7983bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        block->next = set->blocks->next;
         :	                        set->blocks->next = block;
         :	                }
         :	                else
         :	                {
         :	                        block->next = NULL;
    0.00 :	  7983c0:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  7983c7:       00 
         :	                        set->blocks = block;
    0.00 :	  7983c8:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  7983cd:       e9 2b fe ff ff          jmpq   7981fd <AllocSetAlloc+0xed>
    0.00 :	  7983d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  7983d8:       48 81 fb 00 00 10 00    cmp    $0x100000,%rbx
    0.00 :	  7983df:       0f 86 7b ff ff ff       jbe    798360 <AllocSetAlloc+0x250>
         :	                {
         :	                        blksize >>= 1;
    0.00 :	  7983e5:       48 d1 eb                shr    %rbx
         :	                        if (blksize < required_size)
    0.00 :	  7983e8:       49 39 dd                cmp    %rbx,%r13
    0.00 :	  7983eb:       0f 86 5f ff ff ff       jbe    798350 <AllocSetAlloc+0x240>
    0.00 :	  7983f1:       e9 6a ff ff ff          jmpq   798360 <AllocSetAlloc+0x250>
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  7983f6:       48 8b 3d 6b 24 42 00    mov    0x42246b(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  7983fd:       e8 3e 07 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798402:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  798405:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  79840a:       ba a7 02 00 00          mov    $0x2a7,%edx
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  79840f:       be 6d 1d 8e 00          mov    $0x8e1d6d,%esi
    0.00 :	  798414:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798419:       e8 a2 26 fe ff          callq  77aac0 <errstart>
    0.00 :	  79841e:       84 c0                   test   %al,%al
    0.00 :	  798420:       75 20                   jne    798442 <AllocSetAlloc+0x332>
    0.00 :	  798422:       e8 a9 10 cd ff          callq  4694d0 <abort@plt>
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  798427:       49 39 9c 24 98 00 00    cmp    %rbx,0x98(%r12)
    0.00 :	  79842e:       00 
    0.00 :	  79842f:       0f 85 59 ff ff ff       jne    79838e <AllocSetAlloc+0x27e>
         :	                        set->keeper = block;
    0.00 :	  798435:       49 89 94 24 b8 00 00    mov    %rdx,0xb8(%r12)
    0.00 :	  79843c:       00 
    0.00 :	  79843d:       e9 4c ff ff ff          jmpq   79838e <AllocSetAlloc+0x27e>
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  798442:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  798445:       bf a8 1d 8e 00          mov    $0x8e1da8,%edi
    0.00 :	  79844a:       31 c0                   xor    %eax,%eax
    0.00 :	  79844c:       e8 df 40 fe ff          callq  77c530 <errdetail>
    0.00 :	  798451:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  798456:       41 89 c4                mov    %eax,%r12d
    0.00 :	  798459:       31 c0                   xor    %eax,%eax
    0.00 :	  79845b:       e8 40 44 fe ff          callq  77c8a0 <errmsg>
    0.00 :	  798460:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  798465:       89 c3                   mov    %eax,%ebx
    0.00 :	  798467:       e8 e4 48 fe ff          callq  77cd50 <errcode>
    0.00 :	  79846c:       44 89 e2                mov    %r12d,%edx
    0.00 :	  79846f:       89 c7                   mov    %eax,%edi
    0.00 :	  798471:       89 de                   mov    %ebx,%esi
    0.00 :	  798473:       31 c0                   xor    %eax,%eax
    0.00 :	  798475:       e8 66 21 fe ff          callq  77a5e0 <errfinish>
    0.00 :	  79847a:       eb a6                   jmp    798422 <AllocSetAlloc+0x312>
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  79847c:       48 8b 3d e5 23 42 00    mov    0x4223e5(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  798483:       e8 b8 06 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798488:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  79848b:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  798490:       ba 69 03 00 00          mov    $0x369,%edx
    0.00 :	  798495:       e9 75 ff ff ff          jmpq   79840f <AllocSetAlloc+0x2ff>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   25.00 ??:0
   25.00 ??:0
   25.00 ??:0
   25.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000084750 <memcpy>:
 ??:0
   25.00 :	   84750:       48 83 fa 20             cmp    $0x20,%rdx
    0.00 :	   84754:       48 89 f8                mov    %rdi,%rax
    0.00 :	   84757:       73 77                   jae    847d0 <memcpy+0x80>
    0.00 :	   84759:       f6 c2 01                test   $0x1,%dl
    0.00 :	   8475c:       74 0b                   je     84769 <memcpy+0x19>
    0.00 :	   8475e:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   84761:       88 0f                   mov    %cl,(%rdi)
    0.00 :	   84763:       48 ff c6                inc    %rsi
    0.00 :	   84766:       48 ff c7                inc    %rdi
    0.00 :	   84769:       f6 c2 02                test   $0x2,%dl
    0.00 :	   8476c:       74 12                   je     84780 <memcpy+0x30>
    0.00 :	   8476e:       0f b7 0e                movzwl (%rsi),%ecx
    0.00 :	   84771:       66 89 0f                mov    %cx,(%rdi)
    0.00 :	   84774:       48 83 c6 02             add    $0x2,%rsi
    0.00 :	   84778:       48 83 c7 02             add    $0x2,%rdi
    0.00 :	   8477c:       0f 1f 40 00             nopl   0x0(%rax)
   25.00 :	   84780:       f6 c2 04                test   $0x4,%dl
    0.00 :	   84783:       74 0c                   je     84791 <memcpy+0x41>
    0.00 :	   84785:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	   84787:       89 0f                   mov    %ecx,(%rdi)
    0.00 :	   84789:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	   8478d:       48 83 c7 04             add    $0x4,%rdi
   25.00 :	   84791:       f6 c2 08                test   $0x8,%dl
    0.00 :	   84794:       74 0e                   je     847a4 <memcpy+0x54>
    0.00 :	   84796:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   84799:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   8479c:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	   847a0:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	   847a4:       81 e2 f0 00 00 00       and    $0xf0,%edx
    0.00 :	   847aa:       74 1f                   je     847cb <memcpy+0x7b>
    0.00 :	   847ac:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   847b0:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   847b3:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   847b7:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   847ba:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   847be:       83 ea 10                sub    $0x10,%edx
    0.00 :	   847c1:       48 8d 76 10             lea    0x10(%rsi),%rsi
    0.00 :	   847c5:       48 8d 7f 10             lea    0x10(%rdi),%rdi
    0.00 :	   847c9:       75 e5                   jne    847b0 <memcpy+0x60>
   25.00 :	   847cb:       f3 c3                   repz retq 
    0.00 :	   847cd:       0f 1f 00                nopl   (%rax)
    0.00 :	   847d0:       48 89 44 24 f8          mov    %rax,-0x8(%rsp)
    0.00 :	   847d5:       89 f1                   mov    %esi,%ecx
    0.00 :	   847d7:       83 e1 07                and    $0x7,%ecx
    0.00 :	   847da:       74 34                   je     84810 <memcpy+0xc0>
    0.00 :	   847dc:       48 8d 54 11 f8          lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	   847e1:       83 e9 08                sub    $0x8,%ecx
    0.00 :	   847e4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   847eb:       00 00 00 00 00 
    0.00 :	   847f0:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	   847f3:       88 07                   mov    %al,(%rdi)
    0.00 :	   847f5:       ff c1                   inc    %ecx
    0.00 :	   847f7:       48 8d 76 01             lea    0x1(%rsi),%rsi
    0.00 :	   847fb:       48 8d 7f 01             lea    0x1(%rdi),%rdi
    0.00 :	   847ff:       75 ef                   jne    847f0 <memcpy+0xa0>
    0.00 :	   84801:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   84808:       0f 1f 84 00 00 00 00 
    0.00 :	   8480f:       00 
    0.00 :	   84810:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	   84817:       77 77                   ja     84890 <memcpy+0x140>
    0.00 :	   84819:       89 d1                   mov    %edx,%ecx
    0.00 :	   8481b:       c1 e9 05                shr    $0x5,%ecx
    0.00 :	   8481e:       74 60                   je     84880 <memcpy+0x130>
    0.00 :	   84820:       ff c9                   dec    %ecx
    0.00 :	   84822:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84825:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84829:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8482d:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84831:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84834:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84838:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8483c:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84840:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   84844:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84848:       74 36                   je     84880 <memcpy+0x130>
    0.00 :	   8484a:       ff c9                   dec    %ecx
    0.00 :	   8484c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   8484f:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84853:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84857:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8485b:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   8485e:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84862:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84866:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8486a:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   8486e:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84872:       75 ac                   jne    84820 <memcpy+0xd0>
    0.00 :	   84874:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8487b:       00 00 00 00 00 
    0.00 :	   84880:       83 e2 1f                and    $0x1f,%edx
    0.00 :	   84883:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84888:       0f 85 cb fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   8488e:       f3 c3                   repz retq 
    0.00 :	   84890:       4c 8b 1d 79 d8 2e 00    mov    0x2ed879(%rip),%r11        # 372110 <__x86_64_data_cache_size_half>
    0.00 :	   84897:       49 39 d3                cmp    %rdx,%r11
    0.00 :	   8489a:       4c 0f 47 da             cmova  %rdx,%r11
    0.00 :	   8489e:       4c 89 d9                mov    %r11,%rcx
    0.00 :	   848a1:       49 83 e3 f8             and    $0xfffffffffffffff8,%r11
    0.00 :	   848a5:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   848a9:       74 05                   je     848b0 <memcpy+0x160>
    0.00 :	   848ab:       f3 48 a5                rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	   848ae:       66 90                   xchg   %ax,%ax
    0.00 :	   848b0:       4c 29 da                sub    %r11,%rdx
    0.00 :	   848b3:       48 f7 c2 f8 ff ff ff    test   $0xfffffffffffffff8,%rdx
    0.00 :	   848ba:       75 14                   jne    848d0 <memcpy+0x180>
    0.00 :	   848bc:       83 e2 07                and    $0x7,%edx
    0.00 :	   848bf:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   848c4:       0f 85 8f fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   848ca:       f3 c3                   repz retq 
    0.00 :	   848cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   848d0:       4c 8b 05 59 d8 2e 00    mov    0x2ed859(%rip),%r8        # 372130 <__x86_64_shared_cache_size_half>
    0.00 :	   848d7:       49 39 d0                cmp    %rdx,%r8
    0.00 :	   848da:       4c 0f 47 c2             cmova  %rdx,%r8
    0.00 :	   848de:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   848e1:       49 83 e0 c0             and    $0xffffffffffffffc0,%r8
    0.00 :	   848e5:       48 c1 e9 06             shr    $0x6,%rcx
    0.00 :	   848e9:       0f 84 ab 01 00 00       je     84a9a <memcpy+0x34a>
    0.00 :	   848ef:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   848f4:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   848f9:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   848fe:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   84903:       83 3d 06 2b 2f 00 00    cmpl   $0x0,0x2f2b06(%rip)        # 377410 <__x86_64_prefetchw>
    0.00 :	   8490a:       0f 84 c0 00 00 00       je     849d0 <memcpy+0x280>
    0.00 :	   84910:       48 ff c9                dec    %rcx
    0.00 :	   84913:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84916:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   8491a:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8491e:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84922:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84926:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   8492a:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8492e:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84932:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   84939:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84940:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84943:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84947:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8494b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8494f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84953:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84957:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   8495b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   8495f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84963:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84967:       0f 84 19 01 00 00       je     84a86 <memcpy+0x336>
    0.00 :	   8496d:       48 ff c9                dec    %rcx
    0.00 :	   84970:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84973:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84977:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8497b:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8497f:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84983:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84987:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8498b:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   8498f:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84992:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84996:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8499a:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8499e:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   849a2:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   849a6:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   849aa:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   849ae:       0f 0d 8f 40 03 00 00    prefetchw 0x340(%rdi)
    0.00 :	   849b5:       0f 0d 8f 80 03 00 00    prefetchw 0x380(%rdi)
    0.00 :	   849bc:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   849c0:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   849c4:       0f 85 46 ff ff ff       jne    84910 <memcpy+0x1c0>
    0.00 :	   849ca:       e9 b7 00 00 00          jmpq   84a86 <memcpy+0x336>
    0.00 :	   849cf:       90                      nop
    0.00 :	   849d0:       48 ff c9                dec    %rcx
    0.00 :	   849d3:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   849d6:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   849da:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   849de:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   849e2:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   849e6:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   849ea:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   849ee:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   849f2:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   849f9:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84a00:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a03:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a07:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a0b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a0f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a13:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a17:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a1b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a1f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a23:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a27:       74 5d                   je     84a86 <memcpy+0x336>
    0.00 :	   84a29:       48 ff c9                dec    %rcx
    0.00 :	   84a2c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84a2f:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84a33:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84a37:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84a3b:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84a3f:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84a43:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84a47:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84a4b:       0f 18 8f 40 03 00 00    prefetcht0 0x340(%rdi)
    0.00 :	   84a52:       0f 18 8f 80 03 00 00    prefetcht0 0x380(%rdi)
    0.00 :	   84a59:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a5c:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a60:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a64:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a68:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a6c:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a70:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a74:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a78:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a7c:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a80:       0f 85 4a ff ff ff       jne    849d0 <memcpy+0x280>
    0.00 :	   84a86:       48 8b 5c 24 d8          mov    -0x28(%rsp),%rbx
    0.00 :	   84a8b:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84a90:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84a95:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84a9a:       4c 29 c2                sub    %r8,%rdx
    0.00 :	   84a9d:       48 f7 c2 c0 ff ff ff    test   $0xffffffffffffffc0,%rdx
    0.00 :	   84aa4:       75 1a                   jne    84ac0 <memcpy+0x370>
    0.00 :	   84aa6:       83 e2 3f                and    $0x3f,%edx
    0.00 :	   84aa9:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84aae:       0f 85 a5 fc ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84ab4:       f3 c3                   repz retq 
    0.00 :	   84ab6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   84abd:       00 00 00 
    0.00 :	   84ac0:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   84ac3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   84ac7:       0f 84 d8 00 00 00       je     84ba5 <memcpy+0x455>
    0.00 :	   84acd:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   84ad2:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   84ad7:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   84adc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   84ae0:       0f 18 86 00 03 00 00    prefetchnta 0x300(%rsi)
    0.00 :	   84ae7:       0f 18 86 40 03 00 00    prefetchnta 0x340(%rsi)
    0.00 :	   84aee:       48 ff c9                dec    %rcx
    0.00 :	   84af1:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84af4:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84af8:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84afc:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84b00:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84b04:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84b08:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84b0c:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84b10:       48 0f c3 07             movnti %rax,(%rdi)
    0.00 :	   84b14:       4c 0f c3 47 08          movnti %r8,0x8(%rdi)
    0.00 :	   84b19:       4c 0f c3 4f 10          movnti %r9,0x10(%rdi)
    0.00 :	   84b1e:       4c 0f c3 57 18          movnti %r10,0x18(%rdi)
    0.00 :	   84b23:       4c 0f c3 5f 20          movnti %r11,0x20(%rdi)
    0.00 :	   84b28:       4c 0f c3 67 28          movnti %r12,0x28(%rdi)
    0.00 :	   84b2d:       4c 0f c3 6f 30          movnti %r13,0x30(%rdi)
    0.00 :	   84b32:       4c 0f c3 77 38          movnti %r14,0x38(%rdi)
    0.00 :	   84b37:       48 8b 46 40             mov    0x40(%rsi),%rax
    0.00 :	   84b3b:       4c 8b 46 48             mov    0x48(%rsi),%r8
    0.00 :	   84b3f:       4c 8b 4e 50             mov    0x50(%rsi),%r9
    0.00 :	   84b43:       4c 8b 56 58             mov    0x58(%rsi),%r10
    0.00 :	   84b47:       4c 8b 5e 60             mov    0x60(%rsi),%r11
    0.00 :	   84b4b:       4c 8b 66 68             mov    0x68(%rsi),%r12
    0.00 :	   84b4f:       4c 8b 6e 70             mov    0x70(%rsi),%r13
    0.00 :	   84b53:       4c 8b 76 78             mov    0x78(%rsi),%r14
    0.00 :	   84b57:       48 0f c3 47 40          movnti %rax,0x40(%rdi)
    0.00 :	   84b5c:       4c 0f c3 47 48          movnti %r8,0x48(%rdi)
    0.00 :	   84b61:       4c 0f c3 4f 50          movnti %r9,0x50(%rdi)
    0.00 :	   84b66:       4c 0f c3 57 58          movnti %r10,0x58(%rdi)
    0.00 :	   84b6b:       4c 0f c3 5f 60          movnti %r11,0x60(%rdi)
    0.00 :	   84b70:       4c 0f c3 67 68          movnti %r12,0x68(%rdi)
    0.00 :	   84b75:       4c 0f c3 6f 70          movnti %r13,0x70(%rdi)
    0.00 :	   84b7a:       4c 0f c3 77 78          movnti %r14,0x78(%rdi)
    0.00 :	   84b7f:       48 8d b6 80 00 00 00    lea    0x80(%rsi),%rsi
    0.00 :	   84b86:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   84b8d:       0f 85 4d ff ff ff       jne    84ae0 <memcpy+0x390>
    0.00 :	   84b93:       0f ae f8                sfence 
    0.00 :	   84b96:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84b9b:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84ba0:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84ba5:       83 e2 7f                and    $0x7f,%edx
    0.00 :	   84ba8:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84bad:       0f 85 a6 fb ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84bb3:       f3 c3                   repz retq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1313
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1328
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f260 <slot_getsomeattrs>:
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f260:       55                      push   %rbp
    0.00 :	  46f261:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46f264:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  46f268:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  46f26c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  46f26f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  46f273:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f277:       39 77 24                cmp    %esi,0x24(%rdi)
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f27a:       41 89 f5                mov    %esi,%r13d
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f27d:       7d 67                   jge    46f2e6 <slot_getsomeattrs+0x86>
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
    0.00 :	  46f27f:       85 f6                   test   %esi,%esi
    0.00 :	  46f281:       7e 75                   jle    46f2f8 <slot_getsomeattrs+0x98>
    0.00 :	  46f283:       48 8b 47 10             mov    0x10(%rdi),%rax
    0.00 :	  46f287:       3b 30                   cmp    (%rax),%esi
    0.00 :	  46f289:       7f 6d                   jg     46f2f8 <slot_getsomeattrs+0x98>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
    0.00 :	  46f28b:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        if (tuple == NULL)                      /* internal error */
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1313
   33.33 :	  46f28f:       48 85 c0                test   %rax,%rax
    0.00 :	  46f292:       0f 84 8d 00 00 00       je     46f325 <slot_getsomeattrs+0xc5>
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
         :
         :	        /*
         :	         * load up any slots available from physical tuple
         :	         */
         :	        attno = HeapTupleHeaderGetNatts(tuple->t_data);
    0.00 :	  46f298:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  46f29c:       0f b7 40 12             movzwl 0x12(%rax),%eax
    0.00 :	  46f2a0:       25 ff 07 00 00          and    $0x7ff,%eax
         :	        attno = Min(attno, attnum);
    0.00 :	  46f2a5:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f2a7:       89 c3                   mov    %eax,%ebx
    0.00 :	  46f2a9:       0f 4e de                cmovle %esi,%ebx
         :
         :	        slot_deform_tuple(slot, attno);
    0.00 :	  46f2ac:       89 de                   mov    %ebx,%esi
    0.00 :	  46f2ae:       e8 5d fc ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1328
   33.33 :	  46f2b3:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  46f2b6:       7e 29                   jle    46f2e1 <slot_getsomeattrs+0x81>
    0.00 :	  46f2b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f2bf:       00 
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2c0:       49 8b 54 24 28          mov    0x28(%r12),%rdx
    0.00 :	  46f2c5:       48 63 c3                movslq %ebx,%rax
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2c8:       83 c3 01                add    $0x1,%ebx
    0.00 :	  46f2cb:       41 39 dd                cmp    %ebx,%r13d
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2ce:       48 c7 04 c2 00 00 00    movq   $0x0,(%rdx,%rax,8)
    0.00 :	  46f2d5:       00 
         :	                slot->tts_isnull[attno] = true;
    0.00 :	  46f2d6:       49 8b 54 24 30          mov    0x30(%r12),%rdx
    0.00 :	  46f2db:       c6 04 02 01             movb   $0x1,(%rdx,%rax,1)
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2df:       7f df                   jg     46f2c0 <slot_getsomeattrs+0x60>
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
         :	                slot->tts_isnull[attno] = true;
         :	        }
         :	        slot->tts_nvalid = attnum;
    0.00 :	  46f2e1:       45 89 6c 24 24          mov    %r13d,0x24(%r12)
         :	}
    0.00 :	  46f2e6:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  46f2ea:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  46f2ee:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  46f2f2:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
   33.33 :	  46f2f3:       c3                      retq   
    0.00 :	  46f2f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        if (slot->tts_nvalid >= attnum)
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
         :	                elog(ERROR, "invalid attribute number %d", attnum);
    0.00 :	  46f2f8:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f2fd:       be 1a 05 00 00          mov    $0x51a,%esi
    0.00 :	  46f302:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f307:       e8 14 c1 30 00          callq  77b420 <elog_start>
    0.00 :	  46f30c:       44 89 ea                mov    %r13d,%edx
    0.00 :	  46f30f:       be 13 f6 7a 00          mov    $0x7af613,%esi
    0.00 :	  46f314:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f319:       31 c0                   xor    %eax,%eax
    0.00 :	  46f31b:       e8 10 bf 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f320:       e8 ab a1 ff ff          callq  4694d0 <abort@plt>
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f325:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f32a:       be 22 05 00 00          mov    $0x522,%esi
    0.00 :	  46f32f:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f334:       e8 e7 c0 30 00          callq  77b420 <elog_start>
    0.00 :	  46f339:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f33e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f343:       31 c0                   xor    %eax,%eax
    0.00 :	  46f345:       e8 e6 be 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f34a:       e8 81 a1 ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:191
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:195
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ff60 <heap_fill_tuple>:
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff60:       55                      push   %rbp
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff61:       45 31 d2                xor    %r10d,%r10d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff64:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46ff67:       41 57                   push   %r15
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff69:       45 31 ff                xor    %r15d,%r15d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff6c:       41 56                   push   %r14
    0.00 :	  46ff6e:       41 55                   push   %r13
    0.00 :	  46ff70:       49 89 cd                mov    %rcx,%r13
    0.00 :	  46ff73:       41 54                   push   %r12
    0.00 :	  46ff75:       53                      push   %rbx
    0.00 :	  46ff76:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  46ff7a:       4c 8b 5d 10             mov    0x10(%rbp),%r11
    0.00 :	  46ff7e:       48 89 75 c8             mov    %rsi,-0x38(%rbp)
    0.00 :	  46ff82:       48 89 55 c0             mov    %rdx,-0x40(%rbp)
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff86:       8b 07                   mov    (%rdi),%eax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff88:       4d 85 db                test   %r11,%r11
         :	                                uint16 *infomask, bits8 *bit)
         :	{
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff8b:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ff8e:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff92:       74 0a                   je     46ff9e <heap_fill_tuple+0x3e>
         :	        {
         :	                bitP = &bit[-1];
    0.00 :	  46ff94:       4d 8d 53 ff             lea    -0x1(%r11),%r10
    0.00 :	  46ff98:       41 bf 80 00 00 00       mov    $0x80,%r15d
         :	                /* just to keep compiler quiet */
         :	                bitP = NULL;
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
    0.00 :	  46ff9e:       66 41 83 21 f8          andw   $0xfff8,(%r9)
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffa3:       8b 4d d4                mov    -0x2c(%rbp),%ecx
    0.00 :	  46ffa6:       85 c9                   test   %ecx,%ecx
    0.00 :	  46ffa8:       0f 8e 5c 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
    0.00 :	  46ffae:       49 89 c0                mov    %rax,%r8
    0.00 :	  46ffb1:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  46ffb4:       eb 21                   jmp    46ffd7 <heap_fill_tuple+0x77>
    0.00 :	  46ffb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46ffbd:       00 00 00 
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
    0.00 :	  46ffc0:       66 41 83 09 01          orw    $0x1,(%r9)
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :
         :	                data += data_length;
    0.00 :	  46ffc5:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  46ffc9:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffcd:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  46ffd1:       0f 8e 33 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
         :	        {
         :	                Size            data_length;
         :
         :	                if (bit != NULL)
    0.00 :	  46ffd7:       4d 85 db                test   %r11,%r11
    0.00 :	  46ffda:       74 1e                   je     46fffa <heap_fill_tuple+0x9a>
         :	                {
         :	                        if (bitmask != HIGHBIT)
    0.00 :	  46ffdc:       41 81 ff 80 00 00 00    cmp    $0x80,%r15d
    0.00 :	  46ffe3:       0f 84 37 01 00 00       je     470120 <heap_fill_tuple+0x1c0>
         :	                                bitmask <<= 1;
    0.00 :	  46ffe9:       45 01 ff                add    %r15d,%r15d
         :	                                bitP += 1;
         :	                                *bitP = 0x0;
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
    0.00 :	  46ffec:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  46fff0:       42 80 3c 32 00          cmpb   $0x0,(%rdx,%r14,1)
    0.00 :	  46fff5:       75 c9                   jne    46ffc0 <heap_fill_tuple+0x60>
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
         :	                                continue;
         :	                        }
         :
         :	                        *bitP |= bitmask;
    0.00 :	  46fff7:       45 08 3a                or     %r15b,(%r10)
         :	                /*
         :	                 * XXX we use the att_align macros on the pointer value itself, not on
         :	                 * an offset.  This is a bit of a hack.
         :	                 */
         :
         :	                if (att[i]->attbyval)
    0.00 :	  46fffa:       49 8b 08                mov    (%r8),%rcx
    0.00 :	  46fffd:       80 79 5c 00             cmpb   $0x0,0x5c(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:191
   66.67 :	  470001:       74 7d                   je     470080 <heap_fill_tuple+0x120>
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470003:       0f b6 41 5e             movzbl 0x5e(%rcx),%eax
    0.00 :	  470007:       3c 69                   cmp    $0x69,%al
    0.00 :	  470009:       0f 84 f1 01 00 00       je     470200 <heap_fill_tuple+0x2a0>
    0.00 :	  47000f:       3c 63                   cmp    $0x63,%al
    0.00 :	  470011:       74 10                   je     470023 <heap_fill_tuple+0xc3>
    0.00 :	  470013:       3c 64                   cmp    $0x64,%al
    0.00 :	  470015:       0f 84 55 02 00 00       je     470270 <heap_fill_tuple+0x310>
    0.00 :	  47001b:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  47001f:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470023:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470027:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  47002b:       0f 84 e5 01 00 00       je     470216 <heap_fill_tuple+0x2b6>
    0.00 :	  470031:       0f 8f 01 01 00 00       jg     470138 <heap_fill_tuple+0x1d8>
    0.00 :	  470037:       66 83 e8 01             sub    $0x1,%ax
    0.00 :	  47003b:       0f 84 07 02 00 00       je     470248 <heap_fill_tuple+0x2e8>
    0.00 :	  470041:       ba 30 f7 7a 00          mov    $0x7af730,%edx
    0.00 :	  470046:       be c3 00 00 00          mov    $0xc3,%esi
    0.00 :	  47004b:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  470050:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470054:       e8 c7 b3 30 00          callq  77b420 <elog_start>
    0.00 :	  470059:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  47005d:       be 2f f6 7a 00          mov    $0x7af62f,%esi
    0.00 :	  470062:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  470067:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47006a:       0f bf 50 4c             movswl 0x4c(%rax),%edx
    0.00 :	  47006e:       31 c0                   xor    %eax,%eax
    0.00 :	  470070:       e8 bb b1 30 00          callq  77b230 <elog_finish>
    0.00 :	  470075:       e8 56 94 ff ff          callq  4694d0 <abort@plt>
    0.00 :	  47007a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
    0.00 :	  470080:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470084:       66 83 f8 ff             cmp    $0xffff,%ax
    0.00 :	  470088:       0f 84 da 00 00 00       je     470168 <heap_fill_tuple+0x208>
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
    0.00 :	  47008e:       66 83 f8 fe             cmp    $0xfffe,%ax
    0.00 :	  470092:       0f 84 e8 01 00 00       je     470280 <heap_fill_tuple+0x320>
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470098:       0f b6 49 5e             movzbl 0x5e(%rcx),%ecx
    0.00 :	  47009c:       80 f9 69                cmp    $0x69,%cl
    0.00 :	  47009f:       0f 84 bb 01 00 00       je     470260 <heap_fill_tuple+0x300>
    0.00 :	  4700a5:       80 f9 63                cmp    $0x63,%cl
    0.00 :	  4700a8:       74 14                   je     4700be <heap_fill_tuple+0x15e>
    0.00 :	  4700aa:       80 f9 64                cmp    $0x64,%cl
    0.00 :	  4700ad:       0f 1f 00                nopl   (%rax)
    0.00 :	  4700b0:       0f 84 3a 02 00 00       je     4702f0 <heap_fill_tuple+0x390>
    0.00 :	  4700b6:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4700ba:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700be:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
    0.00 :	  4700c2:       4c 0f bf e0             movswq %ax,%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700c6:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4700c9:       4a 8b 34 f2             mov    (%rdx,%r14,8),%rsi
    0.00 :	  4700cd:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4700d0:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4700d4:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4700d8:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  4700dc:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4700e0:       e8 0b 9b ff ff          callq  469bf0 <memcpy@plt>
    0.00 :	  4700e5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4700e9:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4700ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4700f1:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
         :	                }
         :
         :	                data += data_length;
    0.00 :	  4700f5:       4d 01 e5                add    %r12,%r13
    0.00 :	  4700f8:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  4700fc:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470100:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  470104:       0f 8f cd fe ff ff       jg     46ffd7 <heap_fill_tuple+0x77>
         :
         :	                data += data_length;
         :	        }
         :
         :	        Assert((data - start) == data_size);
         :	}
    0.00 :	  47010a:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  47010e:       5b                      pop    %rbx
    0.00 :	  47010f:       41 5c                   pop    %r12
    0.00 :	  470111:       41 5d                   pop    %r13
    0.00 :	  470113:       41 5e                   pop    %r14
    0.00 :	  470115:       41 5f                   pop    %r15
    0.00 :	  470117:       c9                      leaveq 
    0.00 :	  470118:       c3                      retq   
    0.00 :	  470119:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        if (bitmask != HIGHBIT)
         :	                                bitmask <<= 1;
         :	                        else
         :	                        {
         :	                                bitP += 1;
    0.00 :	  470120:       49 83 c2 01             add    $0x1,%r10
         :	                                *bitP = 0x0;
    0.00 :	  470124:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  47012a:       41 c6 02 00             movb   $0x0,(%r10)
    0.00 :	  47012e:       e9 b9 fe ff ff          jmpq   46ffec <heap_fill_tuple+0x8c>
    0.00 :	  470133:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470138:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  47013c:       0f 84 ee 00 00 00       je     470230 <heap_fill_tuple+0x2d0>
    0.00 :	  470142:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  470146:       0f 85 f5 fe ff ff       jne    470041 <heap_fill_tuple+0xe1>
    0.00 :	  47014c:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470150:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470154:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                        data_length = att[i]->attlen;
    0.00 :	  470158:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47015b:       4c 0f bf 60 4c          movswq 0x4c(%rax),%r12
    0.00 :	  470160:       eb 93                   jmp    4700f5 <heap_fill_tuple+0x195>
    0.00 :	  470162:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470168:       48 8b 45 c8             mov    -0x38(%rbp),%rax
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  47016c:       41 0f b7 11             movzwl (%r9),%edx
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470170:       4a 8b 34 f0             mov    (%rax,%r14,8),%rsi
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  470174:       89 d0                   mov    %edx,%eax
    0.00 :	  470176:       83 c8 02                or     $0x2,%eax
    0.00 :	  470179:       66 41 89 01             mov    %ax,(%r9)
         :	                        if (VARATT_IS_EXTERNAL(val))
    0.00 :	  47017d:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	  470180:       3c 01                   cmp    $0x1,%al
    0.00 :	  470182:       0f 84 38 01 00 00       je     4702c0 <heap_fill_tuple+0x360>
         :	                                *infomask |= HEAP_HASEXTERNAL;
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
    0.00 :	  470188:       0f b6 d0                movzbl %al,%edx
    0.00 :	  47018b:       f6 c2 01                test   $0x1,%dl
    0.00 :	  47018e:       0f 85 6c 01 00 00       jne    470300 <heap_fill_tuple+0x3a0>
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470194:       49 8b 00                mov    (%r8),%rax
    0.00 :	  470197:       80 78 5d 70             cmpb   $0x70,0x5d(%rax)
    0.00 :	  47019b:       74 09                   je     4701a6 <heap_fill_tuple+0x246>
    0.00 :	  47019d:       83 e2 03                and    $0x3,%edx
    0.00 :	  4701a0:       0f 84 6a 01 00 00       je     470310 <heap_fill_tuple+0x3b0>
    0.00 :	  4701a6:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  4701a8:       c1 e9 02                shr    $0x2,%ecx
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  4701ab:       0f b6 40 5e             movzbl 0x5e(%rax),%eax
    0.00 :	  4701af:       3c 69                   cmp    $0x69,%al
    0.00 :	  4701b1:       0f 84 99 01 00 00       je     470350 <heap_fill_tuple+0x3f0>
    0.00 :	  4701b7:       3c 63                   cmp    $0x63,%al
    0.00 :	  4701b9:       74 10                   je     4701cb <heap_fill_tuple+0x26b>
    0.00 :	  4701bb:       3c 64                   cmp    $0x64,%al
    0.00 :	  4701bd:       0f 84 9a 01 00 00       je     47035d <heap_fill_tuple+0x3fd>
    0.00 :	  4701c3:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4701c7:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
    0.00 :	  4701cb:       41 89 cc                mov    %ecx,%r12d
         :	                                memcpy(data, val, data_length);
    0.00 :	  4701ce:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4701d1:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4701d4:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4701d8:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4701dc:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  4701e0:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4701e4:       e8 07 9a ff ff          callq  469bf0 <memcpy@plt>
    0.00 :	  4701e9:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  4701ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4701f1:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4701f5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4701f9:       e9 f7 fe ff ff          jmpq   4700f5 <heap_fill_tuple+0x195>
    0.00 :	  4701fe:       66 90                   xchg   %ax,%ax
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:195
   33.33 :	  470200:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470204:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470208:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  47020c:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  470210:       0f 85 1b fe ff ff       jne    470031 <heap_fill_tuple+0xd1>
    0.00 :	  470216:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47021a:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  47021e:       66 41 89 45 00          mov    %ax,0x0(%r13)
    0.00 :	  470223:       e9 30 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470228:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  47022f:       00 
    0.00 :	  470230:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470234:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470238:       41 89 45 00             mov    %eax,0x0(%r13)
    0.00 :	  47023c:       e9 17 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470241:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  470248:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47024c:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470250:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470254:       e9 ff fe ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470259:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470260:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470264:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470268:       e9 51 fe ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  47026d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470270:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470274:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470278:       e9 a6 fd ff ff          jmpq   470023 <heap_fill_tuple+0xc3>
    0.00 :	  47027d:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
         :	                {
         :	                        /* cstring ... never needs alignment */
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  470280:       66 41 83 09 02          orw    $0x2,(%r9)
         :	                        Assert(att[i]->attalign == 'c');
         :	                        data_length = strlen(DatumGetCString(values[i])) + 1;
    0.00 :	  470285:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  470289:       4a 8b 1c f0             mov    (%rax,%r14,8),%rbx
    0.00 :	  47028d:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470291:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  470295:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470299:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  47029d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4702a0:       e8 ab 95 ff ff          callq  469850 <strlen@plt>
    0.00 :	  4702a5:       4c 8d 60 01             lea    0x1(%rax),%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4702a9:       48 89 de                mov    %rbx,%rsi
    0.00 :	  4702ac:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4702af:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4702b2:       e9 2d ff ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  4702b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4702be:       00 00 
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c0:       83 ca 06                or     $0x6,%edx
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702c3:       41 bc 0a 00 00 00       mov    $0xa,%r12d
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c9:       66 41 89 11             mov    %dx,(%r9)
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702cd:       0f b6 46 01             movzbl 0x1(%rsi),%eax
    0.00 :	  4702d1:       3c 01                   cmp    $0x1,%al
    0.00 :	  4702d3:       0f 84 f5 fe ff ff       je     4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702d9:       3c 12                   cmp    $0x12,%al
    0.00 :	  4702db:       41 bc 03 00 00 00       mov    $0x3,%r12d
    0.00 :	  4702e1:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4702e6:       4c 0f 44 e2             cmove  %rdx,%r12
    0.00 :	  4702ea:       e9 df fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702ef:       90                      nop
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  4702f0:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  4702f4:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  4702f8:       e9 c1 fd ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  4702fd:       0f 1f 00                nopl   (%rax)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
    0.00 :	  470300:       d0 e8                   shr    %al
    0.00 :	  470302:       44 0f b6 e0             movzbl %al,%r12d
    0.00 :	  470306:       e9 c3 fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  47030b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470310:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  470312:       c1 e9 02                shr    $0x2,%ecx
    0.00 :	  470315:       8d 51 fc                lea    -0x4(%rcx),%edx
    0.00 :	  470318:       4c 8d 62 01             lea    0x1(%rdx),%r12
    0.00 :	  47031c:       49 83 fc 7f             cmp    $0x7f,%r12
    0.00 :	  470320:       0f 87 85 fe ff ff       ja     4701ab <heap_fill_tuple+0x24b>
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470326:       43 8d 04 24             lea    (%r12,%r12,1),%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47032a:       49 8d 7d 01             lea    0x1(%r13),%rdi
    0.00 :	  47032e:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	  470332:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470336:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  47033a:       83 c8 01                or     $0x1,%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47033d:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470341:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470345:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470349:       e9 96 fe ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  47034e:       66 90                   xchg   %ax,%ax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  470350:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470354:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470358:       e9 6e fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>
    0.00 :	  47035d:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470361:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470365:       e9 61 fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1407
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1443
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004704e0 <heap_form_minimal_tuple>:
         :	 */
         :	MinimalTuple
         :	heap_form_minimal_tuple(TupleDesc tupleDescriptor,
         :	                                                Datum *values,
         :	                                                bool *isnull)
         :	{
    0.00 :	  4704e0:       55                      push   %rbp
    0.00 :	  4704e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4704e4:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1407
   33.33 :	  4704e6:       49 89 d7                mov    %rdx,%r15
    0.00 :	  4704e9:       41 56                   push   %r14
    0.00 :	  4704eb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  4704ee:       41 55                   push   %r13
    0.00 :	  4704f0:       41 54                   push   %r12
    0.00 :	  4704f2:       53                      push   %rbx
    0.00 :	  4704f3:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	  4704f7:       48 89 75 c0             mov    %rsi,-0x40(%rbp)
         :	        MinimalTuple tuple;                     /* return tuple */
         :	        Size            len,
         :	                                data_len;
         :	        int                     hoff;
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
    0.00 :	  4704fb:       44 8b 2f                mov    (%rdi),%r13d
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
    0.00 :	  4704fe:       41 81 fd 80 06 00 00    cmp    $0x680,%r13d
    0.00 :	  470505:       0f 8f fb 00 00 00       jg     470606 <heap_form_minimal_tuple+0x126>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47050b:       45 85 ed                test   %r13d,%r13d
    0.00 :	  47050e:       7e 28                   jle    470538 <heap_form_minimal_tuple+0x58>
         :	        {
         :	                if (isnull[i])
    0.00 :	  470510:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  470513:       31 d2                   xor    %edx,%edx
    0.00 :	  470515:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	  470519:       74 15                   je     470530 <heap_form_minimal_tuple+0x50>
    0.00 :	  47051b:       e9 d0 00 00 00          jmpq   4705f0 <heap_form_minimal_tuple+0x110>
    0.00 :	  470520:       0f b6 41 01             movzbl 0x1(%rcx),%eax
    0.00 :	  470524:       48 83 c1 01             add    $0x1,%rcx
    0.00 :	  470528:       84 c0                   test   %al,%al
    0.00 :	  47052a:       0f 85 c0 00 00 00       jne    4705f0 <heap_form_minimal_tuple+0x110>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470530:       83 c2 01                add    $0x1,%edx
    0.00 :	  470533:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  470536:       7f e8                   jg     470520 <heap_form_minimal_tuple+0x40>
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
    0.00 :	  470538:       ba 0f 00 00 00          mov    $0xf,%edx
    0.00 :	  47053d:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
    0.00 :	  470541:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1443
   33.33 :	  470546:       48 8d 42 04             lea    0x4(%rdx),%rax
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47054a:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  47054e:       4c 89 f7                mov    %r14,%rdi
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
    0.00 :	  470551:       48 0f 45 d0             cmovne %rax,%rdx
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
    0.00 :	  470555:       48 8d 5a 07             lea    0x7(%rdx),%rbx
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470559:       4c 89 fa                mov    %r15,%rdx
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
    0.00 :	  47055c:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  470560:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470563:       e8 08 fe ff ff          callq  470370 <heap_compute_data_size>
         :
         :	        len += data_len;
    0.00 :	  470568:       48 01 c3                add    %rax,%rbx
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47056b:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
    0.00 :	  47056f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  470572:       e8 f9 89 32 00          callq  798f70 <palloc0>
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
    0.00 :	  470577:       89 18                   mov    %ebx,(%rax)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
    0.00 :	  470579:       49 89 c4                mov    %rax,%r12
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
         :	        HeapTupleHeaderSetNatts(tuple, numberOfAttributes);
    0.00 :	  47057c:       0f b7 40 0a             movzwl 0xa(%rax),%eax
    0.00 :	  470580:       66 25 00 f8             and    $0xf800,%ax
    0.00 :	  470584:       44 09 e8                or     %r13d,%eax
    0.00 :	  470587:       66 41 89 44 24 0a       mov    %ax,0xa(%r12)
         :	        tuple->t_hoff = hoff + MINIMAL_TUPLE_OFFSET;
    0.00 :	  47058d:       0f b6 45 d0             movzbl -0x30(%rbp),%eax
    0.00 :	  470591:       83 c0 08                add    $0x8,%eax
    0.00 :	  470594:       41 88 44 24 0e          mov    %al,0xe(%r12)
         :
         :	        if (tupleDescriptor->tdhasoid)          /* else leave infomask = 0 */
    0.00 :	  470599:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
    0.00 :	  47059e:       74 08                   je     4705a8 <heap_form_minimal_tuple+0xc8>
         :	                tuple->t_infomask = HEAP_HASOID;
    0.00 :	  4705a0:       66 41 c7 44 24 0c 08    movw   $0x8,0xc(%r12)
    0.00 :	  4705a7:       00 
         :
         :	        heap_fill_tuple(tupleDescriptor,
    0.00 :	  4705a8:       48 63 4d d0             movslq -0x30(%rbp),%rcx
    0.00 :	  4705ac:       31 d2                   xor    %edx,%edx
    0.00 :	  4705ae:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  4705b2:       49 8d 44 24 0f          lea    0xf(%r12),%rax
    0.00 :	  4705b7:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  4705bb:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  4705bf:       4d 8d 4c 24 0c          lea    0xc(%r12),%r9
    0.00 :	  4705c4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4705c7:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	  4705cb:       49 8d 0c 0c             lea    (%r12,%rcx,1),%rcx
    0.00 :	  4705cf:       48 89 14 24             mov    %rdx,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
   33.33 :	  4705d3:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4705d6:       e8 85 f9 ff ff          callq  46ff60 <heap_fill_tuple>
         :	                                        data_len,
         :	                                        &tuple->t_infomask,
         :	                                        (hasnull ? tuple->t_bits : NULL));
         :
         :	        return tuple;
         :	}
    0.00 :	  4705db:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  4705df:       4c 89 e0                mov    %r12,%rax
    0.00 :	  4705e2:       5b                      pop    %rbx
    0.00 :	  4705e3:       41 5c                   pop    %r12
    0.00 :	  4705e5:       41 5d                   pop    %r13
    0.00 :	  4705e7:       41 5e                   pop    %r14
    0.00 :	  4705e9:       41 5f                   pop    %r15
    0.00 :	  4705eb:       c9                      leaveq 
    0.00 :	  4705ec:       c3                      retq   
    0.00 :	  4705ed:       0f 1f 00                nopl   (%rax)
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
    0.00 :	  4705f0:       41 8d 45 07             lea    0x7(%r13),%eax
    0.00 :	  4705f4:       c6 45 d7 01             movb   $0x1,-0x29(%rbp)
    0.00 :	  4705f8:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4705fb:       48 98                   cltq   
    0.00 :	  4705fd:       48 8d 50 0f             lea    0xf(%rax),%rdx
    0.00 :	  470601:       e9 3b ff ff ff          jmpq   470541 <heap_form_minimal_tuple+0x61>
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
         :	                ereport(ERROR,
    0.00 :	  470606:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  470609:       b9 90 f6 7a 00          mov    $0x7af690,%ecx
    0.00 :	  47060e:       ba 8c 05 00 00          mov    $0x58c,%edx
    0.00 :	  470613:       be f4 f5 7a 00          mov    $0x7af5f4,%esi
    0.00 :	  470618:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  47061d:       e8 9e a4 30 00          callq  77aac0 <errstart>
    0.00 :	  470622:       84 c0                   test   %al,%al
    0.00 :	  470624:       74 2b                   je     470651 <heap_form_minimal_tuple+0x171>
    0.00 :	  470626:       44 89 ee                mov    %r13d,%esi
    0.00 :	  470629:       ba 80 06 00 00          mov    $0x680,%edx
    0.00 :	  47062e:       bf e0 f7 7a 00          mov    $0x7af7e0,%edi
    0.00 :	  470633:       31 c0                   xor    %eax,%eax
    0.00 :	  470635:       e8 66 c2 30 00          callq  77c8a0 <errmsg>
    0.00 :	  47063a:       bf 05 01 04 01          mov    $0x1040105,%edi
    0.00 :	  47063f:       89 c3                   mov    %eax,%ebx
    0.00 :	  470641:       e8 0a c7 30 00          callq  77cd50 <errcode>
    0.00 :	  470646:       89 de                   mov    %ebx,%esi
    0.00 :	  470648:       89 c7                   mov    %eax,%edi
    0.00 :	  47064a:       31 c0                   xor    %eax,%eax
    0.00 :	  47064c:       e8 8f 9f 30 00          callq  77a5e0 <errfinish>
    0.00 :	  470651:       e8 7a 8e ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1438
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1458
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1472
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbbb0 <ExecHashGetSkewBucket>:
         :	 *              or INVALID_SKEW_BUCKET_NO if the hashvalue is not
         :	 *              associated with any active skew bucket.
         :	 */
         :	int
         :	ExecHashGetSkewBucket(HashJoinTable hashtable, uint32 hashvalue)
         :	{
    0.00 :	  5bbbb0:       55                      push   %rbp
         :
         :	        /*
         :	         * Always return INVALID_SKEW_BUCKET_NO if not doing skew optimization (in
         :	         * particular, this happens after the initial batch is done).
         :	         */
         :	        if (!hashtable->skewEnabled)
    0.00 :	  5bbbb1:       80 7f 21 00             cmpb   $0x0,0x21(%rdi)
         :	 *              or INVALID_SKEW_BUCKET_NO if the hashvalue is not
         :	 *              associated with any active skew bucket.
         :	 */
         :	int
         :	ExecHashGetSkewBucket(HashJoinTable hashtable, uint32 hashvalue)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1438
   33.33 :	  5bbbb5:       48 89 e5                mov    %rsp,%rbp
         :
         :	        /*
         :	         * Always return INVALID_SKEW_BUCKET_NO if not doing skew optimization (in
         :	         * particular, this happens after the initial batch is done).
         :	         */
         :	        if (!hashtable->skewEnabled)
    0.00 :	  5bbbb8:       74 46                   je     5bbc00 <ExecHashGetSkewBucket+0x50>
         :	                return INVALID_SKEW_BUCKET_NO;
         :
         :	        /*
         :	         * Since skewBucketLen is a power of 2, we can do a modulo by ANDing.
         :	         */
         :	        bucket = hashvalue & (hashtable->skewBucketLen - 1);
    0.00 :	  5bbbba:       8b 47 30                mov    0x30(%rdi),%eax
    0.00 :	  5bbbbd:       89 f2                   mov    %esi,%edx
         :	        /*
         :	         * While we have not hit a hole in the hashtable and have not hit the
         :	         * desired bucket, we have collided with some other hash value, so try the
         :	         * next bucket location.
         :	         */
         :	        while (hashtable->skewBucket[bucket] != NULL &&
    0.00 :	  5bbbbf:       48 8b 4f 28             mov    0x28(%rdi),%rcx
         :	                return INVALID_SKEW_BUCKET_NO;
         :
         :	        /*
         :	         * Since skewBucketLen is a power of 2, we can do a modulo by ANDing.
         :	         */
         :	        bucket = hashvalue & (hashtable->skewBucketLen - 1);
    0.00 :	  5bbbc3:       44 8d 40 ff             lea    -0x1(%rax),%r8d
    0.00 :	  5bbbc7:       44 21 c2                and    %r8d,%edx
         :	        /*
         :	         * While we have not hit a hole in the hashtable and have not hit the
         :	         * desired bucket, we have collided with some other hash value, so try the
         :	         * next bucket location.
         :	         */
         :	        while (hashtable->skewBucket[bucket] != NULL &&
    0.00 :	  5bbbca:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bbbcd:       48 8b 04 c1             mov    (%rcx,%rax,8),%rax
    0.00 :	  5bbbd1:       48 85 c0                test   %rax,%rax
    0.00 :	  5bbbd4:       75 1c                   jne    5bbbf2 <ExecHashGetSkewBucket+0x42>
    0.00 :	  5bbbd6:       eb 28                   jmp    5bbc00 <ExecHashGetSkewBucket+0x50>
    0.00 :	  5bbbd8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbbdf:       00 
         :	                   hashtable->skewBucket[bucket]->hashvalue != hashvalue)
         :	                bucket = (bucket + 1) & (hashtable->skewBucketLen - 1);
    0.00 :	  5bbbe0:       83 c2 01                add    $0x1,%edx
    0.00 :	  5bbbe3:       44 21 c2                and    %r8d,%edx
         :	        /*
         :	         * While we have not hit a hole in the hashtable and have not hit the
         :	         * desired bucket, we have collided with some other hash value, so try the
         :	         * next bucket location.
         :	         */
         :	        while (hashtable->skewBucket[bucket] != NULL &&
    0.00 :	  5bbbe6:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bbbe9:       48 8b 04 c1             mov    (%rcx,%rax,8),%rax
    0.00 :	  5bbbed:       48 85 c0                test   %rax,%rax
    0.00 :	  5bbbf0:       74 0e                   je     5bbc00 <ExecHashGetSkewBucket+0x50>
    0.00 :	  5bbbf2:       39 30                   cmp    %esi,(%rax)
    0.00 :	  5bbbf4:       75 ea                   jne    5bbbe0 <ExecHashGetSkewBucket+0x30>
         :
         :	        /*
         :	         * There must not be any hashtable entry for this hash value.
         :	         */
         :	        return INVALID_SKEW_BUCKET_NO;
         :	}
    0.00 :	  5bbbf6:       89 d0                   mov    %edx,%eax
    0.00 :	  5bbbf8:       c9                      leaveq 
    0.00 :	  5bbbf9:       c3                      retq   
    0.00 :	  5bbbfa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * While we have not hit a hole in the hashtable and have not hit the
         :	         * desired bucket, we have collided with some other hash value, so try the
         :	         * next bucket location.
         :	         */
         :	        while (hashtable->skewBucket[bucket] != NULL &&
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1458
   33.33 :	  5bbc00:       ba ff ff ff ff          mov    $0xffffffff,%edx
         :
         :	        /*
         :	         * There must not be any hashtable entry for this hash value.
         :	         */
         :	        return INVALID_SKEW_BUCKET_NO;
         :	}
    0.00 :	  5bbc05:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1472
   33.33 :	  5bbc06:       89 d0                   mov    %edx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1723
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1723
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1732
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006983d0 <_mdfd_getseg>:
         :	 * EXTENSION_CREATE case.
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
    0.00 :	  6983d0:       55                      push   %rbp
    0.00 :	  6983d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6983d4:       41 57                   push   %r15
    0.00 :	  6983d6:       41 56                   push   %r14
    0.00 :	  6983d8:       41 55                   push   %r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1723
   33.33 :	  6983da:       41 54                   push   %r12
    0.00 :	  6983dc:       53                      push   %rbx
    0.00 :	  6983dd:       89 cb                   mov    %ecx,%ebx
    0.00 :	  6983df:       48 83 ec 18             sub    $0x18,%rsp
   33.33 :	  6983e3:       89 55 c8                mov    %edx,-0x38(%rbp)
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983e6:       44 89 c2                mov    %r8d,%edx
         :	 * EXTENSION_CREATE case.
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
    0.00 :	  6983e9:       48 89 7d d0             mov    %rdi,-0x30(%rbp)
    0.00 :	  6983ed:       89 75 cc                mov    %esi,-0x34(%rbp)
    0.00 :	  6983f0:       44 89 45 c4             mov    %r8d,-0x3c(%rbp)
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983f4:       e8 47 f5 ff ff          callq  697940 <mdopen>
         :	        BlockNumber targetseg;
         :	        BlockNumber nextsegno;
         :
         :	        if (!v)
    0.00 :	  6983f9:       48 85 c0                test   %rax,%rax
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983fc:       49 89 c4                mov    %rax,%r12
         :	        BlockNumber targetseg;
         :	        BlockNumber nextsegno;
         :
         :	        if (!v)
    0.00 :	  6983ff:       0f 84 d3 00 00 00       je     6984d8 <_mdfd_getseg+0x108>
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
    0.00 :	  698405:       44 8b 7d c8             mov    -0x38(%rbp),%r15d
    0.00 :	  698409:       41 c1 ef 11             shr    $0x11,%r15d
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  69840d:       45 85 ff                test   %r15d,%r15d
    0.00 :	  698410:       0f 84 c2 00 00 00       je     6984d8 <_mdfd_getseg+0x108>
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698416:       0f be db                movsbl %bl,%ebx
         :
         :	        if (!v)
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  698419:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  69841f:       41 be ff ff 01 00       mov    $0x1ffff,%r14d
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698425:       89 5d c0                mov    %ebx,-0x40(%rbp)
    0.00 :	  698428:       eb 1d                   jmp    698447 <_mdfd_getseg+0x77>
    0.00 :	  69842a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (v->mdfd_chain == NULL)
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
    0.00 :	  698430:       49 89 c4                mov    %rax,%r12
         :
         :	        if (!v)
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  698433:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  698437:       41 81 c6 00 00 02 00    add    $0x20000,%r14d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1732
   33.33 :	  69843e:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  698441:       0f 82 91 00 00 00       jb     6984d8 <_mdfd_getseg+0x108>
         :	        {
         :	                Assert(nextsegno == v->mdfd_segno + 1);
         :
         :	                if (v->mdfd_chain == NULL)
    0.00 :	  698447:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  69844c:       48 85 c0                test   %rax,%rax
    0.00 :	  69844f:       75 df                   jne    698430 <_mdfd_getseg+0x60>
         :	                         * active segment are of size RELSEG_SIZE; therefore, pad them out
         :	                         * with zeroes if needed.  (This only matters if caller is
         :	                         * extending the relation discontiguously, but that can happen in
         :	                         * hash indexes.)
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
    0.00 :	  698451:       83 7d c4 02             cmpl   $0x2,-0x3c(%rbp)
    0.00 :	  698455:       74 0d                   je     698464 <_mdfd_getseg+0x94>
    0.00 :	  698457:       80 3d 0a 0d 4e 00 00    cmpb   $0x0,0x4e0d0a(%rip)        # b79168 <InRecovery>
    0.00 :	  69845e:       0f 84 8c 00 00 00       je     6984f0 <_mdfd_getseg+0x120>
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
    0.00 :	  698464:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698467:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  69846b:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  69846e:       e8 9d f7 ff ff          callq  697c10 <_mdnblocks>
    0.00 :	  698473:       3d ff ff 01 00          cmp    $0x1ffff,%eax
    0.00 :	  698478:       76 7e                   jbe    6984f8 <_mdfd_getseg+0x128>
         :	                                        mdextend(reln, forknum,
         :	                                                         nextsegno * ((BlockNumber) RELSEG_SIZE) - 1,
         :	                                                         zerobuf, skipFsync);
         :	                                        pfree(zerobuf);
         :	                                }
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, +nextsegno, O_CREAT);
    0.00 :	  69847a:       b9 40 00 00 00          mov    $0x40,%ecx
         :	                        }
         :	                        else
         :	                        {
         :	                                /* We won't create segment if not existent */
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, nextsegno, 0);
    0.00 :	  69847f:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698482:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  698486:       44 89 ea                mov    %r13d,%edx
    0.00 :	  698489:       e8 72 f8 ff ff          callq  697d00 <_mdfd_openseg>
    0.00 :	  69848e:       49 89 44 24 08          mov    %rax,0x8(%r12)
         :	                        }
         :	                        if (v->mdfd_chain == NULL)
    0.00 :	  698493:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  698498:       4d 85 e4                test   %r12,%r12
    0.00 :	  69849b:       75 96                   jne    698433 <_mdfd_getseg+0x63>
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
    0.00 :	  69849d:       83 7d c4 01             cmpl   $0x1,-0x3c(%rbp)
    0.00 :	  6984a1:       75 0a                   jne    6984ad <_mdfd_getseg+0xdd>
    0.00 :	  6984a3:       e8 18 18 dd ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  6984a8:       83 38 02                cmpl   $0x2,(%rax)
    0.00 :	  6984ab:       74 2b                   je     6984d8 <_mdfd_getseg+0x108>
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
    0.00 :	  6984ad:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6984b0:       b9 72 e3 8a 00          mov    $0x8ae372,%ecx
    0.00 :	  6984b5:       ba f3 06 00 00          mov    $0x6f3,%edx
    0.00 :	  6984ba:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  6984bf:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6984c4:       e8 f7 25 0e 00          callq  77aac0 <errstart>
    0.00 :	  6984c9:       84 c0                   test   %al,%al
    0.00 :	  6984cb:       75 5b                   jne    698528 <_mdfd_getseg+0x158>
    0.00 :	  6984cd:       e8 fe 0f dd ff          callq  4694d0 <abort@plt>
    0.00 :	  6984d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                v = v->mdfd_chain;
         :	        }
         :	        return v;
         :	}
    0.00 :	  6984d8:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  6984dc:       4c 89 e0                mov    %r12,%rax
    0.00 :	  6984df:       5b                      pop    %rbx
    0.00 :	  6984e0:       41 5c                   pop    %r12
    0.00 :	  6984e2:       41 5d                   pop    %r13
    0.00 :	  6984e4:       41 5e                   pop    %r14
    0.00 :	  6984e6:       41 5f                   pop    %r15
    0.00 :	  6984e8:       c9                      leaveq 
    0.00 :	  6984e9:       c3                      retq   
    0.00 :	  6984ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, +nextsegno, O_CREAT);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* We won't create segment if not existent */
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, nextsegno, 0);
    0.00 :	  6984f0:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6984f2:       eb 8b                   jmp    69847f <_mdfd_getseg+0xaf>
    0.00 :	  6984f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
    0.00 :	  6984f8:       bf 00 20 00 00          mov    $0x2000,%edi
    0.00 :	  6984fd:       e8 6e 0a 10 00          callq  798f70 <palloc0>
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698502:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  698506:       44 8b 45 c0             mov    -0x40(%rbp),%r8d
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
    0.00 :	  69850a:       48 89 c3                mov    %rax,%rbx
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  69850d:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698510:       48 89 c1                mov    %rax,%rcx
    0.00 :	  698513:       44 89 f2                mov    %r14d,%edx
    0.00 :	  698516:       e8 35 fc ff ff          callq  698150 <mdextend>
         :	                                                         nextsegno * ((BlockNumber) RELSEG_SIZE) - 1,
         :	                                                         zerobuf, skipFsync);
         :	                                        pfree(zerobuf);
    0.00 :	  69851b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  69851e:       e8 5d 06 10 00          callq  798b80 <pfree>
    0.00 :	  698523:       e9 52 ff ff ff          jmpq   69847a <_mdfd_getseg+0xaa>
         :	                        if (v->mdfd_chain == NULL)
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
    0.00 :	  698528:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  69852b:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  69852f:       44 89 ea                mov    %r13d,%edx
    0.00 :	  698532:       e8 59 f7 ff ff          callq  697c90 <_mdfd_segpath>
    0.00 :	  698537:       8b 55 c8                mov    -0x38(%rbp),%edx
    0.00 :	  69853a:       48 89 c6                mov    %rax,%rsi
    0.00 :	  69853d:       bf b0 e1 8a 00          mov    $0x8ae1b0,%edi
    0.00 :	  698542:       31 c0                   xor    %eax,%eax
    0.00 :	  698544:       e8 57 43 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698549:       89 c3                   mov    %eax,%ebx
    0.00 :	  69854b:       e8 a0 45 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  698550:       89 de                   mov    %ebx,%esi
    0.00 :	  698552:       89 c7                   mov    %eax,%edi
    0.00 :	  698554:       31 c0                   xor    %eax,%eax
    0.00 :	  698556:       e8 85 20 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69855b:       e9 6d ff ff ff          jmpq   6984cd <_mdfd_getseg+0xfd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:1307
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000783ac0 <hash_seq_search>:
         :	                register_seq_scan(hashp);
         :	}
         :
         :	void *
         :	hash_seq_search(HASH_SEQ_STATUS *status)
         :	{
    0.00 :	  783ac0:       55                      push   %rbp
         :	        long            segment_ndx;
         :	        HASHSEGMENT segp;
         :	        uint32          curBucket;
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
    0.00 :	  783ac1:       48 8b 57 10             mov    0x10(%rdi),%rdx
         :	                register_seq_scan(hashp);
         :	}
         :
         :	void *
         :	hash_seq_search(HASH_SEQ_STATUS *status)
         :	{
    0.00 :	  783ac5:       48 89 e5                mov    %rsp,%rbp
         :	        long            segment_ndx;
         :	        HASHSEGMENT segp;
         :	        uint32          curBucket;
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
    0.00 :	  783ac8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  783acb:       74 1b                   je     783ae8 <hash_seq_search+0x28>
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
    0.00 :	  783acd:       48 8b 02                mov    (%rdx),%rax
         :	                if (status->curEntry == NULL)   /* end of this bucket */
    0.00 :	  783ad0:       48 85 c0                test   %rax,%rax
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
    0.00 :	  783ad3:       48 89 47 10             mov    %rax,0x10(%rdi)
         :	                if (status->curEntry == NULL)   /* end of this bucket */
    0.00 :	  783ad7:       0f 84 8b 00 00 00       je     783b68 <hash_seq_search+0xa8>
         :	                        ++status->curBucket;
         :	                return (void *) ELEMENTKEY(curElem);
    0.00 :	  783add:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783ae1:       c9                      leaveq 
    0.00 :	  783ae2:       c3                      retq   
    0.00 :	  783ae3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
         :	        hashp = status->hashp;
    0.00 :	  783ae8:       4c 8b 0f                mov    (%rdi),%r9
         :	        }
         :
         :	        /*
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
    0.00 :	  783aeb:       8b 77 08                mov    0x8(%rdi),%esi
         :	        hashp = status->hashp;
         :	        hctl = hashp->hctl;
         :	        ssize = hashp->ssize;
         :	        max_bucket = hctl->max_bucket;
    0.00 :	  783aee:       49 8b 01                mov    (%r9),%rax
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
         :	        hashp = status->hashp;
         :	        hctl = hashp->hctl;
         :	        ssize = hashp->ssize;
    0.00 :	  783af1:       4d 8b 59 50             mov    0x50(%r9),%r11
         :	        max_bucket = hctl->max_bucket;
    0.00 :	  783af5:       44 8b 50 28             mov    0x28(%rax),%r10d
         :
         :	        if (curBucket > max_bucket)
    0.00 :	  783af9:       44 39 d6                cmp    %r10d,%esi
    0.00 :	  783afc:       77 7d                   ja     783b7b <hash_seq_search+0xbb>
         :	        }
         :
         :	        /*
         :	         * first find the right segment in the table directory.
         :	         */
         :	        segment_num = curBucket >> hashp->sshift;
    0.00 :	  783afe:       41 8b 49 58             mov    0x58(%r9),%ecx
    0.00 :	  783b02:       89 f0                   mov    %esi,%eax
         :	        segment_ndx = MOD(curBucket, ssize);
    0.00 :	  783b04:       89 f2                   mov    %esi,%edx
         :	        }
         :
         :	        /*
         :	         * first find the right segment in the table directory.
         :	         */
         :	        segment_num = curBucket >> hashp->sshift;
    0.00 :	  783b06:       d3 e8                   shr    %cl,%eax
    0.00 :	  783b08:       41 89 c0                mov    %eax,%r8d
         :	        segment_ndx = MOD(curBucket, ssize);
    0.00 :	  783b0b:       49 8d 43 ff             lea    -0x1(%r11),%rax
    0.00 :	  783b0f:       21 c2                   and    %eax,%edx
         :
         :	        segp = hashp->dir[segment_num];
    0.00 :	  783b11:       49 8b 41 08             mov    0x8(%r9),%rax
    0.00 :	  783b15:       4e 8b 0c c0             mov    (%rax,%r8,8),%r9
    0.00 :	  783b19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * Pick up the first item in this bucket's chain.  If chain is not empty
         :	         * we can begin searching it.  Otherwise we have to advance to find the
         :	         * next nonempty bucket.  We try to optimize that case since searching a
         :	         * near-empty hashtable has to iterate this loop a lot.
         :	         */
         :	        while ((curElem = segp[segment_ndx]) == NULL)
    0.00 :	  783b20:       49 8b 0c d1             mov    (%r9,%rdx,8),%rcx
    0.00 :	  783b24:       48 85 c9                test   %rcx,%rcx
    0.00 :	  783b27:       75 24                   jne    783b4d <hash_seq_search+0x8d>
         :	        {
         :	                /* empty bucket, advance to next */
         :	                if (++curBucket > max_bucket)
    0.00 :	  783b29:       83 c6 01                add    $0x1,%esi
    0.00 :	  783b2c:       41 39 f2                cmp    %esi,%r10d
    0.00 :	  783b2f:       72 47                   jb     783b78 <hash_seq_search+0xb8>
         :	                {
         :	                        status->curBucket = curBucket;
         :	                        hash_seq_term(status);
         :	                        return NULL;            /* search is done */
         :	                }
         :	                if (++segment_ndx >= ssize)
    0.00 :	  783b31:       48 83 c2 01             add    $0x1,%rdx
    0.00 :	  783b35:       49 39 d3                cmp    %rdx,%r11
    0.00 :	  783b38:       7f e6                   jg     783b20 <hash_seq_search+0x60>
         :	                {
         :	                        segment_num++;
    0.00 :	  783b3a:       49 83 c0 01             add    $0x1,%r8
         :	                        segment_ndx = 0;
         :	                        segp = hashp->dir[segment_num];
    0.00 :	  783b3e:       31 d2                   xor    %edx,%edx
    0.00 :	  783b40:       4e 8b 0c c0             mov    (%rax,%r8,8),%r9
         :	         * Pick up the first item in this bucket's chain.  If chain is not empty
         :	         * we can begin searching it.  Otherwise we have to advance to find the
         :	         * next nonempty bucket.  We try to optimize that case since searching a
         :	         * near-empty hashtable has to iterate this loop a lot.
         :	         */
         :	        while ((curElem = segp[segment_ndx]) == NULL)
    0.00 :	  783b44:       49 8b 0c d1             mov    (%r9,%rdx,8),%rcx
    0.00 :	  783b48:       48 85 c9                test   %rcx,%rcx
    0.00 :	  783b4b:       74 dc                   je     783b29 <hash_seq_search+0x69>
         :	                        segp = hashp->dir[segment_num];
         :	                }
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
    0.00 :	  783b4d:       48 8b 01                mov    (%rcx),%rax
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:1307
  100.00 :	  783b50:       48 83 f8 01             cmp    $0x1,%rax
         :	                        segp = hashp->dir[segment_num];
         :	                }
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
    0.00 :	  783b54:       48 89 47 10             mov    %rax,0x10(%rdi)
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
    0.00 :	  783b58:       48 8d 41 10             lea    0x10(%rcx),%rax
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
    0.00 :	  783b5c:       83 d6 00                adc    $0x0,%esi
         :	        status->curBucket = curBucket;
    0.00 :	  783b5f:       89 77 08                mov    %esi,0x8(%rdi)
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783b62:       c9                      leaveq 
    0.00 :	  783b63:       c3                      retq   
    0.00 :	  783b64:       0f 1f 40 00             nopl   0x0(%rax)
         :	        if ((curElem = status->curEntry) != NULL)
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
         :	                if (status->curEntry == NULL)   /* end of this bucket */
         :	                        ++status->curBucket;
    0.00 :	  783b68:       83 47 08 01             addl   $0x1,0x8(%rdi)
    0.00 :	  783b6c:       e9 6c ff ff ff          jmpq   783add <hash_seq_search+0x1d>
    0.00 :	  783b71:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        while ((curElem = segp[segment_ndx]) == NULL)
         :	        {
         :	                /* empty bucket, advance to next */
         :	                if (++curBucket > max_bucket)
         :	                {
         :	                        status->curBucket = curBucket;
    0.00 :	  783b78:       89 77 08                mov    %esi,0x8(%rdi)
         :	                        hash_seq_term(status);
    0.00 :	  783b7b:       e8 a0 fe ff ff          callq  783a20 <hash_seq_term>
    0.00 :	  783b80:       31 c0                   xor    %eax,%eax
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783b82:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:816
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007846a0 <hash_search>:
         :	void *
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
    0.00 :	  7846a0:       55                      push   %rbp
    0.00 :	  7846a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7846a4:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   33.33 :	  7846a8:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7846ac:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7846af:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7846b3:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7846b7:       49 89 f5                mov    %rsi,%r13
    0.00 :	  7846ba:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  7846be:       41 89 d6                mov    %edx,%r14d
    0.00 :	  7846c1:       49 89 cc                mov    %rcx,%r12
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846c4:       48 8b 77 48             mov    0x48(%rdi),%rsi
    0.00 :	  7846c8:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7846cb:       ff 53 10                callq  *0x10(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   33.33 :	  7846ce:       4d 89 e0                mov    %r12,%r8
    0.00 :	  7846d1:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  7846d4:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7846d7:       48 89 df                mov    %rbx,%rdi
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:816
   33.33 :	  7846da:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7846df:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7846e3:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  7846e8:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846ed:       89 c2                   mov    %eax,%edx
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
    0.00 :	  7846ef:       c9                      leaveq 
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846f0:       e9 5b f9 ff ff          jmpq   784050 <hash_search_with_hash_value>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   66.67 ??:0
   33.33 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000cd5c0 <__read>:
    0.00 :	   cd5c0:       83 3d ed a0 2a 00 00    cmpl   $0x0,0x2aa0ed(%rip)        # 3776b4 <__libc_multiple_threads>
   66.67 :	   cd5c7:       75 10                   jne    cd5d9 <__read_nocancel+0x10>
         :
         :	00000000000cd5c9 <__read_nocancel>:
    0.00 :	   cd5c9:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5ce:       0f 05                   syscall 
   33.33 :	   cd5d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd5d6:       73 31                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd5d8:       c3                      retq   
    0.00 :	   cd5d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   cd5dd:       e8 4e ac 01 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   cd5e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   cd5e6:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5eb:       0f 05                   syscall 
    0.00 :	   cd5ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   cd5f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   cd5f4:       e8 97 ac 01 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   cd5f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   cd5fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   cd600:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd606:       73 01                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd608:       c3                      retq   
    0.00 :	   cd609:       48 8b 0d 28 48 2a 00    mov    0x2a4828(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   cd610:       31 d2                   xor    %edx,%edx
    0.00 :	   cd612:       48 29 c2                sub    %rax,%rdx
    0.00 :	   cd615:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   cd618:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   cd61c:       eb ea                   jmp    cd608 <__read_nocancel+0x3f>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   66.67 ??:0
   33.33 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000d1e50 <posix_fadvise>:
   33.33 :	   d1e50:       4c 63 d1                movslq %ecx,%r10
    0.00 :	   d1e53:       48 63 ff                movslq %edi,%rdi
    0.00 :	   d1e56:       b8 dd 00 00 00          mov    $0xdd,%eax
    0.00 :	   d1e5b:       0f 05                   syscall 
   66.67 :	   d1e5d:       89 c1                   mov    %eax,%ecx
    0.00 :	   d1e5f:       89 c2                   mov    %eax,%edx
    0.00 :	   d1e61:       31 c0                   xor    %eax,%eax
    0.00 :	   d1e63:       f7 da                   neg    %edx
    0.00 :	   d1e65:       81 f9 00 f0 ff ff       cmp    $0xfffff000,%ecx
    0.00 :	   d1e6b:       0f 47 c2                cmova  %edx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
----------------------------------------------

   33.33 ??:0
   33.33 ??:0
   33.33 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000700 <igb_update_stats>:
    0.00 :	     700:       53                      push   %rbx
    0.00 :	     731:       48 89 fb 48 83          mov    $0x2b8,%edi
    0.00 :	     736:       ec 10 66                xor    %r10d,%r10d
    0.00 :	     739:       83 bf f8                xor    %r9d,%r9d
    0.00 :	     73c:       03 00                   test   %edi,%edi
    0.00 :	     73e:       00 00                   jle    78c <dma_unmap_page+0x75c>
    0.00 :	     740:       48 8b 87                mov    %rbx,%r8
    0.00 :	     743:       a0 04                   xor    %edi,%edi
    0.00 :	     745:       00 00 74                xor    %r10d,%r10d
    0.00 :	     748:       09 83 b8                xor    %r9d,%r9d
    0.00 :	     74b:       88 00 00 00 01          mov    $0xc030,%ecx
    0.00 :	     750:       74 0e 48                mov    %rcx,%rax
    0.00 :	     753:       83 c4 10 5b c3 0f 1f    add    0x570(%rbx),%rax
    0.00 :	     75a:       84 00                   mov    (%rax),%eax
    0.00 :	     75c:       00 00                   test   %eax,%eax
    0.00 :	     75e:       00 00 8b bf b8 02 00    mov    0x2c0(%r8),%rdx
    0.00 :	     765:       00 45                   je     771 <dma_unmap_page+0x741>
    0.00 :	     767:       31 d2                   mov    %eax,%eax
    0.00 :	     769:       45 31 c9 85             add    %rax,0x68(%rdx)
    0.00 :	     76d:       ff 7e 4c 49             add    %rax,0x70(%rsi)
    0.00 :	     771:       89 d8 31 ff             add    0x60(%rdx),%r10
    0.00 :	     775:       45 31 d2 45             add    0x58(%rdx),%r9
    0.00 :	     779:       31 c9 b9                add    $0x1,%edi
    0.00 :	     77c:       30 c0 00 00             add    $0x40,%rcx
    0.00 :	     780:       48 89 c8 48             add    $0x8,%r8
    0.00 :	     784:       03 83 70 05 00 00       cmp    %edi,0x2b8(%rbx)
    0.00 :	     78a:       8b 00                   jg     750 <dma_unmap_page+0x720>
    0.00 :	     78c:       85 c0 49 8b             mov    %r10,0x10(%rsi)
    0.00 :	     790:       90 c0 02                mov    %r9,(%rsi)
    0.00 :	     793:       00 00                   xor    %edi,%edi
    0.00 :	     795:       74 0a 89 c0 48 01 42    mov    0x234(%rbx),%r8d
    0.00 :	     79c:       68 48                   xor    %ecx,%ecx
    0.00 :	     79e:       01 46 70                test   %r8d,%r8d
    0.00 :	     7a1:       4c 03                   jle    7c9 <dma_unmap_page+0x799>
    0.00 :	     7a3:       52 60                   xor    %edi,%edi
    0.00 :	     7a5:       4c 03                   xor    %ecx,%ecx
    0.00 :	     7a7:       4a 58                   xor    %edx,%edx
    0.00 :	     7a9:       83 c7 01 48 83 c1 40    nopl   0x0(%rax)
    0.00 :	     7b0:       49 83 c0 08 39 bb b8    mov    0x238(%rbx,%rdx,8),%rax
    0.00 :	     7b7:       02 
    0.00 :	     7b8:       00 00 7f c4             add    $0x1,%rdx
    0.00 :	     7bc:       4c 89 56 10             add    0x58(%rax),%rdi
    0.00 :	     7c0:       4c 89 0e 31             add    0x50(%rax),%rcx
    0.00 :	     7c4:       ff 44 8b                cmp    %edx,%r8d
    0.00 :	     7c7:       83 34                   jg     7b0 <dma_unmap_page+0x780>
    0.00 :	     7c9:       02 00 00 31             mov    %rdi,0x18(%rsi)
    0.00 :	     7cd:       c9 45 85 c0             mov    %rcx,0x8(%rsi)
    0.00 :	     7d1:       7e 26 31 ff 31 c9 31    mov    0x570(%rbx),%rax
    0.00 :	     7d8:       d2 0f 1f 80 00 00 00    mov    0x9c8(%rbx),%rdx
    0.00 :	     7df:       00 48 8b 84 d3 38       add    $0x4000,%rax
    0.00 :	     7e5:       02 00                   mov    (%rax),%eax
    0.00 :	     7e7:       00 48                   mov    %eax,%eax
    0.00 :	     7e9:       83 c2 01                add    %rdx,%rax
    0.00 :	     7ec:       48 03 78 58 48 03 48    mov    0xa98(%rbx),%rdx
    0.00 :	     7f3:       50 41 39 d0 7f e7 48    mov    %rax,0x9c8(%rbx)
    0.00 :	     7fa:       89 7e 18 48 89 4e 08    mov    0x570(%rbx),%rax
    0.00 :	     801:       48 8b 83 70 05 00       add    $0x4074,%rax
    0.00 :	     807:       00 48                   mov    (%rax),%eax
    0.00 :	     809:       8b 93                   mov    %eax,%eax
    0.00 :	     80b:       c8 09 00                add    %rdx,%rax
    0.00 :	     80e:       00 48 05 00 40 00 00    mov    0xab8(%rbx),%rdx
    0.00 :	     815:       8b 00 89 c0 48 01 d0    mov    %rax,0xa98(%rbx)
    0.00 :	     81c:       48 8b 93 98 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     823:       48 89 83 c8 09 00       add    $0x4088,%rax
    0.00 :	     829:       00 48                   mov    (%rax),%eax
    0.00 :	     82b:       8b 83                   mov    %eax,%eax
    0.00 :	     82d:       70 05 00                add    %rdx,%rax
    0.00 :	     830:       00 48 05 74 40 00 00    mov    %rax,0xab8(%rbx)
    0.00 :	     837:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     83e:       48 8b 93 b8 0a 00       add    $0x408c,%rax
    0.00 :	     844:       00 48                   mov    (%rax),%eax
    0.00 :	     846:       89 83 98 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     84d:       8b 83 70 05 00 00 48    mov    0xaa0(%rbx),%rdx
    0.00 :	     854:       05 88 40 00 00 8b       add    $0x4078,%rax
    0.00 :	     85a:       00 89                   mov    (%rax),%eax
    0.00 :	     85c:       c0 48                   mov    %eax,%eax
    0.00 :	     85e:       01 d0 48                add    %rdx,%rax
    0.00 :	     861:       89 83 b8 0a 00 00 48    mov    0xaa8(%rbx),%rdx
    0.00 :	     868:       8b 83 70 05 00 00 48    mov    %rax,0xaa0(%rbx)
    0.00 :	     86f:       05 8c 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     876:       48 8b 83 70 05 00       add    $0x407c,%rax
    0.00 :	     87c:       00 48                   mov    (%rax),%eax
    0.00 :	     87e:       8b 93                   mov    %eax,%eax
    0.00 :	     880:       a0 0a 00                add    %rdx,%rax
    0.00 :	     883:       00 48 05 78 40 00 00    mov    0xae0(%rbx),%rdx
    0.00 :	     88a:       8b 00 89 c0 48 01 d0    mov    %rax,0xaa8(%rbx)
    0.00 :	     891:       48 8b 93 a8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     898:       48 89 83 a0 0a 00       add    $0x40ac,%rax
    0.00 :	     89e:       00 48                   mov    (%rax),%eax
    0.00 :	     8a0:       8b 83                   mov    %eax,%eax
    0.00 :	     8a2:       70 05 00                add    %rdx,%rax
    0.00 :	     8a5:       00 48 05 7c 40 00 00    mov    0xa68(%rbx),%rdx
    0.00 :	     8ac:       8b 00 89 c0 48 01 d0    mov    %rax,0xae0(%rbx)
    0.00 :	     8b3:       48 8b 93 e0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8ba:       48 89 83 a8 0a 00       add    $0x405c,%rax
    0.00 :	     8c0:       00 48                   mov    (%rax),%eax
    0.00 :	     8c2:       8b 83                   mov    %eax,%eax
    0.00 :	     8c4:       70 05 00                add    %rdx,%rax
    0.00 :	     8c7:       00 48 05 ac 40 00 00    mov    0xa70(%rbx),%rdx
    0.00 :	     8ce:       8b 00 89 c0 48 01 d0    mov    %rax,0xa68(%rbx)
    0.00 :	     8d5:       48 8b 93 68 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8dc:       48 89 83 e0 0a 00       add    $0x4060,%rax
    0.00 :	     8e2:       00 48                   mov    (%rax),%eax
    0.00 :	     8e4:       8b 83                   mov    %eax,%eax
    0.00 :	     8e6:       70 05 00                add    %rdx,%rax
    0.00 :	     8e9:       00 48 05 5c 40 00 00    mov    0xa78(%rbx),%rdx
    0.00 :	     8f0:       8b 00 89 c0 48 01 d0    mov    %rax,0xa70(%rbx)
    0.00 :	     8f7:       48 8b 93 70 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8fe:       48 89 83 68 0a 00       add    $0x4064,%rax
    0.00 :	     904:       00 48                   mov    (%rax),%eax
    0.00 :	     906:       8b 83                   mov    %eax,%eax
    0.00 :	     908:       70 05 00                add    %rdx,%rax
    0.00 :	     90b:       00 48 05 60 40 00 00    mov    0xa80(%rbx),%rdx
    0.00 :	     912:       8b 00 89 c0 48 01 d0    mov    %rax,0xa78(%rbx)
    0.00 :	     919:       48 8b 93 78 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     920:       48 89 83 70 0a 00       add    $0x4068,%rax
    0.00 :	     926:       00 48                   mov    (%rax),%eax
    0.00 :	     928:       8b 83                   mov    %eax,%eax
    0.00 :	     92a:       70 05 00                add    %rdx,%rax
    0.00 :	     92d:       00 48 05 64 40 00 00    mov    0xa88(%rbx),%rdx
    0.00 :	     934:       8b 00 89 c0 48 01 d0    mov    %rax,0xa80(%rbx)
    0.00 :	     93b:       48 8b 93 80 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     942:       48 89 83 78 0a 00       add    $0x406c,%rax
    0.00 :	     948:       00 48                   mov    (%rax),%eax
    0.00 :	     94a:       8b 83                   mov    %eax,%eax
    0.00 :	     94c:       70 05 00                add    %rdx,%rax
    0.00 :	     94f:       00 48 05 68 40 00 00    mov    0xa90(%rbx),%rdx
    0.00 :	     956:       8b 00 89 c0 48 01 d0    mov    %rax,0xa88(%rbx)
    0.00 :	     95d:       48 8b 93 88 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     964:       48 89 83 80 0a 00       add    $0x4070,%rax
    0.00 :	     96a:       00 48                   mov    (%rax),%eax
    0.00 :	     96c:       8b 83                   mov    %eax,%eax
    0.00 :	     96e:       70 05 00                add    %rdx,%rax
    0.00 :	     971:       00 48 05 6c 40 00 00    mov    0x9d8(%rbx),%rdx
    0.00 :	     978:       8b 00 89 c0 48 01 d0    mov    %rax,0xa90(%rbx)
    0.00 :	     97f:       48 8b 93 90 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     986:       48 89 83 88 0a 00       add    $0x4008,%rax
    0.00 :	     98c:       00 48                   mov    (%rax),%eax
    0.00 :	     98e:       8b 83                   mov    %eax,%eax
    0.00 :	     990:       70 05 00                add    %rdx,%rax
    0.00 :	     993:       00 48 05 70 40 00 00    mov    0xa28(%rbx),%rdx
    0.00 :	     99a:       8b 00 89 c0 48 01 d0    mov    %rax,0x9d8(%rbx)
    0.00 :	     9a1:       48 8b 93 d8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     9a8:       48 89 83 90 0a 00       add    $0x4038,%rax
    0.00 :	     9ae:       00 48                   mov    (%rax),%eax
    0.00 :	     9b0:       8b 83                   mov    %eax,%eax
    0.00 :	     9b2:       70 05 00                add    %rdx,%rax
    0.00 :	     9b5:       00 48 05 08 40 00 00    mov    %rax,0xa28(%rbx)
    0.00 :	     9bc:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     9c3:       48 8b 93 28 0a 00       add    $0x4010,%rax
    0.00 :	     9c9:       00 48                   mov    (%rax),%eax
    0.00 :	     9cb:       89 83                   mov    %eax,%eax
    0.00 :	     9cd:       d8 09 00 00 48 8b 83    add    %rax,0x9e8(%rbx)
    0.00 :	     9d4:       70 05 00 00             add    %rax,0x70(%rsi)
    0.00 :	     9d8:       48 05 38 40 00 00 8b    mov    0x570(%rbx),%rax
    0.00 :	     9df:       00 89 c0 48 01 d0 48    mov    0x9f0(%rbx),%rdx
    0.00 :	     9e6:       89 83 28 0a 00 00       add    $0x4014,%rax
    0.00 :	     9ec:       48 8b                   mov    (%rax),%eax
    0.00 :	     9ee:       83 70                   mov    %eax,%eax
    0.00 :	     9f0:       05 00 00                add    %rdx,%rax
    0.00 :	     9f3:       48 05 10 40 00 00 8b    mov    0x9f8(%rbx),%rdx
    0.00 :	     9fa:       00 89 c0 48 01 83 e8    mov    %rax,0x9f0(%rbx)
    0.00 :	     a01:       09 00 00 48 01 46 70    mov    0x570(%rbx),%rax
    0.00 :	     a08:       48 8b 83 70 05 00       add    $0x4018,%rax
    0.00 :	     a0e:       00 48                   mov    (%rax),%eax
 ??:0
   33.33 :	     a10:       8b 93                   mov    %eax,%eax
    0.00 :	     a12:       f0 09 00                add    %rdx,%rax
    0.00 :	     a15:       00 48 05 14 40 00 00    mov    0xa00(%rbx),%rdx
    0.00 :	     a1c:       8b 00 89 c0 48 01 d0    mov    %rax,0x9f8(%rbx)
    0.00 :	     a23:       48 8b 93 f8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a2a:       48 89 83 f0 09 00       add    $0x401c,%rax
    0.00 :	     a30:       00 48                   mov    (%rax),%eax
    0.00 :	     a32:       8b 83                   mov    %eax,%eax
    0.00 :	     a34:       70 05 00                add    %rdx,%rax
    0.00 :	     a37:       00 48 05 18 40 00 00    mov    0xa08(%rbx),%rdx
    0.00 :	     a3e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa00(%rbx)
    0.00 :	     a45:       48 8b 93 00 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a4c:       48 89 83 f8 09 00       add    $0x4020,%rax
    0.00 :	     a52:       00 48                   mov    (%rax),%eax
    0.00 :	     a54:       8b 83                   mov    %eax,%eax
    0.00 :	     a56:       70 05 00                add    %rdx,%rax
    0.00 :	     a59:       00 48 05 1c 40 00 00    mov    0xa18(%rbx),%rdx
    0.00 :	     a60:       8b 00 89 c0 48 01 d0    mov    %rax,0xa08(%rbx)
    0.00 :	     a67:       48 8b 93 08 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a6e:       48 89 83 00 0a 00       add    $0x4030,%rax
    0.00 :	     a74:       00 48                   mov    (%rax),%eax
    0.00 :	     a76:       8b 83                   mov    %eax,%eax
    0.00 :	     a78:       70 05 00                add    %rdx,%rax
    0.00 :	     a7b:       00 48 05 20 40 00 00    mov    0xa38(%rbx),%rdx
    0.00 :	     a82:       8b 00 89 c0 48 01 d0    mov    %rax,0xa18(%rbx)
    0.00 :	     a89:       48 8b 93 18 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a90:       48 89 83 08 0a 00       add    $0x4040,%rax
    0.00 :	     a96:       00 48                   mov    (%rax),%eax
    0.00 :	     a98:       8b 83                   mov    %eax,%eax
    0.00 :	     a9a:       70 05 00                add    %rdx,%rax
    0.00 :	     a9d:       00 48 05 30 40 00 00    mov    0xa40(%rbx),%rdx
    0.00 :	     aa4:       8b 00 89 c0 48 01 d0    mov    %rax,0xa38(%rbx)
    0.00 :	     aab:       48 8b 93 38 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ab2:       48 89 83 18 0a 00       add    $0x4048,%rax
    0.00 :	     ab8:       00 48                   mov    (%rax),%eax
    0.00 :	     aba:       8b 83                   mov    %eax,%eax
    0.00 :	     abc:       70 05 00                add    %rdx,%rax
    0.00 :	     abf:       00 48 05 40 40 00 00    mov    0xa48(%rbx),%rdx
    0.00 :	     ac6:       8b 00 89 c0 48 01 d0    mov    %rax,0xa40(%rbx)
    0.00 :	     acd:       48 8b 93 40 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ad4:       48 89 83 38 0a 00       add    $0x404c,%rax
    0.00 :	     ada:       00 48                   mov    (%rax),%eax
    0.00 :	     adc:       8b 83                   mov    %eax,%eax
    0.00 :	     ade:       70 05 00                add    %rdx,%rax
    0.00 :	     ae1:       00 48 05 48 40 00 00    mov    0xa50(%rbx),%rdx
    0.00 :	     ae8:       8b 00 89 c0 48 01 d0    mov    %rax,0xa48(%rbx)
    0.00 :	     aef:       48 8b 93 48 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     af6:       48 89 83 40 0a 00       add    $0x4050,%rax
    0.00 :	     afc:       00 48                   mov    (%rax),%eax
    0.00 :	     afe:       8b 83                   mov    %eax,%eax
    0.00 :	     b00:       70 05 00                add    %rdx,%rax
    0.00 :	     b03:       00 48 05 4c 40 00 00    mov    0xa58(%rbx),%rdx
    0.00 :	     b0a:       8b 00 89 c0 48 01 d0    mov    %rax,0xa50(%rbx)
    0.00 :	     b11:       48 8b 93 50 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b18:       48 89 83 48 0a 00       add    $0x4054,%rax
    0.00 :	     b1e:       00 48                   mov    (%rax),%eax
    0.00 :	     b20:       8b 83                   mov    %eax,%eax
    0.00 :	     b22:       70 05 00                add    %rdx,%rax
    0.00 :	     b25:       00 48 05 50 40 00 00    mov    0xa60(%rbx),%rdx
    0.00 :	     b2c:       8b 00 89 c0 48 01 d0    mov    %rax,0xa58(%rbx)
    0.00 :	     b33:       48 8b 93 58 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b3a:       48 89 83 50 0a 00       add    $0x4058,%rax
    0.00 :	     b40:       00 48                   mov    (%rax),%eax
    0.00 :	     b42:       8b 83                   mov    %eax,%eax
    0.00 :	     b44:       70 05 00                add    %rdx,%rax
    0.00 :	     b47:       00 48 05 54 40 00 00    mov    0xab0(%rbx),%rdx
    0.00 :	     b4e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa60(%rbx)
    0.00 :	     b55:       48 8b 93 60 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b5c:       48 89 83 58 0a 00       add    $0x4080,%rax
    0.00 :	     b62:       00 48                   mov    (%rax),%eax
    0.00 :	     b64:       8b 83                   mov    %eax,%eax
    0.00 :	     b66:       70 05 00                add    %rdx,%rax
    0.00 :	     b69:       00 48 05 58 40 00 00    mov    0xac0(%rbx),%rdx
    0.00 :	     b70:       8b 00 89 c0 48 01 d0    mov    %rax,0xab0(%rbx)
    0.00 :	     b77:       48 8b 93 b0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b7e:       48 89 83 60 0a 00       add    $0x4090,%rax
    0.00 :	     b84:       00 48                   mov    (%rax),%eax
    0.00 :	     b86:       8b 83                   mov    %eax,%eax
    0.00 :	     b88:       70 05 00                add    %rdx,%rax
    0.00 :	     b8b:       00 48 05 80 40 00 00    mov    %rax,0xac0(%rbx)
    0.00 :	     b92:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     b99:       48 8b 93 c0 0a 00       add    $0x4094,%rax
    0.00 :	     b9f:       00 48                   mov    (%rax),%eax
    0.00 :	     ba1:       89 83 b0 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     ba8:       8b 83 70 05 00 00 48    mov    0xac8(%rbx),%rdx
    0.00 :	     baf:       05 90 40 00 00 8b       add    $0x40a0,%rax
    0.00 :	     bb5:       00 89                   mov    (%rax),%eax
    0.00 :	     bb7:       c0 48                   mov    %eax,%eax
    0.00 :	     bb9:       01 d0 48                add    %rdx,%rax
    0.00 :	     bbc:       89 83 c0 0a 00 00 48    mov    0xad0(%rbx),%rdx
    0.00 :	     bc3:       8b 83 70 05 00 00 48    mov    %rax,0xac8(%rbx)
    0.00 :	     bca:       05 94 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     bd1:       48 8b 83 70 05 00       add    $0x40a4,%rax
    0.00 :	     bd7:       00 48                   mov    (%rax),%eax
    0.00 :	     bd9:       8b 93                   mov    %eax,%eax
    0.00 :	     bdb:       c8 0a 00                add    %rdx,%rax
    0.00 :	     bde:       00 48 05 a0 40 00 00    mov    0xad8(%rbx),%rdx
    0.00 :	     be5:       8b 00 89 c0 48 01 d0    mov    %rax,0xad0(%rbx)
    0.00 :	     bec:       48 8b 93 d0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     bf3:       48 89 83 c8 0a 00       add    $0x40a8,%rax
    0.00 :	     bf9:       00 48                   mov    (%rax),%eax
    0.00 :	     bfb:       8b 83                   mov    %eax,%eax
    0.00 :	     bfd:       70 05 00                add    %rdx,%rax
    0.00 :	     c00:       00 48 05 a4 40 00 00    mov    0xae8(%rbx),%rdx
    0.00 :	     c07:       8b 00 89 c0 48 01 d0    mov    %rax,0xad8(%rbx)
    0.00 :	     c0e:       48 8b 93 d8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c15:       48 89 83 d0 0a 00       add    $0x40b0,%rax
    0.00 :	     c1b:       00 48                   mov    (%rax),%eax
   33.33 :	     c1d:       8b 83                   mov    %eax,%eax
    0.00 :	     c1f:       70 05 00                add    %rdx,%rax
    0.00 :	     c22:       00 48 05 a8 40 00 00    mov    0xb08(%rbx),%rdx
    0.00 :	     c29:       8b 00 89 c0 48 01 d0    mov    %rax,0xae8(%rbx)
    0.00 :	     c30:       48 8b 93 e8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c37:       48 89 83 d8 0a 00       add    $0x40c4,%rax
    0.00 :	     c3d:       00 48                   mov    (%rax),%eax
    0.00 :	     c3f:       8b 83                   mov    %eax,%eax
    0.00 :	     c41:       70 05 00                add    %rdx,%rax
    0.00 :	     c44:       00 48 05 b0 40 00 00    mov    0xb10(%rbx),%rdx
    0.00 :	     c4b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb08(%rbx)
    0.00 :	     c52:       48 8b 93 08 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c59:       48 89 83 e8 0a 00       add    $0x40cc,%rax
    0.00 :	     c5f:       00 48                   mov    (%rax),%eax
    0.00 :	     c61:       8b 83                   mov    %eax,%eax
    0.00 :	     c63:       70 05 00                add    %rdx,%rax
    0.00 :	     c66:       00 48 05 c4 40 00 00    mov    0xb18(%rbx),%rdx
    0.00 :	     c6d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb10(%rbx)
    0.00 :	     c74:       48 8b 93 10 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c7b:       48 89 83 08 0b 00       add    $0x40d0,%rax
    0.00 :	     c81:       00 48                   mov    (%rax),%eax
    0.00 :	     c83:       8b 83                   mov    %eax,%eax
    0.00 :	     c85:       70 05 00                add    %rdx,%rax
    0.00 :	     c88:       00 48 05 cc 40 00 00    mov    0xb28(%rbx),%rdx
    0.00 :	     c8f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb18(%rbx)
    0.00 :	     c96:       48 8b 93 18 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c9d:       48 89 83 10 0b 00       add    $0x40d8,%rax
    0.00 :	     ca3:       00 48                   mov    (%rax),%eax
    0.00 :	     ca5:       8b 83                   mov    %eax,%eax
    0.00 :	     ca7:       70 05 00                add    %rdx,%rax
    0.00 :	     caa:       00 48 05 d0 40 00 00    mov    0xb30(%rbx),%rdx
    0.00 :	     cb1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb28(%rbx)
    0.00 :	     cb8:       48 8b 93 28 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     cbf:       48 89 83 18 0b 00       add    $0x40dc,%rax
    0.00 :	     cc5:       00 48                   mov    (%rax),%eax
    0.00 :	     cc7:       8b 83                   mov    %eax,%eax
    0.00 :	     cc9:       70 05 00                add    %rdx,%rax
    0.00 :	     ccc:       00 48 05 d8 40 00 00    mov    0xb38(%rbx),%rdx
    0.00 :	     cd3:       8b 00 89 c0 48 01 d0    mov    %rax,0xb30(%rbx)
    0.00 :	     cda:       48 8b 93 30 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ce1:       48 89 83 28 0b 00       add    $0x40e0,%rax
    0.00 :	     ce7:       00 48                   mov    (%rax),%eax
    0.00 :	     ce9:       8b 83                   mov    %eax,%eax
    0.00 :	     ceb:       70 05 00                add    %rdx,%rax
    0.00 :	     cee:       00 48 05 dc 40 00 00    mov    0xb40(%rbx),%rdx
    0.00 :	     cf5:       8b 00 89 c0 48 01 d0    mov    %rax,0xb38(%rbx)
    0.00 :	     cfc:       48 8b 93 38 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d03:       48 89 83 30 0b 00       add    $0x40e4,%rax
    0.00 :	     d09:       00 48                   mov    (%rax),%eax
    0.00 :	     d0b:       8b 83                   mov    %eax,%eax
    0.00 :	     d0d:       70 05 00                add    %rdx,%rax
    0.00 :	     d10:       00 48 05 e0 40 00 00    mov    0xb48(%rbx),%rdx
    0.00 :	     d17:       8b 00 89 c0 48 01 d0    mov    %rax,0xb40(%rbx)
    0.00 :	     d1e:       48 8b 93 40 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d25:       48 89 83 38 0b 00       add    $0x40e8,%rax
    0.00 :	     d2b:       00 48                   mov    (%rax),%eax
    0.00 :	     d2d:       8b 83                   mov    %eax,%eax
    0.00 :	     d2f:       70 05 00                add    %rdx,%rax
    0.00 :	     d32:       00 48 05 e4 40 00 00    mov    0xb50(%rbx),%rdx
    0.00 :	     d39:       8b 00 89 c0 48 01 d0    mov    %rax,0xb48(%rbx)
    0.00 :	     d40:       48 8b 93 48 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d47:       48 89 83 40 0b 00       add    $0x40ec,%rax
    0.00 :	     d4d:       00 48                   mov    (%rax),%eax
    0.00 :	     d4f:       8b 83                   mov    %eax,%eax
    0.00 :	     d51:       70 05 00                add    %rdx,%rax
    0.00 :	     d54:       00 48 05 e8 40 00 00    mov    0xb58(%rbx),%rdx
    0.00 :	     d5b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb50(%rbx)
    0.00 :	     d62:       48 8b 93 50 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d69:       48 89 83 48 0b 00       add    $0x40f0,%rax
    0.00 :	     d6f:       00 48                   mov    (%rax),%eax
    0.00 :	     d71:       8b 83                   mov    %eax,%eax
    0.00 :	     d73:       70 05 00                add    %rdx,%rax
    0.00 :	     d76:       00 48 05 ec 40 00 00    mov    0xb60(%rbx),%rdx
    0.00 :	     d7d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb58(%rbx)
    0.00 :	     d84:       48 8b 93 58 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d8b:       48 89 83 50 0b 00       add    $0x40f4,%rax
    0.00 :	     d91:       00 48                   mov    (%rax),%eax
    0.00 :	     d93:       8b 83                   mov    %eax,%eax
    0.00 :	     d95:       70 05 00                add    %rdx,%rax
    0.00 :	     d98:       00 48 05 f0 40 00 00    mov    0xb20(%rbx),%rdx
    0.00 :	     d9f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb60(%rbx)
    0.00 :	     da6:       48 8b 93 60 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dad:       48 89 83 58 0b 00       add    $0x40d4,%rax
    0.00 :	     db3:       00 48                   mov    (%rax),%eax
    0.00 :	     db5:       8b 83                   mov    %eax,%eax
    0.00 :	     db7:       70 05 00                add    %rdx,%rax
    0.00 :	     dba:       00 48 05 f4 40 00 00    mov    0xa10(%rbx),%rdx
    0.00 :	     dc1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb20(%rbx)
    0.00 :	     dc8:       48 8b 93 20 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dcf:       48 89 83 60 0b 00       add    $0x4028,%rax
    0.00 :	     dd5:       00 48                   mov    (%rax),%eax
    0.00 :	     dd7:       8b 83                   mov    %eax,%eax
    0.00 :	     dd9:       70 05 00                add    %rdx,%rax
    0.00 :	     ddc:       00 48 05 d4 40 00 00    mov    0x9d0(%rbx),%rdx
    0.00 :	     de3:       8b 00 89 c0 48 01 d0    mov    %rax,0xa10(%rbx)
    0.00 :	     dea:       48 8b 93 10 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     df1:       48 89 83 20 0b 00       add    $0x4004,%rax
    0.00 :	     df7:       00 48                   mov    (%rax),%eax
    0.00 :	     df9:       8b 83                   mov    %eax,%eax
    0.00 :	     dfb:       70 05 00                add    %rdx,%rax
    0.00 :	     dfe:       00 48 05 28 40 00 00    mov    %rax,0x9d0(%rbx)
    0.00 :	     e05:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     e0c:       48 8b 93 d0             add    $0x18,%rax
    0.00 :	     e10:       09 00                   mov    (%rax),%eax
    0.00 :	     e12:       00 48 89 83 10          test   $0xc00000,%eax
    0.00 :	     e17:       0a 00                   jne    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e19:       00 48 8b 83 70 05 00    mov    0x570(%rbx),%rax
    0.00 :	     e20:       00 48 05 04 40 00 00    mov    0x9e0(%rbx),%rdx
    0.00 :	     e27:       8b 00 89 c0 48 01       add    $0x400c,%rax
    0.00 :	     e2d:       d0 48                   mov    (%rax),%eax
    0.00 :	     e2f:       89 83                   mov    %eax,%eax
    0.00 :	     e31:       d0 09 00                add    %rdx,%rax
    0.00 :	     e34:       00 48 8b 83 70 05 00    mov    %rax,0x9e0(%rbx)
    0.00 :	     e3b:       00 48 83 c0 18 8b       mov    0x5e4(%rbx),%eax
    0.00 :	     e41:       00 a9 00                sub    $0x5,%eax
    0.00 :	     e44:       00 c0 00                cmp    $0x1,%eax
    0.00 :	     e47:       75 53                   jbe    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e49:       48 8b 83 70 05 00 00    mov    0x570(%rbx),%rdx
    0.00 :	     e50:       48 8b 93 e0 09 00 00    mov    0xa20(%rbx),%rax
    0.00 :	     e57:       48 05 0c 40 00 00 8b    add    $0x4034,%rdx
    0.00 :	     e5e:       00 89                   mov    (%rdx),%edx
    0.00 :	     e60:       c0 48                   mov    %edx,%edx
    0.00 :	     e62:       01 d0 48                add    %rax,%rdx
    0.00 :	     e65:       89 83 e0 09 00 00 8b    mov    %rdx,0xa20(%rbx)
    0.00 :	     e6c:       83 e4 05 00 00 83 e8    mov    0x570(%rbx),%rax
    0.00 :	     e73:       05 83 f8 01 76 23 48    mov    0xb68(%rbx),%rdx
    0.00 :	     e7a:       8b 93 70 05 00 00       add    $0x40f8,%rax
    0.00 :	     e80:       48 8b                   mov    (%rax),%eax
    0.00 :	     e82:       83 20                   mov    %eax,%eax
    0.00 :	     e84:       0a 00 00                add    %rdx,%rax
    0.00 :	     e87:       48 81 c2 34 40 00 00    mov    0xb70(%rbx),%rdx
    0.00 :	     e8e:       8b 12 89 d2 48 01 c2    mov    %rax,0xb68(%rbx)
    0.00 :	     e95:       48 89 93 20 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     e9c:       48 8b 83 70 05 00       add    $0x40fc,%rax
    0.00 :	     ea2:       00 48                   mov    (%rax),%eax
    0.00 :	     ea4:       8b 93                   mov    %eax,%eax
    0.00 :	     ea6:       68 0b 00                add    %rdx,%rax
    0.00 :	     ea9:       00 48 05 f8 40 00 00    mov    0xb78(%rbx),%rdx
    0.00 :	     eb0:       8b 00 89 c0 48 01 d0    mov    %rax,0xb70(%rbx)
    0.00 :	     eb7:       48 8b 93 70 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ebe:       48 89 83 68 0b 00       add    $0x4100,%rax
    0.00 :	     ec4:       00 48                   mov    (%rax),%eax
    0.00 :	     ec6:       8b 83                   mov    %eax,%eax
    0.00 :	     ec8:       70 05 00                add    %rdx,%rax
    0.00 :	     ecb:       00 48 05 fc 40 00 00    mov    0xbb8(%rbx),%rdx
    0.00 :	     ed2:       8b 00 89 c0 48 01 d0    mov    %rax,0xb78(%rbx)
    0.00 :	     ed9:       48 8b 93 78 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ee0:       48 89 83 70 0b 00       add    $0x4124,%rax
    0.00 :	     ee6:       00 48                   mov    (%rax),%eax
    0.00 :	     ee8:       8b 83                   mov    %eax,%eax
    0.00 :	     eea:       70 05 00                add    %rdx,%rax
    0.00 :	     eed:       00 48 05 00 41 00 00    mov    0xb80(%rbx),%rdx
    0.00 :	     ef4:       8b 00 89 c0 48 01 d0    mov    %rax,0xbb8(%rbx)
    0.00 :	     efb:       48 8b 93 b8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f02:       48 89 83 78 0b 00       add    $0x4104,%rax
    0.00 :	     f08:       00 48                   mov    (%rax),%eax
    0.00 :	     f0a:       8b 83                   mov    %eax,%eax
    0.00 :	     f0c:       70 05 00                add    %rdx,%rax
    0.00 :	     f0f:       00 48 05 24 41 00 00    mov    0xb88(%rbx),%rdx
    0.00 :	     f16:       8b 00 89 c0 48 01 d0    mov    %rax,0xb80(%rbx)
    0.00 :	     f1d:       48 8b 93 80 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f24:       48 89 83 b8 0b 00       add    $0x4108,%rax
    0.00 :	     f2a:       00 48                   mov    (%rax),%eax
    0.00 :	     f2c:       8b 83                   mov    %eax,%eax
    0.00 :	     f2e:       70 05 00                add    %rdx,%rax
    0.00 :	     f31:       00 48 05 04 41 00 00    mov    0xb90(%rbx),%rdx
    0.00 :	     f38:       8b 00 89 c0 48 01 d0    mov    %rax,0xb88(%rbx)
    0.00 :	     f3f:       48 8b 93 88 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f46:       48 89 83 80 0b 00       add    $0x410c,%rax
    0.00 :	     f4c:       00 48                   mov    (%rax),%eax
    0.00 :	     f4e:       8b 83                   mov    %eax,%eax
    0.00 :	     f50:       70 05 00                add    %rdx,%rax
    0.00 :	     f53:       00 48 05 08 41 00 00    mov    0xb98(%rbx),%rdx
    0.00 :	     f5a:       8b 00 89 c0 48 01 d0    mov    %rax,0xb90(%rbx)
    0.00 :	     f61:       48 8b 93 90 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f68:       48 89 83 88 0b 00       add    $0x4110,%rax
    0.00 :	     f6e:       00 48                   mov    (%rax),%eax
    0.00 :	     f70:       8b 83                   mov    %eax,%eax
    0.00 :	     f72:       70 05 00                add    %rdx,%rax
    0.00 :	     f75:       00 48 05 0c 41 00 00    mov    0xba0(%rbx),%rdx
    0.00 :	     f7c:       8b 00 89 c0 48 01 d0    mov    %rax,0xb98(%rbx)
    0.00 :	     f83:       48 8b 93 98 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f8a:       48 89 83 90 0b 00       add    $0x4118,%rax
    0.00 :	     f90:       00 48                   mov    (%rax),%eax
    0.00 :	     f92:       8b 83                   mov    %eax,%eax
    0.00 :	     f94:       70 05 00                add    %rdx,%rax
    0.00 :	     f97:       00 48 05 10 41 00 00    mov    0xba8(%rbx),%rdx
    0.00 :	     f9e:       8b 00 89 c0 48 01 d0    mov    %rax,0xba0(%rbx)
    0.00 :	     fa5:       48 8b 93 a0 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fac:       48 89 83 98 0b 00       add    $0x411c,%rax
    0.00 :	     fb2:       00 48                   mov    (%rax),%eax
    0.00 :	     fb4:       8b 83                   mov    %eax,%eax
    0.00 :	     fb6:       70 05 00                add    %rdx,%rax
    0.00 :	     fb9:       00 48 05 18 41 00 00    mov    0xbb0(%rbx),%rdx
    0.00 :	     fc0:       8b 00 89 c0 48 01 d0    mov    %rax,0xba8(%rbx)
    0.00 :	     fc7:       48 8b 93 a8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fce:       48 89 83 a0 0b 00       add    $0x4120,%rax
    0.00 :	     fd4:       00 48                   mov    (%rax),%eax
    0.00 :	     fd6:       8b 83                   mov    %eax,%eax
    0.00 :	     fd8:       70 05 00                add    %rdx,%rax
    0.00 :	     fdb:       00 48 05 1c 41 00 00    mov    %rax,0xbb0(%rbx)
    0.00 :	     fe2:       8b 00 89 c0 48 01 d0    mov    0xaa8(%rbx),%rax
    0.00 :	     fe9:       48 8b 93 b0             mov    %rax,0x40(%rsi)
    0.00 :	     fed:       0b 00 00 48 89 83 a8    mov    0xa10(%rbx),%rax
    0.00 :	     ff4:       0b 00 00 48             mov    %rax,0x48(%rsi)
    0.00 :	     ff8:       8b 83 70 05 00 00 48    mov    0x9c8(%rbx),%rax
    0.00 :	     fff:       05 20 41 00 00 8b 00    add    0x9e0(%rbx),%rax
    0.00 :	    1006:       89 c0 48 01 d0 48 89    add    0x9d0(%rbx),%rax
    0.00 :	    100d:       83 b0 0b 00 00 48 8b    add    0xad0(%rbx),%rax
    0.00 :	    1014:       83 a8 0a 00 00 48 89    add    0xae0(%rbx),%rax
    0.00 :	    101b:       46 40 48 8b 83 10 0a    add    0xa30(%rbx),%rax
    0.00 :	    1022:       00 00 48 89             mov    %rax,0x20(%rsi)
    0.00 :	    1026:       46 48 48 8b 83 c8 09    mov    0xae0(%rbx),%rax
    0.00 :	    102d:       00 00 48 03 83 e0 09    add    0xad0(%rbx),%rax
    0.00 :	    1034:       00 00 48 03             mov    %rax,0x50(%rsi)
    0.00 :	    1038:       83 d0 09 00 00 48 03    mov    0x9c8(%rbx),%rax
    0.00 :	    103f:       83 d0 0a 00             mov    %rax,0x60(%rsi)
    0.00 :	    1043:       00 48 03 83 e0 0a 00    mov    0x9d0(%rbx),%rax
    0.00 :	    104a:       00 48 03 83             mov    %rax,0x68(%rsi)
    0.00 :	    104e:       30 0a 00 00 48 89 46    mov    0x9e8(%rbx),%rax
    0.00 :	    1055:       20 48 8b 83             mov    %rax,0x78(%rsi)
    0.00 :	    1059:       e0 0a 00 00 48 03 83    mov    0xa08(%rbx),%rax
    0.00 :	    1060:       d0 0a 00 00 48 89 46    add    0x9f8(%rbx),%rax
    0.00 :	    1067:       50 48 8b 83             mov    %rax,0x28(%rsi)
    0.00 :	    106b:       c8 09 00 00 48 89 46    mov    0x9f8(%rbx),%rax
    0.00 :	    1072:       60 48 8b 83 d0 09 00    mov    %rax,0x80(%rsi)
    0.00 :	    1079:       00 48 89 46 68 48 8b    mov    0xa08(%rbx),%rax
    0.00 :	    1080:       83 e8 09 00 00 48 89    mov    %rax,0xa0(%rsi)
    0.00 :	    1087:       46 78 48 8b 83 08 0a    mov    0xa20(%rbx),%rax
    0.00 :	    108e:       00 00 48 03 83 f8 09    mov    %rax,0x88(%rsi)
    0.00 :	    1095:       00 00 48 89 46 28 48    cmpl   $0x1,0x8bc(%rbx)
    0.00 :	    109c:       8b 83 f8 09 00 00       je     11b0 <dma_unmap_page+0x1180>
    0.00 :	    10a2:       48 89 86 80 00 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10a9:       48 8b 83 08 0a 00 00    mov    0xb00(%rbx),%rdx
    0.00 :	    10b0:       48 89 86 a0 00 00       add    $0x40bc,%rax
    0.00 :	    10b6:       00 48                   mov    (%rax),%eax
    0.00 :	    10b8:       8b 83                   mov    %eax,%eax
    0.00 :	    10ba:       20 0a 00                add    %rdx,%rax
    0.00 :	    10bd:       00 48 89 86 88 00 00    mov    0xaf0(%rbx),%rdx
    0.00 :	    10c4:       00 83 bb bc 08 00 00    mov    %rax,0xb00(%rbx)
    0.00 :	    10cb:       01 0f 84 0e 01 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10d2:       48 8b 83 70 05 00       add    $0x40b4,%rax
    0.00 :	    10d8:       00 48                   mov    (%rax),%eax
    0.00 :	    10da:       8b 93                   mov    %eax,%eax
    0.00 :	    10dc:       00 0b 00                add    %rdx,%rax
    0.00 :	    10df:       00 48 05 bc 40 00 00    mov    0xaf8(%rbx),%rdx
    0.00 :	    10e6:       8b 00 89 c0 48 01 d0    mov    %rax,0xaf0(%rbx)
    0.00 :	    10ed:       48 8b 93 f0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10f4:       48 89 83 00 0b 00       add    $0x40b8,%rax
    0.00 :	    10fa:       00 48                   mov    (%rax),%eax
   33.33 :	    10fc:       8b 83                   mov    %eax,%eax
    0.00 :	    10fe:       70 05 00                add    %rdx,%rax
    0.00 :	    1101:       00 48 05 b4 40 00 00    mov    %rax,0xaf8(%rbx)
    0.00 :	    1108:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	    110f:       48 8b 93 f8 0a 00       add    $0x5820,%rax
    0.00 :	    1115:       00 48                   mov    (%rax),%eax
    0.00 :	    1117:       89 83 f0 0a 00          test   $0x10000000,%eax
    0.00 :	    111c:       00 48 8b 83 70 05       je     722 <dma_unmap_page+0x6f2>
    0.00 :	    1122:       00 00 48 05 b8 40 00    mov    0x570(%rbx),%rax
    0.00 :	    1129:       00 8b 00 89 c0 48 01    mov    0xc28(%rbx),%rdx
    0.00 :	    1130:       d0 48 89 83 f8 0a       add    $0x8fe4,%rax
    0.00 :	    1136:       00 00                   mov    (%rax),%eax
    0.00 :	    1138:       48 8b                   mov    %eax,%eax
    0.00 :	    113a:       83 70 05                add    %rdx,%rax
    0.00 :	    113d:       00 00 48 05 20 58 00    mov    0xc30(%rbx),%rdx
    0.00 :	    1144:       00 8b 00 a9 00 00 00    mov    %rax,0xc28(%rbx)
    0.00 :	    114b:       10 0f 84 00 f6 ff ff    mov    0x570(%rbx),%rax
    0.00 :	    1152:       48 8b 83 70 05 00       add    $0x415c,%rax
    0.00 :	    1158:       00 48                   mov    (%rax),%eax
    0.00 :	    115a:       8b 93                   mov    %eax,%eax
    0.00 :	    115c:       28 0c 00                add    %rdx,%rax
    0.00 :	    115f:       00 48 05 e4 8f 00 00    mov    0xc38(%rbx),%rdx
    0.00 :	    1166:       8b 00 89 c0 48 01 d0    mov    %rax,0xc30(%rbx)
    0.00 :	    116d:       48 8b 93 30 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1174:       48 89 83 28 0c 00       add    $0x8fe0,%rax
    0.00 :	    117a:       00 48                   mov    (%rax),%eax
    0.00 :	    117c:       8b 83                   mov    %eax,%eax
    0.00 :	    117e:       70 05 00                add    %rdx,%rax
    0.00 :	    1181:       00 48 05 5c 41 00 00    mov    0xc40(%rbx),%rdx
    0.00 :	    1188:       8b 00 89 c0 48 01 d0    mov    %rax,0xc38(%rbx)
    0.00 :	    118f:       48 8b 93 38 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1196:       48 89 83 30 0c 00       add    $0x4158,%rax
    0.00 :	    119c:       00 48                   mov    (%rax),%eax
    0.00 :	    119e:       8b 83                   mov    %eax,%eax
    0.00 :	    11a0:       70 05 00                add    %rdx,%rax
    0.00 :	    11a3:       00 48 05 e0 8f 00 00    mov    %rax,0xc40(%rbx)
    0.00 :	    11aa:       8b 00 89 c0             add    $0x10,%rsp
    0.00 :	    11ae:       48                      pop    %rbx
    0.00 :	    11af:       01                      retq   
    0.00 :	    11b0:       d0 48 8b 93 40 0c 00    cmpw   $0x3e8,0x3f8(%rbx)
    0.00 :	    11b7:       00 48 
    0.00 :	    11b9:       89 83 38 0c 00 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11bf:       48 8b 83 70 05 00 00    mov    0x860(%rbx),%rax
    0.00 :	    11c6:       48 05 58                test   %rax,%rax
    0.00 :	    11c9:       41 00                   je     11e6 <dma_unmap_page+0x11b6>
    0.00 :	    11cb:       00 8b 00 89 c0          lea    0xe(%rsp),%rdx
    0.00 :	    11d0:       48 01 d0 48 89 83 40    lea    0x568(%rbx),%rdi
    0.00 :	    11d7:       0c 00 00 48 83          mov    $0xa,%esi
    0.00 :	    11dc:       c4 10                   callq  *%rax
    0.00 :	    11de:       5b c3                   test   %eax,%eax
    0.00 :	    11e0:       66 81 bb f8 03 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11e6:       00 e8 03 0f 85          movzbl 0xe(%rsp),%eax
    0.00 :	    11eb:       e3 fe ff ff 48          mov    %ax,0xe(%rsp)
    0.00 :	    11f0:       8b 83 60                movzwl %ax,%eax
    0.00 :	    11f3:       08 00 00 48 85 c0       add    %eax,0xcf8(%rbx)
    0.00 :	    11f9:       74 1b 48 8d 54          jmpq   10a2 <dma_unmap_page+0x1072>
         :	    11fe:       24 0e                   xchg   %ax,%ax
         :	    1200:       48 8d bb 68             sub    $0x18,%rsp
         :	    1204:       05 00 00 be             mov    %rbx,(%rsp)
         :	    1208:       0a 00 00 00 ff          mov    %rbp,0x8(%rsp)
         :	    120d:       d0 85 c0                mov    %rdi,%rbx
         :	    1210:       0f 85 bc fe ff          mov    %r12,0x10(%rsp)
         :	    1215:       ff 0f b6 44             mov    0x20(%rdi),%rsi
         :	    1219:       24 0e 66                mov    (%rdi),%rbp
         :	    121c:       89 44 24                test   %rsi,%rsi
         :	    121f:       0e 0f b7 c0 01 83       je     13b0 <dma_unmap_page+0x1380>
         :	    1225:       f8 0c 00 00 e9 a4 fe    testb  $0x3,0x220(%rbp)
         :	    122c:       ff ff                   je     127b <dma_unmap_page+0x124b>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ccfc0 <DataChecksumsEnabled>:
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfc0:       48 8b 05 d9 c1 6a 00    mov    0x6ac1d9(%rip),%rax        # b791a0 <ControlFile>
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
  100.00 :	  4ccfc7:       55                      push   %rbp
    0.00 :	  4ccfc8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ccfcb:       8b 80 ec 00 00 00       mov    0xec(%rax),%eax
         :	        Assert(ControlFile != NULL);
         :	        return (ControlFile->data_checksum_version > 0);
         :	}
    0.00 :	  4ccfd1:       c9                      leaveq 
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfd2:       85 c0                   test   %eax,%eax
    0.00 :	  4ccfd4:       0f 95 c0                setne  %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:175
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:178
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2d60 <IsToastNamespace>:
         :	 * to other backends.  Those are treated the same as other backends' regular
         :	 * temp table namespaces, and access is prevented where appropriate.
         :	 */
         :	bool
         :	IsToastNamespace(Oid namespaceId)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:175
   50.00 :	  4e2d60:       55                      push   %rbp
         :	        return (namespaceId == PG_TOAST_NAMESPACE) ||
    0.00 :	  4e2d61:       83 ff 63                cmp    $0x63,%edi
    0.00 :	  4e2d64:       b8 01 00 00 00          mov    $0x1,%eax
         :	 * to other backends.  Those are treated the same as other backends' regular
         :	 * temp table namespaces, and access is prevented where appropriate.
         :	 */
         :	bool
         :	IsToastNamespace(Oid namespaceId)
         :	{
    0.00 :	  4e2d69:       48 89 e5                mov    %rsp,%rbp
         :	        return (namespaceId == PG_TOAST_NAMESPACE) ||
    0.00 :	  4e2d6c:       74 0a                   je     4e2d78 <IsToastNamespace+0x18>
    0.00 :	  4e2d6e:       e8 0d 9c 00 00          callq  4ec980 <isTempToastNamespace>
    0.00 :	  4e2d73:       84 c0                   test   %al,%al
    0.00 :	  4e2d75:       0f 95 c0                setne  %al
         :	                isTempToastNamespace(namespaceId);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:178
   50.00 :	  4e2d78:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:438
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b43e0 <ExecStoreMinimalTuple>:
         :	 */
         :	TupleTableSlot *
         :	ExecStoreMinimalTuple(MinimalTuple mtup,
         :	                                          TupleTableSlot *slot,
         :	                                          bool shouldFree)
         :	{
    0.00 :	  5b43e0:       55                      push   %rbp
    0.00 :	  5b43e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b43e4:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  5b43e8:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  5b43ec:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b43ef:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  5b43f3:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b43f7:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	 */
         :	TupleTableSlot *
         :	ExecStoreMinimalTuple(MinimalTuple mtup,
         :	                                          TupleTableSlot *slot,
         :	                                          bool shouldFree)
         :	{
    0.00 :	  5b43fb:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b43fe:       41 89 d5                mov    %edx,%r13d
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b4401:       75 6d                   jne    5b4470 <ExecStoreMinimalTuple+0x90>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b4403:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4407:       75 57                   jne    5b4460 <ExecStoreMinimalTuple+0x80>
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4409:       8b 7b 20                mov    0x20(%rbx),%edi
    0.00 :	  5b440c:       85 ff                   test   %edi,%edi
    0.00 :	  5b440e:       74 05                   je     5b4415 <ExecStoreMinimalTuple+0x35>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4410:       e8 4b 0a 0c 00          callq  674e60 <ReleaseBuffer>
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
    0.00 :	  5b4415:       48 8d 43 40             lea    0x40(%rbx),%rax
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
    0.00 :	  5b4419:       44 88 6b 06             mov    %r13b,0x6(%rbx)
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
    0.00 :	  5b441d:       4c 89 63 38             mov    %r12,0x38(%rbx)
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
         :	                ReleaseBuffer(slot->tts_buffer);
         :
         :	        slot->tts_buffer = InvalidBuffer;
    0.00 :	  5b4421:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
    0.00 :	  5b4428:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = false;
    0.00 :	  5b442c:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
    0.00 :	  5b4430:       48 89 43 08             mov    %rax,0x8(%rbx)
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  5b4434:       41 8b 04 24             mov    (%r12),%eax
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:438
  100.00 :	  5b4438:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
         :	        /* no need to set t_self or t_tableOid since we won't allow access */
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b443c:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  5b4443:       83 c0 08                add    $0x8,%eax
    0.00 :	  5b4446:       89 43 40                mov    %eax,0x40(%rbx)
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
    0.00 :	  5b4449:       49 8d 44 24 f8          lea    -0x8(%r12),%rax
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b444e:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
    0.00 :	  5b4452:       48 89 43 50             mov    %rax,0x50(%rbx)
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b4456:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b4459:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  5b445d:       c9                      leaveq 
    0.00 :	  5b445e:       c3                      retq   
    0.00 :	  5b445f:       90                      nop
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4460:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4464:       e8 47 a8 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4469:       eb 9e                   jmp    5b4409 <ExecStoreMinimalTuple+0x29>
    0.00 :	  5b446b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4470:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4474:       e8 47 a8 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4479:       eb 88                   jmp    5b4403 <ExecStoreMinimalTuple+0x23>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673de0 <BufTableLookup>:
         :	 * BufTableLookup
         :	 *              Lookup the given BufferTag; return buffer ID, or -1 if not found
         :	 */
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   50.00 :	  673de0:       55                      push   %rbp
    0.00 :	  673de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  673de4:       48 83 ec 20             sub    $0x20,%rsp
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673de8:       48 8b 07                mov    (%rdi),%rax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673deb:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673def:       48 89 45 e0             mov    %rax,-0x20(%rbp)
    0.00 :	  673df3:       48 8b 47 08             mov    0x8(%rdi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   50.00 :	  673df7:       48 89 45 e8             mov    %rax,-0x18(%rbp)
    0.00 :	  673dfb:       8b 47 10                mov    0x10(%rdi),%eax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673dfe:       48 8b 3d 53 92 50 00    mov    0x509253(%rip),%rdi        # b7d058 <SharedBufHash>
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673e05:       89 45 f0                mov    %eax,-0x10(%rbp)
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673e08:       e8 e3 f4 10 00          callq  7832f0 <CHashSearch>
    0.00 :	  673e0d:       89 c2                   mov    %eax,%edx
    0.00 :	  673e0f:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  673e14:       84 d2                   test   %dl,%dl
    0.00 :	  673e16:       0f 45 45 f4             cmovne -0xc(%rbp),%eax
         :	                return -1;
         :
         :	        return ent.id;
         :	}
    0.00 :	  673e1a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:410
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:443
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006767d0 <PrefetchBuffer>:
         :	 * block will not be delayed by the I/O.  Prefetching is optional.
         :	 * No-op if prefetching isn't compiled in.
         :	 */
         :	void
         :	PrefetchBuffer(Relation reln, ForkNumber forkNum, BlockNumber blockNum)
         :	{
    0.00 :	  6767d0:       55                      push   %rbp
    0.00 :	  6767d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6767d4:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:410
   50.00 :	  6767d8:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6767dc:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6767df:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6767e3:       48 83 ec 40             sub    $0x40,%rsp
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6767e7:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * block will not be delayed by the I/O.  Prefetching is optional.
         :	 * No-op if prefetching isn't compiled in.
         :	 */
         :	void
         :	PrefetchBuffer(Relation reln, ForkNumber forkNum, BlockNumber blockNum)
         :	{
    0.00 :	  6767ec:       41 89 f5                mov    %esi,%r13d
    0.00 :	  6767ef:       41 89 d4                mov    %edx,%r12d
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6767f2:       74 6c                   je     676860 <PrefetchBuffer+0x90>
         :
         :	        if (RelationUsesLocalBuffers(reln))
    0.00 :	  6767f4:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6767f8:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6767fc:       75 2a                   jne    676828 <PrefetchBuffer+0x58>
         :	        {
         :	                /* see comments in ReadBufferExtended */
         :	                if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6767fe:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676802:       74 7b                   je     67687f <PrefetchBuffer+0xaf>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                errmsg("cannot access temporary tables of other sessions")));
         :
         :	                /* pass it off to localbuf.c */
         :	                LocalPrefetchBuffer(reln->rd_smgr, forkNum, blockNum);
    0.00 :	  676804:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  676808:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67680b:       44 89 ee                mov    %r13d,%esi
    0.00 :	  67680e:       e8 0d 1a 00 00          callq  678220 <LocalPrefetchBuffer>
         :	                 * real fix would involve some additional per-buffer state, and it's
         :	                 * not clear that there's enough of a problem to justify that.
         :	                 */
         :	        }
         :	#endif   /* USE_PREFETCH */
         :	}
    0.00 :	  676813:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  676817:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  67681b:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  67681f:       c9                      leaveq 
    0.00 :	  676820:       c3                      retq   
    0.00 :	  676821:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                BufferTag       newTag;         /* identity of requested block */
         :	                int                     buf_id;
         :
         :	                /* create a tag so we can lookup the buffer */
         :	                INIT_BUFFERTAG(newTag, reln->rd_smgr->smgr_rnode.node,
    0.00 :	  676828:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                                           forkNum, blockNum);
         :
         :	                /* see if the block is in the buffer pool already */
         :	                buf_id = BufTableLookup(&newTag);
    0.00 :	  67682c:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :	        {
         :	                BufferTag       newTag;         /* identity of requested block */
         :	                int                     buf_id;
         :
         :	                /* create a tag so we can lookup the buffer */
         :	                INIT_BUFFERTAG(newTag, reln->rd_smgr->smgr_rnode.node,
    0.00 :	  676830:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  676833:       48 89 45 c0             mov    %rax,-0x40(%rbp)
    0.00 :	  676837:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67683a:       44 89 6d cc             mov    %r13d,-0x34(%rbp)
    0.00 :	  67683e:       44 89 65 d0             mov    %r12d,-0x30(%rbp)
    0.00 :	  676842:       89 45 c8                mov    %eax,-0x38(%rbp)
         :	                                           forkNum, blockNum);
         :
         :	                /* see if the block is in the buffer pool already */
         :	                buf_id = BufTableLookup(&newTag);
    0.00 :	  676845:       e8 96 d5 ff ff          callq  673de0 <BufTableLookup>
         :
         :	                /* If not in buffers, initiate prefetch */
         :	                if (buf_id < 0)
    0.00 :	  67684a:       85 c0                   test   %eax,%eax
    0.00 :	  67684c:       79 c5                   jns    676813 <PrefetchBuffer+0x43>
         :	                        smgrprefetch(reln->rd_smgr, forkNum, blockNum);
    0.00 :	  67684e:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  676852:       44 89 e2                mov    %r12d,%edx
    0.00 :	  676855:       44 89 ee                mov    %r13d,%esi
    0.00 :	  676858:       e8 93 2b 02 00          callq  6993f0 <smgrprefetch>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:443
   50.00 :	  67685d:       eb b4                   jmp    676813 <PrefetchBuffer+0x43>
    0.00 :	  67685f:       90                      nop
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676860:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676863:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676866:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676869:       e8 c2 31 02 00          callq  699a30 <smgropen>
    0.00 :	  67686e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676872:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676875:       e8 86 2a 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67687a:       e9 75 ff ff ff          jmpq   6767f4 <PrefetchBuffer+0x24>
         :
         :	        if (RelationUsesLocalBuffers(reln))
         :	        {
         :	                /* see comments in ReadBufferExtended */
         :	                if (RELATION_IS_OTHER_TEMP(reln))
         :	                        ereport(ERROR,
    0.00 :	  67687f:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676882:       b9 d3 a0 8a 00          mov    $0x8aa0d3,%ecx
    0.00 :	  676887:       ba a8 01 00 00          mov    $0x1a8,%edx
    0.00 :	  67688c:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676891:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  676896:       e8 25 42 10 00          callq  77aac0 <errstart>
    0.00 :	  67689b:       84 c0                   test   %al,%al
    0.00 :	  67689d:       75 05                   jne    6768a4 <PrefetchBuffer+0xd4>
    0.00 :	  67689f:       e8 2c 2c df ff          callq  4694d0 <abort@plt>
    0.00 :	  6768a4:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  6768a9:       31 c0                   xor    %eax,%eax
    0.00 :	  6768ab:       e8 f0 5f 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6768b0:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  6768b5:       89 c3                   mov    %eax,%ebx
    0.00 :	  6768b7:       e8 94 64 10 00          callq  77cd50 <errcode>
    0.00 :	  6768bc:       89 de                   mov    %ebx,%esi
    0.00 :	  6768be:       89 c7                   mov    %eax,%edi
    0.00 :	  6768c0:       31 c0                   xor    %eax,%eax
    0.00 :	  6768c2:       e8 19 3d 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6768c7:       eb d6                   jmp    67689f <PrefetchBuffer+0xcf>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:905
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:916
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679920 <FileAccess>:
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  679920:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:905
   50.00 :	  679921:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679924:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  679928:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  67992c:       4c 63 e7                movslq %edi,%r12
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  67992f:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  679933:       48 83 ec 20             sub    $0x20,%rsp
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679937:       48 8b 0d 5a 38 50 00    mov    0x50385a(%rip),%rcx        # b7d198 <VfdCache>
    0.00 :	  67993e:       49 c1 e4 06             shl    $0x6,%r12
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  679942:       41 89 fd                mov    %edi,%r13d
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679945:       4a 8d 1c 21             lea    (%rcx,%r12,1),%rbx
    0.00 :	  679949:       83 3b ff                cmpl   $0xffffffff,(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:916
   50.00 :	  67994c:       74 52                   je     6799a0 <FileAccess+0x80>
         :	        {
         :	                returnValue = LruInsert(file);
         :	                if (returnValue != 0)
         :	                        return returnValue;
         :	        }
         :	        else if (VfdCache[0].lruLessRecently != file)
    0.00 :	  67994e:       31 c0                   xor    %eax,%eax
    0.00 :	  679950:       39 79 18                cmp    %edi,0x18(%rcx)
    0.00 :	  679953:       74 3c                   je     679991 <FileAccess+0x71>
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
         :
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = vfdP->lruMoreRecently;
    0.00 :	  679955:       48 63 43 18             movslq 0x18(%rbx),%rax
    0.00 :	  679959:       8b 53 14                mov    0x14(%rbx),%edx
    0.00 :	  67995c:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  679960:       89 54 01 14             mov    %edx,0x14(%rcx,%rax,1)
         :	        VfdCache[vfdP->lruMoreRecently].lruLessRecently = vfdP->lruLessRecently;
    0.00 :	  679964:       48 63 43 14             movslq 0x14(%rbx),%rax
    0.00 :	  679968:       8b 53 18                mov    0x18(%rbx),%edx
    0.00 :	  67996b:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67996f:       89 54 01 18             mov    %edx,0x18(%rcx,%rax,1)
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
         :
         :	        vfdP->lruMoreRecently = 0;
    0.00 :	  679973:       c7 43 14 00 00 00 00    movl   $0x0,0x14(%rbx)
         :	        vfdP->lruLessRecently = VfdCache[0].lruLessRecently;
    0.00 :	  67997a:       8b 41 18                mov    0x18(%rcx),%eax
    0.00 :	  67997d:       89 43 18                mov    %eax,0x18(%rbx)
         :	        VfdCache[0].lruLessRecently = file;
    0.00 :	  679980:       89 79 18                mov    %edi,0x18(%rcx)
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = file;
    0.00 :	  679983:       48 63 43 18             movslq 0x18(%rbx),%rax
    0.00 :	  679987:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67998b:       89 7c 01 14             mov    %edi,0x14(%rcx,%rax,1)
    0.00 :	  67998f:       31 c0                   xor    %eax,%eax
         :	                Delete(file);
         :	                Insert(file);
         :	        }
         :
         :	        return 0;
         :	}
    0.00 :	  679991:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  679995:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  679999:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  67999d:       c9                      leaveq 
    0.00 :	  67999e:       c3                      retq   
    0.00 :	  67999f:       90                      nop
         :	        vfdP = &VfdCache[file];
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                /* Close excess kernel FDs. */
         :	                ReleaseLruFiles();
    0.00 :	  6799a0:       e8 8b ee ff ff          callq  678830 <ReleaseLruFiles>
         :	                /*
         :	                 * The open could still fail for lack of file descriptors, eg due to
         :	                 * overall system file table being full.  So, be prepared to release
         :	                 * another FD if necessary...
         :	                 */
         :	                vfdP->fd = BasicOpenFile(vfdP->fileName, vfdP->fileFlags,
    0.00 :	  6799a5:       8b 53 3c                mov    0x3c(%rbx),%edx
    0.00 :	  6799a8:       8b 73 38                mov    0x38(%rbx),%esi
    0.00 :	  6799ab:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  6799af:       e8 ac fd ff ff          callq  679760 <BasicOpenFile>
    0.00 :	  6799b4:       89 c1                   mov    %eax,%ecx
    0.00 :	  6799b6:       89 03                   mov    %eax,(%rbx)
         :	                                                                 vfdP->fileMode);
         :	                if (vfdP->fd < 0)
    0.00 :	  6799b8:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  6799bd:       85 c9                   test   %ecx,%ecx
    0.00 :	  6799bf:       78 d0                   js     679991 <FileAccess+0x71>
         :	                        return -1;
         :	                }
         :	                else
         :	                {
         :	                        DO_DB(elog(LOG, "RE_OPEN SUCCESS"));
         :	                        ++nfile;
    0.00 :	  6799c1:       83 05 b8 37 50 00 01    addl   $0x1,0x5037b8(%rip)        # b7d180 <nfile>
         :	                }
         :
         :	                /* seek to the right position */
         :	                if (vfdP->seekPos != (off_t) 0)
    0.00 :	  6799c8:       48 8b 73 20             mov    0x20(%rbx),%rsi
    0.00 :	  6799cc:       48 85 f6                test   %rsi,%rsi
    0.00 :	  6799cf:       75 2f                   jne    679a00 <FileAccess+0xe0>
         :
         :	        DO_DB(elog(LOG, "Insert %d (%s)",
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
    0.00 :	  6799d1:       48 8b 0d c0 37 50 00    mov    0x5037c0(%rip),%rcx        # b7d198 <VfdCache>
    0.00 :	  6799d8:       4a 8d 14 21             lea    (%rcx,%r12,1),%rdx
         :
         :	        vfdP->lruMoreRecently = 0;
    0.00 :	  6799dc:       c7 42 14 00 00 00 00    movl   $0x0,0x14(%rdx)
         :	        vfdP->lruLessRecently = VfdCache[0].lruLessRecently;
    0.00 :	  6799e3:       8b 41 18                mov    0x18(%rcx),%eax
    0.00 :	  6799e6:       89 42 18                mov    %eax,0x18(%rdx)
         :	        VfdCache[0].lruLessRecently = file;
    0.00 :	  6799e9:       44 89 69 18             mov    %r13d,0x18(%rcx)
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = file;
    0.00 :	  6799ed:       48 63 42 18             movslq 0x18(%rdx),%rax
    0.00 :	  6799f1:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  6799f5:       44 89 6c 01 14          mov    %r13d,0x14(%rcx,%rax,1)
    0.00 :	  6799fa:       31 c0                   xor    %eax,%eax
    0.00 :	  6799fc:       eb 93                   jmp    679991 <FileAccess+0x71>
    0.00 :	  6799fe:       66 90                   xchg   %ax,%ax
         :	                /* seek to the right position */
         :	                if (vfdP->seekPos != (off_t) 0)
         :	                {
         :	                        off_t returnValue PG_USED_FOR_ASSERTS_ONLY;
         :
         :	                        returnValue = lseek(vfdP->fd, vfdP->seekPos, SEEK_SET);
    0.00 :	  679a00:       31 d2                   xor    %edx,%edx
    0.00 :	  679a02:       89 cf                   mov    %ecx,%edi
    0.00 :	  679a04:       e8 67 01 df ff          callq  469b70 <lseek@plt>
    0.00 :	  679a09:       eb c6                   jmp    6799d1 <FileAccess+0xb1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000697940 <mdopen>:
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697940:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   50.00 :	  697941:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  697944:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697948:       4c 63 ee                movslq %esi,%r13
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  69794b:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  69794f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  697953:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  697957:       49 89 fc                mov    %rdi,%r12
    0.00 :	  69795a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  69795e:       48 83 ec 30             sub    $0x30,%rsp
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697962:       4a 8b 5c ef 28          mov    0x28(%rdi,%r13,8),%rbx
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697967:       41 89 d7                mov    %edx,%r15d
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  69796a:       48 85 db                test   %rbx,%rbx
    0.00 :	  69796d:       74 21                   je     697990 <mdopen+0x50>
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  69796f:       48 89 d8                mov    %rbx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
   50.00 :	  697972:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  697976:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  69797a:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  69797e:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  697982:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  697986:       c9                      leaveq 
    0.00 :	  697987:       c3                      retq   
    0.00 :	  697988:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  69798f:       00 
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  697990:       8b 4f 0c                mov    0xc(%rdi),%ecx
    0.00 :	  697993:       8b 57 08                mov    0x8(%rdi),%edx
    0.00 :	  697996:       41 89 f0                mov    %esi,%r8d
    0.00 :	  697999:       8b 7f 04                mov    0x4(%rdi),%edi
    0.00 :	  69799c:       41 8b 34 24             mov    (%r12),%esi
    0.00 :	  6979a0:       e8 2b 6c 11 00          callq  7ae5d0 <GetRelationPath>
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979a5:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  6979aa:       be 02 00 00 00          mov    $0x2,%esi
    0.00 :	  6979af:       48 89 c7                mov    %rax,%rdi
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  6979b2:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979b6:       e8 45 25 fe ff          callq  679f00 <PathNameOpenFile>
         :
         :	        if (fd < 0)
    0.00 :	  6979bb:       85 c0                   test   %eax,%eax
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979bd:       41 89 c6                mov    %eax,%r14d
         :
         :	        if (fd < 0)
    0.00 :	  6979c0:       78 3e                   js     697a00 <mdopen+0xc0>
         :	                                        (errcode_for_file_access(),
         :	                                         errmsg("could not open file \"%s\": %m", path)));
         :	                }
         :	        }
         :
         :	        pfree(path);
    0.00 :	  6979c2:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  6979c6:       e8 b5 11 10 00          callq  798b80 <pfree>
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979cb:       48 8b 3d de 6d 4e 00    mov    0x4e6dde(%rip),%rdi        # b7e7b0 <MdCxt>
    0.00 :	  6979d2:       be 10 00 00 00          mov    $0x10,%esi
    0.00 :	  6979d7:       e8 b4 14 10 00          callq  798e90 <MemoryContextAlloc>
         :	                }
         :	        }
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
    0.00 :	  6979dc:       4b 89 44 ec 28          mov    %rax,0x28(%r12,%r13,8)
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979e1:       48 89 c3                mov    %rax,%rbx
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
         :
         :	        mdfd->mdfd_vfd = fd;
    0.00 :	  6979e4:       44 89 30                mov    %r14d,(%rax)
         :	        mdfd->mdfd_segno = 0;
    0.00 :	  6979e7:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%rax)
         :	        mdfd->mdfd_chain = NULL;
    0.00 :	  6979ee:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  6979f5:       00 
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  6979f6:       e9 74 ff ff ff          jmpq   69796f <mdopen+0x2f>
    0.00 :	  6979fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * During bootstrap, there are cases where a system relation will be
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
    0.00 :	  697a00:       8b 05 36 11 4d 00       mov    0x4d1136(%rip),%eax        # b68b3c <Mode>
    0.00 :	  697a06:       85 c0                   test   %eax,%eax
    0.00 :	  697a08:       74 36                   je     697a40 <mdopen+0x100>
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
    0.00 :	  697a0a:       41 83 ef 01             sub    $0x1,%r15d
    0.00 :	  697a0e:       75 0a                   jne    697a1a <mdopen+0xda>
    0.00 :	  697a10:       e8 ab 22 dd ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  697a15:       83 38 02                cmpl   $0x2,(%rax)
    0.00 :	  697a18:       74 6a                   je     697a84 <mdopen+0x144>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a1a:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  697a1d:       b9 7f e3 8a 00          mov    $0x8ae37f,%ecx
    0.00 :	  697a22:       ba 5b 02 00 00          mov    $0x25b,%edx
    0.00 :	  697a27:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  697a2c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  697a31:       e8 8a 30 0e 00          callq  77aac0 <errstart>
    0.00 :	  697a36:       84 c0                   test   %al,%al
    0.00 :	  697a38:       75 26                   jne    697a60 <mdopen+0x120>
    0.00 :	  697a3a:       e8 91 1a dd ff          callq  4694d0 <abort@plt>
    0.00 :	  697a3f:       90                      nop
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a40:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a44:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  697a49:       be c2 00 00 00          mov    $0xc2,%esi
    0.00 :	  697a4e:       e8 ad 24 fe ff          callq  679f00 <PathNameOpenFile>
         :	                if (fd < 0)
    0.00 :	  697a53:       85 c0                   test   %eax,%eax
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a55:       41 89 c6                mov    %eax,%r14d
         :	                if (fd < 0)
    0.00 :	  697a58:       0f 89 64 ff ff ff       jns    6979c2 <mdopen+0x82>
    0.00 :	  697a5e:       eb aa                   jmp    697a0a <mdopen+0xca>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a60:       48 8b 75 d0             mov    -0x30(%rbp),%rsi
    0.00 :	  697a64:       bf 53 31 7b 00          mov    $0x7b3153,%edi
    0.00 :	  697a69:       31 c0                   xor    %eax,%eax
    0.00 :	  697a6b:       e8 30 4e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  697a70:       89 c3                   mov    %eax,%ebx
    0.00 :	  697a72:       e8 79 50 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  697a77:       89 de                   mov    %ebx,%esi
    0.00 :	  697a79:       89 c7                   mov    %eax,%edi
    0.00 :	  697a7b:       31 c0                   xor    %eax,%eax
    0.00 :	  697a7d:       e8 5e 2b 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  697a82:       eb b6                   jmp    697a3a <mdopen+0xfa>
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
    0.00 :	  697a84:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a88:       e8 f3 10 10 00          callq  798b80 <pfree>
    0.00 :	  697a8d:       0f 1f 00                nopl   (%rax)
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  697a90:       e9 da fe ff ff          jmpq   69796f <mdopen+0x2f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6af0 <date_lt>:
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6c6af0:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  6c6af4:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6c6af7:       55                      push   %rbp
    0.00 :	  6c6af8:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 < dateVal2);
         :	}
    0.00 :	  6c6afb:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
  100.00 :	  6c6afc:       0f 9c c0                setl   %al
    0.00 :	  6c6aff:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:754
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798b80 <pfree>:
         :	 * pfree
         :	 *              Release an allocated chunk.
         :	 */
         :	void
         :	pfree(void *pointer)
         :	{
    0.00 :	  798b80:       55                      push   %rbp
    0.00 :	  798b81:       48 89 f8                mov    %rdi,%rax
         :	        Assert(pointer == (void *) MAXALIGN(pointer));
         :
         :	        /*
         :	         * OK, it's probably safe to look at the chunk header.
         :	         */
         :	        context = ((StandardChunkHeader *)
    0.00 :	  798b84:       48 8b 7f f0             mov    -0x10(%rdi),%rdi
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
    0.00 :	  798b88:       48 89 c6                mov    %rax,%rsi
         :	 * pfree
         :	 *              Release an allocated chunk.
         :	 */
         :	void
         :	pfree(void *pointer)
         :	{
    0.00 :	  798b8b:       48 89 e5                mov    %rsp,%rbp
         :	        context = ((StandardChunkHeader *)
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
    0.00 :	  798b8e:       48 8b 57 08             mov    0x8(%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:754
  100.00 :	  798b92:       4c 8b 5a 08             mov    0x8(%rdx),%r11
         :	        VALGRIND_MEMPOOL_FREE(context, pointer);
         :	}
    0.00 :	  798b96:       c9                      leaveq 
         :	        context = ((StandardChunkHeader *)
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
    0.00 :	  798b97:       41 ff e3                jmpq   *%r11

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000083470 <__GI_memset>:
    0.00 :	   83470:       48 83 fa 01             cmp    $0x1,%rdx
 ??:0
   50.00 :	   83474:       48 89 f8                mov    %rdi,%rax
    0.00 :	   83477:       75 04                   jne    8347d <__GI_memset+0xd>
    0.00 :	   83479:       40 88 37                mov    %sil,(%rdi)
    0.00 :	   8347c:       c3                      retq   
   50.00 :	   8347d:       49 b9 01 01 01 01 01    movabs $0x101010101010101,%r9
    0.00 :	   83484:       01 01 01 
    0.00 :	   83487:       49 89 d0                mov    %rdx,%r8
    0.00 :	   8348a:       48 0f b6 d6             movzbq %sil,%rdx
    0.00 :	   8348e:       49 0f af d1             imul   %r9,%rdx
    0.00 :	   83492:       49 81 f8 90 00 00 00    cmp    $0x90,%r8
    0.00 :	   83499:       0f 87 e1 02 00 00       ja     83780 <__GI_memset+0x310>
    0.00 :	   8349f:       4c 01 c7                add    %r8,%rdi
    0.00 :	   834a2:       4c 8d 1d 13 00 00 00    lea    0x13(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   834a9:       48 8d 0d 60 2d 0b 00    lea    0xb2d60(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   834b0:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   834b5:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   834b9:       41 ff e3                jmpq   *%r11
    0.00 :	   834bc:       c3                      retq   
    0.00 :	   834bd:       0f 1f 00                nopl   (%rax)
    0.00 :	   834c0:       48 89 97 77 ff ff ff    mov    %rdx,-0x89(%rdi)
    0.00 :	   834c7:       48 89 97 7f ff ff ff    mov    %rdx,-0x81(%rdi)
    0.00 :	   834ce:       48 89 57 87             mov    %rdx,-0x79(%rdi)
    0.00 :	   834d2:       48 89 57 8f             mov    %rdx,-0x71(%rdi)
    0.00 :	   834d6:       48 89 57 97             mov    %rdx,-0x69(%rdi)
    0.00 :	   834da:       48 89 57 9f             mov    %rdx,-0x61(%rdi)
    0.00 :	   834de:       48 89 57 a7             mov    %rdx,-0x59(%rdi)
    0.00 :	   834e2:       48 89 57 af             mov    %rdx,-0x51(%rdi)
    0.00 :	   834e6:       48 89 57 b7             mov    %rdx,-0x49(%rdi)
    0.00 :	   834ea:       48 89 57 bf             mov    %rdx,-0x41(%rdi)
    0.00 :	   834ee:       48 89 57 c7             mov    %rdx,-0x39(%rdi)
    0.00 :	   834f2:       48 89 57 cf             mov    %rdx,-0x31(%rdi)
    0.00 :	   834f6:       48 89 57 d7             mov    %rdx,-0x29(%rdi)
    0.00 :	   834fa:       48 89 57 df             mov    %rdx,-0x21(%rdi)
    0.00 :	   834fe:       48 89 57 e7             mov    %rdx,-0x19(%rdi)
    0.00 :	   83502:       48 89 57 ef             mov    %rdx,-0x11(%rdi)
    0.00 :	   83506:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   8350a:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   8350d:       c3                      retq   
    0.00 :	   8350e:       66 90                   xchg   %ax,%ax
    0.00 :	   83510:       48 89 97 70 ff ff ff    mov    %rdx,-0x90(%rdi)
    0.00 :	   83517:       48 89 97 78 ff ff ff    mov    %rdx,-0x88(%rdi)
    0.00 :	   8351e:       48 89 57 80             mov    %rdx,-0x80(%rdi)
    0.00 :	   83522:       48 89 57 88             mov    %rdx,-0x78(%rdi)
    0.00 :	   83526:       48 89 57 90             mov    %rdx,-0x70(%rdi)
    0.00 :	   8352a:       48 89 57 98             mov    %rdx,-0x68(%rdi)
    0.00 :	   8352e:       48 89 57 a0             mov    %rdx,-0x60(%rdi)
    0.00 :	   83532:       48 89 57 a8             mov    %rdx,-0x58(%rdi)
    0.00 :	   83536:       48 89 57 b0             mov    %rdx,-0x50(%rdi)
    0.00 :	   8353a:       48 89 57 b8             mov    %rdx,-0x48(%rdi)
    0.00 :	   8353e:       48 89 57 c0             mov    %rdx,-0x40(%rdi)
    0.00 :	   83542:       48 89 57 c8             mov    %rdx,-0x38(%rdi)
    0.00 :	   83546:       48 89 57 d0             mov    %rdx,-0x30(%rdi)
    0.00 :	   8354a:       48 89 57 d8             mov    %rdx,-0x28(%rdi)
    0.00 :	   8354e:       48 89 57 e0             mov    %rdx,-0x20(%rdi)
    0.00 :	   83552:       48 89 57 e8             mov    %rdx,-0x18(%rdi)
    0.00 :	   83556:       48 89 57 f0             mov    %rdx,-0x10(%rdi)
    0.00 :	   8355a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8355e:       c3                      retq   
    0.00 :	   8355f:       90                      nop
    0.00 :	   83560:       48 89 97 76 ff ff ff    mov    %rdx,-0x8a(%rdi)
    0.00 :	   83567:       48 89 97 7e ff ff ff    mov    %rdx,-0x82(%rdi)
    0.00 :	   8356e:       48 89 57 86             mov    %rdx,-0x7a(%rdi)
    0.00 :	   83572:       48 89 57 8e             mov    %rdx,-0x72(%rdi)
    0.00 :	   83576:       48 89 57 96             mov    %rdx,-0x6a(%rdi)
    0.00 :	   8357a:       48 89 57 9e             mov    %rdx,-0x62(%rdi)
    0.00 :	   8357e:       48 89 57 a6             mov    %rdx,-0x5a(%rdi)
    0.00 :	   83582:       48 89 57 ae             mov    %rdx,-0x52(%rdi)
    0.00 :	   83586:       48 89 57 b6             mov    %rdx,-0x4a(%rdi)
    0.00 :	   8358a:       48 89 57 be             mov    %rdx,-0x42(%rdi)
    0.00 :	   8358e:       48 89 57 c6             mov    %rdx,-0x3a(%rdi)
    0.00 :	   83592:       48 89 57 ce             mov    %rdx,-0x32(%rdi)
    0.00 :	   83596:       48 89 57 d6             mov    %rdx,-0x2a(%rdi)
    0.00 :	   8359a:       48 89 57 de             mov    %rdx,-0x22(%rdi)
    0.00 :	   8359e:       48 89 57 e6             mov    %rdx,-0x1a(%rdi)
    0.00 :	   835a2:       48 89 57 ee             mov    %rdx,-0x12(%rdi)
    0.00 :	   835a6:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   835aa:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   835ae:       c3                      retq   
    0.00 :	   835af:       90                      nop
    0.00 :	   835b0:       48 89 97 75 ff ff ff    mov    %rdx,-0x8b(%rdi)
    0.00 :	   835b7:       48 89 97 7d ff ff ff    mov    %rdx,-0x83(%rdi)
    0.00 :	   835be:       48 89 57 85             mov    %rdx,-0x7b(%rdi)
    0.00 :	   835c2:       48 89 57 8d             mov    %rdx,-0x73(%rdi)
    0.00 :	   835c6:       48 89 57 95             mov    %rdx,-0x6b(%rdi)
    0.00 :	   835ca:       48 89 57 9d             mov    %rdx,-0x63(%rdi)
    0.00 :	   835ce:       48 89 57 a5             mov    %rdx,-0x5b(%rdi)
    0.00 :	   835d2:       48 89 57 ad             mov    %rdx,-0x53(%rdi)
    0.00 :	   835d6:       48 89 57 b5             mov    %rdx,-0x4b(%rdi)
    0.00 :	   835da:       48 89 57 bd             mov    %rdx,-0x43(%rdi)
    0.00 :	   835de:       48 89 57 c5             mov    %rdx,-0x3b(%rdi)
    0.00 :	   835e2:       48 89 57 cd             mov    %rdx,-0x33(%rdi)
    0.00 :	   835e6:       48 89 57 d5             mov    %rdx,-0x2b(%rdi)
    0.00 :	   835ea:       48 89 57 dd             mov    %rdx,-0x23(%rdi)
    0.00 :	   835ee:       48 89 57 e5             mov    %rdx,-0x1b(%rdi)
    0.00 :	   835f2:       48 89 57 ed             mov    %rdx,-0x13(%rdi)
    0.00 :	   835f6:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   835fa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   835fe:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83601:       c3                      retq   
    0.00 :	   83602:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83609:       1f 84 00 00 00 00 00 
    0.00 :	   83610:       48 89 97 74 ff ff ff    mov    %rdx,-0x8c(%rdi)
    0.00 :	   83617:       48 89 97 7c ff ff ff    mov    %rdx,-0x84(%rdi)
    0.00 :	   8361e:       48 89 57 84             mov    %rdx,-0x7c(%rdi)
    0.00 :	   83622:       48 89 57 8c             mov    %rdx,-0x74(%rdi)
    0.00 :	   83626:       48 89 57 94             mov    %rdx,-0x6c(%rdi)
    0.00 :	   8362a:       48 89 57 9c             mov    %rdx,-0x64(%rdi)
    0.00 :	   8362e:       48 89 57 a4             mov    %rdx,-0x5c(%rdi)
    0.00 :	   83632:       48 89 57 ac             mov    %rdx,-0x54(%rdi)
    0.00 :	   83636:       48 89 57 b4             mov    %rdx,-0x4c(%rdi)
    0.00 :	   8363a:       48 89 57 bc             mov    %rdx,-0x44(%rdi)
    0.00 :	   8363e:       48 89 57 c4             mov    %rdx,-0x3c(%rdi)
    0.00 :	   83642:       48 89 57 cc             mov    %rdx,-0x34(%rdi)
    0.00 :	   83646:       48 89 57 d4             mov    %rdx,-0x2c(%rdi)
    0.00 :	   8364a:       48 89 57 dc             mov    %rdx,-0x24(%rdi)
    0.00 :	   8364e:       48 89 57 e4             mov    %rdx,-0x1c(%rdi)
    0.00 :	   83652:       48 89 57 ec             mov    %rdx,-0x14(%rdi)
    0.00 :	   83656:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   8365a:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8365d:       c3                      retq   
    0.00 :	   8365e:       66 90                   xchg   %ax,%ax
    0.00 :	   83660:       48 89 97 73 ff ff ff    mov    %rdx,-0x8d(%rdi)
    0.00 :	   83667:       48 89 97 7b ff ff ff    mov    %rdx,-0x85(%rdi)
    0.00 :	   8366e:       48 89 57 83             mov    %rdx,-0x7d(%rdi)
    0.00 :	   83672:       48 89 57 8b             mov    %rdx,-0x75(%rdi)
    0.00 :	   83676:       48 89 57 93             mov    %rdx,-0x6d(%rdi)
    0.00 :	   8367a:       48 89 57 9b             mov    %rdx,-0x65(%rdi)
    0.00 :	   8367e:       48 89 57 a3             mov    %rdx,-0x5d(%rdi)
    0.00 :	   83682:       48 89 57 ab             mov    %rdx,-0x55(%rdi)
    0.00 :	   83686:       48 89 57 b3             mov    %rdx,-0x4d(%rdi)
    0.00 :	   8368a:       48 89 57 bb             mov    %rdx,-0x45(%rdi)
    0.00 :	   8368e:       48 89 57 c3             mov    %rdx,-0x3d(%rdi)
    0.00 :	   83692:       48 89 57 cb             mov    %rdx,-0x35(%rdi)
    0.00 :	   83696:       48 89 57 d3             mov    %rdx,-0x2d(%rdi)
    0.00 :	   8369a:       48 89 57 db             mov    %rdx,-0x25(%rdi)
    0.00 :	   8369e:       48 89 57 e3             mov    %rdx,-0x1d(%rdi)
    0.00 :	   836a2:       48 89 57 eb             mov    %rdx,-0x15(%rdi)
    0.00 :	   836a6:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   836aa:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   836ad:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   836b0:       c3                      retq   
    0.00 :	   836b1:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   836b8:       0f 1f 84 00 00 00 00 
    0.00 :	   836bf:       00 
    0.00 :	   836c0:       48 89 97 72 ff ff ff    mov    %rdx,-0x8e(%rdi)
    0.00 :	   836c7:       48 89 97 7a ff ff ff    mov    %rdx,-0x86(%rdi)
    0.00 :	   836ce:       48 89 57 82             mov    %rdx,-0x7e(%rdi)
    0.00 :	   836d2:       48 89 57 8a             mov    %rdx,-0x76(%rdi)
    0.00 :	   836d6:       48 89 57 92             mov    %rdx,-0x6e(%rdi)
    0.00 :	   836da:       48 89 57 9a             mov    %rdx,-0x66(%rdi)
    0.00 :	   836de:       48 89 57 a2             mov    %rdx,-0x5e(%rdi)
    0.00 :	   836e2:       48 89 57 aa             mov    %rdx,-0x56(%rdi)
    0.00 :	   836e6:       48 89 57 b2             mov    %rdx,-0x4e(%rdi)
    0.00 :	   836ea:       48 89 57 ba             mov    %rdx,-0x46(%rdi)
    0.00 :	   836ee:       48 89 57 c2             mov    %rdx,-0x3e(%rdi)
    0.00 :	   836f2:       48 89 57 ca             mov    %rdx,-0x36(%rdi)
    0.00 :	   836f6:       48 89 57 d2             mov    %rdx,-0x2e(%rdi)
    0.00 :	   836fa:       48 89 57 da             mov    %rdx,-0x26(%rdi)
    0.00 :	   836fe:       48 89 57 e2             mov    %rdx,-0x1e(%rdi)
    0.00 :	   83702:       48 89 57 ea             mov    %rdx,-0x16(%rdi)
    0.00 :	   83706:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   8370a:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   8370d:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83711:       c3                      retq   
    0.00 :	   83712:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83719:       1f 84 00 00 00 00 00 
    0.00 :	   83720:       48 89 97 71 ff ff ff    mov    %rdx,-0x8f(%rdi)
    0.00 :	   83727:       48 89 97 79 ff ff ff    mov    %rdx,-0x87(%rdi)
    0.00 :	   8372e:       48 89 57 81             mov    %rdx,-0x7f(%rdi)
    0.00 :	   83732:       48 89 57 89             mov    %rdx,-0x77(%rdi)
    0.00 :	   83736:       48 89 57 91             mov    %rdx,-0x6f(%rdi)
    0.00 :	   8373a:       48 89 57 99             mov    %rdx,-0x67(%rdi)
    0.00 :	   8373e:       48 89 57 a1             mov    %rdx,-0x5f(%rdi)
    0.00 :	   83742:       48 89 57 a9             mov    %rdx,-0x57(%rdi)
    0.00 :	   83746:       48 89 57 b1             mov    %rdx,-0x4f(%rdi)
    0.00 :	   8374a:       48 89 57 b9             mov    %rdx,-0x47(%rdi)
    0.00 :	   8374e:       48 89 57 c1             mov    %rdx,-0x3f(%rdi)
    0.00 :	   83752:       48 89 57 c9             mov    %rdx,-0x37(%rdi)
    0.00 :	   83756:       48 89 57 d1             mov    %rdx,-0x2f(%rdi)
    0.00 :	   8375a:       48 89 57 d9             mov    %rdx,-0x27(%rdi)
    0.00 :	   8375e:       48 89 57 e1             mov    %rdx,-0x1f(%rdi)
    0.00 :	   83762:       48 89 57 e9             mov    %rdx,-0x17(%rdi)
    0.00 :	   83766:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   8376a:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   8376d:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83771:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83774:       c3                      retq   
    0.00 :	   83775:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8377c:       00 00 00 00 
    0.00 :	   83780:       49 c7 c2 10 00 00 00    mov    $0x10,%r10
    0.00 :	   83787:       49 89 f9                mov    %rdi,%r9
    0.00 :	   8378a:       49 83 e1 0f             and    $0xf,%r9
    0.00 :	   8378e:       4d 29 ca                sub    %r9,%r10
    0.00 :	   83791:       49 83 e2 0f             and    $0xf,%r10
    0.00 :	   83795:       4c 01 d7                add    %r10,%rdi
    0.00 :	   83798:       4d 29 d0                sub    %r10,%r8
    0.00 :	   8379b:       4c 8d 1d 98 00 00 00    lea    0x98(%rip),%r11        # 8383a <__GI_memset+0x3ca>
    0.00 :	   837a2:       48 8d 0d 97 2b 0b 00    lea    0xb2b97(%rip),%rcx        # 136340 <next_state.9261+0x1bc>
    0.00 :	   837a9:       4a 0f bf 0c 51          movswq (%rcx,%r10,2),%rcx
    0.00 :	   837ae:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   837b2:       41 ff e3                jmpq   *%r11
    0.00 :	   837b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837bc:       00 00 00 00 
    0.00 :	   837c0:       88 57 f3                mov    %dl,-0xd(%rdi)
    0.00 :	   837c3:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   837c6:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837ca:       eb 6e                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   837d0:       88 57 f7                mov    %dl,-0x9(%rdi)
    0.00 :	   837d3:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837d7:       eb 61                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   837e0:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   837e3:       eb 55                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837e5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837ec:       00 00 00 00 
    0.00 :	   837f0:       88 57 f5                mov    %dl,-0xb(%rdi)
    0.00 :	   837f3:       66 89 57 f6             mov    %dx,-0xa(%rdi)
    0.00 :	   837f7:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837fb:       eb 3d                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837fd:       0f 1f 00                nopl   (%rax)
    0.00 :	   83800:       88 57 fd                mov    %dl,-0x3(%rdi)
    0.00 :	   83803:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83807:       eb 31                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83809:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83810:       88 57 fb                mov    %dl,-0x5(%rdi)
    0.00 :	   83813:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83816:       eb 22                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83818:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   8381f:       00 
    0.00 :	   83820:       88 57 f1                mov    %dl,-0xf(%rdi)
    0.00 :	   83823:       66 89 57 f2             mov    %dx,-0xe(%rdi)
    0.00 :	   83827:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   8382a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8382e:       eb 0a                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83830:       88 57 f9                mov    %dl,-0x7(%rdi)
    0.00 :	   83833:       66 89 57 fa             mov    %dx,-0x6(%rdi)
    0.00 :	   83837:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8383a:       66 48 0f 6e c2          movq   %rdx,%xmm0
    0.00 :	   8383f:       66 0f 6c c0             punpcklqdq %xmm0,%xmm0
    0.00 :	   83843:       49 81 f8 b0 00 00 00    cmp    $0xb0,%r8
    0.00 :	   8384a:       0f 83 d0 04 00 00       jae    83d20 <__GI_memset+0x8b0>
    0.00 :	   83850:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83853:       4c 8d 0d 53 00 00 00    lea    0x53(%rip),%r9        # 838ad <__GI_memset+0x43d>
    0.00 :	   8385a:       48 8d 0d ff 2a 0b 00    lea    0xb2aff(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83861:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83866:       4e 8d 0c 09             lea    (%rcx,%r9,1),%r9
    0.00 :	   8386a:       41 ff e1                jmpq   *%r9
    0.00 :	   8386d:       66 0f 7f 87 50 ff ff    movdqa %xmm0,-0xb0(%rdi)
    0.00 :	   83874:       ff 
    0.00 :	   83875:       66 0f 7f 87 60 ff ff    movdqa %xmm0,-0xa0(%rdi)
    0.00 :	   8387c:       ff 
    0.00 :	   8387d:       66 0f 7f 87 70 ff ff    movdqa %xmm0,-0x90(%rdi)
    0.00 :	   83884:       ff 
    0.00 :	   83885:       66 0f 7f 47 80          movdqa %xmm0,-0x80(%rdi)
    0.00 :	   8388a:       66 0f 7f 47 90          movdqa %xmm0,-0x70(%rdi)
    0.00 :	   8388f:       66 0f 7f 47 a0          movdqa %xmm0,-0x60(%rdi)
    0.00 :	   83894:       66 0f 7f 47 b0          movdqa %xmm0,-0x50(%rdi)
    0.00 :	   83899:       66 0f 7f 47 c0          movdqa %xmm0,-0x40(%rdi)
    0.00 :	   8389e:       66 0f 7f 47 d0          movdqa %xmm0,-0x30(%rdi)
    0.00 :	   838a3:       66 0f 7f 47 e0          movdqa %xmm0,-0x20(%rdi)
    0.00 :	   838a8:       66 0f 7f 47 f0          movdqa %xmm0,-0x10(%rdi)
    0.00 :	   838ad:       c3                      retq   
    0.00 :	   838ae:       66 0f 7f 87 4f ff ff    movdqa %xmm0,-0xb1(%rdi)
    0.00 :	   838b5:       ff 
    0.00 :	   838b6:       66 0f 7f 87 5f ff ff    movdqa %xmm0,-0xa1(%rdi)
    0.00 :	   838bd:       ff 
    0.00 :	   838be:       66 0f 7f 87 6f ff ff    movdqa %xmm0,-0x91(%rdi)
    0.00 :	   838c5:       ff 
    0.00 :	   838c6:       66 0f 7f 87 7f ff ff    movdqa %xmm0,-0x81(%rdi)
    0.00 :	   838cd:       ff 
    0.00 :	   838ce:       66 0f 7f 47 8f          movdqa %xmm0,-0x71(%rdi)
    0.00 :	   838d3:       66 0f 7f 47 9f          movdqa %xmm0,-0x61(%rdi)
    0.00 :	   838d8:       66 0f 7f 47 af          movdqa %xmm0,-0x51(%rdi)
    0.00 :	   838dd:       66 0f 7f 47 bf          movdqa %xmm0,-0x41(%rdi)
    0.00 :	   838e2:       66 0f 7f 47 cf          movdqa %xmm0,-0x31(%rdi)
    0.00 :	   838e7:       66 0f 7f 47 df          movdqa %xmm0,-0x21(%rdi)
    0.00 :	   838ec:       66 0f 7f 47 ef          movdqa %xmm0,-0x11(%rdi)
    0.00 :	   838f1:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   838f4:       c3                      retq   
    0.00 :	   838f5:       66 0f 7f 87 4e ff ff    movdqa %xmm0,-0xb2(%rdi)
    0.00 :	   838fc:       ff 
    0.00 :	   838fd:       66 0f 7f 87 5e ff ff    movdqa %xmm0,-0xa2(%rdi)
    0.00 :	   83904:       ff 
    0.00 :	   83905:       66 0f 7f 87 6e ff ff    movdqa %xmm0,-0x92(%rdi)
    0.00 :	   8390c:       ff 
    0.00 :	   8390d:       66 0f 7f 87 7e ff ff    movdqa %xmm0,-0x82(%rdi)
    0.00 :	   83914:       ff 
    0.00 :	   83915:       66 0f 7f 47 8e          movdqa %xmm0,-0x72(%rdi)
    0.00 :	   8391a:       66 0f 7f 47 9e          movdqa %xmm0,-0x62(%rdi)
    0.00 :	   8391f:       66 0f 7f 47 ae          movdqa %xmm0,-0x52(%rdi)
    0.00 :	   83924:       66 0f 7f 47 be          movdqa %xmm0,-0x42(%rdi)
    0.00 :	   83929:       66 0f 7f 47 ce          movdqa %xmm0,-0x32(%rdi)
    0.00 :	   8392e:       66 0f 7f 47 de          movdqa %xmm0,-0x22(%rdi)
    0.00 :	   83933:       66 0f 7f 47 ee          movdqa %xmm0,-0x12(%rdi)
    0.00 :	   83938:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   8393c:       c3                      retq   
    0.00 :	   8393d:       66 0f 7f 87 4d ff ff    movdqa %xmm0,-0xb3(%rdi)
    0.00 :	   83944:       ff 
    0.00 :	   83945:       66 0f 7f 87 5d ff ff    movdqa %xmm0,-0xa3(%rdi)
    0.00 :	   8394c:       ff 
    0.00 :	   8394d:       66 0f 7f 87 6d ff ff    movdqa %xmm0,-0x93(%rdi)
    0.00 :	   83954:       ff 
    0.00 :	   83955:       66 0f 7f 87 7d ff ff    movdqa %xmm0,-0x83(%rdi)
    0.00 :	   8395c:       ff 
    0.00 :	   8395d:       66 0f 7f 47 8d          movdqa %xmm0,-0x73(%rdi)
    0.00 :	   83962:       66 0f 7f 47 9d          movdqa %xmm0,-0x63(%rdi)
    0.00 :	   83967:       66 0f 7f 47 ad          movdqa %xmm0,-0x53(%rdi)
    0.00 :	   8396c:       66 0f 7f 47 bd          movdqa %xmm0,-0x43(%rdi)
    0.00 :	   83971:       66 0f 7f 47 cd          movdqa %xmm0,-0x33(%rdi)
    0.00 :	   83976:       66 0f 7f 47 dd          movdqa %xmm0,-0x23(%rdi)
    0.00 :	   8397b:       66 0f 7f 47 ed          movdqa %xmm0,-0x13(%rdi)
    0.00 :	   83980:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83984:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83987:       c3                      retq   
    0.00 :	   83988:       66 0f 7f 87 4c ff ff    movdqa %xmm0,-0xb4(%rdi)
    0.00 :	   8398f:       ff 
    0.00 :	   83990:       66 0f 7f 87 5c ff ff    movdqa %xmm0,-0xa4(%rdi)
    0.00 :	   83997:       ff 
    0.00 :	   83998:       66 0f 7f 87 6c ff ff    movdqa %xmm0,-0x94(%rdi)
    0.00 :	   8399f:       ff 
    0.00 :	   839a0:       66 0f 7f 87 7c ff ff    movdqa %xmm0,-0x84(%rdi)
    0.00 :	   839a7:       ff 
    0.00 :	   839a8:       66 0f 7f 47 8c          movdqa %xmm0,-0x74(%rdi)
    0.00 :	   839ad:       66 0f 7f 47 9c          movdqa %xmm0,-0x64(%rdi)
    0.00 :	   839b2:       66 0f 7f 47 ac          movdqa %xmm0,-0x54(%rdi)
    0.00 :	   839b7:       66 0f 7f 47 bc          movdqa %xmm0,-0x44(%rdi)
    0.00 :	   839bc:       66 0f 7f 47 cc          movdqa %xmm0,-0x34(%rdi)
    0.00 :	   839c1:       66 0f 7f 47 dc          movdqa %xmm0,-0x24(%rdi)
    0.00 :	   839c6:       66 0f 7f 47 ec          movdqa %xmm0,-0x14(%rdi)
    0.00 :	   839cb:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   839ce:       c3                      retq   
    0.00 :	   839cf:       66 0f 7f 87 4b ff ff    movdqa %xmm0,-0xb5(%rdi)
    0.00 :	   839d6:       ff 
    0.00 :	   839d7:       66 0f 7f 87 5b ff ff    movdqa %xmm0,-0xa5(%rdi)
    0.00 :	   839de:       ff 
    0.00 :	   839df:       66 0f 7f 87 6b ff ff    movdqa %xmm0,-0x95(%rdi)
    0.00 :	   839e6:       ff 
    0.00 :	   839e7:       66 0f 7f 87 7b ff ff    movdqa %xmm0,-0x85(%rdi)
    0.00 :	   839ee:       ff 
    0.00 :	   839ef:       66 0f 7f 47 8b          movdqa %xmm0,-0x75(%rdi)
    0.00 :	   839f4:       66 0f 7f 47 9b          movdqa %xmm0,-0x65(%rdi)
    0.00 :	   839f9:       66 0f 7f 47 ab          movdqa %xmm0,-0x55(%rdi)
    0.00 :	   839fe:       66 0f 7f 47 bb          movdqa %xmm0,-0x45(%rdi)
    0.00 :	   83a03:       66 0f 7f 47 cb          movdqa %xmm0,-0x35(%rdi)
    0.00 :	   83a08:       66 0f 7f 47 db          movdqa %xmm0,-0x25(%rdi)
    0.00 :	   83a0d:       66 0f 7f 47 eb          movdqa %xmm0,-0x15(%rdi)
    0.00 :	   83a12:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83a15:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83a18:       c3                      retq   
    0.00 :	   83a19:       66 0f 7f 87 4a ff ff    movdqa %xmm0,-0xb6(%rdi)
    0.00 :	   83a20:       ff 
    0.00 :	   83a21:       66 0f 7f 87 5a ff ff    movdqa %xmm0,-0xa6(%rdi)
    0.00 :	   83a28:       ff 
    0.00 :	   83a29:       66 0f 7f 87 6a ff ff    movdqa %xmm0,-0x96(%rdi)
    0.00 :	   83a30:       ff 
    0.00 :	   83a31:       66 0f 7f 87 7a ff ff    movdqa %xmm0,-0x86(%rdi)
    0.00 :	   83a38:       ff 
    0.00 :	   83a39:       66 0f 7f 47 8a          movdqa %xmm0,-0x76(%rdi)
    0.00 :	   83a3e:       66 0f 7f 47 9a          movdqa %xmm0,-0x66(%rdi)
    0.00 :	   83a43:       66 0f 7f 47 aa          movdqa %xmm0,-0x56(%rdi)
    0.00 :	   83a48:       66 0f 7f 47 ba          movdqa %xmm0,-0x46(%rdi)
    0.00 :	   83a4d:       66 0f 7f 47 ca          movdqa %xmm0,-0x36(%rdi)
    0.00 :	   83a52:       66 0f 7f 47 da          movdqa %xmm0,-0x26(%rdi)
    0.00 :	   83a57:       66 0f 7f 47 ea          movdqa %xmm0,-0x16(%rdi)
    0.00 :	   83a5c:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83a5f:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83a63:       c3                      retq   
    0.00 :	   83a64:       66 0f 7f 87 49 ff ff    movdqa %xmm0,-0xb7(%rdi)
    0.00 :	   83a6b:       ff 
    0.00 :	   83a6c:       66 0f 7f 87 59 ff ff    movdqa %xmm0,-0xa7(%rdi)
    0.00 :	   83a73:       ff 
    0.00 :	   83a74:       66 0f 7f 87 69 ff ff    movdqa %xmm0,-0x97(%rdi)
    0.00 :	   83a7b:       ff 
    0.00 :	   83a7c:       66 0f 7f 87 79 ff ff    movdqa %xmm0,-0x87(%rdi)
    0.00 :	   83a83:       ff 
    0.00 :	   83a84:       66 0f 7f 47 89          movdqa %xmm0,-0x77(%rdi)
    0.00 :	   83a89:       66 0f 7f 47 99          movdqa %xmm0,-0x67(%rdi)
    0.00 :	   83a8e:       66 0f 7f 47 a9          movdqa %xmm0,-0x57(%rdi)
    0.00 :	   83a93:       66 0f 7f 47 b9          movdqa %xmm0,-0x47(%rdi)
    0.00 :	   83a98:       66 0f 7f 47 c9          movdqa %xmm0,-0x37(%rdi)
    0.00 :	   83a9d:       66 0f 7f 47 d9          movdqa %xmm0,-0x27(%rdi)
    0.00 :	   83aa2:       66 0f 7f 47 e9          movdqa %xmm0,-0x17(%rdi)
    0.00 :	   83aa7:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83aaa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83aae:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83ab1:       c3                      retq   
    0.00 :	   83ab2:       66 0f 7f 87 48 ff ff    movdqa %xmm0,-0xb8(%rdi)
    0.00 :	   83ab9:       ff 
    0.00 :	   83aba:       66 0f 7f 87 58 ff ff    movdqa %xmm0,-0xa8(%rdi)
    0.00 :	   83ac1:       ff 
    0.00 :	   83ac2:       66 0f 7f 87 68 ff ff    movdqa %xmm0,-0x98(%rdi)
    0.00 :	   83ac9:       ff 
    0.00 :	   83aca:       66 0f 7f 87 78 ff ff    movdqa %xmm0,-0x88(%rdi)
    0.00 :	   83ad1:       ff 
    0.00 :	   83ad2:       66 0f 7f 47 88          movdqa %xmm0,-0x78(%rdi)
    0.00 :	   83ad7:       66 0f 7f 47 98          movdqa %xmm0,-0x68(%rdi)
    0.00 :	   83adc:       66 0f 7f 47 a8          movdqa %xmm0,-0x58(%rdi)
    0.00 :	   83ae1:       66 0f 7f 47 b8          movdqa %xmm0,-0x48(%rdi)
    0.00 :	   83ae6:       66 0f 7f 47 c8          movdqa %xmm0,-0x38(%rdi)
    0.00 :	   83aeb:       66 0f 7f 47 d8          movdqa %xmm0,-0x28(%rdi)
    0.00 :	   83af0:       66 0f 7f 47 e8          movdqa %xmm0,-0x18(%rdi)
    0.00 :	   83af5:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   83af9:       c3                      retq   
    0.00 :	   83afa:       66 0f 7f 87 47 ff ff    movdqa %xmm0,-0xb9(%rdi)
    0.00 :	   83b01:       ff 
    0.00 :	   83b02:       66 0f 7f 87 57 ff ff    movdqa %xmm0,-0xa9(%rdi)
    0.00 :	   83b09:       ff 
    0.00 :	   83b0a:       66 0f 7f 87 67 ff ff    movdqa %xmm0,-0x99(%rdi)
    0.00 :	   83b11:       ff 
    0.00 :	   83b12:       66 0f 7f 87 77 ff ff    movdqa %xmm0,-0x89(%rdi)
    0.00 :	   83b19:       ff 
    0.00 :	   83b1a:       66 0f 7f 47 87          movdqa %xmm0,-0x79(%rdi)
    0.00 :	   83b1f:       66 0f 7f 47 97          movdqa %xmm0,-0x69(%rdi)
    0.00 :	   83b24:       66 0f 7f 47 a7          movdqa %xmm0,-0x59(%rdi)
    0.00 :	   83b29:       66 0f 7f 47 b7          movdqa %xmm0,-0x49(%rdi)
    0.00 :	   83b2e:       66 0f 7f 47 c7          movdqa %xmm0,-0x39(%rdi)
    0.00 :	   83b33:       66 0f 7f 47 d7          movdqa %xmm0,-0x29(%rdi)
    0.00 :	   83b38:       66 0f 7f 47 e7          movdqa %xmm0,-0x19(%rdi)
    0.00 :	   83b3d:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   83b41:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83b44:       c3                      retq   
    0.00 :	   83b45:       66 0f 7f 87 46 ff ff    movdqa %xmm0,-0xba(%rdi)
    0.00 :	   83b4c:       ff 
    0.00 :	   83b4d:       66 0f 7f 87 56 ff ff    movdqa %xmm0,-0xaa(%rdi)
    0.00 :	   83b54:       ff 
    0.00 :	   83b55:       66 0f 7f 87 66 ff ff    movdqa %xmm0,-0x9a(%rdi)
    0.00 :	   83b5c:       ff 
    0.00 :	   83b5d:       66 0f 7f 87 76 ff ff    movdqa %xmm0,-0x8a(%rdi)
    0.00 :	   83b64:       ff 
    0.00 :	   83b65:       66 0f 7f 47 86          movdqa %xmm0,-0x7a(%rdi)
    0.00 :	   83b6a:       66 0f 7f 47 96          movdqa %xmm0,-0x6a(%rdi)
    0.00 :	   83b6f:       66 0f 7f 47 a6          movdqa %xmm0,-0x5a(%rdi)
    0.00 :	   83b74:       66 0f 7f 47 b6          movdqa %xmm0,-0x4a(%rdi)
    0.00 :	   83b79:       66 0f 7f 47 c6          movdqa %xmm0,-0x3a(%rdi)
    0.00 :	   83b7e:       66 0f 7f 47 d6          movdqa %xmm0,-0x2a(%rdi)
    0.00 :	   83b83:       66 0f 7f 47 e6          movdqa %xmm0,-0x1a(%rdi)
    0.00 :	   83b88:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   83b8c:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83b90:       c3                      retq   
    0.00 :	   83b91:       66 0f 7f 87 45 ff ff    movdqa %xmm0,-0xbb(%rdi)
    0.00 :	   83b98:       ff 
    0.00 :	   83b99:       66 0f 7f 87 55 ff ff    movdqa %xmm0,-0xab(%rdi)
    0.00 :	   83ba0:       ff 
    0.00 :	   83ba1:       66 0f 7f 87 65 ff ff    movdqa %xmm0,-0x9b(%rdi)
    0.00 :	   83ba8:       ff 
    0.00 :	   83ba9:       66 0f 7f 87 75 ff ff    movdqa %xmm0,-0x8b(%rdi)
    0.00 :	   83bb0:       ff 
    0.00 :	   83bb1:       66 0f 7f 47 85          movdqa %xmm0,-0x7b(%rdi)
    0.00 :	   83bb6:       66 0f 7f 47 95          movdqa %xmm0,-0x6b(%rdi)
    0.00 :	   83bbb:       66 0f 7f 47 a5          movdqa %xmm0,-0x5b(%rdi)
    0.00 :	   83bc0:       66 0f 7f 47 b5          movdqa %xmm0,-0x4b(%rdi)
    0.00 :	   83bc5:       66 0f 7f 47 c5          movdqa %xmm0,-0x3b(%rdi)
    0.00 :	   83bca:       66 0f 7f 47 d5          movdqa %xmm0,-0x2b(%rdi)
    0.00 :	   83bcf:       66 0f 7f 47 e5          movdqa %xmm0,-0x1b(%rdi)
    0.00 :	   83bd4:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   83bd8:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83bdc:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83bdf:       c3                      retq   
    0.00 :	   83be0:       66 0f 7f 87 44 ff ff    movdqa %xmm0,-0xbc(%rdi)
    0.00 :	   83be7:       ff 
    0.00 :	   83be8:       66 0f 7f 87 54 ff ff    movdqa %xmm0,-0xac(%rdi)
    0.00 :	   83bef:       ff 
    0.00 :	   83bf0:       66 0f 7f 87 64 ff ff    movdqa %xmm0,-0x9c(%rdi)
    0.00 :	   83bf7:       ff 
    0.00 :	   83bf8:       66 0f 7f 87 74 ff ff    movdqa %xmm0,-0x8c(%rdi)
    0.00 :	   83bff:       ff 
    0.00 :	   83c00:       66 0f 7f 47 84          movdqa %xmm0,-0x7c(%rdi)
    0.00 :	   83c05:       66 0f 7f 47 94          movdqa %xmm0,-0x6c(%rdi)
    0.00 :	   83c0a:       66 0f 7f 47 a4          movdqa %xmm0,-0x5c(%rdi)
    0.00 :	   83c0f:       66 0f 7f 47 b4          movdqa %xmm0,-0x4c(%rdi)
    0.00 :	   83c14:       66 0f 7f 47 c4          movdqa %xmm0,-0x3c(%rdi)
    0.00 :	   83c19:       66 0f 7f 47 d4          movdqa %xmm0,-0x2c(%rdi)
    0.00 :	   83c1e:       66 0f 7f 47 e4          movdqa %xmm0,-0x1c(%rdi)
    0.00 :	   83c23:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   83c27:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83c2a:       c3                      retq   
    0.00 :	   83c2b:       66 0f 7f 87 43 ff ff    movdqa %xmm0,-0xbd(%rdi)
    0.00 :	   83c32:       ff 
    0.00 :	   83c33:       66 0f 7f 87 53 ff ff    movdqa %xmm0,-0xad(%rdi)
    0.00 :	   83c3a:       ff 
    0.00 :	   83c3b:       66 0f 7f 87 63 ff ff    movdqa %xmm0,-0x9d(%rdi)
    0.00 :	   83c42:       ff 
    0.00 :	   83c43:       66 0f 7f 87 73 ff ff    movdqa %xmm0,-0x8d(%rdi)
    0.00 :	   83c4a:       ff 
    0.00 :	   83c4b:       66 0f 7f 47 83          movdqa %xmm0,-0x7d(%rdi)
    0.00 :	   83c50:       66 0f 7f 47 93          movdqa %xmm0,-0x6d(%rdi)
    0.00 :	   83c55:       66 0f 7f 47 a3          movdqa %xmm0,-0x5d(%rdi)
    0.00 :	   83c5a:       66 0f 7f 47 b3          movdqa %xmm0,-0x4d(%rdi)
    0.00 :	   83c5f:       66 0f 7f 47 c3          movdqa %xmm0,-0x3d(%rdi)
    0.00 :	   83c64:       66 0f 7f 47 d3          movdqa %xmm0,-0x2d(%rdi)
    0.00 :	   83c69:       66 0f 7f 47 e3          movdqa %xmm0,-0x1d(%rdi)
    0.00 :	   83c6e:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   83c72:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83c75:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83c78:       c3                      retq   
    0.00 :	   83c79:       66 0f 7f 87 42 ff ff    movdqa %xmm0,-0xbe(%rdi)
    0.00 :	   83c80:       ff 
    0.00 :	   83c81:       66 0f 7f 87 52 ff ff    movdqa %xmm0,-0xae(%rdi)
    0.00 :	   83c88:       ff 
    0.00 :	   83c89:       66 0f 7f 87 62 ff ff    movdqa %xmm0,-0x9e(%rdi)
    0.00 :	   83c90:       ff 
    0.00 :	   83c91:       66 0f 7f 87 72 ff ff    movdqa %xmm0,-0x8e(%rdi)
    0.00 :	   83c98:       ff 
    0.00 :	   83c99:       66 0f 7f 47 82          movdqa %xmm0,-0x7e(%rdi)
    0.00 :	   83c9e:       66 0f 7f 47 92          movdqa %xmm0,-0x6e(%rdi)
    0.00 :	   83ca3:       66 0f 7f 47 a2          movdqa %xmm0,-0x5e(%rdi)
    0.00 :	   83ca8:       66 0f 7f 47 b2          movdqa %xmm0,-0x4e(%rdi)
    0.00 :	   83cad:       66 0f 7f 47 c2          movdqa %xmm0,-0x3e(%rdi)
    0.00 :	   83cb2:       66 0f 7f 47 d2          movdqa %xmm0,-0x2e(%rdi)
    0.00 :	   83cb7:       66 0f 7f 47 e2          movdqa %xmm0,-0x1e(%rdi)
    0.00 :	   83cbc:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   83cc0:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83cc3:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83cc7:       c3                      retq   
    0.00 :	   83cc8:       66 0f 7f 87 41 ff ff    movdqa %xmm0,-0xbf(%rdi)
    0.00 :	   83ccf:       ff 
    0.00 :	   83cd0:       66 0f 7f 87 51 ff ff    movdqa %xmm0,-0xaf(%rdi)
    0.00 :	   83cd7:       ff 
    0.00 :	   83cd8:       66 0f 7f 87 61 ff ff    movdqa %xmm0,-0x9f(%rdi)
    0.00 :	   83cdf:       ff 
    0.00 :	   83ce0:       66 0f 7f 87 71 ff ff    movdqa %xmm0,-0x8f(%rdi)
    0.00 :	   83ce7:       ff 
    0.00 :	   83ce8:       66 0f 7f 47 81          movdqa %xmm0,-0x7f(%rdi)
    0.00 :	   83ced:       66 0f 7f 47 91          movdqa %xmm0,-0x6f(%rdi)
    0.00 :	   83cf2:       66 0f 7f 47 a1          movdqa %xmm0,-0x5f(%rdi)
    0.00 :	   83cf7:       66 0f 7f 47 b1          movdqa %xmm0,-0x4f(%rdi)
    0.00 :	   83cfc:       66 0f 7f 47 c1          movdqa %xmm0,-0x3f(%rdi)
    0.00 :	   83d01:       66 0f 7f 47 d1          movdqa %xmm0,-0x2f(%rdi)
    0.00 :	   83d06:       66 0f 7f 47 e1          movdqa %xmm0,-0x1f(%rdi)
    0.00 :	   83d0b:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   83d0f:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83d12:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83d16:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83d19:       c3                      retq   
    0.00 :	   83d1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   83d20:       44 8b 0d 11 e4 2e 00    mov    0x2ee411(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83d27:       4d 39 c8                cmp    %r9,%r8
    0.00 :	   83d2a:       77 64                   ja     83d90 <__GI_memset+0x920>
    0.00 :	   83d2c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   83d30:       4d 8d 40 80             lea    -0x80(%r8),%r8
    0.00 :	   83d34:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
    0.00 :	   83d3b:       66 0f 7f 07             movdqa %xmm0,(%rdi)
    0.00 :	   83d3f:       66 0f 7f 47 10          movdqa %xmm0,0x10(%rdi)
    0.00 :	   83d44:       66 0f 7f 47 20          movdqa %xmm0,0x20(%rdi)
    0.00 :	   83d49:       66 0f 7f 47 30          movdqa %xmm0,0x30(%rdi)
    0.00 :	   83d4e:       66 0f 7f 47 40          movdqa %xmm0,0x40(%rdi)
    0.00 :	   83d53:       66 0f 7f 47 50          movdqa %xmm0,0x50(%rdi)
    0.00 :	   83d58:       66 0f 7f 47 60          movdqa %xmm0,0x60(%rdi)
    0.00 :	   83d5d:       66 0f 7f 47 70          movdqa %xmm0,0x70(%rdi)
    0.00 :	   83d62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83d69:       73 c5                   jae    83d30 <__GI_memset+0x8c0>
    0.00 :	   83d6b:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83d6e:       4c 8d 1d 38 fb ff ff    lea    -0x4c8(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83d75:       48 8d 0d e4 25 0b 00    lea    0xb25e4(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83d7c:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83d81:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83d85:       41 ff e3                jmpq   *%r11
    0.00 :	   83d88:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d8f:       00 
    0.00 :	   83d90:       49 83 f9 00             cmp    $0x0,%r9
    0.00 :	   83d94:       74 9a                   je     83d30 <__GI_memset+0x8c0>
    0.00 :	   83d96:       eb 08                   jmp    83da0 <__GI_memset+0x930>
    0.00 :	   83d98:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d9f:       00 
    0.00 :	   83da0:       4d 8d 40 80             lea    -0x80(%r8),%r8
    0.00 :	   83da4:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
    0.00 :	   83dab:       66 0f e7 07             movntdq %xmm0,(%rdi)
    0.00 :	   83daf:       66 0f e7 47 10          movntdq %xmm0,0x10(%rdi)
    0.00 :	   83db4:       66 0f e7 47 20          movntdq %xmm0,0x20(%rdi)
    0.00 :	   83db9:       66 0f e7 47 30          movntdq %xmm0,0x30(%rdi)
    0.00 :	   83dbe:       66 0f e7 47 40          movntdq %xmm0,0x40(%rdi)
    0.00 :	   83dc3:       66 0f e7 47 50          movntdq %xmm0,0x50(%rdi)
    0.00 :	   83dc8:       66 0f e7 47 60          movntdq %xmm0,0x60(%rdi)
    0.00 :	   83dcd:       66 0f e7 47 70          movntdq %xmm0,0x70(%rdi)
    0.00 :	   83dd2:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83dd9:       73 c5                   jae    83da0 <__GI_memset+0x930>
    0.00 :	   83ddb:       0f ae f8                sfence 
    0.00 :	   83dde:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83de1:       4c 8d 1d c5 fa ff ff    lea    -0x53b(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83de8:       48 8d 0d 71 25 0b 00    lea    0xb2571(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83def:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83df4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83df8:       41 ff e3                jmpq   *%r11
    0.00 :	   83dfb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83e00:       49 81 f8 00 20 00 00    cmp    $0x2000,%r8
    0.00 :	   83e07:       0f 83 83 00 00 00       jae    83e90 <__GI_memset+0xa20>
    0.00 :	   83e0d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e10:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83e13:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83e17:       74 52                   je     83e6b <__GI_memset+0x9fb>
    0.00 :	   83e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83e20:       48 ff c9                dec    %rcx
    0.00 :	   83e23:       48 89 17                mov    %rdx,(%rdi)
    0.00 :	   83e26:       48 89 57 08             mov    %rdx,0x8(%rdi)
    0.00 :	   83e2a:       48 89 57 10             mov    %rdx,0x10(%rdi)
    0.00 :	   83e2e:       48 89 57 18             mov    %rdx,0x18(%rdi)
    0.00 :	   83e32:       48 89 57 20             mov    %rdx,0x20(%rdi)
    0.00 :	   83e36:       48 89 57 28             mov    %rdx,0x28(%rdi)
    0.00 :	   83e3a:       48 89 57 30             mov    %rdx,0x30(%rdi)
    0.00 :	   83e3e:       48 89 57 38             mov    %rdx,0x38(%rdi)
    0.00 :	   83e42:       48 89 57 40             mov    %rdx,0x40(%rdi)
    0.00 :	   83e46:       48 89 57 48             mov    %rdx,0x48(%rdi)
    0.00 :	   83e4a:       48 89 57 50             mov    %rdx,0x50(%rdi)
    0.00 :	   83e4e:       48 89 57 58             mov    %rdx,0x58(%rdi)
    0.00 :	   83e52:       48 89 57 60             mov    %rdx,0x60(%rdi)
    0.00 :	   83e56:       48 89 57 68             mov    %rdx,0x68(%rdi)
    0.00 :	   83e5a:       48 89 57 70             mov    %rdx,0x70(%rdi)
    0.00 :	   83e5e:       48 89 57 78             mov    %rdx,0x78(%rdi)
    0.00 :	   83e62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83e69:       75 b5                   jne    83e20 <__GI_memset+0x9b0>
    0.00 :	   83e6b:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83e6f:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83e73:       4c 8d 1d 42 f6 ff ff    lea    -0x9be(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83e7a:       48 8d 0d 8f 23 0b 00    lea    0xb238f(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83e81:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83e86:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83e8a:       41 ff e3                jmpq   *%r11
    0.00 :	   83e8d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e90:       44 8b 0d a1 e2 2e 00    mov    0x2ee2a1(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83e97:       4d 39 c1                cmp    %r8,%r9
    0.00 :	   83e9a:       4d 0f 47 c8             cmova  %r8,%r9
    0.00 :	   83e9e:       76 10                   jbe    83eb0 <__GI_memset+0xa40>
    0.00 :	   83ea0:       49 81 f8 00 00 01 00    cmp    $0x10000,%r8
    0.00 :	   83ea7:       0f 83 63 ff ff ff       jae    83e10 <__GI_memset+0x9a0>
    0.00 :	   83ead:       0f 1f 00                nopl   (%rax)
    0.00 :	   83eb0:       4c 89 c9                mov    %r9,%rcx
    0.00 :	   83eb3:       49 83 e1 f8             and    $0xfffffffffffffff8,%r9
    0.00 :	   83eb7:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   83ebb:       74 07                   je     83ec4 <__GI_memset+0xa54>
    0.00 :	   83ebd:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ebf:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	   83ec2:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ec4:       4d 29 c8                sub    %r9,%r8
    0.00 :	   83ec7:       77 27                   ja     83ef0 <__GI_memset+0xa80>
    0.00 :	   83ec9:       41 83 e0 07             and    $0x7,%r8d
    0.00 :	   83ecd:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83ed1:       4c 8d 1d e4 f5 ff ff    lea    -0xa1c(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83ed8:       48 8d 0d 31 23 0b 00    lea    0xb2331(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83edf:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83ee4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83ee8:       41 ff e3                jmpq   *%r11
    0.00 :	   83eeb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83ef0:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83ef3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83ef7:       74 65                   je     83f5e <__GI_memset+0xaee>
    0.00 :	   83ef9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83f00:       48 ff c9                dec    %rcx
    0.00 :	   83f03:       48 0f c3 17             movnti %rdx,(%rdi)
    0.00 :	   83f07:       48 0f c3 57 08          movnti %rdx,0x8(%rdi)
    0.00 :	   83f0c:       48 0f c3 57 10          movnti %rdx,0x10(%rdi)
    0.00 :	   83f11:       48 0f c3 57 18          movnti %rdx,0x18(%rdi)
    0.00 :	   83f16:       48 0f c3 57 20          movnti %rdx,0x20(%rdi)
    0.00 :	   83f1b:       48 0f c3 57 28          movnti %rdx,0x28(%rdi)
    0.00 :	   83f20:       48 0f c3 57 30          movnti %rdx,0x30(%rdi)
    0.00 :	   83f25:       48 0f c3 57 38          movnti %rdx,0x38(%rdi)
    0.00 :	   83f2a:       48 0f c3 57 40          movnti %rdx,0x40(%rdi)
    0.00 :	   83f2f:       48 0f c3 57 48          movnti %rdx,0x48(%rdi)
    0.00 :	   83f34:       48 0f c3 57 50          movnti %rdx,0x50(%rdi)
    0.00 :	   83f39:       48 0f c3 57 58          movnti %rdx,0x58(%rdi)
    0.00 :	   83f3e:       48 0f c3 57 60          movnti %rdx,0x60(%rdi)
    0.00 :	   83f43:       48 0f c3 57 68          movnti %rdx,0x68(%rdi)
    0.00 :	   83f48:       48 0f c3 57 70          movnti %rdx,0x70(%rdi)
    0.00 :	   83f4d:       48 0f c3 57 78          movnti %rdx,0x78(%rdi)
    0.00 :	   83f52:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83f59:       75 a5                   jne    83f00 <__GI_memset+0xa90>
    0.00 :	   83f5b:       0f ae f8                sfence 
    0.00 :	   83f5e:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83f62:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83f66:       4c 8d 1d 4f f5 ff ff    lea    -0xab1(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83f6d:       48 8d 0d 9c 22 0b 00    lea    0xb229c(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83f74:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83f79:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83f7d:       41 ff e3                jmpq   *%r11

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000db0c0 <__lseek>:
   50.00 :	   db0c0:       83 3d ed c5 29 00 00    cmpl   $0x0,0x29c5ed(%rip)        # 3776b4 <__libc_multiple_threads>
   50.00 :	   db0c7:       75 10                   jne    db0d9 <__lseek_nocancel+0x10>
         :
         :	00000000000db0c9 <__lseek_nocancel>:
    0.00 :	   db0c9:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0ce:       0f 05                   syscall 
    0.00 :	   db0d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db0d6:       73 31                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db0d8:       c3                      retq   
    0.00 :	   db0d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   db0dd:       e8 4e d1 00 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   db0e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   db0e6:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0eb:       0f 05                   syscall 
    0.00 :	   db0ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   db0f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   db0f4:       e8 97 d1 00 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   db0f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   db0fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   db100:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db106:       73 01                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db108:       c3                      retq   
    0.00 :	   db109:       48 8b 0d 28 6d 29 00    mov    0x296d28(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   db110:       31 d2                   xor    %edx,%edx
    0.00 :	   db112:       48 29 c2                sub    %rax,%rdx
    0.00 :	   db115:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   db118:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   db11c:       eb ea                   jmp    db108 <__lseek_nocancel+0x3f>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000dbe70 <recv>:
    0.00 :	   dbe70:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   dbe75:       48 89 6c 24 e0          mov    %rbp,-0x20(%rsp)
    0.00 :	   dbe7a:       89 cb                   mov    %ecx,%ebx
    0.00 :	   dbe7c:       4c 89 64 24 e8          mov    %r12,-0x18(%rsp)
    0.00 :	   dbe81:       4c 89 6c 24 f0          mov    %r13,-0x10(%rsp)
    0.00 :	   dbe86:       49 89 f4                mov    %rsi,%r12
    0.00 :	   dbe89:       4c 89 74 24 f8          mov    %r14,-0x8(%rsp)
    0.00 :	   dbe8e:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	   dbe92:       8b 05 1c b8 29 00       mov    0x29b81c(%rip),%eax        # 3776b4 <__libc_multiple_threads>
  100.00 :	   dbe98:       41 89 fd                mov    %edi,%r13d
    0.00 :	   dbe9b:       48 89 d5                mov    %rdx,%rbp
    0.00 :	   dbe9e:       85 c0                   test   %eax,%eax
    0.00 :	   dbea0:       75 3e                   jne    dbee0 <recv+0x70>
    0.00 :	   dbea2:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   dbea5:       45 31 c0                xor    %r8d,%r8d
    0.00 :	   dbea8:       4c 63 d1                movslq %ecx,%r10
    0.00 :	   dbeab:       48 63 ff                movslq %edi,%rdi
    0.00 :	   dbeae:       b8 2d 00 00 00          mov    $0x2d,%eax
    0.00 :	   dbeb3:       0f 05                   syscall 
    0.00 :	   dbeb5:       48 3d 00 f0 ff ff       cmp    $0xfffffffffffff000,%rax
    0.00 :	   dbebb:       48 89 c3                mov    %rax,%rbx
    0.00 :	   dbebe:       77 56                   ja     dbf16 <recv+0xa6>
    0.00 :	   dbec0:       48 89 d8                mov    %rbx,%rax
    0.00 :	   dbec3:       48 8b 6c 24 08          mov    0x8(%rsp),%rbp
    0.00 :	   dbec8:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	   dbecc:       4c 8b 64 24 10          mov    0x10(%rsp),%r12
    0.00 :	   dbed1:       4c 8b 6c 24 18          mov    0x18(%rsp),%r13
    0.00 :	   dbed6:       4c 8b 74 24 20          mov    0x20(%rsp),%r14
    0.00 :	   dbedb:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	   dbedf:       c3                      retq   
    0.00 :	   dbee0:       e8 4b c3 00 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   dbee5:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   dbee8:       41 89 c6                mov    %eax,%r14d
    0.00 :	   dbeeb:       45 31 c0                xor    %r8d,%r8d
    0.00 :	   dbeee:       4c 63 d3                movslq %ebx,%r10
    0.00 :	   dbef1:       48 89 ea                mov    %rbp,%rdx
    0.00 :	   dbef4:       4c 89 e6                mov    %r12,%rsi
    0.00 :	   dbef7:       49 63 fd                movslq %r13d,%rdi
    0.00 :	   dbefa:       b8 2d 00 00 00          mov    $0x2d,%eax
    0.00 :	   dbeff:       0f 05                   syscall 
    0.00 :	   dbf01:       48 3d 00 f0 ff ff       cmp    $0xfffffffffffff000,%rax
    0.00 :	   dbf07:       48 89 c3                mov    %rax,%rbx
    0.00 :	   dbf0a:       77 2a                   ja     dbf36 <recv+0xc6>
    0.00 :	   dbf0c:       44 89 f7                mov    %r14d,%edi
    0.00 :	   dbf0f:       e8 7c c3 00 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   dbf14:       eb aa                   jmp    dbec0 <recv+0x50>
    0.00 :	   dbf16:       89 c1                   mov    %eax,%ecx
    0.00 :	   dbf18:       48 8b 15 19 5f 29 00    mov    0x295f19(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   dbf1f:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   dbf26:       00 00 
    0.00 :	   dbf28:       f7 d9                   neg    %ecx
    0.00 :	   dbf2a:       48 c7 c3 ff ff ff ff    mov    $0xffffffffffffffff,%rbx
    0.00 :	   dbf31:       89 0c 10                mov    %ecx,(%rax,%rdx,1)
    0.00 :	   dbf34:       eb 8a                   jmp    dbec0 <recv+0x50>
    0.00 :	   dbf36:       89 c1                   mov    %eax,%ecx
    0.00 :	   dbf38:       48 8b 15 f9 5e 29 00    mov    0x295ef9(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   dbf3f:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   dbf46:       00 00 
    0.00 :	   dbf48:       f7 d9                   neg    %ecx
    0.00 :	   dbf4a:       48 c7 c3 ff ff ff ff    mov    $0xffffffffffffffff,%rbx
    0.00 :	   dbf51:       89 0c 10                mov    %ecx,(%rax,%rdx,1)
    0.00 :	   dbf54:       eb b6                   jmp    dbf0c <recv+0x9c>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/ip_tables.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/ip_tables.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000025c0 <ipt_do_table>:
    0.00 :	    25c0:       41 57                   push   %r15
    0.00 :	    25f2:       48 c7 c0 00 00 00 00    mov    0xd8(%rdi),%r13
    0.00 :	    25f9:       41 56 41 55 41          mov    0x70(%rsp),%rcx
    0.00 :	    25fe:       54 49 89 fc 55          mov    0x70(%rsp),%rsi
    0.00 :	    2603:       53 4c 89                add    %rdx,%r13
    0.00 :	    2606:       c3 48 81 ec 08 01       cmpq   $0x0,0x70(%rsp)
    0.00 :	    260c:       00 00 48 89             cmove  %rax,%rcx
    0.00 :	    2610:       4c 24 68 48 89 54       cmpq   $0x0,0x68(%rsp)
    0.00 :	    2616:       24 70 89 74 24 78       cmovne 0x68(%rsp),%rax
    0.00 :	    261c:       8b 97 c4 00 00 00 4c    mov    %rcx,0x80(%rsp)
    0.00 :	    2623:       8b 
    0.00 :	    2624:       af d8 00 00 00 48 8b    mov    %rax,0x88(%rsp)
    0.00 :	    262b:       4c 
    0.00 :	    262c:       24 70 48 8b 74          movzwl 0x6(%r13),%eax
    0.00 :	    2631:       24 70 49 01             rol    $0x8,%ax
    0.00 :	    2635:       d5 48 83 7c 24          and    $0x1fff,%eax
    0.00 :	    263a:       70 00 48 0f 44 c8 48    mov    %eax,0xf0(%rsp)
    0.00 :	    2641:       83 7c 24 68 00 48 0f    mov    0xd8(%rdi),%rax
    0.00 :	    2648:       45 44 24 68 48          mov    0x68(%rsp),%rdi
    0.00 :	    264d:       89 8c 24 80             movzbl (%rax,%rdx,1),%eax
    0.00 :	    2651:       00 00 00 48 89 84 24    movb   $0x0,0xfd(%rsp)
    0.00 :	    2658:       88 
    0.00 :	    2659:       00 00 00 41 0f b7 45    mov    %rsi,0xe0(%rsp)
    0.00 :	    2660:       06 
    0.00 :	    2661:       66 c1 c0 08 25 ff 1f    mov    %rdi,0xe8(%rsp)
    0.00 :	    2668:       00 
    0.00 :	    2669:       00 89 84 24 f0 00 00    movb   $0x2,0xfc(%rsp)
    0.00 :	    2670:       00 
    0.00 :	    2671:       48 8b 87                and    $0xf,%eax
    0.00 :	    2674:       d8 00 00                shl    $0x2,%eax
    0.00 :	    2677:       00 48 8b 7c 24 68 0f    mov    %eax,0xf4(%rsp)
    0.00 :	    267e:       b6 04 10 c6             mov    0x78(%rsp),%eax
    0.00 :	    2682:       84 24 fd 00 00 00 00    mov    %eax,0xf8(%rsp)
    0.00 :	    2689:       48 89 b4 24 e0          callq  268e <icmp_checkentry+0x265e>
    0.00 :	    268e:       00 00 00 48 89 bc 24    mov    %gs:0x0,%eax
    0.00 :	    2695:       e8 
    0.00 :	    2696:       00 00 00                add    $0x1,%eax
    0.00 :	    2699:       c6 84 24                and    $0x1,%eax
    0.00 :	    269c:       fc 00 00 00 02 83 e0    mov    %eax,0xb4(%rsp)
    0.00 :	    26a3:       0f c1 e0 02 89 84 24    add    %eax,%gs:0x0
    0.00 :	    26aa:       f4 
    0.00 :	    26ab:       00 00 00 8b             mov    0x18(%rbx),%rdx
    0.00 :	    26af:       44 24 78 89             add    $0x30,%rbx
    0.00 :	    26b3:       84 24 f8 00 00 00 e8    mov    %rdx,0xa8(%rsp)
    0.00 :	    26ba:       00 
    0.00 :	    26bb:       00 00 00 65 8b 04 25    mov    0xa8(%rsp),%rcx
    0.00 :	    26c2:       00 
    0.00 :	    26c3:       00 00 00 83 c0 01 83    mov    %gs:0x0,%edx
    0.00 :	    26ca:       e0 
    0.00 :	    26cb:       01 89                   mov    %edx,%edx
    0.00 :	    26cd:       84 24 b4 00 00 00 65    mov    0xa8(%rsp),%rsi
    0.00 :	    26d4:       01 
    0.00 :	    26d5:       04 25 00 00 00          mov    0x48(%rcx,%rdx,8),%rcx
    0.00 :	    26da:       00 48 8b 53 18 48 83    mov    %rcx,0x90(%rsp)
    0.00 :	    26e1:       c3 
    0.00 :	    26e2:       30 48 89 94             mov    0x40(%rsi),%rax
    0.00 :	    26e6:       24 a8 00 00             mov    (%rax,%rdx,8),%rax
    0.00 :	    26ea:       00 48 8b 8c 24 a8 00    mov    %rax,0x98(%rsp)
    0.00 :	    26f1:       00 
    0.00 :	    26f2:       00 65 8b 14             mov    0x38(%rsi),%r15
    0.00 :	    26f6:       25 00 00 00 00 89 d2    add    0x0(,%rdx,8),%r15
    0.00 :	    26fd:       48 
    0.00 :	    26fe:       8b b4 24 a8             mov    0x78(%rsp),%eax
    0.00 :	    2702:       00 00 00 48 8b 4c d1    cmpb   $0x0,0x0(%rip)        # 2709 <icmp_checkentry+0x26d9>
    0.00 :	    2709:       48 48 89                mov    (%r15),%edi
    0.00 :	    270c:       8c 24 90 00 00          mov    %rax,0x50(%rsp)
    0.00 :	    2711:       00 48 8b 46 40 48 8b    mov    %edi,0xa4(%rsp)
    0.00 :	    2718:       04 d0 48 89             mov    0xc(%rsi,%rax,4),%ebp
    0.00 :	    271c:       84 24 98 00 00          mov    %rbx,0x58(%rsp)
    0.00 :	    2721:       00 4c 8b 7e 38 4c       jne    2bd3 <icmp_checkentry+0x2ba3>
    0.00 :	    2727:       03 3c d5 00 00          mov    0x50(%rsp),%rdx
    0.00 :	    272c:       00 00                   mov    %ebp,%eax
    0.00 :	    272e:       8b 44 24 78 80 3d 00    mov    0x90(%rsp),%rbp
    0.00 :	    2735:       00 
    0.00 :	    2736:       00 00 00 41 8b 3f 48    lea    0xd0(%rsp),%r14
    0.00 :	    273d:       89 
    0.00 :	    273e:       44 24 50 89 bc 24 a4    movl   $0x0,0x7c(%rsp)
    0.00 :	    2745:       00 
    0.00 :	    2746:       00 00 8b 6c             add    $0x8,%rdx
    0.00 :	    274a:       86 0c 48                add    %rax,%rbp
    0.00 :	    274d:       89 5c 24 58 0f          mov    %rdx,0x48(%rsp)
    0.00 :	    2752:       85 ac 04 00 00 48       nopw   0x0(%rax,%rax,1)
    0.00 :	    2758:       8b 54 24 50             movzbl 0x53(%rbp),%ecx
  100.00 :	    275c:       89 e8 48                mov    0x8(%rbp),%eax
    0.00 :	    275f:       8b ac 24 90             and    0xc(%r13),%eax
    0.00 :	    2763:       00 00 00 4c 8d b4 24    mov    0xf0(%rsp),%esi
    0.00 :	    276a:       d0 00 00                cmp    0x0(%rbp),%eax
    0.00 :	    276d:       00 c7                   mov    %ecx,%eax
    0.00 :	    276f:       44 24 7c                setne  %dl
    0.00 :	    2772:       00 00 00                shr    $0x3,%eax
    0.00 :	    2775:       00 48 83                and    $0x1,%eax
    0.00 :	    2778:       c2 08                   cmp    %al,%dl
    0.00 :	    277a:       48 01                   jne    27f8 <icmp_checkentry+0x27c8>
    0.00 :	    277c:       c5 48 89                mov    0xc(%rbp),%eax
    0.00 :	    277f:       54 24 48 66             and    0x10(%r13),%eax
    0.00 :	    2783:       0f 1f 44                cmp    0x4(%rbp),%eax
    0.00 :	    2786:       00 00                   mov    %ecx,%eax
    0.00 :	    2788:       0f b6 4d                setne  %dl
    0.00 :	    278b:       53 8b 45                shr    $0x4,%eax
    0.00 :	    278e:       08 41 23                and    $0x1,%eax
    0.00 :	    2791:       45 0c                   cmp    %al,%dl
    0.00 :	    2793:       8b b4                   jne    27f8 <icmp_checkentry+0x27c8>
    0.00 :	    2795:       24 f0 00 00 00 3b 45    mov    0x80(%rsp),%rbx
    0.00 :	    279c:       00 
    0.00 :	    279d:       89 c8 0f 95             mov    0x8(%rbx),%rdx
    0.00 :	    27a1:       c2 c1 e8                mov    (%rbx),%rax
    0.00 :	    27a4:       03 83 e0 01             xor    0x18(%rbp),%rdx
    0.00 :	    27a8:       38 c2 75 7c             xor    0x10(%rbp),%rax
    0.00 :	    27ac:       8b 45 0c 41             and    0x38(%rbp),%rdx
    0.00 :	    27b0:       23 45 10 3b             and    0x30(%rbp),%rax
    0.00 :	    27b4:       45 04 89                or     %rax,%rdx
    0.00 :	    27b7:       c8 0f                   mov    %ecx,%eax
    0.00 :	    27b9:       95 c2 c1                setne  %dl
    0.00 :	    27bc:       e8 04 83                and    $0x1,%eax
    0.00 :	    27bf:       e0 01                   cmp    %al,%dl
    0.00 :	    27c1:       38 c2                   jne    27f8 <icmp_checkentry+0x27c8>
    0.00 :	    27c3:       75 63 48 8b 9c 24 80    mov    0x88(%rsp),%rdi
    0.00 :	    27ca:       00 
    0.00 :	    27cb:       00 00 48 8b             mov    0x8(%rdi),%rdx
    0.00 :	    27cf:       53 08 48                mov    (%rdi),%rax
    0.00 :	    27d2:       8b 03 48 33             xor    0x28(%rbp),%rdx
    0.00 :	    27d6:       55 18 48 33             xor    0x20(%rbp),%rax
    0.00 :	    27da:       45 10 48 23             and    0x48(%rbp),%rdx
    0.00 :	    27de:       55 38 48 23             and    0x40(%rbp),%rax
    0.00 :	    27e2:       45 30 48                or     %rax,%rdx
    0.00 :	    27e5:       09 c2                   mov    %ecx,%eax
    0.00 :	    27e7:       89 c8 0f                setne  %dl
    0.00 :	    27ea:       95 c2                   shr    %eax
    0.00 :	    27ec:       83 e0 01                and    $0x1,%eax
    0.00 :	    27ef:       38 c2                   cmp    %al,%dl
    0.00 :	    27f1:       75 35                   je     2860 <icmp_checkentry+0x2830>
    0.00 :	    27f3:       48 8b bc 24 88          nopl   0x0(%rax,%rax,1)
    0.00 :	    27f8:       00 00 00 48             movzwl 0x5a(%rbp),%eax
    0.00 :	    27fc:       8b 57 08                add    %rax,%rbp
    0.00 :	    27ff:       48 8b 07 48 33 55 28    cmpb   $0x0,0xfd(%rsp)
    0.00 :	    2806:       48 
    0.00 :	    2807:       33 45 20 48 23 55       je     2758 <icmp_checkentry+0x2728>
    0.00 :	    280d:       48 48 23 45 40 48 09    cmpb   $0x0,0x0(%rip)        # 2814 <icmp_checkentry+0x27e4>
    0.00 :	    2814:       c2 89 c8 0f 95 c2       jne    2bff <icmp_checkentry+0x2bcf>
    0.00 :	    281a:       d1 e8 83 e0 01 38 c2    mov    0xa4(%rsp),%eax
    0.00 :	    2821:       74 6d 0f                mov    %eax,(%r15)
    0.00 :	    2824:       1f 44 00 00 0f b7 45    mov    0xb4(%rsp),%edx
    0.00 :	    282b:       5a 48 01 c5 80 bc 24    add    %edx,%gs:0x0
    0.00 :	    2832:       fd 
    0.00 :	    2833:       00 00 00 00 0f          callq  2838 <icmp_checkentry+0x2808>
    0.00 :	    2838:       84 4b ff ff ff 80 3d    cmpb   $0x0,0xfd(%rsp)
    0.00 :	    283f:       00 
    0.00 :	    2840:       00 00 00 00 0f          mov    $0x0,%eax
    0.00 :	    2845:       85 e5 03 00 00          cmove  0x7c(%rsp),%eax
    0.00 :	    284a:       8b 84 24 a4             mov    %eax,0x7c(%rsp)
    0.00 :	    284e:       00 00 00 41 89 07 8b    add    $0x108,%rsp
    0.00 :	    2855:       94                      pop    %rbx
    0.00 :	    2856:       24                      pop    %rbp
    0.00 :	    2857:       b4 00                   pop    %r12
    0.00 :	    2859:       00 00                   pop    %r13
    0.00 :	    285b:       65 01                   pop    %r14
    0.00 :	    285d:       14 25                   pop    %r15
    0.00 :	    285f:       00                      retq   
    0.00 :	    2860:       00 00 00 e8             movzwl 0x50(%rbp),%edx
    0.00 :	    2864:       00 00 00                test   %dx,%dx
    0.00 :	    2867:       00 80                   je     2884 <icmp_checkentry+0x2854>
    0.00 :	    2869:       bc 24 fd 00 00          movzbl 0x9(%r13),%eax
    0.00 :	    286e:       00 00 b8                cmp    %ax,%dx
    0.00 :	    2871:       00 00                   mov    %ecx,%eax
    0.00 :	    2873:       00 00 0f                setne  %dl
    0.00 :	    2876:       44 44 24                shr    $0x6,%eax
    0.00 :	    2879:       7c 89 44                and    $0x1,%eax
    0.00 :	    287c:       24 7c                   cmp    %al,%dl
    0.00 :	    287e:       48 81 c4 08 01 00       jne    27f8 <icmp_checkentry+0x27c8>
    0.00 :	    2884:       00 5b                   test   %esi,%esi
    0.00 :	    2886:       5d 41 5c                sete   %al
    0.00 :	    2889:       41 5d 41                and    0x52(%rbp),%al
    0.00 :	    288c:       5e 41 5f                shr    $0x5,%ecx
    0.00 :	    288f:       c3 0f                   mov    %ecx,%edx
    0.00 :	    2891:       b7 55 50                and    $0x1,%edx
    0.00 :	    2894:       66 85                   cmp    %dl,%al
    0.00 :	    2896:       d2 74 1b 41 0f b6       jne    27f8 <icmp_checkentry+0x27c8>
    0.00 :	    289c:       45 09 66 39             movzwl 0x58(%rbp),%eax
    0.00 :	    28a0:       c2 89 c8 0f             lea    0x70(%rbp),%rbx
    0.00 :	    28a4:       95 c2 c1 e8 06          lea    0x0(%rbp,%rax,1),%rax
    0.00 :	    28a9:       83 e0 01                cmp    %rax,%rbx
    0.00 :	    28ac:       38 c2                   jb     28c4 <icmp_checkentry+0x2894>
    0.00 :	    28ae:       0f 85                   jmp    28f0 <icmp_checkentry+0x28c0>
    0.00 :	    28b0:       74 ff ff                movzwl (%rbx),%eax
    0.00 :	    28b3:       ff 85 f6                add    %rax,%rbx
    0.00 :	    28b6:       0f 94 c0 22             movzwl 0x58(%rbp),%eax
    0.00 :	    28ba:       45 52 c1 e9 05          lea    0x0(%rbp,%rax,1),%rax
    0.00 :	    28bf:       89 ca 83                cmp    %rax,%rbx
    0.00 :	    28c2:       e2 01                   jae    28f0 <icmp_checkentry+0x28c0>
    0.00 :	    28c4:       38 d0 0f 85             mov    0x8(%rbx),%rax
    0.00 :	    28c8:       5c ff ff ff             lea    0x20(%rbx),%rdx
    0.00 :	    28cc:       0f b7 45                mov    %r14,%rsi
    0.00 :	    28cf:       58 48 8d                mov    %r12,%rdi
    0.00 :	    28d2:       5d 70 48 8d 44 05 00    mov    %rdx,0xd8(%rsp)
    0.00 :	    28d9:       48 
    0.00 :	    28da:       39 c3 72 16 eb 40 0f    mov    %rax,0xd0(%rsp)
    0.00 :	    28e1:       b7 
    0.00 :	    28e2:       03 48 01                callq  *0x30(%rax)
    0.00 :	    28e5:       c3 0f                   test   %al,%al
    0.00 :	    28e7:       b7 45                   jne    28b0 <icmp_checkentry+0x2880>
    0.00 :	    28e9:       58 48 8d 44 05          jmpq   27f8 <icmp_checkentry+0x27c8>
    0.00 :	    28ee:       00 48                   xchg   %ax,%ax
    0.00 :	    28f0:       39 c3 73 2c 48          mov    0x68(%r12),%eax
    0.00 :	    28f5:       8b 43 08 48 8d          addq   $0x1,0x60(%rbp)
    0.00 :	    28fa:       53 20 4c 89             add    %rax,0x68(%rbp)
    0.00 :	    28fe:       f6 4c 89 e7             movzwl 0x58(%rbp),%eax
    0.00 :	    2902:       48 89 94 24 d8 00       cmpb   $0x0,0x7d(%r12)
    0.00 :	    2908:       00 00 48 89 84          mov    %ax,0x36(%rsp)
    0.00 :	    290d:       24 d0 00                movzwl %ax,%eax
    0.00 :	    2910:       00 00 ff 50 30          lea    0x0(%rbp,%rax,1),%rbx
    0.00 :	    2915:       84 c0 75 c7 e9 0a       js     2a90 <icmp_checkentry+0x2a60>
    0.00 :	    291b:       ff ff ff 66             mov    0x8(%rbx),%rax
    0.00 :	    291f:       90 41 8b 44 24          cmpq   $0x0,0x30(%rax)
    0.00 :	    2924:       68 48                   je     2980 <icmp_checkentry+0x2950>
    0.00 :	    2926:       83 45 60 01 48 01 45    mov    %rax,0xd0(%rsp)
    0.00 :	    292d:       68 
    0.00 :	    292e:       0f b7 45 58             lea    0x20(%rbx),%rax
    0.00 :	    2932:       41 80 7c                mov    %r14,%rsi
    0.00 :	    2935:       24 7d 00                mov    %r12,%rdi
    0.00 :	    2938:       66 89 44 24 36 0f b7    mov    %rax,0xd8(%rsp)
    0.00 :	    293f:       c0 
    0.00 :	    2940:       48 8d 5c 05             mov    0x8(%rbx),%rax
    0.00 :	    2944:       00 0f 88                callq  *0x30(%rax)
    0.00 :	    2947:       75 01 00 00             mov    %eax,0x7c(%rsp)
    0.00 :	    294b:       48 8b 43 08 48          cmpl   $0xffffffff,0x7c(%rsp)
    0.00 :	    2950:       83 78 30 00 74 5a 48    mov    0xd8(%r12),%rcx
    0.00 :	    2957:       89 
    0.00 :	    2958:       84 24 d0 00 00 00 48    mov    0xc4(%r12),%eax
    0.00 :	    295f:       8d 
    0.00 :	    2960:       43 20 4c 89 f6 4c       jne    280d <icmp_checkentry+0x27dd>
    0.00 :	    2966:       89 e7                   mov    %eax,%edx
    0.00 :	    2968:       48 89 84 24             movzwl 0x5a(%rbp),%eax
    0.00 :	    296c:       d8 00 00 00             lea    (%rcx,%rdx,1),%r13
    0.00 :	    2970:       48 8b 43                add    %rax,%rbp
    0.00 :	    2973:       08 ff 50 30 89          jmpq   27ff <icmp_checkentry+0x27cf>
    0.00 :	    2978:       44 24 7c 83 7c 24 7c    nopl   0x0(%rax,%rax,1)
    0.00 :	    297f:       ff 
    0.00 :	    2980:       49 8b 8c                mov    0x20(%rbx),%ebx
    0.00 :	    2983:       24 d8                   test   %ebx,%ebx
    0.00 :	    2985:       00 00                   js     29ed <icmp_checkentry+0x29bd>
    0.00 :	    2987:       00 41 8b 84             movzwl 0x5a(%rbp),%eax
    0.00 :	    298b:       24 c4 00                movslq %ebx,%rdx
    0.00 :	    298e:       00 00 0f 85 a7 fe ff    add    0x90(%rsp),%rdx
    0.00 :	    2995:       ff 
    0.00 :	    2996:       89 c2 0f b7 45          lea    0x0(%rbp,%rax,1),%rax
    0.00 :	    299b:       5a 4c 8d                cmp    %rax,%rdx
    0.00 :	    299e:       2c 11                   je     29db <icmp_checkentry+0x29ab>
    0.00 :	    29a0:       48 01 c5 e9             testb  $0x2,0x52(%rbp)
    0.00 :	    29a4:       87 fe                   jne    29db <icmp_checkentry+0x29ab>
    0.00 :	    29a6:       ff ff 0f 1f 84 00 00    mov    0xa8(%rsp),%rsi
    0.00 :	    29ad:       00 
    0.00 :	    29ae:       00 00 8b                mov    (%r15),%ecx
    0.00 :	    29b1:       5b 20 85                cmp    0x34(%rsi),%ecx
    0.00 :	    29b4:       db 78 66 0f b7 45       jae    2c93 <icmp_checkentry+0x2c63>
    0.00 :	    29ba:       5a 48 63 d3 48 03 94    mov    0x98(%rsp),%rdi
    0.00 :	    29c1:       24 
    0.00 :	    29c2:       90 00                   mov    %ecx,%eax
    0.00 :	    29c4:       00 00 48 8d             mov    %rbp,(%rdi,%rax,8)
    0.00 :	    29c8:       44 05 00                lea    0x1(%rcx),%eax
    0.00 :	    29cb:       48 39 c2                mov    %eax,(%r15)
    0.00 :	    29ce:       74 3b f6 45 52 02 75    cmpb   $0x0,0x0(%rip)        # 29d5 <icmp_checkentry+0x29a5>
    0.00 :	    29d5:       35 48 8b b4 24 a8       jne    2ca0 <icmp_checkentry+0x2c70>
    0.00 :	    29db:       00 00 00 41 8b 0f 3b    mov    0x90(%rsp),%rbp
    0.00 :	    29e2:       4e 
    0.00 :	    29e3:       34 0f                   mov    %ebx,%eax
    0.00 :	    29e5:       83 d9 02                add    %rax,%rbp
    0.00 :	    29e8:       00 00 48 8b bc          jmpq   27ff <icmp_checkentry+0x27cf>
    0.00 :	    29ed:       24 98 00                cmp    $0xfffffffb,%ebx
    0.00 :	    29f0:       00 00 89 c8 48 89       jne    2c88 <icmp_checkentry+0x2c58>
    0.00 :	    29f6:       2c c7 8d                mov    (%r15),%eax
    0.00 :	    29f9:       41 01 41 89 07 80 3d    cmp    %eax,0xa4(%rsp)
    0.00 :	    2a00:       00 00                   jb     2a50 <icmp_checkentry+0x2a20>
    0.00 :	    2a02:       00 00 00 0f 85          mov    0x48(%rsp),%rdx
    0.00 :	    2a07:       c5 02 00 00 48 8b ac    mov    0xa8(%rsp),%rcx
    0.00 :	    2a0e:       24 
    0.00 :	    2a0f:       90 00 00 00 89 d8 48    mov    0x90(%rsp),%rbp
    0.00 :	    2a16:       01 
    0.00 :	    2a17:       c5 e9 12                mov    (%rcx,%rdx,4),%eax
    0.00 :	    2a1a:       fe ff ff                add    %rax,%rbp
    0.00 :	    2a1d:       83 fb fb 0f 85 92 02    cmpb   $0x0,0x0(%rip)        # 2a24 <icmp_checkentry+0x29f4>
    0.00 :	    2a24:       00 00 41 8b 07 39       je     27ff <icmp_checkentry+0x27cf>
    0.00 :	    2a2a:       84 24 a4                mov    %rbp,%rdx
    0.00 :	    2a2d:       00 00 00 72 4e 48 8b    mov    $0x0,%rsi
    0.00 :	    2a34:       54 24 48 48 8b 8c 24    mov    $0x0,%rdi
    0.00 :	    2a3b:       a8 00                   xor    %eax,%eax
    0.00 :	    2a3d:       00 00 48 8b ac          callq  2a42 <icmp_checkentry+0x2a12>
    0.00 :	    2a42:       24 90 00 00 00          jmpq   27ff <icmp_checkentry+0x27cf>
    0.00 :	    2a47:       8b 04 91 48 01 c5 80    nopw   0x0(%rax,%rax,1)
    0.00 :	    2a4e:       3d 00 
    0.00 :	    2a50:       00 00 00                lea    -0x1(%rax),%ecx
    0.00 :	    2a53:       00 0f 84                mov    %ecx,(%r15)
    0.00 :	    2a56:       d5 fd ff ff 48 89 ea    cmpb   $0x0,0x0(%rip)        # 2a5d <icmp_checkentry+0x2a2d>
    0.00 :	    2a5d:       48 c7                   mov    %ecx,%eax
    0.00 :	    2a5f:       c6 00 00 00 00 48 c7    mov    0x98(%rsp),%rbx
    0.00 :	    2a66:       c7 
    0.00 :	    2a67:       00 00 00 00             mov    (%rbx,%rax,8),%rbp
    0.00 :	    2a6b:       31 c0 e8 00 00 00       je     27f8 <icmp_checkentry+0x27c8>
    0.00 :	    2a71:       00 e9 b8                mov    %rbp,%rdx
    0.00 :	    2a74:       fd ff ff 66 0f 1f 84    mov    $0x0,%rsi
    0.00 :	    2a7b:       00 00 00 00 00 8d 48    mov    $0x0,%rdi
    0.00 :	    2a82:       ff 41                   xor    %eax,%eax
    0.00 :	    2a84:       89 0f 80 3d 00          callq  2a89 <icmp_checkentry+0x2a59>
    0.00 :	    2a89:       00 00 00 00 89          jmpq   27f8 <icmp_checkentry+0x27c8>
    0.00 :	    2a8e:       c8 48                   xchg   %ax,%ax
    0.00 :	    2a90:       8b 9c 24 98 00 00 00    mov    0xa8(%rsp),%rsi
    0.00 :	    2a97:       48 
    0.00 :	    2a98:       8b 2c c3 0f 84          mov    0x50(%rsp),%rcx
    0.00 :	    2a9d:       87 fd ff                xor    %r9d,%r9d
    0.00 :	    2aa0:       ff 48 89 ea 48          mov    0x50(%rsp),%rdi
    0.00 :	    2aa5:       c7 c6 00 00 00 00 48    mov    %gs:0x0,%eax
    0.00 :	    2aac:       c7 
    0.00 :	    2aad:       c7 00 00 00             mov    0xc(%rsi,%rcx,4),%edx
    0.00 :	    2ab1:       00 31                   cltq   
    0.00 :	    2ab3:       c0 e8 00 00 00 00 e9    mov    0x0(,%rdi,8),%rdi
    0.00 :	    2aba:       6a 
    0.00 :	    2abb:       fd ff                   mov    %edx,%ecx
    0.00 :	    2abd:       ff 66 90 48 8b          add    0x48(%rsi,%rax,8),%rcx
    0.00 :	    2ac2:       b4 24 a8 00 00 00 48    movq   $0x0,0xb8(%rsp)
    0.00 :	    2ac9:       8b 4c 24 50 45 
    0.00 :	    2ace:       31 c9 48 8b 7c 24 50    mov    %rdi,0xc0(%rsp)
    0.00 :	    2ad5:       65 
    0.00 :	    2ad6:       8b 04                   mov    (%rsi),%eax
    0.00 :	    2ad8:       25 00                   sub    %edx,%eax
    0.00 :	    2ada:       00 00 00 8b             lea    (%rcx,%rax,1),%rax
    0.00 :	    2ade:       54 8e 0c                cmp    %rax,%rcx
    0.00 :	    2ae1:       48 98 48 8b 3c fd 00    mov    %rax,0xc8(%rsp)
    0.00 :	    2ae8:       00 
    0.00 :	    2ae9:       00 00                   jae    2b53 <icmp_checkentry+0x2b23>
    0.00 :	    2aeb:       89 d1 48 03 4c c6 48    mov    0xc0(%rsp),%r11
    0.00 :	    2af2:       48 
    0.00 :	    2af3:       c7 84 24 b8 00          mov    %rcx,0x38(%rsp)
    0.00 :	    2af8:       00 00 00                xor    %r9d,%r9d
    0.00 :	    2afb:       00 00 00 48 89          mov    0x38(%rsp),%rdx
    0.00 :	    2b00:       bc 24 c0 00 00 00 8b    mov    $0x0,%rdi
    0.00 :	    2b07:       06 29 d0 48 8d          mov    $0x6,%ecx
    0.00 :	    2b0c:       04 01 48 39             movzwl 0x58(%rdx),%eax
    0.00 :	    2b10:       c1 48 89                mov    %rdx,%r8
    0.00 :	    2b13:       84 24 c8                add    %rax,%r8
    0.00 :	    2b16:       00 00 00 73             mov    0x8(%r8),%r10
    0.00 :	    2b1a:       68 4c 8b 9c             lea    0x10(%r10),%rsi
    0.00 :	    2b1e:       24 c0                   repz cmpsb %es:(%rdi),%ds:(%rsi)
    0.00 :	    2b20:       00 00 00 48 89 4c       jne    2bad <icmp_checkentry+0x2b7d>
    0.00 :	    2b26:       24 38 45 31             lea    0x20(%r8),%r11
    0.00 :	    2b2a:       c9 48 8b                xor    %r9d,%r9d
    0.00 :	    2b2d:       54 24 38 48 c7          mov    0x38(%rsp),%rdx
    0.00 :	    2b32:       c7 00 00 00 00 b9 06    mov    0xc8(%rsp),%rcx
    0.00 :	    2b39:       00 
    0.00 :	    2b3a:       00 00 0f b7             movzwl 0x5a(%rdx),%eax
    0.00 :	    2b3e:       42 58 49                add    %rax,%rdx
    0.00 :	    2b41:       89 d0 49                cmp    %rcx,%rdx
    0.00 :	    2b44:       01 c0 4d 8b 50          mov    %rdx,0x38(%rsp)
    0.00 :	    2b49:       08 49                   jb     2afb <icmp_checkentry+0x2acb>
    0.00 :	    2b4b:       8d 72 10 f3 a6 0f 85    mov    %r11,0xc0(%rsp)
    0.00 :	    2b52:       87 
    0.00 :	    2b53:       00 00 00 4d 8d 58 20    mov    0xb8(%rsp),%rsi
    0.00 :	    2b5a:       45 
    0.00 :	    2b5b:       31 c9 48 8b 54 24 38    mov    0xc0(%rsp),%rdi
    0.00 :	    2b62:       48 
    0.00 :	    2b63:       8b 8c 24                mov    %r12,%rdx
    0.00 :	    2b66:       c8 00 00 00 0f          mov    0x58(%rsp),%rax
    0.00 :	    2b6b:       b7 42 5a 48 01          mov    0x68(%rsp),%r8
    0.00 :	    2b70:       c2 48 39 ca 48          mov    0x70(%rsp),%rcx
    0.00 :	    2b75:       89 54 24 38 72          mov    %r9d,0x20(%rsp)
    0.00 :	    2b7a:       b0 4c 89 9c 24 c0 00    mov    $0x0,%r9
    0.00 :	    2b81:       00 00 48 8b b4          mov    %rsi,0x18(%rsp)
    0.00 :	    2b86:       24 b8 00 00             mov    0x78(%rsp),%esi
    0.00 :	    2b8a:       00 48 8b bc 24          mov    %rdi,0x10(%rsp)
    0.00 :	    2b8f:       c0 00 00 00 4c          mov    %rax,0x8(%rsp)
    0.00 :	    2b94:       89 e2 48 8b 44          mov    $0x2,%edi
    0.00 :	    2b99:       24 58                   xor    %eax,%eax
    0.00 :	    2b9b:       4c 8b 44 24 68 48 8b    movq   $0x0,(%rsp)
    0.00 :	    2ba2:       4c 
    0.00 :	    2ba3:       24 70 44 89 4c          callq  2ba8 <icmp_checkentry+0x2b78>
    0.00 :	    2ba8:       24 20 49 c7 c1          jmpq   291b <icmp_checkentry+0x28eb>
    0.00 :	    2bad:       00 00 00 00 48          cmp    0x38(%rsp),%rbp
    0.00 :	    2bb2:       89 74                   je     2bbd <icmp_checkentry+0x2b8d>
    0.00 :	    2bb4:       24 18 8b 74             add    $0x1,%r9d
    0.00 :	    2bb8:       24 78 48 89 7c          jmpq   2b2d <icmp_checkentry+0x2afd>
    0.00 :	    2bbd:       24 10 48 89 44 24       cmpw   $0x70,0x36(%rsp)
    0.00 :	    2bc3:       08 bf                   je     2c2b <icmp_checkentry+0x2bfb>
    0.00 :	    2bc5:       02 00 00 00 31 c0 48    mov    %r11,0xc0(%rsp)
    0.00 :	    2bcc:       c7 
    0.00 :	    2bcd:       04 24 00 00             add    $0x1,%r9d
    0.00 :	    2bd1:       00 00                   jmp    2b53 <icmp_checkentry+0x2b23>
    0.00 :	    2bd3:       e8 00 00 00 00          mov    0x20(%rsi,%rax,4),%r9d
    0.00 :	    2bd8:       e9 6e fd                mov    %edi,%r8d
    0.00 :	    2bdb:       ff ff 48                mov    %rbx,%rdx
    0.00 :	    2bde:       3b 6c 24 38 74 09 41    mov    $0x0,%rsi
    0.00 :	    2be5:       83 c1 01 e9 70 ff ff    mov    $0x0,%rdi
    0.00 :	    2bec:       ff 66                   xor    %eax,%eax
    0.00 :	    2bee:       83 7c 24                add    %rcx,%r9
    0.00 :	    2bf1:       36 70 74 66             mov    0x78(%rsp),%ecx
    0.00 :	    2bf5:       4c 89 9c 24 c0          callq  2bfa <icmp_checkentry+0x2bca>
    0.00 :	    2bfa:       00 00 00 41 83          jmpq   2727 <icmp_checkentry+0x26f7>
    0.00 :	    2bff:       c1 01 eb 80 44 8b 4c    mov    0xa4(%rsp),%r8d
    0.00 :	    2c06:       86 
    0.00 :	    2c07:       20 41 89                mov    (%r15),%ecx
    0.00 :	    2c0a:       f8 48 89 da 48 c7 c6    mov    $0x0,%rdx
    0.00 :	    2c11:       00 00 00 00 48 c7 c7    mov    $0x0,%rsi
    0.00 :	    2c18:       00 00 00 00 31 c0 49    mov    $0x0,%rdi
    0.00 :	    2c1f:       01 c9                   xor    %eax,%eax
    0.00 :	    2c21:       8b 4c 24 78 e8          callq  2c26 <icmp_checkentry+0x2bf6>
    0.00 :	    2c26:       00 00 00 00 e9          jmpq   281a <icmp_checkentry+0x27ea>
    0.00 :	    2c2b:       28 fb ff ff 44          cmpb   $0x0,0x10(%r10)
    0.00 :	    2c30:       8b 84                   jne    2bc5 <icmp_checkentry+0x2b95>
    0.00 :	    2c32:       24 a4 00 00             mov    0x20(%r8),%r8d
    0.00 :	    2c36:       00 41 8b                test   %r8d,%r8d
    0.00 :	    2c39:       0f 48                   jns    2bc5 <icmp_checkentry+0x2b95>
    0.00 :	    2c3b:       c7 c2 00 00 00          mov    $0x54,%ecx
    0.00 :	    2c40:       00 48 c7                mov    %rbp,%rsi
    0.00 :	    2c43:       c6 00 00 00 00 48 c7    mov    $0x0,%rdi
    0.00 :	    2c4a:       c7 00                   repz cmpsb %es:(%rdi),%ds:(%rsi)
    0.00 :	    2c4c:       00 00 00 31 c0 e8       jne    2bc5 <icmp_checkentry+0x2b95>
    0.00 :	    2c52:       00 00 00 00 e9 ef fb    cmp    %r11,0xc0(%rsp)
    0.00 :	    2c59:       ff 
    0.00 :	    2c5a:       ff 41 80 7a 10 00 75    movq   $0x0,0xb8(%rsp)
    0.00 :	    2c61:       93 45 8b 40 20 
    0.00 :	    2c66:       45 85 c0 79 8a b9       je     2bcd <icmp_checkentry+0x2b9d>
    0.00 :	    2c6c:       54 00 00 00 48 89 ee    movq   $0x0,0xb8(%rsp)
    0.00 :	    2c73:       48 c7 c7 00 00 
    0.00 :	    2c78:       00 00 f3 a6 0f 85 73    mov    %r11,0xc0(%rsp)
    0.00 :	    2c7f:       ff 
    0.00 :	    2c80:       ff ff 4c 39 9c          jmpq   2bcd <icmp_checkentry+0x2b9d>
    0.00 :	    2c85:       24 c0 00                nopl   (%rax)
    0.00 :	    2c88:       00 00                   not    %ebx
    0.00 :	    2c8a:       48 c7 84 24             mov    %ebx,0x7c(%rsp)
    0.00 :	    2c8e:       b8 00 00 00 00          jmpq   280d <icmp_checkentry+0x27dd>
    0.00 :	    2c93:       00 00 00 0f 84 61 ff    movl   $0x0,0x7c(%rsp)
    0.00 :	    2c9a:       ff 
    0.00 :	    2c9b:       ff 48 c7 84 24          jmpq   280d <icmp_checkentry+0x27dd>
    0.00 :	    2ca0:       b8 00 00                mov    %rbp,%rdx
    0.00 :	    2ca3:       00 00 00 00 00 4c 89    mov    $0x0,%rsi
    0.00 :	    2caa:       9c 24 c0 00 00 00 e9    mov    $0x0,%rdi
    0.00 :	    2cb1:       48 ff                   xor    %eax,%eax
    0.00 :	    2cb3:       ff ff 0f 1f 00          callq  2cb8 <icmp_checkentry+0x2c88>
    0.00 :	    2cb8:       f7 d3 89 5c 24          jmpq   29db <icmp_checkentry+0x29ab>
         :	    2cbd:       7c e9 7a                nopl   (%rax)
         :	    2cc0:       fb ff                   push   %r15
         :	    2cc2:       ff c7 44 24 7c          mov    $0x80d0,%esi
         :	    2cc7:       00 00                   push   %r14
         :	    2cc9:       00 00 e9                mov    %rdi,%r14
         :	    2ccc:       6d fb                   push   %r13
         :	    2cce:       ff ff                   push   %r12
         :	    2cd0:       48 89 ea                xor    %r12d,%r12d
         :	    2cd3:       48                      push   %rbp
         :	    2cd4:       c7                      push   %rbx
         :	    2cd5:       c6 00 00 00             sub    $0x8,%rsp
         :	    2cd9:       00 48 c7                mov    0x10(%rdi),%ebp
         :	    2cdc:       c7 00                   mov    %ebp,%edi
         :	    2cde:       00 00 00 31 c0          callq  2ce3 <icmp_checkentry+0x2cb3>
         :	    2ce3:       e8 00 00                mov    %eax,%r15d
         :	    2ce6:       00 00                   mov    %eax,%eax
         :	    2ce8:       e9 1e fd ff             lea    (%rax,%rax,8),%rdx

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	00000000004695c0 <gettimeofday@plt>:
  100.00 :	  4695c0:       ff 25 82 db 6f 00       jmpq   *0x6fdb82(%rip)        # b67148 <_GLOBAL_OFFSET_TABLE_+0x148>
    0.00 :	  4695c6:       68 26 00 00 00          pushq  $0x26
    0.00 :	  4695cb:       e9 80 fd ff ff          jmpq   469350 <_init+0x20>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:283
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ace60 <_bt_binsrch>:
         :	_bt_binsrch(Relation rel,
         :	                        Buffer buf,
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        bool nextkey)
         :	{
    0.00 :	  4ace60:       55                      push   %rbp
    0.00 :	  4ace61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ace64:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:283
  100.00 :	  4ace66:       41 56                   push   %r14
    0.00 :	  4ace68:       41 55                   push   %r13
    0.00 :	  4ace6a:       41 54                   push   %r12
    0.00 :	  4ace6c:       53                      push   %rbx
    0.00 :	  4ace6d:       48 83 ec 28             sub    $0x28,%rsp
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4ace71:       85 f6                   test   %esi,%esi
         :	_bt_binsrch(Relation rel,
         :	                        Buffer buf,
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        bool nextkey)
         :	{
    0.00 :	  4ace73:       48 89 4d b0             mov    %rcx,-0x50(%rbp)
    0.00 :	  4ace77:       48 89 7d c0             mov    %rdi,-0x40(%rbp)
    0.00 :	  4ace7b:       89 55 bc                mov    %edx,-0x44(%rbp)
    0.00 :	  4ace7e:       44 89 c1                mov    %r8d,%ecx
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4ace81:       0f 88 c9 00 00 00       js     4acf50 <_bt_binsrch+0xf0>
    0.00 :	  4ace87:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  4ace8a:       4c 63 f0                movslq %eax,%r14
    0.00 :	  4ace8d:       49 c1 e6 0d             shl    $0xd,%r14
    0.00 :	  4ace91:       4c 03 35 60 2c 71 00    add    0x712c60(%rip),%r14        # bbfaf8 <BufferBlocks>
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4ace98:       41 0f b7 46 10          movzwl 0x10(%r14),%eax
    0.00 :	  4ace9d:       49 8d 04 06             lea    (%r14,%rax,1),%rax
    0.00 :	  4acea1:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :
         :	        low = P_FIRSTDATAKEY(opaque);
    0.00 :	  4acea5:       83 78 04 01             cmpl   $0x1,0x4(%rax)
         :	        high = PageGetMaxOffsetNumber(page);
    0.00 :	  4acea9:       41 0f b7 46 0c          movzwl 0xc(%r14),%eax
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :
         :	        low = P_FIRSTDATAKEY(opaque);
    0.00 :	  4aceae:       45 19 ed                sbb    %r13d,%r13d
    0.00 :	  4aceb1:       41 83 c5 02             add    $0x2,%r13d
         :	        high = PageGetMaxOffsetNumber(page);
    0.00 :	  4aceb5:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  4aceb9:       0f 86 7f 00 00 00       jbe    4acf3e <_bt_binsrch+0xde>
    0.00 :	  4acebf:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4acec2:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4acec6:       48 c1 e8 02             shr    $0x2,%rax
         :	         * this covers two cases: the page is really empty (no keys), or it
         :	         * contains only a high key.  The latter case is possible after vacuuming.
         :	         * This can never happen on an internal page, however, since they are
         :	         * never empty (an internal page must have children).
         :	         */
         :	        if (high < low)
    0.00 :	  4aceca:       66 41 39 c5             cmp    %ax,%r13w
    0.00 :	  4acece:       77 6e                   ja     4acf3e <_bt_binsrch+0xde>
         :	         * For nextkey=true (cmpval=0), the loop invariant is: all slots before
         :	         * 'low' are <= scan key, all slots at or after 'high' are > scan key.
         :	         *
         :	         * We can fall out when high == low.
         :	         */
         :	        high++;                                         /* establish the loop invariant for high */
    0.00 :	  4aced0:       44 8d 60 01             lea    0x1(%rax),%r12d
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
    0.00 :	  4aced4:       31 c0                   xor    %eax,%eax
    0.00 :	  4aced6:       84 c9                   test   %cl,%cl
    0.00 :	  4aced8:       0f 94 c0                sete   %al
    0.00 :	  4acedb:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :
         :	        while (high > low)
    0.00 :	  4acede:       66 45 39 e5             cmp    %r12w,%r13w
    0.00 :	  4acee2:       73 4c                   jae    4acf30 <_bt_binsrch+0xd0>
    0.00 :	  4acee4:       45 0f b7 fd             movzwl %r13w,%r15d
    0.00 :	  4acee8:       eb 0f                   jmp    4acef9 <_bt_binsrch+0x99>
    0.00 :	  4aceea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  4acef0:       66 44 39 eb             cmp    %r13w,%bx
    0.00 :	  4acef4:       41 89 dc                mov    %ebx,%r12d
    0.00 :	  4acef7:       76 37                   jbe    4acf30 <_bt_binsrch+0xd0>
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acef9:       41 0f b7 c4             movzwl %r12w,%eax
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acefd:       8b 75 bc                mov    -0x44(%rbp),%esi
    0.00 :	  4acf00:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
         :
         :	        while (high > low)
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acf04:       44 29 f8                sub    %r15d,%eax
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acf07:       4c 89 f1                mov    %r14,%rcx
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
         :
         :	        while (high > low)
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acf0a:       89 c2                   mov    %eax,%edx
    0.00 :	  4acf0c:       c1 ea 1f                shr    $0x1f,%edx
    0.00 :	  4acf0f:       01 c2                   add    %eax,%edx
    0.00 :	  4acf11:       d1 fa                   sar    %edx
    0.00 :	  4acf13:       41 8d 5c 15 00          lea    0x0(%r13,%rdx,1),%ebx
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acf18:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  4acf1c:       44 0f b7 c3             movzwl %bx,%r8d
    0.00 :	  4acf20:       e8 2b fd ff ff          callq  4acc50 <_bt_compare>
         :
         :	                if (result >= cmpval)
    0.00 :	  4acf25:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  4acf28:       7f c6                   jg     4acef0 <_bt_binsrch+0x90>
         :	                        low = mid + 1;
    0.00 :	  4acf2a:       44 8d 6b 01             lea    0x1(%rbx),%r13d
    0.00 :	  4acf2e:       eb ae                   jmp    4acede <_bt_binsrch+0x7e>
         :	         * past the last slot on the page.
         :	         *
         :	         * On a leaf page, we always return the first key >= scan key (resp. >
         :	         * scan key), which could be the last slot + 1.
         :	         */
         :	        if (P_ISLEAF(opaque))
    0.00 :	  4acf30:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  4acf34:       f6 40 0c 01             testb  $0x1,0xc(%rax)
    0.00 :	  4acf38:       75 04                   jne    4acf3e <_bt_binsrch+0xde>
         :	         * On a non-leaf page, return the last key < scan key (resp. <= scan key).
         :	         * There must be one if _bt_compare() is playing by the rules.
         :	         */
         :	        Assert(low > P_FIRSTDATAKEY(opaque));
         :
         :	        return OffsetNumberPrev(low);
    0.00 :	  4acf3a:       41 83 ed 01             sub    $0x1,%r13d
         :	}
    0.00 :	  4acf3e:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  4acf42:       44 89 e8                mov    %r13d,%eax
    0.00 :	  4acf45:       5b                      pop    %rbx
    0.00 :	  4acf46:       41 5c                   pop    %r12
    0.00 :	  4acf48:       41 5d                   pop    %r13
    0.00 :	  4acf4a:       41 5e                   pop    %r14
    0.00 :	  4acf4c:       41 5f                   pop    %r15
    0.00 :	  4acf4e:       c9                      leaveq 
    0.00 :	  4acf4f:       c3                      retq   
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4acf50:       48 8b 05 c1 01 6d 00    mov    0x6d01c1(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4acf57:       f7 d6                   not    %esi
    0.00 :	  4acf59:       48 63 d6                movslq %esi,%rdx
    0.00 :	  4acf5c:       4c 8b 34 d0             mov    (%rax,%rdx,8),%r14
    0.00 :	  4acf60:       e9 33 ff ff ff          jmpq   4ace98 <_bt_binsrch+0x38>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:7339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004cd4c0 <RecoveryInProgress>:
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4c0:       31 c0                   xor    %eax,%eax
    0.00 :	  4cd4c2:       80 3d 97 a9 69 00 00    cmpb   $0x0,0x69a997(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	 * As a side-effect, we initialize the local TimeLineID and RedoRecPtr
         :	 * variables the first time we see that recovery is finished.
         :	 */
         :	bool
         :	RecoveryInProgress(void)
         :	{
  100.00 :	  4cd4c9:       55                      push   %rbp
    0.00 :	  4cd4ca:       48 89 e5                mov    %rsp,%rbp
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4cd:       74 1f                   je     4cd4ee <RecoveryInProgress+0x2e>
         :	        {
         :	                /*
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
    0.00 :	  4cd4cf:       48 8b 05 c2 bc 6a 00    mov    0x6abcc2(%rip),%rax        # b79198 <XLogCtl>
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4d6:       0f b6 80 5c 05 00 00    movzbl 0x55c(%rax),%eax
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4dd:       84 c0                   test   %al,%al
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4df:       88 05 7b a9 69 00       mov    %al,0x69a97b(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4e5:       74 09                   je     4cd4f0 <RecoveryInProgress+0x30>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4e7:       0f b6 05 72 a9 69 00    movzbl 0x69a972(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
         :	        }
         :	}
    0.00 :	  4cd4ee:       c9                      leaveq 
    0.00 :	  4cd4ef:       c3                      retq   
         :	                        /*
         :	                         * If we just exited recovery, make sure we read TimeLineID and
         :	                         * RedoRecPtr after SharedRecoveryInProgress (for machines with
         :	                         * weak memory ordering).
         :	                         */
         :	                        pg_memory_barrier();
    0.00 :	  4cd4f0:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                        InitXLOGAccess();
    0.00 :	  4cd4f5:       e8 a6 ff ff ff          callq  4cd4a0 <InitXLOGAccess>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4fa:       0f b6 05 5f a9 69 00    movzbl 0x69a95f(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
    0.00 :	  4cd501:       eb eb                   jmp    4cd4ee <RecoveryInProgress+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:515
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a9120 <TupleHashTableHash>:
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the hash functions. (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static uint32
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
    0.00 :	  5a9120:       55                      push   %rbp
    0.00 :	  5a9121:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a9124:       41 57                   push   %r15
    0.00 :	  5a9126:       41 56                   push   %r14
    0.00 :	  5a9128:       41 55                   push   %r13
    0.00 :	  5a912a:       41 54                   push   %r12
    0.00 :	  5a912c:       53                      push   %rbx
    0.00 :	  5a912d:       48 83 ec 18             sub    $0x18,%rsp
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
    0.00 :	  5a9131:       48 8b 1d 88 07 5d 00    mov    0x5d0788(%rip),%rbx        # b798c0 <CurTupleHashTable>
         :	 * the hash functions. (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static uint32
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
    0.00 :	  5a9138:       48 8b 3f                mov    (%rdi),%rdi
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
         :	        int                     numCols = hashtable->numCols;
    0.00 :	  5a913b:       8b 43 08                mov    0x8(%rbx),%eax
         :	        AttrNumber *keyColIdx = hashtable->keyColIdx;
         :	        FmgrInfo   *hashfunctions;
         :	        uint32          hashkey = 0;
         :	        int                     i;
         :
         :	        if (tuple == NULL)
    0.00 :	  5a913e:       48 85 ff                test   %rdi,%rdi
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
         :	        int                     numCols = hashtable->numCols;
    0.00 :	  5a9141:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	        AttrNumber *keyColIdx = hashtable->keyColIdx;
    0.00 :	  5a9144:       4c 8b 63 10             mov    0x10(%rbx),%r12
         :	        FmgrInfo   *hashfunctions;
         :	        uint32          hashkey = 0;
         :	        int                     i;
         :
         :	        if (tuple == NULL)
    0.00 :	  5a9148:       0f 84 8a 00 00 00       je     5a91d8 <TupleHashTableHash+0xb8>
         :	        }
         :	        else
         :	        {
         :	                /* Process a tuple already stored in the table */
         :	                /* (this case never actually occurs in current dynahash.c code) */
         :	                slot = hashtable->tableslot;
    0.00 :	  5a914e:       4c 8b 7b 40             mov    0x40(%rbx),%r15
         :	                ExecStoreMinimalTuple(tuple, slot, false);
    0.00 :	  5a9152:       31 d2                   xor    %edx,%edx
    0.00 :	  5a9154:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5a9157:       e8 84 b2 00 00          callq  5b43e0 <ExecStoreMinimalTuple>
         :	                hashfunctions = hashtable->tab_hash_funcs;
    0.00 :	  5a915c:       48 8b 43 18             mov    0x18(%rbx),%rax
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a9160:       8b 55 c4                mov    -0x3c(%rbp),%edx
    0.00 :	  5a9163:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5a9166:       85 d2                   test   %edx,%edx
    0.00 :	  5a9168:       7e 58                   jle    5a91c2 <TupleHashTableHash+0xa2>
    0.00 :	  5a916a:       49 89 c6                mov    %rax,%r14
    0.00 :	  5a916d:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5a9170:       31 db                   xor    %ebx,%ebx
    0.00 :	  5a9172:       eb 14                   jmp    5a9188 <TupleHashTableHash+0x68>
    0.00 :	  5a9174:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5a9178:       83 c3 01                add    $0x1,%ebx
    0.00 :	  5a917b:       49 83 c4 02             add    $0x2,%r12
    0.00 :	  5a917f:       49 83 c6 30             add    $0x30,%r14
    0.00 :	  5a9183:       39 5d c4                cmp    %ebx,-0x3c(%rbp)
    0.00 :	  5a9186:       7e 3a                   jle    5a91c2 <TupleHashTableHash+0xa2>
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
         :
         :	                attr = slot_getattr(slot, att, &isNull);
    0.00 :	  5a9188:       41 0f bf 34 24          movswl (%r12),%esi
    0.00 :	  5a918d:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5a9191:       4c 89 ff                mov    %r15,%rdi
         :	                AttrNumber      att = keyColIdx[i];
         :	                Datum           attr;
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
    0.00 :	  5a9194:       41 d1 c5                rol    %r13d
         :
         :	                attr = slot_getattr(slot, att, &isNull);
    0.00 :	  5a9197:       e8 64 62 ec ff          callq  46f400 <slot_getattr>
         :
         :	                if (!isNull)                    /* treat nulls as having hash key 0 */
    0.00 :	  5a919c:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:515
  100.00 :	  5a91a0:       75 d6                   jne    5a9178 <TupleHashTableHash+0x58>
         :	                {
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i],
    0.00 :	  5a91a2:       31 f6                   xor    %esi,%esi
    0.00 :	  5a91a4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5a91a7:       48 89 c2                mov    %rax,%rdx
    0.00 :	  5a91aa:       e8 21 4f 1d 00          callq  77e0d0 <FunctionCall1Coll>
         :	                slot = hashtable->tableslot;
         :	                ExecStoreMinimalTuple(tuple, slot, false);
         :	                hashfunctions = hashtable->tab_hash_funcs;
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a91af:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i],
         :	                                                                                                attr));
         :	                        hashkey ^= hkey;
    0.00 :	  5a91b2:       41 31 c5                xor    %eax,%r13d
         :	                slot = hashtable->tableslot;
         :	                ExecStoreMinimalTuple(tuple, slot, false);
         :	                hashfunctions = hashtable->tab_hash_funcs;
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a91b5:       49 83 c4 02             add    $0x2,%r12
    0.00 :	  5a91b9:       49 83 c6 30             add    $0x30,%r14
    0.00 :	  5a91bd:       39 5d c4                cmp    %ebx,-0x3c(%rbp)
    0.00 :	  5a91c0:       7f c6                   jg     5a9188 <TupleHashTableHash+0x68>
         :	                        hashkey ^= hkey;
         :	                }
         :	        }
         :
         :	        return hashkey;
         :	}
    0.00 :	  5a91c2:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5a91c6:       44 89 e8                mov    %r13d,%eax
    0.00 :	  5a91c9:       5b                      pop    %rbx
    0.00 :	  5a91ca:       41 5c                   pop    %r12
    0.00 :	  5a91cc:       41 5d                   pop    %r13
    0.00 :	  5a91ce:       41 5e                   pop    %r14
    0.00 :	  5a91d0:       41 5f                   pop    %r15
    0.00 :	  5a91d2:       c9                      leaveq 
    0.00 :	  5a91d3:       c3                      retq   
    0.00 :	  5a91d4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        int                     i;
         :
         :	        if (tuple == NULL)
         :	        {
         :	                /* Process the current input tuple for the table */
         :	                slot = hashtable->inputslot;
    0.00 :	  5a91d8:       4c 8b 7b 48             mov    0x48(%rbx),%r15
         :	                hashfunctions = hashtable->in_hash_funcs;
    0.00 :	  5a91dc:       48 8b 43 50             mov    0x50(%rbx),%rax
    0.00 :	  5a91e0:       e9 7b ff ff ff          jmpq   5a9160 <TupleHashTableHash+0x40>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:601
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3f00 <ExecCopySlotMinimalTuple>:
         :	 *                      The slot itself is undisturbed.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecCopySlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f00:       55                      push   %rbp
    0.00 :	  5b3f01:       48 89 f8                mov    %rdi,%rax
         :
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f04:       48 8b 7f 38             mov    0x38(%rdi),%rdi
         :	 *                      The slot itself is undisturbed.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecCopySlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f08:       48 89 e5                mov    %rsp,%rbp
         :
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f0b:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3f0e:       74 10                   je     5b3f20 <ExecCopySlotMinimalTuple+0x20>
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f10:       c9                      leaveq 
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
         :	                return heap_copy_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b3f11:       e9 ca ab eb ff          jmpq   46eae0 <heap_copy_minimal_tuple>
    0.00 :	  5b3f16:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b3f1d:       00 00 00 
         :	        if (slot->tts_tuple)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:601
  100.00 :	  5b3f20:       48 8b 78 08             mov    0x8(%rax),%rdi
    0.00 :	  5b3f24:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3f27:       74 07                   je     5b3f30 <ExecCopySlotMinimalTuple+0x30>
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f29:       c9                      leaveq 
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
         :	                return heap_copy_minimal_tuple(slot->tts_mintuple);
         :	        if (slot->tts_tuple)
         :	                return minimal_tuple_from_heap_tuple(slot->tts_tuple);
    0.00 :	  5b3f2a:       e9 51 ab eb ff          jmpq   46ea80 <minimal_tuple_from_heap_tuple>
    0.00 :	  5b3f2f:       90                      nop
         :
         :	        /*
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
    0.00 :	  5b3f30:       48 8b 50 30             mov    0x30(%rax),%rdx
    0.00 :	  5b3f34:       48 8b 70 28             mov    0x28(%rax),%rsi
    0.00 :	  5b3f38:       48 8b 78 10             mov    0x10(%rax),%rdi
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f3c:       c9                      leaveq 
         :	                return minimal_tuple_from_heap_tuple(slot->tts_tuple);
         :
         :	        /*
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
    0.00 :	  5b3f3d:       e9 9e c5 eb ff          jmpq   4704e0 <heap_form_minimal_tuple>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:686
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3f50 <ExecFetchSlotMinimalTuple>:
         :	 * As above, the result must be treated as read-only.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecFetchSlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f50:       55                      push   %rbp
    0.00 :	  5b3f51:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b3f54:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  5b3f58:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  5b3f5c:       48 83 ec 10             sub    $0x10,%rsp
         :	        Assert(!slot->tts_isempty);
         :
         :	        /*
         :	         * If we have a minimal physical tuple (local or not) then just return it.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f60:       48 8b 47 38             mov    0x38(%rdi),%rax
         :	 * As above, the result must be treated as read-only.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecFetchSlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f64:       49 89 fc                mov    %rdi,%r12
         :	        Assert(!slot->tts_isempty);
         :
         :	        /*
         :	         * If we have a minimal physical tuple (local or not) then just return it.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f67:       48 85 c0                test   %rax,%rax
    0.00 :	  5b3f6a:       74 14                   je     5b3f80 <ExecFetchSlotMinimalTuple+0x30>
         :	         * in that at the moment, but if any materializes, we should change this
         :	         * function to force the slot into minimal-tuple-only state.
         :	         */
         :
         :	        return slot->tts_mintuple;
         :	}
    0.00 :	  5b3f6c:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  5b3f70:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  5b3f75:       c9                      leaveq 
    0.00 :	  5b3f76:       c3                      retq   
    0.00 :	  5b3f77:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b3f7e:       00 00 
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5b3f80:       48 8b 1d d9 68 60 00    mov    0x6068d9(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b3f87:       48 8b 47 18             mov    0x18(%rdi),%rax
    0.00 :	  5b3f8b:       48 89 05 ce 68 60 00    mov    %rax,0x6068ce(%rip)        # bba860 <CurrentMemoryContext>
         :	         * We may be called in a context that is shorter-lived than the tuple
         :	         * slot, but we have to ensure that the materialized tuple will survive
         :	         * anyway.
         :	         */
         :	        oldContext = MemoryContextSwitchTo(slot->tts_mcxt);
         :	        slot->tts_mintuple = ExecCopySlotMinimalTuple(slot);
  100.00 :	  5b3f92:       e8 69 ff ff ff          callq  5b3f00 <ExecCopySlotMinimalTuple>
         :	        slot->tts_shouldFreeMin = true;
    0.00 :	  5b3f97:       41 c6 44 24 06 01       movb   $0x1,0x6(%r12)
         :	         * We may be called in a context that is shorter-lived than the tuple
         :	         * slot, but we have to ensure that the materialized tuple will survive
         :	         * anyway.
         :	         */
         :	        oldContext = MemoryContextSwitchTo(slot->tts_mcxt);
         :	        slot->tts_mintuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  5b3f9d:       49 89 44 24 38          mov    %rax,0x38(%r12)
    0.00 :	  5b3fa2:       48 89 1d b7 68 60 00    mov    %rbx,0x6068b7(%rip)        # bba860 <CurrentMemoryContext>
         :	         * attached to a virtual or non-local physical tuple.  There seems no harm
         :	         * in that at the moment, but if any materializes, we should change this
         :	         * function to force the slot into minimal-tuple-only state.
         :	         */
         :
         :	        return slot->tts_mintuple;
    0.00 :	  5b3fa9:       49 8b 44 24 38          mov    0x38(%r12),%rax
         :	}
    0.00 :	  5b3fae:       eb bc                   jmp    5b3f6c <ExecFetchSlotMinimalTuple+0x1c>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:347
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b95d0 <initialize_aggregates>:
         :	 */
         :	static void
         :	initialize_aggregates(AggState *aggstate,
         :	                                          AggStatePerAgg peragg,
         :	                                          AggStatePerGroup pergroup)
         :	{
    0.00 :	  5b95d0:       55                      push   %rbp
    0.00 :	  5b95d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b95d4:       41 57                   push   %r15
    0.00 :	  5b95d6:       49 89 ff                mov    %rdi,%r15
    0.00 :	  5b95d9:       41 56                   push   %r14
    0.00 :	  5b95db:       41 55                   push   %r13
    0.00 :	  5b95dd:       41 54                   push   %r12
    0.00 :	  5b95df:       53                      push   %rbx
    0.00 :	  5b95e0:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	  5b95e4:       48 89 75 d0             mov    %rsi,-0x30(%rbp)
    0.00 :	  5b95e8:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b95ec:       44 8b 8f 98 00 00 00    mov    0x98(%rdi),%r9d
    0.00 :	  5b95f3:       45 85 c9                test   %r9d,%r9d
    0.00 :	  5b95f6:       0f 8e 7c 01 00 00       jle    5b9778 <initialize_aggregates+0x1a8>
    0.00 :	  5b95fc:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5b95ff:       eb 3e                   jmp    5b963f <initialize_aggregates+0x6f>
    0.00 :	  5b9601:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                 *
         :	                 * Note that when the initial value is pass-by-ref, we must copy it
         :	                 * (into the aggcontext) since we will pfree the transValue later.
         :	                 */
         :	                if (peraggstate->initValueIsNull)
         :	                        pergroupstate->transValue = peraggstate->initValue;
    0.00 :	  5b9608:       49 8b 84 24 c0 00 00    mov    0xc0(%r12),%rax
    0.00 :	  5b960f:       00 
    0.00 :	  5b9610:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                        pergroupstate->transValue = datumCopy(peraggstate->initValue,
         :	                                                                                                  peraggstate->transtypeByVal,
         :	                                                                                                  peraggstate->transtypeLen);
         :	                        MemoryContextSwitchTo(oldContext);
         :	                }
         :	                pergroupstate->transValueIsNull = peraggstate->initValueIsNull;
    0.00 :	  5b9614:       41 0f b6 84 24 c8 00    movzbl 0xc8(%r12),%eax
    0.00 :	  5b961b:       00 00 
         :	                                          AggStatePerAgg peragg,
         :	                                          AggStatePerGroup pergroup)
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b961d:       41 83 c6 01             add    $0x1,%r14d
         :	                        pergroupstate->transValue = datumCopy(peraggstate->initValue,
         :	                                                                                                  peraggstate->transtypeByVal,
         :	                                                                                                  peraggstate->transtypeLen);
         :	                        MemoryContextSwitchTo(oldContext);
         :	                }
         :	                pergroupstate->transValueIsNull = peraggstate->initValueIsNull;
    0.00 :	  5b9621:       41 88 45 08             mov    %al,0x8(%r13)
         :	                 * pg_aggregate table then we will let the first non-NULL value
         :	                 * returned from the outer procNode become the initial value. (This is
         :	                 * useful for aggregates like max() and min().) The noTransValue flag
         :	                 * signals that we still need to do this.
         :	                 */
         :	                pergroupstate->noTransValue = peraggstate->initValueIsNull;
    0.00 :	  5b9625:       41 0f b6 84 24 c8 00    movzbl 0xc8(%r12),%eax
    0.00 :	  5b962c:       00 00 
    0.00 :	  5b962e:       41 88 45 09             mov    %al,0x9(%r13)
         :	                                          AggStatePerAgg peragg,
         :	                                          AggStatePerGroup pergroup)
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9632:       45 39 b7 98 00 00 00    cmp    %r14d,0x98(%r15)
    0.00 :	  5b9639:       0f 8e 39 01 00 00       jle    5b9778 <initialize_aggregates+0x1a8>
         :	        {
         :	                AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b963f:       49 63 c6                movslq %r14d,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:347
  100.00 :	  5b9642:       4c 8b 65 d0             mov    -0x30(%rbp),%r12
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5b9646:       4c 8b 6d c8             mov    -0x38(%rbp),%r13
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	        {
         :	                AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b964a:       48 69 d0 a8 04 00 00    imul   $0x4a8,%rax,%rdx
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5b9651:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5b9655:       49 01 c5                add    %rax,%r13
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	        {
         :	                AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b9658:       49 01 d4                add    %rdx,%r12
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                /*
         :	                 * Start a fresh sort operation for each DISTINCT/ORDER BY aggregate.
         :	                 */
         :	                if (peraggstate->numSortCols > 0)
    0.00 :	  5b965b:       45 8b 84 24 8c 00 00    mov    0x8c(%r12),%r8d
    0.00 :	  5b9662:       00 
    0.00 :	  5b9663:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5b9666:       7e 6c                   jle    5b96d4 <initialize_aggregates+0x104>
         :	                {
         :	                        /*
         :	                         * In case of rescan, maybe there could be an uncompleted sort
         :	                         * operation?  Clean it up if so.
         :	                         */
         :	                        if (peraggstate->sortstate)
    0.00 :	  5b9668:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5b966f:       00 
    0.00 :	  5b9670:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b9673:       74 05                   je     5b967a <initialize_aggregates+0xaa>
         :	                                tuplesort_end(peraggstate->sortstate);
    0.00 :	  5b9675:       e8 66 5b 1e 00          callq  79f1e0 <tuplesort_end>
         :	                        /*
         :	                         * We use a plain Datum sorter when there's a single input column;
         :	                         * otherwise sort the full tuple.  (See comments for
         :	                         * process_ordered_aggregate_single.)
         :	                         */
         :	                        peraggstate->sortstate =
    0.00 :	  5b967a:       41 83 7c 24 14 01       cmpl   $0x1,0x14(%r12)
    0.00 :	  5b9680:       0f 84 aa 00 00 00       je     5b9730 <initialize_aggregates+0x160>
    0.00 :	  5b9686:       4d 8b 8c 24 b0 00 00    mov    0xb0(%r12),%r9
    0.00 :	  5b968d:       00 
    0.00 :	  5b968e:       4d 8b 84 24 a8 00 00    mov    0xa8(%r12),%r8
    0.00 :	  5b9695:       00 
    0.00 :	  5b9696:       49 8b 8c 24 a0 00 00    mov    0xa0(%r12),%rcx
    0.00 :	  5b969d:       00 
    0.00 :	  5b969e:       49 8b 94 24 98 00 00    mov    0x98(%r12),%rdx
    0.00 :	  5b96a5:       00 
    0.00 :	  5b96a6:       41 8b b4 24 8c 00 00    mov    0x8c(%r12),%esi
    0.00 :	  5b96ad:       00 
    0.00 :	  5b96ae:       49 8b bc 24 d8 00 00    mov    0xd8(%r12),%rdi
    0.00 :	  5b96b5:       00 
    0.00 :	  5b96b6:       8b 05 5c f4 5a 00       mov    0x5af45c(%rip),%eax        # b68b18 <work_mem>
    0.00 :	  5b96bc:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%rsp)
    0.00 :	  5b96c3:       00 
    0.00 :	  5b96c4:       89 04 24                mov    %eax,(%rsp)
    0.00 :	  5b96c7:       e8 24 60 1e 00          callq  79f6f0 <tuplesort_begin_heap>
    0.00 :	  5b96cc:       49 89 84 24 f8 00 00    mov    %rax,0xf8(%r12)
    0.00 :	  5b96d3:       00 
         :	                 * (Re)set transValue to the initial value.
         :	                 *
         :	                 * Note that when the initial value is pass-by-ref, we must copy it
         :	                 * (into the aggcontext) since we will pfree the transValue later.
         :	                 */
         :	                if (peraggstate->initValueIsNull)
    0.00 :	  5b96d4:       41 80 bc 24 c8 00 00    cmpb   $0x0,0xc8(%r12)
    0.00 :	  5b96db:       00 00 
    0.00 :	  5b96dd:       0f 85 25 ff ff ff       jne    5b9608 <initialize_aggregates+0x38>
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b96e3:       49 8b 87 b8 00 00 00    mov    0xb8(%r15),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5b96ea:       48 8b 1d 6f 11 60 00    mov    0x60116f(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b96f1:       48 89 05 68 11 60 00    mov    %rax,0x601168(%rip)        # bba860 <CurrentMemoryContext>
         :	                else
         :	                {
         :	                        MemoryContext oldContext;
         :
         :	                        oldContext = MemoryContextSwitchTo(aggstate->aggcontext);
         :	                        pergroupstate->transValue = datumCopy(peraggstate->initValue,
    0.00 :	  5b96f8:       41 0f bf 94 24 ce 00    movswl 0xce(%r12),%edx
    0.00 :	  5b96ff:       00 00 
    0.00 :	  5b9701:       41 0f be b4 24 d2 00    movsbl 0xd2(%r12),%esi
    0.00 :	  5b9708:       00 00 
    0.00 :	  5b970a:       49 8b bc 24 c0 00 00    mov    0xc0(%r12),%rdi
    0.00 :	  5b9711:       00 
    0.00 :	  5b9712:       e8 59 68 11 00          callq  6cff70 <datumCopy>
    0.00 :	  5b9717:       49 89 45 00             mov    %rax,0x0(%r13)
    0.00 :	  5b971b:       48 89 1d 3e 11 60 00    mov    %rbx,0x60113e(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5b9722:       e9 ed fe ff ff          jmpq   5b9614 <initialize_aggregates+0x44>
    0.00 :	  5b9727:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b972e:       00 00 
         :	                        /*
         :	                         * We use a plain Datum sorter when there's a single input column;
         :	                         * otherwise sort the full tuple.  (See comments for
         :	                         * process_ordered_aggregate_single.)
         :	                         */
         :	                        peraggstate->sortstate =
    0.00 :	  5b9730:       49 8b 84 24 b0 00 00    mov    0xb0(%r12),%rax
    0.00 :	  5b9737:       00 
    0.00 :	  5b9738:       49 8b 94 24 a8 00 00    mov    0xa8(%r12),%rdx
    0.00 :	  5b973f:       00 
    0.00 :	  5b9740:       45 31 c9                xor    %r9d,%r9d
    0.00 :	  5b9743:       49 8b b4 24 a0 00 00    mov    0xa0(%r12),%rsi
    0.00 :	  5b974a:       00 
    0.00 :	  5b974b:       44 8b 05 c6 f3 5a 00    mov    0x5af3c6(%rip),%r8d        # b68b18 <work_mem>
    0.00 :	  5b9752:       0f be 08                movsbl (%rax),%ecx
    0.00 :	  5b9755:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	  5b975c:       00 
    0.00 :	  5b975d:       8b 12                   mov    (%rdx),%edx
    0.00 :	  5b975f:       8b 36                   mov    (%rsi),%esi
    0.00 :	  5b9761:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5b9765:       48 8b 00                mov    (%rax),%rax
    0.00 :	  5b9768:       8b 78 44                mov    0x44(%rax),%edi
    0.00 :	  5b976b:       e8 30 5d 1e 00          callq  79f4a0 <tuplesort_begin_datum>
    0.00 :	  5b9770:       e9 57 ff ff ff          jmpq   5b96cc <initialize_aggregates+0xfc>
    0.00 :	  5b9775:       0f 1f 00                nopl   (%rax)
         :	                 * useful for aggregates like max() and min().) The noTransValue flag
         :	                 * signals that we still need to do this.
         :	                 */
         :	                pergroupstate->noTransValue = peraggstate->initValueIsNull;
         :	        }
         :	}
    0.00 :	  5b9778:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  5b977c:       5b                      pop    %rbx
    0.00 :	  5b977d:       41 5c                   pop    %r12
    0.00 :	  5b977f:       41 5d                   pop    %r13
    0.00 :	  5b9781:       41 5e                   pop    %r14
    0.00 :	  5b9783:       41 5f                   pop    %r15
    0.00 :	  5b9785:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1624
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbfc0 <dense_alloc>:
         :	/*
         :	 * Allocate 'size' bytes from the currently active HashMemoryChunk
         :	 */
         :	static void *
         :	dense_alloc(HashJoinTable hashtable, Size size)
         :	{
    0.00 :	  5bbfc0:       55                      push   %rbp
    0.00 :	  5bbfc1:       48 89 e5                mov    %rsp,%rbp
  100.00 :	  5bbfc4:       41 54                   push   %r12
    0.00 :	  5bbfc6:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5bbfc9:       53                      push   %rbx
         :	        HashMemoryChunk newChunk;
         :	        char       *ptr;
         :
         :	        /* just in case the size is not already aligned properly */
         :	        size = MAXALIGN(size);
    0.00 :	  5bbfca:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  5bbfce:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :
         :	        /*
         :	         * If tuple size is larger than of 1/4 of chunk size, allocate a separate
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
    0.00 :	  5bbfd2:       48 81 fb 00 20 00 00    cmp    $0x2000,%rbx
    0.00 :	  5bbfd9:       0f 87 89 00 00 00       ja     5bc068 <dense_alloc+0xa8>
         :
         :	        /*
         :	         * See if we have enough space for it in the current chunk (if any).
         :	         * If not, allocate a fresh chunk.
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
    0.00 :	  5bbfdf:       48 8b 97 c8 00 00 00    mov    0xc8(%rdi),%rdx
    0.00 :	  5bbfe6:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bbfe9:       74 35                   je     5bc020 <dense_alloc+0x60>
    0.00 :	  5bbfeb:       48 8b 4a 10             mov    0x10(%rdx),%rcx
    0.00 :	  5bbfef:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5bbff3:       48 29 c8                sub    %rcx,%rax
    0.00 :	  5bbff6:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  5bbff9:       77 25                   ja     5bc020 <dense_alloc+0x60>
         :	                return newChunk->data;
         :	        }
         :
         :	        /* There is enough space in the current chunk, let's add the tuple */
         :	        ptr = hashtable->chunks->data + hashtable->chunks->used;
         :	        hashtable->chunks->used += size;
    0.00 :	  5bbffb:       48 8d 04 0b             lea    (%rbx,%rcx,1),%rax
    0.00 :	  5bbfff:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	        hashtable->chunks->ntuples += 1;
    0.00 :	  5bc003:       48 8b 87 c8 00 00 00    mov    0xc8(%rdi),%rax
    0.00 :	  5bc00a:       83 00 01                addl   $0x1,(%rax)
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
    0.00 :	  5bc00d:       48 8d 44 0a 20          lea    0x20(%rdx,%rcx,1),%rax
         :	}
    0.00 :	  5bc012:       5b                      pop    %rbx
    0.00 :	  5bc013:       41 5c                   pop    %r12
    0.00 :	  5bc015:       c9                      leaveq 
    0.00 :	  5bc016:       c3                      retq   
    0.00 :	  5bc017:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bc01e:       00 00 
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
         :	                (hashtable->chunks->maxlen - hashtable->chunks->used) < size)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc020:       49 8b bc 24 c0 00 00    mov    0xc0(%r12),%rdi
    0.00 :	  5bc027:       00 
    0.00 :	  5bc028:       be 20 80 00 00          mov    $0x8020,%esi
    0.00 :	  5bc02d:       e8 5e ce 1d 00          callq  798e90 <MemoryContextAlloc>
         :	                                           offsetof(HashMemoryChunkData, data) + HASH_CHUNK_SIZE);
         :
         :	                newChunk->maxlen = HASH_CHUNK_SIZE;
    0.00 :	  5bc032:       48 c7 40 08 00 80 00    movq   $0x8000,0x8(%rax)
    0.00 :	  5bc039:       00 
         :	                newChunk->used = size;
    0.00 :	  5bc03a:       48 89 58 10             mov    %rbx,0x10(%rax)
         :	                newChunk->ntuples = 1;
    0.00 :	  5bc03e:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :
         :	                newChunk->next = hashtable->chunks;
    0.00 :	  5bc044:       49 8b 94 24 c8 00 00    mov    0xc8(%r12),%rdx
    0.00 :	  5bc04b:       00 
    0.00 :	  5bc04c:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                hashtable->chunks = newChunk;
    0.00 :	  5bc050:       49 89 84 24 c8 00 00    mov    %rax,0xc8(%r12)
    0.00 :	  5bc057:       00 
         :
         :	                return newChunk->data;
    0.00 :	  5bc058:       48 83 c0 20             add    $0x20,%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc05c:       5b                      pop    %rbx
    0.00 :	  5bc05d:       41 5c                   pop    %r12
    0.00 :	  5bc05f:       c9                      leaveq 
    0.00 :	  5bc060:       c3                      retq   
    0.00 :	  5bc061:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc068:       48 8b bf c0 00 00 00    mov    0xc0(%rdi),%rdi
    0.00 :	  5bc06f:       48 8d 73 20             lea    0x20(%rbx),%rsi
    0.00 :	  5bc073:       e8 18 ce 1d 00          callq  798e90 <MemoryContextAlloc>
    0.00 :	  5bc078:       48 89 c2                mov    %rax,%rdx
         :	                                                                  offsetof(HashMemoryChunkData, data) + size);
         :	                newChunk->maxlen = size;
    0.00 :	  5bc07b:       48 89 58 08             mov    %rbx,0x8(%rax)
         :	                newChunk->used = 0;
    0.00 :	  5bc07f:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5bc086:       00 
         :	                newChunk->ntuples = 0;
    0.00 :	  5bc087:       c7 00 00 00 00 00       movl   $0x0,(%rax)
         :
         :	                /*
         :	                 * Add this chunk to the list after the first existing chunk, so that
         :	                 * we don't lose the remaining space in the "current" chunk.
         :	                 */
         :	                if (hashtable->chunks != NULL)
    0.00 :	  5bc08d:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc094:       00 
    0.00 :	  5bc095:       48 85 c0                test   %rax,%rax
    0.00 :	  5bc098:       74 26                   je     5bc0c0 <dense_alloc+0x100>
         :	                {
         :	                        newChunk->next = hashtable->chunks->next;
    0.00 :	  5bc09a:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	  5bc09e:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                        hashtable->chunks->next = newChunk;
    0.00 :	  5bc0a2:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc0a9:       00 
    0.00 :	  5bc0aa:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                {
         :	                        newChunk->next = hashtable->chunks;
         :	                        hashtable->chunks = newChunk;
         :	                }
         :
         :	                newChunk->used += size;
    0.00 :	  5bc0ae:       48 01 5a 10             add    %rbx,0x10(%rdx)
         :	                newChunk->ntuples += 1;
    0.00 :	  5bc0b2:       83 02 01                addl   $0x1,(%rdx)
         :
         :	                return newChunk->data;
    0.00 :	  5bc0b5:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc0b9:       5b                      pop    %rbx
    0.00 :	  5bc0ba:       41 5c                   pop    %r12
    0.00 :	  5bc0bc:       c9                      leaveq 
    0.00 :	  5bc0bd:       c3                      retq   
    0.00 :	  5bc0be:       66 90                   xchg   %ax,%ax
         :	                        newChunk->next = hashtable->chunks->next;
         :	                        hashtable->chunks->next = newChunk;
         :	                }
         :	                else
         :	                {
         :	                        newChunk->next = hashtable->chunks;
    0.00 :	  5bc0c0:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  5bc0c7:       00 
         :	                        hashtable->chunks = newChunk;
    0.00 :	  5bc0c8:       49 89 94 24 c8 00 00    mov    %rdx,0xc8(%r12)
    0.00 :	  5bc0cf:       00 
    0.00 :	  5bc0d0:       eb dc                   jmp    5bc0ae <dense_alloc+0xee>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:1022
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e34f0 <tbm_comparator>:
         :	 * qsort comparator to handle PagetableEntry pointers.
         :	 */
         :	static int
         :	tbm_comparator(const void *left, const void *right)
         :	{
         :	        BlockNumber l = (*((PagetableEntry *const *) left))->blockno;
    0.00 :	  5e34f0:       48 8b 17                mov    (%rdi),%rdx
         :	        BlockNumber r = (*((PagetableEntry *const *) right))->blockno;
    0.00 :	  5e34f3:       48 8b 06                mov    (%rsi),%rax
         :
         :	        if (l < r)
    0.00 :	  5e34f6:       b9 ff ff ff ff          mov    $0xffffffff,%ecx
         :	/*
         :	 * qsort comparator to handle PagetableEntry pointers.
         :	 */
         :	static int
         :	tbm_comparator(const void *left, const void *right)
         :	{
    0.00 :	  5e34fb:       55                      push   %rbp
         :	        BlockNumber l = (*((PagetableEntry *const *) left))->blockno;
         :	        BlockNumber r = (*((PagetableEntry *const *) right))->blockno;
    0.00 :	  5e34fc:       8b 00                   mov    (%rax),%eax
         :
         :	        if (l < r)
    0.00 :	  5e34fe:       39 02                   cmp    %eax,(%rdx)
         :	/*
         :	 * qsort comparator to handle PagetableEntry pointers.
         :	 */
         :	static int
         :	tbm_comparator(const void *left, const void *right)
         :	{
    0.00 :	  5e3500:       48 89 e5                mov    %rsp,%rbp
         :	        BlockNumber l = (*((PagetableEntry *const *) left))->blockno;
         :	        BlockNumber r = (*((PagetableEntry *const *) right))->blockno;
         :
         :	        if (l < r)
    0.00 :	  5e3503:       72 06                   jb     5e350b <tbm_comparator+0x1b>
    0.00 :	  5e3505:       0f 97 c0                seta   %al
    0.00 :	  5e3508:       0f b6 c8                movzbl %al,%ecx
         :	                return -1;
         :	        else if (l > r)
         :	                return 1;
         :	        return 0;
         :	}
    0.00 :	  5e350b:       89 c8                   mov    %ecx,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:1022
  100.00 :	  5e350d:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:941
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e3af0 <tbm_mark_page_lossy>:
         :	 * This may cause the table to exceed the desired memory size.  It is
         :	 * up to the caller to call tbm_lossify() at the next safe point if so.
         :	 */
         :	static void
         :	tbm_mark_page_lossy(TIDBitmap *tbm, BlockNumber pageno)
         :	{
    0.00 :	  5e3af0:       55                      push   %rbp
    0.00 :	  5e3af1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5e3af4:       41 54                   push   %r12
    0.00 :	  5e3af6:       53                      push   %rbx
    0.00 :	  5e3af7:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5e3afa:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  5e3afe:       89 75 dc                mov    %esi,-0x24(%rbp)
         :	        int                     bitno;
         :	        int                     wordnum;
         :	        int                     bitnum;
         :
         :	        /* We force the bitmap into hashtable mode whenever it's lossy */
         :	        if (tbm->status != TBM_HASH)
    0.00 :	  5e3b01:       83 7f 10 02             cmpl   $0x2,0x10(%rdi)
    0.00 :	  5e3b05:       74 05                   je     5e3b0c <tbm_mark_page_lossy+0x1c>
         :	                tbm_create_pagetable(tbm);
    0.00 :	  5e3b07:       e8 04 ff ff ff          callq  5e3a10 <tbm_create_pagetable>
         :
         :	        bitno = pageno % PAGES_PER_CHUNK;
    0.00 :	  5e3b0c:       8b 45 dc                mov    -0x24(%rbp),%eax
    0.00 :	  5e3b0f:       44 0f b6 e0             movzbl %al,%r12d
         :	        chunk_pageno = pageno - bitno;
    0.00 :	  5e3b13:       44 29 e0                sub    %r12d,%eax
         :
         :	        /*
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
    0.00 :	  5e3b16:       45 85 e4                test   %r12d,%r12d
         :	        /* We force the bitmap into hashtable mode whenever it's lossy */
         :	        if (tbm->status != TBM_HASH)
         :	                tbm_create_pagetable(tbm);
         :
         :	        bitno = pageno % PAGES_PER_CHUNK;
         :	        chunk_pageno = pageno - bitno;
    0.00 :	  5e3b19:       89 45 e8                mov    %eax,-0x18(%rbp)
         :
         :	        /*
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
    0.00 :	  5e3b1c:       0f 85 06 01 00 00       jne    5e3c28 <tbm_mark_page_lossy+0x138>
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
         :	                }
         :	        }
         :
         :	        /* Look up or create entry for chunk-header page */
         :	        page = (PagetableEntry *) hash_search(tbm->pagetable,
    0.00 :	  5e3b22:       48 8b 7b 18             mov    0x18(%rbx),%rdi
    0.00 :	  5e3b26:       48 8d 75 e8             lea    -0x18(%rbp),%rsi
    0.00 :	  5e3b2a:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  5e3b2e:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  5e3b33:       e8 68 0b 1a 00          callq  7846a0 <hash_search>
         :	                                                                                  (void *) &chunk_pageno,
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
    0.00 :	  5e3b38:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
         :	                }
         :	        }
         :
         :	        /* Look up or create entry for chunk-header page */
         :	        page = (PagetableEntry *) hash_search(tbm->pagetable,
    0.00 :	  5e3b3c:       48 89 c6                mov    %rax,%rsi
         :	                                                                                  (void *) &chunk_pageno,
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
    0.00 :	  5e3b3f:       75 6f                   jne    5e3bb0 <tbm_mark_page_lossy+0xc0>
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3b41:       a8 07                   test   $0x7,%al
    0.00 :	  5e3b43:       0f 85 c7 00 00 00       jne    5e3c10 <tbm_mark_page_lossy+0x120>
    0.00 :	  5e3b49:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5e3b50:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  5e3b57:       00 
    0.00 :	  5e3b58:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5e3b5f:       00 
    0.00 :	  5e3b60:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  5e3b67:       00 
    0.00 :	  5e3b68:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  5e3b6f:       00 
    0.00 :	  5e3b70:       48 c7 40 28 00 00 00    movq   $0x0,0x28(%rax)
    0.00 :	  5e3b77:       00 
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3b78:       8b 45 e8                mov    -0x18(%rbp),%eax
         :	                page->ischunk = true;
    0.00 :	  5e3b7b:       c6 46 04 01             movb   $0x1,0x4(%rsi)
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3b7f:       89 06                   mov    %eax,(%rsi)
         :	                page->ischunk = true;
         :	                /* must count it too */
         :	                tbm->nentries++;
    0.00 :	  5e3b81:       83 43 20 01             addl   $0x1,0x20(%rbx)
         :	                tbm->nchunks++;
    0.00 :	  5e3b85:       83 43 2c 01             addl   $0x1,0x2c(%rbx)
         :	                tbm->nchunks++;
         :	                tbm->npages--;
         :	        }
         :
         :	        /* Now set the original target page's bit */
         :	        wordnum = WORDNUM(bitno);
    0.00 :	  5e3b89:       44 89 e2                mov    %r12d,%edx
         :	        bitnum = BITNUM(bitno);
         :	        page->words[wordnum] |= ((bitmapword) 1 << bitnum);
    0.00 :	  5e3b8c:       41 83 e4 1f             and    $0x1f,%r12d
    0.00 :	  5e3b90:       b8 01 00 00 00          mov    $0x1,%eax
         :	                tbm->nchunks++;
         :	                tbm->npages--;
         :	        }
         :
         :	        /* Now set the original target page's bit */
         :	        wordnum = WORDNUM(bitno);
    0.00 :	  5e3b95:       c1 fa 05                sar    $0x5,%edx
         :	        bitnum = BITNUM(bitno);
         :	        page->words[wordnum] |= ((bitmapword) 1 << bitnum);
    0.00 :	  5e3b98:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  5e3b9b:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5e3b9e:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e3ba0:       09 44 96 08             or     %eax,0x8(%rsi,%rdx,4)
         :	}
    0.00 :	  5e3ba4:       48 83 c4 20             add    $0x20,%rsp
    0.00 :	  5e3ba8:       5b                      pop    %rbx
    0.00 :	  5e3ba9:       41 5c                   pop    %r12
    0.00 :	  5e3bab:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:941
  100.00 :	  5e3bac:       c3                      retq   
    0.00 :	  5e3bad:       0f 1f 00                nopl   (%rax)
         :	                page->ischunk = true;
         :	                /* must count it too */
         :	                tbm->nentries++;
         :	                tbm->nchunks++;
         :	        }
         :	        else if (!page->ischunk)
    0.00 :	  5e3bb0:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5e3bb4:       75 d3                   jne    5e3b89 <tbm_mark_page_lossy+0x99>
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3bb6:       a8 07                   test   $0x7,%al
    0.00 :	  5e3bb8:       0f 85 9a 00 00 00       jne    5e3c58 <tbm_mark_page_lossy+0x168>
    0.00 :	  5e3bbe:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5e3bc5:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  5e3bcc:       00 
    0.00 :	  5e3bcd:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5e3bd4:       00 
    0.00 :	  5e3bd5:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  5e3bdc:       00 
    0.00 :	  5e3bdd:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  5e3be4:       00 
    0.00 :	  5e3be5:       48 c7 40 28 00 00 00    movq   $0x0,0x28(%rax)
    0.00 :	  5e3bec:       00 
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3bed:       8b 45 e8                mov    -0x18(%rbp),%eax
         :	                page->ischunk = true;
    0.00 :	  5e3bf0:       c6 46 04 01             movb   $0x1,0x4(%rsi)
         :	                /* we assume it had some tuple bit(s) set, so mark it lossy */
         :	                page->words[0] = ((bitmapword) 1 << 0);
    0.00 :	  5e3bf4:       c7 46 08 01 00 00 00    movl   $0x1,0x8(%rsi)
         :	        }
         :	        else if (!page->ischunk)
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3bfb:       89 06                   mov    %eax,(%rsi)
         :	                page->ischunk = true;
         :	                /* we assume it had some tuple bit(s) set, so mark it lossy */
         :	                page->words[0] = ((bitmapword) 1 << 0);
         :	                /* adjust counts */
         :	                tbm->nchunks++;
    0.00 :	  5e3bfd:       83 43 2c 01             addl   $0x1,0x2c(%rbx)
         :	                tbm->npages--;
    0.00 :	  5e3c01:       83 6b 28 01             subl   $0x1,0x28(%rbx)
    0.00 :	  5e3c05:       eb 82                   jmp    5e3b89 <tbm_mark_page_lossy+0x99>
    0.00 :	  5e3c07:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5e3c0e:       00 00 
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3c10:       b9 06 00 00 00          mov    $0x6,%ecx
    0.00 :	  5e3c15:       31 c0                   xor    %eax,%eax
    0.00 :	  5e3c17:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5e3c1a:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	  5e3c1d:       e9 56 ff ff ff          jmpq   5e3b78 <tbm_mark_page_lossy+0x88>
    0.00 :	  5e3c22:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
         :	        {
         :	                if (hash_search(tbm->pagetable,
    0.00 :	  5e3c28:       48 8b 7b 18             mov    0x18(%rbx),%rdi
    0.00 :	  5e3c2c:       48 8d 75 dc             lea    -0x24(%rbp),%rsi
    0.00 :	  5e3c30:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5e3c32:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  5e3c37:       e8 64 0a 1a 00          callq  7846a0 <hash_search>
    0.00 :	  5e3c3c:       48 85 c0                test   %rax,%rax
    0.00 :	  5e3c3f:       0f 84 dd fe ff ff       je     5e3b22 <tbm_mark_page_lossy+0x32>
         :	                                                (void *) &pageno,
         :	                                                HASH_REMOVE, NULL) != NULL)
         :	                {
         :	                        /* It was present, so adjust counts */
         :	                        tbm->nentries--;
    0.00 :	  5e3c45:       83 6b 20 01             subl   $0x1,0x20(%rbx)
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
    0.00 :	  5e3c49:       83 6b 28 01             subl   $0x1,0x28(%rbx)
    0.00 :	  5e3c4d:       e9 d0 fe ff ff          jmpq   5e3b22 <tbm_mark_page_lossy+0x32>
    0.00 :	  5e3c52:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                tbm->nchunks++;
         :	        }
         :	        else if (!page->ischunk)
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3c58:       b9 06 00 00 00          mov    $0x6,%ecx
    0.00 :	  5e3c5d:       31 c0                   xor    %eax,%eax
    0.00 :	  5e3c5f:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5e3c62:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	  5e3c65:       eb 86                   jmp    5e3bed <tbm_mark_page_lossy+0xfd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/optimizer/path/joinpath.c:322
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000060eea0 <try_nestloop_path>:
         :	                                  Relids extra_lateral_rels,
         :	                                  Path *outer_path,
         :	                                  Path *inner_path,
         :	                                  List *restrict_clauses,
         :	                                  List *pathkeys)
         :	{
    0.00 :	  60eea0:       55                      push   %rbp
    0.00 :	  60eea1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  60eea4:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  60eea8:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  60eeac:       4d 89 cc                mov    %r9,%r12
    0.00 :	  60eeaf:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  60eeb3:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  60eeb7:       49 89 f5                mov    %rsi,%r13
    0.00 :	  60eeba:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  60eebe:       48 81 ec e0 00 00 00    sub    $0xe0,%rsp
    0.00 :	  60eec5:       4c 8b 7d 18             mov    0x18(%rbp),%r15
    0.00 :	  60eec9:       4c 8b 75 20             mov    0x20(%rbp),%r14
    0.00 :	  60eecd:       48 89 bd 68 ff ff ff    mov    %rdi,-0x98(%rbp)
    0.00 :	  60eed4:       89 95 64 ff ff ff       mov    %edx,-0x9c(%rbp)
    0.00 :	  60eeda:       48 89 8d 58 ff ff ff    mov    %rcx,-0xa8(%rbp)
         :
         :	        /*
         :	         * Check to see if proposed path is still parameterized, and reject if the
         :	         * parameterization wouldn't be sensible.
         :	         */
         :	        required_outer = calc_nestloop_required_outer(outer_path,
    0.00 :	  60eee1:       4c 89 ff                mov    %r15,%rdi
         :	                                  Relids extra_lateral_rels,
         :	                                  Path *outer_path,
         :	                                  Path *inner_path,
         :	                                  List *restrict_clauses,
         :	                                  List *pathkeys)
         :	{
    0.00 :	  60eee4:       4c 89 85 50 ff ff ff    mov    %r8,-0xb0(%rbp)
         :
         :	        /*
         :	         * Check to see if proposed path is still parameterized, and reject if the
         :	         * parameterization wouldn't be sensible.
         :	         */
         :	        required_outer = calc_nestloop_required_outer(outer_path,
    0.00 :	  60eeeb:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  60eeee:       e8 4d 15 02 00          callq  630440 <calc_nestloop_required_outer>
         :	                                                                                                  inner_path);
         :	        if (required_outer &&
    0.00 :	  60eef3:       48 85 c0                test   %rax,%rax
         :
         :	        /*
         :	         * Check to see if proposed path is still parameterized, and reject if the
         :	         * parameterization wouldn't be sensible.
         :	         */
         :	        required_outer = calc_nestloop_required_outer(outer_path,
    0.00 :	  60eef6:       48 89 c3                mov    %rax,%rbx
         :	                                                                                                  inner_path);
         :	        if (required_outer &&
    0.00 :	  60eef9:       74 0f                   je     60ef0a <try_nestloop_path+0x6a>
    0.00 :	  60eefb:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  60eefe:       48 89 c7                mov    %rax,%rdi
    0.00 :	  60ef01:       e8 7a 3a fd ff          callq  5e2980 <bms_overlap>
    0.00 :	  60ef06:       84 c0                   test   %al,%al
    0.00 :	  60ef08:       74 66                   je     60ef70 <try_nestloop_path+0xd0>
         :
         :	        /*
         :	         * Independently of that, add parameterization needed for any
         :	         * PlaceHolderVars that need to be computed at the join.
         :	         */
         :	        required_outer = bms_add_members(required_outer, extra_lateral_rels);
    0.00 :	  60ef0a:       48 8b 75 10             mov    0x10(%rbp),%rsi
    0.00 :	  60ef0e:       48 89 df                mov    %rbx,%rdi
         :	         * by some existing path for the joinrel.  If not, do the full pushup with
         :	         * creating a fully valid path structure and submitting it to add_path().
         :	         * The latter two steps are expensive enough to make this two-phase
         :	         * methodology worthwhile.
         :	         */
         :	        initial_cost_nestloop(root, &workspace, jointype,
    0.00 :	  60ef11:       4c 8d a5 70 ff ff ff    lea    -0x90(%rbp),%r12
         :
         :	        /*
         :	         * Independently of that, add parameterization needed for any
         :	         * PlaceHolderVars that need to be computed at the join.
         :	         */
         :	        required_outer = bms_add_members(required_outer, extra_lateral_rels);
    0.00 :	  60ef18:       e8 43 42 fd ff          callq  5e3160 <bms_add_members>
         :	         * by some existing path for the joinrel.  If not, do the full pushup with
         :	         * creating a fully valid path structure and submitting it to add_path().
         :	         * The latter two steps are expensive enough to make this two-phase
         :	         * methodology worthwhile.
         :	         */
         :	        initial_cost_nestloop(root, &workspace, jointype,
    0.00 :	  60ef1d:       4c 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%r9
         :
         :	        /*
         :	         * Independently of that, add parameterization needed for any
         :	         * PlaceHolderVars that need to be computed at the join.
         :	         */
         :	        required_outer = bms_add_members(required_outer, extra_lateral_rels);
    0.00 :	  60ef24:       48 89 c3                mov    %rax,%rbx
         :	         * by some existing path for the joinrel.  If not, do the full pushup with
         :	         * creating a fully valid path structure and submitting it to add_path().
         :	         * The latter two steps are expensive enough to make this two-phase
         :	         * methodology worthwhile.
         :	         */
         :	        initial_cost_nestloop(root, &workspace, jointype,
    0.00 :	  60ef27:       8b 95 64 ff ff ff       mov    -0x9c(%rbp),%edx
    0.00 :	  60ef2d:       48 8b 85 50 ff ff ff    mov    -0xb0(%rbp),%rax
    0.00 :	  60ef34:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
    0.00 :	  60ef3b:       4d 89 f0                mov    %r14,%r8
    0.00 :	  60ef3e:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  60ef41:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  60ef44:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  60ef48:       e8 93 70 ff ff          callq  605fe0 <initial_cost_nestloop>
         :	                                                  outer_path, inner_path,
         :	                                                  sjinfo, semifactors);
         :
         :	        if (add_path_precheck(joinrel,
    0.00 :	  60ef4d:       48 8b 75 30             mov    0x30(%rbp),%rsi
    0.00 :	  60ef51:       f2 0f 10 85 70 ff ff    movsd  -0x90(%rbp),%xmm0
    0.00 :	  60ef58:       ff 
    0.00 :	  60ef59:       f2 0f 10 8d 78 ff ff    movsd  -0x88(%rbp),%xmm1
    0.00 :	  60ef60:       ff 
    0.00 :	  60ef61:       48 89 da                mov    %rbx,%rdx
    0.00 :	  60ef64:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  60ef67:       e8 b4 28 02 00          callq  631820 <add_path_precheck>
    0.00 :	  60ef6c:       84 c0                   test   %al,%al
    0.00 :	  60ef6e:       75 20                   jne    60ef90 <try_nestloop_path+0xf0>
         :	                                                                          required_outer));
         :	        }
         :	        else
         :	        {
         :	                /* Waste no memory when we reject a path here */
         :	                bms_free(required_outer);
    0.00 :	  60ef70:       48 89 df                mov    %rbx,%rdi
    0.00 :	  60ef73:       e8 38 3e fd ff          callq  5e2db0 <bms_free>
         :	        }
         :	}
    0.00 :	  60ef78:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  60ef7c:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  60ef80:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  60ef84:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  60ef88:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  60ef8c:       c9                      leaveq 
    0.00 :	  60ef8d:       c3                      retq   
    0.00 :	  60ef8e:       66 90                   xchg   %ax,%ax
         :
         :	        if (add_path_precheck(joinrel,
         :	                                                  workspace.startup_cost, workspace.total_cost,
         :	                                                  pathkeys, required_outer))
         :	        {
         :	                add_path(joinrel, (Path *)
    0.00 :	  60ef90:       48 8b 45 30             mov    0x30(%rbp),%rax
    0.00 :	  60ef94:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
    0.00 :	  60ef9b:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  60ef9e:       4c 8b 8d 50 ff ff ff    mov    -0xb0(%rbp),%r9
    0.00 :	  60efa5:       4c 8b 85 58 ff ff ff    mov    -0xa8(%rbp),%r8
    0.00 :	  60efac:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  60efaf:       8b 95 64 ff ff ff       mov    -0x9c(%rbp),%edx
    0.00 :	  60efb5:       48 89 5c 24 20          mov    %rbx,0x20(%rsp)
    0.00 :	  60efba:       48 89 44 24 18          mov    %rax,0x18(%rsp)
    0.00 :	  60efbf:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	  60efc3:       4c 89 74 24 08          mov    %r14,0x8(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/optimizer/path/joinpath.c:322
  100.00 :	  60efc8:       4c 89 3c 24             mov    %r15,(%rsp)
    0.00 :	  60efcc:       48 89 44 24 10          mov    %rax,0x10(%rsp)
    0.00 :	  60efd1:       e8 da 12 02 00          callq  6302b0 <create_nestloop_path>
    0.00 :	  60efd6:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  60efd9:       48 89 c6                mov    %rax,%rsi
    0.00 :	  60efdc:       e8 3f 29 02 00          callq  631920 <add_path>
    0.00 :	  60efe1:       eb 95                   jmp    60ef78 <try_nestloop_path+0xd8>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/port/pg_latch.c:348
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000639150 <WaitLatchOrSocket>:
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  639150:       55                      push   %rbp
         :	        int                     hifd;
         :	#endif
         :
         :	        /* Ignore WL_SOCKET_* events if no valid socket is given */
         :	        if (sock == PGINVALID_SOCKET)
         :	                wakeEvents &= ~(WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE);
    0.00 :	  639151:       89 f0                   mov    %esi,%eax
    0.00 :	  639153:       83 e0 f9                and    $0xfffffff9,%eax
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  639156:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  639159:       41 57                   push   %r15
    0.00 :	  63915b:       49 89 cf                mov    %rcx,%r15
    0.00 :	  63915e:       41 56                   push   %r14
    0.00 :	  639160:       41 55                   push   %r13
    0.00 :	  639162:       41 54                   push   %r12
    0.00 :	  639164:       53                      push   %rbx
    0.00 :	  639165:       89 f3                   mov    %esi,%ebx
    0.00 :	  639167:       48 81 ec 88 00 00 00    sub    $0x88,%rsp
    0.00 :	  63916e:       89 95 6c ff ff ff       mov    %edx,-0x94(%rbp)
         :	        int                     hifd;
         :	#endif
         :
         :	        /* Ignore WL_SOCKET_* events if no valid socket is given */
         :	        if (sock == PGINVALID_SOCKET)
         :	                wakeEvents &= ~(WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE);
    0.00 :	  639174:       83 c2 01                add    $0x1,%edx
    0.00 :	  639177:       0f 44 d8                cmove  %eax,%ebx
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  63917a:       48 89 bd 70 ff ff ff    mov    %rdi,-0x90(%rbp)
         :
         :	        Assert(wakeEvents != 0);        /* must have at least one wake event */
         :	        /* Cannot specify WL_SOCKET_WRITEABLE without WL_SOCKET_READABLE */
         :	        Assert((wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE)) != WL_SOCKET_WRITEABLE);
         :
         :	        if ((wakeEvents & WL_LATCH_SET) && latch->owner_pid != MyProcPid)
    0.00 :	  639181:       89 d8                   mov    %ebx,%eax
    0.00 :	  639183:       83 e0 01                and    $0x1,%eax
    0.00 :	  639186:       89 85 78 ff ff ff       mov    %eax,-0x88(%rbp)
    0.00 :	  63918c:       74 0f                   je     63919d <WaitLatchOrSocket+0x4d>
    0.00 :	  63918e:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  639191:       3b 05 4d 6b 58 00       cmp    0x586b4d(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  639197:       0f 85 6b 03 00 00       jne    639508 <WaitLatchOrSocket+0x3b8>
         :	         * Initialize timeout if requested.  We must record the current time so
         :	         * that we can determine the remaining timeout if the poll() or select()
         :	         * is interrupted.  (On some platforms, select() will update the contents
         :	         * of "tv" for us, but unfortunately we can't rely on that.)
         :	         */
         :	        if (wakeEvents & WL_TIMEOUT)
    0.00 :	  63919d:       89 da                   mov    %ebx,%edx
    0.00 :	  63919f:       83 e2 08                and    $0x8,%edx
    0.00 :	  6391a2:       89 95 7c ff ff ff       mov    %edx,-0x84(%rbp)
    0.00 :	  6391a8:       0f 85 e2 02 00 00       jne    639490 <WaitLatchOrSocket+0x340>
    0.00 :	  6391ae:       49 c7 c6 ff ff ff ff    mov    $0xffffffffffffffff,%r14
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391b5:       89 d8                   mov    %ebx,%eax
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391b7:       89 da                   mov    %ebx,%edx
         :	#ifndef HAVE_POLL
         :	                tvp = NULL;
         :	#endif
         :	        }
         :
         :	        waiting = true;
    0.00 :	  6391b9:       c7 05 b5 28 54 00 01    movl   $0x1,0x5428b5(%rip)        # b7ba78 <waiting>
    0.00 :	  6391c0:       00 00 00 
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391c3:       83 e0 06                and    $0x6,%eax
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391c6:       83 e2 10                and    $0x10,%edx
         :	#ifndef HAVE_POLL
         :	                tvp = NULL;
         :	#endif
         :	        }
         :
         :	        waiting = true;
    0.00 :	  6391c9:       45 31 ed                xor    %r13d,%r13d
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391cc:       89 85 68 ff ff ff       mov    %eax,-0x98(%rbp)
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391d2:       89 d8                   mov    %ebx,%eax
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  6391d4:       83 e3 04                and    $0x4,%ebx
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391d7:       83 e0 02                and    $0x2,%eax
    0.00 :	  6391da:       4c 8d 65 a0             lea    -0x60(%rbp),%r12
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391de:       89 95 64 ff ff ff       mov    %edx,-0x9c(%rbp)
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391e4:       89 85 60 ff ff ff       mov    %eax,-0xa0(%rbp)
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  6391ea:       89 9d 5c ff ff ff       mov    %ebx,-0xa4(%rbp)
    0.00 :	  6391f0:       eb 11                   jmp    639203 <WaitLatchOrSocket+0xb3>
    0.00 :	  6391f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        {
         :	                                waiting = false;
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
         :	                        }
         :	                }
         :	                else if (rc == 0)
    0.00 :	  6391f8:       0f 84 54 02 00 00       je     639452 <WaitLatchOrSocket+0x302>
         :	                {
         :	                        waiting = false;
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
         :	                }
         :	                else if (rc < sizeof(buf))
    0.00 :	  6391fe:       83 f8 0f                cmp    $0xf,%eax
    0.00 :	  639201:       76 5d                   jbe    639260 <WaitLatchOrSocket+0x110>
         :	        char            buf[16];
         :	        int                     rc;
         :
         :	        for (;;)
         :	        {
         :	                rc = read(selfpipe_readfd, buf, sizeof(buf));
    0.00 :	  639203:       8b 3d bf f3 52 00       mov    0x52f3bf(%rip),%edi        # b685c8 <selfpipe_readfd>
    0.00 :	  639209:       ba 10 00 00 00          mov    $0x10,%edx
    0.00 :	  63920e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  639211:       e8 fa 03 e3 ff          callq  469610 <read@plt>
         :	                if (rc < 0)
    0.00 :	  639216:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  639219:       7d dd                   jge    6391f8 <WaitLatchOrSocket+0xa8>
         :	                {
         :	                        if (errno == EAGAIN || errno == EWOULDBLOCK)
    0.00 :	  63921b:       e8 a0 0a e3 ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  639220:       8b 00                   mov    (%rax),%eax
    0.00 :	  639222:       83 f8 0b                cmp    $0xb,%eax
    0.00 :	  639225:       74 39                   je     639260 <WaitLatchOrSocket+0x110>
         :	                                break;                  /* the pipe is empty */
         :	                        else if (errno == EINTR)
    0.00 :	  639227:       83 f8 04                cmp    $0x4,%eax
    0.00 :	  63922a:       74 d7                   je     639203 <WaitLatchOrSocket+0xb3>
         :	                                continue;               /* retry */
         :	                        else
         :	                        {
         :	                                waiting = false;
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
    0.00 :	  63922c:       ba 12 de 89 00          mov    $0x89de12,%edx
    0.00 :	  639231:       be 87 02 00 00          mov    $0x287,%esi
    0.00 :	  639236:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
         :	                                break;                  /* the pipe is empty */
         :	                        else if (errno == EINTR)
         :	                                continue;               /* retry */
         :	                        else
         :	                        {
         :	                                waiting = false;
    0.00 :	  63923b:       c7 05 33 28 54 00 00    movl   $0x0,0x542833(%rip)        # b7ba78 <waiting>
    0.00 :	  639242:       00 00 00 
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
    0.00 :	  639245:       e8 d6 21 14 00          callq  77b420 <elog_start>
    0.00 :	  63924a:       be 80 dd 89 00          mov    $0x89dd80,%esi
    0.00 :	  63924f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  639254:       31 c0                   xor    %eax,%eax
    0.00 :	  639256:       e8 d5 1f 14 00          callq  77b230 <elog_finish>
    0.00 :	  63925b:       e8 70 02 e3 ff          callq  4694d0 <abort@plt>
         :	                 * with weak memory ordering, so that we cannot miss seeing is_set if
         :	                 * the signal byte is already in the pipe when we drain it.
         :	                 */
         :	                drainSelfPipe();
         :
         :	                if ((wakeEvents & WL_LATCH_SET) && latch->is_set)
    0.00 :	  639260:       44 8b 95 78 ff ff ff    mov    -0x88(%rbp),%r10d
    0.00 :	  639267:       45 85 d2                test   %r10d,%r10d
    0.00 :	  63926a:       74 11                   je     63927d <WaitLatchOrSocket+0x12d>
    0.00 :	  63926c:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  639273:       8b 02                   mov    (%rdx),%eax
    0.00 :	  639275:       85 c0                   test   %eax,%eax
    0.00 :	  639277:       0f 85 b5 02 00 00       jne    639532 <WaitLatchOrSocket+0x3e2>
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  63927d:       44 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%r9d
    0.00 :	  639284:       31 c0                   xor    %eax,%eax
    0.00 :	  639286:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  63928b:       45 85 c9                test   %r9d,%r9d
    0.00 :	  63928e:       74 45                   je     6392d5 <WaitLatchOrSocket+0x185>
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  639290:       44 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%r8d
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
    0.00 :	  639297:       66 c7 45 84 00 00       movw   $0x0,-0x7c(%rbp)
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  63929d:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392a2:       8b bd 5c ff ff ff       mov    -0xa4(%rbp),%edi
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  6392a8:       45 85 c0                test   %r8d,%r8d
    0.00 :	  6392ab:       66 0f 44 45 84          cmove  -0x7c(%rbp),%ax
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392b0:       85 ff                   test   %edi,%edi
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  6392b2:       66 89 45 84             mov    %ax,-0x7c(%rbp)
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392b6:       0f 85 ca 01 00 00       jne    639486 <WaitLatchOrSocket+0x336>
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
    0.00 :	  6392bc:       8b 85 6c ff ff ff       mov    -0x94(%rbp),%eax
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
    0.00 :	  6392c2:       66 c7 45 86 00 00       movw   $0x0,-0x7a(%rbp)
    0.00 :	  6392c8:       bb 02 00 00 00          mov    $0x2,%ebx
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
    0.00 :	  6392cd:       89 45 80                mov    %eax,-0x80(%rbp)
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
    0.00 :	  6392d0:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        nfds++;
         :	                }
         :
         :	                pfds[nfds].fd = selfpipe_readfd;
    0.00 :	  6392d5:       8b 15 ed f2 52 00       mov    0x52f2ed(%rip),%edx        # b685c8 <selfpipe_readfd>
    0.00 :	  6392db:       48 98                   cltq   
         :	                pfds[nfds].events = POLLIN;
    0.00 :	  6392dd:       66 c7 44 c5 84 01 00    movw   $0x1,-0x7c(%rbp,%rax,8)
         :	                pfds[nfds].revents = 0;
    0.00 :	  6392e4:       66 c7 44 c5 86 00 00    movw   $0x0,-0x7a(%rbp,%rax,8)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
         :	                        nfds++;
         :	                }
         :
         :	                pfds[nfds].fd = selfpipe_readfd;
    0.00 :	  6392eb:       89 54 c5 80             mov    %edx,-0x80(%rbp,%rax,8)
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6392ef:       8b b5 64 ff ff ff       mov    -0x9c(%rbp),%esi
    0.00 :	  6392f5:       85 f6                   test   %esi,%esi
    0.00 :	  6392f7:       74 1e                   je     639317 <WaitLatchOrSocket+0x1c7>
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
    0.00 :	  6392f9:       8b 15 29 f3 52 00       mov    0x52f329(%rip),%edx        # b68628 <postmaster_alive_fds>
    0.00 :	  6392ff:       48 63 c3                movslq %ebx,%rax
         :	                        pfds[nfds].events = POLLIN;
         :	                        pfds[nfds].revents = 0;
         :	                        nfds++;
    0.00 :	  639302:       83 c3 01                add    $0x1,%ebx
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
         :	                        pfds[nfds].events = POLLIN;
    0.00 :	  639305:       66 c7 44 c5 84 01 00    movw   $0x1,-0x7c(%rbp,%rax,8)
         :	                        pfds[nfds].revents = 0;
    0.00 :	  63930c:       66 c7 44 c5 86 00 00    movw   $0x0,-0x7a(%rbp,%rax,8)
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
    0.00 :	  639313:       89 54 c5 80             mov    %edx,-0x80(%rbp,%rax,8)
         :	                        pfds[nfds].revents = 0;
         :	                        nfds++;
         :	                }
         :
         :	                /* Sleep */
         :	                rc = poll(pfds, nfds, (int) cur_timeout);
    0.00 :	  639317:       48 8d 7d 80             lea    -0x80(%rbp),%rdi
    0.00 :	  63931b:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  63931e:       44 89 f2                mov    %r14d,%edx
    0.00 :	  639321:       e8 2a 07 e3 ff          callq  469a50 <poll@plt>
         :
         :	                /* Check return code */
         :	                if (rc < 0)
    0.00 :	  639326:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  639329:       0f 8c 74 01 00 00       jl     6394a3 <WaitLatchOrSocket+0x353>
         :	                                ereport(ERROR,
         :	                                                (errcode_for_socket_access(),
         :	                                                 errmsg("poll() failed: %m")));
         :	                        }
         :	                }
         :	                else if (rc == 0)
    0.00 :	  63932f:       0f 85 b5 00 00 00       jne    6393ea <WaitLatchOrSocket+0x29a>
         :	                {
         :	                        /* timeout exceeded */
         :	                        if (wakeEvents & WL_TIMEOUT)
         :	                                result |= WL_TIMEOUT;
    0.00 :	  639335:       44 0b ad 7c ff ff ff    or     -0x84(%rbp),%r13d
         :	                        }
         :	                }
         :	#endif   /* HAVE_POLL */
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
    0.00 :	  63933c:       45 85 ed                test   %r13d,%r13d
    0.00 :	  63933f:       90                      nop
    0.00 :	  639340:       74 26                   je     639368 <WaitLatchOrSocket+0x218>
         :	                        tv.tv_sec = cur_timeout / 1000L;
         :	                        tv.tv_usec = (cur_timeout % 1000L) * 1000L;
         :	#endif
         :	                }
         :	        } while (result == 0);
         :	        waiting = false;
    0.00 :	  639342:       c7 05 2c 27 54 00 00    movl   $0x0,0x54272c(%rip)        # b7ba78 <waiting>
    0.00 :	  639349:       00 00 00 
         :
         :	        return result;
         :	}
    0.00 :	  63934c:       48 81 c4 88 00 00 00    add    $0x88,%rsp
    0.00 :	  639353:       44 89 e8                mov    %r13d,%eax
    0.00 :	  639356:       5b                      pop    %rbx
    0.00 :	  639357:       41 5c                   pop    %r12
    0.00 :	  639359:       41 5d                   pop    %r13
    0.00 :	  63935b:       41 5e                   pop    %r14
    0.00 :	  63935d:       41 5f                   pop    %r15
    0.00 :	  63935f:       c9                      leaveq 
    0.00 :	  639360:       c3                      retq   
    0.00 :	  639361:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        }
         :	                }
         :	#endif   /* HAVE_POLL */
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
    0.00 :	  639368:       4d 85 f6                test   %r14,%r14
    0.00 :	  63936b:       0f 88 92 fe ff ff       js     639203 <WaitLatchOrSocket+0xb3>
         :	                {
         :	                        INSTR_TIME_SET_CURRENT(cur_time);
    0.00 :	  639371:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  639375:       31 f6                   xor    %esi,%esi
    0.00 :	  639377:       e8 44 02 e3 ff          callq  4695c0 <gettimeofday@plt>
         :	                        INSTR_TIME_SUBTRACT(cur_time, start_time);
    0.00 :	  63937c:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  639380:       48 2b 45 c8             sub    -0x38(%rbp),%rax
    0.00 :	  639384:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  639388:       48 2b 55 c0             sub    -0x40(%rbp),%rdx
    0.00 :	  63938c:       48 85 c0                test   %rax,%rax
    0.00 :	  63938f:       48 89 45 b8             mov    %rax,-0x48(%rbp)
    0.00 :	  639393:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
    0.00 :	  639397:       79 1b                   jns    6393b4 <WaitLatchOrSocket+0x264>
    0.00 :	  639399:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  6393a0:       48 83 ea 01             sub    $0x1,%rdx
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
         :	                {
         :	                        INSTR_TIME_SET_CURRENT(cur_time);
         :	                        INSTR_TIME_SUBTRACT(cur_time, start_time);
    0.00 :	  6393a4:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  6393aa:       78 f4                   js     6393a0 <WaitLatchOrSocket+0x250>
    0.00 :	  6393ac:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
    0.00 :	  6393b0:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                        cur_timeout = timeout - (long) INSTR_TIME_GET_MILLISEC(cur_time);
    0.00 :	  6393b4:       f2 48 0f 2a c0          cvtsi2sd %rax,%xmm0
    0.00 :	  6393b9:       f2 48 0f 2a 4d b0       cvtsi2sdq -0x50(%rbp),%xmm1
    0.00 :	  6393bf:       f2 0f 59 0d 11 32 24    mulsd  0x243211(%rip),%xmm1        # 87c5d8 <__func__.18742+0x13>
    0.00 :	  6393c6:       00 
    0.00 :	  6393c7:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  6393ca:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  6393cd:       f2 0f 5e 05 03 32 24    divsd  0x243203(%rip),%xmm0        # 87c5d8 <__func__.18742+0x13>
    0.00 :	  6393d4:       00 
    0.00 :	  6393d5:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  6393d9:       f2 48 0f 2c c1          cvttsd2si %xmm1,%rax
    0.00 :	  6393de:       48 29 c2                sub    %rax,%rdx
    0.00 :	  6393e1:       4c 0f 49 f2             cmovns %rdx,%r14
    0.00 :	  6393e5:       e9 19 fe ff ff          jmpq   639203 <WaitLatchOrSocket+0xb3>
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
 /home/Computational/mark/src/postgres-andres/src/backend/port/pg_latch.c:348
  100.00 :	  6393ea:       8b 8d 60 ff ff ff       mov    -0xa0(%rbp),%ecx
    0.00 :	  6393f0:       85 c9                   test   %ecx,%ecx
    0.00 :	  6393f2:       74 10                   je     639404 <WaitLatchOrSocket+0x2b4>
    0.00 :	  6393f4:       0f bf 45 86             movswl -0x7a(%rbp),%eax
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
    0.00 :	  6393f8:       44 89 ea                mov    %r13d,%edx
    0.00 :	  6393fb:       83 ca 02                or     $0x2,%edx
    0.00 :	  6393fe:       a8 39                   test   $0x39,%al
    0.00 :	  639400:       44 0f 45 ea             cmovne %edx,%r13d
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  639404:       8b 95 5c ff ff ff       mov    -0xa4(%rbp),%edx
    0.00 :	  63940a:       85 d2                   test   %edx,%edx
    0.00 :	  63940c:       74 0e                   je     63941c <WaitLatchOrSocket+0x2cc>
         :	                                (pfds[0].revents & POLLOUT))
         :	                        {
         :	                                result |= WL_SOCKET_WRITEABLE;
    0.00 :	  63940e:       44 89 e8                mov    %r13d,%eax
    0.00 :	  639411:       83 c8 04                or     $0x4,%eax
    0.00 :	  639414:       f6 45 86 04             testb  $0x4,-0x7a(%rbp)
    0.00 :	  639418:       44 0f 45 e8             cmovne %eax,%r13d
         :	                        /*
         :	                         * We expect a POLLHUP when the remote end is closed, but because
         :	                         * we don't expect the pipe to become readable or to have any
         :	                         * errors either, treat those cases as postmaster death, too.
         :	                         */
         :	                        if ((wakeEvents & WL_POSTMASTER_DEATH) &&
    0.00 :	  63941c:       8b 85 64 ff ff ff       mov    -0x9c(%rbp),%eax
    0.00 :	  639422:       85 c0                   test   %eax,%eax
    0.00 :	  639424:       0f 84 12 ff ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
    0.00 :	  63942a:       8d 43 ff                lea    -0x1(%rbx),%eax
    0.00 :	  63942d:       48 98                   cltq   
    0.00 :	  63942f:       0f bf 44 c5 86          movswl -0x7a(%rbp,%rax,8),%eax
    0.00 :	  639434:       a8 39                   test   $0x39,%al
    0.00 :	  639436:       0f 84 00 ff ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
         :	                                 * postmaster pipe, but since the consequences of falsely
         :	                                 * returning WL_POSTMASTER_DEATH could be pretty unpleasant,
         :	                                 * we take the trouble to positively verify EOF with
         :	                                 * PostmasterIsAlive().
         :	                                 */
         :	                                if (!PostmasterIsAlive())
    0.00 :	  63943c:       e8 4f 5e 04 00          callq  67f290 <PostmasterIsAlive>
         :	                                        result |= WL_POSTMASTER_DEATH;
    0.00 :	  639441:       44 89 ea                mov    %r13d,%edx
    0.00 :	  639444:       83 ca 10                or     $0x10,%edx
    0.00 :	  639447:       84 c0                   test   %al,%al
    0.00 :	  639449:       44 0f 44 ea             cmove  %edx,%r13d
    0.00 :	  63944d:       e9 ea fe ff ff          jmpq   63933c <WaitLatchOrSocket+0x1ec>
         :	                        }
         :	                }
         :	                else if (rc == 0)
         :	                {
         :	                        waiting = false;
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
    0.00 :	  639452:       ba 12 de 89 00          mov    $0x89de12,%edx
    0.00 :	  639457:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  63945c:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
         :	                        }
         :	                }
         :	                else if (rc == 0)
         :	                {
         :	                        waiting = false;
    0.00 :	  639461:       c7 05 0d 26 54 00 00    movl   $0x0,0x54260d(%rip)        # b7ba78 <waiting>
    0.00 :	  639468:       00 00 00 
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
    0.00 :	  63946b:       e8 b0 1f 14 00          callq  77b420 <elog_start>
    0.00 :	  639470:       be 0f dd 89 00          mov    $0x89dd0f,%esi
    0.00 :	  639475:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  63947a:       31 c0                   xor    %eax,%eax
    0.00 :	  63947c:       e8 af 1d 14 00          callq  77b230 <elog_finish>
    0.00 :	  639481:       e8 4a 00 e3 ff          callq  4694d0 <abort@plt>
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
    0.00 :	  639486:       66 83 4d 84 04          orw    $0x4,-0x7c(%rbp)
    0.00 :	  63948b:       e9 2c fe ff ff          jmpq   6392bc <WaitLatchOrSocket+0x16c>
         :	         * is interrupted.  (On some platforms, select() will update the contents
         :	         * of "tv" for us, but unfortunately we can't rely on that.)
         :	         */
         :	        if (wakeEvents & WL_TIMEOUT)
         :	        {
         :	                INSTR_TIME_SET_CURRENT(start_time);
    0.00 :	  639490:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  639494:       31 f6                   xor    %esi,%esi
    0.00 :	  639496:       4d 89 fe                mov    %r15,%r14
    0.00 :	  639499:       e8 22 01 e3 ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  63949e:       e9 12 fd ff ff          jmpq   6391b5 <WaitLatchOrSocket+0x65>
         :
         :	                /* Check return code */
         :	                if (rc < 0)
         :	                {
         :	                        /* EINTR is okay, otherwise complain */
         :	                        if (errno != EINTR)
    0.00 :	  6394a3:       e8 18 08 e3 ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  6394a8:       83 38 04                cmpl   $0x4,(%rax)
    0.00 :	  6394ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6394b0:       0f 84 86 fe ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
         :	                        {
         :	                                waiting = false;
         :	                                ereport(ERROR,
    0.00 :	  6394b6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6394b9:       b9 00 de 89 00          mov    $0x89de00,%ecx
    0.00 :	  6394be:       ba 50 01 00 00          mov    $0x150,%edx
    0.00 :	  6394c3:       be f0 dc 89 00          mov    $0x89dcf0,%esi
    0.00 :	  6394c8:       bf 14 00 00 00          mov    $0x14,%edi
         :	                if (rc < 0)
         :	                {
         :	                        /* EINTR is okay, otherwise complain */
         :	                        if (errno != EINTR)
         :	                        {
         :	                                waiting = false;
    0.00 :	  6394cd:       c7 05 a1 25 54 00 00    movl   $0x0,0x5425a1(%rip)        # b7ba78 <waiting>
    0.00 :	  6394d4:       00 00 00 
         :	                                ereport(ERROR,
    0.00 :	  6394d7:       e8 e4 15 14 00          callq  77aac0 <errstart>
    0.00 :	  6394dc:       84 c0                   test   %al,%al
    0.00 :	  6394de:       74 1e                   je     6394fe <WaitLatchOrSocket+0x3ae>
    0.00 :	  6394e0:       bf 2b dd 89 00          mov    $0x89dd2b,%edi
    0.00 :	  6394e5:       31 c0                   xor    %eax,%eax
    0.00 :	  6394e7:       e8 b4 33 14 00          callq  77c8a0 <errmsg>
    0.00 :	  6394ec:       89 c3                   mov    %eax,%ebx
    0.00 :	  6394ee:       e8 5d 35 14 00          callq  77ca50 <errcode_for_socket_access>
    0.00 :	  6394f3:       89 de                   mov    %ebx,%esi
    0.00 :	  6394f5:       89 c7                   mov    %eax,%edi
    0.00 :	  6394f7:       31 c0                   xor    %eax,%eax
    0.00 :	  6394f9:       e8 e2 10 14 00          callq  77a5e0 <errfinish>
    0.00 :	  6394fe:       e8 cd ff e2 ff          callq  4694d0 <abort@plt>
    0.00 :	  639503:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        Assert(wakeEvents != 0);        /* must have at least one wake event */
         :	        /* Cannot specify WL_SOCKET_WRITEABLE without WL_SOCKET_READABLE */
         :	        Assert((wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE)) != WL_SOCKET_WRITEABLE);
         :
         :	        if ((wakeEvents & WL_LATCH_SET) && latch->owner_pid != MyProcPid)
         :	                elog(ERROR, "cannot wait on a latch owned by another process");
    0.00 :	  639508:       ba 00 de 89 00          mov    $0x89de00,%edx
    0.00 :	  63950d:       be ed 00 00 00          mov    $0xed,%esi
    0.00 :	  639512:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
    0.00 :	  639517:       e8 04 1f 14 00          callq  77b420 <elog_start>
    0.00 :	  63951c:       be 50 dd 89 00          mov    $0x89dd50,%esi
    0.00 :	  639521:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  639526:       31 c0                   xor    %eax,%eax
    0.00 :	  639528:       e8 03 1d 14 00          callq  77b230 <elog_finish>
    0.00 :	  63952d:       e8 9e ff e2 ff          callq  4694d0 <abort@plt>
         :	                 */
         :	                drainSelfPipe();
         :
         :	                if ((wakeEvents & WL_LATCH_SET) && latch->is_set)
         :	                {
         :	                        result |= WL_LATCH_SET;
    0.00 :	  639532:       41 83 cd 01             or     $0x1,%r13d
         :
         :	                        /*
         :	                         * Leave loop immediately, avoid blocking again. We don't attempt
         :	                         * to report any other events that might also be satisfied.
         :	                         */
         :	                        break;
    0.00 :	  639536:       e9 07 fe ff ff          jmpq   639342 <WaitLatchOrSocket+0x1f2>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/postmaster.c:2257
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000645320 <ClosePostmasterPorts>:
         :	 * Note: we pass am_syslogger as a boolean because we don't want to set
         :	 * the global variable yet when this is called.
         :	 */
         :	void
         :	ClosePostmasterPorts(bool am_syslogger)
         :	{
    0.00 :	  645320:       55                      push   %rbp
    0.00 :	  645321:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  645324:       41 54                   push   %r12
    0.00 :	  645326:       41 89 fc                mov    %edi,%r12d
         :	        /*
         :	         * Close the write end of postmaster death watch pipe. It's important to
         :	         * do this as early as possible, so that if postmaster dies, others won't
         :	         * think that it's still running because we're holding the pipe open.
         :	         */
         :	        if (close(postmaster_alive_fds[POSTMASTER_FD_OWN]))
    0.00 :	  645329:       8b 3d fd 32 52 00       mov    0x5232fd(%rip),%edi        # b6862c <postmaster_alive_fds+0x4>
         :	 * Note: we pass am_syslogger as a boolean because we don't want to set
         :	 * the global variable yet when this is called.
         :	 */
         :	void
         :	ClosePostmasterPorts(bool am_syslogger)
         :	{
    0.00 :	  64532f:       53                      push   %rbx
         :	        /*
         :	         * Close the write end of postmaster death watch pipe. It's important to
         :	         * do this as early as possible, so that if postmaster dies, others won't
         :	         * think that it's still running because we're holding the pipe open.
         :	         */
         :	        if (close(postmaster_alive_fds[POSTMASTER_FD_OWN]))
    0.00 :	  645330:       e8 4b 41 e2 ff          callq  469480 <close@plt>
    0.00 :	  645335:       85 c0                   test   %eax,%eax
    0.00 :	  645337:       75 59                   jne    645392 <ClosePostmasterPorts+0x72>
         :	                ereport(FATAL,
         :	                                (errcode_for_file_access(),
         :	                                 errmsg_internal("could not close postmaster death monitoring pipe in child process: %m")));
         :	        postmaster_alive_fds[POSTMASTER_FD_OWN] = -1;
    0.00 :	  645339:       c7 05 e9 32 52 00 ff    movl   $0xffffffff,0x5232e9(%rip)        # b6862c <postmaster_alive_fds+0x4>
    0.00 :	  645340:       ff ff ff 
    0.00 :	  645343:       bb a0 bf b7 00          mov    $0xb7bfa0,%ebx
    0.00 :	  645348:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  64534f:       00 
         :	#endif
         :
         :	        /* Close the listen sockets */
         :	        for (i = 0; i < MAXLISTEN; i++)
         :	        {
         :	                if (ListenSocket[i] != PGINVALID_SOCKET)
    0.00 :	  645350:       8b 3b                   mov    (%rbx),%edi
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/postmaster.c:2257
  100.00 :	  645352:       83 ff ff                cmp    $0xffffffff,%edi
    0.00 :	  645355:       74 0b                   je     645362 <ClosePostmasterPorts+0x42>
         :	                {
         :	                        StreamClose(ListenSocket[i]);
    0.00 :	  645357:       e8 b4 6f f9 ff          callq  5dc310 <StreamClose>
         :	                        ListenSocket[i] = PGINVALID_SOCKET;
    0.00 :	  64535c:       c7 03 ff ff ff ff       movl   $0xffffffff,(%rbx)
    0.00 :	  645362:       48 83 c3 04             add    $0x4,%rbx
         :	                                 errmsg_internal("could not close postmaster death monitoring pipe in child process: %m")));
         :	        postmaster_alive_fds[POSTMASTER_FD_OWN] = -1;
         :	#endif
         :
         :	        /* Close the listen sockets */
         :	        for (i = 0; i < MAXLISTEN; i++)
    0.00 :	  645366:       48 81 fb a0 c0 b7 00    cmp    $0xb7c0a0,%rbx
    0.00 :	  64536d:       75 e1                   jne    645350 <ClosePostmasterPorts+0x30>
         :	                        ListenSocket[i] = PGINVALID_SOCKET;
         :	                }
         :	        }
         :
         :	        /* If using syslogger, close the read side of the pipe */
         :	        if (!am_syslogger)
    0.00 :	  64536f:       45 84 e4                test   %r12b,%r12b
    0.00 :	  645372:       75 19                   jne    64538d <ClosePostmasterPorts+0x6d>
         :	        {
         :	#ifndef WIN32
         :	                if (syslogPipe[0] >= 0)
    0.00 :	  645374:       8b 3d d6 32 52 00       mov    0x5232d6(%rip),%edi        # b68650 <syslogPipe>
    0.00 :	  64537a:       85 ff                   test   %edi,%edi
    0.00 :	  64537c:       78 05                   js     645383 <ClosePostmasterPorts+0x63>
         :	                        close(syslogPipe[0]);
    0.00 :	  64537e:       e8 fd 40 e2 ff          callq  469480 <close@plt>
         :	                syslogPipe[0] = -1;
    0.00 :	  645383:       c7 05 c3 32 52 00 ff    movl   $0xffffffff,0x5232c3(%rip)        # b68650 <syslogPipe>
    0.00 :	  64538a:       ff ff ff 
         :	#ifdef USE_BONJOUR
         :	        /* If using Bonjour, close the connection to the mDNS daemon */
         :	        if (bonjour_sdref)
         :	                close(DNSServiceRefSockFD(bonjour_sdref));
         :	#endif
         :	}
    0.00 :	  64538d:       5b                      pop    %rbx
    0.00 :	  64538e:       41 5c                   pop    %r12
    0.00 :	  645390:       c9                      leaveq 
    0.00 :	  645391:       c3                      retq   
         :	         * Close the write end of postmaster death watch pipe. It's important to
         :	         * do this as early as possible, so that if postmaster dies, others won't
         :	         * think that it's still running because we're holding the pipe open.
         :	         */
         :	        if (close(postmaster_alive_fds[POSTMASTER_FD_OWN]))
         :	                ereport(FATAL,
    0.00 :	  645392:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  645395:       b9 f0 0e 8a 00          mov    $0x8a0ef0,%ecx
    0.00 :	  64539a:       ba ca 08 00 00          mov    $0x8ca,%edx
    0.00 :	  64539f:       be 06 fa 89 00          mov    $0x89fa06,%esi
    0.00 :	  6453a4:       bf 15 00 00 00          mov    $0x15,%edi
    0.00 :	  6453a9:       e8 12 57 13 00          callq  77aac0 <errstart>
    0.00 :	  6453ae:       84 c0                   test   %al,%al
    0.00 :	  6453b0:       75 05                   jne    6453b7 <ClosePostmasterPorts+0x97>
    0.00 :	  6453b2:       e8 19 41 e2 ff          callq  4694d0 <abort@plt>
    0.00 :	  6453b7:       bf 98 fd 89 00          mov    $0x89fd98,%edi
    0.00 :	  6453bc:       31 c0                   xor    %eax,%eax
    0.00 :	  6453be:       e8 4d 55 13 00          callq  77a910 <errmsg_internal>
    0.00 :	  6453c3:       89 c3                   mov    %eax,%ebx
    0.00 :	  6453c5:       e8 26 77 13 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  6453ca:       89 de                   mov    %ebx,%esi
    0.00 :	  6453cc:       89 c7                   mov    %eax,%edi
    0.00 :	  6453ce:       31 c0                   xor    %eax,%eax
    0.00 :	  6453d0:       e8 0b 52 13 00          callq  77a5e0 <errfinish>
    0.00 :	  6453d5:       eb db                   jmp    6453b2 <ClosePostmasterPorts+0x92>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:129
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673d50 <BufTableDelete>:
         :	 *
         :	 * Caller must hold exclusive lock on BufMappingLock for tag's partition
         :	 */
         :	void
         :	BufTableDelete(BufferTag *tagPtr)
         :	{
    0.00 :	  673d50:       55                      push   %rbp
         :	        if (!CHashDelete(SharedBufHash, tagPtr))
    0.00 :	  673d51:       48 89 fe                mov    %rdi,%rsi
    0.00 :	  673d54:       48 8b 3d fd 92 50 00    mov    0x5092fd(%rip),%rdi        # b7d058 <SharedBufHash>
         :	 *
         :	 * Caller must hold exclusive lock on BufMappingLock for tag's partition
         :	 */
         :	void
         :	BufTableDelete(BufferTag *tagPtr)
         :	{
    0.00 :	  673d5b:       48 89 e5                mov    %rsp,%rbp
         :	        if (!CHashDelete(SharedBufHash, tagPtr))
    0.00 :	  673d5e:       e8 7d f0 10 00          callq  782de0 <CHashDelete>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:129
  100.00 :	  673d63:       84 c0                   test   %al,%al
    0.00 :	  673d65:       74 02                   je     673d69 <BufTableDelete+0x19>
         :	                elog(ERROR, "shared buffer hash table corrupted");
         :	}
    0.00 :	  673d67:       c9                      leaveq 
    0.00 :	  673d68:       c3                      retq   
         :	 */
         :	void
         :	BufTableDelete(BufferTag *tagPtr)
         :	{
         :	        if (!CHashDelete(SharedBufHash, tagPtr))
         :	                elog(ERROR, "shared buffer hash table corrupted");
    0.00 :	  673d69:       ba 23 9d 8a 00          mov    $0x8a9d23,%edx
    0.00 :	  673d6e:       be 82 00 00 00          mov    $0x82,%esi
    0.00 :	  673d73:       bf db 9c 8a 00          mov    $0x8a9cdb,%edi
    0.00 :	  673d78:       e8 a3 76 10 00          callq  77b420 <elog_start>
    0.00 :	  673d7d:       be 00 9d 8a 00          mov    $0x8a9d00,%esi
    0.00 :	  673d82:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  673d87:       31 c0                   xor    %eax,%eax
    0.00 :	  673d89:       e8 a2 74 10 00          callq  77b230 <elog_finish>
    0.00 :	  673d8e:       e8 3d 57 df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674440 <StartBufferIO>:
         :	 * Returns TRUE if we successfully marked the buffer as I/O busy,
         :	 * FALSE if someone else already did the work.
         :	 */
         :	static bool
         :	StartBufferIO(volatile BufferDesc *buf, bool forInput)
         :	{
    0.00 :	  674440:       55                      push   %rbp
    0.00 :	  674441:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674444:       41 56                   push   %r14
    0.00 :	  674446:       41 89 f6                mov    %esi,%r14d
    0.00 :	  674449:       41 55                   push   %r13
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  67444b:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  674451:       41 54                   push   %r12
    0.00 :	  674453:       4c 8d 67 20             lea    0x20(%rdi),%r12
    0.00 :	  674457:       53                      push   %rbx
    0.00 :	  674458:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67445b:       eb 20                   jmp    67447d <StartBufferIO+0x3d>
    0.00 :	  67445d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
         :
         :	                LockBufHdr(buf);
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  674460:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674464:       a8 08                   test   $0x8,%al
    0.00 :	  674466:       74 46                   je     6744ae <StartBufferIO+0x6e>
         :	                 * The only way BM_IO_IN_PROGRESS could be set when the io_in_progress
         :	                 * lock isn't held is if the process doing the I/O is recovering from
         :	                 * an error (see AbortBufferIO).  If that's the case, we must wait for
         :	                 * him to get unwedged.
         :	                 */
         :	                UnlockBufHdr(buf);
    0.00 :	  674468:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67446c:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674470:       e8 2b af 01 00          callq  68f3a0 <LWLockRelease>
         :	                WaitIO(buf);
    0.00 :	  674475:       48 89 df                mov    %rbx,%rdi
    0.00 :	  674478:       e8 43 ff ff ff          callq  6743c0 <WaitIO>
         :	        {
         :	                /*
         :	                 * Grab the io_in_progress lock so that other processes can wait for
         :	                 * me to finish the I/O.
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
    0.00 :	  67447d:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674481:       31 f6                   xor    %esi,%esi
    0.00 :	  674483:       e8 68 b6 01 00          callq  68faf0 <LWLockAcquire>
    0.00 :	  674488:       44 89 e8                mov    %r13d,%eax
    0.00 :	  67448b:       f0 41 86 04 24          lock xchg %al,(%r12)
         :
         :	                LockBufHdr(buf);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
  100.00 :	  674490:       84 c0                   test   %al,%al
    0.00 :	  674492:       74 cc                   je     674460 <StartBufferIO+0x20>
    0.00 :	  674494:       ba c6 0c 00 00          mov    $0xcc6,%edx
    0.00 :	  674499:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67449e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6744a1:       e8 9a bb 01 00          callq  690040 <s_lock>
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  6744a6:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744aa:       a8 08                   test   $0x8,%al
    0.00 :	  6744ac:       75 ba                   jne    674468 <StartBufferIO+0x28>
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744ae:       45 84 f6                test   %r14b,%r14b
    0.00 :	  6744b1:       74 3d                   je     6744f0 <StartBufferIO+0xb0>
    0.00 :	  6744b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744b7:       d1 e8                   shr    %eax
    0.00 :	  6744b9:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744bc:       84 c0                   test   %al,%al
    0.00 :	  6744be:       75 3d                   jne    6744fd <StartBufferIO+0xbd>
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
         :	                return false;
         :	        }
         :
         :	        buf->flags |= BM_IO_IN_PROGRESS;
    0.00 :	  6744c0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744c4:       83 c8 08                or     $0x8,%eax
    0.00 :	  6744c7:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  6744cb:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = buf;
    0.00 :	  6744cf:       48 89 1d 92 8b 50 00    mov    %rbx,0x508b92(%rip)        # b7d068 <InProgressBuf>
         :	        IsForInput = forInput;
    0.00 :	  6744d6:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6744db:       44 88 35 c3 8b 50 00    mov    %r14b,0x508bc3(%rip)        # b7d0a5 <IsForInput>
         :
         :	        return true;
         :	}
    0.00 :	  6744e2:       5b                      pop    %rbx
    0.00 :	  6744e3:       41 5c                   pop    %r12
    0.00 :	  6744e5:       41 5d                   pop    %r13
    0.00 :	  6744e7:       41 5e                   pop    %r14
    0.00 :	  6744e9:       c9                      leaveq 
    0.00 :	  6744ea:       c3                      retq   
    0.00 :	  6744eb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744f0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744f4:       f7 d0                   not    %eax
    0.00 :	  6744f6:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744f9:       84 c0                   test   %al,%al
    0.00 :	  6744fb:       74 c3                   je     6744c0 <StartBufferIO+0x80>
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
    0.00 :	  6744fd:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674501:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674505:       e8 96 ae 01 00          callq  68f3a0 <LWLockRelease>
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  67450a:       5b                      pop    %rbx
    0.00 :	  67450b:       41 5c                   pop    %r12
    0.00 :	  67450d:       41 5d                   pop    %r13
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67450f:       31 c0                   xor    %eax,%eax
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  674511:       41 5e                   pop    %r14
    0.00 :	  674513:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1342
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674bd0 <PinBuffer_Locked>:
         :	 * to save a spin lock/unlock cycle, because we need to pin a buffer before
         :	 * its state can change under us.
         :	 */
         :	static void
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
    0.00 :	  674bd0:       55                      push   %rbp
         :	        int                     b = buf->buf_id;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674bd1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  674bd6:       be 01 00 00 00          mov    $0x1,%esi
         :	 * to save a spin lock/unlock cycle, because we need to pin a buffer before
         :	 * its state can change under us.
         :	 */
         :	static void
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
    0.00 :	  674bdb:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674bde:       53                      push   %rbx
    0.00 :	  674bdf:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674be2:       48 83 ec 08             sub    $0x8,%rsp
         :	        int                     b = buf->buf_id;
    0.00 :	  674be6:       8b 7f 24                mov    0x24(%rdi),%edi
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674be9:       83 c7 01                add    $0x1,%edi
    0.00 :	  674bec:       e8 2f f9 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674bf1:       8b 48 04                mov    0x4(%rax),%ecx
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
         :	        int                     b = buf->buf_id;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674bf4:       48 89 c2                mov    %rax,%rdx
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674bf7:       85 c9                   test   %ecx,%ecx
    0.00 :	  674bf9:       75 09                   jne    674c04 <PinBuffer_Locked+0x34>
         :	                buf->refcount++;
    0.00 :	  674bfb:       8b 43 18                mov    0x18(%rbx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1342
  100.00 :	  674bfe:       83 c0 01                add    $0x1,%eax
    0.00 :	  674c01:       89 43 18                mov    %eax,0x18(%rbx)
         :	        UnlockBufHdr(buf);
    0.00 :	  674c04:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	        ref->refcount++;
    0.00 :	  674c08:       83 42 04 01             addl   $0x1,0x4(%rdx)
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674c0c:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674c0f:       48 8b 3d aa 5c 54 00    mov    0x545caa(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	                                                                BufferDescriptorGetBuffer(buf));
         :	}
    0.00 :	  674c16:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674c1a:       5b                      pop    %rbx
    0.00 :	  674c1b:       c9                      leaveq 
         :	        if (ref->refcount == 0)
         :	                buf->refcount++;
         :	        UnlockBufHdr(buf);
         :	        ref->refcount++;
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674c1c:       83 c6 01                add    $0x1,%esi
    0.00 :	  674c1f:       e9 7c 55 12 00          jmpq   79a1a0 <ResourceOwnerRememberBuffer>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674d30 <UnpinBuffer>:
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d30:       55                      push   %rbp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d31:       31 d2                   xor    %edx,%edx
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d33:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674d36:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  674d3a:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  674d3e:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674d41:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  674d45:       48 83 ec 30             sub    $0x30,%rsp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
    0.00 :	  674d49:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d4c:       41 89 f4                mov    %esi,%r12d
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d4f:       31 f6                   xor    %esi,%esi
    0.00 :	  674d51:       83 c7 01                add    $0x1,%edi
    0.00 :	  674d54:       e8 c7 f7 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
    0.00 :	  674d59:       45 84 e4                test   %r12b,%r12b
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d5c:       49 89 c5                mov    %rax,%r13
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
    0.00 :	  674d5f:       0f 85 b3 00 00 00       jne    674e18 <UnpinBuffer+0xe8>
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
    0.00 :	  674d65:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674d69:       83 e8 01                sub    $0x1,%eax
         :	        if (ref->refcount == 0)
    0.00 :	  674d6c:       85 c0                   test   %eax,%eax
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
    0.00 :	  674d6e:       41 89 45 04             mov    %eax,0x4(%r13)
         :	        if (ref->refcount == 0)
    0.00 :	  674d72:       75 66                   jne    674dda <UnpinBuffer+0xaa>
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
    0.00 :	  674d74:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674d78:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674d7d:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
  100.00 :	  674d80:       84 c0                   test   %al,%al
    0.00 :	  674d82:       0f 85 a8 00 00 00       jne    674e30 <UnpinBuffer+0x100>
         :
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
    0.00 :	  674d88:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d8b:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674d8e:       89 43 18                mov    %eax,0x18(%rbx)
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674d91:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674d95:       a8 40                   test   $0x40,%al
    0.00 :	  674d97:       75 57                   jne    674df0 <UnpinBuffer+0xc0>
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
         :	                        UnlockBufHdr(buf);
         :	                        ProcSendSignal(wait_backend_pid);
         :	                }
         :	                else
         :	                        UnlockBufHdr(buf);
    0.00 :	  674d99:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	static void
         :	ForgetPrivateRefCountEntry(PrivateRefCountEntry *ref)
         :	{
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
    0.00 :	  674d9d:       49 81 fd c0 d0 b7 00    cmp    $0xb7d0c0,%r13
    0.00 :	  674da4:       72 0d                   jb     674db3 <UnpinBuffer+0x83>
    0.00 :	  674da6:       49 81 fd 00 d1 b7 00    cmp    $0xb7d100,%r13
    0.00 :	  674dad:       0f 82 95 00 00 00       jb     674e48 <UnpinBuffer+0x118>
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674db3:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674db7:       48 8b 3d ba 82 50 00    mov    0x5082ba(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674dbe:       48 8d 4d e7             lea    -0x19(%rbp),%rcx
    0.00 :	  674dc2:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
    0.00 :	  674dc6:       ba 02 00 00 00          mov    $0x2,%edx
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674dcb:       89 45 e0                mov    %eax,-0x20(%rbp)
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674dce:       e8 cd f8 10 00          callq  7846a0 <hash_search>
         :	                                        (void *) &buffer,
         :	                                        HASH_REMOVE,
         :	                                        &found);
         :	                Assert(found);
         :	                Assert(PrivateRefCountOverflowed > 0);
         :	                PrivateRefCountOverflowed--;
    0.00 :	  674dd3:       83 2d 96 82 50 00 01    subl   $0x1,0x508296(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                else
         :	                        UnlockBufHdr(buf);
         :
         :	                ForgetPrivateRefCountEntry(ref);
         :	        }
         :	}
    0.00 :	  674dda:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674dde:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674de2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674de6:       c9                      leaveq 
    0.00 :	  674de7:       c3                      retq   
    0.00 :	  674de8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674def:       00 
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674df0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674df3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674df6:       75 a1                   jne    674d99 <UnpinBuffer+0x69>
         :	                        buf->refcount == 1)
         :	                {
         :	                        /* we just released the last pin other than the waiter's */
         :	                        int                     wait_backend_pid = buf->wait_backend_pid;
    0.00 :	  674df8:       8b 7b 1c                mov    0x1c(%rbx),%edi
         :
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
    0.00 :	  674dfb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674dff:       83 e0 bf                and    $0xffffffbf,%eax
    0.00 :	  674e02:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	                        UnlockBufHdr(buf);
    0.00 :	  674e06:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        ProcSendSignal(wait_backend_pid);
    0.00 :	  674e0a:       e8 b1 76 01 00          callq  68c4c0 <ProcSendSignal>
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674e0f:       eb 8c                   jmp    674d9d <UnpinBuffer+0x6d>
    0.00 :	  674e11:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
    0.00 :	  674e18:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674e1b:       48 8b 3d 9e 5a 54 00    mov    0x545a9e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e22:       83 c6 01                add    $0x1,%esi
    0.00 :	  674e25:       e8 d6 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
    0.00 :	  674e2a:       e9 36 ff ff ff          jmpq   674d65 <UnpinBuffer+0x35>
    0.00 :	  674e2f:       90                      nop
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
    0.00 :	  674e30:       ba 63 05 00 00          mov    $0x563,%edx
    0.00 :	  674e35:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674e3a:       e8 01 b2 01 00          callq  690040 <s_lock>
    0.00 :	  674e3f:       e9 44 ff ff ff          jmpq   674d88 <UnpinBuffer+0x58>
    0.00 :	  674e44:       0f 1f 40 00             nopl   0x0(%rax)
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
         :	                ref < &PrivateRefCountArray[REFCOUNT_ARRAY_ENTRIES])
         :	        {
         :	                ref->buffer = InvalidBuffer;
    0.00 :	  674e48:       41 c7 45 00 00 00 00    movl   $0x0,0x0(%r13)
    0.00 :	  674e4f:       00 
    0.00 :	  674e50:       eb 88                   jmp    674dda <UnpinBuffer+0xaa>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:521
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000676570 <ReadBufferExtended>:
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676570:       55                      push   %rbp
    0.00 :	  676571:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  676574:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  676578:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  67657c:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67657f:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  676583:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  676587:       41 89 cd                mov    %ecx,%r13d
    0.00 :	  67658a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  67658e:       48 83 ec 40             sub    $0x40,%rsp
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676592:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676597:       41 89 f7                mov    %esi,%r15d
    0.00 :	  67659a:       41 89 d6                mov    %edx,%r14d
    0.00 :	  67659d:       4d 89 c4                mov    %r8,%r12
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6765a0:       0f 84 aa 00 00 00       je     676650 <ReadBufferExtended+0xe0>
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6765a6:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765aa:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:521
  100.00 :	  6765ae:       80 fa 74                cmp    $0x74,%dl
    0.00 :	  6765b1:       74 6d                   je     676620 <ReadBufferExtended+0xb0>
         :
         :	        /*
         :	         * Read the buffer, and update pgstat counters to reflect a cache hit or
         :	         * miss.
         :	         */
         :	        pgstat_count_buffer_read(reln);
    0.00 :	  6765b3:       48 8b 83 38 01 00 00    mov    0x138(%rbx),%rax
    0.00 :	  6765ba:       48 85 c0                test   %rax,%rax
    0.00 :	  6765bd:       74 0d                   je     6765cc <ReadBufferExtended+0x5c>
    0.00 :	  6765bf:       48 83 40 60 01          addq   $0x1,0x60(%rax)
    0.00 :	  6765c4:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765c8:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
         :	        buf = ReadBuffer_common(reln->rd_smgr, reln->rd_rel->relpersistence,
    0.00 :	  6765cc:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  6765d0:       48 8d 45 d7             lea    -0x29(%rbp),%rax
    0.00 :	  6765d4:       0f be f2                movsbl %dl,%esi
    0.00 :	  6765d7:       4d 89 e1                mov    %r12,%r9
    0.00 :	  6765da:       45 89 e8                mov    %r13d,%r8d
    0.00 :	  6765dd:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  6765e0:       44 89 fa                mov    %r15d,%edx
    0.00 :	  6765e3:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  6765e7:       e8 b4 f6 ff ff          callq  675ca0 <ReadBuffer_common>
         :	                                                        forkNum, blockNum, mode, strategy, &hit);
         :	        if (hit)
    0.00 :	  6765ec:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  6765f0:       74 11                   je     676603 <ReadBufferExtended+0x93>
         :	                pgstat_count_buffer_hit(reln);
    0.00 :	  6765f2:       48 8b 93 38 01 00 00    mov    0x138(%rbx),%rdx
    0.00 :	  6765f9:       48 85 d2                test   %rdx,%rdx
    0.00 :	  6765fc:       74 05                   je     676603 <ReadBufferExtended+0x93>
    0.00 :	  6765fe:       48 83 42 68 01          addq   $0x1,0x68(%rdx)
         :	        return buf;
         :	}
    0.00 :	  676603:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  676607:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  67660b:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  67660f:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  676613:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  676617:       c9                      leaveq 
    0.00 :	  676618:       c3                      retq   
    0.00 :	  676619:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  676620:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676624:       75 8d                   jne    6765b3 <ReadBufferExtended+0x43>
         :	                ereport(ERROR,
    0.00 :	  676626:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676629:       b9 c0 a0 8a 00          mov    $0x8aa0c0,%ecx
    0.00 :	  67662e:       ba 0c 02 00 00          mov    $0x20c,%edx
    0.00 :	  676633:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676638:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67663d:       e8 7e 44 10 00          callq  77aac0 <errstart>
    0.00 :	  676642:       84 c0                   test   %al,%al
    0.00 :	  676644:       75 29                   jne    67666f <ReadBufferExtended+0xff>
    0.00 :	  676646:       e8 85 2e df ff          callq  4694d0 <abort@plt>
    0.00 :	  67664b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	{
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676650:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676653:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676656:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676659:       e8 d2 33 02 00          callq  699a30 <smgropen>
    0.00 :	  67665e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676662:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676665:       e8 96 2c 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67666a:       e9 37 ff ff ff          jmpq   6765a6 <ReadBufferExtended+0x36>
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
         :	                ereport(ERROR,
    0.00 :	  67666f:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  676674:       31 c0                   xor    %eax,%eax
    0.00 :	  676676:       e8 25 62 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67667b:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  676680:       89 c3                   mov    %eax,%ebx
    0.00 :	  676682:       e8 c9 66 10 00          callq  77cd50 <errcode>
    0.00 :	  676687:       89 de                   mov    %ebx,%esi
    0.00 :	  676689:       89 c7                   mov    %eax,%edi
    0.00 :	  67668b:       31 c0                   xor    %eax,%eax
    0.00 :	  67668d:       e8 4e 3f 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676692:       eb b2                   jmp    676646 <ReadBufferExtended+0xd6>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1499
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679a90 <FileSeek>:
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a90:       55                      push   %rbp
    0.00 :	  679a91:       89 f8                   mov    %edi,%eax
    0.00 :	  679a93:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679a96:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679a9a:       4c 63 ef                movslq %edi,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a9d:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aa1:       49 c1 e5 06             shl    $0x6,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679aa5:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  679aa9:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aad:       4d 89 ec                mov    %r13,%r12
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679ab0:       48 83 ec 20             sub    $0x20,%rsp
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ab4:       4c 03 25 dd 36 50 00    add    0x5036dd(%rip),%r12        # b7d198 <VfdCache>
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679abb:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679abe:       89 d3                   mov    %edx,%ebx
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ac0:       41 8b 3c 24             mov    (%r12),%edi
    0.00 :	  679ac4:       83 ff ff                cmp    $0xffffffff,%edi
    0.00 :	  679ac7:       74 6f                   je     679b38 <FileSeek+0xa8>
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ac9:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679acc:       0f 84 9e 00 00 00       je     679b70 <FileSeek+0xe0>
    0.00 :	  679ad2:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679ad5:       0f 84 05 01 00 00       je     679be0 <FileSeek+0x150>
    0.00 :	  679adb:       85 db                   test   %ebx,%ebx
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679add:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679ae2:       be d7 05 00 00          mov    $0x5d7,%esi
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ae7:       75 27                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679ae9:       4d 85 f6                test   %r14,%r14
    0.00 :	  679aec:       0f 88 28 01 00 00       js     679c1a <FileSeek+0x18a>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                if (VfdCache[file].seekPos != offset)
    0.00 :	  679af2:       4d 39 74 24 20          cmp    %r14,0x20(%r12)
    0.00 :	  679af7:       0f 84 8b 00 00 00       je     679b88 <FileSeek+0xf8>
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679afd:       31 d2                   xor    %edx,%edx
    0.00 :	  679aff:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679b02:       e8 69 00 df ff          callq  469b70 <lseek@plt>
    0.00 :	  679b07:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679b0c:       eb 7a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b0e:       66 90                   xchg   %ax,%ax
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b10:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679b15:       e8 06 19 10 00          callq  77b420 <elog_start>
    0.00 :	  679b1a:       89 da                   mov    %ebx,%edx
    0.00 :	  679b1c:       be 3a a3 8a 00          mov    $0x8aa33a,%esi
    0.00 :	  679b21:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679b26:       31 c0                   xor    %eax,%eax
    0.00 :	  679b28:       e8 03 17 10 00          callq  77b230 <elog_finish>
    0.00 :	  679b2d:       e8 9e f9 de ff          callq  4694d0 <abort@plt>
    0.00 :	  679b32:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b38:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679b3b:       0f 84 cf 00 00 00       je     679c10 <FileSeek+0x180>
    0.00 :	  679b41:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679b44:       74 6a                   je     679bb0 <FileSeek+0x120>
    0.00 :	  679b46:       85 db                   test   %ebx,%ebx
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b48:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b4d:       be bd 05 00 00          mov    $0x5bd,%esi
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b52:       75 bc                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b54:       4d 85 f6                test   %r14,%r14
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679b57:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b5c:       be af 05 00 00          mov    $0x5af,%esi
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b61:       0f 88 bd 00 00 00       js     679c24 <FileSeek+0x194>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
    0.00 :	  679b67:       4d 89 74 24 20          mov    %r14,0x20(%r12)
         :	                                break;
    0.00 :	  679b6c:       eb 1a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b6e:       66 90                   xchg   %ax,%ax
         :	                                if (VfdCache[file].seekPos != offset)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
    0.00 :	  679b70:       48 85 f6                test   %rsi,%rsi
    0.00 :	  679b73:       0f 85 7f 00 00 00       jne    679bf8 <FileSeek+0x168>
    0.00 :	  679b79:       49 83 7c 24 20 ff       cmpq   $0xffffffffffffffff,0x20(%r12)
    0.00 :	  679b7f:       90                      nop
    0.00 :	  679b80:       74 76                   je     679bf8 <FileSeek+0x168>
    0.00 :	  679b82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
         :	                                break;
         :	                }
         :	        }
         :	        return VfdCache[file].seekPos;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1499
  100.00 :	  679b88:       48 8b 05 09 36 50 00    mov    0x503609(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679b8f:       4a 8b 54 28 20          mov    0x20(%rax,%r13,1),%rdx
         :	}
    0.00 :	  679b94:       48 89 d0                mov    %rdx,%rax
    0.00 :	  679b97:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  679b9b:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  679ba0:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  679ba5:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  679baa:       c9                      leaveq 
    0.00 :	  679bab:       c3                      retq   
    0.00 :	  679bac:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
    0.00 :	  679bb0:       89 c7                   mov    %eax,%edi
    0.00 :	  679bb2:       e8 69 fd ff ff          callq  679920 <FileAccess>
         :	                                if (returnCode < 0)
    0.00 :	  679bb7:       85 c0                   test   %eax,%eax
         :	                                        return returnCode;
    0.00 :	  679bb9:       48 63 d0                movslq %eax,%rdx
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
         :	                                if (returnCode < 0)
    0.00 :	  679bbc:       78 d6                   js     679b94 <FileSeek+0x104>
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bbe:       4c 89 eb                mov    %r13,%rbx
    0.00 :	  679bc1:       48 03 1d d0 35 50 00    add    0x5035d0(%rip),%rbx        # b7d198 <VfdCache>
    0.00 :	  679bc8:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679bcd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679bd0:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  679bd2:       e8 99 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bd7:       48 89 43 20             mov    %rax,0x20(%rbx)
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bdb:       eb ab                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bdd:       0f 1f 00                nopl   (%rax)
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679be0:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679be5:       e8 86 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bea:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679bef:       90                      nop
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bf0:       eb 96                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bf2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bf8:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  679bfd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679c00:       e8 6b ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679c05:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679c0a:       e9 79 ff ff ff          jmpq   679b88 <FileSeek+0xf8>
    0.00 :	  679c0f:       90                      nop
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
    0.00 :	  679c10:       49 01 74 24 20          add    %rsi,0x20(%r12)
         :	                                break;
    0.00 :	  679c15:       e9 6e ff ff ff          jmpq   679b88 <FileSeek+0xf8>
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679c1a:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679c1f:       be c8 05 00 00          mov    $0x5c8,%esi
    0.00 :	  679c24:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679c29:       e8 f2 17 10 00          callq  77b420 <elog_start>
    0.00 :	  679c2e:       4c 89 f2                mov    %r14,%rdx
    0.00 :	  679c31:       be 21 a3 8a 00          mov    $0x8aa321,%esi
    0.00 :	  679c36:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679c3b:       31 c0                   xor    %eax,%eax
    0.00 :	  679c3d:       e8 ee 15 10 00          callq  77b230 <elog_finish>
    0.00 :	  679c42:       e8 89 f8 de ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694ed0 <PageIsVerified>:
         :	 * treat such a page as empty and without free space.  Eventually, VACUUM
         :	 * will clean up such a page and make it usable.
         :	 */
         :	bool
         :	PageIsVerified(Page page, BlockNumber blkno)
         :	{
    0.00 :	  694ed0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
  100.00 :	  694ed1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694ed4:       41 55                   push   %r13
    0.00 :	  694ed6:       41 54                   push   %r12
    0.00 :	  694ed8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  694edb:       53                      push   %rbx
    0.00 :	  694edc:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  694edf:       48 83 ec 08             sub    $0x8,%rsp
         :	        uint16          checksum = 0;
         :
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
    0.00 :	  694ee3:       66 83 7f 0e 00          cmpw   $0x0,0xe(%rdi)
    0.00 :	  694ee8:       75 56                   jne    694f40 <PageIsVerified+0x70>
    0.00 :	  694eea:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694eed:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694ef0:       31 c9                   xor    %ecx,%ecx
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694ef2:       31 c0                   xor    %eax,%eax
    0.00 :	  694ef4:       eb 16                   jmp    694f0c <PageIsVerified+0x3c>
    0.00 :	  694ef6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  694efd:       00 00 00 
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f00:       48 83 c0 01             add    $0x1,%rax
         :	        }
         :
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
    0.00 :	  694f04:       48 3d 00 20 00 00       cmp    $0x2000,%rax
    0.00 :	  694f0a:       74 24                   je     694f30 <PageIsVerified+0x60>
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f0c:       80 3c 03 00             cmpb   $0x0,(%rbx,%rax,1)
    0.00 :	  694f10:       74 ee                   je     694f00 <PageIsVerified+0x30>
         :
         :	        /*
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
    0.00 :	  694f12:       84 c9                   test   %cl,%cl
    0.00 :	  694f14:       0f 85 86 00 00 00       jne    694fa0 <PageIsVerified+0xd0>
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f1a:       31 c0                   xor    %eax,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f1c:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  694f20:       5b                      pop    %rbx
    0.00 :	  694f21:       41 5c                   pop    %r12
    0.00 :	  694f23:       41 5d                   pop    %r13
    0.00 :	  694f25:       c9                      leaveq 
    0.00 :	  694f26:       c3                      retq   
    0.00 :	  694f27:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  694f2e:       00 00 
    0.00 :	  694f30:       48 83 c4 08             add    $0x8,%rsp
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f34:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f39:       5b                      pop    %rbx
    0.00 :	  694f3a:       41 5c                   pop    %r12
    0.00 :	  694f3c:       41 5d                   pop    %r13
    0.00 :	  694f3e:       c9                      leaveq 
    0.00 :	  694f3f:       c3                      retq   
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
    0.00 :	  694f40:       e8 7b 80 e3 ff          callq  4ccfc0 <DataChecksumsEnabled>
    0.00 :	  694f45:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694f48:       31 c9                   xor    %ecx,%ecx
    0.00 :	  694f4a:       84 c0                   test   %al,%al
    0.00 :	  694f4c:       0f 85 96 00 00 00       jne    694fe8 <PageIsVerified+0x118>
         :	                 * The following checks don't prove the header is correct, only that
         :	                 * it looks sane enough to allow into the buffer pool. Later usage of
         :	                 * the block can still reveal problems, which is why we offer the
         :	                 * checksum option.
         :	                 */
         :	                if ((p->pd_flags & ~PD_VALID_FLAG_BITS) == 0 &&
    0.00 :	  694f52:       0f b7 43 0a             movzwl 0xa(%rbx),%eax
    0.00 :	  694f56:       a9 f8 ff 00 00          test   $0xfff8,%eax
    0.00 :	  694f5b:       0f 85 7f 00 00 00       jne    694fe0 <PageIsVerified+0x110>
    0.00 :	  694f61:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  694f65:       66 39 43 0c             cmp    %ax,0xc(%rbx)
    0.00 :	  694f69:       77 75                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f6b:       0f b7 53 10             movzwl 0x10(%rbx),%edx
    0.00 :	  694f6f:       66 39 d0                cmp    %dx,%ax
    0.00 :	  694f72:       77 6c                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f74:       66 81 fa 00 20          cmp    $0x2000,%dx
    0.00 :	  694f79:       77 65                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f7b:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  694f7e:       48 8d 42 07             lea    0x7(%rdx),%rax
    0.00 :	  694f82:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  694f86:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  694f89:       75 55                   jne    694fe0 <PageIsVerified+0x110>
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694f8b:       84 c9                   test   %cl,%cl
    0.00 :	  694f8d:       74 a1                   je     694f30 <PageIsVerified+0x60>
    0.00 :	  694f8f:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  694f95:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  694f9a:       e9 53 ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
    0.00 :	  694f9f:       90                      nop
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  694fa0:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694fa3:       b9 e4 de 8a 00          mov    $0x8adee4,%ecx
    0.00 :	  694fa8:       ba 91 00 00 00          mov    $0x91,%edx
    0.00 :	  694fad:       be 33 dc 8a 00          mov    $0x8adc33,%esi
    0.00 :	  694fb2:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  694fb7:       e8 04 5b 0e 00          callq  77aac0 <errstart>
    0.00 :	  694fbc:       84 c0                   test   %al,%al
    0.00 :	  694fbe:       75 42                   jne    695002 <PageIsVerified+0x132>
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694fc0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  694fc3:       0f 84 51 ff ff ff       je     694f1a <PageIsVerified+0x4a>
    0.00 :	  694fc9:       80 3d b8 97 4e 00 00    cmpb   $0x0,0x4e97b8(%rip)        # b7e788 <ignore_checksum_failure>
    0.00 :	  694fd0:       0f 95 c0                setne  %al
    0.00 :	  694fd3:       e9 44 ff ff ff          jmpq   694f1c <PageIsVerified+0x4c>
    0.00 :	  694fd8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  694fdf:       00 
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694fe0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694fe3:       e9 0a ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694fe8:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694feb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  694fee:       e8 7d 13 00 00          callq  696370 <pg_checksum_page>
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ff3:       66 3b 43 08             cmp    0x8(%rbx),%ax
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694ff7:       41 89 c5                mov    %eax,%r13d
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ffa:       0f 95 c1                setne  %cl
    0.00 :	  694ffd:       e9 50 ff ff ff          jmpq   694f52 <PageIsVerified+0x82>
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  695002:       0f b7 53 08             movzwl 0x8(%rbx),%edx
    0.00 :	  695006:       41 0f b7 f5             movzwl %r13w,%esi
    0.00 :	  69500a:       bf 78 dc 8a 00          mov    $0x8adc78,%edi
    0.00 :	  69500f:       31 c0                   xor    %eax,%eax
    0.00 :	  695011:       e8 8a 78 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  695016:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  69501b:       89 c6                   mov    %eax,%esi
    0.00 :	  69501d:       31 c0                   xor    %eax,%eax
    0.00 :	  69501f:       e8 bc 55 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  695024:       eb 9a                   jmp    694fc0 <PageIsVerified+0xf0>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:627
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000699410 <smgrread>:
         :	 *              return pages in the format that POSTGRES expects.
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
    0.00 :	  699410:       55                      push   %rbp
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
    0.00 :	  699411:       48 63 47 24             movslq 0x24(%rdi),%rax
         :	 *              return pages in the format that POSTGRES expects.
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
    0.00 :	  699415:       48 89 e5                mov    %rsp,%rbp
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:627
  100.00 :	  699418:       48 c1 e0 07             shl    $0x7,%rax
    0.00 :	  69941c:       4c 8b 98 a0 e4 8a 00    mov    0x8ae4a0(%rax),%r11
         :	}
    0.00 :	  699423:       c9                      leaveq 
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
    0.00 :	  699424:       41 ff e3                jmpq   *%r11

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:666
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000757d90 <bcTruelen>:
         :	 *****************************************************************************/
         :
         :	/* "True" length (not counting trailing blanks) of a BpChar */
         :	static int
         :	bcTruelen(BpChar *arg)
         :	{
    0.00 :	  757d90:       55                      push   %rbp
         :	        char       *s = VARDATA_ANY(arg);
    0.00 :	  757d91:       0f b6 17                movzbl (%rdi),%edx
    0.00 :	  757d94:       48 8d 4f 01             lea    0x1(%rdi),%rcx
    0.00 :	  757d98:       48 8d 47 04             lea    0x4(%rdi),%rax
    0.00 :	  757d9c:       be 01 00 00 00          mov    $0x1,%esi
         :	 *****************************************************************************/
         :
         :	/* "True" length (not counting trailing blanks) of a BpChar */
         :	static int
         :	bcTruelen(BpChar *arg)
         :	{
    0.00 :	  757da1:       48 89 e5                mov    %rsp,%rbp
         :	        char       *s = VARDATA_ANY(arg);
    0.00 :	  757da4:       21 d6                   and    %edx,%esi
    0.00 :	  757da6:       48 0f 44 c8             cmove  %rax,%rcx
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
    0.00 :	  757daa:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  757dad:       74 51                   je     757e00 <bcTruelen+0x70>
    0.00 :	  757daf:       85 f6                   test   %esi,%esi
    0.00 :	  757db1:       75 3d                   jne    757df0 <bcTruelen+0x60>
    0.00 :	  757db3:       8b 07                   mov    (%rdi),%eax
    0.00 :	  757db5:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  757db8:       83 e8 04                sub    $0x4,%eax
         :	        for (i = len - 1; i >= 0; i--)
    0.00 :	  757dbb:       89 c2                   mov    %eax,%edx
    0.00 :	  757dbd:       83 ea 01                sub    $0x1,%edx
    0.00 :	  757dc0:       78 20                   js     757de2 <bcTruelen+0x52>
    0.00 :	  757dc2:       48 63 f2                movslq %edx,%rsi
         :	        {
         :	                if (s[i] != ' ')
    0.00 :	  757dc5:       80 3c 31 20             cmpb   $0x20,(%rcx,%rsi,1)
    0.00 :	  757dc9:       74 0e                   je     757dd9 <bcTruelen+0x49>
    0.00 :	  757dcb:       eb 15                   jmp    757de2 <bcTruelen+0x52>
    0.00 :	  757dcd:       0f 1f 00                nopl   (%rax)
    0.00 :	  757dd0:       48 63 c2                movslq %edx,%rax
    0.00 :	  757dd3:       80 3c 01 20             cmpb   $0x20,(%rcx,%rax,1)
    0.00 :	  757dd7:       75 09                   jne    757de2 <bcTruelen+0x52>
         :	        char       *s = VARDATA_ANY(arg);
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
         :	        for (i = len - 1; i >= 0; i--)
    0.00 :	  757dd9:       83 ea 01                sub    $0x1,%edx
    0.00 :	  757ddc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  757de0:       79 ee                   jns    757dd0 <bcTruelen+0x40>
    0.00 :	  757de2:       8d 42 01                lea    0x1(%rdx),%eax
         :	        {
         :	                if (s[i] != ' ')
         :	                        break;
         :	        }
         :	        return i + 1;
         :	}
    0.00 :	  757de5:       c9                      leaveq 
  100.00 :	  757de6:       c3                      retq   
    0.00 :	  757de7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  757dee:       00 00 
         :	{
         :	        char       *s = VARDATA_ANY(arg);
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
    0.00 :	  757df0:       d0 ea                   shr    %dl
    0.00 :	  757df2:       0f b6 c2                movzbl %dl,%eax
    0.00 :	  757df5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  757df8:       eb c1                   jmp    757dbb <bcTruelen+0x2b>
    0.00 :	  757dfa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  757e00:       0f b6 7f 01             movzbl 0x1(%rdi),%edi
    0.00 :	  757e04:       ba 07 00 00 00          mov    $0x7,%edx
    0.00 :	  757e09:       be 07 00 00 00          mov    $0x7,%esi
    0.00 :	  757e0e:       40 80 ff 01             cmp    $0x1,%dil
    0.00 :	  757e12:       74 b1                   je     757dc5 <bcTruelen+0x35>
    0.00 :	  757e14:       40 80 ff 12             cmp    $0x12,%dil
    0.00 :	  757e18:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  757e1d:       ba 0f 00 00 00          mov    $0xf,%edx
    0.00 :	  757e22:       0f 45 d0                cmovne %eax,%edx
    0.00 :	  757e25:       be 0f 00 00 00          mov    $0xf,%esi
    0.00 :	  757e2a:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  757e2f:       48 0f 45 f0             cmovne %rax,%rsi
    0.00 :	  757e33:       eb 90                   jmp    757dc5 <bcTruelen+0x35>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000758230 <bpchareq>:
         :	 * need to be so careful.
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  758230:       55                      push   %rbp
    0.00 :	  758231:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  758234:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  758238:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  75823c:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  758240:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  758244:       49 89 fd                mov    %rdi,%r13
    0.00 :	  758247:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  75824b:       48 83 ec 30             sub    $0x30,%rsp
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  75824f:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
    0.00 :	  758253:       45 31 f6                xor    %r14d,%r14d
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  758256:       e8 85 6a 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  75825b:       49 8b 7d 28             mov    0x28(%r13),%rdi
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  75825f:       49 89 c4                mov    %rax,%r12
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  758262:       e8 79 6a 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  758267:       4c 89 e7                mov    %r12,%rdi
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  75826a:       48 89 c3                mov    %rax,%rbx
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  75826d:       e8 1e fb ff ff          callq  757d90 <bcTruelen>
         :	        len2 = bcTruelen(arg2);
    0.00 :	  758272:       48 89 df                mov    %rbx,%rdi
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  758275:       41 89 c7                mov    %eax,%r15d
         :	        len2 = bcTruelen(arg2);
    0.00 :	  758278:       e8 13 fb ff ff          callq  757d90 <bcTruelen>
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
    0.00 :	  75827d:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  758280:       74 3e                   je     7582c0 <bpchareq+0x90>
         :	                result = false;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) == 0);
         :
         :	        PG_FREE_IF_COPY(arg1, 0);
    0.00 :	  758282:       4d 3b 65 20             cmp    0x20(%r13),%r12
    0.00 :	  758286:       74 0d                   je     758295 <bpchareq+0x65>
    0.00 :	  758288:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  75828b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  758290:       e8 eb 08 04 00          callq  798b80 <pfree>
         :	        PG_FREE_IF_COPY(arg2, 1);
    0.00 :	  758295:       49 3b 5d 28             cmp    0x28(%r13),%rbx
    0.00 :	  758299:       74 08                   je     7582a3 <bpchareq+0x73>
    0.00 :	  75829b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  75829e:       e8 dd 08 04 00          callq  798b80 <pfree>
         :
         :	        PG_RETURN_BOOL(result);
         :	}
    0.00 :	  7582a3:       4c 89 f0                mov    %r14,%rax
    0.00 :	  7582a6:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  7582aa:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  7582ae:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  7582b2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  7582b6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  7582ba:       c9                      leaveq 
    0.00 :	  7582bb:       c3                      retq   
    0.00 :	  7582bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
         :	                result = false;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) == 0);
    0.00 :	  7582c0:       f6 03 01                testb  $0x1,(%rbx)
    0.00 :	  7582c3:       48 8d 43 04             lea    0x4(%rbx),%rax
    0.00 :	  7582c7:       48 8d 7b 01             lea    0x1(%rbx),%rdi
    0.00 :	  7582cb:       49 8d 74 24 01          lea    0x1(%r12),%rsi
    0.00 :	  7582d0:       49 63 cf                movslq %r15d,%rcx
    0.00 :	  7582d3:       48 0f 44 f8             cmove  %rax,%rdi
    0.00 :	  7582d7:       41 f6 04 24 01          testb  $0x1,(%r12)
    0.00 :	  7582dc:       49 8d 44 24 04          lea    0x4(%r12),%rax
    0.00 :	  7582e1:       48 0f 44 f0             cmove  %rax,%rsi
    0.00 :	  7582e5:       48 39 c9                cmp    %rcx,%rcx
    0.00 :	  7582e8:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
  100.00 :	  7582ea:       0f 97 c2                seta   %dl
    0.00 :	  7582ed:       0f 92 c0                setb   %al
    0.00 :	  7582f0:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  7582f3:       38 c2                   cmp    %al,%dl
    0.00 :	  7582f5:       41 0f 94 c6             sete   %r14b
    0.00 :	  7582f9:       eb 87                   jmp    758282 <bpchareq+0x52>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/cache/relcache.c:4660
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000076b450 <load_relcache_init_file>:
         :	 *
         :	 * NOTE: we assume we are already switched into CacheMemoryContext.
         :	 */
         :	static bool
         :	load_relcache_init_file(bool shared)
         :	{
    0.00 :	  76b450:       55                      push   %rbp
    0.00 :	  76b451:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  76b454:       41 57                   push   %r15
    0.00 :	  76b456:       41 56                   push   %r14
    0.00 :	  76b458:       41 55                   push   %r13
    0.00 :	  76b45a:       41 54                   push   %r12
    0.00 :	  76b45c:       53                      push   %rbx
    0.00 :	  76b45d:       48 81 ec 48 04 00 00    sub    $0x448,%rsp
         :	                                nailed_rels,
         :	                                nailed_indexes,
         :	                                magic;
         :	        int                     i;
         :
         :	        if (shared)
    0.00 :	  76b464:       40 84 ff                test   %dil,%dil
         :	 *
         :	 * NOTE: we assume we are already switched into CacheMemoryContext.
         :	 */
         :	static bool
         :	load_relcache_init_file(bool shared)
         :	{
    0.00 :	  76b467:       40 88 bd 9f fb ff ff    mov    %dil,-0x461(%rbp)
         :	                                nailed_rels,
         :	                                nailed_indexes,
         :	                                magic;
         :	        int                     i;
         :
         :	        if (shared)
    0.00 :	  76b46e:       0f 84 8c 00 00 00       je     76b500 <load_relcache_init_file+0xb0>
         :	                snprintf(initfilename, sizeof(initfilename), "global/%s",
    0.00 :	  76b474:       48 8d 9d c0 fb ff ff    lea    -0x440(%rbp),%rbx
    0.00 :	  76b47b:       b9 d3 d7 8c 00          mov    $0x8cd7d3,%ecx
    0.00 :	  76b480:       ba e4 d7 8c 00          mov    $0x8cd7e4,%edx
    0.00 :	  76b485:       be 00 04 00 00          mov    $0x400,%esi
    0.00 :	  76b48a:       31 c0                   xor    %eax,%eax
    0.00 :	  76b48c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  76b48f:       e8 bc df cf ff          callq  469450 <snprintf@plt>
         :	                                 RELCACHE_INIT_FILENAME);
         :	        else
         :	                snprintf(initfilename, sizeof(initfilename), "%s/%s",
         :	                                 DatabasePath, RELCACHE_INIT_FILENAME);
         :
         :	        fp = AllocateFile(initfilename, PG_BINARY_R);
    0.00 :	  76b494:       be cd 6c 8d 00          mov    $0x8d6ccd,%esi
    0.00 :	  76b499:       48 89 df                mov    %rbx,%rdi
    0.00 :	  76b49c:       e8 7f dd f0 ff          callq  679220 <AllocateFile>
    0.00 :	  76b4a1:       49 89 c7                mov    %rax,%r15
         :	        if (fp == NULL)
    0.00 :	  76b4a4:       31 c0                   xor    %eax,%eax
    0.00 :	  76b4a6:       4d 85 ff                test   %r15,%r15
    0.00 :	  76b4a9:       74 43                   je     76b4ee <load_relcache_init_file+0x9e>
         :	         * Read the index relcache entries from the file.  Note we will not enter
         :	         * any of them into the cache if the read fails partway through; this
         :	         * helps to guard against broken init files.
         :	         */
         :	        max_rels = 100;
         :	        rels = (Relation *) palloc(max_rels * sizeof(Relation));
    0.00 :	  76b4ab:       bf 20 03 00 00          mov    $0x320,%edi
    0.00 :	  76b4b0:       e8 9b d8 02 00          callq  798d50 <palloc>
         :	        num_rels = 0;
         :	        nailed_rels = nailed_indexes = 0;
         :
         :	        /* check for correct magic number (compatible version) */
         :	        if (fread(&magic, 1, sizeof(magic), fp) != sizeof(magic))
    0.00 :	  76b4b5:       48 8d 7d cc             lea    -0x34(%rbp),%rdi
    0.00 :	  76b4b9:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b4bc:       ba 04 00 00 00          mov    $0x4,%edx
    0.00 :	  76b4c1:       be 01 00 00 00          mov    $0x1,%esi
         :	         * Read the index relcache entries from the file.  Note we will not enter
         :	         * any of them into the cache if the read fails partway through; this
         :	         * helps to guard against broken init files.
         :	         */
         :	        max_rels = 100;
         :	        rels = (Relation *) palloc(max_rels * sizeof(Relation));
    0.00 :	  76b4c6:       48 89 85 a0 fb ff ff    mov    %rax,-0x460(%rbp)
         :	        num_rels = 0;
         :	        nailed_rels = nailed_indexes = 0;
         :
         :	        /* check for correct magic number (compatible version) */
         :	        if (fread(&magic, 1, sizeof(magic), fp) != sizeof(magic))
    0.00 :	  76b4cd:       e8 be e7 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b4d2:       48 83 f8 04             cmp    $0x4,%rax
    0.00 :	  76b4d6:       74 58                   je     76b530 <load_relcache_init_file+0xe0>
         :	         * init file is broken, so do it the hard way.  We don't bother trying to
         :	         * free the clutter we just allocated; it's not in the relcache so it
         :	         * won't hurt.
         :	         */
         :	read_failed:
         :	        pfree(rels);
    0.00 :	  76b4d8:       48 8b bd a0 fb ff ff    mov    -0x460(%rbp),%rdi
    0.00 :	  76b4df:       e8 9c d6 02 00          callq  798b80 <pfree>
         :	        FreeFile(fp);
    0.00 :	  76b4e4:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  76b4e7:       e8 64 d1 f0 ff          callq  678650 <FreeFile>
    0.00 :	  76b4ec:       31 c0                   xor    %eax,%eax
         :
         :	        return false;
         :	}
    0.00 :	  76b4ee:       48 81 c4 48 04 00 00    add    $0x448,%rsp
    0.00 :	  76b4f5:       5b                      pop    %rbx
    0.00 :	  76b4f6:       41 5c                   pop    %r12
    0.00 :	  76b4f8:       41 5d                   pop    %r13
    0.00 :	  76b4fa:       41 5e                   pop    %r14
    0.00 :	  76b4fc:       41 5f                   pop    %r15
    0.00 :	  76b4fe:       c9                      leaveq 
    0.00 :	  76b4ff:       c3                      retq   
         :
         :	        if (shared)
         :	                snprintf(initfilename, sizeof(initfilename), "global/%s",
         :	                                 RELCACHE_INIT_FILENAME);
         :	        else
         :	                snprintf(initfilename, sizeof(initfilename), "%s/%s",
    0.00 :	  76b500:       48 8d 9d c0 fb ff ff    lea    -0x440(%rbp),%rbx
    0.00 :	  76b507:       48 8b 0d a2 eb 44 00    mov    0x44eba2(%rip),%rcx        # bba0b0 <DatabasePath>
    0.00 :	  76b50e:       41 b8 d3 d7 8c 00       mov    $0x8cd7d3,%r8d
    0.00 :	  76b514:       ba 1b a3 8a 00          mov    $0x8aa31b,%edx
    0.00 :	  76b519:       be 00 04 00 00          mov    $0x400,%esi
    0.00 :	  76b51e:       31 c0                   xor    %eax,%eax
    0.00 :	  76b520:       48 89 df                mov    %rbx,%rdi
    0.00 :	  76b523:       e8 28 df cf ff          callq  469450 <snprintf@plt>
    0.00 :	  76b528:       e9 67 ff ff ff          jmpq   76b494 <load_relcache_init_file+0x44>
    0.00 :	  76b52d:       0f 1f 00                nopl   (%rax)
         :	        nailed_rels = nailed_indexes = 0;
         :
         :	        /* check for correct magic number (compatible version) */
         :	        if (fread(&magic, 1, sizeof(magic), fp) != sizeof(magic))
         :	                goto read_failed;
         :	        if (magic != RELCACHE_INIT_FILEMAGIC)
    0.00 :	  76b530:       81 7d cc 66 32 57 00    cmpl   $0x573266,-0x34(%rbp)
    0.00 :	  76b537:       75 9f                   jne    76b4d8 <load_relcache_init_file+0x88>
         :	                goto read_failed;
    0.00 :	  76b539:       c7 85 b0 fb ff ff 00    movl   $0x0,-0x450(%rbp)
    0.00 :	  76b540:       00 00 00 
    0.00 :	  76b543:       c7 85 a8 fb ff ff 00    movl   $0x0,-0x458(%rbp)
    0.00 :	  76b54a:       00 00 00 
    0.00 :	  76b54d:       c7 85 ac fb ff ff 64    movl   $0x64,-0x454(%rbp)
    0.00 :	  76b554:       00 00 00 
    0.00 :	  76b557:       c7 85 b4 fb ff ff 00    movl   $0x0,-0x44c(%rbp)
    0.00 :	  76b55e:       00 00 00 
         :	                Relation        rel;
         :	                Form_pg_class relform;
         :	                bool            has_not_null;
         :
         :	                /* first read the relation descriptor length */
         :	                nread = fread(&len, 1, sizeof(len), fp);
    0.00 :	  76b561:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  76b565:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b568:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b56d:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b572:       e8 19 e7 cf ff          callq  469c90 <fread@plt>
         :	                if (nread != sizeof(len))
    0.00 :	  76b577:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b57b:       0f 85 4e 06 00 00       jne    76bbcf <load_relcache_init_file+0x77f>
         :	                                break;                  /* end of file */
         :	                        goto read_failed;
         :	                }
         :
         :	                /* safety check for incompatible relcache layout */
         :	                if (len != sizeof(RelationData))
    0.00 :	  76b581:       48 81 7d c0 40 01 00    cmpq   $0x140,-0x40(%rbp)
    0.00 :	  76b588:       00 
    0.00 :	  76b589:       0f 85 49 ff ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                        goto read_failed;
         :
         :	                /* allocate another relcache header */
         :	                if (num_rels >= max_rels)
    0.00 :	  76b58f:       8b 85 ac fb ff ff       mov    -0x454(%rbp),%eax
    0.00 :	  76b595:       39 85 a8 fb ff ff       cmp    %eax,-0x458(%rbp)
    0.00 :	  76b59b:       0f 8d 5f 01 00 00       jge    76b700 <load_relcache_init_file+0x2b0>
         :	                {
         :	                        max_rels *= 2;
         :	                        rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
         :	                }
         :
         :	                rel = rels[num_rels++] = (Relation) palloc(len);
    0.00 :	  76b5a1:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  76b5a5:       e8 a6 d7 02 00          callq  798d50 <palloc>
    0.00 :	  76b5aa:       49 89 c6                mov    %rax,%r14
    0.00 :	  76b5ad:       48 63 85 a8 fb ff ff    movslq -0x458(%rbp),%rax
    0.00 :	  76b5b4:       48 8b 95 a0 fb ff ff    mov    -0x460(%rbp),%rdx
         :
         :	                /* then, read the Relation structure */
         :	                if (fread(rel, 1, len, fp) != len)
    0.00 :	  76b5bb:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b5be:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b5c3:       4c 89 f7                mov    %r14,%rdi
         :	                {
         :	                        max_rels *= 2;
         :	                        rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
         :	                }
         :
         :	                rel = rels[num_rels++] = (Relation) palloc(len);
    0.00 :	  76b5c6:       4c 89 34 c2             mov    %r14,(%rdx,%rax,8)
         :
         :	                /* then, read the Relation structure */
         :	                if (fread(rel, 1, len, fp) != len)
    0.00 :	  76b5ca:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76b5ce:       e8 bd e6 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b5d3:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b5d7:       0f 85 fb fe ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                        goto read_failed;
         :
         :	                /* next read the relation tuple form */
         :	                if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b5dd:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  76b5e1:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b5e4:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b5e9:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b5ee:       e8 9d e6 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b5f3:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b5f7:       0f 85 db fe ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                        goto read_failed;
         :
         :	                relform = (Form_pg_class) palloc(len);
    0.00 :	  76b5fd:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  76b601:       e8 4a d7 02 00          callq  798d50 <palloc>
         :	                if (fread(relform, 1, len, fp) != len)
    0.00 :	  76b606:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76b60a:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b60d:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b612:       48 89 c7                mov    %rax,%rdi
         :
         :	                /* next read the relation tuple form */
         :	                if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                        goto read_failed;
         :
         :	                relform = (Form_pg_class) palloc(len);
    0.00 :	  76b615:       48 89 85 b8 fb ff ff    mov    %rax,-0x448(%rbp)
         :	                if (fread(relform, 1, len, fp) != len)
    0.00 :	  76b61c:       e8 6f e6 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b621:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b625:       0f 85 ad fe ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                        goto read_failed;
         :
         :	                rel->rd_rel = relform;
    0.00 :	  76b62b:       48 8b 8d b8 fb ff ff    mov    -0x448(%rbp),%rcx
         :	                rel->rd_att->tdtypeid = relform->reltype;
         :	                rel->rd_att->tdtypmod = -1;             /* unnecessary, but... */
         :
         :	                /* next read all the attribute tuple form data entries */
         :	                has_not_null = false;
         :	                for (i = 0; i < relform->relnatts; i++)
    0.00 :	  76b632:       31 db                   xor    %ebx,%ebx
    0.00 :	  76b634:       45 31 ed                xor    %r13d,%r13d
         :
         :	                relform = (Form_pg_class) palloc(len);
         :	                if (fread(relform, 1, len, fp) != len)
         :	                        goto read_failed;
         :
         :	                rel->rd_rel = relform;
    0.00 :	  76b637:       49 89 4e 30             mov    %rcx,0x30(%r14)
         :
         :	                /* initialize attribute tuple forms */
         :	                rel->rd_att = CreateTemplateTupleDesc(relform->relnatts,
    0.00 :	  76b63b:       0f be 71 74             movsbl 0x74(%rcx),%esi
    0.00 :	  76b63f:       0f bf 79 70             movswl 0x70(%rcx),%edi
    0.00 :	  76b643:       e8 a8 94 d0 ff          callq  474af0 <CreateTemplateTupleDesc>
    0.00 :	  76b648:       49 89 46 38             mov    %rax,0x38(%r14)
         :	                                                                                          relform->relhasoids);
         :	                rel->rd_att->tdrefcount = 1;    /* mark as refcounted */
    0.00 :	  76b64c:       c7 40 24 01 00 00 00    movl   $0x1,0x24(%rax)
         :
         :	                rel->rd_att->tdtypeid = relform->reltype;
    0.00 :	  76b653:       48 8b 8d b8 fb ff ff    mov    -0x448(%rbp),%rcx
    0.00 :	  76b65a:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  76b65e:       8b 41 44                mov    0x44(%rcx),%eax
    0.00 :	  76b661:       89 42 18                mov    %eax,0x18(%rdx)
         :	                rel->rd_att->tdtypmod = -1;             /* unnecessary, but... */
    0.00 :	  76b664:       49 8b 46 38             mov    0x38(%r14),%rax
    0.00 :	  76b668:       c7 40 1c ff ff ff ff    movl   $0xffffffff,0x1c(%rax)
         :
         :	                /* next read all the attribute tuple form data entries */
         :	                has_not_null = false;
         :	                for (i = 0; i < relform->relnatts; i++)
    0.00 :	  76b66f:       66 83 79 70 00          cmpw   $0x0,0x70(%rcx)
    0.00 :	  76b674:       7f 62                   jg     76b6d8 <load_relcache_init_file+0x288>
    0.00 :	  76b676:       e9 b5 00 00 00          jmpq   76b730 <load_relcache_init_file+0x2e0>
    0.00 :	  76b67b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                {
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :	                        if (len != ATTRIBUTE_FIXED_PART_SIZE)
    0.00 :	  76b680:       48 83 7d c0 6c          cmpq   $0x6c,-0x40(%rbp)
    0.00 :	  76b685:       0f 85 4d fe ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :	                        if (fread(rel->rd_att->attrs[i], 1, len, fp) != len)
    0.00 :	  76b68b:       49 8b 46 38             mov    0x38(%r14),%rax
    0.00 :	  76b68f:       4c 63 e3                movslq %ebx,%r12
    0.00 :	  76b692:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b695:       ba 6c 00 00 00          mov    $0x6c,%edx
    0.00 :	  76b69a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b69f:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  76b6a3:       4a 8b 3c e0             mov    (%rax,%r12,8),%rdi
    0.00 :	  76b6a7:       e8 e4 e5 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b6ac:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b6b0:       0f 85 22 fe ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        has_not_null |= rel->rd_att->attrs[i]->attnotnull;
    0.00 :	  76b6b6:       49 8b 46 38             mov    0x38(%r14),%rax
         :	                rel->rd_att->tdtypeid = relform->reltype;
         :	                rel->rd_att->tdtypmod = -1;             /* unnecessary, but... */
         :
         :	                /* next read all the attribute tuple form data entries */
         :	                has_not_null = false;
         :	                for (i = 0; i < relform->relnatts; i++)
    0.00 :	  76b6ba:       48 8b 95 b8 fb ff ff    mov    -0x448(%rbp),%rdx
    0.00 :	  76b6c1:       83 c3 01                add    $0x1,%ebx
         :	                        if (len != ATTRIBUTE_FIXED_PART_SIZE)
         :	                                goto read_failed;
         :	                        if (fread(rel->rd_att->attrs[i], 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        has_not_null |= rel->rd_att->attrs[i]->attnotnull;
    0.00 :	  76b6c4:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  76b6c8:       4a 8b 04 e0             mov    (%rax,%r12,8),%rax
    0.00 :	  76b6cc:       44 0a 68 5f             or     0x5f(%rax),%r13b
         :	                rel->rd_att->tdtypeid = relform->reltype;
         :	                rel->rd_att->tdtypmod = -1;             /* unnecessary, but... */
         :
         :	                /* next read all the attribute tuple form data entries */
         :	                has_not_null = false;
         :	                for (i = 0; i < relform->relnatts; i++)
    0.00 :	  76b6d0:       0f bf 42 70             movswl 0x70(%rdx),%eax
    0.00 :	  76b6d4:       39 d8                   cmp    %ebx,%eax
    0.00 :	  76b6d6:       7e 58                   jle    76b730 <load_relcache_init_file+0x2e0>
         :	                {
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b6d8:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  76b6dc:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b6df:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b6e4:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b6e9:       e8 a2 e5 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b6ee:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b6f2:       74 8c                   je     76b680 <load_relcache_init_file+0x230>
    0.00 :	  76b6f4:       e9 df fd ff ff          jmpq   76b4d8 <load_relcache_init_file+0x88>
    0.00 :	  76b6f9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        goto read_failed;
         :
         :	                /* allocate another relcache header */
         :	                if (num_rels >= max_rels)
         :	                {
         :	                        max_rels *= 2;
    0.00 :	  76b700:       01 c0                   add    %eax,%eax
         :	                        rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
    0.00 :	  76b702:       48 8b bd a0 fb ff ff    mov    -0x460(%rbp),%rdi
    0.00 :	  76b709:       48 63 f0                movslq %eax,%rsi
         :	                        goto read_failed;
         :
         :	                /* allocate another relcache header */
         :	                if (num_rels >= max_rels)
         :	                {
         :	                        max_rels *= 2;
    0.00 :	  76b70c:       89 85 ac fb ff ff       mov    %eax,-0x454(%rbp)
         :	                        rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
    0.00 :	  76b712:       48 c1 e6 03             shl    $0x3,%rsi
    0.00 :	  76b716:       e8 d5 d5 02 00          callq  798cf0 <repalloc>
    0.00 :	  76b71b:       48 89 85 a0 fb ff ff    mov    %rax,-0x460(%rbp)
    0.00 :	  76b722:       e9 7a fe ff ff          jmpq   76b5a1 <load_relcache_init_file+0x151>
    0.00 :	  76b727:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  76b72e:       00 00 
         :
         :	                        has_not_null |= rel->rd_att->attrs[i]->attnotnull;
         :	                }
         :
         :	                /* next read the access method specific field */
         :	                if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b730:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  76b734:       4c 89 f9                mov    %r15,%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/cache/relcache.c:4660
  100.00 :	  76b737:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b73c:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b741:       e8 4a e5 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b746:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b74a:       0f 85 88 fd ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                        goto read_failed;
         :	                if (len > 0)
    0.00 :	  76b750:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  76b754:       48 85 ff                test   %rdi,%rdi
    0.00 :	  76b757:       0f 85 26 01 00 00       jne    76b883 <load_relcache_init_file+0x433>
         :	                        if (len != VARSIZE(rel->rd_options))
         :	                                goto read_failed;               /* sanity check */
         :	                }
         :	                else
         :	                {
         :	                        rel->rd_options = NULL;
    0.00 :	  76b75d:       49 c7 86 98 00 00 00    movq   $0x0,0x98(%r14)
    0.00 :	  76b764:       00 00 00 00 
         :	                }
         :
         :	                /* mark not-null status */
         :	                if (has_not_null)
    0.00 :	  76b768:       45 84 ed                test   %r13b,%r13b
    0.00 :	  76b76b:       0f 85 43 04 00 00       jne    76bbb4 <load_relcache_init_file+0x764>
         :	                        constr->has_not_null = true;
         :	                        rel->rd_att->constr = constr;
         :	                }
         :
         :	                /* If it's an index, there's more to do */
         :	                if (rel->rd_rel->relkind == RELKIND_INDEX)
    0.00 :	  76b771:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  76b775:       80 78 6f 69             cmpb   $0x69,0x6f(%rax)
    0.00 :	  76b779:       0f 84 51 01 00 00       je     76b8d0 <load_relcache_init_file+0x480>
         :	                }
         :	                else
         :	                {
         :	                        /* Count nailed rels to ensure we have 'em all */
         :	                        if (rel->rd_isnailed)
         :	                                nailed_rels++;
    0.00 :	  76b77f:       41 80 7e 21 01          cmpb   $0x1,0x21(%r14)
    0.00 :	  76b784:       83 9d b0 fb ff ff ff    sbbl   $0xffffffff,-0x450(%rbp)
         :	                /*
         :	                 * Reset transient-state fields in the relcache entry
         :	                 */
         :	                rel->rd_smgr = NULL;
         :	                if (rel->rd_isnailed)
         :	                        rel->rd_refcnt = 1;
    0.00 :	  76b78b:       31 c0                   xor    %eax,%eax
    0.00 :	  76b78d:       41 80 7e 21 00          cmpb   $0x0,0x21(%r14)
         :	                 * format is complex and subject to change).  They must be rebuilt if
         :	                 * needed by RelationCacheInitializePhase3.  This is not expected to
         :	                 * be a big performance hit since few system catalogs have such. Ditto
         :	                 * for index expressions, predicates, exclusion info, and FDW info.
         :	                 */
         :	                rel->rd_rules = NULL;
    0.00 :	  76b792:       49 c7 46 50 00 00 00    movq   $0x0,0x50(%r14)
    0.00 :	  76b799:       00 
         :	                rel->rd_rulescxt = NULL;
    0.00 :	  76b79a:       49 c7 46 58 00 00 00    movq   $0x0,0x58(%r14)
    0.00 :	  76b7a1:       00 
         :	                rel->trigdesc = NULL;
    0.00 :	  76b7a2:       49 c7 46 60 00 00 00    movq   $0x0,0x60(%r14)
    0.00 :	  76b7a9:       00 
         :	                /*
         :	                 * Recompute lock and physical addressing info.  This is needed in
         :	                 * case the pg_internal.init file was copied from some other database
         :	                 * by CREATE DATABASE.
         :	                 */
         :	                RelationInitLockInfo(rel);
    0.00 :	  76b7aa:       4c 89 f7                mov    %r14,%rdi
         :	                 * for index expressions, predicates, exclusion info, and FDW info.
         :	                 */
         :	                rel->rd_rules = NULL;
         :	                rel->rd_rulescxt = NULL;
         :	                rel->trigdesc = NULL;
         :	                rel->rsdesc = NULL;
    0.00 :	  76b7ad:       49 c7 46 68 00 00 00    movq   $0x0,0x68(%r14)
    0.00 :	  76b7b4:       00 
         :	                rel->rd_indexprs = NIL;
    0.00 :	  76b7b5:       49 c7 86 f0 00 00 00    movq   $0x0,0xf0(%r14)
    0.00 :	  76b7bc:       00 00 00 00 
         :	                rel->rd_indpred = NIL;
    0.00 :	  76b7c0:       49 c7 86 f8 00 00 00    movq   $0x0,0xf8(%r14)
    0.00 :	  76b7c7:       00 00 00 00 
         :	                rel->rd_exclops = NULL;
    0.00 :	  76b7cb:       49 c7 86 00 01 00 00    movq   $0x0,0x100(%r14)
    0.00 :	  76b7d2:       00 00 00 00 
         :	                /*
         :	                 * Reset transient-state fields in the relcache entry
         :	                 */
         :	                rel->rd_smgr = NULL;
         :	                if (rel->rd_isnailed)
         :	                        rel->rd_refcnt = 1;
    0.00 :	  76b7d6:       0f 95 c0                setne  %al
         :	                rel->trigdesc = NULL;
         :	                rel->rsdesc = NULL;
         :	                rel->rd_indexprs = NIL;
         :	                rel->rd_indpred = NIL;
         :	                rel->rd_exclops = NULL;
         :	                rel->rd_exclprocs = NULL;
    0.00 :	  76b7d9:       49 c7 86 08 01 00 00    movq   $0x0,0x108(%r14)
    0.00 :	  76b7e0:       00 00 00 00 
         :	                rel->rd_exclstrats = NULL;
    0.00 :	  76b7e4:       49 c7 86 10 01 00 00    movq   $0x0,0x110(%r14)
    0.00 :	  76b7eb:       00 00 00 00 
         :	                rel->rd_fdwroutine = NULL;
    0.00 :	  76b7ef:       49 c7 86 28 01 00 00    movq   $0x0,0x128(%r14)
    0.00 :	  76b7f6:       00 00 00 00 
         :
         :	                /*
         :	                 * Reset transient-state fields in the relcache entry
         :	                 */
         :	                rel->rd_smgr = NULL;
    0.00 :	  76b7fa:       49 c7 46 10 00 00 00    movq   $0x0,0x10(%r14)
    0.00 :	  76b801:       00 
         :	                if (rel->rd_isnailed)
         :	                        rel->rd_refcnt = 1;
    0.00 :	  76b802:       41 89 46 18             mov    %eax,0x18(%r14)
         :	                else
         :	                        rel->rd_refcnt = 0;
         :	                rel->rd_indexvalid = 0;
    0.00 :	  76b806:       41 c6 46 23 00          movb   $0x0,0x23(%r14)
         :	                rel->rd_indexlist = NIL;
    0.00 :	  76b80b:       49 c7 46 70 00 00 00    movq   $0x0,0x70(%r14)
    0.00 :	  76b812:       00 
         :	                rel->rd_oidindex = InvalidOid;
    0.00 :	  76b813:       41 c7 46 78 00 00 00    movl   $0x0,0x78(%r14)
    0.00 :	  76b81a:       00 
         :	                rel->rd_replidindex = InvalidOid;
    0.00 :	  76b81b:       41 c7 46 7c 00 00 00    movl   $0x0,0x7c(%r14)
    0.00 :	  76b822:       00 
         :	                rel->rd_indexattr = NULL;
    0.00 :	  76b823:       49 c7 86 80 00 00 00    movq   $0x0,0x80(%r14)
    0.00 :	  76b82a:       00 00 00 00 
         :	                rel->rd_keyattr = NULL;
    0.00 :	  76b82e:       49 c7 86 88 00 00 00    movq   $0x0,0x88(%r14)
    0.00 :	  76b835:       00 00 00 00 
         :	                rel->rd_idattr = NULL;
    0.00 :	  76b839:       49 c7 86 90 00 00 00    movq   $0x0,0x90(%r14)
    0.00 :	  76b840:       00 00 00 00 
         :	                rel->rd_createSubid = InvalidSubTransactionId;
    0.00 :	  76b844:       41 c7 46 24 00 00 00    movl   $0x0,0x24(%r14)
    0.00 :	  76b84b:       00 
         :	                rel->rd_newRelfilenodeSubid = InvalidSubTransactionId;
    0.00 :	  76b84c:       41 c7 46 28 00 00 00    movl   $0x0,0x28(%r14)
    0.00 :	  76b853:       00 
         :	                rel->rd_amcache = NULL;
    0.00 :	  76b854:       49 c7 86 18 01 00 00    movq   $0x0,0x118(%r14)
    0.00 :	  76b85b:       00 00 00 00 
         :	                MemSet(&rel->pgstat_info, 0, sizeof(rel->pgstat_info));
    0.00 :	  76b85f:       49 c7 86 38 01 00 00    movq   $0x0,0x138(%r14)
    0.00 :	  76b866:       00 00 00 00 
         :	                {
         :	                        max_rels *= 2;
         :	                        rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
         :	                }
         :
         :	                rel = rels[num_rels++] = (Relation) palloc(len);
    0.00 :	  76b86a:       83 85 a8 fb ff ff 01    addl   $0x1,-0x458(%rbp)
         :	                /*
         :	                 * Recompute lock and physical addressing info.  This is needed in
         :	                 * case the pg_internal.init file was copied from some other database
         :	                 * by CREATE DATABASE.
         :	                 */
         :	                RelationInitLockInfo(rel);
    0.00 :	  76b871:       e8 4a c0 f1 ff          callq  6878c0 <RelationInitLockInfo>
         :	                RelationInitPhysicalAddr(rel);
    0.00 :	  76b876:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  76b879:       e8 42 f8 ff ff          callq  76b0c0 <RelationInitPhysicalAddr>
         :	        }
    0.00 :	  76b87e:       e9 de fc ff ff          jmpq   76b561 <load_relcache_init_file+0x111>
         :	                /* next read the access method specific field */
         :	                if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                        goto read_failed;
         :	                if (len > 0)
         :	                {
         :	                        rel->rd_options = palloc(len);
    0.00 :	  76b883:       e8 c8 d4 02 00          callq  798d50 <palloc>
    0.00 :	  76b888:       49 89 86 98 00 00 00    mov    %rax,0x98(%r14)
         :	                        if (fread(rel->rd_options, 1, len, fp) != len)
    0.00 :	  76b88f:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
         :	                /* next read the access method specific field */
         :	                if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                        goto read_failed;
         :	                if (len > 0)
         :	                {
         :	                        rel->rd_options = palloc(len);
    0.00 :	  76b893:       48 89 c7                mov    %rax,%rdi
         :	                        if (fread(rel->rd_options, 1, len, fp) != len)
    0.00 :	  76b896:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b899:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b89e:       e8 ed e3 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b8a3:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b8a7:       48 89 c2                mov    %rax,%rdx
    0.00 :	  76b8aa:       0f 85 28 fc ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :	                        if (len != VARSIZE(rel->rd_options))
    0.00 :	  76b8b0:       49 8b 86 98 00 00 00    mov    0x98(%r14),%rax
    0.00 :	  76b8b7:       8b 00                   mov    (%rax),%eax
    0.00 :	  76b8b9:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  76b8bc:       89 c0                   mov    %eax,%eax
    0.00 :	  76b8be:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  76b8c1:       0f 84 a1 fe ff ff       je     76b768 <load_relcache_init_file+0x318>
    0.00 :	  76b8c7:       e9 0c fc ff ff          jmpq   76b4d8 <load_relcache_init_file+0x88>
    0.00 :	  76b8cc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        /* Count nailed indexes to ensure we have 'em all */
         :	                        if (rel->rd_isnailed)
         :	                                nailed_indexes++;
         :
         :	                        /* next, read the pg_index tuple */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b8d0:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :	                        int16      *indoption;
         :	                        Oid                *indcollation;
         :
         :	                        /* Count nailed indexes to ensure we have 'em all */
         :	                        if (rel->rd_isnailed)
         :	                                nailed_indexes++;
    0.00 :	  76b8d4:       41 80 7e 21 01          cmpb   $0x1,0x21(%r14)
         :
         :	                        /* next, read the pg_index tuple */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b8d9:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b8dc:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b8e1:       be 01 00 00 00          mov    $0x1,%esi
         :	                        int16      *indoption;
         :	                        Oid                *indcollation;
         :
         :	                        /* Count nailed indexes to ensure we have 'em all */
         :	                        if (rel->rd_isnailed)
         :	                                nailed_indexes++;
    0.00 :	  76b8e6:       83 9d b4 fb ff ff ff    sbbl   $0xffffffff,-0x44c(%rbp)
         :
         :	                        /* next, read the pg_index tuple */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b8ed:       e8 9e e3 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b8f2:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b8f6:       0f 85 dc fb ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_indextuple = (HeapTuple) palloc(len);
    0.00 :	  76b8fc:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  76b900:       e8 4b d4 02 00          callq  798d50 <palloc>
    0.00 :	  76b905:       49 89 86 a8 00 00 00    mov    %rax,0xa8(%r14)
         :	                        if (fread(rel->rd_indextuple, 1, len, fp) != len)
    0.00 :	  76b90c:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
         :
         :	                        /* next, read the pg_index tuple */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        rel->rd_indextuple = (HeapTuple) palloc(len);
    0.00 :	  76b910:       48 89 c7                mov    %rax,%rdi
         :	                        if (fread(rel->rd_indextuple, 1, len, fp) != len)
    0.00 :	  76b913:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b916:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b91b:       e8 70 e3 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b920:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b924:       0f 85 ae fb ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        /* Fix up internal pointers in the tuple -- see heap_copytuple */
         :	                        rel->rd_indextuple->t_data = (HeapTupleHeader) ((char *) rel->rd_indextuple + HEAPTUPLESIZE);
    0.00 :	  76b92a:       49 8b 96 a8 00 00 00    mov    0xa8(%r14),%rdx
         :	                        rel->rd_index = (Form_pg_index) GETSTRUCT(rel->rd_indextuple);
         :
         :	                        /* next, read the access method tuple form */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b931:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  76b935:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b938:       be 01 00 00 00          mov    $0x1,%esi
         :	                        rel->rd_indextuple = (HeapTuple) palloc(len);
         :	                        if (fread(rel->rd_indextuple, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        /* Fix up internal pointers in the tuple -- see heap_copytuple */
         :	                        rel->rd_indextuple->t_data = (HeapTupleHeader) ((char *) rel->rd_indextuple + HEAPTUPLESIZE);
    0.00 :	  76b93d:       48 8d 42 18             lea    0x18(%rdx),%rax
    0.00 :	  76b941:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                        rel->rd_index = (Form_pg_index) GETSTRUCT(rel->rd_indextuple);
    0.00 :	  76b945:       49 8b 86 a8 00 00 00    mov    0xa8(%r14),%rax
    0.00 :	  76b94c:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  76b950:       0f b6 50 16             movzbl 0x16(%rax),%edx
    0.00 :	  76b954:       48 01 d0                add    %rdx,%rax
         :
         :	                        /* next, read the access method tuple form */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b957:       ba 08 00 00 00          mov    $0x8,%edx
         :	                        if (fread(rel->rd_indextuple, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        /* Fix up internal pointers in the tuple -- see heap_copytuple */
         :	                        rel->rd_indextuple->t_data = (HeapTupleHeader) ((char *) rel->rd_indextuple + HEAPTUPLESIZE);
         :	                        rel->rd_index = (Form_pg_index) GETSTRUCT(rel->rd_indextuple);
    0.00 :	  76b95c:       49 89 86 a0 00 00 00    mov    %rax,0xa0(%r14)
         :
         :	                        /* next, read the access method tuple form */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b963:       e8 28 e3 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b968:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b96c:       0f 85 66 fb ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        am = (Form_pg_am) palloc(len);
    0.00 :	  76b972:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  76b976:       e8 d5 d3 02 00          callq  798d50 <palloc>
         :	                        if (fread(am, 1, len, fp) != len)
    0.00 :	  76b97b:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76b97f:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b982:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76b987:       48 89 c7                mov    %rax,%rdi
         :
         :	                        /* next, read the access method tuple form */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        am = (Form_pg_am) palloc(len);
    0.00 :	  76b98a:       49 89 c5                mov    %rax,%r13
         :	                        if (fread(am, 1, len, fp) != len)
    0.00 :	  76b98d:       e8 fe e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b992:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76b996:       0f 85 3c fb ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :	                        rel->rd_am = am;
    0.00 :	  76b99c:       4d 89 ae b0 00 00 00    mov    %r13,0xb0(%r14)
         :
         :	                        /*
         :	                         * prepare index info context --- parameters should match
         :	                         * RelationInitIndexAccessInfo
         :	                         */
         :	                        indexcxt = AllocSetContextCreate(CacheMemoryContext,
    0.00 :	  76b9a3:       49 8b 76 30             mov    0x30(%r14),%rsi
    0.00 :	  76b9a7:       31 d2                   xor    %edx,%edx
    0.00 :	  76b9a9:       48 8b 3d d0 ee 44 00    mov    0x44eed0(%rip),%rdi        # bba880 <CacheMemoryContext>
    0.00 :	  76b9b0:       41 b8 00 20 00 00       mov    $0x2000,%r8d
    0.00 :	  76b9b6:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  76b9bb:       e8 d0 c5 02 00          callq  797f90 <AllocSetContextCreate>
         :	                                                                                         ALLOCSET_SMALL_INITSIZE,
         :	                                                                                         ALLOCSET_SMALL_MAXSIZE);
         :	                        rel->rd_indexcxt = indexcxt;
         :
         :	                        /* next, read the vector of opfamily OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b9c0:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :	                        indexcxt = AllocSetContextCreate(CacheMemoryContext,
         :	                                                                                         RelationGetRelationName(rel),
         :	                                                                                         ALLOCSET_SMALL_MINSIZE,
         :	                                                                                         ALLOCSET_SMALL_INITSIZE,
         :	                                                                                         ALLOCSET_SMALL_MAXSIZE);
         :	                        rel->rd_indexcxt = indexcxt;
    0.00 :	  76b9c4:       49 89 86 b8 00 00 00    mov    %rax,0xb8(%r14)
         :
         :	                        /* next, read the vector of opfamily OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b9cb:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b9ce:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76b9d3:       be 01 00 00 00          mov    $0x1,%esi
         :
         :	                        /*
         :	                         * prepare index info context --- parameters should match
         :	                         * RelationInitIndexAccessInfo
         :	                         */
         :	                        indexcxt = AllocSetContextCreate(CacheMemoryContext,
    0.00 :	  76b9d8:       49 89 c4                mov    %rax,%r12
         :	                                                                                         ALLOCSET_SMALL_INITSIZE,
         :	                                                                                         ALLOCSET_SMALL_MAXSIZE);
         :	                        rel->rd_indexcxt = indexcxt;
         :
         :	                        /* next, read the vector of opfamily OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76b9db:       e8 b0 e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76b9e0:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76b9e4:       0f 85 ee fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        opfamily = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76b9ea:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  76b9ee:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76b9f1:       e8 9a d4 02 00          callq  798e90 <MemoryContextAlloc>
         :	                        if (fread(opfamily, 1, len, fp) != len)
    0.00 :	  76b9f6:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76b9fa:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76b9fd:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76ba02:       48 89 c7                mov    %rax,%rdi
         :
         :	                        /* next, read the vector of opfamily OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        opfamily = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76ba05:       48 89 c3                mov    %rax,%rbx
         :	                        if (fread(opfamily, 1, len, fp) != len)
    0.00 :	  76ba08:       e8 83 e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76ba0d:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76ba11:       0f 85 c1 fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_opfamily = opfamily;
         :
         :	                        /* next, read the vector of opcintype OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76ba17:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :
         :	                        opfamily = (Oid *) MemoryContextAlloc(indexcxt, len);
         :	                        if (fread(opfamily, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        rel->rd_opfamily = opfamily;
    0.00 :	  76ba1b:       49 89 9e c8 00 00 00    mov    %rbx,0xc8(%r14)
         :
         :	                        /* next, read the vector of opcintype OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76ba22:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76ba25:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76ba2a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76ba2f:       e8 5c e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76ba34:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76ba38:       0f 85 9a fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        opcintype = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76ba3e:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  76ba42:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76ba45:       e8 46 d4 02 00          callq  798e90 <MemoryContextAlloc>
         :	                        if (fread(opcintype, 1, len, fp) != len)
    0.00 :	  76ba4a:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76ba4e:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76ba51:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76ba56:       48 89 c7                mov    %rax,%rdi
         :
         :	                        /* next, read the vector of opcintype OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        opcintype = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76ba59:       48 89 c3                mov    %rax,%rbx
         :	                        if (fread(opcintype, 1, len, fp) != len)
    0.00 :	  76ba5c:       e8 2f e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76ba61:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76ba65:       0f 85 6d fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_opcintype = opcintype;
         :
         :	                        /* next, read the vector of support procedure OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76ba6b:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :
         :	                        opcintype = (Oid *) MemoryContextAlloc(indexcxt, len);
         :	                        if (fread(opcintype, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        rel->rd_opcintype = opcintype;
    0.00 :	  76ba6f:       49 89 9e d0 00 00 00    mov    %rbx,0xd0(%r14)
         :
         :	                        /* next, read the vector of support procedure OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76ba76:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76ba79:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76ba7e:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76ba83:       e8 08 e2 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76ba88:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76ba8c:       0f 85 46 fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :	                        support = (RegProcedure *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76ba92:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  76ba96:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76ba99:       e8 f2 d3 02 00          callq  798e90 <MemoryContextAlloc>
         :	                        if (fread(support, 1, len, fp) != len)
    0.00 :	  76ba9e:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76baa2:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76baa5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76baaa:       48 89 c7                mov    %rax,%rdi
         :	                        rel->rd_opcintype = opcintype;
         :
         :	                        /* next, read the vector of support procedure OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :	                        support = (RegProcedure *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76baad:       48 89 c3                mov    %rax,%rbx
         :	                        if (fread(support, 1, len, fp) != len)
    0.00 :	  76bab0:       e8 db e1 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76bab5:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76bab9:       0f 85 19 fa ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_support = support;
         :
         :	                        /* next, read the vector of collation OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76babf:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :	                                goto read_failed;
         :	                        support = (RegProcedure *) MemoryContextAlloc(indexcxt, len);
         :	                        if (fread(support, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        rel->rd_support = support;
    0.00 :	  76bac3:       49 89 9e d8 00 00 00    mov    %rbx,0xd8(%r14)
         :
         :	                        /* next, read the vector of collation OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76baca:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76bacd:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76bad2:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76bad7:       e8 b4 e1 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76badc:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76bae0:       0f 85 f2 f9 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        indcollation = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76bae6:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  76baea:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76baed:       e8 9e d3 02 00          callq  798e90 <MemoryContextAlloc>
         :	                        if (fread(indcollation, 1, len, fp) != len)
    0.00 :	  76baf2:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76baf6:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76baf9:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76bafe:       48 89 c7                mov    %rax,%rdi
         :
         :	                        /* next, read the vector of collation OIDs */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        indcollation = (Oid *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76bb01:       48 89 c3                mov    %rax,%rbx
         :	                        if (fread(indcollation, 1, len, fp) != len)
    0.00 :	  76bb04:       e8 87 e1 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76bb09:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76bb0d:       0f 85 c5 f9 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_indcollation = indcollation;
         :
         :	                        /* finally, read the vector of indoption values */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76bb13:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :
         :	                        indcollation = (Oid *) MemoryContextAlloc(indexcxt, len);
         :	                        if (fread(indcollation, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        rel->rd_indcollation = indcollation;
    0.00 :	  76bb17:       49 89 9e 20 01 00 00    mov    %rbx,0x120(%r14)
         :
         :	                        /* finally, read the vector of indoption values */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
    0.00 :	  76bb1e:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76bb21:       ba 08 00 00 00          mov    $0x8,%edx
    0.00 :	  76bb26:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76bb2b:       e8 60 e1 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76bb30:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  76bb34:       0f 85 9e f9 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        indoption = (int16 *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76bb3a:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  76bb3e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76bb41:       e8 4a d3 02 00          callq  798e90 <MemoryContextAlloc>
         :	                        if (fread(indoption, 1, len, fp) != len)
    0.00 :	  76bb46:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  76bb4a:       4c 89 f9                mov    %r15,%rcx
    0.00 :	  76bb4d:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  76bb52:       48 89 c7                mov    %rax,%rdi
         :
         :	                        /* finally, read the vector of indoption values */
         :	                        if (fread(&len, 1, sizeof(len), fp) != sizeof(len))
         :	                                goto read_failed;
         :
         :	                        indoption = (int16 *) MemoryContextAlloc(indexcxt, len);
    0.00 :	  76bb55:       48 89 c3                mov    %rax,%rbx
         :	                        if (fread(indoption, 1, len, fp) != len)
    0.00 :	  76bb58:       e8 33 e1 cf ff          callq  469c90 <fread@plt>
    0.00 :	  76bb5d:       48 3b 45 c0             cmp    -0x40(%rbp),%rax
    0.00 :	  76bb61:       0f 85 71 f9 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	                                goto read_failed;
         :
         :	                        rel->rd_indoption = indoption;
         :
         :	                        /* set up zeroed fmgr-info vectors */
         :	                        rel->rd_aminfo = (RelationAmInfo *)
    0.00 :	  76bb67:       be b0 01 00 00          mov    $0x1b0,%esi
    0.00 :	  76bb6c:       4c 89 e7                mov    %r12,%rdi
         :
         :	                        indoption = (int16 *) MemoryContextAlloc(indexcxt, len);
         :	                        if (fread(indoption, 1, len, fp) != len)
         :	                                goto read_failed;
         :
         :	                        rel->rd_indoption = indoption;
    0.00 :	  76bb6f:       49 89 9e e8 00 00 00    mov    %rbx,0xe8(%r14)
         :
         :	                        /* set up zeroed fmgr-info vectors */
         :	                        rel->rd_aminfo = (RelationAmInfo *)
    0.00 :	  76bb76:       e8 a5 d4 02 00          callq  799020 <MemoryContextAllocZero>
    0.00 :	  76bb7b:       49 89 86 c0 00 00 00    mov    %rax,0xc0(%r14)
         :	                                MemoryContextAllocZero(indexcxt, sizeof(RelationAmInfo));
         :	                        nsupport = relform->relnatts * am->amsupport;
         :	                        rel->rd_supportinfo = (FmgrInfo *)
    0.00 :	  76bb82:       48 8b 8d b8 fb ff ff    mov    -0x448(%rbp),%rcx
    0.00 :	  76bb89:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  76bb8c:       41 0f bf 75 42          movswl 0x42(%r13),%esi
    0.00 :	  76bb91:       0f bf 41 70             movswl 0x70(%rcx),%eax
    0.00 :	  76bb95:       0f af f0                imul   %eax,%esi
    0.00 :	  76bb98:       48 63 f6                movslq %esi,%rsi
    0.00 :	  76bb9b:       48 8d 34 76             lea    (%rsi,%rsi,2),%rsi
    0.00 :	  76bb9f:       48 c1 e6 04             shl    $0x4,%rsi
    0.00 :	  76bba3:       e8 78 d4 02 00          callq  799020 <MemoryContextAllocZero>
    0.00 :	  76bba8:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
    0.00 :	  76bbaf:       e9 d7 fb ff ff          jmpq   76b78b <load_relcache_init_file+0x33b>
         :	                }
         :
         :	                /* mark not-null status */
         :	                if (has_not_null)
         :	                {
         :	                        TupleConstr *constr = (TupleConstr *) palloc0(sizeof(TupleConstr));
    0.00 :	  76bbb4:       bf 18 00 00 00          mov    $0x18,%edi
    0.00 :	  76bbb9:       e8 b2 d3 02 00          callq  798f70 <palloc0>
         :
         :	                        constr->has_not_null = true;
    0.00 :	  76bbbe:       c6 40 14 01             movb   $0x1,0x14(%rax)
         :	                        rel->rd_att->constr = constr;
    0.00 :	  76bbc2:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  76bbc6:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	  76bbca:       e9 a2 fb ff ff          jmpq   76b771 <load_relcache_init_file+0x321>
         :
         :	                /* first read the relation descriptor length */
         :	                nread = fread(&len, 1, sizeof(len), fp);
         :	                if (nread != sizeof(len))
         :	                {
         :	                        if (nread == 0)
    0.00 :	  76bbcf:       48 85 c0                test   %rax,%rax
    0.00 :	  76bbd2:       0f 85 00 f9 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	        /*
         :	         * We reached the end of the init file without apparent problem. Did we
         :	         * get the right number of nailed items?  (This is a useful crosscheck in
         :	         * case the set of critical rels or indexes changes.)
         :	         */
         :	        if (shared)
    0.00 :	  76bbd8:       80 bd 9f fb ff ff 00    cmpb   $0x0,-0x461(%rbp)
    0.00 :	  76bbdf:       0f 84 23 01 00 00       je     76bd08 <load_relcache_init_file+0x8b8>
         :	        {
         :	                if (nailed_rels != NUM_CRITICAL_SHARED_RELS ||
    0.00 :	  76bbe5:       83 bd b0 fb ff ff 03    cmpl   $0x3,-0x450(%rbp)
    0.00 :	  76bbec:       0f 85 e6 f8 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
    0.00 :	  76bbf2:       83 bd b4 fb ff ff 05    cmpl   $0x5,-0x44c(%rbp)
    0.00 :	  76bbf9:       0f 85 d9 f8 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
         :	        /*
         :	         * OK, all appears well.
         :	         *
         :	         * Now insert all the new relcache entries into the cache.
         :	         */
         :	        for (relno = 0; relno < num_rels; relno++)
    0.00 :	  76bbff:       8b 85 a8 fb ff ff       mov    -0x458(%rbp),%eax
    0.00 :	  76bc05:       85 c0                   test   %eax,%eax
    0.00 :	  76bc07:       0f 8e cd 00 00 00       jle    76bcda <load_relcache_init_file+0x88a>
    0.00 :	  76bc0d:       4c 8b a5 a0 fb ff ff    mov    -0x460(%rbp),%r12
    0.00 :	  76bc14:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  76bc17:       eb 3b                   jmp    76bc54 <load_relcache_init_file+0x804>
         :	        {
         :	                RelationCacheInsert(rels[relno], false);
    0.00 :	  76bc19:       48 8b 58 08             mov    0x8(%rax),%rbx
    0.00 :	  76bc1d:       49 8b 04 24             mov    (%r12),%rax
    0.00 :	  76bc21:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	  76bc25:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  76bc28:       85 c0                   test   %eax,%eax
    0.00 :	  76bc2a:       74 74                   je     76bca0 <load_relcache_init_file+0x850>
    0.00 :	  76bc2c:       8b 05 0a cf 3f 00       mov    0x3fcf0a(%rip),%eax        # b68b3c <Mode>
    0.00 :	  76bc32:       85 c0                   test   %eax,%eax
    0.00 :	  76bc34:       75 76                   jne    76bcac <load_relcache_init_file+0x85c>
         :	                /* also make a list of their OIDs, for RelationIdIsInInitFile */
         :	                if (!shared)
    0.00 :	  76bc36:       80 bd 9f fb ff ff 00    cmpb   $0x0,-0x461(%rbp)
    0.00 :	  76bc3d:       74 45                   je     76bc84 <load_relcache_init_file+0x834>
         :	        /*
         :	         * OK, all appears well.
         :	         *
         :	         * Now insert all the new relcache entries into the cache.
         :	         */
         :	        for (relno = 0; relno < num_rels; relno++)
    0.00 :	  76bc3f:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  76bc43:       49 83 c4 08             add    $0x8,%r12
    0.00 :	  76bc47:       44 3b ad a8 fb ff ff    cmp    -0x458(%rbp),%r13d
    0.00 :	  76bc4e:       0f 8d 86 00 00 00       jge    76bcda <load_relcache_init_file+0x88a>
         :	        {
         :	                RelationCacheInsert(rels[relno], false);
    0.00 :	  76bc54:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  76bc58:       48 8b 3d c1 c8 44 00    mov    0x44c8c1(%rip),%rdi        # bb8520 <RelationIdCache>
    0.00 :	  76bc5f:       48 8d 4d c0             lea    -0x40(%rbp),%rcx
    0.00 :	  76bc63:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  76bc68:       48 83 c6 40             add    $0x40,%rsi
    0.00 :	  76bc6c:       e8 2f 8a 01 00          callq  7846a0 <hash_search>
    0.00 :	  76bc71:       80 7d c0 00             cmpb   $0x0,-0x40(%rbp)
    0.00 :	  76bc75:       48 89 c2                mov    %rax,%rdx
    0.00 :	  76bc78:       75 9f                   jne    76bc19 <load_relcache_init_file+0x7c9>
    0.00 :	  76bc7a:       49 8b 04 24             mov    (%r12),%rax
    0.00 :	  76bc7e:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	  76bc82:       eb b2                   jmp    76bc36 <load_relcache_init_file+0x7e6>
         :	                /* also make a list of their OIDs, for RelationIdIsInInitFile */
         :	                if (!shared)
         :	                        initFileRelationIds = lcons_oid(RelationGetRelid(rels[relno]),
    0.00 :	  76bc84:       49 8b 04 24             mov    (%r12),%rax
    0.00 :	  76bc88:       48 8b 35 59 c8 44 00    mov    0x44c859(%rip),%rsi        # bb84e8 <initFileRelationIds>
    0.00 :	  76bc8f:       8b 78 40                mov    0x40(%rax),%edi
    0.00 :	  76bc92:       e8 f9 5a e7 ff          callq  5e1790 <lcons_oid>
    0.00 :	  76bc97:       48 89 05 4a c8 44 00    mov    %rax,0x44c84a(%rip)        # bb84e8 <initFileRelationIds>
    0.00 :	  76bc9e:       eb 9f                   jmp    76bc3f <load_relcache_init_file+0x7ef>
         :	         *
         :	         * Now insert all the new relcache entries into the cache.
         :	         */
         :	        for (relno = 0; relno < num_rels; relno++)
         :	        {
         :	                RelationCacheInsert(rels[relno], false);
    0.00 :	  76bca0:       31 f6                   xor    %esi,%esi
    0.00 :	  76bca2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  76bca5:       e8 c6 f5 ff ff          callq  76b270 <RelationDestroyRelation>
    0.00 :	  76bcaa:       eb 8a                   jmp    76bc36 <load_relcache_init_file+0x7e6>
    0.00 :	  76bcac:       ba 50 15 8d 00          mov    $0x8d1550,%edx
    0.00 :	  76bcb1:       be 0f 13 00 00          mov    $0x130f,%esi
    0.00 :	  76bcb6:       bf c8 d7 8c 00          mov    $0x8cd7c8,%edi
    0.00 :	  76bcbb:       e8 60 f7 00 00          callq  77b420 <elog_start>
    0.00 :	  76bcc0:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  76bcc4:       be 78 da 8c 00          mov    $0x8cda78,%esi
    0.00 :	  76bcc9:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  76bcce:       31 c0                   xor    %eax,%eax
    0.00 :	  76bcd0:       e8 5b f5 00 00          callq  77b230 <elog_finish>
    0.00 :	  76bcd5:       e9 5c ff ff ff          jmpq   76bc36 <load_relcache_init_file+0x7e6>
         :	                if (!shared)
         :	                        initFileRelationIds = lcons_oid(RelationGetRelid(rels[relno]),
         :	                                                                                        initFileRelationIds);
         :	        }
         :
         :	        pfree(rels);
    0.00 :	  76bcda:       48 8b bd a0 fb ff ff    mov    -0x460(%rbp),%rdi
    0.00 :	  76bce1:       e8 9a ce 02 00          callq  798b80 <pfree>
         :	        FreeFile(fp);
    0.00 :	  76bce6:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  76bce9:       e8 62 c9 f0 ff          callq  678650 <FreeFile>
         :
         :	        if (shared)
    0.00 :	  76bcee:       80 bd 9f fb ff ff 00    cmpb   $0x0,-0x461(%rbp)
    0.00 :	  76bcf5:       74 39                   je     76bd30 <load_relcache_init_file+0x8e0>
         :	                criticalSharedRelcachesBuilt = true;
    0.00 :	  76bcf7:       c6 05 e3 c7 44 00 01    movb   $0x1,0x44c7e3(%rip)        # bb84e1 <criticalSharedRelcachesBuilt>
    0.00 :	  76bcfe:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  76bd03:       e9 e6 f7 ff ff          jmpq   76b4ee <load_relcache_init_file+0x9e>
         :	                        nailed_indexes != NUM_CRITICAL_SHARED_INDEXES)
         :	                        goto read_failed;
         :	        }
         :	        else
         :	        {
         :	                if (nailed_rels != NUM_CRITICAL_LOCAL_RELS ||
    0.00 :	  76bd08:       83 bd b0 fb ff ff 04    cmpl   $0x4,-0x450(%rbp)
    0.00 :	  76bd0f:       0f 85 c3 f7 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
    0.00 :	  76bd15:       83 bd b4 fb ff ff 07    cmpl   $0x7,-0x44c(%rbp)
    0.00 :	  76bd1c:       0f 85 b6 f7 ff ff       jne    76b4d8 <load_relcache_init_file+0x88>
    0.00 :	  76bd22:       e9 d8 fe ff ff          jmpq   76bbff <load_relcache_init_file+0x7af>
    0.00 :	  76bd27:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  76bd2e:       00 00 
         :	        FreeFile(fp);
         :
         :	        if (shared)
         :	                criticalSharedRelcachesBuilt = true;
         :	        else
         :	                criticalRelcachesBuilt = true;
    0.00 :	  76bd30:       c6 05 a9 c7 44 00 01    movb   $0x1,0x44c7a9(%rip)        # bb84e0 <criticalRelcachesBuilt>
    0.00 :	  76bd37:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  76bd3c:       e9 ad f7 ff ff          jmpq   76b4ee <load_relcache_init_file+0x9e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:614
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782de0 <CHashDelete>:
         :	 * Delete from a concurrent hash table.  entry need only contain the key field.
         :	 * Returns true if we find and delete a matching key and false otherwise.
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
    0.00 :	  782de0:       55                      push   %rbp
    0.00 :	  782de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782de4:       41 57                   push   %r15
    0.00 :	  782de6:       41 56                   push   %r14
    0.00 :	  782de8:       49 89 f6                mov    %rsi,%r14
    0.00 :	  782deb:       41 55                   push   %r13
    0.00 :	  782ded:       41 54                   push   %r12
    0.00 :	  782def:       53                      push   %rbx
    0.00 :	  782df0:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  782df3:       48 83 ec 58             sub    $0x58,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782df7:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782dfb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  782dfe:       e8 4d d5 d0 ff          callq  490350 <hash_any>
    0.00 :	  782e03:       41 89 c5                mov    %eax,%r13d
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e06:       8b 43 10                mov    0x10(%rbx),%eax
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e09:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e0d:       44 21 e8                and    %r13d,%eax
    0.00 :	  782e10:       89 45 8c                mov    %eax,-0x74(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e13:       8b 55 8c                mov    -0x74(%rbp),%edx
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782e16:       89 c0                   mov    %eax,%eax
    0.00 :	  782e18:       4c 8d 24 85 00 00 00    lea    0x0(,%rax,4),%r12
    0.00 :	  782e1f:       00 
    0.00 :	  782e20:       4c 03 63 20             add    0x20(%rbx),%r12
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e24:       d3 ea                   shr    %cl,%edx
    0.00 :	  782e26:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  782e2a:       89 d0                   mov    %edx,%eax
    0.00 :	  782e2c:       d3 e8                   shr    %cl,%eax
    0.00 :	  782e2e:       01 d0                   add    %edx,%eax
    0.00 :	  782e30:       48 8b 15 11 ab 3f 00    mov    0x3fab11(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  782e37:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  782e3b:       48 03 43 28             add    0x28(%rbx),%rax
    0.00 :	  782e3f:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  782e46:       f0 83 04 24 00          lock addl $0x0,(%rsp)
    0.00 :	  782e4b:       4c 8d 7d b0             lea    -0x50(%rbp),%r15
    0.00 :	  782e4f:       eb 1e                   jmp    782e6f <CHashDelete+0x8f>
    0.00 :	  782e51:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        if (scan.found)
         :	        {
         :	                Assert(!CHashPtrIsMarked(scan.next));
         :
         :	                /* Attempt to apply delete-mark. */
         :	                if (!__sync_bool_compare_and_swap(&scan.target_node->next,
    0.00 :	  782e58:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  782e5b:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  782e5f:       89 c1                   mov    %eax,%ecx
    0.00 :	  782e61:       83 c9 01                or     $0x1,%ecx
    0.00 :	  782e64:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
    0.00 :	  782e68:       74 5e                   je     782ec8 <CHashDelete+0xe8>
         :	                                                                                  scan.next,
         :	                                                                                  CHashPtrMark(scan.next)))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
    0.00 :	  782e6a:       48 83 43 78 01          addq   $0x1,0x78(%rbx)
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket. */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  782e6f:       4d 89 f8                mov    %r15,%r8
    0.00 :	  782e72:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782e75:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782e78:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782e7b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782e7e:       e8 1d fe ff ff          callq  782ca0 <CHashBucketScan>
         :
         :	        /* If we found it, try to delete it. */
         :	        if (scan.found)
    0.00 :	  782e83:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  782e87:       75 cf                   jne    782e58 <CHashDelete+0x78>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  782e89:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  782e8e:       48 8b 05 b3 aa 3f 00    mov    0x3faab3(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782e95:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  782e9c:       00 00 00 00 
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
         :	        if (!scan.found)
    0.00 :	  782ea0:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
    0.00 :	  782ea4:       48 83 43 68 01          addq   $0x1,0x68(%rbx)
         :	        if (!scan.found)
    0.00 :	  782ea9:       84 c0                   test   %al,%al
    0.00 :	  782eab:       75 05                   jne    782eb2 <CHashDelete+0xd2>
         :	                CHashTableIncrementStatistic(table, CHS_Delete_Failed);
    0.00 :	  782ead:       48 83 43 70 01          addq   $0x1,0x70(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  782eb2:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  782eb6:       5b                      pop    %rbx
    0.00 :	  782eb7:       41 5c                   pop    %r12
    0.00 :	  782eb9:       41 5d                   pop    %r13
    0.00 :	  782ebb:       41 5e                   pop    %r14
    0.00 :	  782ebd:       41 5f                   pop    %r15
    0.00 :	  782ebf:       c9                      leaveq 
    0.00 :	  782ec0:       c3                      retq   
    0.00 :	  782ec1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
         :	                        goto retry;
         :	                }
         :
         :	                /* Deletion is done; attempt to remove node from list. */
         :	                if (__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  782ec8:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782ecb:       48 8b 75 b8             mov    -0x48(%rbp),%rsi
    0.00 :	  782ecf:       8b 4d b4                mov    -0x4c(%rbp),%ecx
    0.00 :	  782ed2:       89 d0                   mov    %edx,%eax
    0.00 :	  782ed4:       f0 0f b1 0e             lock cmpxchg %ecx,(%rsi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:614
  100.00 :	  782ed8:       75 16                   jne    782ef0 <CHashDelete+0x110>
         :	                                                                                 scan.target,
         :	                                                                                 scan.next))
         :	                        CHashAddToGarbage(table, bucket, scan.target);
    0.00 :	  782eda:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782edd:       8b 75 8c                mov    -0x74(%rbp),%esi
    0.00 :	  782ee0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782ee3:       e8 68 fd ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782ee8:       eb 9f                   jmp    782e89 <CHashDelete+0xa9>
    0.00 :	  782eea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * like a regular bucket scan, except that we don't care
         :	                         * about the results.  We're just doing it to achieve the
         :	                         * side-effect of removing delete-marked nodes from the
         :	                         * bucket chain.
         :	                         */
         :	                        CHashTableIncrementStatistic(table, CHS_Cleanup_Scan);
    0.00 :	  782ef0:       48 83 83 98 00 00 00    addq   $0x1,0x98(%rbx)
    0.00 :	  782ef7:       01 
         :	                        CHashBucketScan(table, b, hashcode, entry, &cleanup_scan);
    0.00 :	  782ef8:       4c 8d 45 90             lea    -0x70(%rbp),%r8
    0.00 :	  782efc:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782eff:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782f02:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782f05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782f08:       e8 93 fd ff ff          callq  782ca0 <CHashBucketScan>
    0.00 :	  782f0d:       e9 77 ff ff ff          jmpq   782e89 <CHashDelete+0xa9>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:232
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784890 <DynaHashAlloc>:
         :	 */
         :	static MemoryContext CurrentDynaHashCxt = NULL;
         :
         :	static void *
         :	DynaHashAlloc(Size size)
         :	{
    0.00 :	  784890:       55                      push   %rbp
         :	        Assert(MemoryContextIsValid(CurrentDynaHashCxt));
         :	        return MemoryContextAlloc(CurrentDynaHashCxt, size);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:232
  100.00 :	  784891:       48 89 fe                mov    %rdi,%rsi
    0.00 :	  784894:       48 8b 3d 2d 53 43 00    mov    0x43532d(%rip),%rdi        # bb9bc8 <CurrentDynaHashCxt>
         :	 */
         :	static MemoryContext CurrentDynaHashCxt = NULL;
         :
         :	static void *
         :	DynaHashAlloc(Size size)
         :	{
    0.00 :	  78489b:       48 89 e5                mov    %rsp,%rbp
         :	        Assert(MemoryContextIsValid(CurrentDynaHashCxt));
         :	        return MemoryContextAlloc(CurrentDynaHashCxt, size);
         :	}
    0.00 :	  78489e:       c9                      leaveq 
         :
         :	static void *
         :	DynaHashAlloc(Size size)
         :	{
         :	        Assert(MemoryContextIsValid(CurrentDynaHashCxt));
         :	        return MemoryContextAlloc(CurrentDynaHashCxt, size);
    0.00 :	  78489f:       e9 ec 45 01 00          jmpq   798e90 <MemoryContextAlloc>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:336
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007986d0 <AllocSetFree>:
         :	 * AllocSetFree
         :	 *              Frees allocated memory; memory is removed from the set.
         :	 */
         :	static void
         :	AllocSetFree(MemoryContext context, void *pointer)
         :	{
    0.00 :	  7986d0:       55                      push   %rbp
    0.00 :	  7986d1:       48 89 f9                mov    %rdi,%rcx
    0.00 :	  7986d4:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7986d7:       53                      push   %rbx
         :	        AllocSet        set = (AllocSet) context;
         :	        AllocChunk      chunk = AllocPointerGetChunk(pointer);
    0.00 :	  7986d8:       48 8d 5e f0             lea    -0x10(%rsi),%rbx
         :	 * AllocSetFree
         :	 *              Frees allocated memory; memory is removed from the set.
         :	 */
         :	static void
         :	AllocSetFree(MemoryContext context, void *pointer)
         :	{
    0.00 :	  7986dc:       48 83 ec 08             sub    $0x8,%rsp
         :	                if (!sentinel_ok(pointer, chunk->requested_size))
         :	                        elog(WARNING, "detected write past chunk end in %s %p",
         :	                                 set->header.name, chunk);
         :	#endif
         :
         :	        if (chunk->size > set->allocChunkLimit)
    0.00 :	  7986e0:       48 8b 46 f8             mov    -0x8(%rsi),%rax
    0.00 :	  7986e4:       48 3b 87 b0 00 00 00    cmp    0xb0(%rdi),%rax
    0.00 :	  7986eb:       76 63                   jbe    798750 <AllocSetFree+0x80>
         :	        {
         :	                /*
         :	                 * Big chunks are certain to have been allocated as single-chunk
         :	                 * blocks.  Find the containing block and return it to malloc().
         :	                 */
         :	                AllocBlock      block = set->blocks;
    0.00 :	  7986ed:       48 8b 7f 38             mov    0x38(%rdi),%rdi
         :	                AllocBlock      prevblock = NULL;
         :
         :	                while (block != NULL)
    0.00 :	  7986f1:       48 85 ff                test   %rdi,%rdi
    0.00 :	  7986f4:       74 2c                   je     798722 <AllocSetFree+0x52>
         :	                {
         :	                        if (chunk == (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ))
    0.00 :	  7986f6:       48 8d 47 20             lea    0x20(%rdi),%rax
    0.00 :	  7986fa:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  7986fd:       75 17                   jne    798716 <AllocSetFree+0x46>
    0.00 :	  7986ff:       90                      nop
    0.00 :	  798700:       e9 be 00 00 00          jmpq   7987c3 <AllocSetFree+0xf3>
    0.00 :	  798705:       0f 1f 00                nopl   (%rax)
    0.00 :	  798708:       48 8d 47 20             lea    0x20(%rdi),%rax
    0.00 :	  79870c:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  79870f:       90                      nop
    0.00 :	  798710:       0f 84 8a 00 00 00       je     7987a0 <AllocSetFree+0xd0>
         :	                                break;
    0.00 :	  798716:       48 89 fa                mov    %rdi,%rdx
         :	                        prevblock = block;
         :	                        block = block->next;
    0.00 :	  798719:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	                 * blocks.  Find the containing block and return it to malloc().
         :	                 */
         :	                AllocBlock      block = set->blocks;
         :	                AllocBlock      prevblock = NULL;
         :
         :	                while (block != NULL)
    0.00 :	  79871d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  798720:       75 e6                   jne    798708 <AllocSetFree+0x38>
         :	                                break;
         :	                        prevblock = block;
         :	                        block = block->next;
         :	                }
         :	                if (block == NULL)
         :	                        elog(ERROR, "could not find block containing chunk %p", chunk);
    0.00 :	  798722:       ba 70 1e 8e 00          mov    $0x8e1e70,%edx
    0.00 :	  798727:       be c9 03 00 00          mov    $0x3c9,%esi
    0.00 :	  79872c:       bf 6d 1d 8e 00          mov    $0x8e1d6d,%edi
    0.00 :	  798731:       e8 ea 2c fe ff          callq  77b420 <elog_start>
    0.00 :	  798736:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798739:       be 08 1e 8e 00          mov    $0x8e1e08,%esi
    0.00 :	  79873e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798743:       31 c0                   xor    %eax,%eax
    0.00 :	  798745:       e8 e6 2a fe ff          callq  77b230 <elog_finish>
    0.00 :	  79874a:       e8 81 0d cd ff          callq  4694d0 <abort@plt>
    0.00 :	  79874f:       90                      nop
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  798750:       31 d2                   xor    %edx,%edx
    0.00 :	  798752:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  798756:       77 20                   ja     798778 <AllocSetFree+0xa8>
         :	        else
         :	        {
         :	                /* Normal case, put the chunk into appropriate freelist */
         :	                int                     fidx = AllocSetFreeIndex(chunk->size);
         :
         :	                chunk->aset = (void *) set->freelist[fidx];
    0.00 :	  798758:       48 63 c2                movslq %edx,%rax
    0.00 :	  79875b:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  79875f:       48 8b 14 c1             mov    (%rcx,%rax,8),%rdx
    0.00 :	  798763:       48 89 56 f0             mov    %rdx,-0x10(%rsi)
         :
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                /* Reset requested_size to 0 in chunks that are on freelist */
         :	                chunk->requested_size = 0;
         :	#endif
         :	                set->freelist[fidx] = chunk;
    0.00 :	  798767:       48 89 1c c1             mov    %rbx,(%rcx,%rax,8)
         :	        }
         :	}
    0.00 :	  79876b:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  79876f:       5b                      pop    %rbx
    0.00 :	  798770:       c9                      leaveq 
    0.00 :	  798771:       c3                      retq   
    0.00 :	  798772:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798778:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  79877c:       48 89 c2                mov    %rax,%rdx
    0.00 :	  79877f:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  798783:       89 d0                   mov    %edx,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:336
  100.00 :	  798785:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798788:       85 c0                   test   %eax,%eax
    0.00 :	  79878a:       74 2c                   je     7987b8 <AllocSetFree+0xe8>
    0.00 :	  79878c:       89 c0                   mov    %eax,%eax
    0.00 :	  79878e:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  798795:       8d 50 08                lea    0x8(%rax),%edx
    0.00 :	  798798:       eb be                   jmp    798758 <AllocSetFree+0x88>
    0.00 :	  79879a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /* OK, remove block from aset's list and free it */
         :	                if (prevblock == NULL)
         :	                        set->blocks = block->next;
         :	                else
         :	                        prevblock->next = block->next;
    0.00 :	  7987a0:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  7987a4:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                /* Reset requested_size to 0 in chunks that are on freelist */
         :	                chunk->requested_size = 0;
         :	#endif
         :	                set->freelist[fidx] = chunk;
         :	        }
         :	}
    0.00 :	  7987a8:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7987ac:       5b                      pop    %rbx
    0.00 :	  7987ad:       c9                      leaveq 
         :	                else
         :	                        prevblock->next = block->next;
         :	#ifdef CLOBBER_FREED_MEMORY
         :	                wipe_mem(block, block->freeptr - ((char *) block));
         :	#endif
         :	                free(block);
    0.00 :	  7987ae:       e9 6d 10 cd ff          jmpq   469820 <free@plt>
    0.00 :	  7987b3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7987b8:       89 d0                   mov    %edx,%eax
    0.00 :	  7987ba:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
    0.00 :	  7987c1:       eb 95                   jmp    798758 <AllocSetFree+0x88>
         :	                Assert(block->freeptr == ((char *) block) +
         :	                           (chunk->size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ));
         :
         :	                /* OK, remove block from aset's list and free it */
         :	                if (prevblock == NULL)
         :	                        set->blocks = block->next;
    0.00 :	  7987c3:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  7987c7:       48 89 41 38             mov    %rax,0x38(%rcx)
    0.00 :	  7987cb:       eb db                   jmp    7987a8 <AllocSetFree+0xd8>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/sort/tuplesort.c:2912
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a0920 <copytup_heap>:
         :	        return 0;
         :	}
         :
         :	static void
         :	copytup_heap(Tuplesortstate *state, SortTuple *stup, void *tup)
         :	{
    0.00 :	  7a0920:       55                      push   %rbp
    0.00 :	  7a0921:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a0924:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  7a0928:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7a092c:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7a0930:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7a0934:       49 89 fd                mov    %rdi,%r13
    0.00 :	  7a0937:       48 83 ec 40             sub    $0x40,%rsp
    0.00 :	  7a093b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  7a093e:       48 89 d7                mov    %rdx,%rdi
         :	        TupleTableSlot *slot = (TupleTableSlot *) tup;
         :	        MinimalTuple tuple;
         :	        HeapTupleData htup;
         :
         :	        /* copy the tuple into sort storage */
         :	        tuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  7a0941:       e8 ba 35 e1 ff          callq  5b3f00 <ExecCopySlotMinimalTuple>
         :	        stup->tuple = (void *) tuple;
  100.00 :	  7a0946:       49 89 06                mov    %rax,(%r14)
         :	        USEMEM(state, GetMemoryChunkSpace(tuple));
    0.00 :	  7a0949:       49 8b 5d 10             mov    0x10(%r13),%rbx
    0.00 :	  7a094d:       48 89 c7                mov    %rax,%rdi
         :	        TupleTableSlot *slot = (TupleTableSlot *) tup;
         :	        MinimalTuple tuple;
         :	        HeapTupleData htup;
         :
         :	        /* copy the tuple into sort storage */
         :	        tuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  7a0950:       49 89 c4                mov    %rax,%r12
         :	        stup->tuple = (void *) tuple;
         :	        USEMEM(state, GetMemoryChunkSpace(tuple));
    0.00 :	  7a0953:       e8 38 81 ff ff          callq  798a90 <GetMemoryChunkSpace>
    0.00 :	  7a0958:       48 29 c3                sub    %rax,%rbx
    0.00 :	  7a095b:       49 89 5d 10             mov    %rbx,0x10(%r13)
         :	        /* set up first-column key value */
         :	        htup.t_len = tuple->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  7a095f:       41 8b 04 24             mov    (%r12),%eax
         :	        htup.t_data = (HeapTupleHeader) ((char *) tuple - MINIMAL_TUPLE_OFFSET);
    0.00 :	  7a0963:       49 83 ec 08             sub    $0x8,%r12
    0.00 :	  7a0967:       4c 89 65 d0             mov    %r12,-0x30(%rbp)
         :	        /* copy the tuple into sort storage */
         :	        tuple = ExecCopySlotMinimalTuple(slot);
         :	        stup->tuple = (void *) tuple;
         :	        USEMEM(state, GetMemoryChunkSpace(tuple));
         :	        /* set up first-column key value */
         :	        htup.t_len = tuple->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  7a096b:       83 c0 08                add    $0x8,%eax
    0.00 :	  7a096e:       89 45 c0                mov    %eax,-0x40(%rbp)
         :	        htup.t_data = (HeapTupleHeader) ((char *) tuple - MINIMAL_TUPLE_OFFSET);
         :	        stup->datum1 = heap_getattr(&htup,
    0.00 :	  7a0971:       49 8b 85 f8 00 00 00    mov    0xf8(%r13),%rax
    0.00 :	  7a0978:       0f b7 40 0e             movzwl 0xe(%rax),%eax
    0.00 :	  7a097c:       66 85 c0                test   %ax,%ax
    0.00 :	  7a097f:       0f 8e eb 00 00 00       jle    7a0a70 <copytup_heap+0x150>
    0.00 :	  7a0985:       0f bf d0                movswl %ax,%edx
    0.00 :	  7a0988:       41 0f b7 44 24 12       movzwl 0x12(%r12),%eax
    0.00 :	  7a098e:       25 ff 07 00 00          and    $0x7ff,%eax
    0.00 :	  7a0993:       39 c2                   cmp    %eax,%edx
    0.00 :	  7a0995:       7e 21                   jle    7a09b8 <copytup_heap+0x98>
    0.00 :	  7a0997:       41 c6 46 10 01          movb   $0x1,0x10(%r14)
    0.00 :	  7a099c:       31 c0                   xor    %eax,%eax
    0.00 :	  7a099e:       49 89 46 08             mov    %rax,0x8(%r14)
         :	                                                                state->sortKeys[0].ssup_attno,
         :	                                                                state->tupDesc,
         :	                                                                &stup->isnull1);
         :	}
    0.00 :	  7a09a2:       48 8b 5d e0             mov    -0x20(%rbp),%rbx
    0.00 :	  7a09a6:       4c 8b 65 e8             mov    -0x18(%rbp),%r12
    0.00 :	  7a09aa:       4c 8b 6d f0             mov    -0x10(%rbp),%r13
    0.00 :	  7a09ae:       4c 8b 75 f8             mov    -0x8(%rbp),%r14
    0.00 :	  7a09b2:       c9                      leaveq 
    0.00 :	  7a09b3:       c3                      retq   
    0.00 :	  7a09b4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        stup->tuple = (void *) tuple;
         :	        USEMEM(state, GetMemoryChunkSpace(tuple));
         :	        /* set up first-column key value */
         :	        htup.t_len = tuple->t_len + MINIMAL_TUPLE_OFFSET;
         :	        htup.t_data = (HeapTupleHeader) ((char *) tuple - MINIMAL_TUPLE_OFFSET);
         :	        stup->datum1 = heap_getattr(&htup,
    0.00 :	  7a09b8:       41 c6 46 10 00          movb   $0x0,0x10(%r14)
    0.00 :	  7a09bd:       41 f6 44 24 14 01       testb  $0x1,0x14(%r12)
    0.00 :	  7a09c3:       75 6b                   jne    7a0a30 <copytup_heap+0x110>
    0.00 :	  7a09c5:       49 8b 85 f8 00 00 00    mov    0xf8(%r13),%rax
    0.00 :	  7a09cc:       4d 8b 85 f0 00 00 00    mov    0xf0(%r13),%r8
    0.00 :	  7a09d3:       0f b7 48 0e             movzwl 0xe(%rax),%ecx
    0.00 :	  7a09d7:       49 8b 40 08             mov    0x8(%r8),%rax
    0.00 :	  7a09db:       48 0f bf d1             movswq %cx,%rdx
    0.00 :	  7a09df:       48 8b 54 d0 f8          mov    -0x8(%rax,%rdx,8),%rdx
    0.00 :	  7a09e4:       8b 42 54                mov    0x54(%rdx),%eax
    0.00 :	  7a09e7:       85 c0                   test   %eax,%eax
    0.00 :	  7a09e9:       0f 88 b9 00 00 00       js     7a0aa8 <copytup_heap+0x188>
    0.00 :	  7a09ef:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.00 :	  7a09f3:       0f 84 97 00 00 00       je     7a0a90 <copytup_heap+0x170>
    0.00 :	  7a09f9:       0f b7 52 4c             movzwl 0x4c(%rdx),%edx
    0.00 :	  7a09fd:       66 83 fa 08             cmp    $0x8,%dx
    0.00 :	  7a0a01:       0f 84 d1 00 00 00       je     7a0ad8 <copytup_heap+0x1b8>
    0.00 :	  7a0a07:       66 83 fa 04             cmp    $0x4,%dx
    0.00 :	  7a0a0b:       0f 84 af 00 00 00       je     7a0ac0 <copytup_heap+0x1a0>
    0.00 :	  7a0a11:       66 83 fa 02             cmp    $0x2,%dx
    0.00 :	  7a0a15:       0f 84 d5 00 00 00       je     7a0af0 <copytup_heap+0x1d0>
    0.00 :	  7a0a1b:       41 0f b6 54 24 16       movzbl 0x16(%r12),%edx
    0.00 :	  7a0a21:       48 98                   cltq   
    0.00 :	  7a0a23:       49 8d 04 04             lea    (%r12,%rax,1),%rax
    0.00 :	  7a0a27:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  7a0a2b:       e9 6e ff ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0a30:       49 8b 85 f8 00 00 00    mov    0xf8(%r13),%rax
    0.00 :	  7a0a37:       0f bf 70 0e             movswl 0xe(%rax),%esi
    0.00 :	  7a0a3b:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  7a0a3e:       89 c8                   mov    %ecx,%eax
    0.00 :	  7a0a40:       83 e1 07                and    $0x7,%ecx
    0.00 :	  7a0a43:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  7a0a46:       48 98                   cltq   
    0.00 :	  7a0a48:       41 0f b6 44 04 17       movzbl 0x17(%r12,%rax,1),%eax
    0.00 :	  7a0a4e:       d3 f8                   sar    %cl,%eax
    0.00 :	  7a0a50:       a8 01                   test   $0x1,%al
    0.00 :	  7a0a52:       0f 84 3f ff ff ff       je     7a0997 <copytup_heap+0x77>
    0.00 :	  7a0a58:       49 8b 95 f0 00 00 00    mov    0xf0(%r13),%rdx
    0.00 :	  7a0a5f:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  7a0a63:       e8 28 ef cc ff          callq  46f990 <nocachegetattr>
    0.00 :	  7a0a68:       e9 31 ff ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0a6d:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a0a70:       49 8b 95 f0 00 00 00    mov    0xf0(%r13),%rdx
    0.00 :	  7a0a77:       49 8d 4e 10             lea    0x10(%r14),%rcx
    0.00 :	  7a0a7b:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  7a0a7f:       0f bf f0                movswl %ax,%esi
    0.00 :	  7a0a82:       e8 49 e2 cc ff          callq  46ecd0 <heap_getsysattr>
    0.00 :	  7a0a87:       e9 12 ff ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0a8c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  7a0a90:       41 0f b6 54 24 16       movzbl 0x16(%r12),%edx
    0.00 :	  7a0a96:       48 98                   cltq   
    0.00 :	  7a0a98:       48 01 d0                add    %rdx,%rax
    0.00 :	  7a0a9b:       49 8d 04 04             lea    (%r12,%rax,1),%rax
    0.00 :	  7a0a9f:       e9 fa fe ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0aa4:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  7a0aa8:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  7a0aac:       0f bf f1                movswl %cx,%esi
    0.00 :	  7a0aaf:       4c 89 c2                mov    %r8,%rdx
    0.00 :	  7a0ab2:       e8 d9 ee cc ff          callq  46f990 <nocachegetattr>
    0.00 :	  7a0ab7:       e9 e2 fe ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0abc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  7a0ac0:       41 0f b6 54 24 16       movzbl 0x16(%r12),%edx
    0.00 :	  7a0ac6:       48 98                   cltq   
    0.00 :	  7a0ac8:       49 8d 04 04             lea    (%r12,%rax,1),%rax
    0.00 :	  7a0acc:       8b 04 10                mov    (%rax,%rdx,1),%eax
    0.00 :	  7a0acf:       e9 ca fe ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0ad4:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  7a0ad8:       41 0f b6 54 24 16       movzbl 0x16(%r12),%edx
    0.00 :	  7a0ade:       48 98                   cltq   
    0.00 :	  7a0ae0:       49 8d 04 04             lea    (%r12,%rax,1),%rax
    0.00 :	  7a0ae4:       48 8b 04 10             mov    (%rax,%rdx,1),%rax
    0.00 :	  7a0ae8:       e9 b1 fe ff ff          jmpq   7a099e <copytup_heap+0x7e>
    0.00 :	  7a0aed:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a0af0:       41 0f b6 54 24 16       movzbl 0x16(%r12),%edx
    0.00 :	  7a0af6:       48 98                   cltq   
    0.00 :	  7a0af8:       49 8d 04 04             lea    (%r12,%rax,1),%rax
    0.00 :	  7a0afc:       0f b7 04 10             movzwl (%rax,%rdx,1),%eax
    0.00 :	  7a0b00:       e9 99 fe ff ff          jmpq   7a099e <copytup_heap+0x7e>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000031dc0 <__isinf>:
    0.00 :	   31dc0:       f2 0f 11 44 24 f8       movsd  %xmm0,-0x8(%rsp)
    0.00 :	   31dc6:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   31dcb:       48 89 c1                mov    %rax,%rcx
    0.00 :	   31dce:       48 c1 e9 20             shr    $0x20,%rcx
    0.00 :	   31dd2:       89 ca                   mov    %ecx,%edx
    0.00 :	   31dd4:       c1 f9 1e                sar    $0x1e,%ecx
    0.00 :	   31dd7:       81 e2 ff ff ff 7f       and    $0x7fffffff,%edx
    0.00 :	   31ddd:       81 f2 00 00 f0 7f       xor    $0x7ff00000,%edx
    0.00 :	   31de3:       09 c2                   or     %eax,%edx
 ??:0
  100.00 :	   31de5:       89 d0                   mov    %edx,%eax
    0.00 :	   31de7:       f7 d8                   neg    %eax
    0.00 :	   31de9:       09 d0                   or     %edx,%eax
    0.00 :	   31deb:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	   31dee:       f7 d0                   not    %eax
    0.00 :	   31df0:       21 c8                   and    %ecx,%eax

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000442c0 <_IO_vfprintf>:
    0.00 :	   442c0:       55                      push   %rbp
    0.00 :	   442c1:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   442c8:       00 00 
    0.00 :	   442ca:       48 89 e5                mov    %rsp,%rbp
    0.00 :	   442cd:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	   442d1:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	   442d5:       49 89 d6                mov    %rdx,%r14
    0.00 :	   442d8:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	   442dc:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	   442e0:       49 89 fc                mov    %rdi,%r12
    0.00 :	   442e3:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	   442e7:       48 81 ec e0 07 00 00    sub    $0x7e0,%rsp
    0.00 :	   442ee:       48 8b 15 43 db 32 00    mov    0x32db43(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   442f5:       48 89 85 58 f8 ff ff    mov    %rax,-0x7a8(%rbp)
    0.00 :	   442fc:       48 89 b5 b0 f8 ff ff    mov    %rsi,-0x750(%rbp)
    0.00 :	   44303:       8b 14 10                mov    (%rax,%rdx,1),%edx
    0.00 :	   44306:       89 95 70 f9 ff ff       mov    %edx,-0x690(%rbp)
    0.00 :	   4430c:       8b 87 c0 00 00 00       mov    0xc0(%rdi),%eax
    0.00 :	   44312:       85 c0                   test   %eax,%eax
    0.00 :	   44314:       0f 85 f6 01 00 00       jne    44510 <_IO_vfprintf+0x250>
    0.00 :	   4431a:       c7 87 c0 00 00 00 ff    movl   $0xffffffff,0xc0(%rdi)
    0.00 :	   44321:       ff ff ff 
    0.00 :	   44324:       41 8b 1c 24             mov    (%r12),%ebx
    0.00 :	   44328:       f6 c3 08                test   $0x8,%bl
    0.00 :	   4432b:       0f 85 df 03 00 00       jne    44710 <_IO_vfprintf+0x450>
    0.00 :	   44331:       48 83 bd b0 f8 ff ff    cmpq   $0x0,-0x750(%rbp)
    0.00 :	   44338:       00 
    0.00 :	   44339:       0f 84 21 27 00 00       je     46a60 <_IO_vfprintf+0x27a0>
    0.00 :	   4433f:       f6 c3 02                test   $0x2,%bl
    0.00 :	   44342:       0f 85 f8 01 00 00       jne    44540 <_IO_vfprintf+0x280>
    0.00 :	   44348:       49 8b 06                mov    (%r14),%rax
    0.00 :	   4434b:       48 8d 95 00 ff ff ff    lea    -0x100(%rbp),%rdx
    0.00 :	   44352:       48 8b bd b0 f8 ff ff    mov    -0x750(%rbp),%rdi
    0.00 :	   44359:       be 25 00 00 00          mov    $0x25,%esi
    0.00 :	   4435e:       48 89 95 50 f8 ff ff    mov    %rdx,-0x7b0(%rbp)
    0.00 :	   44365:       48 89 85 00 ff ff ff    mov    %rax,-0x100(%rbp)
    0.00 :	   4436c:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	   44370:       48 89 85 08 ff ff ff    mov    %rax,-0xf8(%rbp)
    0.00 :	   44377:       49 8b 46 10             mov    0x10(%r14),%rax
    0.00 :	   4437b:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	   44382:       e8 79 18 04 00          callq  85c00 <strchrnul>
    0.00 :	   44387:       66 85 db                test   %bx,%bx
    0.00 :	   4438a:       48 89 85 50 f9 ff ff    mov    %rax,-0x6b0(%rbp)
    0.00 :	   44391:       c7 85 8c f9 ff ff 00    movl   $0x0,-0x674(%rbp)
    0.00 :	   44398:       00 00 00 
    0.00 :	   4439b:       0f 88 87 00 00 00       js     44428 <_IO_vfprintf+0x168>
    0.00 :	   443a1:       8b 0d 09 33 33 00       mov    0x333309(%rip),%ecx        # 3776b0 <__libc_pthread_functions_init>
    0.00 :	   443a7:       85 c9                   test   %ecx,%ecx
    0.00 :	   443a9:       89 8d 8c f9 ff ff       mov    %ecx,-0x674(%rbp)
    0.00 :	   443af:       0f 85 cb 26 00 00       jne    46a80 <_IO_vfprintf+0x27c0>
    0.00 :	   443b5:       48 8b 05 8c db 32 00    mov    0x32db8c(%rip),%rax        # 371f48 <_DYNAMIC+0x3e8>
    0.00 :	   443bc:       4c 89 a5 e8 fe ff ff    mov    %r12,-0x118(%rbp)
    0.00 :	   443c3:       48 89 85 e0 fe ff ff    mov    %rax,-0x120(%rbp)
    0.00 :	   443ca:       66 85 db                test   %bx,%bx
    0.00 :	   443cd:       78 59                   js     44428 <_IO_vfprintf+0x168>
    0.00 :	   443cf:       4d 8b 8c 24 88 00 00    mov    0x88(%r12),%r9
    0.00 :	   443d6:       00 
    0.00 :	   443d7:       64 4c 8b 14 25 10 00    mov    %fs:0x10,%r10
    0.00 :	   443de:       00 00 
    0.00 :	   443e0:       4d 3b 51 08             cmp    0x8(%r9),%r10
    0.00 :	   443e4:       74 3d                   je     44423 <_IO_vfprintf+0x163>
    0.00 :	   443e6:       31 d2                   xor    %edx,%edx
    0.00 :	   443e8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	   443ed:       89 d0                   mov    %edx,%eax
    0.00 :	   443ef:       83 3d be 32 33 00 00    cmpl   $0x0,0x3332be(%rip)        # 3776b4 <__libc_multiple_threads>
    0.00 :	   443f6:       74 0d                   je     44405 <_IO_vfprintf+0x145>
    0.00 :	   443f8:       f0 41 0f b1 31          lock cmpxchg %esi,(%r9)
    0.00 :	   443fd:       0f 85 bc 54 00 00       jne    498bf <_L_lock_724>
    0.00 :	   44403:       eb 0a                   jmp    4440f <_IO_vfprintf+0x14f>
    0.00 :	   44405:       41 0f b1 31             cmpxchg %esi,(%r9)
    0.00 :	   44409:       0f 85 b0 54 00 00       jne    498bf <_L_lock_724>
    0.00 :	   4440f:       49 8b 84 24 88 00 00    mov    0x88(%r12),%rax
    0.00 :	   44416:       00 
    0.00 :	   44417:       4c 89 50 08             mov    %r10,0x8(%rax)
    0.00 :	   4441b:       4d 8b 8c 24 88 00 00    mov    0x88(%r12),%r9
    0.00 :	   44422:       00 
    0.00 :	   44423:       41 83 41 04 01          addl   $0x1,0x4(%r9)
    0.00 :	   44428:       48 8b 9d 50 f9 ff ff    mov    -0x6b0(%rbp),%rbx
    0.00 :	   4442f:       48 2b 9d b0 f8 ff ff    sub    -0x750(%rbp),%rbx
    0.00 :	   44436:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44439:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   44440:       00 
    0.00 :	   44441:       48 8b b5 b0 f8 ff ff    mov    -0x750(%rbp),%rsi
    0.00 :	   44448:       48 89 da                mov    %rbx,%rdx
    0.00 :	   4444b:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   4444e:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   44451:       0f 84 09 01 00 00       je     44560 <_IO_vfprintf+0x2a0>
    0.00 :	   44457:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   4445d:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   44464:       00 00 00 00 
    0.00 :	   44468:       48 c7 85 78 f9 ff ff    movq   $0x0,-0x688(%rbp)
    0.00 :	   4446f:       00 00 00 00 
 ??:0
  100.00 :	   44473:       48 8b bd 78 f9 ff ff    mov    -0x688(%rbp),%rdi
    0.00 :	   4447a:       e8 21 a4 fd ff          callq  1e8a0 <free@plt>
    0.00 :	   4447f:       48 8b bd 58 f9 ff ff    mov    -0x6a8(%rbp),%rdi
    0.00 :	   44486:       e8 15 a4 fd ff          callq  1e8a0 <free@plt>
    0.00 :	   4448b:       66 41 83 3c 24 00       cmpw   $0x0,(%r12)
    0.00 :	   44491:       78 49                   js     444dc <_IO_vfprintf+0x21c>
    0.00 :	   44493:       49 8b 94 24 88 00 00    mov    0x88(%r12),%rdx
    0.00 :	   4449a:       00 
    0.00 :	   4449b:       8b 42 04                mov    0x4(%rdx),%eax
    0.00 :	   4449e:       83 e8 01                sub    $0x1,%eax
    0.00 :	   444a1:       85 c0                   test   %eax,%eax
    0.00 :	   444a3:       89 42 04                mov    %eax,0x4(%rdx)
    0.00 :	   444a6:       75 34                   jne    444dc <_IO_vfprintf+0x21c>
    0.00 :	   444a8:       49 8b 84 24 88 00 00    mov    0x88(%r12),%rax
    0.00 :	   444af:       00 
    0.00 :	   444b0:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	   444b7:       00 
    0.00 :	   444b8:       49 8b 94 24 88 00 00    mov    0x88(%r12),%rdx
    0.00 :	   444bf:       00 
    0.00 :	   444c0:       83 3d ed 31 33 00 00    cmpl   $0x0,0x3331ed(%rip)        # 3776b4 <__libc_multiple_threads>
    0.00 :	   444c7:       74 0b                   je     444d4 <_IO_vfprintf+0x214>
    0.00 :	   444c9:       f0 ff 0a                lock decl (%rdx)
    0.00 :	   444cc:       0f 85 08 54 00 00       jne    498da <_L_unlock_932>
    0.00 :	   444d2:       eb 08                   jmp    444dc <_IO_vfprintf+0x21c>
    0.00 :	   444d4:       ff 0a                   decl   (%rdx)
    0.00 :	   444d6:       0f 85 fe 53 00 00       jne    498da <_L_unlock_932>
    0.00 :	   444dc:       8b 85 8c f9 ff ff       mov    -0x674(%rbp),%eax
    0.00 :	   444e2:       85 c0                   test   %eax,%eax
    0.00 :	   444e4:       74 39                   je     4451f <_IO_vfprintf+0x25f>
    0.00 :	   444e6:       48 8b 05 8b 31 33 00    mov    0x33318b(%rip),%rax        # 377678 <__libc_pthread_functions+0x178>
    0.00 :	   444ed:       48 8d bd e0 fe ff ff    lea    -0x120(%rbp),%rdi
    0.00 :	   444f4:       31 f6                   xor    %esi,%esi
    0.00 :	   444f6:       48 c1 c8 11             ror    $0x11,%rax
    0.00 :	   444fa:       64 48 33 04 25 30 00    xor    %fs:0x30,%rax
    0.00 :	   44501:       00 00 
    0.00 :	   44503:       ff d0                   callq  *%rax
    0.00 :	   44505:       eb 18                   jmp    4451f <_IO_vfprintf+0x25f>
    0.00 :	   44507:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   4450e:       00 00 
    0.00 :	   44510:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   44516:       44 39 e8                cmp    %r13d,%eax
    0.00 :	   44519:       0f 84 05 fe ff ff       je     44324 <_IO_vfprintf+0x64>
    0.00 :	   4451f:       44 89 e8                mov    %r13d,%eax
    0.00 :	   44522:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	   44526:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	   4452a:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	   4452e:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	   44532:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	   44536:       c9                      leaveq 
    0.00 :	   44537:       c3                      retq   
    0.00 :	   44538:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   4453f:       00 
    0.00 :	   44540:       48 8b b5 b0 f8 ff ff    mov    -0x750(%rbp),%rsi
    0.00 :	   44547:       4c 89 f2                mov    %r14,%rdx
    0.00 :	   4454a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4454d:       e8 2e 51 00 00          callq  49680 <buffered_vfprintf>
    0.00 :	   44552:       41 89 c5                mov    %eax,%r13d
    0.00 :	   44555:       eb c8                   jmp    4451f <_IO_vfprintf+0x25f>
    0.00 :	   44557:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   4455e:       00 00 
    0.00 :	   44560:       48 81 fb ff ff ff 7f    cmp    $0x7fffffff,%rbx
    0.00 :	   44567:       0f 87 ea fe ff ff       ja     44457 <_IO_vfprintf+0x197>
    0.00 :	   4456d:       48 8b 85 50 f9 ff ff    mov    -0x6b0(%rbp),%rax
    0.00 :	   44574:       44 8b ad 50 f9 ff ff    mov    -0x6b0(%rbp),%r13d
    0.00 :	   4457b:       44 2b ad b0 f8 ff ff    sub    -0x750(%rbp),%r13d
    0.00 :	   44582:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	   44585:       0f 84 d2 fe ff ff       je     4445d <_IO_vfprintf+0x19d>
    0.00 :	   4458b:       48 8d 95 f0 fa ff ff    lea    -0x510(%rbp),%rdx
    0.00 :	   44592:       48 8d 8d 60 ff ff ff    lea    -0xa0(%rbp),%rcx
    0.00 :	   44599:       49 89 c7                mov    %rax,%r15
    0.00 :	   4459c:       8d 1d 16 0b 00 00       lea    0xb16(%rip),%ebx        # 450b8 <_IO_vfprintf+0xdf8>
    0.00 :	   445a2:       8d 05 32 17 00 00       lea    0x1732(%rip),%eax        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   445a8:       48 c7 85 38 f9 ff ff    movq   $0x0,-0x6c8(%rbp)
    0.00 :	   445af:       00 00 00 00 
    0.00 :	   445b3:       48 89 95 88 f8 ff ff    mov    %rdx,-0x778(%rbp)
    0.00 :	   445ba:       48 89 8d 30 f8 ff ff    mov    %rcx,-0x7d0(%rbp)
    0.00 :	   445c1:       48 81 c2 e8 03 00 00    add    $0x3e8,%rdx
    0.00 :	   445c8:       48 83 c1 0c             add    $0xc,%rcx
    0.00 :	   445cc:       29 c3                   sub    %eax,%ebx
    0.00 :	   445ce:       48 89 95 c8 fa ff ff    mov    %rdx,-0x538(%rbp)
    0.00 :	   445d5:       48 c7 85 40 f9 ff ff    movq   $0xffffffffffffffff,-0x6c0(%rbp)
    0.00 :	   445dc:       ff ff ff ff 
    0.00 :	   445e0:       c7 85 6c f9 ff ff 00    movl   $0x0,-0x694(%rbp)
    0.00 :	   445e7:       00 00 00 
    0.00 :	   445ea:       c7 85 74 f9 ff ff 00    movl   $0x0,-0x68c(%rbp)
    0.00 :	   445f1:       00 00 00 
    0.00 :	   445f4:       48 c7 85 78 f9 ff ff    movq   $0x0,-0x688(%rbp)
    0.00 :	   445fb:       00 00 00 00 
    0.00 :	   445ff:       c6 85 8b f9 ff ff 00    movb   $0x0,-0x675(%rbp)
    0.00 :	   44606:       48 89 8d 28 f8 ff ff    mov    %rcx,-0x7d8(%rbp)
    0.00 :	   4460d:       89 9d 24 f8 ff ff       mov    %ebx,-0x7dc(%rbp)
    0.00 :	   44613:       49 8d 7f 01             lea    0x1(%r15),%rdi
    0.00 :	   44617:       48 8d 15 bc 16 00 00    lea    0x16bc(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4461e:       48 89 bd 48 f9 ff ff    mov    %rdi,-0x6b8(%rbp)
    0.00 :	   44625:       45 0f b6 7f 01          movzbl 0x1(%r15),%r15d
    0.00 :	   4462a:       44 89 f8                mov    %r15d,%eax
    0.00 :	   4462d:       44 88 bd eb f9 ff ff    mov    %r15b,-0x615(%rbp)
    0.00 :	   44634:       83 e8 20                sub    $0x20,%eax
    0.00 :	   44637:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   44639:       77 2c                   ja     44667 <_IO_vfprintf+0x3a7>
    0.00 :	   4463b:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   44642:       48 8d 15 37 08 0f 00    lea    0xf0837(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   44649:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4464c:       48 98                   cltq   
    0.00 :	   4464e:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   44652:       48 8d 05 a7 07 0f 00    lea    0xf07a7(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   44659:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   4465d:       48 8d 15 76 16 00 00    lea    0x1676(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   44664:       48 01 c2                add    %rax,%rdx
    0.00 :	   44667:       48 8b 85 c8 fa ff ff    mov    -0x538(%rbp),%rax
    0.00 :	   4466e:       48 8d 4d 98             lea    -0x68(%rbp),%rcx
    0.00 :	   44672:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   44679:       00 00 00 00 
    0.00 :	   4467d:       c7 85 a4 f9 ff ff 00    movl   $0x0,-0x65c(%rbp)
    0.00 :	   44684:       00 00 00 
    0.00 :	   44687:       c7 85 a8 f9 ff ff 00    movl   $0x0,-0x658(%rbp)
    0.00 :	   4468e:       00 00 00 
    0.00 :	   44691:       c7 85 ac f9 ff ff 00    movl   $0x0,-0x654(%rbp)
    0.00 :	   44698:       00 00 00 
    0.00 :	   4469b:       c7 85 b0 f9 ff ff 00    movl   $0x0,-0x650(%rbp)
    0.00 :	   446a2:       00 00 00 
    0.00 :	   446a5:       48 89 85 60 f9 ff ff    mov    %rax,-0x6a0(%rbp)
    0.00 :	   446ac:       c7 85 b4 f9 ff ff 00    movl   $0x0,-0x64c(%rbp)
    0.00 :	   446b3:       00 00 00 
    0.00 :	   446b6:       c7 85 b8 f9 ff ff 00    movl   $0x0,-0x648(%rbp)
    0.00 :	   446bd:       00 00 00 
    0.00 :	   446c0:       c7 85 bc f9 ff ff 00    movl   $0x0,-0x644(%rbp)
    0.00 :	   446c7:       00 00 00 
    0.00 :	   446ca:       c7 85 c0 f9 ff ff 00    movl   $0x0,-0x640(%rbp)
    0.00 :	   446d1:       00 00 00 
    0.00 :	   446d4:       c7 85 c4 f9 ff ff 00    movl   $0x0,-0x63c(%rbp)
    0.00 :	   446db:       00 00 00 
    0.00 :	   446de:       c7 85 b8 fa ff ff 00    movl   $0x0,-0x548(%rbp)
    0.00 :	   446e5:       00 00 00 
    0.00 :	   446e8:       c7 85 ec fa ff ff ff    movl   $0xffffffff,-0x514(%rbp)
    0.00 :	   446ef:       ff ff ff 
    0.00 :	   446f2:       c7 85 cc f9 ff ff 00    movl   $0x0,-0x634(%rbp)
    0.00 :	   446f9:       00 00 00 
    0.00 :	   446fc:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   44703:       48 89 8d 38 f8 ff ff    mov    %rcx,-0x7c8(%rbp)
    0.00 :	   4470a:       ff e2                   jmpq   *%rdx
    0.00 :	   4470c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   44710:       48 8b 9d 58 f8 ff ff    mov    -0x7a8(%rbp),%rbx
    0.00 :	   44717:       48 8b 0d 1a d7 32 00    mov    0x32d71a(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   4471e:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   44724:       c7 04 0b 09 00 00 00    movl   $0x9,(%rbx,%rcx,1)
    0.00 :	   4472b:       e9 ef fd ff ff          jmpq   4451f <_IO_vfprintf+0x25f>
    0.00 :	   44730:       48 8b 05 51 d6 32 00    mov    0x32d651(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   44737:       48 8b 9d 58 f8 ff ff    mov    -0x7a8(%rbp),%rbx
    0.00 :	   4473e:       48 8d 55 c0             lea    -0x40(%rbp),%rdx
    0.00 :	   44742:       48 89 a5 d8 f8 ff ff    mov    %rsp,-0x728(%rbp)
    0.00 :	   44749:       48 8b 04 03             mov    (%rbx,%rax,1),%rax
    0.00 :	   4474d:       48 8b 00                mov    (%rax),%rax
    0.00 :	   44750:       8b 80 a8 00 00 00       mov    0xa8(%rax),%eax
    0.00 :	   44756:       48 c7 45 c0 00 00 00    movq   $0x0,-0x40(%rbp)
    0.00 :	   4475d:       00 
    0.00 :	   4475e:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   44762:       48 c1 e8 04             shr    $0x4,%rax
    0.00 :	   44766:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   4476a:       48 29 c4                sub    %rax,%rsp
    0.00 :	   4476d:       41 8b 06                mov    (%r14),%eax
    0.00 :	   44770:       48 8d 7c 24 0f          lea    0xf(%rsp),%rdi
    0.00 :	   44775:       48 83 e7 f0             and    $0xfffffffffffffff0,%rdi
    0.00 :	   44779:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4477c:       48 89 bd a8 f8 ff ff    mov    %rdi,-0x758(%rbp)
    0.00 :	   44783:       0f 83 b3 2d 00 00       jae    4753c <_IO_vfprintf+0x327c>
    0.00 :	   44789:       89 c1                   mov    %eax,%ecx
    0.00 :	   4478b:       49 03 4e 10             add    0x10(%r14),%rcx
    0.00 :	   4478f:       83 c0 08                add    $0x8,%eax
    0.00 :	   44792:       41 89 06                mov    %eax,(%r14)
    0.00 :	   44795:       8b 31                   mov    (%rcx),%esi
    0.00 :	   44797:       48 8b bd a8 f8 ff ff    mov    -0x758(%rbp),%rdi
    0.00 :	   4479e:       e8 3d 88 04 00          callq  8cfe0 <wcrtomb>
    0.00 :	   447a3:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   447a7:       48 89 c3                mov    %rax,%rbx
    0.00 :	   447aa:       0f 84 8b 3d 00 00       je     4853b <_IO_vfprintf+0x427b>
    0.00 :	   447b0:       44 8b bd b8 fa ff ff    mov    -0x548(%rbp),%r15d
    0.00 :	   447b7:       89 85 d4 f8 ff ff       mov    %eax,-0x72c(%rbp)
    0.00 :	   447bd:       41 29 c7                sub    %eax,%r15d
    0.00 :	   447c0:       8b 85 ac f9 ff ff       mov    -0x654(%rbp),%eax
    0.00 :	   447c6:       85 c0                   test   %eax,%eax
    0.00 :	   447c8:       75 38                   jne    44802 <_IO_vfprintf+0x542>
    0.00 :	   447ca:       45 85 ff                test   %r15d,%r15d
    0.00 :	   447cd:       7e 33                   jle    44802 <_IO_vfprintf+0x542>
    0.00 :	   447cf:       49 63 d7                movslq %r15d,%rdx
    0.00 :	   447d2:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   447d7:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   447da:       e8 61 3a 02 00          callq  68240 <_IO_padn>
    0.00 :	   447df:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   447e6:       0f 87 69 4a 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   447ec:       89 c2                   mov    %eax,%edx
    0.00 :	   447ee:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   447f3:       44 29 e8                sub    %r13d,%eax
    0.00 :	   447f6:       39 c2                   cmp    %eax,%edx
    0.00 :	   447f8:       0f 87 3d 3d 00 00       ja     4853b <_IO_vfprintf+0x427b>
    0.00 :	   447fe:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44802:       45 85 ed                test   %r13d,%r13d
    0.00 :	   44805:       0f 88 11 3d 00 00       js     4851c <_IO_vfprintf+0x425c>
    0.00 :	   4480b:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   44812:       00 
    0.00 :	   44813:       48 89 da                mov    %rbx,%rdx
    0.00 :	   44816:       48 8b b5 a8 f8 ff ff    mov    -0x758(%rbp),%rsi
    0.00 :	   4481d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44820:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   44823:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   44826:       0f 85 0f 3d 00 00       jne    4853b <_IO_vfprintf+0x427b>
    0.00 :	   4482c:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   4482f:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44834:       48 29 d0                sub    %rdx,%rax
    0.00 :	   44837:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   4483a:       0f 87 fb 3c 00 00       ja     4853b <_IO_vfprintf+0x427b>
    0.00 :	   44840:       8b 85 ac f9 ff ff       mov    -0x654(%rbp),%eax
    0.00 :	   44846:       44 03 ad d4 f8 ff ff    add    -0x72c(%rbp),%r13d
    0.00 :	   4484d:       85 c0                   test   %eax,%eax
    0.00 :	   4484f:       74 38                   je     44889 <_IO_vfprintf+0x5c9>
    0.00 :	   44851:       45 85 ff                test   %r15d,%r15d
    0.00 :	   44854:       7e 33                   jle    44889 <_IO_vfprintf+0x5c9>
    0.00 :	   44856:       49 63 d7                movslq %r15d,%rdx
    0.00 :	   44859:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   4485e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44861:       e8 da 39 02 00          callq  68240 <_IO_padn>
    0.00 :	   44866:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   4486d:       0f 87 e2 49 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   44873:       89 c2                   mov    %eax,%edx
    0.00 :	   44875:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   4487a:       44 29 e8                sub    %r13d,%eax
    0.00 :	   4487d:       39 c2                   cmp    %eax,%edx
    0.00 :	   4487f:       0f 87 b6 3c 00 00       ja     4853b <_IO_vfprintf+0x427b>
    0.00 :	   44885:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44889:       48 8b a5 d8 f8 ff ff    mov    -0x728(%rbp),%rsp
    0.00 :	   44890:       48 83 bd 58 f9 ff ff    cmpq   $0x0,-0x6a8(%rbp)
    0.00 :	   44897:       00 
    0.00 :	   44898:       0f 85 57 49 00 00       jne    491f5 <_IO_vfprintf+0x4f35>
    0.00 :	   4489e:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   448a5:       be 25 00 00 00          mov    $0x25,%esi
    0.00 :	   448aa:       48 83 c2 01             add    $0x1,%rdx
    0.00 :	   448ae:       48 89 95 b8 f8 ff ff    mov    %rdx,-0x748(%rbp)
    0.00 :	   448b5:       48 89 d7                mov    %rdx,%rdi
    0.00 :	   448b8:       e8 43 13 04 00          callq  85c00 <strchrnul>
    0.00 :	   448bd:       45 85 ed                test   %r13d,%r13d
    0.00 :	   448c0:       48 89 85 80 fa ff ff    mov    %rax,-0x580(%rbp)
    0.00 :	   448c7:       0f 88 09 49 00 00       js     491d6 <_IO_vfprintf+0x4f16>
    0.00 :	   448cd:       4c 8b bd 80 fa ff ff    mov    -0x580(%rbp),%r15
    0.00 :	   448d4:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   448db:       00 
    0.00 :	   448dc:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   448df:       48 8b b5 b8 f8 ff ff    mov    -0x748(%rbp),%rsi
    0.00 :	   448e6:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   448e9:       48 2b 9d b8 f8 ff ff    sub    -0x748(%rbp),%rbx
    0.00 :	   448f0:       48 89 da                mov    %rbx,%rdx
    0.00 :	   448f3:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   448f6:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   448f9:       0f 85 40 24 00 00       jne    46d3f <_IO_vfprintf+0x2a7f>
    0.00 :	   448ff:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   44902:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44907:       48 29 d0                sub    %rdx,%rax
    0.00 :	   4490a:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   4490d:       0f 87 2c 24 00 00       ja     46d3f <_IO_vfprintf+0x2a7f>
    0.00 :	   44913:       45 01 fd                add    %r15d,%r13d
    0.00 :	   44916:       4c 8b bd 80 fa ff ff    mov    -0x580(%rbp),%r15
    0.00 :	   4491d:       44 2b ad b8 f8 ff ff    sub    -0x748(%rbp),%r13d
    0.00 :	   44924:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	   44928:       0f 84 63 26 00 00       je     46f91 <_IO_vfprintf+0x2cd1>
    0.00 :	   4492e:       83 85 6c f9 ff ff 01    addl   $0x1,-0x694(%rbp)
    0.00 :	   44935:       e9 d9 fc ff ff          jmpq   44613 <_IO_vfprintf+0x353>
    0.00 :	   4493a:       48 8b 95 58 f8 ff ff    mov    -0x7a8(%rbp),%rdx
    0.00 :	   44941:       48 8b 05 40 d4 32 00    mov    0x32d440(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   44948:       48 89 a5 18 f9 ff ff    mov    %rsp,-0x6e8(%rbp)
    0.00 :	   4494f:       48 8b 04 02             mov    (%rdx,%rax,1),%rax
    0.00 :	   44953:       48 8d 55 90             lea    -0x70(%rbp),%rdx
    0.00 :	   44957:       48 8b 00                mov    (%rax),%rax
    0.00 :	   4495a:       8b 80 a8 00 00 00       mov    0xa8(%rax),%eax
    0.00 :	   44960:       48 c7 45 90 00 00 00    movq   $0x0,-0x70(%rbp)
    0.00 :	   44967:       00 
    0.00 :	   44968:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   4496c:       48 c1 e8 04             shr    $0x4,%rax
    0.00 :	   44970:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44974:       48 29 c4                sub    %rax,%rsp
    0.00 :	   44977:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   4497e:       48 8d 4c 24 0f          lea    0xf(%rsp),%rcx
    0.00 :	   44983:       48 83 e1 f0             and    $0xfffffffffffffff0,%rcx
    0.00 :	   44987:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   4498b:       48 89 8d 98 f8 ff ff    mov    %rcx,-0x768(%rbp)
    0.00 :	   44992:       48 8d 0c c5 00 00 00    lea    0x0(,%rax,8),%rcx
    0.00 :	   44999:       00 
    0.00 :	   4499a:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   449a1:       48 01 c8                add    %rcx,%rax
    0.00 :	   449a4:       48 85 c0                test   %rax,%rax
    0.00 :	   449a7:       0f 84 f8 3a 00 00       je     484a5 <_IO_vfprintf+0x41e5>
    0.00 :	   449ad:       48 8b 9d 80 f9 ff ff    mov    -0x680(%rbp),%rbx
    0.00 :	   449b4:       48 8b bd 08 fa ff ff    mov    -0x5f8(%rbp),%rdi
    0.00 :	   449bb:       48 63 44 0b 30          movslq 0x30(%rbx,%rcx,1),%rax
    0.00 :	   449c0:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   449c4:       8b 34 07                mov    (%rdi,%rax,1),%esi
    0.00 :	   449c7:       48 8b bd 98 f8 ff ff    mov    -0x768(%rbp),%rdi
    0.00 :	   449ce:       e8 0d 86 04 00          callq  8cfe0 <wcrtomb>
    0.00 :	   449d3:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   449d7:       48 89 c3                mov    %rax,%rbx
    0.00 :	   449da:       0f 84 b3 3a 00 00       je     48493 <_IO_vfprintf+0x41d3>
    0.00 :	   449e0:       44 8b bd 64 fa ff ff    mov    -0x59c(%rbp),%r15d
    0.00 :	   449e7:       89 85 14 f9 ff ff       mov    %eax,-0x6ec(%rbp)
    0.00 :	   449ed:       41 29 c7                sub    %eax,%r15d
    0.00 :	   449f0:       8b 85 48 fa ff ff       mov    -0x5b8(%rbp),%eax
    0.00 :	   449f6:       85 c0                   test   %eax,%eax
    0.00 :	   449f8:       75 38                   jne    44a32 <_IO_vfprintf+0x772>
    0.00 :	   449fa:       45 85 ff                test   %r15d,%r15d
    0.00 :	   449fd:       7e 33                   jle    44a32 <_IO_vfprintf+0x772>
    0.00 :	   449ff:       49 63 d7                movslq %r15d,%rdx
    0.00 :	   44a02:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   44a07:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44a0a:       e8 31 38 02 00          callq  68240 <_IO_padn>
    0.00 :	   44a0f:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44a16:       0f 87 86 38 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   44a1c:       89 c2                   mov    %eax,%edx
    0.00 :	   44a1e:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44a23:       44 29 e8                sub    %r13d,%eax
    0.00 :	   44a26:       39 c2                   cmp    %eax,%edx
    0.00 :	   44a28:       0f 87 65 3a 00 00       ja     48493 <_IO_vfprintf+0x41d3>
    0.00 :	   44a2e:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44a32:       45 85 ed                test   %r13d,%r13d
    0.00 :	   44a35:       0f 88 c0 39 00 00       js     483fb <_IO_vfprintf+0x413b>
    0.00 :	   44a3b:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   44a42:       00 
    0.00 :	   44a43:       48 89 da                mov    %rbx,%rdx
    0.00 :	   44a46:       48 8b b5 98 f8 ff ff    mov    -0x768(%rbp),%rsi
    0.00 :	   44a4d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44a50:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   44a53:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   44a56:       0f 85 37 3a 00 00       jne    48493 <_IO_vfprintf+0x41d3>
    0.00 :	   44a5c:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   44a5f:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44a64:       48 29 d0                sub    %rdx,%rax
    0.00 :	   44a67:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   44a6a:       0f 87 23 3a 00 00       ja     48493 <_IO_vfprintf+0x41d3>
    0.00 :	   44a70:       8b 9d 48 fa ff ff       mov    -0x5b8(%rbp),%ebx
    0.00 :	   44a76:       44 03 ad 14 f9 ff ff    add    -0x6ec(%rbp),%r13d
    0.00 :	   44a7d:       85 db                   test   %ebx,%ebx
    0.00 :	   44a7f:       74 38                   je     44ab9 <_IO_vfprintf+0x7f9>
    0.00 :	   44a81:       45 85 ff                test   %r15d,%r15d
    0.00 :	   44a84:       7e 33                   jle    44ab9 <_IO_vfprintf+0x7f9>
    0.00 :	   44a86:       49 63 d7                movslq %r15d,%rdx
    0.00 :	   44a89:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   44a8e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44a91:       e8 aa 37 02 00          callq  68240 <_IO_padn>
    0.00 :	   44a96:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44a9d:       0f 87 ff 37 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   44aa3:       89 c2                   mov    %eax,%edx
    0.00 :	   44aa5:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44aaa:       44 29 e8                sub    %r13d,%eax
    0.00 :	   44aad:       39 c2                   cmp    %eax,%edx
    0.00 :	   44aaf:       0f 87 de 39 00 00       ja     48493 <_IO_vfprintf+0x41d3>
    0.00 :	   44ab5:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44ab9:       48 8b a5 18 f9 ff ff    mov    -0x6e8(%rbp),%rsp
    0.00 :	   44ac0:       48 8b bd 58 f9 ff ff    mov    -0x6a8(%rbp),%rdi
    0.00 :	   44ac7:       e8 d4 9d fd ff          callq  1e8a0 <free@plt>
    0.00 :	   44acc:       45 85 ed                test   %r13d,%r13d
    0.00 :	   44acf:       0f 88 61 39 00 00       js     48436 <_IO_vfprintf+0x4176>
    0.00 :	   44ad5:       48 63 9d 6c f9 ff ff    movslq -0x694(%rbp),%rbx
    0.00 :	   44adc:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   44ae3:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   44aea:       00 
    0.00 :	   44aeb:       48 8d 1c db             lea    (%rbx,%rbx,8),%rbx
    0.00 :	   44aef:       48 8d 1c df             lea    (%rdi,%rbx,8),%rbx
    0.00 :	   44af3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44af6:       48 8b 73 18             mov    0x18(%rbx),%rsi
    0.00 :	   44afa:       48 8b 53 20             mov    0x20(%rbx),%rdx
    0.00 :	   44afe:       48 29 f2                sub    %rsi,%rdx
    0.00 :	   44b01:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   44b04:       48 8b 7b 20             mov    0x20(%rbx),%rdi
    0.00 :	   44b08:       48 8b 4b 18             mov    0x18(%rbx),%rcx
    0.00 :	   44b0c:       48 89 c6                mov    %rax,%rsi
    0.00 :	   44b0f:       48 89 f8                mov    %rdi,%rax
    0.00 :	   44b12:       48 29 c8                sub    %rcx,%rax
    0.00 :	   44b15:       48 39 c6                cmp    %rax,%rsi
    0.00 :	   44b18:       0f 85 21 22 00 00       jne    46d3f <_IO_vfprintf+0x2a7f>
    0.00 :	   44b1e:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   44b21:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44b26:       48 29 d0                sub    %rdx,%rax
    0.00 :	   44b29:       48 39 c6                cmp    %rax,%rsi
    0.00 :	   44b2c:       0f 87 0d 22 00 00       ja     46d3f <_IO_vfprintf+0x2a7f>
    0.00 :	   44b32:       89 f8                   mov    %edi,%eax
    0.00 :	   44b34:       83 85 6c f9 ff ff 01    addl   $0x1,-0x694(%rbp)
    0.00 :	   44b3b:       29 c8                   sub    %ecx,%eax
    0.00 :	   44b3d:       46 8d 2c 28             lea    (%rax,%r13,1),%r13d
    0.00 :	   44b41:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   44b48:       48 39 85 f8 f9 ff ff    cmp    %rax,-0x608(%rbp)
    0.00 :	   44b4f:       0f 86 3c 24 00 00       jbe    46f91 <_IO_vfprintf+0x2cd1>
    0.00 :	   44b55:       48 8b 95 80 f9 ff ff    mov    -0x680(%rbp),%rdx
    0.00 :	   44b5c:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   44b60:       4c 8d 3c c2             lea    (%rdx,%rax,8),%r15
    0.00 :	   44b64:       41 0f b6 57 0c          movzbl 0xc(%r15),%edx
    0.00 :	   44b69:       89 d0                   mov    %edx,%eax
    0.00 :	   44b6b:       89 d1                   mov    %edx,%ecx
    0.00 :	   44b6d:       89 d3                   mov    %edx,%ebx
    0.00 :	   44b6f:       c0 e8 05                shr    $0x5,%al
    0.00 :	   44b72:       c0 e9 03                shr    $0x3,%cl
    0.00 :	   44b75:       c0 eb 04                shr    $0x4,%bl
    0.00 :	   44b78:       89 c7                   mov    %eax,%edi
    0.00 :	   44b7a:       89 d0                   mov    %edx,%eax
    0.00 :	   44b7c:       83 e1 01                and    $0x1,%ecx
    0.00 :	   44b7f:       c0 e8 06                shr    $0x6,%al
    0.00 :	   44b82:       83 e3 01                and    $0x1,%ebx
    0.00 :	   44b85:       88 8d f7 f8 ff ff       mov    %cl,-0x709(%rbp)
    0.00 :	   44b8b:       83 e0 01                and    $0x1,%eax
    0.00 :	   44b8e:       88 9d f8 f8 ff ff       mov    %bl,-0x708(%rbp)
    0.00 :	   44b94:       89 d1                   mov    %edx,%ecx
    0.00 :	   44b96:       88 85 f9 f8 ff ff       mov    %al,-0x707(%rbp)
    0.00 :	   44b9c:       89 d0                   mov    %edx,%eax
    0.00 :	   44b9e:       89 d3                   mov    %edx,%ebx
    0.00 :	   44ba0:       d0 e8                   shr    %al
    0.00 :	   44ba2:       83 e7 01                and    $0x1,%edi
    0.00 :	   44ba5:       c0 e9 07                shr    $0x7,%cl
    0.00 :	   44ba8:       83 e3 01                and    $0x1,%ebx
    0.00 :	   44bab:       83 e0 01                and    $0x1,%eax
    0.00 :	   44bae:       88 8d fa f8 ff ff       mov    %cl,-0x706(%rbp)
    0.00 :	   44bb4:       88 9d fb f8 ff ff       mov    %bl,-0x705(%rbp)
    0.00 :	   44bba:       89 bd 48 fa ff ff       mov    %edi,-0x5b8(%rbp)
    0.00 :	   44bc0:       89 d3                   mov    %edx,%ebx
    0.00 :	   44bc2:       88 85 fc f8 ff ff       mov    %al,-0x704(%rbp)
    0.00 :	   44bc8:       41 0f b6 47 0d          movzbl 0xd(%r15),%eax
    0.00 :	   44bcd:       c0 eb 02                shr    $0x2,%bl
    0.00 :	   44bd0:       83 e3 01                and    $0x1,%ebx
    0.00 :	   44bd3:       88 9d fe f8 ff ff       mov    %bl,-0x702(%rbp)
    0.00 :	   44bd9:       89 c1                   mov    %eax,%ecx
    0.00 :	   44bdb:       c0 e8 03                shr    $0x3,%al
    0.00 :	   44bde:       d0 e9                   shr    %cl
    0.00 :	   44be0:       83 e0 01                and    $0x1,%eax
    0.00 :	   44be3:       83 e1 01                and    $0x1,%ecx
    0.00 :	   44be6:       88 8d fd f8 ff ff       mov    %cl,-0x703(%rbp)
    0.00 :	   44bec:       41 8b 7f 04             mov    0x4(%r15),%edi
    0.00 :	   44bf0:       89 bd 64 fa ff ff       mov    %edi,-0x59c(%rbp)
    0.00 :	   44bf6:       41 8b 0f                mov    (%r15),%ecx
    0.00 :	   44bf9:       88 85 ff f8 ff ff       mov    %al,-0x701(%rbp)
    0.00 :	   44bff:       89 8d 68 fa ff ff       mov    %ecx,-0x598(%rbp)
    0.00 :	   44c05:       41 8b 5f 10             mov    0x10(%r15),%ebx
    0.00 :	   44c09:       89 9d 00 f9 ff ff       mov    %ebx,-0x700(%rbp)
    0.00 :	   44c0f:       41 0f b6 7f 08          movzbl 0x8(%r15),%edi
    0.00 :	   44c14:       40 88 bd 73 fa ff ff    mov    %dil,-0x58d(%rbp)
    0.00 :	   44c1b:       41 8b 47 2c             mov    0x2c(%r15),%eax
    0.00 :	   44c1f:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	   44c22:       74 26                   je     44c4a <_IO_vfprintf+0x98a>
    0.00 :	   44c24:       48 8b 8d 08 fa ff ff    mov    -0x5f8(%rbp),%rcx
    0.00 :	   44c2b:       48 98                   cltq   
    0.00 :	   44c2d:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44c31:       8b 04 01                mov    (%rcx,%rax,1),%eax
    0.00 :	   44c34:       85 c0                   test   %eax,%eax
    0.00 :	   44c36:       41 89 47 04             mov    %eax,0x4(%r15)
    0.00 :	   44c3a:       0f 88 da 37 00 00       js     4841a <_IO_vfprintf+0x415a>
    0.00 :	   44c40:       41 8b 5f 04             mov    0x4(%r15),%ebx
    0.00 :	   44c44:       89 9d 64 fa ff ff       mov    %ebx,-0x59c(%rbp)
    0.00 :	   44c4a:       41 8b 47 28             mov    0x28(%r15),%eax
    0.00 :	   44c4e:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	   44c51:       74 23                   je     44c76 <_IO_vfprintf+0x9b6>
    0.00 :	   44c53:       48 8b bd 08 fa ff ff    mov    -0x5f8(%rbp),%rdi
    0.00 :	   44c5a:       48 98                   cltq   
    0.00 :	   44c5c:       ba ff ff ff ff          mov    $0xffffffff,%edx
    0.00 :	   44c61:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44c65:       8b 04 07                mov    (%rdi,%rax,1),%eax
    0.00 :	   44c68:       85 c0                   test   %eax,%eax
    0.00 :	   44c6a:       0f 48 c2                cmovs  %edx,%eax
    0.00 :	   44c6d:       41 89 07                mov    %eax,(%r15)
    0.00 :	   44c70:       89 85 68 fa ff ff       mov    %eax,-0x598(%rbp)
    0.00 :	   44c76:       8b 8d 64 fa ff ff       mov    -0x59c(%rbp),%ecx
    0.00 :	   44c7c:       39 8d 68 fa ff ff       cmp    %ecx,-0x598(%rbp)
    0.00 :	   44c82:       0f 4d 8d 68 fa ff ff    cmovge -0x598(%rbp),%ecx
    0.00 :	   44c89:       48 8b 9d c8 fa ff ff    mov    -0x538(%rbp),%rbx
    0.00 :	   44c90:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   44c97:       00 00 00 00 
    0.00 :	   44c9b:       48 89 9d 60 f9 ff ff    mov    %rbx,-0x6a0(%rbp)
    0.00 :	   44ca2:       81 f9 c8 03 00 00       cmp    $0x3c8,%ecx
    0.00 :	   44ca8:       89 8d 04 f9 ff ff       mov    %ecx,-0x6fc(%rbp)
    0.00 :	   44cae:       7e 4b                   jle    44cfb <_IO_vfprintf+0xa3b>
    0.00 :	   44cb0:       8b 85 04 f9 ff ff       mov    -0x6fc(%rbp),%eax
    0.00 :	   44cb6:       83 c0 20                add    $0x20,%eax
    0.00 :	   44cb9:       48 63 d8                movslq %eax,%rbx
    0.00 :	   44cbc:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   44cc3:       0f 87 8c 37 00 00       ja     48455 <_IO_vfprintf+0x4195>
    0.00 :	   44cc9:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   44ccd:       48 63 95 04 f9 ff ff    movslq -0x6fc(%rbp),%rdx
    0.00 :	   44cd4:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   44cdb:       00 00 00 00 
    0.00 :	   44cdf:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   44ce3:       48 29 c4                sub    %rax,%rsp
    0.00 :	   44ce6:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   44ceb:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   44cef:       48 8d 54 10 20          lea    0x20(%rax,%rdx,1),%rdx
    0.00 :	   44cf4:       48 89 95 60 f9 ff ff    mov    %rdx,-0x6a0(%rbp)
    0.00 :	   44cfb:       48 8b 0d e6 26 33 00    mov    0x3326e6(%rip),%rcx        # 3773e8 <__printf_function_table>
    0.00 :	   44d02:       48 85 c9                test   %rcx,%rcx
    0.00 :	   44d05:       0f 84 f2 38 00 00       je     485fd <_IO_vfprintf+0x433d>
    0.00 :	   44d0b:       4c 0f be 85 73 fa ff    movsbq -0x58d(%rbp),%r8
    0.00 :	   44d12:       ff 
    0.00 :	   44d13:       4a 83 3c c1 00          cmpq   $0x0,(%rcx,%r8,8)
    0.00 :	   44d18:       0f 84 df 38 00 00       je     485fd <_IO_vfprintf+0x433d>
    0.00 :	   44d1e:       49 8b 47 38             mov    0x38(%r15),%rax
    0.00 :	   44d22:       48 8d 04 c5 1e 00 00    lea    0x1e(,%rax,8),%rax
    0.00 :	   44d29:       00 
    0.00 :	   44d2a:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   44d2e:       48 29 c4                sub    %rax,%rsp
    0.00 :	   44d31:       48 8d 54 24 0f          lea    0xf(%rsp),%rdx
    0.00 :	   44d36:       48 83 e2 f0             and    $0xfffffffffffffff0,%rdx
    0.00 :	   44d3a:       49 83 7f 38 00          cmpq   $0x0,0x38(%r15)
    0.00 :	   44d3f:       74 2b                   je     44d6c <_IO_vfprintf+0xaac>
    0.00 :	   44d41:       31 f6                   xor    %esi,%esi
    0.00 :	   44d43:       31 c9                   xor    %ecx,%ecx
    0.00 :	   44d45:       89 f0                   mov    %esi,%eax
    0.00 :	   44d47:       41 03 47 30             add    0x30(%r15),%eax
    0.00 :	   44d4b:       83 c6 01                add    $0x1,%esi
    0.00 :	   44d4e:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44d52:       48 03 85 08 fa ff ff    add    -0x5f8(%rbp),%rax
    0.00 :	   44d59:       48 89 04 ca             mov    %rax,(%rdx,%rcx,8)
    0.00 :	   44d5d:       89 f1                   mov    %esi,%ecx
    0.00 :	   44d5f:       49 3b 4f 38             cmp    0x38(%r15),%rcx
    0.00 :	   44d63:       72 e0                   jb     44d45 <_IO_vfprintf+0xa85>
    0.00 :	   44d65:       48 8b 0d 7c 26 33 00    mov    0x33267c(%rip),%rcx        # 3773e8 <__printf_function_table>
    0.00 :	   44d6c:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   44d6f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44d72:       42 ff 14 c1             callq  *(%rcx,%r8,8)
    0.00 :	   44d76:       83 f8 fe                cmp    $0xfffffffe,%eax
    0.00 :	   44d79:       89 c2                   mov    %eax,%edx
    0.00 :	   44d7b:       0f 84 7c 38 00 00       je     485fd <_IO_vfprintf+0x433d>
    0.00 :	   44d81:       85 c0                   test   %eax,%eax
    0.00 :	   44d83:       0f 88 48 1b 00 00       js     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   44d89:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44d90:       0f 86 1d 01 00 00       jbe    44eb3 <_IO_vfprintf+0xbf3>
    0.00 :	   44d96:       48 8d 0d 73 db 0f 00    lea    0xfdb73(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   44d9d:       48 8d 35 32 5f 0f 00    lea    0xf5f32(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   44da4:       48 8d 3d e5 9a 0f 00    lea    0xf9ae5(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   44dab:       ba ae 07 00 00          mov    $0x7ae,%edx
    0.00 :	   44db0:       e8 6b 6b fe ff          callq  2b920 <__assert_fail>
    0.00 :	   44db5:       0f 1f 00                nopl   (%rax)
    0.00 :	   44db8:       8b 85 60 fa ff ff       mov    -0x5a0(%rbp),%eax
    0.00 :	   44dbe:       85 c0                   test   %eax,%eax
    0.00 :	   44dc0:       0f 85 74 fb ff ff       jne    4493a <_IO_vfprintf+0x67a>
    0.00 :	   44dc6:       8b 9d 64 fa ff ff       mov    -0x59c(%rbp),%ebx
    0.00 :	   44dcc:       8b 85 48 fa ff ff       mov    -0x5b8(%rbp),%eax
    0.00 :	   44dd2:       83 eb 01                sub    $0x1,%ebx
    0.00 :	   44dd5:       85 c0                   test   %eax,%eax
    0.00 :	   44dd7:       75 37                   jne    44e10 <_IO_vfprintf+0xb50>
    0.00 :	   44dd9:       85 db                   test   %ebx,%ebx
    0.00 :	   44ddb:       7e 33                   jle    44e10 <_IO_vfprintf+0xb50>
    0.00 :	   44ddd:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   44de0:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   44de5:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44de8:       e8 53 34 02 00          callq  68240 <_IO_padn>
    0.00 :	   44ded:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44df4:       0f 87 a8 34 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   44dfa:       89 c2                   mov    %eax,%edx
    0.00 :	   44dfc:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44e01:       44 29 e8                sub    %r13d,%eax
    0.00 :	   44e04:       39 c2                   cmp    %eax,%edx
    0.00 :	   44e06:       0f 87 c5 1a 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   44e0c:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44e10:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   44e17:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   44e1b:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   44e22:       00 
    0.00 :	   44e23:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   44e2a:       48 01 d0                add    %rdx,%rax
    0.00 :	   44e2d:       48 85 c0                test   %rax,%rax
    0.00 :	   44e30:       0f 84 2f 37 00 00       je     48565 <_IO_vfprintf+0x42a5>
    0.00 :	   44e36:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   44e3d:       48 8b bd 08 fa ff ff    mov    -0x5f8(%rbp),%rdi
    0.00 :	   44e44:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   44e49:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44e4d:       0f b6 34 07             movzbl (%rdi,%rax,1),%esi
    0.00 :	   44e51:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   44e56:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   44e5b:       0f 83 ec 36 00 00       jae    4854d <_IO_vfprintf+0x428d>
    0.00 :	   44e61:       40 88 30                mov    %sil,(%rax)
    0.00 :	   44e64:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   44e68:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   44e6d:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   44e74:       0f 84 57 1a 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   44e7a:       8b 85 48 fa ff ff       mov    -0x5b8(%rbp),%eax
    0.00 :	   44e80:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   44e84:       85 c0                   test   %eax,%eax
    0.00 :	   44e86:       0f 84 34 fc ff ff       je     44ac0 <_IO_vfprintf+0x800>
    0.00 :	   44e8c:       85 db                   test   %ebx,%ebx
    0.00 :	   44e8e:       0f 8e 2c fc ff ff       jle    44ac0 <_IO_vfprintf+0x800>
    0.00 :	   44e94:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   44e97:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   44e9c:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44e9f:       e8 9c 33 02 00          callq  68240 <_IO_padn>
    0.00 :	   44ea4:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44eab:       0f 87 f1 33 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   44eb1:       89 c2                   mov    %eax,%edx
    0.00 :	   44eb3:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44eb8:       44 29 e8                sub    %r13d,%eax
    0.00 :	   44ebb:       39 c2                   cmp    %eax,%edx
    0.00 :	   44ebd:       0f 87 0e 1a 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   44ec3:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   44ec7:       e9 f4 fb ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   44ecc:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   44ed3:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   44ed7:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   44ede:       00 
    0.00 :	   44edf:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   44ee6:       48 01 d0                add    %rdx,%rax
    0.00 :	   44ee9:       48 85 c0                test   %rax,%rax
    0.00 :	   44eec:       0f 84 9a 3a 00 00       je     4898c <_IO_vfprintf+0x46cc>
    0.00 :	   44ef2:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   44ef9:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   44f00:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   44f05:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   44f09:       4c 8b 3c 03             mov    (%rbx,%rax,1),%r15
    0.00 :	   44f0d:       4d 85 ff                test   %r15,%r15
    0.00 :	   44f10:       0f 84 cc 2c 00 00       je     47be2 <_IO_vfprintf+0x3922>
    0.00 :	   44f16:       44 8b 9d 60 fa ff ff    mov    -0x5a0(%rbp),%r11d
    0.00 :	   44f1d:       45 85 db                test   %r11d,%r11d
    0.00 :	   44f20:       0f 84 da 24 00 00       je     47400 <_IO_vfprintf+0x3140>
    0.00 :	   44f26:       48 8b 9d 30 f8 ff ff    mov    -0x7d0(%rbp),%rbx
    0.00 :	   44f2d:       4c 89 bd 78 ff ff ff    mov    %r15,-0x88(%rbp)
    0.00 :	   44f34:       48 c7 03 00 00 00 00    movq   $0x0,(%rbx)
    0.00 :	   44f3b:       44 8b 95 68 fa ff ff    mov    -0x598(%rbp),%r10d
    0.00 :	   44f42:       45 85 d2                test   %r10d,%r10d
    0.00 :	   44f45:       0f 88 a6 3b 00 00       js     48af1 <_IO_vfprintf+0x4831>
    0.00 :	   44f4b:       48 63 9d 68 fa ff ff    movslq -0x598(%rbp),%rbx
    0.00 :	   44f52:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   44f59:       0f 87 61 35 00 00       ja     484c0 <_IO_vfprintf+0x4200>
    0.00 :	   44f5f:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   44f63:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   44f6a:       00 00 00 
    0.00 :	   44f6d:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   44f71:       48 29 c4                sub    %rax,%rsp
    0.00 :	   44f74:       4c 8d 7c 24 0f          lea    0xf(%rsp),%r15
    0.00 :	   44f79:       49 83 e7 f0             and    $0xfffffffffffffff0,%r15
    0.00 :	   44f7d:       48 8b 8d 30 f8 ff ff    mov    -0x7d0(%rbp),%rcx
    0.00 :	   44f84:       48 8d b5 78 ff ff ff    lea    -0x88(%rbp),%rsi
    0.00 :	   44f8b:       48 89 da                mov    %rbx,%rdx
    0.00 :	   44f8e:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   44f91:       e8 da 82 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   44f96:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   44f9a:       48 89 c3                mov    %rax,%rbx
    0.00 :	   44f9d:       0f 84 2e 19 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   44fa3:       89 9d 88 fa ff ff       mov    %ebx,-0x578(%rbp)
    0.00 :	   44fa9:       8b 95 64 fa ff ff       mov    -0x59c(%rbp),%edx
    0.00 :	   44faf:       2b 95 88 fa ff ff       sub    -0x578(%rbp),%edx
    0.00 :	   44fb5:       89 95 34 f9 ff ff       mov    %edx,-0x6cc(%rbp)
    0.00 :	   44fbb:       0f 88 e0 2d 00 00       js     47da1 <_IO_vfprintf+0x3ae1>
    0.00 :	   44fc1:       44 8b 85 48 fa ff ff    mov    -0x5b8(%rbp),%r8d
    0.00 :	   44fc8:       45 85 c0                test   %r8d,%r8d
    0.00 :	   44fcb:       75 41                   jne    4500e <_IO_vfprintf+0xd4e>
    0.00 :	   44fcd:       8b bd 34 f9 ff ff       mov    -0x6cc(%rbp),%edi
    0.00 :	   44fd3:       85 ff                   test   %edi,%edi
    0.00 :	   44fd5:       74 37                   je     4500e <_IO_vfprintf+0xd4e>
    0.00 :	   44fd7:       48 63 95 34 f9 ff ff    movslq -0x6cc(%rbp),%rdx
    0.00 :	   44fde:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   44fe3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   44fe6:       e8 55 32 02 00          callq  68240 <_IO_padn>
    0.00 :	   44feb:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   44ff2:       0f 87 aa 32 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   44ff8:       89 c2                   mov    %eax,%edx
    0.00 :	   44ffa:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   44fff:       44 29 e8                sub    %r13d,%eax
    0.00 :	   45002:       39 c2                   cmp    %eax,%edx
    0.00 :	   45004:       0f 87 c7 18 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4500a:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   4500e:       45 85 ed                test   %r13d,%r13d
    0.00 :	   45011:       0f 88 e4 33 00 00       js     483fb <_IO_vfprintf+0x413b>
    0.00 :	   45017:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   4501e:       00 
    0.00 :	   4501f:       48 89 da                mov    %rbx,%rdx
    0.00 :	   45022:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   45025:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45028:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   4502b:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   4502e:       0f 85 9d 18 00 00       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45034:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   45037:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   4503c:       48 29 d0                sub    %rdx,%rax
    0.00 :	   4503f:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   45042:       0f 87 89 18 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45048:       8b b5 48 fa ff ff       mov    -0x5b8(%rbp),%esi
    0.00 :	   4504e:       44 03 ad 88 fa ff ff    add    -0x578(%rbp),%r13d
    0.00 :	   45055:       85 f6                   test   %esi,%esi
    0.00 :	   45057:       74 41                   je     4509a <_IO_vfprintf+0xdda>
    0.00 :	   45059:       8b 8d 34 f9 ff ff       mov    -0x6cc(%rbp),%ecx
    0.00 :	   4505f:       85 c9                   test   %ecx,%ecx
    0.00 :	   45061:       74 37                   je     4509a <_IO_vfprintf+0xdda>
    0.00 :	   45063:       48 63 95 34 f9 ff ff    movslq -0x6cc(%rbp),%rdx
    0.00 :	   4506a:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   4506f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45072:       e8 c9 31 02 00          callq  68240 <_IO_padn>
    0.00 :	   45077:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   4507e:       0f 87 1e 32 00 00       ja     482a2 <_IO_vfprintf+0x3fe2>
    0.00 :	   45084:       89 c2                   mov    %eax,%edx
    0.00 :	   45086:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   4508b:       44 29 e8                sub    %r13d,%eax
    0.00 :	   4508e:       39 c2                   cmp    %eax,%edx
    0.00 :	   45090:       0f 87 3b 18 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45096:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   4509a:       8b 95 74 fa ff ff       mov    -0x58c(%rbp),%edx
    0.00 :	   450a0:       85 d2                   test   %edx,%edx
    0.00 :	   450a2:       0f 84 18 fa ff ff       je     44ac0 <_IO_vfprintf+0x800>
    0.00 :	   450a8:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   450ab:       e8 f0 97 fd ff          callq  1e8a0 <free@plt>
    0.00 :	   450b0:       e9 0b fa ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   450b5:       0f 1f 00                nopl   (%rax)
    0.00 :	   450b8:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   450bf:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   450c6:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   450ca:       48 8d 04 c1             lea    (%rcx,%rax,8),%rax
    0.00 :	   450ce:       48 89 85 d8 fa ff ff    mov    %rax,-0x528(%rbp)
    0.00 :	   450d5:       48 89 c3                mov    %rax,%rbx
    0.00 :	   450d8:       48 8b 40 38             mov    0x38(%rax),%rax
    0.00 :	   450dc:       48 8d 04 c5 1e 00 00    lea    0x1e(,%rax,8),%rax
    0.00 :	   450e3:       00 
    0.00 :	   450e4:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   450e8:       48 29 c4                sub    %rax,%rsp
    0.00 :	   450eb:       48 8d 74 24 0f          lea    0xf(%rsp),%rsi
    0.00 :	   450f0:       48 83 e6 f0             and    $0xfffffffffffffff0,%rsi
    0.00 :	   450f4:       48 83 7b 38 00          cmpq   $0x0,0x38(%rbx)
    0.00 :	   450f9:       74 2a                   je     45125 <_IO_vfprintf+0xe65>
    0.00 :	   450fb:       31 c9                   xor    %ecx,%ecx
    0.00 :	   450fd:       31 d2                   xor    %edx,%edx
    0.00 :	   450ff:       48 8b bd d8 fa ff ff    mov    -0x528(%rbp),%rdi
    0.00 :	   45106:       89 c8                   mov    %ecx,%eax
    0.00 :	   45108:       83 c1 01                add    $0x1,%ecx
    0.00 :	   4510b:       03 47 30                add    0x30(%rdi),%eax
    0.00 :	   4510e:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   45112:       48 03 85 08 fa ff ff    add    -0x5f8(%rbp),%rax
    0.00 :	   45119:       48 89 04 d6             mov    %rax,(%rsi,%rdx,8)
    0.00 :	   4511d:       89 ca                   mov    %ecx,%edx
    0.00 :	   4511f:       48 3b 57 38             cmp    0x38(%rdi),%rdx
    0.00 :	   45123:       72 da                   jb     450ff <_IO_vfprintf+0xe3f>
    0.00 :	   45125:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4512a:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4512f:       0f 83 71 37 00 00       jae    488a6 <_IO_vfprintf+0x45e6>
    0.00 :	   45135:       c6 00 25                movb   $0x25,(%rax)
    0.00 :	   45138:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4513c:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   45141:       48 8b 95 d8 fa ff ff    mov    -0x528(%rbp),%rdx
    0.00 :	   45148:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	   4514d:       0f b6 42 0c             movzbl 0xc(%rdx),%eax
    0.00 :	   45151:       a8 08                   test   $0x8,%al
    0.00 :	   45153:       0f 85 7a 30 00 00       jne    481d3 <_IO_vfprintf+0x3f13>
    0.00 :	   45159:       84 c0                   test   %al,%al
    0.00 :	   4515b:       0f 88 a3 30 00 00       js     48204 <_IO_vfprintf+0x3f44>
    0.00 :	   45161:       a8 40                   test   $0x40,%al
    0.00 :	   45163:       0f 85 e8 2f 00 00       jne    48151 <_IO_vfprintf+0x3e91>
    0.00 :	   45169:       a8 10                   test   $0x10,%al
    0.00 :	   4516b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   45170:       0f 85 cc 35 00 00       jne    48742 <_IO_vfprintf+0x4482>
    0.00 :	   45176:       a8 20                   test   $0x20,%al
    0.00 :	   45178:       0f 85 ca 2d 00 00       jne    47f48 <_IO_vfprintf+0x3c88>
    0.00 :	   4517e:       48 8b 85 d8 fa ff ff    mov    -0x528(%rbp),%rax
    0.00 :	   45185:       83 78 10 30             cmpl   $0x30,0x10(%rax)
    0.00 :	   45189:       0f 84 65 35 00 00       je     486f4 <_IO_vfprintf+0x4434>
    0.00 :	   4518f:       48 8b 95 d8 fa ff ff    mov    -0x528(%rbp),%rdx
    0.00 :	   45196:       f6 42 0d 08             testb  $0x8,0xd(%rdx)
    0.00 :	   4519a:       0f 85 34 35 00 00       jne    486d4 <_IO_vfprintf+0x4414>
    0.00 :	   451a0:       48 8b 8d d8 fa ff ff    mov    -0x528(%rbp),%rcx
    0.00 :	   451a7:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	   451aa:       85 c0                   test   %eax,%eax
    0.00 :	   451ac:       0f 85 f8 40 00 00       jne    492aa <_IO_vfprintf+0x4fea>
    0.00 :	   451b2:       48 8b bd d8 fa ff ff    mov    -0x528(%rbp),%rdi
    0.00 :	   451b9:       83 3f ff                cmpl   $0xffffffff,(%rdi)
    0.00 :	   451bc:       0f 84 25 2c 00 00       je     47de7 <_IO_vfprintf+0x3b27>
    0.00 :	   451c2:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   451c7:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   451cc:       0f 83 00 42 00 00       jae    493d2 <_IO_vfprintf+0x5112>
    0.00 :	   451d2:       c6 00 2e                movb   $0x2e,(%rax)
    0.00 :	   451d5:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   451d9:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   451de:       81 fb ff ff ff 7f       cmp    $0x7fffffff,%ebx
    0.00 :	   451e4:       0f 84 e7 16 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   451ea:       48 8b 85 d8 fa ff ff    mov    -0x528(%rbp),%rax
    0.00 :	   451f1:       48 8b b5 28 f8 ff ff    mov    -0x7d8(%rbp),%rsi
    0.00 :	   451f8:       31 c9                   xor    %ecx,%ecx
    0.00 :	   451fa:       ba 0a 00 00 00          mov    $0xa,%edx
    0.00 :	   451ff:       83 c3 01                add    $0x1,%ebx
    0.00 :	   45202:       48 63 38                movslq (%rax),%rdi
    0.00 :	   45205:       e8 c6 ea ff ff          callq  43cd0 <_itoa_word>
    0.00 :	   4520a:       48 39 85 28 f8 ff ff    cmp    %rax,-0x7d8(%rbp)
    0.00 :	   45211:       49 89 c7                mov    %rax,%r15
    0.00 :	   45214:       77 35                   ja     4524b <_IO_vfprintf+0xf8b>
    0.00 :	   45216:       e9 cc 2b 00 00          jmpq   47de7 <_IO_vfprintf+0x3b27>
    0.00 :	   4521b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   45220:       88 10                   mov    %dl,(%rax)
    0.00 :	   45222:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   45226:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4522b:       81 fb ff ff ff 7f       cmp    $0x7fffffff,%ebx
    0.00 :	   45231:       0f 84 9a 16 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45237:       49 83 c7 01             add    $0x1,%r15
    0.00 :	   4523b:       83 c3 01                add    $0x1,%ebx
    0.00 :	   4523e:       4c 39 bd 28 f8 ff ff    cmp    %r15,-0x7d8(%rbp)
    0.00 :	   45245:       0f 86 9c 2b 00 00       jbe    47de7 <_IO_vfprintf+0x3b27>
    0.00 :	   4524b:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   45250:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   45255:       41 0f b6 17             movzbl (%r15),%edx
    0.00 :	   45259:       72 c5                   jb     45220 <_IO_vfprintf+0xf60>
    0.00 :	   4525b:       0f b6 f2                movzbl %dl,%esi
    0.00 :	   4525e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45261:       e8 3a eb 02 00          callq  73da0 <__overflow>
    0.00 :	   45266:       83 c0 01                add    $0x1,%eax
    0.00 :	   45269:       75 c0                   jne    4522b <_IO_vfprintf+0xf6b>
    0.00 :	   4526b:       e9 61 16 00 00          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45270:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45277:       01 
    0.00 :	   45278:       48 8d 15 5b 0a 00 00    lea    0xa5b(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4527f:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   45286:       0f b6 1b                movzbl (%rbx),%ebx
    0.00 :	   45289:       89 d8                   mov    %ebx,%eax
    0.00 :	   4528b:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   45291:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45294:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45296:       77 2c                   ja     452c4 <_IO_vfprintf+0x1004>
    0.00 :	   45298:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   4529f:       48 8d 15 da fb 0e 00    lea    0xefbda(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   452a6:       83 e8 20                sub    $0x20,%eax
    0.00 :	   452a9:       48 98                   cltq   
    0.00 :	   452ab:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   452af:       48 8d 05 4a fb 0e 00    lea    0xefb4a(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   452b6:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   452ba:       48 8d 15 19 0a 00 00    lea    0xa19(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   452c1:       48 01 c2                add    %rax,%rdx
    0.00 :	   452c4:       c7 85 a8 f9 ff ff 01    movl   $0x1,-0x658(%rbp)
    0.00 :	   452cb:       00 00 00 
    0.00 :	   452ce:       ff e2                   jmpq   *%rdx
    0.00 :	   452d0:       48 83 bd 40 f9 ff ff    cmpq   $0xffffffffffffffff,-0x6c0(%rbp)
    0.00 :	   452d7:       ff 
    0.00 :	   452d8:       0f 84 6f 3c 00 00       je     48f4d <_IO_vfprintf+0x4c8d>
    0.00 :	   452de:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   452e5:       01 
    0.00 :	   452e6:       48 8d 15 ed 09 00 00    lea    0x9ed(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   452ed:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   452f4:       0f b6 1b                movzbl (%rbx),%ebx
    0.00 :	   452f7:       89 d8                   mov    %ebx,%eax
    0.00 :	   452f9:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   452ff:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45302:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45304:       77 2c                   ja     45332 <_IO_vfprintf+0x1072>
    0.00 :	   45306:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   4530d:       48 8d 15 6c fb 0e 00    lea    0xefb6c(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45314:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45317:       48 98                   cltq   
    0.00 :	   45319:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   4531d:       48 8d 05 dc fa 0e 00    lea    0xefadc(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45324:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45328:       48 8d 15 ab 09 00 00    lea    0x9ab(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4532f:       48 01 c2                add    %rax,%rdx
    0.00 :	   45332:       c7 85 b4 f9 ff ff 01    movl   $0x1,-0x64c(%rbp)
    0.00 :	   45339:       00 00 00 
    0.00 :	   4533c:       ff e2                   jmpq   *%rdx
    0.00 :	   4533e:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45345:       01 
    0.00 :	   45346:       48 8d 15 8d 09 00 00    lea    0x98d(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4534d:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   45354:       0f b6 3f                movzbl (%rdi),%edi
    0.00 :	   45357:       89 f8                   mov    %edi,%eax
    0.00 :	   45359:       40 88 bd eb f9 ff ff    mov    %dil,-0x615(%rbp)
    0.00 :	   45360:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45363:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45365:       77 2c                   ja     45393 <_IO_vfprintf+0x10d3>
    0.00 :	   45367:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   4536e:       48 8d 15 0b fb 0e 00    lea    0xefb0b(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45375:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45378:       48 98                   cltq   
    0.00 :	   4537a:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   4537e:       48 8d 05 7b fa 0e 00    lea    0xefa7b(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45385:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45389:       48 8d 15 4a 09 00 00    lea    0x94a(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45390:       48 01 c2                add    %rax,%rdx
    0.00 :	   45393:       c7 85 cc f9 ff ff 01    movl   $0x1,-0x634(%rbp)
    0.00 :	   4539a:       00 00 00 
    0.00 :	   4539d:       ff e2                   jmpq   *%rdx
    0.00 :	   4539f:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   453a6:       01 
    0.00 :	   453a7:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   453ae:       0f b6 02                movzbl (%rdx),%eax
    0.00 :	   453b1:       8d 50 d0                lea    -0x30(%rax),%edx
    0.00 :	   453b4:       83 fa 09                cmp    $0x9,%edx
    0.00 :	   453b7:       77 4a                   ja     45403 <_IO_vfprintf+0x1143>
    0.00 :	   453b9:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   453c0:       48 8b b5 48 f9 ff ff    mov    -0x6b8(%rbp),%rsi
    0.00 :	   453c7:       0f b6 4b 01             movzbl 0x1(%rbx),%ecx
    0.00 :	   453cb:       48 83 c6 01             add    $0x1,%rsi
    0.00 :	   453cf:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   453d2:       83 e8 30                sub    $0x30,%eax
    0.00 :	   453d5:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   453d8:       77 1c                   ja     453f6 <_IO_vfprintf+0x1136>
    0.00 :	   453da:       48 83 c6 01             add    $0x1,%rsi
    0.00 :	   453de:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   453e1:       8d 14 92                lea    (%rdx,%rdx,4),%edx
    0.00 :	   453e4:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   453e7:       8d 54 50 d0             lea    -0x30(%rax,%rdx,2),%edx
    0.00 :	   453eb:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   453ee:       83 e8 30                sub    $0x30,%eax
    0.00 :	   453f1:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   453f4:       76 e4                   jbe    453da <_IO_vfprintf+0x111a>
    0.00 :	   453f6:       85 d2                   test   %edx,%edx
    0.00 :	   453f8:       74 09                   je     45403 <_IO_vfprintf+0x1143>
    0.00 :	   453fa:       80 f9 24                cmp    $0x24,%cl
    0.00 :	   453fd:       0f 84 e4 08 00 00       je     45ce7 <_IO_vfprintf+0x1a27>
    0.00 :	   45403:       41 8b 06                mov    (%r14),%eax
    0.00 :	   45406:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   45409:       0f 83 d5 23 00 00       jae    477e4 <_IO_vfprintf+0x3524>
    0.00 :	   4540f:       89 c2                   mov    %eax,%edx
    0.00 :	   45411:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   45415:       83 c0 08                add    $0x8,%eax
    0.00 :	   45418:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4541b:       8b 12                   mov    (%rdx),%edx
    0.00 :	   4541d:       85 d2                   test   %edx,%edx
    0.00 :	   4541f:       89 95 b8 fa ff ff       mov    %edx,-0x548(%rbp)
    0.00 :	   45425:       79 19                   jns    45440 <_IO_vfprintf+0x1180>
    0.00 :	   45427:       f7 da                   neg    %edx
    0.00 :	   45429:       c7 85 ac f9 ff ff 01    movl   $0x1,-0x654(%rbp)
    0.00 :	   45430:       00 00 00 
    0.00 :	   45433:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   4543a:       89 95 b8 fa ff ff       mov    %edx,-0x548(%rbp)
    0.00 :	   45440:       83 bd b8 fa ff ff de    cmpl   $0xffffffde,-0x548(%rbp)
    0.00 :	   45447:       0f 87 6e 41 00 00       ja     495bb <_IO_vfprintf+0x52fb>
    0.00 :	   4544d:       81 bd b8 fa ff ff c7    cmpl   $0x3c7,-0x548(%rbp)
    0.00 :	   45454:       03 00 00 
    0.00 :	   45457:       76 36                   jbe    4548f <_IO_vfprintf+0x11cf>
    0.00 :	   45459:       48 63 85 b8 fa ff ff    movslq -0x548(%rbp),%rax
    0.00 :	   45460:       48 8d 58 20             lea    0x20(%rax),%rbx
    0.00 :	   45464:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   4546b:       0f 87 6a 41 00 00       ja     495db <_IO_vfprintf+0x531b>
    0.00 :	   45471:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   45475:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45479:       48 29 c4                sub    %rax,%rsp
    0.00 :	   4547c:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   45481:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45485:       48 01 d8                add    %rbx,%rax
    0.00 :	   45488:       48 89 85 60 f9 ff ff    mov    %rax,-0x6a0(%rbp)
    0.00 :	   4548f:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   45496:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   45499:       89 d0                   mov    %edx,%eax
    0.00 :	   4549b:       88 95 eb f9 ff ff       mov    %dl,-0x615(%rbp)
    0.00 :	   454a1:       83 e8 20                sub    $0x20,%eax
    0.00 :	   454a4:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   454a6:       0f 87 2e 08 00 00       ja     45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   454ac:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   454b3:       48 8d 15 c6 f9 0e 00    lea    0xef9c6(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   454ba:       83 e8 20                sub    $0x20,%eax
    0.00 :	   454bd:       48 98                   cltq   
    0.00 :	   454bf:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   454c3:       48 8d 05 b6 f8 0e 00    lea    0xef8b6(%rip),%rax        # 134d80 <step1_jumps.14582>
    0.00 :	   454ca:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   454ce:       48 8d 15 05 08 00 00    lea    0x805(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   454d5:       48 01 c2                add    %rax,%rdx
    0.00 :	   454d8:       ff e2                   jmpq   *%rdx
    0.00 :	   454da:       48 8b 8d 48 f9 ff ff    mov    -0x6b8(%rbp),%rcx
    0.00 :	   454e1:       0f b6 01                movzbl (%rcx),%eax
    0.00 :	   454e4:       48 83 c1 01             add    $0x1,%rcx
    0.00 :	   454e8:       48 89 8d 48 f9 ff ff    mov    %rcx,-0x6b8(%rbp)
    0.00 :	   454ef:       0f b6 19                movzbl (%rcx),%ebx
    0.00 :	   454f2:       8d 50 d0                lea    -0x30(%rax),%edx
    0.00 :	   454f5:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   454f8:       83 e8 30                sub    $0x30,%eax
    0.00 :	   454fb:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   454fe:       77 27                   ja     45527 <_IO_vfprintf+0x1267>
    0.00 :	   45500:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45507:       01 
    0.00 :	   45508:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   4550b:       8d 14 92                lea    (%rdx,%rdx,4),%edx
    0.00 :	   4550e:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   45515:       8d 54 50 d0             lea    -0x30(%rax,%rdx,2),%edx
    0.00 :	   45519:       0f b6 1f                movzbl (%rdi),%ebx
    0.00 :	   4551c:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   4551f:       83 e8 30                sub    $0x30,%eax
    0.00 :	   45522:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   45525:       76 d9                   jbe    45500 <_IO_vfprintf+0x1240>
    0.00 :	   45527:       83 fa de                cmp    $0xffffffde,%edx
    0.00 :	   4552a:       0f 87 3c 34 00 00       ja     4896c <_IO_vfprintf+0x46ac>
    0.00 :	   45530:       81 fa c7 03 00 00       cmp    $0x3c7,%edx
    0.00 :	   45536:       89 95 b8 fa ff ff       mov    %edx,-0x548(%rbp)
    0.00 :	   4553c:       76 32                   jbe    45570 <_IO_vfprintf+0x12b0>
    0.00 :	   4553e:       48 63 c2                movslq %edx,%rax
    0.00 :	   45541:       4c 8d 78 20             lea    0x20(%rax),%r15
    0.00 :	   45545:       49 81 ff 00 10 00 00    cmp    $0x1000,%r15
    0.00 :	   4554c:       0f 87 4b 3a 00 00       ja     48f9d <_IO_vfprintf+0x4cdd>
    0.00 :	   45552:       49 8d 47 1e             lea    0x1e(%r15),%rax
    0.00 :	   45556:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4555a:       48 29 c4                sub    %rax,%rsp
    0.00 :	   4555d:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   45562:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45566:       4c 01 f8                add    %r15,%rax
    0.00 :	   45569:       48 89 85 60 f9 ff ff    mov    %rax,-0x6a0(%rbp)
    0.00 :	   45570:       80 fb 24                cmp    $0x24,%bl
    0.00 :	   45573:       0f 84 6e 07 00 00       je     45ce7 <_IO_vfprintf+0x1a27>
    0.00 :	   45579:       89 d8                   mov    %ebx,%eax
    0.00 :	   4557b:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   45581:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45584:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45586:       0f 87 4e 07 00 00       ja     45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4558c:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45593:       48 8d 15 e6 f8 0e 00    lea    0xef8e6(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   4559a:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4559d:       48 98                   cltq   
    0.00 :	   4559f:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   455a3:       48 8d 05 d6 f7 0e 00    lea    0xef7d6(%rip),%rax        # 134d80 <step1_jumps.14582>
    0.00 :	   455aa:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   455ae:       48 8d 15 25 07 00 00    lea    0x725(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   455b5:       48 01 c2                add    %rax,%rdx
    0.00 :	   455b8:       ff e2                   jmpq   *%rdx
    0.00 :	   455ba:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   455c1:       01 
    0.00 :	   455c2:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   455c9:       0f b6 1f                movzbl (%rdi),%ebx
    0.00 :	   455cc:       80 fb 2a                cmp    $0x2a,%bl
    0.00 :	   455cf:       0f 84 a0 22 00 00       je     47875 <_IO_vfprintf+0x35b5>
    0.00 :	   455d5:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   455d8:       c7 85 ec fa ff ff 00    movl   $0x0,-0x514(%rbp)
    0.00 :	   455df:       00 00 00 
    0.00 :	   455e2:       8d 50 d0                lea    -0x30(%rax),%edx
    0.00 :	   455e5:       83 fa 09                cmp    $0x9,%edx
    0.00 :	   455e8:       0f 87 b2 00 00 00       ja     456a0 <_IO_vfprintf+0x13e0>
    0.00 :	   455ee:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   455f5:       01 
    0.00 :	   455f6:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   455fd:       0f b6 1f                movzbl (%rdi),%ebx
    0.00 :	   45600:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   45603:       83 e8 30                sub    $0x30,%eax
    0.00 :	   45606:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   45609:       77 27                   ja     45632 <_IO_vfprintf+0x1372>
    0.00 :	   4560b:       8d 14 92                lea    (%rdx,%rdx,4),%edx
    0.00 :	   4560e:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   45611:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45618:       01 
    0.00 :	   45619:       8d 54 50 d0             lea    -0x30(%rax,%rdx,2),%edx
    0.00 :	   4561d:       48 8b 85 48 f9 ff ff    mov    -0x6b8(%rbp),%rax
    0.00 :	   45624:       0f b6 18                movzbl (%rax),%ebx
    0.00 :	   45627:       0f b6 c3                movzbl %bl,%eax
    0.00 :	   4562a:       83 e8 30                sub    $0x30,%eax
    0.00 :	   4562d:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   45630:       76 d9                   jbe    4560b <_IO_vfprintf+0x134b>
    0.00 :	   45632:       81 fa c8 03 00 00       cmp    $0x3c8,%edx
    0.00 :	   45638:       89 95 ec fa ff ff       mov    %edx,-0x514(%rbp)
    0.00 :	   4563e:       0f 97 c0                seta   %al
    0.00 :	   45641:       8b 8d b8 fa ff ff       mov    -0x548(%rbp),%ecx
    0.00 :	   45647:       39 8d ec fa ff ff       cmp    %ecx,-0x514(%rbp)
    0.00 :	   4564d:       7e 47                   jle    45696 <_IO_vfprintf+0x13d6>
    0.00 :	   4564f:       84 c0                   test   %al,%al
    0.00 :	   45651:       0f 84 f8 22 00 00       je     4794f <_IO_vfprintf+0x368f>
    0.00 :	   45657:       83 fa de                cmp    $0xffffffde,%edx
    0.00 :	   4565a:       0f 87 e0 36 00 00       ja     48d40 <_IO_vfprintf+0x4a80>
    0.00 :	   45660:       48 63 95 ec fa ff ff    movslq -0x514(%rbp),%rdx
    0.00 :	   45667:       48 8d 5a 20             lea    0x20(%rdx),%rbx
    0.00 :	   4566b:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   45672:       0f 87 a1 22 00 00       ja     47919 <_IO_vfprintf+0x3659>
    0.00 :	   45678:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   4567c:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45680:       48 29 c4                sub    %rax,%rsp
    0.00 :	   45683:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   45688:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4568c:       48 01 d8                add    %rbx,%rax
    0.00 :	   4568f:       48 89 85 60 f9 ff ff    mov    %rax,-0x6a0(%rbp)
    0.00 :	   45696:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   4569d:       0f b6 1f                movzbl (%rdi),%ebx
    0.00 :	   456a0:       89 d8                   mov    %ebx,%eax
    0.00 :	   456a2:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   456a8:       83 e8 20                sub    $0x20,%eax
    0.00 :	   456ab:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   456ad:       0f 87 27 06 00 00       ja     45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   456b3:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   456ba:       48 8d 15 bf f7 0e 00    lea    0xef7bf(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   456c1:       83 e8 20                sub    $0x20,%eax
    0.00 :	   456c4:       48 98                   cltq   
    0.00 :	   456c6:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   456ca:       48 8d 05 2f f6 0e 00    lea    0xef62f(%rip),%rax        # 134d00 <step2_jumps.14583>
    0.00 :	   456d1:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   456d5:       48 8d 15 fe 05 00 00    lea    0x5fe(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   456dc:       48 01 c2                add    %rax,%rdx
    0.00 :	   456df:       ff e2                   jmpq   *%rdx
    0.00 :	   456e1:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   456e8:       01 
    0.00 :	   456e9:       48 8d 15 ea 05 00 00    lea    0x5ea(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   456f0:       48 8b 8d 48 f9 ff ff    mov    -0x6b8(%rbp),%rcx
    0.00 :	   456f7:       0f b6 09                movzbl (%rcx),%ecx
    0.00 :	   456fa:       89 c8                   mov    %ecx,%eax
    0.00 :	   456fc:       88 8d eb f9 ff ff       mov    %cl,-0x615(%rbp)
    0.00 :	   45702:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45705:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45707:       77 2c                   ja     45735 <_IO_vfprintf+0x1475>
    0.00 :	   45709:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45710:       48 8d 15 69 f7 0e 00    lea    0xef769(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45717:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4571a:       48 98                   cltq   
    0.00 :	   4571c:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   45720:       48 8d 05 59 f4 0e 00    lea    0xef459(%rip),%rax        # 134b80 <step4_jumps.14587>
    0.00 :	   45727:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   4572b:       48 8d 15 a8 05 00 00    lea    0x5a8(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45732:       48 01 c2                add    %rax,%rdx
    0.00 :	   45735:       c7 85 bc f9 ff ff 00    movl   $0x0,-0x644(%rbp)
    0.00 :	   4573c:       00 00 00 
    0.00 :	   4573f:       c7 85 c4 f9 ff ff 01    movl   $0x1,-0x63c(%rbp)
    0.00 :	   45746:       00 00 00 
    0.00 :	   45749:       ff e2                   jmpq   *%rdx
    0.00 :	   4574b:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45752:       01 
    0.00 :	   45753:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   4575a:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   4575d:       89 d0                   mov    %edx,%eax
    0.00 :	   4575f:       88 95 eb f9 ff ff       mov    %dl,-0x615(%rbp)
    0.00 :	   45765:       48 8d 15 6e 05 00 00    lea    0x56e(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4576c:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4576f:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45771:       77 2c                   ja     4579f <_IO_vfprintf+0x14df>
    0.00 :	   45773:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   4577a:       48 8d 15 ff f6 0e 00    lea    0xef6ff(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45781:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45784:       48 98                   cltq   
    0.00 :	   45786:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   4578a:       48 8d 05 ef f4 0e 00    lea    0xef4ef(%rip),%rax        # 134c80 <step3a_jumps.14584>
    0.00 :	   45791:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45795:       48 8d 15 3e 05 00 00    lea    0x53e(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   4579c:       48 01 c2                add    %rax,%rdx
    0.00 :	   4579f:       c7 85 bc f9 ff ff 01    movl   $0x1,-0x644(%rbp)
    0.00 :	   457a6:       00 00 00 
    0.00 :	   457a9:       ff e2                   jmpq   *%rdx
    0.00 :	   457ab:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   457b2:       01 
    0.00 :	   457b3:       48 8d 15 20 05 00 00    lea    0x520(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   457ba:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   457c1:       0f b6 1b                movzbl (%rbx),%ebx
    0.00 :	   457c4:       89 d8                   mov    %ebx,%eax
    0.00 :	   457c6:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   457cc:       83 e8 20                sub    $0x20,%eax
    0.00 :	   457cf:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   457d1:       77 2c                   ja     457ff <_IO_vfprintf+0x153f>
    0.00 :	   457d3:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   457da:       48 8d 15 9f f6 0e 00    lea    0xef69f(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   457e1:       83 e8 20                sub    $0x20,%eax
    0.00 :	   457e4:       48 98                   cltq   
    0.00 :	   457e6:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   457ea:       48 8d 05 0f f4 0e 00    lea    0xef40f(%rip),%rax        # 134c00 <step3b_jumps.14586>
    0.00 :	   457f1:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   457f5:       48 8d 15 de 04 00 00    lea    0x4de(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   457fc:       48 01 c2                add    %rax,%rdx
    0.00 :	   457ff:       c7 85 c0 f9 ff ff 01    movl   $0x1,-0x640(%rbp)
    0.00 :	   45806:       00 00 00 
    0.00 :	   45809:       ff e2                   jmpq   *%rdx
    0.00 :	   4580b:       8b 8d c0 f9 ff ff       mov    -0x640(%rbp),%ecx
    0.00 :	   45811:       85 c9                   test   %ecx,%ecx
    0.00 :	   45813:       0f 85 17 ef ff ff       jne    44730 <_IO_vfprintf+0x470>
    0.00 :	   45819:       8b 9d b8 fa ff ff       mov    -0x548(%rbp),%ebx
    0.00 :	   4581f:       8b 95 ac f9 ff ff       mov    -0x654(%rbp),%edx
    0.00 :	   45825:       83 eb 01                sub    $0x1,%ebx
    0.00 :	   45828:       85 d2                   test   %edx,%edx
    0.00 :	   4582a:       75 37                   jne    45863 <_IO_vfprintf+0x15a3>
    0.00 :	   4582c:       85 db                   test   %ebx,%ebx
    0.00 :	   4582e:       7e 33                   jle    45863 <_IO_vfprintf+0x15a3>
    0.00 :	   45830:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   45833:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   45838:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4583b:       e8 00 2a 02 00          callq  68240 <_IO_padn>
    0.00 :	   45840:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   45847:       0f 87 08 3a 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   4584d:       89 c2                   mov    %eax,%edx
    0.00 :	   4584f:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   45854:       44 29 e8                sub    %r13d,%eax
    0.00 :	   45857:       39 c2                   cmp    %eax,%edx
    0.00 :	   45859:       0f 87 72 10 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4585f:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   45863:       41 8b 06                mov    (%r14),%eax
    0.00 :	   45866:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   45869:       0f 83 c6 24 00 00       jae    47d35 <_IO_vfprintf+0x3a75>
    0.00 :	   4586f:       89 c2                   mov    %eax,%edx
    0.00 :	   45871:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   45875:       83 c0 08                add    $0x8,%eax
    0.00 :	   45878:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4587b:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   45880:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   45885:       0f b6 32                movzbl (%rdx),%esi
    0.00 :	   45888:       0f 83 10 3d 00 00       jae    4959e <_IO_vfprintf+0x52de>
    0.00 :	   4588e:       40 88 30                mov    %sil,(%rax)
    0.00 :	   45891:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   45895:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4589a:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   458a1:       0f 84 2a 10 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   458a7:       8b 85 ac f9 ff ff       mov    -0x654(%rbp),%eax
    0.00 :	   458ad:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   458b1:       85 c0                   test   %eax,%eax
    0.00 :	   458b3:       0f 84 d7 ef ff ff       je     44890 <_IO_vfprintf+0x5d0>
    0.00 :	   458b9:       85 db                   test   %ebx,%ebx
    0.00 :	   458bb:       0f 8e cf ef ff ff       jle    44890 <_IO_vfprintf+0x5d0>
    0.00 :	   458c1:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   458c4:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   458c9:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   458cc:       e8 6f 29 02 00          callq  68240 <_IO_padn>
    0.00 :	   458d1:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   458d8:       0f 87 77 39 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   458de:       89 c2                   mov    %eax,%edx
    0.00 :	   458e0:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   458e5:       44 29 e8                sub    %r13d,%eax
    0.00 :	   458e8:       39 c2                   cmp    %eax,%edx
    0.00 :	   458ea:       0f 87 e1 0f 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   458f0:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   458f4:       e9 97 ef ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   458f9:       41 f6 44 24 74 04       testb  $0x4,0x74(%r12)
    0.00 :	   458ff:       74 10                   je     45911 <_IO_vfprintf+0x1651>
    0.00 :	   45901:       44 8b 8d 74 f9 ff ff    mov    -0x68c(%rbp),%r9d
    0.00 :	   45908:       45 85 c9                test   %r9d,%r9d
    0.00 :	   4590b:       0f 84 38 2f 00 00       je     48849 <_IO_vfprintf+0x4589>
    0.00 :	   45911:       44 8b 85 c0 f9 ff ff    mov    -0x640(%rbp),%r8d
    0.00 :	   45918:       45 85 c0                test   %r8d,%r8d
    0.00 :	   4591b:       0f 84 81 28 00 00       je     481a2 <_IO_vfprintf+0x3ee2>
    0.00 :	   45921:       41 8b 06                mov    (%r14),%eax
    0.00 :	   45924:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   45927:       0f 83 64 28 00 00       jae    48191 <_IO_vfprintf+0x3ed1>
    0.00 :	   4592d:       89 c2                   mov    %eax,%edx
    0.00 :	   4592f:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   45933:       83 c0 08                add    $0x8,%eax
    0.00 :	   45936:       41 89 06                mov    %eax,(%r14)
    0.00 :	   45939:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   4593c:       49 63 c5                movslq %r13d,%rax
    0.00 :	   4593f:       48 89 02                mov    %rax,(%rdx)
    0.00 :	   45942:       e9 49 ef ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   45947:       48 8b b5 88 f8 ff ff    mov    -0x778(%rbp),%rsi
    0.00 :	   4594e:       8b bd 70 f9 ff ff       mov    -0x690(%rbp),%edi
    0.00 :	   45954:       ba e8 03 00 00          mov    $0x3e8,%edx
    0.00 :	   45959:       e8 f2 b0 03 00          callq  80a50 <__strerror_r>
    0.00 :	   4595e:       c7 85 c0 f9 ff ff 00    movl   $0x0,-0x640(%rbp)
    0.00 :	   45965:       00 00 00 
    0.00 :	   45968:       49 89 c7                mov    %rax,%r15
    0.00 :	   4596b:       4d 85 ff                test   %r15,%r15
    0.00 :	   4596e:       0f 84 34 26 00 00       je     47fa8 <_IO_vfprintf+0x3ce8>
    0.00 :	   45974:       8b 85 c0 f9 ff ff       mov    -0x640(%rbp),%eax
    0.00 :	   4597a:       85 c0                   test   %eax,%eax
    0.00 :	   4597c:       0f 84 74 1c 00 00       je     475f6 <_IO_vfprintf+0x3336>
    0.00 :	   45982:       8b 85 ec fa ff ff       mov    -0x514(%rbp),%eax
    0.00 :	   45988:       48 8d 55 a0             lea    -0x60(%rbp),%rdx
    0.00 :	   4598c:       4c 89 7d 98             mov    %r15,-0x68(%rbp)
    0.00 :	   45990:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	   45997:       00 
    0.00 :	   45998:       48 89 95 68 f8 ff ff    mov    %rdx,-0x798(%rbp)
    0.00 :	   4599f:       85 c0                   test   %eax,%eax
    0.00 :	   459a1:       0f 88 82 29 00 00       js     48329 <_IO_vfprintf+0x4069>
    0.00 :	   459a7:       48 63 9d ec fa ff ff    movslq -0x514(%rbp),%rbx
    0.00 :	   459ae:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   459b5:       0f 87 0a 2f 00 00       ja     488c5 <_IO_vfprintf+0x4605>
    0.00 :	   459bb:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   459bf:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   459c6:       00 00 00 
    0.00 :	   459c9:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   459cd:       48 29 c4                sub    %rax,%rsp
    0.00 :	   459d0:       4c 8d 7c 24 0f          lea    0xf(%rsp),%r15
    0.00 :	   459d5:       49 83 e7 f0             and    $0xfffffffffffffff0,%r15
    0.00 :	   459d9:       48 8d 4d 98             lea    -0x68(%rbp),%rcx
    0.00 :	   459dd:       48 89 da                mov    %rbx,%rdx
    0.00 :	   459e0:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   459e3:       48 89 8d 70 f8 ff ff    mov    %rcx,-0x790(%rbp)
    0.00 :	   459ea:       48 8b 8d 68 f8 ff ff    mov    -0x798(%rbp),%rcx
    0.00 :	   459f1:       48 8b b5 70 f8 ff ff    mov    -0x790(%rbp),%rsi
    0.00 :	   459f8:       e8 73 78 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   459fd:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   45a01:       48 89 c3                mov    %rax,%rbx
    0.00 :	   45a04:       0f 84 c7 0e 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45a0a:       89 9d 8c fa ff ff       mov    %ebx,-0x574(%rbp)
    0.00 :	   45a10:       8b 85 b8 fa ff ff       mov    -0x548(%rbp),%eax
    0.00 :	   45a16:       2b 85 8c fa ff ff       sub    -0x574(%rbp),%eax
    0.00 :	   45a1c:       89 85 f0 f8 ff ff       mov    %eax,-0x710(%rbp)
    0.00 :	   45a22:       0f 88 c7 22 00 00       js     47cef <_IO_vfprintf+0x3a2f>
    0.00 :	   45a28:       44 8b 9d ac f9 ff ff    mov    -0x654(%rbp),%r11d
    0.00 :	   45a2f:       45 85 db                test   %r11d,%r11d
    0.00 :	   45a32:       75 43                   jne    45a77 <_IO_vfprintf+0x17b7>
    0.00 :	   45a34:       44 8b 95 f0 f8 ff ff    mov    -0x710(%rbp),%r10d
    0.00 :	   45a3b:       45 85 d2                test   %r10d,%r10d
    0.00 :	   45a3e:       74 37                   je     45a77 <_IO_vfprintf+0x17b7>
    0.00 :	   45a40:       48 63 95 f0 f8 ff ff    movslq -0x710(%rbp),%rdx
    0.00 :	   45a47:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   45a4c:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45a4f:       e8 ec 27 02 00          callq  68240 <_IO_padn>
    0.00 :	   45a54:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   45a5b:       0f 87 f4 37 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   45a61:       89 c2                   mov    %eax,%edx
    0.00 :	   45a63:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   45a68:       44 29 e8                sub    %r13d,%eax
    0.00 :	   45a6b:       39 c2                   cmp    %eax,%edx
    0.00 :	   45a6d:       0f 87 5e 0e 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45a73:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   45a77:       45 85 ed                test   %r13d,%r13d
    0.00 :	   45a7a:       0f 88 9c 2a 00 00       js     4851c <_IO_vfprintf+0x425c>
    0.00 :	   45a80:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   45a87:       00 
    0.00 :	   45a88:       48 89 da                mov    %rbx,%rdx
    0.00 :	   45a8b:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   45a8e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45a91:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   45a94:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   45a97:       0f 85 34 0e 00 00       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45a9d:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   45aa0:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   45aa5:       48 29 d0                sub    %rdx,%rax
    0.00 :	   45aa8:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   45aab:       0f 87 20 0e 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45ab1:       44 8b 8d ac f9 ff ff    mov    -0x654(%rbp),%r9d
    0.00 :	   45ab8:       44 03 ad 8c fa ff ff    add    -0x574(%rbp),%r13d
    0.00 :	   45abf:       45 85 c9                test   %r9d,%r9d
    0.00 :	   45ac2:       74 43                   je     45b07 <_IO_vfprintf+0x1847>
    0.00 :	   45ac4:       44 8b 85 f0 f8 ff ff    mov    -0x710(%rbp),%r8d
    0.00 :	   45acb:       45 85 c0                test   %r8d,%r8d
    0.00 :	   45ace:       74 37                   je     45b07 <_IO_vfprintf+0x1847>
    0.00 :	   45ad0:       48 63 95 f0 f8 ff ff    movslq -0x710(%rbp),%rdx
    0.00 :	   45ad7:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   45adc:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   45adf:       e8 5c 27 02 00          callq  68240 <_IO_padn>
    0.00 :	   45ae4:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   45aeb:       0f 87 64 37 00 00       ja     49255 <_IO_vfprintf+0x4f95>
    0.00 :	   45af1:       89 c2                   mov    %eax,%edx
    0.00 :	   45af3:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   45af8:       44 29 e8                sub    %r13d,%eax
    0.00 :	   45afb:       39 c2                   cmp    %eax,%edx
    0.00 :	   45afd:       0f 87 ce 0d 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45b03:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   45b07:       8b bd ec f9 ff ff       mov    -0x614(%rbp),%edi
    0.00 :	   45b0d:       85 ff                   test   %edi,%edi
    0.00 :	   45b0f:       0f 84 7b ed ff ff       je     44890 <_IO_vfprintf+0x5d0>
    0.00 :	   45b15:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   45b18:       e8 83 8d fd ff          callq  1e8a0 <free@plt>
    0.00 :	   45b1d:       e9 6e ed ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   45b22:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   45b28:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45b2f:       01 
    0.00 :	   45b30:       48 8d 15 a3 01 00 00    lea    0x1a3(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45b37:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   45b3e:       0f b6 3f                movzbl (%rdi),%edi
    0.00 :	   45b41:       89 f8                   mov    %edi,%eax
    0.00 :	   45b43:       40 88 bd eb f9 ff ff    mov    %dil,-0x615(%rbp)
    0.00 :	   45b4a:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45b4d:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45b4f:       77 2c                   ja     45b7d <_IO_vfprintf+0x18bd>
    0.00 :	   45b51:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45b58:       48 8d 15 21 f3 0e 00    lea    0xef321(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45b5f:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45b62:       48 98                   cltq   
    0.00 :	   45b64:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   45b68:       48 8d 05 91 f2 0e 00    lea    0xef291(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45b6f:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45b73:       48 8d 15 60 01 00 00    lea    0x160(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45b7a:       48 01 c2                add    %rax,%rdx
    0.00 :	   45b7d:       c7 85 b0 f9 ff ff 01    movl   $0x1,-0x650(%rbp)
    0.00 :	   45b84:       00 00 00 
    0.00 :	   45b87:       ff e2                   jmpq   *%rdx
    0.00 :	   45b89:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45b90:       01 
    0.00 :	   45b91:       48 8d 15 42 01 00 00    lea    0x142(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45b98:       48 8b 85 48 f9 ff ff    mov    -0x6b8(%rbp),%rax
    0.00 :	   45b9f:       0f b6 00                movzbl (%rax),%eax
    0.00 :	   45ba2:       88 85 eb f9 ff ff       mov    %al,-0x615(%rbp)
    0.00 :	   45ba8:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45bab:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45bad:       77 2c                   ja     45bdb <_IO_vfprintf+0x191b>
    0.00 :	   45baf:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45bb6:       48 8d 15 c3 f2 0e 00    lea    0xef2c3(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45bbd:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45bc0:       48 98                   cltq   
    0.00 :	   45bc2:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   45bc6:       48 8d 05 33 f2 0e 00    lea    0xef233(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45bcd:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45bd1:       48 8d 15 02 01 00 00    lea    0x102(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45bd8:       48 01 c2                add    %rax,%rdx
    0.00 :	   45bdb:       c7 85 ac f9 ff ff 01    movl   $0x1,-0x654(%rbp)
    0.00 :	   45be2:       00 00 00 
    0.00 :	   45be5:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   45bec:       ff e2                   jmpq   *%rdx
    0.00 :	   45bee:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45bf5:       01 
    0.00 :	   45bf6:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   45bfd:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   45c00:       89 d0                   mov    %edx,%eax
    0.00 :	   45c02:       88 95 eb f9 ff ff       mov    %dl,-0x615(%rbp)
    0.00 :	   45c08:       48 8d 15 cb 00 00 00    lea    0xcb(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45c0f:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45c12:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45c14:       77 2c                   ja     45c42 <_IO_vfprintf+0x1982>
    0.00 :	   45c16:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45c1d:       48 8d 15 5c f2 0e 00    lea    0xef25c(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45c24:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45c27:       48 98                   cltq   
    0.00 :	   45c29:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   45c2d:       48 8d 05 cc f1 0e 00    lea    0xef1cc(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45c34:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45c38:       48 8d 15 9b 00 00 00    lea    0x9b(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45c3f:       48 01 c2                add    %rax,%rdx
    0.00 :	   45c42:       c7 85 a4 f9 ff ff 01    movl   $0x1,-0x65c(%rbp)
    0.00 :	   45c49:       00 00 00 
    0.00 :	   45c4c:       ff e2                   jmpq   *%rdx
    0.00 :	   45c4e:       8b 85 ac f9 ff ff       mov    -0x654(%rbp),%eax
    0.00 :	   45c54:       0f b6 8d d0 f9 ff ff    movzbl -0x630(%rbp),%ecx
    0.00 :	   45c5b:       85 c0                   test   %eax,%eax
    0.00 :	   45c5d:       b8 30 00 00 00          mov    $0x30,%eax
    0.00 :	   45c62:       0f 44 c8                cmove  %eax,%ecx
    0.00 :	   45c65:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   45c6c:       01 
    0.00 :	   45c6d:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   45c74:       88 8d d0 f9 ff ff       mov    %cl,-0x630(%rbp)
    0.00 :	   45c7a:       0f b6 1b                movzbl (%rbx),%ebx
    0.00 :	   45c7d:       89 d8                   mov    %ebx,%eax
    0.00 :	   45c7f:       88 9d eb f9 ff ff       mov    %bl,-0x615(%rbp)
    0.00 :	   45c85:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45c88:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   45c8a:       77 4e                   ja     45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45c8c:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   45c93:       48 8d 15 e6 f1 0e 00    lea    0xef1e6(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   45c9a:       83 e8 20                sub    $0x20,%eax
    0.00 :	   45c9d:       48 98                   cltq   
    0.00 :	   45c9f:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   45ca3:       48 8d 05 56 f1 0e 00    lea    0xef156(%rip),%rax        # 134e00 <step0_jumps.14551>
    0.00 :	   45caa:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   45cae:       48 8d 15 25 00 00 00    lea    0x25(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   45cb5:       48 01 c2                add    %rax,%rdx
    0.00 :	   45cb8:       ff e2                   jmpq   *%rdx
    0.00 :	   45cba:       41 8b 06                mov    (%r14),%eax
    0.00 :	   45cbd:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   45cc0:       0f 83 9e 1b 00 00       jae    47864 <_IO_vfprintf+0x35a4>
    0.00 :	   45cc6:       89 c2                   mov    %eax,%edx
    0.00 :	   45cc8:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   45ccc:       83 c0 08                add    $0x8,%eax
    0.00 :	   45ccf:       41 89 06                mov    %eax,(%r14)
    0.00 :	   45cd2:       4c 8b 3a                mov    (%rdx),%r15
    0.00 :	   45cd5:       e9 91 fc ff ff          jmpq   4596b <_IO_vfprintf+0x16ab>
    0.00 :	   45cda:       80 bd eb f9 ff ff 00    cmpb   $0x0,-0x615(%rbp)
    0.00 :	   45ce1:       0f 84 ea 0b 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45ce7:       48 81 ec 10 09 00 00    sub    $0x910,%rsp
    0.00 :	   45cee:       48 8b bd 58 f9 ff ff    mov    -0x6a8(%rbp),%rdi
    0.00 :	   45cf5:       48 c7 45 98 00 00 00    movq   $0x0,-0x68(%rbp)
    0.00 :	   45cfc:       00 
    0.00 :	   45cfd:       48 8d 5c 24 0f          lea    0xf(%rsp),%rbx
    0.00 :	   45d02:       48 83 e3 f0             and    $0xfffffffffffffff0,%rbx
    0.00 :	   45d06:       48 89 9d a0 fa ff ff    mov    %rbx,-0x560(%rbp)
    0.00 :	   45d0d:       e8 8e 8b fd ff          callq  1e8a0 <free@plt>
    0.00 :	   45d12:       48 83 bd 40 f9 ff ff    cmpq   $0xffffffffffffffff,-0x6c0(%rbp)
    0.00 :	   45d19:       ff 
    0.00 :	   45d1a:       0f 84 f1 2c 00 00       je     48a11 <_IO_vfprintf+0x4751>
    0.00 :	   45d20:       48 8b 8d 50 f9 ff ff    mov    -0x6b0(%rbp),%rcx
    0.00 :	   45d27:       80 39 00                cmpb   $0x0,(%rcx)
    0.00 :	   45d2a:       0f 84 7c 2c 00 00       je     489ac <_IO_vfprintf+0x46ec>
    0.00 :	   45d30:       48 8b 9d 50 f9 ff ff    mov    -0x6b0(%rbp),%rbx
    0.00 :	   45d37:       48 c7 85 f8 f9 ff ff    movq   $0x0,-0x608(%rbp)
    0.00 :	   45d3e:       00 00 00 00 
    0.00 :	   45d42:       48 c7 85 00 fa ff ff    movq   $0x0,-0x600(%rbp)
    0.00 :	   45d49:       00 00 00 00 
    0.00 :	   45d4d:       48 c7 85 90 fa ff ff    movq   $0x0,-0x570(%rbp)
    0.00 :	   45d54:       00 00 00 00 
    0.00 :	   45d58:       48 89 9d 48 f9 ff ff    mov    %rbx,-0x6b8(%rbp)
    0.00 :	   45d5f:       bb 00 09 00 00          mov    $0x900,%ebx
    0.00 :	   45d64:       e9 c2 00 00 00          jmpq   45e2b <_IO_vfprintf+0x1b6b>
    0.00 :	   45d69:       49 8d 47 1e             lea    0x1e(%r15),%rax
    0.00 :	   45d6d:       49 8d 0c 1f             lea    (%r15,%rbx,1),%rcx
    0.00 :	   45d71:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45d75:       48 29 c4                sub    %rax,%rsp
    0.00 :	   45d78:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   45d7d:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   45d81:       4a 8d 14 38             lea    (%rax,%r15,1),%rdx
    0.00 :	   45d85:       48 39 95 a0 fa ff ff    cmp    %rdx,-0x560(%rbp)
    0.00 :	   45d8c:       48 89 c3                mov    %rax,%rbx
    0.00 :	   45d8f:       4c 0f 44 f9             cmove  %rcx,%r15
    0.00 :	   45d93:       48 8b 95 90 fa ff ff    mov    -0x570(%rbp),%rdx
    0.00 :	   45d9a:       48 8b b5 a0 fa ff ff    mov    -0x560(%rbp),%rsi
    0.00 :	   45da1:       48 89 df                mov    %rbx,%rdi
    0.00 :	   45da4:       e8 f7 d4 03 00          callq  832a0 <__GI_memmove>
    0.00 :	   45da9:       80 bd 8b f9 ff ff 00    cmpb   $0x0,-0x675(%rbp)
    0.00 :	   45db0:       74 0c                   je     45dbe <_IO_vfprintf+0x1afe>
    0.00 :	   45db2:       48 8b bd a0 fa ff ff    mov    -0x560(%rbp),%rdi
    0.00 :	   45db9:       e8 e2 8a fd ff          callq  1e8a0 <free@plt>
    0.00 :	   45dbe:       49 81 ff 00 10 00 00    cmp    $0x1000,%r15
    0.00 :	   45dc5:       0f 87 eb 0d 00 00       ja     46bb6 <_IO_vfprintf+0x28f6>
    0.00 :	   45dcb:       48 89 9d a0 fa ff ff    mov    %rbx,-0x560(%rbp)
    0.00 :	   45dd2:       48 8b 9d a0 fa ff ff    mov    -0x560(%rbp),%rbx
    0.00 :	   45dd9:       48 03 9d 90 fa ff ff    add    -0x570(%rbp),%rbx
    0.00 :	   45de0:       48 8b 8d 38 f8 ff ff    mov    -0x7c8(%rbp),%rcx
    0.00 :	   45de7:       48 8b b5 00 fa ff ff    mov    -0x600(%rbp),%rsi
    0.00 :	   45dee:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   45df5:       48 89 da                mov    %rbx,%rdx
    0.00 :	   45df8:       e8 73 f3 01 00          callq  65170 <__parse_one_specmb>
    0.00 :	   45dfd:       48 01 85 00 fa ff ff    add    %rax,-0x600(%rbp)
    0.00 :	   45e04:       48 8b 5b 20             mov    0x20(%rbx),%rbx
    0.00 :	   45e08:       48 83 85 f8 f9 ff ff    addq   $0x1,-0x608(%rbp)
    0.00 :	   45e0f:       01 
    0.00 :	   45e10:       48 83 85 90 fa ff ff    addq   $0x48,-0x570(%rbp)
    0.00 :	   45e17:       48 
    0.00 :	   45e18:       48 89 9d 48 f9 ff ff    mov    %rbx,-0x6b8(%rbp)
    0.00 :	   45e1f:       80 3b 00                cmpb   $0x0,(%rbx)
    0.00 :	   45e22:       0f 84 79 11 00 00       je     46fa1 <_IO_vfprintf+0x2ce1>
    0.00 :	   45e28:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   45e2b:       48 3b 9d 90 fa ff ff    cmp    -0x570(%rbp),%rbx
    0.00 :	   45e32:       49 89 df                mov    %rbx,%r15
    0.00 :	   45e35:       77 9b                   ja     45dd2 <_IO_vfprintf+0x1b12>
    0.00 :	   45e37:       4c 8d 3c 1b             lea    (%rbx,%rbx,1),%r15
    0.00 :	   45e3b:       49 81 ff 00 10 00 00    cmp    $0x1000,%r15
    0.00 :	   45e42:       0f 86 21 ff ff ff       jbe    45d69 <_IO_vfprintf+0x1aa9>
    0.00 :	   45e48:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   45e4b:       e8 70 1d 0a 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   45e50:       85 c0                   test   %eax,%eax
    0.00 :	   45e52:       0f 85 11 ff ff ff       jne    45d69 <_IO_vfprintf+0x1aa9>
    0.00 :	   45e58:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   45e5b:       e8 f0 89 fd ff          callq  1e850 <malloc@plt>
    0.00 :	   45e60:       48 89 c3                mov    %rax,%rbx
    0.00 :	   45e63:       e9 2b ff ff ff          jmpq   45d93 <_IO_vfprintf+0x1ad3>
    0.00 :	   45e68:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   45e6d:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   45e72:       0f 83 cb 2f 00 00       jae    48e43 <_IO_vfprintf+0x4b83>
    0.00 :	   45e78:       c6 00 25                movb   $0x25,(%rax)
    0.00 :	   45e7b:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   45e7f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   45e84:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   45e8b:       0f 84 40 0a 00 00       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   45e91:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   45e95:       e9 26 ec ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   45e9a:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   45ea1:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   45ea5:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   45eac:       00 
    0.00 :	   45ead:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   45eb4:       48 01 d0                add    %rdx,%rax
    0.00 :	   45eb7:       48 85 c0                test   %rax,%rax
    0.00 :	   45eba:       0f 84 5d 2f 00 00       je     48e1d <_IO_vfprintf+0x4b5d>
    0.00 :	   45ec0:       8b 85 60 fa ff ff       mov    -0x5a0(%rbp),%eax
    0.00 :	   45ec6:       85 c0                   test   %eax,%eax
    0.00 :	   45ec8:       0f 84 7a 1b 00 00       je     47a48 <_IO_vfprintf+0x3788>
    0.00 :	   45ece:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   45ed5:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   45edc:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   45ee1:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   45ee5:       48 8b 14 03             mov    (%rbx,%rax,1),%rdx
    0.00 :	   45ee9:       48 89 d7                mov    %rdx,%rdi
    0.00 :	   45eec:       48 89 d0                mov    %rdx,%rax
    0.00 :	   45eef:       c7 85 3c fa ff ff 0a    movl   $0xa,-0x5c4(%rbp)
    0.00 :	   45ef6:       00 00 00 
    0.00 :	   45ef9:       48 c1 ef 3f             shr    $0x3f,%rdi
    0.00 :	   45efd:       48 f7 d8                neg    %rax
    0.00 :	   45f00:       85 ff                   test   %edi,%edi
    0.00 :	   45f02:       89 bd 20 fa ff ff       mov    %edi,-0x5e0(%rbp)
    0.00 :	   45f08:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	   45f0c:       48 89 95 08 f9 ff ff    mov    %rdx,-0x6f8(%rbp)
    0.00 :	   45f13:       83 bd 68 fa ff ff 00    cmpl   $0x0,-0x598(%rbp)
    0.00 :	   45f1a:       0f 8c 61 13 00 00       jl     47281 <_IO_vfprintf+0x2fc1>
    0.00 :	   45f20:       0f 85 2f 0e 00 00       jne    46d55 <_IO_vfprintf+0x2a95>
    0.00 :	   45f26:       48 83 bd 08 f9 ff ff    cmpq   $0x0,-0x6f8(%rbp)
    0.00 :	   45f2d:       00 
    0.00 :	   45f2e:       0f 85 21 0e 00 00       jne    46d55 <_IO_vfprintf+0x2a95>
    0.00 :	   45f34:       83 bd 3c fa ff ff 08    cmpl   $0x8,-0x5c4(%rbp)
    0.00 :	   45f3b:       0f 84 53 1c 00 00       je     47b94 <_IO_vfprintf+0x38d4>
    0.00 :	   45f41:       48 8b 8d 60 f9 ff ff    mov    -0x6a0(%rbp),%rcx
    0.00 :	   45f48:       31 c0                   xor    %eax,%eax
    0.00 :	   45f4a:       c6 85 72 fa ff ff 20    movb   $0x20,-0x58e(%rbp)
    0.00 :	   45f51:       48 89 8d d0 fa ff ff    mov    %rcx,-0x530(%rbp)
    0.00 :	   45f58:       49 89 cf                mov    %rcx,%r15
    0.00 :	   45f5b:       48 2b 85 60 f9 ff ff    sub    -0x6a0(%rbp),%rax
    0.00 :	   45f62:       8b b5 48 fa ff ff       mov    -0x5b8(%rbp),%esi
    0.00 :	   45f68:       ba 00 00 00 00          mov    $0x0,%edx
    0.00 :	   45f6d:       48 03 85 d0 fa ff ff    add    -0x530(%rbp),%rax
    0.00 :	   45f74:       48 0f 48 c2             cmovs  %rdx,%rax
    0.00 :	   45f78:       85 f6                   test   %esi,%esi
    0.00 :	   45f7a:       89 85 bc fa ff ff       mov    %eax,-0x544(%rbp)
    0.00 :	   45f80:       0f 85 53 0c 00 00       jne    46bd9 <_IO_vfprintf+0x2919>
    0.00 :	   45f86:       8b 85 60 f9 ff ff       mov    -0x6a0(%rbp),%eax
    0.00 :	   45f8c:       29 85 64 fa ff ff       sub    %eax,-0x59c(%rbp)
    0.00 :	   45f92:       8b bd d0 fa ff ff       mov    -0x530(%rbp),%edi
    0.00 :	   45f98:       8b 9d 64 fa ff ff       mov    -0x59c(%rbp),%ebx
    0.00 :	   45f9e:       8b 8d 40 fa ff ff       mov    -0x5c0(%rbp),%ecx
    0.00 :	   45fa4:       89 85 c0 fa ff ff       mov    %eax,-0x540(%rbp)
    0.00 :	   45faa:       01 fb                   add    %edi,%ebx
    0.00 :	   45fac:       2b 9d bc fa ff ff       sub    -0x544(%rbp),%ebx
    0.00 :	   45fb2:       48 83 bd 08 f9 ff ff    cmpq   $0x0,-0x6f8(%rbp)
    0.00 :	   45fb9:       00 
    0.00 :	   45fba:       89 bd 10 f9 ff ff       mov    %edi,-0x6f0(%rbp)
    0.00 :	   45fc0:       0f 95 c2                setne  %dl
    0.00 :	   45fc3:       85 c9                   test   %ecx,%ecx
    0.00 :	   45fc5:       0f 95 c0                setne  %al
    0.00 :	   45fc8:       20 c2                   and    %al,%dl
    0.00 :	   45fca:       88 95 c7 fa ff ff       mov    %dl,-0x539(%rbp)
    0.00 :	   45fd0:       74 0d                   je     45fdf <_IO_vfprintf+0x1d1f>
    0.00 :	   45fd2:       83 bd 3c fa ff ff 10    cmpl   $0x10,-0x5c4(%rbp)
    0.00 :	   45fd9:       8d 43 fe                lea    -0x2(%rbx),%eax
    0.00 :	   45fdc:       0f 44 d8                cmove  %eax,%ebx
    0.00 :	   45fdf:       8b 85 44 fa ff ff       mov    -0x5bc(%rbp),%eax
    0.00 :	   45fe5:       0b 85 20 fa ff ff       or     -0x5e0(%rbp),%eax
    0.00 :	   45feb:       0b 85 4c fa ff ff       or     -0x5b4(%rbp),%eax
    0.00 :	   45ff1:       83 f8 01                cmp    $0x1,%eax
    0.00 :	   45ff4:       83 d3 ff                adc    $0xffffffff,%ebx
    0.00 :	   45ff7:       80 bd 72 fa ff ff 20    cmpb   $0x20,-0x58e(%rbp)
    0.00 :	   45ffe:       0f 84 5a 17 00 00       je     4775e <_IO_vfprintf+0x349e>
    0.00 :	   46004:       8b 95 20 fa ff ff       mov    -0x5e0(%rbp),%edx
    0.00 :	   4600a:       85 d2                   test   %edx,%edx
    0.00 :	   4600c:       0f 85 1a 17 00 00       jne    4772c <_IO_vfprintf+0x346c>
    0.00 :	   46012:       8b 85 4c fa ff ff       mov    -0x5b4(%rbp),%eax
    0.00 :	   46018:       85 c0                   test   %eax,%eax
    0.00 :	   4601a:       0f 85 8d 1c 00 00       jne    47cad <_IO_vfprintf+0x39ed>
    0.00 :	   46020:       8b 85 44 fa ff ff       mov    -0x5bc(%rbp),%eax
    0.00 :	   46026:       85 c0                   test   %eax,%eax
    0.00 :	   46028:       0f 85 5e 1c 00 00       jne    47c8c <_IO_vfprintf+0x39cc>
    0.00 :	   4602e:       80 bd c7 fa ff ff 00    cmpb   $0x0,-0x539(%rbp)
    0.00 :	   46035:       74 0d                   je     46044 <_IO_vfprintf+0x1d84>
    0.00 :	   46037:       83 bd 3c fa ff ff 10    cmpl   $0x10,-0x5c4(%rbp)
    0.00 :	   4603e:       0f 84 1c 2d 00 00       je     48d60 <_IO_vfprintf+0x4aa0>
    0.00 :	   46044:       8b 8d bc fa ff ff       mov    -0x544(%rbp),%ecx
    0.00 :	   4604a:       8d 04 0b                lea    (%rbx,%rcx,1),%eax
    0.00 :	   4604d:       85 c0                   test   %eax,%eax
    0.00 :	   4604f:       7e 33                   jle    46084 <_IO_vfprintf+0x1dc4>
    0.00 :	   46051:       48 63 d0                movslq %eax,%rdx
    0.00 :	   46054:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   46059:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4605c:       e8 df 21 02 00          callq  68240 <_IO_padn>
    0.00 :	   46061:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   46068:       0f 87 29 02 00 00       ja     46297 <_IO_vfprintf+0x1fd7>
    0.00 :	   4606e:       89 c2                   mov    %eax,%edx
    0.00 :	   46070:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46075:       44 29 e8                sub    %r13d,%eax
    0.00 :	   46078:       39 c2                   cmp    %eax,%edx
    0.00 :	   4607a:       0f 87 51 08 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46080:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   46084:       45 85 ed                test   %r13d,%r13d
    0.00 :	   46087:       0f 88 f6 32 00 00       js     49383 <_IO_vfprintf+0x50c3>
    0.00 :	   4608d:       48 8b 9d 60 f9 ff ff    mov    -0x6a0(%rbp),%rbx
    0.00 :	   46094:       48 2b 9d d0 fa ff ff    sub    -0x530(%rbp),%rbx
    0.00 :	   4609b:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   4609e:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   460a5:       00 
    0.00 :	   460a6:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   460a9:       48 89 da                mov    %rbx,%rdx
    0.00 :	   460ac:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   460af:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   460b2:       0f 85 19 08 00 00       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   460b8:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   460bb:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   460c0:       48 29 d0                sub    %rdx,%rax
    0.00 :	   460c3:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   460c6:       0f 87 05 08 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   460cc:       8b 9d 10 f9 ff ff       mov    -0x6f0(%rbp),%ebx
    0.00 :	   460d2:       29 9d c0 fa ff ff       sub    %ebx,-0x540(%rbp)
    0.00 :	   460d8:       44 03 ad c0 fa ff ff    add    -0x540(%rbp),%r13d
    0.00 :	   460df:       e9 dc e9 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   460e4:       c7 85 3c fa ff ff 0a    movl   $0xa,-0x5c4(%rbp)
    0.00 :	   460eb:       00 00 00 
    0.00 :	   460ee:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   460f5:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   460f9:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   46100:       00 
    0.00 :	   46101:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   46108:       48 01 d0                add    %rdx,%rax
    0.00 :	   4610b:       48 85 c0                test   %rax,%rax
    0.00 :	   4610e:       0f 84 dc 18 00 00       je     479f0 <_IO_vfprintf+0x3730>
    0.00 :	   46114:       44 8b bd 60 fa ff ff    mov    -0x5a0(%rbp),%r15d
    0.00 :	   4611b:       45 85 ff                test   %r15d,%r15d
    0.00 :	   4611e:       0f 84 6c 11 00 00       je     47290 <_IO_vfprintf+0x2fd0>
    0.00 :	   46124:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   4612b:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   46132:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   46137:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   4613b:       48 8b 04 03             mov    (%rbx,%rax,1),%rax
    0.00 :	   4613f:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   46146:       00 00 00 
    0.00 :	   46149:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   46150:       00 00 00 
    0.00 :	   46153:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   4615a:       00 00 00 
    0.00 :	   4615d:       48 89 85 08 f9 ff ff    mov    %rax,-0x6f8(%rbp)
    0.00 :	   46164:       e9 aa fd ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   46169:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   46170:       01 
    0.00 :	   46171:       48 8d 15 62 fb ff ff    lea    -0x49e(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   46178:       48 8b bd 48 f9 ff ff    mov    -0x6b8(%rbp),%rdi
    0.00 :	   4617f:       0f b6 3f                movzbl (%rdi),%edi
    0.00 :	   46182:       89 f8                   mov    %edi,%eax
    0.00 :	   46184:       40 88 bd eb f9 ff ff    mov    %dil,-0x615(%rbp)
    0.00 :	   4618b:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4618e:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   46190:       77 2c                   ja     461be <_IO_vfprintf+0x1efe>
    0.00 :	   46192:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   46199:       48 8d 15 e0 ec 0e 00    lea    0xeece0(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   461a0:       83 e8 20                sub    $0x20,%eax
    0.00 :	   461a3:       48 98                   cltq   
    0.00 :	   461a5:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   461a9:       48 8d 05 d0 e9 0e 00    lea    0xee9d0(%rip),%rax        # 134b80 <step4_jumps.14587>
    0.00 :	   461b0:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   461b4:       48 8d 15 1f fb ff ff    lea    -0x4e1(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   461bb:       48 01 c2                add    %rax,%rdx
    0.00 :	   461be:       c7 85 b8 f9 ff ff 01    movl   $0x1,-0x648(%rbp)
    0.00 :	   461c5:       00 00 00 
    0.00 :	   461c8:       c7 85 c0 f9 ff ff 01    movl   $0x1,-0x640(%rbp)
    0.00 :	   461cf:       00 00 00 
    0.00 :	   461d2:       ff e2                   jmpq   *%rdx
    0.00 :	   461d4:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   461db:       01 
    0.00 :	   461dc:       48 8d 15 f7 fa ff ff    lea    -0x509(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   461e3:       48 8b 85 48 f9 ff ff    mov    -0x6b8(%rbp),%rax
    0.00 :	   461ea:       0f b6 00                movzbl (%rax),%eax
    0.00 :	   461ed:       88 85 eb f9 ff ff       mov    %al,-0x615(%rbp)
    0.00 :	   461f3:       83 e8 20                sub    $0x20,%eax
    0.00 :	   461f6:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   461f8:       77 2c                   ja     46226 <_IO_vfprintf+0x1f66>
    0.00 :	   461fa:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   46201:       48 8d 15 78 ec 0e 00    lea    0xeec78(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   46208:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4620b:       48 98                   cltq   
    0.00 :	   4620d:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   46211:       48 8d 05 68 e9 0e 00    lea    0xee968(%rip),%rax        # 134b80 <step4_jumps.14587>
    0.00 :	   46218:       48 63 04 90             movslq (%rax,%rdx,4),%rax
    0.00 :	   4621c:       48 8d 15 b7 fa ff ff    lea    -0x549(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   46223:       48 01 c2                add    %rax,%rdx
    0.00 :	   46226:       c7 85 b8 f9 ff ff 00    movl   $0x0,-0x648(%rbp)
    0.00 :	   4622d:       00 00 00 
    0.00 :	   46230:       c7 85 c0 f9 ff ff 01    movl   $0x1,-0x640(%rbp)
    0.00 :	   46237:       00 00 00 
    0.00 :	   4623a:       ff e2                   jmpq   *%rdx
    0.00 :	   4623c:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   46243:       48 8b 95 80 f9 ff ff    mov    -0x680(%rbp),%rdx
    0.00 :	   4624a:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   4624e:       48 8d 34 c2             lea    (%rdx,%rax,8),%rsi
    0.00 :	   46252:       48 85 f6                test   %rsi,%rsi
    0.00 :	   46255:       0f 84 c4 1b 00 00       je     47e1f <_IO_vfprintf+0x3b5f>
    0.00 :	   4625b:       48 63 46 30             movslq 0x30(%rsi),%rax
    0.00 :	   4625f:       48 8d 95 78 ff ff ff    lea    -0x88(%rbp),%rdx
    0.00 :	   46266:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46269:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   4626d:       48 03 85 08 fa ff ff    add    -0x5f8(%rbp),%rax
    0.00 :	   46274:       48 89 85 78 ff ff ff    mov    %rax,-0x88(%rbp)
    0.00 :	   4627b:       e8 40 64 00 00          callq  4c6c0 <__printf_fphex>
    0.00 :	   46280:       89 c2                   mov    %eax,%edx
    0.00 :	   46282:       85 d2                   test   %edx,%edx
    0.00 :	   46284:       0f 88 47 06 00 00       js     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4628a:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   46291:       0f 86 1c ec ff ff       jbe    44eb3 <_IO_vfprintf+0xbf3>
    0.00 :	   46297:       48 8d 0d 72 c6 0f 00    lea    0xfc672(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   4629e:       48 8d 35 31 4a 0f 00    lea    0xf4a31(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   462a5:       48 8d 3d e4 85 0f 00    lea    0xf85e4(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   462ac:       ba b5 07 00 00          mov    $0x7b5,%edx
    0.00 :	   462b1:       e8 6a 56 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   462b6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   462bd:       00 00 00 
    0.00 :	   462c0:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   462c7:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   462cb:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   462d2:       00 
    0.00 :	   462d3:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   462da:       48 01 d0                add    %rdx,%rax
    0.00 :	   462dd:       48 85 c0                test   %rax,%rax
    0.00 :	   462e0:       0f 84 30 33 00 00       je     49616 <_IO_vfprintf+0x5356>
    0.00 :	   462e6:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   462ed:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   462f2:       48 8b 95 08 fa ff ff    mov    -0x5f8(%rbp),%rdx
    0.00 :	   462f9:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   462fd:       48 8b 04 02             mov    (%rdx,%rax,1),%rax
    0.00 :	   46301:       48 85 c0                test   %rax,%rax
    0.00 :	   46304:       0f 84 d6 10 00 00       je     473e0 <_IO_vfprintf+0x3120>
    0.00 :	   4630a:       48 89 85 08 f9 ff ff    mov    %rax,-0x6f8(%rbp)
    0.00 :	   46311:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   46318:       00 00 00 
    0.00 :	   4631b:       c7 85 3c fa ff ff 10    movl   $0x10,-0x5c4(%rbp)
    0.00 :	   46322:       00 00 00 
    0.00 :	   46325:       c7 85 40 fa ff ff 01    movl   $0x1,-0x5c0(%rbp)
    0.00 :	   4632c:       00 00 00 
    0.00 :	   4632f:       c7 85 50 fa ff ff 00    movl   $0x0,-0x5b0(%rbp)
    0.00 :	   46336:       00 00 00 
    0.00 :	   46339:       c6 85 73 fa ff ff 78    movb   $0x78,-0x58d(%rbp)
    0.00 :	   46340:       e9 ce fb ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   46345:       41 f6 44 24 74 04       testb  $0x4,0x74(%r12)
    0.00 :	   4634b:       74 10                   je     4635d <_IO_vfprintf+0x209d>
    0.00 :	   4634d:       44 8b 8d 74 f9 ff ff    mov    -0x68c(%rbp),%r9d
    0.00 :	   46354:       45 85 c9                test   %r9d,%r9d
    0.00 :	   46357:       0f 84 28 2e 00 00       je     49185 <_IO_vfprintf+0x4ec5>
    0.00 :	   4635d:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   46364:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   46368:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	   4636f:       00 
    0.00 :	   46370:       48 8b 85 80 f9 ff ff    mov    -0x680(%rbp),%rax
    0.00 :	   46377:       48 01 d0                add    %rdx,%rax
    0.00 :	   4637a:       48 85 c0                test   %rax,%rax
    0.00 :	   4637d:       0f 84 f1 2e 00 00       je     49274 <_IO_vfprintf+0x4fb4>
    0.00 :	   46383:       8b 8d 60 fa ff ff       mov    -0x5a0(%rbp),%ecx
    0.00 :	   46389:       85 c9                   test   %ecx,%ecx
    0.00 :	   4638b:       0f 84 b5 19 00 00       je     47d46 <_IO_vfprintf+0x3a86>
    0.00 :	   46391:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   46398:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   4639f:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   463a4:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   463a8:       48 8b 14 03             mov    (%rbx,%rax,1),%rdx
    0.00 :	   463ac:       49 63 c5                movslq %r13d,%rax
    0.00 :	   463af:       48 89 02                mov    %rax,(%rdx)
    0.00 :	   463b2:       e9 09 e7 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   463b7:       48 8b b5 88 f8 ff ff    mov    -0x778(%rbp),%rsi
    0.00 :	   463be:       8b bd 70 f9 ff ff       mov    -0x690(%rbp),%edi
    0.00 :	   463c4:       ba e8 03 00 00          mov    $0x3e8,%edx
    0.00 :	   463c9:       e8 82 a6 03 00          callq  80a50 <__strerror_r>
    0.00 :	   463ce:       c7 85 60 fa ff ff 00    movl   $0x0,-0x5a0(%rbp)
    0.00 :	   463d5:       00 00 00 
    0.00 :	   463d8:       49 89 c7                mov    %rax,%r15
    0.00 :	   463db:       e9 2d eb ff ff          jmpq   44f0d <_IO_vfprintf+0xc4d>
    0.00 :	   463e0:       c7 85 3c fa ff ff 10    movl   $0x10,-0x5c4(%rbp)
    0.00 :	   463e7:       00 00 00 
    0.00 :	   463ea:       e9 ff fc ff ff          jmpq   460ee <_IO_vfprintf+0x1e2e>
    0.00 :	   463ef:       48 63 85 6c f9 ff ff    movslq -0x694(%rbp),%rax
    0.00 :	   463f6:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   463fd:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	   46401:       48 8d 34 c1             lea    (%rcx,%rax,8),%rsi
    0.00 :	   46405:       48 85 f6                test   %rsi,%rsi
    0.00 :	   46408:       0f 84 fb 1b 00 00       je     48009 <_IO_vfprintf+0x3d49>
    0.00 :	   4640e:       48 63 46 30             movslq 0x30(%rsi),%rax
    0.00 :	   46412:       48 8d 95 78 ff ff ff    lea    -0x88(%rbp),%rdx
    0.00 :	   46419:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4641c:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   46420:       48 03 85 08 fa ff ff    add    -0x5f8(%rbp),%rax
    0.00 :	   46427:       48 89 85 78 ff ff ff    mov    %rax,-0x88(%rbp)
    0.00 :	   4642e:       e8 7d 39 00 00          callq  49db0 <__printf_fp>
    0.00 :	   46433:       89 c2                   mov    %eax,%edx
    0.00 :	   46435:       e9 48 fe ff ff          jmpq   46282 <_IO_vfprintf+0x1fc2>
    0.00 :	   4643a:       c7 85 3c fa ff ff 08    movl   $0x8,-0x5c4(%rbp)
    0.00 :	   46441:       00 00 00 
    0.00 :	   46444:       e9 a5 fc ff ff          jmpq   460ee <_IO_vfprintf+0x1e2e>
    0.00 :	   46449:       c7 85 a0 f9 ff ff 10    movl   $0x10,-0x660(%rbp)
    0.00 :	   46450:       00 00 00 
    0.00 :	   46453:       8b 9d c0 f9 ff ff       mov    -0x640(%rbp),%ebx
    0.00 :	   46459:       85 db                   test   %ebx,%ebx
    0.00 :	   4645b:       0f 84 db 0a 00 00       je     46f3c <_IO_vfprintf+0x2c7c>
    0.00 :	   46461:       41 8b 06                mov    (%r14),%eax
    0.00 :	   46464:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   46467:       0f 83 62 0f 00 00       jae    473cf <_IO_vfprintf+0x310f>
    0.00 :	   4646d:       89 c2                   mov    %eax,%edx
    0.00 :	   4646f:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   46473:       83 c0 08                add    $0x8,%eax
    0.00 :	   46476:       41 89 06                mov    %eax,(%r14)
    0.00 :	   46479:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   4647c:       c7 85 90 f9 ff ff 00    movl   $0x0,-0x670(%rbp)
    0.00 :	   46483:       00 00 00 
    0.00 :	   46486:       c7 85 a8 f9 ff ff 00    movl   $0x0,-0x658(%rbp)
    0.00 :	   4648d:       00 00 00 
    0.00 :	   46490:       c7 85 b0 f9 ff ff 00    movl   $0x0,-0x650(%rbp)
    0.00 :	   46497:       00 00 00 
    0.00 :	   4649a:       48 89 95 c0 f8 ff ff    mov    %rdx,-0x740(%rbp)
    0.00 :	   464a1:       83 bd ec fa ff ff 00    cmpl   $0x0,-0x514(%rbp)
    0.00 :	   464a8:       0f 8c 7f 0a 00 00       jl     46f2d <_IO_vfprintf+0x2c6d>
    0.00 :	   464ae:       0f 85 8e 09 00 00       jne    46e42 <_IO_vfprintf+0x2b82>
    0.00 :	   464b4:       48 83 bd c0 f8 ff ff    cmpq   $0x0,-0x740(%rbp)
    0.00 :	   464bb:       00 
    0.00 :	   464bc:       0f 85 80 09 00 00       jne    46e42 <_IO_vfprintf+0x2b82>
    0.00 :	   464c2:       83 bd a0 f9 ff ff 08    cmpl   $0x8,-0x660(%rbp)
    0.00 :	   464c9:       0f 84 51 17 00 00       je     47c20 <_IO_vfprintf+0x3960>
    0.00 :	   464cf:       48 8b bd 60 f9 ff ff    mov    -0x6a0(%rbp),%rdi
    0.00 :	   464d6:       31 c0                   xor    %eax,%eax
    0.00 :	   464d8:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   464df:       48 89 bd 98 fa ff ff    mov    %rdi,-0x568(%rbp)
    0.00 :	   464e6:       49 89 ff                mov    %rdi,%r15
    0.00 :	   464e9:       48 2b 85 60 f9 ff ff    sub    -0x6a0(%rbp),%rax
    0.00 :	   464f0:       8b 8d ac f9 ff ff       mov    -0x654(%rbp),%ecx
    0.00 :	   464f6:       ba 00 00 00 00          mov    $0x0,%edx
    0.00 :	   464fb:       48 03 85 98 fa ff ff    add    -0x568(%rbp),%rax
    0.00 :	   46502:       48 0f 48 c2             cmovs  %rdx,%rax
    0.00 :	   46506:       85 c9                   test   %ecx,%ecx
    0.00 :	   46508:       89 85 c8 f9 ff ff       mov    %eax,-0x638(%rbp)
    0.00 :	   4650e:       0f 85 9c 05 00 00       jne    46ab0 <_IO_vfprintf+0x27f0>
    0.00 :	   46514:       8b 8d 60 f9 ff ff       mov    -0x6a0(%rbp),%ecx
    0.00 :	   4651a:       29 8d b8 fa ff ff       sub    %ecx,-0x548(%rbp)
    0.00 :	   46520:       8b 95 98 fa ff ff       mov    -0x568(%rbp),%edx
    0.00 :	   46526:       8b 9d b8 fa ff ff       mov    -0x548(%rbp),%ebx
    0.00 :	   4652c:       89 8d d0 f8 ff ff       mov    %ecx,-0x730(%rbp)
    0.00 :	   46532:       01 d3                   add    %edx,%ebx
    0.00 :	   46534:       89 95 cc f8 ff ff       mov    %edx,-0x734(%rbp)
    0.00 :	   4653a:       29 c3                   sub    %eax,%ebx
    0.00 :	   4653c:       48 83 bd c0 f8 ff ff    cmpq   $0x0,-0x740(%rbp)
    0.00 :	   46543:       00 
    0.00 :	   46544:       0f 95 c0                setne  %al
    0.00 :	   46547:       22 85 a4 f9 ff ff       and    -0x65c(%rbp),%al
    0.00 :	   4654d:       88 85 af fa ff ff       mov    %al,-0x551(%rbp)
    0.00 :	   46553:       74 0d                   je     46562 <_IO_vfprintf+0x22a2>
    0.00 :	   46555:       83 bd a0 f9 ff ff 10    cmpl   $0x10,-0x660(%rbp)
    0.00 :	   4655c:       8d 43 fe                lea    -0x2(%rbx),%eax
    0.00 :	   4655f:       0f 44 d8                cmove  %eax,%ebx
    0.00 :	   46562:       8b 85 a8 f9 ff ff       mov    -0x658(%rbp),%eax
    0.00 :	   46568:       0b 85 90 f9 ff ff       or     -0x670(%rbp),%eax
    0.00 :	   4656e:       0b 85 b0 f9 ff ff       or     -0x650(%rbp),%eax
    0.00 :	   46574:       83 f8 01                cmp    $0x1,%eax
    0.00 :	   46577:       83 d3 ff                adc    $0xffffffff,%ebx
    0.00 :	   4657a:       80 bd d0 f9 ff ff 20    cmpb   $0x20,-0x630(%rbp)
    0.00 :	   46581:       0f 84 8e 0d 00 00       je     47315 <_IO_vfprintf+0x3055>
    0.00 :	   46587:       8b 95 90 f9 ff ff       mov    -0x670(%rbp),%edx
    0.00 :	   4658d:       85 d2                   test   %edx,%edx
    0.00 :	   4658f:       0f 85 4e 0d 00 00       jne    472e3 <_IO_vfprintf+0x3023>
    0.00 :	   46595:       8b 85 b0 f9 ff ff       mov    -0x650(%rbp),%eax
    0.00 :	   4659b:       85 c0                   test   %eax,%eax
    0.00 :	   4659d:       0f 85 c5 1c 00 00       jne    48268 <_IO_vfprintf+0x3fa8>
    0.00 :	   465a3:       8b 85 a8 f9 ff ff       mov    -0x658(%rbp),%eax
    0.00 :	   465a9:       85 c0                   test   %eax,%eax
    0.00 :	   465ab:       0f 85 cf 17 00 00       jne    47d80 <_IO_vfprintf+0x3ac0>
    0.00 :	   465b1:       80 bd af fa ff ff 00    cmpb   $0x0,-0x551(%rbp)
    0.00 :	   465b8:       74 0d                   je     465c7 <_IO_vfprintf+0x2307>
    0.00 :	   465ba:       83 bd a0 f9 ff ff 10    cmpl   $0x10,-0x660(%rbp)
    0.00 :	   465c1:       0f 84 51 2a 00 00       je     49018 <_IO_vfprintf+0x4d58>
    0.00 :	   465c7:       8b 8d c8 f9 ff ff       mov    -0x638(%rbp),%ecx
    0.00 :	   465cd:       8d 04 0b                lea    (%rbx,%rcx,1),%eax
    0.00 :	   465d0:       85 c0                   test   %eax,%eax
    0.00 :	   465d2:       7e 33                   jle    46607 <_IO_vfprintf+0x2347>
    0.00 :	   465d4:       48 63 d0                movslq %eax,%rdx
    0.00 :	   465d7:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   465dc:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   465df:       e8 5c 1c 02 00          callq  68240 <_IO_padn>
    0.00 :	   465e4:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   465eb:       0f 87 b0 01 00 00       ja     467a1 <_IO_vfprintf+0x24e1>
    0.00 :	   465f1:       89 c2                   mov    %eax,%edx
    0.00 :	   465f3:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   465f8:       44 29 e8                sub    %r13d,%eax
    0.00 :	   465fb:       39 c2                   cmp    %eax,%edx
    0.00 :	   465fd:       0f 87 ce 02 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46603:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   46607:       45 85 ed                test   %r13d,%r13d
    0.00 :	   4660a:       0f 88 f0 26 00 00       js     48d00 <_IO_vfprintf+0x4a40>
    0.00 :	   46610:       48 8b 9d 60 f9 ff ff    mov    -0x6a0(%rbp),%rbx
    0.00 :	   46617:       48 2b 9d 98 fa ff ff    sub    -0x568(%rbp),%rbx
    0.00 :	   4661e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   46621:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   46628:       00 
    0.00 :	   46629:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4662c:       48 89 da                mov    %rbx,%rdx
    0.00 :	   4662f:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   46632:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46635:       0f 85 96 02 00 00       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4663b:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   4663e:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46643:       48 29 d0                sub    %rdx,%rax
    0.00 :	   46646:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46649:       0f 87 82 02 00 00       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4664f:       8b 9d cc f8 ff ff       mov    -0x734(%rbp),%ebx
    0.00 :	   46655:       29 9d d0 f8 ff ff       sub    %ebx,-0x730(%rbp)
    0.00 :	   4665b:       44 03 ad d0 f8 ff ff    add    -0x730(%rbp),%r13d
    0.00 :	   46662:       e9 29 e2 ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   46667:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   4666e:       48 c7 85 28 ff ff ff    movq   $0x0,-0xd8(%rbp)
    0.00 :	   46675:       00 00 00 00 
    0.00 :	   46679:       0f b6 95 bc f9 ff ff    movzbl -0x644(%rbp),%edx
    0.00 :	   46680:       8b 8d ec fa ff ff       mov    -0x514(%rbp),%ecx
    0.00 :	   46686:       44 8b 9d b8 f9 ff ff    mov    -0x648(%rbp),%r11d
    0.00 :	   4668d:       8b 9d b8 fa ff ff       mov    -0x548(%rbp),%ebx
    0.00 :	   46693:       89 85 28 ff ff ff       mov    %eax,-0xd8(%rbp)
    0.00 :	   46699:       0f b6 85 2c ff ff ff    movzbl -0xd4(%rbp),%eax
    0.00 :	   466a0:       01 d2                   add    %edx,%edx
    0.00 :	   466a2:       89 8d 20 ff ff ff       mov    %ecx,-0xe0(%rbp)
    0.00 :	   466a8:       0f b6 8d c0 f9 ff ff    movzbl -0x640(%rbp),%ecx
    0.00 :	   466af:       89 9d 24 ff ff ff       mov    %ebx,-0xdc(%rbp)
    0.00 :	   466b5:       83 e0 fc                and    $0xfffffffc,%eax
    0.00 :	   466b8:       0a 85 b8 f9 ff ff       or     -0x648(%rbp),%al
    0.00 :	   466be:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	   466c1:       09 d0                   or     %edx,%eax
    0.00 :	   466c3:       0f b6 95 a4 f9 ff ff    movzbl -0x65c(%rbp),%edx
    0.00 :	   466ca:       83 e0 f3                and    $0xfffffff3,%eax
    0.00 :	   466cd:       09 c8                   or     %ecx,%eax
    0.00 :	   466cf:       0f b6 8d a8 f9 ff ff    movzbl -0x658(%rbp),%ecx
    0.00 :	   466d6:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   466d9:       09 d0                   or     %edx,%eax
    0.00 :	   466db:       0f b6 95 ac f9 ff ff    movzbl -0x654(%rbp),%edx
    0.00 :	   466e2:       c1 e1 04                shl    $0x4,%ecx
    0.00 :	   466e5:       83 e0 cf                and    $0xffffffcf,%eax
    0.00 :	   466e8:       09 c8                   or     %ecx,%eax
    0.00 :	   466ea:       0f b6 8d b0 f9 ff ff    movzbl -0x650(%rbp),%ecx
    0.00 :	   466f1:       c1 e2 05                shl    $0x5,%edx
    0.00 :	   466f4:       09 d0                   or     %edx,%eax
    0.00 :	   466f6:       0f b6 95 b4 f9 ff ff    movzbl -0x64c(%rbp),%edx
    0.00 :	   466fd:       c1 e1 06                shl    $0x6,%ecx
    0.00 :	   46700:       83 e0 3f                and    $0x3f,%eax
    0.00 :	   46703:       09 c8                   or     %ecx,%eax
    0.00 :	   46705:       c1 e2 07                shl    $0x7,%edx
    0.00 :	   46708:       09 d0                   or     %edx,%eax
    0.00 :	   4670a:       0f b6 95 cc f9 ff ff    movzbl -0x634(%rbp),%edx
    0.00 :	   46711:       88 85 2c ff ff ff       mov    %al,-0xd4(%rbp)
    0.00 :	   46717:       0f b6 85 2d ff ff ff    movzbl -0xd3(%rbp),%eax
    0.00 :	   4671e:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   46721:       83 e0 f7                and    $0xfffffff7,%eax
    0.00 :	   46724:       09 d0                   or     %edx,%eax
    0.00 :	   46726:       45 85 db                test   %r11d,%r11d
    0.00 :	   46729:       88 85 2d ff ff ff       mov    %al,-0xd3(%rbp)
    0.00 :	   4672f:       0f b6 85 d0 f9 ff ff    movzbl -0x630(%rbp),%eax
    0.00 :	   46736:       89 85 30 ff ff ff       mov    %eax,-0xd0(%rbp)
    0.00 :	   4673c:       0f 84 2b 14 00 00       je     47b6d <_IO_vfprintf+0x38ad>
    0.00 :	   46742:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	   46746:       48 83 c0 0f             add    $0xf,%rax
    0.00 :	   4674a:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4674e:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   46752:       49 89 56 08             mov    %rdx,0x8(%r14)
    0.00 :	   46756:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	   46759:       48 8b 00                mov    (%rax),%rax
    0.00 :	   4675c:       89 95 58 ff ff ff       mov    %edx,-0xa8(%rbp)
    0.00 :	   46762:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
    0.00 :	   46769:       48 8d 7d 98             lea    -0x68(%rbp),%rdi
    0.00 :	   4676d:       48 8d 85 50 ff ff ff    lea    -0xb0(%rbp),%rax
    0.00 :	   46774:       48 8d b5 20 ff ff ff    lea    -0xe0(%rbp),%rsi
    0.00 :	   4677b:       48 89 fa                mov    %rdi,%rdx
    0.00 :	   4677e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46781:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	   46785:       e8 26 36 00 00          callq  49db0 <__printf_fp>
    0.00 :	   4678a:       85 c0                   test   %eax,%eax
    0.00 :	   4678c:       89 c2                   mov    %eax,%edx
    0.00 :	   4678e:       0f 88 3d 01 00 00       js     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46794:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   4679b:       0f 86 3f f1 ff ff       jbe    458e0 <_IO_vfprintf+0x1620>
    0.00 :	   467a1:       48 8d 0d 68 c1 0f 00    lea    0xfc168(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   467a8:       48 8d 35 27 45 0f 00    lea    0xf4527(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   467af:       48 8d 3d da 80 0f 00    lea    0xf80da(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   467b6:       ba 41 06 00 00          mov    $0x641,%edx
    0.00 :	   467bb:       e8 60 51 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   467c0:       8b 85 ec fa ff ff       mov    -0x514(%rbp),%eax
    0.00 :	   467c6:       48 c7 85 28 ff ff ff    movq   $0x0,-0xd8(%rbp)
    0.00 :	   467cd:       00 00 00 00 
    0.00 :	   467d1:       8b 95 b8 fa ff ff       mov    -0x548(%rbp),%edx
    0.00 :	   467d7:       0f b6 8d c0 f9 ff ff    movzbl -0x640(%rbp),%ecx
    0.00 :	   467de:       44 8b 95 b8 f9 ff ff    mov    -0x648(%rbp),%r10d
    0.00 :	   467e5:       89 85 20 ff ff ff       mov    %eax,-0xe0(%rbp)
    0.00 :	   467eb:       0f be 85 eb f9 ff ff    movsbl -0x615(%rbp),%eax
    0.00 :	   467f2:       89 95 24 ff ff ff       mov    %edx,-0xdc(%rbp)
    0.00 :	   467f8:       0f b6 95 bc f9 ff ff    movzbl -0x644(%rbp),%edx
    0.00 :	   467ff:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	   46802:       89 85 28 ff ff ff       mov    %eax,-0xd8(%rbp)
    0.00 :	   46808:       0f b6 85 2c ff ff ff    movzbl -0xd4(%rbp),%eax
    0.00 :	   4680f:       01 d2                   add    %edx,%edx
    0.00 :	   46811:       83 e0 fc                and    $0xfffffffc,%eax
    0.00 :	   46814:       0a 85 b8 f9 ff ff       or     -0x648(%rbp),%al
    0.00 :	   4681a:       09 d0                   or     %edx,%eax
    0.00 :	   4681c:       0f b6 95 a4 f9 ff ff    movzbl -0x65c(%rbp),%edx
    0.00 :	   46823:       83 e0 f3                and    $0xfffffff3,%eax
    0.00 :	   46826:       09 c8                   or     %ecx,%eax
    0.00 :	   46828:       0f b6 8d a8 f9 ff ff    movzbl -0x658(%rbp),%ecx
    0.00 :	   4682f:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   46832:       09 d0                   or     %edx,%eax
    0.00 :	   46834:       0f b6 95 ac f9 ff ff    movzbl -0x654(%rbp),%edx
    0.00 :	   4683b:       c1 e1 04                shl    $0x4,%ecx
    0.00 :	   4683e:       83 e0 cf                and    $0xffffffcf,%eax
    0.00 :	   46841:       09 c8                   or     %ecx,%eax
    0.00 :	   46843:       0f b6 8d b0 f9 ff ff    movzbl -0x650(%rbp),%ecx
    0.00 :	   4684a:       c1 e2 05                shl    $0x5,%edx
    0.00 :	   4684d:       09 d0                   or     %edx,%eax
    0.00 :	   4684f:       0f b6 95 b4 f9 ff ff    movzbl -0x64c(%rbp),%edx
    0.00 :	   46856:       c1 e1 06                shl    $0x6,%ecx
    0.00 :	   46859:       83 e0 3f                and    $0x3f,%eax
    0.00 :	   4685c:       09 c8                   or     %ecx,%eax
    0.00 :	   4685e:       c1 e2 07                shl    $0x7,%edx
    0.00 :	   46861:       09 d0                   or     %edx,%eax
    0.00 :	   46863:       45 85 d2                test   %r10d,%r10d
    0.00 :	   46866:       88 85 2c ff ff ff       mov    %al,-0xd4(%rbp)
    0.00 :	   4686c:       0f b6 85 d0 f9 ff ff    movzbl -0x630(%rbp),%eax
    0.00 :	   46873:       89 85 30 ff ff ff       mov    %eax,-0xd0(%rbp)
    0.00 :	   46879:       0f 84 01 12 00 00       je     47a80 <_IO_vfprintf+0x37c0>
    0.00 :	   4687f:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	   46883:       48 83 c0 0f             add    $0xf,%rax
    0.00 :	   46887:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4688b:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   4688f:       49 89 56 08             mov    %rdx,0x8(%r14)
    0.00 :	   46893:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	   46896:       48 8b 00                mov    (%rax),%rax
    0.00 :	   46899:       89 95 58 ff ff ff       mov    %edx,-0xa8(%rbp)
    0.00 :	   4689f:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
    0.00 :	   468a6:       48 8d 4d 98             lea    -0x68(%rbp),%rcx
    0.00 :	   468aa:       48 8d 85 50 ff ff ff    lea    -0xb0(%rbp),%rax
    0.00 :	   468b1:       48 8d b5 20 ff ff ff    lea    -0xe0(%rbp),%rsi
    0.00 :	   468b8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   468bb:       48 89 ca                mov    %rcx,%rdx
    0.00 :	   468be:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	   468c2:       e8 f9 5d 00 00          callq  4c6c0 <__printf_fphex>
    0.00 :	   468c7:       85 c0                   test   %eax,%eax
    0.00 :	   468c9:       89 c2                   mov    %eax,%edx
    0.00 :	   468cb:       0f 89 c3 fe ff ff       jns    46794 <_IO_vfprintf+0x24d4>
    0.00 :	   468d1:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   468d7:       80 bd 8b f9 ff ff 00    cmpb   $0x0,-0x675(%rbp)
    0.00 :	   468de:       0f 84 8f db ff ff       je     44473 <_IO_vfprintf+0x1b3>
    0.00 :	   468e4:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   468eb:       e8 b0 7f fd ff          callq  1e8a0 <free@plt>
    0.00 :	   468f0:       e9 7e db ff ff          jmpq   44473 <_IO_vfprintf+0x1b3>
    0.00 :	   468f5:       41 8b 06                mov    (%r14),%eax
    0.00 :	   468f8:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   468fb:       0f 83 7f 18 00 00       jae    48180 <_IO_vfprintf+0x3ec0>
    0.00 :	   46901:       89 c2                   mov    %eax,%edx
    0.00 :	   46903:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   46907:       83 c0 08                add    $0x8,%eax
    0.00 :	   4690a:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4690d:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   46910:       48 85 c0                test   %rax,%rax
    0.00 :	   46913:       0f 84 bd 0c 00 00       je     475d6 <_IO_vfprintf+0x3316>
    0.00 :	   46919:       48 89 85 c0 f8 ff ff    mov    %rax,-0x740(%rbp)
    0.00 :	   46920:       c7 85 90 f9 ff ff 00    movl   $0x0,-0x670(%rbp)
    0.00 :	   46927:       00 00 00 
    0.00 :	   4692a:       c7 85 a0 f9 ff ff 10    movl   $0x10,-0x660(%rbp)
    0.00 :	   46931:       00 00 00 
    0.00 :	   46934:       c7 85 a4 f9 ff ff 01    movl   $0x1,-0x65c(%rbp)
    0.00 :	   4693b:       00 00 00 
    0.00 :	   4693e:       c7 85 b4 f9 ff ff 00    movl   $0x0,-0x64c(%rbp)
    0.00 :	   46945:       00 00 00 
    0.00 :	   46948:       c6 85 eb f9 ff ff 78    movb   $0x78,-0x615(%rbp)
    0.00 :	   4694f:       e9 4d fb ff ff          jmpq   464a1 <_IO_vfprintf+0x21e1>
    0.00 :	   46954:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   46959:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4695e:       0f 83 7e 26 00 00       jae    48fe2 <_IO_vfprintf+0x4d22>
    0.00 :	   46964:       c6 00 25                movb   $0x25,(%rax)
    0.00 :	   46967:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4696b:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   46970:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   46977:       0f 84 54 ff ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4697d:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   46981:       e9 0a df ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   46986:       8b 85 c0 f9 ff ff       mov    -0x640(%rbp),%eax
    0.00 :	   4698c:       85 c0                   test   %eax,%eax
    0.00 :	   4698e:       0f 84 db 0f 00 00       je     4796f <_IO_vfprintf+0x36af>
    0.00 :	   46994:       41 8b 06                mov    (%r14),%eax
    0.00 :	   46997:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4699a:       0f 83 be 0f 00 00       jae    4795e <_IO_vfprintf+0x369e>
    0.00 :	   469a0:       89 c2                   mov    %eax,%edx
    0.00 :	   469a2:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   469a6:       83 c0 08                add    $0x8,%eax
    0.00 :	   469a9:       41 89 06                mov    %eax,(%r14)
    0.00 :	   469ac:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   469af:       48 89 d3                mov    %rdx,%rbx
    0.00 :	   469b2:       48 89 d0                mov    %rdx,%rax
    0.00 :	   469b5:       c7 85 a0 f9 ff ff 0a    movl   $0xa,-0x660(%rbp)
    0.00 :	   469bc:       00 00 00 
    0.00 :	   469bf:       48 c1 eb 3f             shr    $0x3f,%rbx
    0.00 :	   469c3:       48 f7 d8                neg    %rax
    0.00 :	   469c6:       85 db                   test   %ebx,%ebx
    0.00 :	   469c8:       89 9d 90 f9 ff ff       mov    %ebx,-0x670(%rbp)
    0.00 :	   469ce:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	   469d2:       48 89 95 c0 f8 ff ff    mov    %rdx,-0x740(%rbp)
    0.00 :	   469d9:       e9 c3 fa ff ff          jmpq   464a1 <_IO_vfprintf+0x21e1>
    0.00 :	   469de:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   469e5:       01 
    0.00 :	   469e6:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   469ed:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   469f0:       89 d0                   mov    %edx,%eax
    0.00 :	   469f2:       88 95 eb f9 ff ff       mov    %dl,-0x615(%rbp)
    0.00 :	   469f8:       48 8d 15 db f2 ff ff    lea    -0xd25(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   469ff:       83 e8 20                sub    $0x20,%eax
    0.00 :	   46a02:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   46a04:       0f 87 1c f8 ff ff       ja     46226 <_IO_vfprintf+0x1f66>
    0.00 :	   46a0a:       e9 eb f7 ff ff          jmpq   461fa <_IO_vfprintf+0x1f3a>
    0.00 :	   46a0f:       48 83 85 48 f9 ff ff    addq   $0x1,-0x6b8(%rbp)
    0.00 :	   46a16:       01 
    0.00 :	   46a17:       48 8d 15 bc f2 ff ff    lea    -0xd44(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   46a1e:       48 8b 8d 48 f9 ff ff    mov    -0x6b8(%rbp),%rcx
    0.00 :	   46a25:       0f b6 09                movzbl (%rcx),%ecx
    0.00 :	   46a28:       89 c8                   mov    %ecx,%eax
    0.00 :	   46a2a:       88 8d eb f9 ff ff       mov    %cl,-0x615(%rbp)
    0.00 :	   46a30:       83 e8 20                sub    $0x20,%eax
    0.00 :	   46a33:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   46a35:       0f 87 eb f7 ff ff       ja     46226 <_IO_vfprintf+0x1f66>
    0.00 :	   46a3b:       e9 ba f7 ff ff          jmpq   461fa <_IO_vfprintf+0x1f3a>
    0.00 :	   46a40:       c7 85 a0 f9 ff ff 0a    movl   $0xa,-0x660(%rbp)
    0.00 :	   46a47:       00 00 00 
    0.00 :	   46a4a:       e9 04 fa ff ff          jmpq   46453 <_IO_vfprintf+0x2193>
    0.00 :	   46a4f:       c7 85 a0 f9 ff ff 08    movl   $0x8,-0x660(%rbp)
    0.00 :	   46a56:       00 00 00 
    0.00 :	   46a59:       e9 f5 f9 ff ff          jmpq   46453 <_IO_vfprintf+0x2193>
    0.00 :	   46a5e:       66 90                   xchg   %ax,%ax
    0.00 :	   46a60:       48 8b 85 58 f8 ff ff    mov    -0x7a8(%rbp),%rax
    0.00 :	   46a67:       48 8b 3d ca b3 32 00    mov    0x32b3ca(%rip),%rdi        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   46a6e:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   46a74:       c7 04 38 16 00 00 00    movl   $0x16,(%rax,%rdi,1)
    0.00 :	   46a7b:       e9 9f da ff ff          jmpq   4451f <_IO_vfprintf+0x25f>
    0.00 :	   46a80:       48 8b 05 e9 0b 33 00    mov    0x330be9(%rip),%rax        # 377670 <__libc_pthread_functions+0x170>
    0.00 :	   46a87:       48 8d bd e0 fe ff ff    lea    -0x120(%rbp),%rdi
    0.00 :	   46a8e:       4c 89 e2                mov    %r12,%rdx
    0.00 :	   46a91:       48 c1 c8 11             ror    $0x11,%rax
    0.00 :	   46a95:       64 48 33 04 25 30 00    xor    %fs:0x30,%rax
    0.00 :	   46a9c:       00 00 
    0.00 :	   46a9e:       48 8b 35 a3 b4 32 00    mov    0x32b4a3(%rip),%rsi        # 371f48 <_DYNAMIC+0x3e8>
    0.00 :	   46aa5:       ff d0                   callq  *%rax
    0.00 :	   46aa7:       41 8b 1c 24             mov    (%r12),%ebx
    0.00 :	   46aab:       e9 1a d9 ff ff          jmpq   443ca <_IO_vfprintf+0x10a>
    0.00 :	   46ab0:       8b 85 90 f9 ff ff       mov    -0x670(%rbp),%eax
    0.00 :	   46ab6:       85 c0                   test   %eax,%eax
    0.00 :	   46ab8:       0f 85 c8 0a 00 00       jne    47586 <_IO_vfprintf+0x32c6>
    0.00 :	   46abe:       8b 85 b0 f9 ff ff       mov    -0x650(%rbp),%eax
    0.00 :	   46ac4:       85 c0                   test   %eax,%eax
    0.00 :	   46ac6:       0f 85 f7 0c 00 00       jne    477c3 <_IO_vfprintf+0x3503>
    0.00 :	   46acc:       8b 85 a8 f9 ff ff       mov    -0x658(%rbp),%eax
    0.00 :	   46ad2:       85 c0                   test   %eax,%eax
    0.00 :	   46ad4:       0f 85 c0 0e 00 00       jne    4799a <_IO_vfprintf+0x36da>
    0.00 :	   46ada:       48 83 bd c0 f8 ff ff    cmpq   $0x0,-0x740(%rbp)
    0.00 :	   46ae1:       00 
    0.00 :	   46ae2:       74 17                   je     46afb <_IO_vfprintf+0x283b>
    0.00 :	   46ae4:       8b 85 a4 f9 ff ff       mov    -0x65c(%rbp),%eax
    0.00 :	   46aea:       85 c0                   test   %eax,%eax
    0.00 :	   46aec:       74 0d                   je     46afb <_IO_vfprintf+0x283b>
    0.00 :	   46aee:       83 bd a0 f9 ff ff 10    cmpl   $0x10,-0x660(%rbp)
    0.00 :	   46af5:       0f 84 7e 25 00 00       je     49079 <_IO_vfprintf+0x4db9>
    0.00 :	   46afb:       8b 9d c8 f9 ff ff       mov    -0x638(%rbp),%ebx
    0.00 :	   46b01:       85 db                   test   %ebx,%ebx
    0.00 :	   46b03:       7e 37                   jle    46b3c <_IO_vfprintf+0x287c>
    0.00 :	   46b05:       48 63 95 c8 f9 ff ff    movslq -0x638(%rbp),%rdx
    0.00 :	   46b0c:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   46b11:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46b14:       e8 27 17 02 00          callq  68240 <_IO_padn>
    0.00 :	   46b19:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   46b20:       0f 87 7b fc ff ff       ja     467a1 <_IO_vfprintf+0x24e1>
    0.00 :	   46b26:       89 c2                   mov    %eax,%edx
    0.00 :	   46b28:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46b2d:       44 29 e8                sub    %r13d,%eax
    0.00 :	   46b30:       39 c2                   cmp    %eax,%edx
    0.00 :	   46b32:       0f 87 99 fd ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46b38:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   46b3c:       45 85 ed                test   %r13d,%r13d
    0.00 :	   46b3f:       0f 88 bb 21 00 00       js     48d00 <_IO_vfprintf+0x4a40>
    0.00 :	   46b45:       48 8b 9d 60 f9 ff ff    mov    -0x6a0(%rbp),%rbx
    0.00 :	   46b4c:       48 2b 9d 98 fa ff ff    sub    -0x568(%rbp),%rbx
    0.00 :	   46b53:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   46b56:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   46b5d:       00 
    0.00 :	   46b5e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46b61:       48 89 da                mov    %rbx,%rdx
    0.00 :	   46b64:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   46b67:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46b6a:       0f 85 61 fd ff ff       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46b70:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   46b73:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46b78:       48 29 d0                sub    %rdx,%rax
    0.00 :	   46b7b:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46b7e:       0f 87 4d fd ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46b84:       8b 8d 98 fa ff ff       mov    -0x568(%rbp),%ecx
    0.00 :	   46b8a:       8b 95 60 f9 ff ff       mov    -0x6a0(%rbp),%edx
    0.00 :	   46b90:       89 c8                   mov    %ecx,%eax
    0.00 :	   46b92:       29 d0                   sub    %edx,%eax
    0.00 :	   46b94:       2b 85 c8 f9 ff ff       sub    -0x638(%rbp),%eax
    0.00 :	   46b9a:       29 ca                   sub    %ecx,%edx
    0.00 :	   46b9c:       03 85 b8 fa ff ff       add    -0x548(%rbp),%eax
    0.00 :	   46ba2:       42 8d 1c 2a             lea    (%rdx,%r13,1),%ebx
    0.00 :	   46ba6:       85 c0                   test   %eax,%eax
    0.00 :	   46ba8:       0f 8f 51 06 00 00       jg     471ff <_IO_vfprintf+0x2f3f>
    0.00 :	   46bae:       41 89 dd                mov    %ebx,%r13d
    0.00 :	   46bb1:       e9 da dc ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   46bb6:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   46bb9:       e8 02 10 0a 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   46bbe:       85 c0                   test   %eax,%eax
    0.00 :	   46bc0:       0f 85 05 f2 ff ff       jne    45dcb <_IO_vfprintf+0x1b0b>
    0.00 :	   46bc6:       48 89 9d a0 fa ff ff    mov    %rbx,-0x560(%rbp)
    0.00 :	   46bcd:       c6 85 8b f9 ff ff 01    movb   $0x1,-0x675(%rbp)
    0.00 :	   46bd4:       e9 f9 f1 ff ff          jmpq   45dd2 <_IO_vfprintf+0x1b12>
    0.00 :	   46bd9:       8b 85 20 fa ff ff       mov    -0x5e0(%rbp),%eax
    0.00 :	   46bdf:       85 c0                   test   %eax,%eax
    0.00 :	   46be1:       0f 85 66 09 00 00       jne    4754d <_IO_vfprintf+0x328d>
    0.00 :	   46be7:       8b 85 4c fa ff ff       mov    -0x5b4(%rbp),%eax
    0.00 :	   46bed:       85 c0                   test   %eax,%eax
    0.00 :	   46bef:       0f 85 f3 13 00 00       jne    47fe8 <_IO_vfprintf+0x3d28>
    0.00 :	   46bf5:       8b 85 44 fa ff ff       mov    -0x5bc(%rbp),%eax
    0.00 :	   46bfb:       85 c0                   test   %eax,%eax
    0.00 :	   46bfd:       0f 85 cb 10 00 00       jne    47cce <_IO_vfprintf+0x3a0e>
    0.00 :	   46c03:       48 83 bd 08 f9 ff ff    cmpq   $0x0,-0x6f8(%rbp)
    0.00 :	   46c0a:       00 
    0.00 :	   46c0b:       74 17                   je     46c24 <_IO_vfprintf+0x2964>
    0.00 :	   46c0d:       8b 85 40 fa ff ff       mov    -0x5c0(%rbp),%eax
    0.00 :	   46c13:       85 c0                   test   %eax,%eax
    0.00 :	   46c15:       74 0d                   je     46c24 <_IO_vfprintf+0x2964>
    0.00 :	   46c17:       83 bd 3c fa ff ff 10    cmpl   $0x10,-0x5c4(%rbp)
    0.00 :	   46c1e:       0f 84 9d 16 00 00       je     482c1 <_IO_vfprintf+0x4001>
    0.00 :	   46c24:       8b 9d bc fa ff ff       mov    -0x544(%rbp),%ebx
    0.00 :	   46c2a:       85 db                   test   %ebx,%ebx
    0.00 :	   46c2c:       7e 37                   jle    46c65 <_IO_vfprintf+0x29a5>
    0.00 :	   46c2e:       48 63 95 bc fa ff ff    movslq -0x544(%rbp),%rdx
    0.00 :	   46c35:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   46c3a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46c3d:       e8 fe 15 02 00          callq  68240 <_IO_padn>
    0.00 :	   46c42:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   46c49:       0f 87 48 f6 ff ff       ja     46297 <_IO_vfprintf+0x1fd7>
    0.00 :	   46c4f:       89 c2                   mov    %eax,%edx
    0.00 :	   46c51:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46c56:       44 29 e8                sub    %r13d,%eax
    0.00 :	   46c59:       39 c2                   cmp    %eax,%edx
    0.00 :	   46c5b:       0f 87 70 fc ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46c61:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   46c65:       45 85 ed                test   %r13d,%r13d
    0.00 :	   46c68:       0f 88 15 27 00 00       js     49383 <_IO_vfprintf+0x50c3>
    0.00 :	   46c6e:       48 8b 9d 60 f9 ff ff    mov    -0x6a0(%rbp),%rbx
    0.00 :	   46c75:       48 2b 9d d0 fa ff ff    sub    -0x530(%rbp),%rbx
    0.00 :	   46c7c:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   46c7f:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   46c86:       00 
    0.00 :	   46c87:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46c8a:       48 89 da                mov    %rbx,%rdx
    0.00 :	   46c8d:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   46c90:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46c93:       0f 85 38 fc ff ff       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46c99:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   46c9c:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46ca1:       48 29 d0                sub    %rdx,%rax
    0.00 :	   46ca4:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   46ca7:       0f 87 24 fc ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46cad:       8b 8d d0 fa ff ff       mov    -0x530(%rbp),%ecx
    0.00 :	   46cb3:       8b 95 60 f9 ff ff       mov    -0x6a0(%rbp),%edx
    0.00 :	   46cb9:       89 c8                   mov    %ecx,%eax
    0.00 :	   46cbb:       29 d0                   sub    %edx,%eax
    0.00 :	   46cbd:       2b 85 bc fa ff ff       sub    -0x544(%rbp),%eax
    0.00 :	   46cc3:       29 ca                   sub    %ecx,%edx
    0.00 :	   46cc5:       03 85 64 fa ff ff       add    -0x59c(%rbp),%eax
    0.00 :	   46ccb:       42 8d 1c 2a             lea    (%rdx,%r13,1),%ebx
    0.00 :	   46ccf:       41 89 dd                mov    %ebx,%r13d
    0.00 :	   46cd2:       85 c0                   test   %eax,%eax
    0.00 :	   46cd4:       0f 8e e6 dd ff ff       jle    44ac0 <_IO_vfprintf+0x800>
    0.00 :	   46cda:       48 63 d0                movslq %eax,%rdx
    0.00 :	   46cdd:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   46ce2:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   46ce5:       e8 56 15 02 00          callq  68240 <_IO_padn>
    0.00 :	   46cea:       81 fb fe ff ff 7f       cmp    $0x7ffffffe,%ebx
    0.00 :	   46cf0:       0f 87 a1 f5 ff ff       ja     46297 <_IO_vfprintf+0x1fd7>
    0.00 :	   46cf6:       89 c2                   mov    %eax,%edx
    0.00 :	   46cf8:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   46cfd:       29 d8                   sub    %ebx,%eax
    0.00 :	   46cff:       39 c2                   cmp    %eax,%edx
    0.00 :	   46d01:       0f 87 ca fb ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   46d07:       44 8d 2c 1a             lea    (%rdx,%rbx,1),%r13d
    0.00 :	   46d0b:       e9 b0 dd ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   46d10:       48 89 df                mov    %rbx,%rdi
    0.00 :	   46d13:       e8 a8 0e 0a 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   46d18:       85 c0                   test   %eax,%eax
    0.00 :	   46d1a:       0f 85 ee 02 00 00       jne    4700e <_IO_vfprintf+0x2d4e>
    0.00 :	   46d20:       48 89 df                mov    %rbx,%rdi
    0.00 :	   46d23:       e8 28 7b fd ff          callq  1e850 <malloc@plt>
    0.00 :	   46d28:       48 85 c0                test   %rax,%rax
    0.00 :	   46d2b:       48 89 85 78 f9 ff ff    mov    %rax,-0x688(%rbp)
    0.00 :	   46d32:       48 89 85 08 fa ff ff    mov    %rax,-0x5f8(%rbp)
    0.00 :	   46d39:       0f 85 ea 02 00 00       jne    47029 <_IO_vfprintf+0x2d69>
    0.00 :	   46d3f:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   46d45:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   46d4c:       00 00 00 00 
    0.00 :	   46d50:       e9 82 fb ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   46d55:       c6 85 72 fa ff ff 20    movb   $0x20,-0x58e(%rbp)
    0.00 :	   46d5c:       31 c9                   xor    %ecx,%ecx
    0.00 :	   46d5e:       80 bd 73 fa ff ff 58    cmpb   $0x58,-0x58d(%rbp)
    0.00 :	   46d65:       8b 95 3c fa ff ff       mov    -0x5c4(%rbp),%edx
    0.00 :	   46d6b:       48 8b b5 60 f9 ff ff    mov    -0x6a0(%rbp),%rsi
    0.00 :	   46d72:       48 8b bd 08 f9 ff ff    mov    -0x6f8(%rbp),%rdi
    0.00 :	   46d79:       0f 94 c1                sete   %cl
    0.00 :	   46d7c:       e8 4f cf ff ff          callq  43cd0 <_itoa_word>
    0.00 :	   46d81:       44 8b 8d 50 fa ff ff    mov    -0x5b0(%rbp),%r9d
    0.00 :	   46d88:       49 89 c7                mov    %rax,%r15
    0.00 :	   46d8b:       45 85 c9                test   %r9d,%r9d
    0.00 :	   46d8e:       74 2a                   je     46dba <_IO_vfprintf+0x2afa>
    0.00 :	   46d90:       48 83 bd 40 f9 ff ff    cmpq   $0x0,-0x6c0(%rbp)
    0.00 :	   46d97:       00 
    0.00 :	   46d98:       74 20                   je     46dba <_IO_vfprintf+0x2afa>
    0.00 :	   46d9a:       48 8b 8d 38 f9 ff ff    mov    -0x6c8(%rbp),%rcx
    0.00 :	   46da1:       48 8b 95 40 f9 ff ff    mov    -0x6c0(%rbp),%rdx
    0.00 :	   46da8:       48 89 c7                mov    %rax,%rdi
    0.00 :	   46dab:       48 8b b5 60 f9 ff ff    mov    -0x6a0(%rbp),%rsi
    0.00 :	   46db2:       e8 39 d1 ff ff          callq  43ef0 <group_number>
    0.00 :	   46db7:       49 89 c7                mov    %rax,%r15
    0.00 :	   46dba:       44 8b 85 6c fa ff ff    mov    -0x594(%rbp),%r8d
    0.00 :	   46dc1:       45 85 c0                test   %r8d,%r8d
    0.00 :	   46dc4:       74 1e                   je     46de4 <_IO_vfprintf+0x2b24>
    0.00 :	   46dc6:       83 bd 3c fa ff ff 0a    cmpl   $0xa,-0x5c4(%rbp)
    0.00 :	   46dcd:       75 15                   jne    46de4 <_IO_vfprintf+0x2b24>
    0.00 :	   46dcf:       48 8b 95 60 f9 ff ff    mov    -0x6a0(%rbp),%rdx
    0.00 :	   46dd6:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   46dd9:       48 89 d6                mov    %rdx,%rsi
    0.00 :	   46ddc:       e8 3f d2 ff ff          callq  44020 <_i18n_number_rewrite>
    0.00 :	   46de1:       49 89 c7                mov    %rax,%r15
    0.00 :	   46de4:       48 8b 95 60 f9 ff ff    mov    -0x6a0(%rbp),%rdx
    0.00 :	   46deb:       48 63 85 68 fa ff ff    movslq -0x598(%rbp),%rax
    0.00 :	   46df2:       4c 89 bd d0 fa ff ff    mov    %r15,-0x530(%rbp)
    0.00 :	   46df9:       4c 29 fa                sub    %r15,%rdx
    0.00 :	   46dfc:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   46dff:       0f 8f 56 f1 ff ff       jg     45f5b <_IO_vfprintf+0x1c9b>
    0.00 :	   46e05:       48 83 bd 08 f9 ff ff    cmpq   $0x0,-0x6f8(%rbp)
    0.00 :	   46e0c:       00 
    0.00 :	   46e0d:       0f 84 48 f1 ff ff       je     45f5b <_IO_vfprintf+0x1c9b>
    0.00 :	   46e13:       8b bd 40 fa ff ff       mov    -0x5c0(%rbp),%edi
    0.00 :	   46e19:       85 ff                   test   %edi,%edi
    0.00 :	   46e1b:       0f 84 3a f1 ff ff       je     45f5b <_IO_vfprintf+0x1c9b>
    0.00 :	   46e21:       83 bd 3c fa ff ff 08    cmpl   $0x8,-0x5c4(%rbp)
    0.00 :	   46e28:       0f 85 2d f1 ff ff       jne    45f5b <_IO_vfprintf+0x1c9b>
    0.00 :	   46e2e:       49 83 ef 01             sub    $0x1,%r15
    0.00 :	   46e32:       41 c6 07 30             movb   $0x30,(%r15)
    0.00 :	   46e36:       4c 89 bd d0 fa ff ff    mov    %r15,-0x530(%rbp)
    0.00 :	   46e3d:       e9 19 f1 ff ff          jmpq   45f5b <_IO_vfprintf+0x1c9b>
    0.00 :	   46e42:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   46e49:       31 c9                   xor    %ecx,%ecx
    0.00 :	   46e4b:       80 bd eb f9 ff ff 58    cmpb   $0x58,-0x615(%rbp)
    0.00 :	   46e52:       8b 95 a0 f9 ff ff       mov    -0x660(%rbp),%edx
    0.00 :	   46e58:       48 8b b5 60 f9 ff ff    mov    -0x6a0(%rbp),%rsi
    0.00 :	   46e5f:       48 8b bd c0 f8 ff ff    mov    -0x740(%rbp),%rdi
    0.00 :	   46e66:       0f 94 c1                sete   %cl
    0.00 :	   46e69:       e8 62 ce ff ff          callq  43cd0 <_itoa_word>
    0.00 :	   46e6e:       44 8b 85 b4 f9 ff ff    mov    -0x64c(%rbp),%r8d
    0.00 :	   46e75:       49 89 c7                mov    %rax,%r15
    0.00 :	   46e78:       45 85 c0                test   %r8d,%r8d
    0.00 :	   46e7b:       74 2a                   je     46ea7 <_IO_vfprintf+0x2be7>
    0.00 :	   46e7d:       48 83 bd 40 f9 ff ff    cmpq   $0x0,-0x6c0(%rbp)
    0.00 :	   46e84:       00 
    0.00 :	   46e85:       74 20                   je     46ea7 <_IO_vfprintf+0x2be7>
    0.00 :	   46e87:       48 8b 8d 38 f9 ff ff    mov    -0x6c8(%rbp),%rcx
    0.00 :	   46e8e:       48 8b 95 40 f9 ff ff    mov    -0x6c0(%rbp),%rdx
    0.00 :	   46e95:       48 89 c7                mov    %rax,%rdi
    0.00 :	   46e98:       48 8b b5 60 f9 ff ff    mov    -0x6a0(%rbp),%rsi
    0.00 :	   46e9f:       e8 4c d0 ff ff          callq  43ef0 <group_number>
    0.00 :	   46ea4:       49 89 c7                mov    %rax,%r15
    0.00 :	   46ea7:       8b bd cc f9 ff ff       mov    -0x634(%rbp),%edi
    0.00 :	   46ead:       85 ff                   test   %edi,%edi
    0.00 :	   46eaf:       74 1e                   je     46ecf <_IO_vfprintf+0x2c0f>
    0.00 :	   46eb1:       83 bd a0 f9 ff ff 0a    cmpl   $0xa,-0x660(%rbp)
    0.00 :	   46eb8:       75 15                   jne    46ecf <_IO_vfprintf+0x2c0f>
    0.00 :	   46eba:       48 8b 95 60 f9 ff ff    mov    -0x6a0(%rbp),%rdx
    0.00 :	   46ec1:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   46ec4:       48 89 d6                mov    %rdx,%rsi
    0.00 :	   46ec7:       e8 54 d1 ff ff          callq  44020 <_i18n_number_rewrite>
    0.00 :	   46ecc:       49 89 c7                mov    %rax,%r15
    0.00 :	   46ecf:       48 8b 95 60 f9 ff ff    mov    -0x6a0(%rbp),%rdx
    0.00 :	   46ed6:       48 63 85 ec fa ff ff    movslq -0x514(%rbp),%rax
    0.00 :	   46edd:       4c 89 bd 98 fa ff ff    mov    %r15,-0x568(%rbp)
    0.00 :	   46ee4:       4c 29 fa                sub    %r15,%rdx
    0.00 :	   46ee7:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   46eea:       0f 8f f9 f5 ff ff       jg     464e9 <_IO_vfprintf+0x2229>
    0.00 :	   46ef0:       48 83 bd c0 f8 ff ff    cmpq   $0x0,-0x740(%rbp)
    0.00 :	   46ef7:       00 
    0.00 :	   46ef8:       0f 84 eb f5 ff ff       je     464e9 <_IO_vfprintf+0x2229>
    0.00 :	   46efe:       8b b5 a4 f9 ff ff       mov    -0x65c(%rbp),%esi
    0.00 :	   46f04:       85 f6                   test   %esi,%esi
    0.00 :	   46f06:       0f 84 dd f5 ff ff       je     464e9 <_IO_vfprintf+0x2229>
    0.00 :	   46f0c:       83 bd a0 f9 ff ff 08    cmpl   $0x8,-0x660(%rbp)
    0.00 :	   46f13:       0f 85 d0 f5 ff ff       jne    464e9 <_IO_vfprintf+0x2229>
    0.00 :	   46f19:       49 83 ef 01             sub    $0x1,%r15
    0.00 :	   46f1d:       41 c6 07 30             movb   $0x30,(%r15)
    0.00 :	   46f21:       4c 89 bd 98 fa ff ff    mov    %r15,-0x568(%rbp)
    0.00 :	   46f28:       e9 bc f5 ff ff          jmpq   464e9 <_IO_vfprintf+0x2229>
    0.00 :	   46f2d:       c7 85 ec fa ff ff 01    movl   $0x1,-0x514(%rbp)
    0.00 :	   46f34:       00 00 00 
    0.00 :	   46f37:       e9 0d ff ff ff          jmpq   46e49 <_IO_vfprintf+0x2b89>
    0.00 :	   46f3c:       44 8b 9d c4 f9 ff ff    mov    -0x63c(%rbp),%r11d
    0.00 :	   46f43:       45 85 db                test   %r11d,%r11d
    0.00 :	   46f46:       0f 84 2f 04 00 00       je     4737b <_IO_vfprintf+0x30bb>
    0.00 :	   46f4c:       41 8b 06                mov    (%r14),%eax
    0.00 :	   46f4f:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   46f52:       0f 83 53 0b 00 00       jae    47aab <_IO_vfprintf+0x37eb>
    0.00 :	   46f58:       89 c2                   mov    %eax,%edx
    0.00 :	   46f5a:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   46f5e:       83 c0 08                add    $0x8,%eax
    0.00 :	   46f61:       41 89 06                mov    %eax,(%r14)
    0.00 :	   46f64:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   46f67:       c7 85 90 f9 ff ff 00    movl   $0x0,-0x670(%rbp)
    0.00 :	   46f6e:       00 00 00 
    0.00 :	   46f71:       c7 85 a8 f9 ff ff 00    movl   $0x0,-0x658(%rbp)
    0.00 :	   46f78:       00 00 00 
    0.00 :	   46f7b:       c7 85 b0 f9 ff ff 00    movl   $0x0,-0x650(%rbp)
    0.00 :	   46f82:       00 00 00 
    0.00 :	   46f85:       48 89 95 c0 f8 ff ff    mov    %rdx,-0x740(%rbp)
    0.00 :	   46f8c:       e9 10 f5 ff ff          jmpq   464a1 <_IO_vfprintf+0x21e1>
    0.00 :	   46f91:       48 c7 85 58 f9 ff ff    movq   $0x0,-0x6a8(%rbp)
    0.00 :	   46f98:       00 00 00 00 
    0.00 :	   46f9c:       e9 36 f9 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   46fa1:       48 8b bd f8 f9 ff ff    mov    -0x608(%rbp),%rdi
    0.00 :	   46fa8:       48 8b 85 a0 fa ff ff    mov    -0x560(%rbp),%rax
    0.00 :	   46faf:       48 89 bd e0 fa ff ff    mov    %rdi,-0x520(%rbp)
    0.00 :	   46fb6:       48 89 85 80 f9 ff ff    mov    %rax,-0x680(%rbp)
    0.00 :	   46fbd:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	   46fc1:       48 39 85 00 fa ff ff    cmp    %rax,-0x600(%rbp)
    0.00 :	   46fc8:       48 0f 43 85 00 fa ff    cmovae -0x600(%rbp),%rax
    0.00 :	   46fcf:       ff 
    0.00 :	   46fd0:       48 89 85 b0 fa ff ff    mov    %rax,-0x550(%rbp)
    0.00 :	   46fd7:       48 b8 aa aa aa aa aa    movabs $0xaaaaaaaaaaaaaaa,%rax
    0.00 :	   46fde:       aa aa 0a 
    0.00 :	   46fe1:       48 39 85 b0 fa ff ff    cmp    %rax,-0x550(%rbp)
    0.00 :	   46fe8:       0f 87 51 fd ff ff       ja     46d3f <_IO_vfprintf+0x2a7f>
    0.00 :	   46fee:       48 8b 95 b0 fa ff ff    mov    -0x550(%rbp),%rdx
    0.00 :	   46ff5:       48 8d 04 52             lea    (%rdx,%rdx,2),%rax
    0.00 :	   46ff9:       48 8d 1c c5 00 00 00    lea    0x0(,%rax,8),%rbx
    0.00 :	   47000:       00 
    0.00 :	   47001:       48 81 fb 00 10 00 00    cmp    $0x1000,%rbx
    0.00 :	   47008:       0f 87 02 fd ff ff       ja     46d10 <_IO_vfprintf+0x2a50>
    0.00 :	   4700e:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	   47012:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   47016:       48 29 c4                sub    %rax,%rsp
    0.00 :	   47019:       48 8d 4c 24 0f          lea    0xf(%rsp),%rcx
    0.00 :	   4701e:       48 83 e1 f0             and    $0xfffffffffffffff0,%rcx
    0.00 :	   47022:       48 89 8d 08 fa ff ff    mov    %rcx,-0x5f8(%rbp)
    0.00 :	   47029:       48 8b 85 b0 fa ff ff    mov    -0x550(%rbp),%rax
    0.00 :	   47030:       48 8b 95 b0 fa ff ff    mov    -0x550(%rbp),%rdx
    0.00 :	   47037:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   4703b:       48 03 85 08 fa ff ff    add    -0x5f8(%rbp),%rax
    0.00 :	   47042:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   47046:       48 89 85 10 fa ff ff    mov    %rax,-0x5f0(%rbp)
    0.00 :	   4704d:       48 01 d0                add    %rdx,%rax
    0.00 :	   47050:       48 89 85 18 fa ff ff    mov    %rax,-0x5e8(%rbp)
    0.00 :	   47057:       41 8b 44 24 74          mov    0x74(%r12),%eax
    0.00 :	   4705c:       48 8b bd 18 fa ff ff    mov    -0x5e8(%rbp),%rdi
    0.00 :	   47063:       83 e0 04                and    $0x4,%eax
    0.00 :	   47066:       83 f8 01                cmp    $0x1,%eax
    0.00 :	   47069:       19 f6                   sbb    %esi,%esi
    0.00 :	   4706b:       f7 d6                   not    %esi
    0.00 :	   4706d:       e8 fe c3 03 00          callq  83470 <__GI_memset>
    0.00 :	   47072:       48 83 bd e0 fa ff ff    cmpq   $0x0,-0x520(%rbp)
    0.00 :	   47079:       00 
    0.00 :	   4707a:       0f 84 ab 00 00 00       je     4712b <_IO_vfprintf+0x2e6b>
    0.00 :	   47080:       48 8b 9d a0 fa ff ff    mov    -0x560(%rbp),%rbx
    0.00 :	   47087:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   4708a:       eb 3c                   jmp    470c8 <_IO_vfprintf+0x2e08>
    0.00 :	   4708c:       48 63 53 30             movslq 0x30(%rbx),%rdx
    0.00 :	   47090:       48 8b 8d 10 fa ff ff    mov    -0x5f0(%rbp),%rcx
    0.00 :	   47097:       48 89 df                mov    %rbx,%rdi
    0.00 :	   4709a:       4c 63 43 08             movslq 0x8(%rbx),%r8
    0.00 :	   4709e:       48 8b 05 4b bd 32 00    mov    0x32bd4b(%rip),%rax        # 372df0 <__printf_arginfo_table>
    0.00 :	   470a5:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   470a9:       48 01 d1                add    %rdx,%rcx
    0.00 :	   470ac:       48 03 95 18 fa ff ff    add    -0x5e8(%rbp),%rdx
    0.00 :	   470b3:       42 ff 14 c0             callq  *(%rax,%r8,8)
    0.00 :	   470b7:       49 83 c7 01             add    $0x1,%r15
    0.00 :	   470bb:       48 83 c3 48             add    $0x48,%rbx
    0.00 :	   470bf:       4c 3b bd e0 fa ff ff    cmp    -0x520(%rbp),%r15
    0.00 :	   470c6:       73 63                   jae    4712b <_IO_vfprintf+0x2e6b>
    0.00 :	   470c8:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	   470cb:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	   470ce:       74 10                   je     470e0 <_IO_vfprintf+0x2e20>
    0.00 :	   470d0:       48 8b bd 18 fa ff ff    mov    -0x5e8(%rbp),%rdi
    0.00 :	   470d7:       48 98                   cltq   
    0.00 :	   470d9:       c7 04 87 00 00 00 00    movl   $0x0,(%rdi,%rax,4)
    0.00 :	   470e0:       8b 43 28                mov    0x28(%rbx),%eax
    0.00 :	   470e3:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	   470e6:       74 10                   je     470f8 <_IO_vfprintf+0x2e38>
    0.00 :	   470e8:       48 8b 95 18 fa ff ff    mov    -0x5e8(%rbp),%rdx
    0.00 :	   470ef:       48 98                   cltq   
    0.00 :	   470f1:       c7 04 82 00 00 00 00    movl   $0x0,(%rdx,%rax,4)
    0.00 :	   470f8:       48 8b 73 38             mov    0x38(%rbx),%rsi
    0.00 :	   470fc:       48 85 f6                test   %rsi,%rsi
    0.00 :	   470ff:       74 b6                   je     470b7 <_IO_vfprintf+0x2df7>
    0.00 :	   47101:       48 83 fe 01             cmp    $0x1,%rsi
    0.00 :	   47105:       75 85                   jne    4708c <_IO_vfprintf+0x2dcc>
    0.00 :	   47107:       48 63 53 30             movslq 0x30(%rbx),%rdx
    0.00 :	   4710b:       8b 43 34                mov    0x34(%rbx),%eax
    0.00 :	   4710e:       48 8b 8d 18 fa ff ff    mov    -0x5e8(%rbp),%rcx
    0.00 :	   47115:       89 04 91                mov    %eax,(%rcx,%rdx,4)
    0.00 :	   47118:       48 63 53 30             movslq 0x30(%rbx),%rdx
    0.00 :	   4711c:       8b 43 40                mov    0x40(%rbx),%eax
    0.00 :	   4711f:       48 8b bd 10 fa ff ff    mov    -0x5f0(%rbp),%rdi
    0.00 :	   47126:       89 04 97                mov    %eax,(%rdi,%rdx,4)
    0.00 :	   47129:       eb 8c                   jmp    470b7 <_IO_vfprintf+0x2df7>
    0.00 :	   4712b:       48 83 bd b0 fa ff ff    cmpq   $0x0,-0x550(%rbp)
    0.00 :	   47132:       00 
    0.00 :	   47133:       0f 84 08 da ff ff       je     44b41 <_IO_vfprintf+0x881>
    0.00 :	   47139:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   47140:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   47143:       eb 48                   jmp    4718d <_IO_vfprintf+0x2ecd>
    0.00 :	   47145:       83 f8 03                cmp    $0x3,%eax
    0.00 :	   47148:       7d 7c                   jge    471c6 <_IO_vfprintf+0x2f06>
    0.00 :	   4714a:       83 f8 01                cmp    $0x1,%eax
    0.00 :	   4714d:       0f 8e 19 0e 00 00       jle    47f6c <_IO_vfprintf+0x3cac>
    0.00 :	   47153:       8b 85 00 ff ff ff       mov    -0x100(%rbp),%eax
    0.00 :	   47159:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4715c:       0f 83 5d 04 00 00       jae    475bf <_IO_vfprintf+0x32ff>
    0.00 :	   47162:       89 c2                   mov    %eax,%edx
    0.00 :	   47164:       48 03 95 10 ff ff ff    add    -0xf0(%rbp),%rdx
    0.00 :	   4716b:       83 c0 08                add    $0x8,%eax
    0.00 :	   4716e:       89 85 00 ff ff ff       mov    %eax,-0x100(%rbp)
    0.00 :	   47174:       8b 02                   mov    (%rdx),%eax
    0.00 :	   47176:       89 03                   mov    %eax,(%rbx)
    0.00 :	   47178:       49 83 c7 01             add    $0x1,%r15
    0.00 :	   4717c:       48 83 c3 10             add    $0x10,%rbx
    0.00 :	   47180:       4c 39 bd b0 fa ff ff    cmp    %r15,-0x550(%rbp)
    0.00 :	   47187:       0f 86 b4 d9 ff ff       jbe    44b41 <_IO_vfprintf+0x881>
    0.00 :	   4718d:       48 8b 95 18 fa ff ff    mov    -0x5e8(%rbp),%rdx
    0.00 :	   47194:       42 8b 04 ba             mov    (%rdx,%r15,4),%eax
    0.00 :	   47198:       83 f8 05                cmp    $0x5,%eax
    0.00 :	   4719b:       7e a8                   jle    47145 <_IO_vfprintf+0x2e85>
    0.00 :	   4719d:       3d 00 01 00 00          cmp    $0x100,%eax
    0.00 :	   471a2:       74 22                   je     471c6 <_IO_vfprintf+0x2f06>
    0.00 :	   471a4:       0f 8f 8b 00 00 00       jg     47235 <_IO_vfprintf+0x2f75>
    0.00 :	   471aa:       83 f8 07                cmp    $0x7,%eax
    0.00 :	   471ad:       0f 1f 00                nopl   (%rax)
    0.00 :	   471b0:       0f 8e 9d 01 00 00       jle    47353 <_IO_vfprintf+0x3093>
    0.00 :	   471b6:       f6 c4 08                test   $0x8,%ah
    0.00 :	   471b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   471c0:       0f 84 c3 10 00 00       je     48289 <_IO_vfprintf+0x3fc9>
    0.00 :	   471c6:       8b 85 00 ff ff ff       mov    -0x100(%rbp),%eax
    0.00 :	   471cc:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   471cf:       73 1a                   jae    471eb <_IO_vfprintf+0x2f2b>
    0.00 :	   471d1:       89 c2                   mov    %eax,%edx
    0.00 :	   471d3:       48 03 95 10 ff ff ff    add    -0xf0(%rbp),%rdx
    0.00 :	   471da:       83 c0 08                add    $0x8,%eax
    0.00 :	   471dd:       89 85 00 ff ff ff       mov    %eax,-0x100(%rbp)
    0.00 :	   471e3:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   471e6:       48 89 03                mov    %rax,(%rbx)
    0.00 :	   471e9:       eb 8d                   jmp    47178 <_IO_vfprintf+0x2eb8>
    0.00 :	   471eb:       48 8b 95 08 ff ff ff    mov    -0xf8(%rbp),%rdx
    0.00 :	   471f2:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   471f6:       48 89 85 08 ff ff ff    mov    %rax,-0xf8(%rbp)
    0.00 :	   471fd:       eb e4                   jmp    471e3 <_IO_vfprintf+0x2f23>
    0.00 :	   471ff:       48 63 d0                movslq %eax,%rdx
    0.00 :	   47202:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   47207:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4720a:       e8 31 10 02 00          callq  68240 <_IO_padn>
    0.00 :	   4720f:       81 fb fe ff ff 7f       cmp    $0x7ffffffe,%ebx
    0.00 :	   47215:       0f 87 86 f5 ff ff       ja     467a1 <_IO_vfprintf+0x24e1>
    0.00 :	   4721b:       89 c2                   mov    %eax,%edx
    0.00 :	   4721d:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   47222:       29 d8                   sub    %ebx,%eax
    0.00 :	   47224:       39 c2                   cmp    %eax,%edx
    0.00 :	   47226:       0f 87 a5 f6 ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4722c:       44 8d 2c 1a             lea    (%rdx,%rbx,1),%r13d
    0.00 :	   47230:       e9 5b d6 ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   47235:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	   4723a:       74 8a                   je     471c6 <_IO_vfprintf+0x2f06>
    0.00 :	   4723c:       3d 00 04 00 00          cmp    $0x400,%eax
    0.00 :	   47241:       0f 84 0c ff ff ff       je     47153 <_IO_vfprintf+0x2e93>
    0.00 :	   47247:       3d 07 01 00 00          cmp    $0x107,%eax
    0.00 :	   4724c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   47250:       0f 85 60 ff ff ff       jne    471b6 <_IO_vfprintf+0x2ef6>
    0.00 :	   47256:       48 8b 85 08 ff ff ff    mov    -0xf8(%rbp),%rax
    0.00 :	   4725d:       48 83 c0 0f             add    $0xf,%rax
    0.00 :	   47261:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   47265:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   47269:       48 89 95 08 ff ff ff    mov    %rdx,-0xf8(%rbp)
    0.00 :	   47270:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	   47273:       48 8b 00                mov    (%rax),%rax
    0.00 :	   47276:       89 53 08                mov    %edx,0x8(%rbx)
    0.00 :	   47279:       48 89 03                mov    %rax,(%rbx)
    0.00 :	   4727c:       e9 f7 fe ff ff          jmpq   47178 <_IO_vfprintf+0x2eb8>
    0.00 :	   47281:       c7 85 68 fa ff ff 01    movl   $0x1,-0x598(%rbp)
    0.00 :	   47288:       00 00 00 
    0.00 :	   4728b:       e9 cc fa ff ff          jmpq   46d5c <_IO_vfprintf+0x2a9c>
    0.00 :	   47290:       8b 9d 5c fa ff ff       mov    -0x5a4(%rbp),%ebx
    0.00 :	   47296:       85 db                   test   %ebx,%ebx
    0.00 :	   47298:       0f 84 57 05 00 00       je     477f5 <_IO_vfprintf+0x3535>
    0.00 :	   4729e:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   472a5:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   472aa:       48 8b 95 08 fa ff ff    mov    -0x5f8(%rbp),%rdx
    0.00 :	   472b1:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   472b5:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	   472b9:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   472c0:       00 00 00 
    0.00 :	   472c3:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   472ca:       00 00 00 
    0.00 :	   472cd:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   472d4:       00 00 00 
    0.00 :	   472d7:       48 89 85 08 f9 ff ff    mov    %rax,-0x6f8(%rbp)
    0.00 :	   472de:       e9 30 ec ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   472e3:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   472e8:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   472ed:       0f 83 28 1e 00 00       jae    4911b <_IO_vfprintf+0x4e5b>
    0.00 :	   472f3:       c6 00 2d                movb   $0x2d,(%rax)
    0.00 :	   472f6:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   472fa:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   472ff:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   47306:       0f 84 c5 f5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4730c:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   47310:       e9 9c f2 ff ff          jmpq   465b1 <_IO_vfprintf+0x22f1>
    0.00 :	   47315:       85 db                   test   %ebx,%ebx
    0.00 :	   47317:       7e 33                   jle    4734c <_IO_vfprintf+0x308c>
    0.00 :	   47319:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   4731c:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   47321:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   47324:       e8 17 0f 02 00          callq  68240 <_IO_padn>
    0.00 :	   47329:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   47330:       0f 87 6b f4 ff ff       ja     467a1 <_IO_vfprintf+0x24e1>
    0.00 :	   47336:       89 c2                   mov    %eax,%edx
    0.00 :	   47338:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   4733d:       44 29 e8                sub    %r13d,%eax
    0.00 :	   47340:       39 c2                   cmp    %eax,%edx
    0.00 :	   47342:       0f 87 89 f5 ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47348:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   4734c:       31 db                   xor    %ebx,%ebx
    0.00 :	   4734e:       e9 34 f2 ff ff          jmpq   46587 <_IO_vfprintf+0x22c7>
    0.00 :	   47353:       8b 85 04 ff ff ff       mov    -0xfc(%rbp),%eax
    0.00 :	   47359:       3d b0 00 00 00          cmp    $0xb0,%eax
    0.00 :	   4735e:       0f 83 87 fe ff ff       jae    471eb <_IO_vfprintf+0x2f2b>
    0.00 :	   47364:       89 c2                   mov    %eax,%edx
    0.00 :	   47366:       83 c0 10                add    $0x10,%eax
    0.00 :	   47369:       48 03 95 10 ff ff ff    add    -0xf0(%rbp),%rdx
    0.00 :	   47370:       89 85 04 ff ff ff       mov    %eax,-0xfc(%rbp)
    0.00 :	   47376:       e9 68 fe ff ff          jmpq   471e3 <_IO_vfprintf+0x2f23>
    0.00 :	   4737b:       44 8b 95 bc f9 ff ff    mov    -0x644(%rbp),%r10d
    0.00 :	   47382:       45 85 d2                test   %r10d,%r10d
    0.00 :	   47385:       0f 85 9d 07 00 00       jne    47b28 <_IO_vfprintf+0x3868>
    0.00 :	   4738b:       41 8b 06                mov    (%r14),%eax
    0.00 :	   4738e:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   47391:       0f 83 36 19 00 00       jae    48ccd <_IO_vfprintf+0x4a0d>
    0.00 :	   47397:       89 c2                   mov    %eax,%edx
    0.00 :	   47399:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   4739d:       83 c0 08                add    $0x8,%eax
    0.00 :	   473a0:       41 89 06                mov    %eax,(%r14)
    0.00 :	   473a3:       8b 12                   mov    (%rdx),%edx
    0.00 :	   473a5:       c7 85 90 f9 ff ff 00    movl   $0x0,-0x670(%rbp)
    0.00 :	   473ac:       00 00 00 
    0.00 :	   473af:       c7 85 a8 f9 ff ff 00    movl   $0x0,-0x658(%rbp)
    0.00 :	   473b6:       00 00 00 
    0.00 :	   473b9:       c7 85 b0 f9 ff ff 00    movl   $0x0,-0x650(%rbp)
    0.00 :	   473c0:       00 00 00 
    0.00 :	   473c3:       48 89 95 c0 f8 ff ff    mov    %rdx,-0x740(%rbp)
    0.00 :	   473ca:       e9 d2 f0 ff ff          jmpq   464a1 <_IO_vfprintf+0x21e1>
    0.00 :	   473cf:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   473d3:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   473d7:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   473db:       e9 99 f0 ff ff          jmpq   46479 <_IO_vfprintf+0x21b9>
    0.00 :	   473e0:       83 bd 68 fa ff ff 04    cmpl   $0x4,-0x598(%rbp)
    0.00 :	   473e7:       b8 05 00 00 00          mov    $0x5,%eax
    0.00 :	   473ec:       4c 8d 3d ee 38 0f 00    lea    0xf38ee(%rip),%r15        # 13ace1 <__PRETTY_FUNCTION__.9779+0x95>
    0.00 :	   473f3:       0f 4f 85 68 fa ff ff    cmovg  -0x598(%rbp),%eax
    0.00 :	   473fa:       89 85 68 fa ff ff       mov    %eax,-0x598(%rbp)
    0.00 :	   47400:       80 bd 73 fa ff ff 53    cmpb   $0x53,-0x58d(%rbp)
    0.00 :	   47407:       0f 84 19 db ff ff       je     44f26 <_IO_vfprintf+0xc66>
    0.00 :	   4740d:       83 bd 68 fa ff ff ff    cmpl   $0xffffffff,-0x598(%rbp)
    0.00 :	   47414:       0f 84 b7 16 00 00       je     48ad1 <_IO_vfprintf+0x4811>
    0.00 :	   4741a:       48 8b 05 67 a9 32 00    mov    0x32a967(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   47421:       48 8b bd 58 f8 ff ff    mov    -0x7a8(%rbp),%rdi
    0.00 :	   47428:       48 8b 04 07             mov    (%rdi,%rax,1),%rax
    0.00 :	   4742c:       48 8b 00                mov    (%rax),%rax
    0.00 :	   4742f:       83 b8 a8 00 00 00 01    cmpl   $0x1,0xa8(%rax)
    0.00 :	   47436:       0f 84 80 06 00 00       je     47abc <_IO_vfprintf+0x37fc>
    0.00 :	   4743c:       81 bd 68 fa ff ff 00    cmpl   $0x400,-0x598(%rbp)
    0.00 :	   47443:       04 00 00 
    0.00 :	   47446:       48 89 a5 20 f9 ff ff    mov    %rsp,-0x6e0(%rbp)
    0.00 :	   4744d:       0f 86 f6 03 00 00       jbe    47849 <_IO_vfprintf+0x3589>
    0.00 :	   47453:       48 63 95 68 fa ff ff    movslq -0x598(%rbp),%rdx
    0.00 :	   4745a:       48 c7 85 78 fa ff ff    movq   $0x400,-0x588(%rbp)
    0.00 :	   47461:       00 04 00 00 
    0.00 :	   47465:       b8 00 10 00 00          mov    $0x1000,%eax
    0.00 :	   4746a:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   4746e:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   47471:       48 8d 8d 78 ff ff ff    lea    -0x88(%rbp),%rcx
    0.00 :	   47478:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4747c:       4c 89 bd 78 ff ff ff    mov    %r15,-0x88(%rbp)
    0.00 :	   47483:       48 c7 45 80 00 00 00    movq   $0x0,-0x80(%rbp)
    0.00 :	   4748a:       00 
    0.00 :	   4748b:       48 29 c4                sub    %rax,%rsp
    0.00 :	   4748e:       48 89 8d 40 f8 ff ff    mov    %rcx,-0x7c0(%rbp)
    0.00 :	   47495:       48 8d 44 24 0f          lea    0xf(%rsp),%rax
    0.00 :	   4749a:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4749e:       48 01 d3                add    %rdx,%rbx
    0.00 :	   474a1:       48 8d 55 80             lea    -0x80(%rbp),%rdx
    0.00 :	   474a5:       48 89 85 90 f8 ff ff    mov    %rax,-0x770(%rbp)
    0.00 :	   474ac:       48 c7 c0 ff ff ff ff    mov    $0xffffffffffffffff,%rax
    0.00 :	   474b3:       48 0f 42 d8             cmovb  %rax,%rbx
    0.00 :	   474b7:       48 89 95 78 f8 ff ff    mov    %rdx,-0x788(%rbp)
    0.00 :	   474be:       48 8b 85 78 ff ff ff    mov    -0x88(%rbp),%rax
    0.00 :	   474c5:       48 85 c0                test   %rax,%rax
    0.00 :	   474c8:       0f 84 77 1d 00 00       je     49245 <_IO_vfprintf+0x4f85>
    0.00 :	   474ce:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   474d1:       77 2d                   ja     47500 <_IO_vfprintf+0x3240>
    0.00 :	   474d3:       48 89 c3                mov    %rax,%rbx
    0.00 :	   474d6:       48 63 45 80             movslq -0x80(%rbp),%rax
    0.00 :	   474da:       4c 29 fb                sub    %r15,%rbx
    0.00 :	   474dd:       83 e0 07                and    $0x7,%eax
    0.00 :	   474e0:       48 29 c3                sub    %rax,%rbx
    0.00 :	   474e3:       89 9d 88 fa ff ff       mov    %ebx,-0x578(%rbp)
    0.00 :	   474e9:       48 8b a5 20 f9 ff ff    mov    -0x6e0(%rbp),%rsp
    0.00 :	   474f0:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   474f7:       00 00 00 
    0.00 :	   474fa:       e9 aa da ff ff          jmpq   44fa9 <_IO_vfprintf+0xce9>
    0.00 :	   474ff:       90                      nop
    0.00 :	   47500:       4c 8b 85 78 f8 ff ff    mov    -0x788(%rbp),%r8
    0.00 :	   47507:       48 8b 8d 78 fa ff ff    mov    -0x588(%rbp),%rcx
    0.00 :	   4750e:       48 89 da                mov    %rbx,%rdx
    0.00 :	   47511:       48 8b b5 40 f8 ff ff    mov    -0x7c0(%rbp),%rsi
    0.00 :	   47518:       48 8b bd 90 f8 ff ff    mov    -0x770(%rbp),%rdi
    0.00 :	   4751f:       48 29 c2                sub    %rax,%rdx
    0.00 :	   47522:       e8 e9 60 04 00          callq  8d610 <mbsnrtowcs>
    0.00 :	   47527:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   4752b:       75 91                   jne    474be <_IO_vfprintf+0x31fe>
    0.00 :	   4752d:       41 89 c5                mov    %eax,%r13d
    0.00 :	   47530:       48 8b a5 20 f9 ff ff    mov    -0x6e0(%rbp),%rsp
    0.00 :	   47537:       e9 9b f3 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   4753c:       49 8b 4e 08             mov    0x8(%r14),%rcx
    0.00 :	   47540:       48 8d 41 08             lea    0x8(%rcx),%rax
    0.00 :	   47544:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47548:       e9 48 d2 ff ff          jmpq   44795 <_IO_vfprintf+0x4d5>
    0.00 :	   4754d:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47552:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47557:       0f 83 d5 19 00 00       jae    48f32 <_IO_vfprintf+0x4c72>
    0.00 :	   4755d:       c6 00 2d                movb   $0x2d,(%rax)
    0.00 :	   47560:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47564:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47569:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   47570:       0f 84 5b f3 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47576:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   4757a:       83 ad 64 fa ff ff 01    subl   $0x1,-0x59c(%rbp)
    0.00 :	   47581:       e9 7d f6 ff ff          jmpq   46c03 <_IO_vfprintf+0x2943>
    0.00 :	   47586:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4758b:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47590:       0f 83 f1 1e 00 00       jae    49487 <_IO_vfprintf+0x51c7>
    0.00 :	   47596:       c6 00 2d                movb   $0x2d,(%rax)
    0.00 :	   47599:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4759d:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   475a2:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   475a9:       0f 84 22 f3 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   475af:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   475b3:       83 ad b8 fa ff ff 01    subl   $0x1,-0x548(%rbp)
    0.00 :	   475ba:       e9 1b f5 ff ff          jmpq   46ada <_IO_vfprintf+0x281a>
    0.00 :	   475bf:       48 8b 95 08 ff ff ff    mov    -0xf8(%rbp),%rdx
    0.00 :	   475c6:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   475ca:       48 89 85 08 ff ff ff    mov    %rax,-0xf8(%rbp)
    0.00 :	   475d1:       e9 9e fb ff ff          jmpq   47174 <_IO_vfprintf+0x2eb4>
    0.00 :	   475d6:       83 bd ec fa ff ff 04    cmpl   $0x4,-0x514(%rbp)
    0.00 :	   475dd:       b8 05 00 00 00          mov    $0x5,%eax
    0.00 :	   475e2:       4c 8d 3d f8 36 0f 00    lea    0xf36f8(%rip),%r15        # 13ace1 <__PRETTY_FUNCTION__.9779+0x95>
    0.00 :	   475e9:       0f 4f 85 ec fa ff ff    cmovg  -0x514(%rbp),%eax
    0.00 :	   475f0:       89 85 ec fa ff ff       mov    %eax,-0x514(%rbp)
    0.00 :	   475f6:       80 bd eb f9 ff ff 53    cmpb   $0x53,-0x615(%rbp)
    0.00 :	   475fd:       0f 84 7f e3 ff ff       je     45982 <_IO_vfprintf+0x16c2>
    0.00 :	   47603:       83 bd ec fa ff ff ff    cmpl   $0xffffffff,-0x514(%rbp)
    0.00 :	   4760a:       0f 84 11 1c 00 00       je     49221 <_IO_vfprintf+0x4f61>
    0.00 :	   47610:       48 8b 05 71 a7 32 00    mov    0x32a771(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   47617:       48 8b 95 58 f8 ff ff    mov    -0x7a8(%rbp),%rdx
    0.00 :	   4761e:       48 8b 04 02             mov    (%rdx,%rax,1),%rax
    0.00 :	   47622:       48 8b 00                mov    (%rax),%rax
    0.00 :	   47625:       83 b8 a8 00 00 00 01    cmpl   $0x1,0xa8(%rax)
    0.00 :	   4762c:       0f 84 6a 01 00 00       je     4779c <_IO_vfprintf+0x34dc>
    0.00 :	   47632:       81 bd ec fa ff ff 00    cmpl   $0x400,-0x514(%rbp)
    0.00 :	   47639:       04 00 00 
    0.00 :	   4763c:       48 89 a5 e0 f8 ff ff    mov    %rsp,-0x720(%rbp)
    0.00 :	   47643:       0f 86 28 06 00 00       jbe    47c71 <_IO_vfprintf+0x39b1>
    0.00 :	   47649:       48 63 95 ec fa ff ff    movslq -0x514(%rbp),%rdx
    0.00 :	   47650:       48 c7 85 f0 f9 ff ff    movq   $0x400,-0x610(%rbp)
    0.00 :	   47657:       00 04 00 00 
    0.00 :	   4765b:       b8 00 10 00 00          mov    $0x1000,%eax
    0.00 :	   47660:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   47664:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   47667:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	   4766b:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4766f:       4c 89 7d 98             mov    %r15,-0x68(%rbp)
    0.00 :	   47673:       48 c7 45 b0 00 00 00    movq   $0x0,-0x50(%rbp)
    0.00 :	   4767a:       00 
    0.00 :	   4767b:       48 29 c4                sub    %rax,%rsp
    0.00 :	   4767e:       48 c7 c0 ff ff ff ff    mov    $0xffffffffffffffff,%rax
    0.00 :	   47685:       48 89 bd 60 f8 ff ff    mov    %rdi,-0x7a0(%rbp)
    0.00 :	   4768c:       48 8d 4c 24 0f          lea    0xf(%rsp),%rcx
    0.00 :	   47691:       48 83 e1 f0             and    $0xfffffffffffffff0,%rcx
    0.00 :	   47695:       48 01 d3                add    %rdx,%rbx
    0.00 :	   47698:       48 0f 42 d8             cmovb  %rax,%rbx
    0.00 :	   4769c:       48 8d 45 98             lea    -0x68(%rbp),%rax
    0.00 :	   476a0:       48 89 8d a0 f8 ff ff    mov    %rcx,-0x760(%rbp)
    0.00 :	   476a7:       48 89 85 48 f8 ff ff    mov    %rax,-0x7b8(%rbp)
    0.00 :	   476ae:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	   476b2:       48 85 c0                test   %rax,%rax
    0.00 :	   476b5:       0f 84 bc 1d 00 00       je     49477 <_IO_vfprintf+0x51b7>
    0.00 :	   476bb:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   476be:       77 30                   ja     476f0 <_IO_vfprintf+0x3430>
    0.00 :	   476c0:       48 89 c3                mov    %rax,%rbx
    0.00 :	   476c3:       48 63 45 b0             movslq -0x50(%rbp),%rax
    0.00 :	   476c7:       4c 29 fb                sub    %r15,%rbx
    0.00 :	   476ca:       83 e0 07                and    $0x7,%eax
    0.00 :	   476cd:       48 29 c3                sub    %rax,%rbx
    0.00 :	   476d0:       89 9d 8c fa ff ff       mov    %ebx,-0x574(%rbp)
    0.00 :	   476d6:       48 8b a5 e0 f8 ff ff    mov    -0x720(%rbp),%rsp
    0.00 :	   476dd:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   476e4:       00 00 00 
    0.00 :	   476e7:       e9 24 e3 ff ff          jmpq   45a10 <_IO_vfprintf+0x1750>
    0.00 :	   476ec:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   476f0:       4c 8b 85 60 f8 ff ff    mov    -0x7a0(%rbp),%r8
    0.00 :	   476f7:       48 8b 8d f0 f9 ff ff    mov    -0x610(%rbp),%rcx
    0.00 :	   476fe:       48 89 da                mov    %rbx,%rdx
    0.00 :	   47701:       48 8b b5 48 f8 ff ff    mov    -0x7b8(%rbp),%rsi
    0.00 :	   47708:       48 8b bd a0 f8 ff ff    mov    -0x760(%rbp),%rdi
    0.00 :	   4770f:       48 29 c2                sub    %rax,%rdx
    0.00 :	   47712:       e8 f9 5e 04 00          callq  8d610 <mbsnrtowcs>
    0.00 :	   47717:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   4771b:       75 91                   jne    476ae <_IO_vfprintf+0x33ee>
    0.00 :	   4771d:       41 89 c5                mov    %eax,%r13d
    0.00 :	   47720:       48 8b a5 e0 f8 ff ff    mov    -0x720(%rbp),%rsp
    0.00 :	   47727:       e9 ab f1 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   4772c:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47731:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47736:       0f 83 ca 1a 00 00       jae    49206 <_IO_vfprintf+0x4f46>
    0.00 :	   4773c:       c6 00 2d                movb   $0x2d,(%rax)
    0.00 :	   4773f:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47743:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47748:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   4774f:       0f 84 7c f1 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47755:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   47759:       e9 d0 e8 ff ff          jmpq   4602e <_IO_vfprintf+0x1d6e>
    0.00 :	   4775e:       85 db                   test   %ebx,%ebx
    0.00 :	   47760:       7e 33                   jle    47795 <_IO_vfprintf+0x34d5>
    0.00 :	   47762:       48 63 d3                movslq %ebx,%rdx
    0.00 :	   47765:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   4776a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4776d:       e8 ce 0a 02 00          callq  68240 <_IO_padn>
    0.00 :	   47772:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   47779:       0f 87 18 eb ff ff       ja     46297 <_IO_vfprintf+0x1fd7>
    0.00 :	   4777f:       89 c2                   mov    %eax,%edx
    0.00 :	   47781:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   47786:       44 29 e8                sub    %r13d,%eax
    0.00 :	   47789:       39 c2                   cmp    %eax,%edx
    0.00 :	   4778b:       0f 87 40 f1 ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47791:       46 8d 2c 2a             lea    (%rdx,%r13,1),%r13d
    0.00 :	   47795:       31 db                   xor    %ebx,%ebx
    0.00 :	   47797:       e9 68 e8 ff ff          jmpq   46004 <_IO_vfprintf+0x1d44>
    0.00 :	   4779c:       48 63 b5 ec fa ff ff    movslq -0x514(%rbp),%rsi
    0.00 :	   477a3:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   477a6:       e8 55 94 03 00          callq  80c00 <strnlen>
    0.00 :	   477ab:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   477b2:       00 00 00 
    0.00 :	   477b5:       48 89 c3                mov    %rax,%rbx
    0.00 :	   477b8:       89 85 8c fa ff ff       mov    %eax,-0x574(%rbp)
    0.00 :	   477be:       e9 4d e2 ff ff          jmpq   45a10 <_IO_vfprintf+0x1750>
    0.00 :	   477c3:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   477c8:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   477cd:       0f 83 2a 18 00 00       jae    48ffd <_IO_vfprintf+0x4d3d>
    0.00 :	   477d3:       c6 00 2b                movb   $0x2b,(%rax)
    0.00 :	   477d6:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   477da:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   477df:       e9 be fd ff ff          jmpq   475a2 <_IO_vfprintf+0x32e2>
    0.00 :	   477e4:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   477e8:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   477ec:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   477f0:       e9 26 dc ff ff          jmpq   4541b <_IO_vfprintf+0x115b>
    0.00 :	   477f5:       44 8b 9d 58 fa ff ff    mov    -0x5a8(%rbp),%r11d
    0.00 :	   477fc:       45 85 db                test   %r11d,%r11d
    0.00 :	   477ff:       0f 85 de 02 00 00       jne    47ae3 <_IO_vfprintf+0x3823>
    0.00 :	   47805:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   4780c:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   47813:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   47818:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   4781c:       8b 04 03                mov    (%rbx,%rax,1),%eax
    0.00 :	   4781f:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   47826:       00 00 00 
    0.00 :	   47829:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   47830:       00 00 00 
    0.00 :	   47833:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   4783a:       00 00 00 
    0.00 :	   4783d:       48 89 85 08 f9 ff ff    mov    %rax,-0x6f8(%rbp)
    0.00 :	   47844:       e9 ca e6 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   47849:       48 63 95 68 fa ff ff    movslq -0x598(%rbp),%rdx
    0.00 :	   47850:       48 89 95 78 fa ff ff    mov    %rdx,-0x588(%rbp)
    0.00 :	   47857:       48 8d 04 95 00 00 00    lea    0x0(,%rdx,4),%rax
    0.00 :	   4785e:       00 
    0.00 :	   4785f:       e9 06 fc ff ff          jmpq   4746a <_IO_vfprintf+0x31aa>
    0.00 :	   47864:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47868:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4786c:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47870:       e9 5d e4 ff ff          jmpq   45cd2 <_IO_vfprintf+0x1a12>
    0.00 :	   47875:       48 8b 95 48 f9 ff ff    mov    -0x6b8(%rbp),%rdx
    0.00 :	   4787c:       48 83 c7 01             add    $0x1,%rdi
    0.00 :	   47880:       0f b6 42 01             movzbl 0x1(%rdx),%eax
    0.00 :	   47884:       8d 50 d0                lea    -0x30(%rax),%edx
    0.00 :	   47887:       83 fa 09                cmp    $0x9,%edx
    0.00 :	   4788a:       77 4a                   ja     478d6 <_IO_vfprintf+0x3616>
    0.00 :	   4788c:       48 8b 9d 48 f9 ff ff    mov    -0x6b8(%rbp),%rbx
    0.00 :	   47893:       48 8b b5 48 f9 ff ff    mov    -0x6b8(%rbp),%rsi
    0.00 :	   4789a:       0f b6 4b 02             movzbl 0x2(%rbx),%ecx
    0.00 :	   4789e:       48 83 c6 02             add    $0x2,%rsi
    0.00 :	   478a2:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   478a5:       83 e8 30                sub    $0x30,%eax
    0.00 :	   478a8:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   478ab:       77 1c                   ja     478c9 <_IO_vfprintf+0x3609>
    0.00 :	   478ad:       48 83 c6 01             add    $0x1,%rsi
    0.00 :	   478b1:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   478b4:       8d 14 92                lea    (%rdx,%rdx,4),%edx
    0.00 :	   478b7:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   478ba:       8d 54 50 d0             lea    -0x30(%rax,%rdx,2),%edx
    0.00 :	   478be:       0f b6 c1                movzbl %cl,%eax
    0.00 :	   478c1:       83 e8 30                sub    $0x30,%eax
    0.00 :	   478c4:       83 f8 09                cmp    $0x9,%eax
    0.00 :	   478c7:       76 e4                   jbe    478ad <_IO_vfprintf+0x35ed>
    0.00 :	   478c9:       85 d2                   test   %edx,%edx
    0.00 :	   478cb:       74 09                   je     478d6 <_IO_vfprintf+0x3616>
    0.00 :	   478cd:       80 f9 24                cmp    $0x24,%cl
    0.00 :	   478d0:       0f 84 11 e4 ff ff       je     45ce7 <_IO_vfprintf+0x1a27>
    0.00 :	   478d6:       41 8b 06                mov    (%r14),%eax
    0.00 :	   478d9:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   478dc:       0f 83 1e 11 00 00       jae    48a00 <_IO_vfprintf+0x4740>
    0.00 :	   478e2:       89 c2                   mov    %eax,%edx
    0.00 :	   478e4:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   478e8:       83 c0 08                add    $0x8,%eax
    0.00 :	   478eb:       41 89 06                mov    %eax,(%r14)
    0.00 :	   478ee:       8b 12                   mov    (%rdx),%edx
    0.00 :	   478f0:       85 d2                   test   %edx,%edx
    0.00 :	   478f2:       89 95 ec fa ff ff       mov    %edx,-0x514(%rbp)
    0.00 :	   478f8:       0f 88 e2 10 00 00       js     489e0 <_IO_vfprintf+0x4720>
    0.00 :	   478fe:       8b 95 ec fa ff ff       mov    -0x514(%rbp),%edx
    0.00 :	   47904:       48 89 bd 48 f9 ff ff    mov    %rdi,-0x6b8(%rbp)
    0.00 :	   4790b:       81 fa c8 03 00 00       cmp    $0x3c8,%edx
    0.00 :	   47911:       0f 97 c0                seta   %al
    0.00 :	   47914:       e9 28 dd ff ff          jmpq   45641 <_IO_vfprintf+0x1381>
    0.00 :	   47919:       48 89 df                mov    %rbx,%rdi
    0.00 :	   4791c:       e8 9f 02 0a 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   47921:       85 c0                   test   %eax,%eax
    0.00 :	   47923:       0f 85 4f dd ff ff       jne    45678 <_IO_vfprintf+0x13b8>
    0.00 :	   47929:       48 89 df                mov    %rbx,%rdi
    0.00 :	   4792c:       e8 1f 6f fd ff          callq  1e850 <malloc@plt>
    0.00 :	   47931:       48 85 c0                test   %rax,%rax
    0.00 :	   47934:       48 89 85 58 f9 ff ff    mov    %rax,-0x6a8(%rbp)
    0.00 :	   4793b:       0f 84 90 ef ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47941:       48 03 9d 58 f9 ff ff    add    -0x6a8(%rbp),%rbx
    0.00 :	   47948:       48 89 9d 60 f9 ff ff    mov    %rbx,-0x6a0(%rbp)
    0.00 :	   4794f:       48 8b 85 48 f9 ff ff    mov    -0x6b8(%rbp),%rax
    0.00 :	   47956:       0f b6 18                movzbl (%rax),%ebx
    0.00 :	   47959:       e9 42 dd ff ff          jmpq   456a0 <_IO_vfprintf+0x13e0>
    0.00 :	   4795e:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47962:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   47966:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4796a:       e9 3d f0 ff ff          jmpq   469ac <_IO_vfprintf+0x26ec>
    0.00 :	   4796f:       8b 85 c4 f9 ff ff       mov    -0x63c(%rbp),%eax
    0.00 :	   47975:       85 c0                   test   %eax,%eax
    0.00 :	   47977:       74 42                   je     479bb <_IO_vfprintf+0x36fb>
    0.00 :	   47979:       41 8b 06                mov    (%r14),%eax
    0.00 :	   4797c:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4797f:       0f 83 38 14 00 00       jae    48dbd <_IO_vfprintf+0x4afd>
    0.00 :	   47985:       89 c2                   mov    %eax,%edx
    0.00 :	   47987:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   4798b:       83 c0 08                add    $0x8,%eax
    0.00 :	   4798e:       41 89 06                mov    %eax,(%r14)
    0.00 :	   47991:       48 0f be 12             movsbq (%rdx),%rdx
    0.00 :	   47995:       e9 15 f0 ff ff          jmpq   469af <_IO_vfprintf+0x26ef>
    0.00 :	   4799a:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4799f:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   479a4:       0f 83 24 14 00 00       jae    48dce <_IO_vfprintf+0x4b0e>
    0.00 :	   479aa:       c6 00 20                movb   $0x20,(%rax)
    0.00 :	   479ad:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   479b1:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   479b6:       e9 e7 fb ff ff          jmpq   475a2 <_IO_vfprintf+0x32e2>
    0.00 :	   479bb:       44 8b bd bc f9 ff ff    mov    -0x644(%rbp),%r15d
    0.00 :	   479c2:       45 85 ff                test   %r15d,%r15d
    0.00 :	   479c5:       0f 85 d9 14 00 00       jne    48ea4 <_IO_vfprintf+0x4be4>
    0.00 :	   479cb:       41 8b 06                mov    (%r14),%eax
    0.00 :	   479ce:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   479d1:       0f 83 bc 14 00 00       jae    48e93 <_IO_vfprintf+0x4bd3>
    0.00 :	   479d7:       89 c2                   mov    %eax,%edx
    0.00 :	   479d9:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   479dd:       83 c0 08                add    $0x8,%eax
    0.00 :	   479e0:       41 89 06                mov    %eax,(%r14)
    0.00 :	   479e3:       48 63 12                movslq (%rdx),%rdx
    0.00 :	   479e6:       e9 c4 ef ff ff          jmpq   469af <_IO_vfprintf+0x26ef>
    0.00 :	   479eb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   479f0:       8b 85 60 fa ff ff       mov    -0x5a0(%rbp),%eax
    0.00 :	   479f6:       85 c0                   test   %eax,%eax
    0.00 :	   479f8:       0f 84 80 10 00 00       je     48a7e <_IO_vfprintf+0x47be>
    0.00 :	   479fe:       41 8b 06                mov    (%r14),%eax
    0.00 :	   47a01:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   47a04:       0f 83 63 10 00 00       jae    48a6d <_IO_vfprintf+0x47ad>
    0.00 :	   47a0a:       89 c2                   mov    %eax,%edx
    0.00 :	   47a0c:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   47a10:       83 c0 08                add    $0x8,%eax
    0.00 :	   47a13:       41 89 06                mov    %eax,(%r14)
    0.00 :	   47a16:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   47a19:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   47a20:       00 00 00 
    0.00 :	   47a23:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   47a2a:       00 00 00 
    0.00 :	   47a2d:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   47a34:       00 00 00 
    0.00 :	   47a37:       48 89 95 08 f9 ff ff    mov    %rdx,-0x6f8(%rbp)
    0.00 :	   47a3e:       e9 d0 e4 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   47a43:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   47a48:       8b 85 5c fa ff ff       mov    -0x5a4(%rbp),%eax
    0.00 :	   47a4e:       85 c0                   test   %eax,%eax
    0.00 :	   47a50:       0f 84 4d 12 00 00       je     48ca3 <_IO_vfprintf+0x49e3>
    0.00 :	   47a56:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   47a5d:       48 8b 8d 08 fa ff ff    mov    -0x5f8(%rbp),%rcx
    0.00 :	   47a64:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   47a69:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   47a6d:       48 0f be 14 01          movsbq (%rcx,%rax,1),%rdx
    0.00 :	   47a72:       e9 72 e4 ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   47a77:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   47a7e:       00 00 
    0.00 :	   47a80:       41 8b 46 04             mov    0x4(%r14),%eax
    0.00 :	   47a84:       3d b0 00 00 00          cmp    $0xb0,%eax
    0.00 :	   47a89:       0f 83 d1 01 00 00       jae    47c60 <_IO_vfprintf+0x39a0>
    0.00 :	   47a8f:       89 c2                   mov    %eax,%edx
    0.00 :	   47a91:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   47a95:       83 c0 10                add    $0x10,%eax
    0.00 :	   47a98:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	   47a9c:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   47a9f:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
    0.00 :	   47aa6:       e9 fb ed ff ff          jmpq   468a6 <_IO_vfprintf+0x25e6>
    0.00 :	   47aab:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47aaf:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   47ab3:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47ab7:       e9 a8 f4 ff ff          jmpq   46f64 <_IO_vfprintf+0x2ca4>
    0.00 :	   47abc:       48 63 b5 68 fa ff ff    movslq -0x598(%rbp),%rsi
    0.00 :	   47ac3:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   47ac6:       e8 35 91 03 00          callq  80c00 <strnlen>
    0.00 :	   47acb:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   47ad2:       00 00 00 
    0.00 :	   47ad5:       48 89 c3                mov    %rax,%rbx
    0.00 :	   47ad8:       89 85 88 fa ff ff       mov    %eax,-0x578(%rbp)
    0.00 :	   47ade:       e9 c6 d4 ff ff          jmpq   44fa9 <_IO_vfprintf+0xce9>
    0.00 :	   47ae3:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   47aea:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   47aef:       48 8b 95 08 fa ff ff    mov    -0x5f8(%rbp),%rdx
    0.00 :	   47af6:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   47afa:       0f b7 04 02             movzwl (%rdx,%rax,1),%eax
    0.00 :	   47afe:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   47b05:       00 00 00 
    0.00 :	   47b08:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   47b0f:       00 00 00 
    0.00 :	   47b12:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   47b19:       00 00 00 
    0.00 :	   47b1c:       48 89 85 08 f9 ff ff    mov    %rax,-0x6f8(%rbp)
    0.00 :	   47b23:       e9 eb e3 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   47b28:       41 8b 06                mov    (%r14),%eax
    0.00 :	   47b2b:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   47b2e:       0f 83 aa 11 00 00       jae    48cde <_IO_vfprintf+0x4a1e>
    0.00 :	   47b34:       89 c2                   mov    %eax,%edx
    0.00 :	   47b36:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   47b3a:       83 c0 08                add    $0x8,%eax
    0.00 :	   47b3d:       41 89 06                mov    %eax,(%r14)
    0.00 :	   47b40:       0f b7 12                movzwl (%rdx),%edx
    0.00 :	   47b43:       c7 85 90 f9 ff ff 00    movl   $0x0,-0x670(%rbp)
    0.00 :	   47b4a:       00 00 00 
    0.00 :	   47b4d:       c7 85 a8 f9 ff ff 00    movl   $0x0,-0x658(%rbp)
    0.00 :	   47b54:       00 00 00 
    0.00 :	   47b57:       c7 85 b0 f9 ff ff 00    movl   $0x0,-0x650(%rbp)
    0.00 :	   47b5e:       00 00 00 
    0.00 :	   47b61:       48 89 95 c0 f8 ff ff    mov    %rdx,-0x740(%rbp)
    0.00 :	   47b68:       e9 34 e9 ff ff          jmpq   464a1 <_IO_vfprintf+0x21e1>
    0.00 :	   47b6d:       41 8b 46 04             mov    0x4(%r14),%eax
    0.00 :	   47b71:       3d b0 00 00 00          cmp    $0xb0,%eax
    0.00 :	   47b76:       73 5c                   jae    47bd4 <_IO_vfprintf+0x3914>
    0.00 :	   47b78:       89 c2                   mov    %eax,%edx
    0.00 :	   47b7a:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   47b7e:       83 c0 10                add    $0x10,%eax
    0.00 :	   47b81:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	   47b85:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   47b88:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
    0.00 :	   47b8f:       e9 d5 eb ff ff          jmpq   46769 <_IO_vfprintf+0x24a9>
    0.00 :	   47b94:       44 8b 95 40 fa ff ff    mov    -0x5c0(%rbp),%r10d
    0.00 :	   47b9b:       45 85 d2                test   %r10d,%r10d
    0.00 :	   47b9e:       0f 84 9d e3 ff ff       je     45f41 <_IO_vfprintf+0x1c81>
    0.00 :	   47ba4:       4c 8b bd 60 f9 ff ff    mov    -0x6a0(%rbp),%r15
    0.00 :	   47bab:       48 8b 9d 60 f9 ff ff    mov    -0x6a0(%rbp),%rbx
    0.00 :	   47bb2:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	   47bb7:       31 c0                   xor    %eax,%eax
    0.00 :	   47bb9:       49 83 ef 01             sub    $0x1,%r15
    0.00 :	   47bbd:       c6 43 ff 30             movb   $0x30,-0x1(%rbx)
    0.00 :	   47bc1:       c6 85 72 fa ff ff 20    movb   $0x20,-0x58e(%rbp)
    0.00 :	   47bc8:       4c 89 bd d0 fa ff ff    mov    %r15,-0x530(%rbp)
    0.00 :	   47bcf:       e9 28 f2 ff ff          jmpq   46dfc <_IO_vfprintf+0x2b3c>
    0.00 :	   47bd4:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47bd8:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   47bdc:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47be0:       eb a3                   jmp    47b85 <_IO_vfprintf+0x38c5>
    0.00 :	   47be2:       83 bd 68 fa ff ff ff    cmpl   $0xffffffff,-0x598(%rbp)
    0.00 :	   47be9:       74 0d                   je     47bf8 <_IO_vfprintf+0x3938>
    0.00 :	   47beb:       83 bd 68 fa ff ff 05    cmpl   $0x5,-0x598(%rbp)
    0.00 :	   47bf2:       0f 8e 5d 18 00 00       jle    49455 <_IO_vfprintf+0x5195>
    0.00 :	   47bf8:       4c 8d 3d 12 31 0f 00    lea    0xf3112(%rip),%r15        # 13ad11 <null>
    0.00 :	   47bff:       bb 06 00 00 00          mov    $0x6,%ebx
    0.00 :	   47c04:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   47c0b:       00 00 00 
    0.00 :	   47c0e:       c7 85 88 fa ff ff 06    movl   $0x6,-0x578(%rbp)
    0.00 :	   47c15:       00 00 00 
    0.00 :	   47c18:       e9 8c d3 ff ff          jmpq   44fa9 <_IO_vfprintf+0xce9>
    0.00 :	   47c1d:       0f 1f 00                nopl   (%rax)
    0.00 :	   47c20:       44 8b 8d a4 f9 ff ff    mov    -0x65c(%rbp),%r9d
    0.00 :	   47c27:       45 85 c9                test   %r9d,%r9d
    0.00 :	   47c2a:       0f 84 9f e8 ff ff       je     464cf <_IO_vfprintf+0x220f>
    0.00 :	   47c30:       4c 8b bd 60 f9 ff ff    mov    -0x6a0(%rbp),%r15
    0.00 :	   47c37:       48 8b 85 60 f9 ff ff    mov    -0x6a0(%rbp),%rax
    0.00 :	   47c3e:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	   47c43:       49 83 ef 01             sub    $0x1,%r15
    0.00 :	   47c47:       c6 40 ff 30             movb   $0x30,-0x1(%rax)
    0.00 :	   47c4b:       c6 85 d0 f9 ff ff 20    movb   $0x20,-0x630(%rbp)
    0.00 :	   47c52:       4c 89 bd 98 fa ff ff    mov    %r15,-0x568(%rbp)
    0.00 :	   47c59:       31 c0                   xor    %eax,%eax
    0.00 :	   47c5b:       e9 87 f2 ff ff          jmpq   46ee7 <_IO_vfprintf+0x2c27>
    0.00 :	   47c60:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47c64:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   47c68:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47c6c:       e9 2b fe ff ff          jmpq   47a9c <_IO_vfprintf+0x37dc>
    0.00 :	   47c71:       48 63 95 ec fa ff ff    movslq -0x514(%rbp),%rdx
    0.00 :	   47c78:       48 89 95 f0 f9 ff ff    mov    %rdx,-0x610(%rbp)
    0.00 :	   47c7f:       48 8d 04 95 00 00 00    lea    0x0(,%rdx,4),%rax
    0.00 :	   47c86:       00 
    0.00 :	   47c87:       e9 d4 f9 ff ff          jmpq   47660 <_IO_vfprintf+0x33a0>
    0.00 :	   47c8c:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47c91:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47c96:       0f 83 e7 18 00 00       jae    49583 <_IO_vfprintf+0x52c3>
    0.00 :	   47c9c:       c6 00 20                movb   $0x20,(%rax)
    0.00 :	   47c9f:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47ca3:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47ca8:       e9 9b fa ff ff          jmpq   47748 <_IO_vfprintf+0x3488>
    0.00 :	   47cad:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47cb2:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47cb7:       0f 83 ce 0b 00 00       jae    4888b <_IO_vfprintf+0x45cb>
    0.00 :	   47cbd:       c6 00 2b                movb   $0x2b,(%rax)
    0.00 :	   47cc0:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47cc4:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47cc9:       e9 7a fa ff ff          jmpq   47748 <_IO_vfprintf+0x3488>
    0.00 :	   47cce:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47cd3:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47cd8:       0f 83 1b 0c 00 00       jae    488f9 <_IO_vfprintf+0x4639>
    0.00 :	   47cde:       c6 00 20                movb   $0x20,(%rax)
    0.00 :	   47ce1:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47ce5:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47cea:       e9 7a f8 ff ff          jmpq   47569 <_IO_vfprintf+0x32a9>
    0.00 :	   47cef:       45 85 ed                test   %r13d,%r13d
    0.00 :	   47cf2:       0f 88 24 08 00 00       js     4851c <_IO_vfprintf+0x425c>
    0.00 :	   47cf8:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   47cff:       00 
    0.00 :	   47d00:       48 89 da                mov    %rbx,%rdx
    0.00 :	   47d03:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   47d06:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   47d09:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   47d0c:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   47d0f:       0f 85 bc eb ff ff       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47d15:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   47d18:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   47d1d:       48 29 d0                sub    %rdx,%rax
    0.00 :	   47d20:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   47d23:       0f 87 a8 eb ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47d29:       44 03 ad 8c fa ff ff    add    -0x574(%rbp),%r13d
    0.00 :	   47d30:       e9 5b cb ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   47d35:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   47d39:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   47d3d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   47d41:       e9 35 db ff ff          jmpq   4587b <_IO_vfprintf+0x15bb>
    0.00 :	   47d46:       8b 85 5c fa ff ff       mov    -0x5a4(%rbp),%eax
    0.00 :	   47d4c:       85 c0                   test   %eax,%eax
    0.00 :	   47d4e:       0f 84 4e 17 00 00       je     494a2 <_IO_vfprintf+0x51e2>
    0.00 :	   47d54:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   47d5b:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   47d60:       48 8b 95 08 fa ff ff    mov    -0x5f8(%rbp),%rdx
    0.00 :	   47d67:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   47d6b:       48 8b 04 02             mov    (%rdx,%rax,1),%rax
    0.00 :	   47d6f:       44 88 28                mov    %r13b,(%rax)
    0.00 :	   47d72:       e9 49 cd ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   47d77:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   47d7e:       00 00 
    0.00 :	   47d80:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47d85:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47d8a:       0f 83 63 07 00 00       jae    484f3 <_IO_vfprintf+0x4233>
    0.00 :	   47d90:       c6 00 20                movb   $0x20,(%rax)
    0.00 :	   47d93:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47d97:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47d9c:       e9 5e f5 ff ff          jmpq   472ff <_IO_vfprintf+0x303f>
    0.00 :	   47da1:       45 85 ed                test   %r13d,%r13d
    0.00 :	   47da4:       0f 88 51 06 00 00       js     483fb <_IO_vfprintf+0x413b>
    0.00 :	   47daa:       49 8b 84 24 d8 00 00    mov    0xd8(%r12),%rax
    0.00 :	   47db1:       00 
    0.00 :	   47db2:       48 89 da                mov    %rbx,%rdx
    0.00 :	   47db5:       4c 89 fe                mov    %r15,%rsi
    0.00 :	   47db8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   47dbb:       ff 50 38                callq  *0x38(%rax)
    0.00 :	   47dbe:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   47dc1:       0f 85 0a eb ff ff       jne    468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47dc7:       49 63 d5                movslq %r13d,%rdx
    0.00 :	   47dca:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   47dcf:       48 29 d0                sub    %rdx,%rax
    0.00 :	   47dd2:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   47dd5:       0f 87 f6 ea ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47ddb:       44 03 ad 88 fa ff ff    add    -0x578(%rbp),%r13d
    0.00 :	   47de2:       e9 d9 cc ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   47de7:       48 8b 8d d8 fa ff ff    mov    -0x528(%rbp),%rcx
    0.00 :	   47dee:       8b 51 08                mov    0x8(%rcx),%edx
    0.00 :	   47df1:       85 d2                   test   %edx,%edx
    0.00 :	   47df3:       0f 85 5f 15 00 00       jne    49358 <_IO_vfprintf+0x5098>
    0.00 :	   47df9:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   47e00:       0f 87 33 15 00 00       ja     49339 <_IO_vfprintf+0x5079>
    0.00 :	   47e06:       b8 ff ff ff 7f          mov    $0x7fffffff,%eax
    0.00 :	   47e0b:       44 29 e8                sub    %r13d,%eax
    0.00 :	   47e0e:       39 c3                   cmp    %eax,%ebx
    0.00 :	   47e10:       0f 87 bb ea ff ff       ja     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   47e16:       46 8d 2c 2b             lea    (%rbx,%r13,1),%r13d
    0.00 :	   47e1a:       e9 a1 cc ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   47e1f:       0f be 85 73 fa ff ff    movsbl -0x58d(%rbp),%eax
    0.00 :	   47e26:       8b 8d 68 fa ff ff       mov    -0x598(%rbp),%ecx
    0.00 :	   47e2c:       48 c7 85 28 ff ff ff    movq   $0x0,-0xd8(%rbp)
    0.00 :	   47e33:       00 00 00 00 
    0.00 :	   47e37:       0f b6 95 58 fa ff ff    movzbl -0x5a8(%rbp),%edx
    0.00 :	   47e3e:       44 8b 95 54 fa ff ff    mov    -0x5ac(%rbp),%r10d
    0.00 :	   47e45:       8b 9d 64 fa ff ff       mov    -0x59c(%rbp),%ebx
    0.00 :	   47e4b:       89 8d 20 ff ff ff       mov    %ecx,-0xe0(%rbp)
    0.00 :	   47e51:       0f b6 8d 54 fa ff ff    movzbl -0x5ac(%rbp),%ecx
    0.00 :	   47e58:       89 85 28 ff ff ff       mov    %eax,-0xd8(%rbp)
    0.00 :	   47e5e:       0f b6 85 2c ff ff ff    movzbl -0xd4(%rbp),%eax
    0.00 :	   47e65:       83 e2 01                and    $0x1,%edx
    0.00 :	   47e68:       89 9d 24 ff ff ff       mov    %ebx,-0xdc(%rbp)
    0.00 :	   47e6e:       01 d2                   add    %edx,%edx
    0.00 :	   47e70:       83 e1 01                and    $0x1,%ecx
    0.00 :	   47e73:       83 e0 fc                and    $0xfffffffc,%eax
    0.00 :	   47e76:       09 c8                   or     %ecx,%eax
    0.00 :	   47e78:       0f b6 8d 60 fa ff ff    movzbl -0x5a0(%rbp),%ecx
    0.00 :	   47e7f:       09 d0                   or     %edx,%eax
    0.00 :	   47e81:       0f b6 95 40 fa ff ff    movzbl -0x5c0(%rbp),%edx
    0.00 :	   47e88:       83 e0 f3                and    $0xfffffff3,%eax
    0.00 :	   47e8b:       83 e1 01                and    $0x1,%ecx
    0.00 :	   47e8e:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	   47e91:       83 e2 01                and    $0x1,%edx
    0.00 :	   47e94:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   47e97:       09 c8                   or     %ecx,%eax
    0.00 :	   47e99:       0f b6 8d 44 fa ff ff    movzbl -0x5bc(%rbp),%ecx
    0.00 :	   47ea0:       09 d0                   or     %edx,%eax
    0.00 :	   47ea2:       0f b6 95 48 fa ff ff    movzbl -0x5b8(%rbp),%edx
    0.00 :	   47ea9:       83 e0 cf                and    $0xffffffcf,%eax
    0.00 :	   47eac:       83 e1 01                and    $0x1,%ecx
    0.00 :	   47eaf:       c1 e1 04                shl    $0x4,%ecx
    0.00 :	   47eb2:       83 e2 01                and    $0x1,%edx
    0.00 :	   47eb5:       c1 e2 05                shl    $0x5,%edx
    0.00 :	   47eb8:       09 c8                   or     %ecx,%eax
    0.00 :	   47eba:       0f b6 8d 50 fa ff ff    movzbl -0x5b0(%rbp),%ecx
    0.00 :	   47ec1:       09 d0                   or     %edx,%eax
    0.00 :	   47ec3:       0f b6 95 4c fa ff ff    movzbl -0x5b4(%rbp),%edx
    0.00 :	   47eca:       83 e0 3f                and    $0x3f,%eax
    0.00 :	   47ecd:       c1 e1 07                shl    $0x7,%ecx
    0.00 :	   47ed0:       83 e2 01                and    $0x1,%edx
    0.00 :	   47ed3:       c1 e2 06                shl    $0x6,%edx
    0.00 :	   47ed6:       09 d0                   or     %edx,%eax
    0.00 :	   47ed8:       09 c8                   or     %ecx,%eax
    0.00 :	   47eda:       45 85 d2                test   %r10d,%r10d
    0.00 :	   47edd:       88 85 2c ff ff ff       mov    %al,-0xd4(%rbp)
    0.00 :	   47ee3:       0f be 85 72 fa ff ff    movsbl -0x58e(%rbp),%eax
    0.00 :	   47eea:       89 85 30 ff ff ff       mov    %eax,-0xd0(%rbp)
    0.00 :	   47ef0:       0f 84 7b 08 00 00       je     48771 <_IO_vfprintf+0x44b1>
    0.00 :	   47ef6:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	   47efa:       48 83 c0 0f             add    $0xf,%rax
    0.00 :	   47efe:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   47f02:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   47f06:       49 89 56 08             mov    %rdx,0x8(%r14)
    0.00 :	   47f0a:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	   47f0d:       48 8b 00                mov    (%rax),%rax
    0.00 :	   47f10:       89 95 48 ff ff ff       mov    %edx,-0xb8(%rbp)
    0.00 :	   47f16:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
    0.00 :	   47f1d:       48 8d 85 40 ff ff ff    lea    -0xc0(%rbp),%rax
    0.00 :	   47f24:       48 8d 95 78 ff ff ff    lea    -0x88(%rbp),%rdx
    0.00 :	   47f2b:       48 8d b5 20 ff ff ff    lea    -0xe0(%rbp),%rsi
    0.00 :	   47f32:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   47f35:       48 89 85 78 ff ff ff    mov    %rax,-0x88(%rbp)
    0.00 :	   47f3c:       e8 7f 47 00 00          callq  4c6c0 <__printf_fphex>
    0.00 :	   47f41:       89 c2                   mov    %eax,%edx
    0.00 :	   47f43:       e9 3a e3 ff ff          jmpq   46282 <_IO_vfprintf+0x1fc2>
    0.00 :	   47f48:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47f4d:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47f52:       0f 83 e7 15 00 00       jae    4953f <_IO_vfprintf+0x527f>
    0.00 :	   47f58:       c6 00 2d                movb   $0x2d,(%rax)
    0.00 :	   47f5b:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47f5f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   47f64:       83 c3 01                add    $0x1,%ebx
    0.00 :	   47f67:       e9 12 d2 ff ff          jmpq   4517e <_IO_vfprintf+0xebe>
    0.00 :	   47f6c:       85 c0                   test   %eax,%eax
    0.00 :	   47f6e:       0f 89 df f1 ff ff       jns    47153 <_IO_vfprintf+0x2e93>
    0.00 :	   47f74:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	   47f77:       0f 85 39 f2 ff ff       jne    471b6 <_IO_vfprintf+0x2ef6>
    0.00 :	   47f7d:       41 f6 44 24 74 04       testb  $0x4,0x74(%r12)
    0.00 :	   47f83:       0f 85 f6 08 00 00       jne    4887f <_IO_vfprintf+0x45bf>
    0.00 :	   47f89:       48 8d 0d 80 a9 0f 00    lea    0xfa980(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   47f90:       48 8d 35 3f 2d 0f 00    lea    0xf2d3f(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   47f97:       48 8d 3d 64 2d 0f 00    lea    0xf2d64(%rip),%rdi        # 13ad02 <__PRETTY_FUNCTION__.9779+0xb6>
    0.00 :	   47f9e:       ba 30 07 00 00          mov    $0x730,%edx
    0.00 :	   47fa3:       e8 78 39 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   47fa8:       83 bd ec fa ff ff ff    cmpl   $0xffffffff,-0x514(%rbp)
    0.00 :	   47faf:       74 0d                   je     47fbe <_IO_vfprintf+0x3cfe>
    0.00 :	   47fb1:       83 bd ec fa ff ff 05    cmpl   $0x5,-0x514(%rbp)
    0.00 :	   47fb8:       0f 8e f6 11 00 00       jle    491b4 <_IO_vfprintf+0x4ef4>
    0.00 :	   47fbe:       4c 8d 3d 4c 2d 0f 00    lea    0xf2d4c(%rip),%r15        # 13ad11 <null>
    0.00 :	   47fc5:       bb 06 00 00 00          mov    $0x6,%ebx
    0.00 :	   47fca:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   47fd1:       00 00 00 
    0.00 :	   47fd4:       c7 85 8c fa ff ff 06    movl   $0x6,-0x574(%rbp)
    0.00 :	   47fdb:       00 00 00 
    0.00 :	   47fde:       e9 2d da ff ff          jmpq   45a10 <_IO_vfprintf+0x1750>
    0.00 :	   47fe3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   47fe8:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   47fed:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   47ff2:       0f 83 aa 13 00 00       jae    493a2 <_IO_vfprintf+0x50e2>
    0.00 :	   47ff8:       c6 00 2b                movb   $0x2b,(%rax)
    0.00 :	   47ffb:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   47fff:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   48004:       e9 60 f5 ff ff          jmpq   47569 <_IO_vfprintf+0x32a9>
    0.00 :	   48009:       0f be 85 73 fa ff ff    movsbl -0x58d(%rbp),%eax
    0.00 :	   48010:       48 c7 85 28 ff ff ff    movq   $0x0,-0xd8(%rbp)
    0.00 :	   48017:       00 00 00 00 
    0.00 :	   4801b:       0f b6 8d 54 fa ff ff    movzbl -0x5ac(%rbp),%ecx
    0.00 :	   48022:       0f b6 95 58 fa ff ff    movzbl -0x5a8(%rbp),%edx
    0.00 :	   48029:       44 8b 9d 54 fa ff ff    mov    -0x5ac(%rbp),%r11d
    0.00 :	   48030:       8b 9d 68 fa ff ff       mov    -0x598(%rbp),%ebx
    0.00 :	   48036:       8b bd 64 fa ff ff       mov    -0x59c(%rbp),%edi
    0.00 :	   4803c:       89 85 28 ff ff ff       mov    %eax,-0xd8(%rbp)
    0.00 :	   48042:       0f b6 85 2c ff ff ff    movzbl -0xd4(%rbp),%eax
    0.00 :	   48049:       83 e1 01                and    $0x1,%ecx
    0.00 :	   4804c:       83 e2 01                and    $0x1,%edx
    0.00 :	   4804f:       89 9d 20 ff ff ff       mov    %ebx,-0xe0(%rbp)
    0.00 :	   48055:       01 d2                   add    %edx,%edx
    0.00 :	   48057:       89 bd 24 ff ff ff       mov    %edi,-0xdc(%rbp)
    0.00 :	   4805d:       83 e0 fc                and    $0xfffffffc,%eax
    0.00 :	   48060:       09 c8                   or     %ecx,%eax
    0.00 :	   48062:       0f b6 8d 60 fa ff ff    movzbl -0x5a0(%rbp),%ecx
    0.00 :	   48069:       09 d0                   or     %edx,%eax
    0.00 :	   4806b:       0f b6 95 40 fa ff ff    movzbl -0x5c0(%rbp),%edx
    0.00 :	   48072:       83 e0 f3                and    $0xfffffff3,%eax
    0.00 :	   48075:       83 e1 01                and    $0x1,%ecx
    0.00 :	   48078:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	   4807b:       83 e2 01                and    $0x1,%edx
    0.00 :	   4807e:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   48081:       09 c8                   or     %ecx,%eax
    0.00 :	   48083:       0f b6 8d 44 fa ff ff    movzbl -0x5bc(%rbp),%ecx
    0.00 :	   4808a:       09 d0                   or     %edx,%eax
    0.00 :	   4808c:       0f b6 95 48 fa ff ff    movzbl -0x5b8(%rbp),%edx
    0.00 :	   48093:       83 e0 cf                and    $0xffffffcf,%eax
    0.00 :	   48096:       83 e1 01                and    $0x1,%ecx
    0.00 :	   48099:       c1 e1 04                shl    $0x4,%ecx
    0.00 :	   4809c:       83 e2 01                and    $0x1,%edx
    0.00 :	   4809f:       c1 e2 05                shl    $0x5,%edx
    0.00 :	   480a2:       09 c8                   or     %ecx,%eax
    0.00 :	   480a4:       0f b6 8d 50 fa ff ff    movzbl -0x5b0(%rbp),%ecx
    0.00 :	   480ab:       09 d0                   or     %edx,%eax
    0.00 :	   480ad:       0f b6 95 4c fa ff ff    movzbl -0x5b4(%rbp),%edx
    0.00 :	   480b4:       83 e0 3f                and    $0x3f,%eax
    0.00 :	   480b7:       c1 e1 07                shl    $0x7,%ecx
    0.00 :	   480ba:       83 e2 01                and    $0x1,%edx
    0.00 :	   480bd:       c1 e2 06                shl    $0x6,%edx
    0.00 :	   480c0:       09 d0                   or     %edx,%eax
    0.00 :	   480c2:       0f b6 95 6c fa ff ff    movzbl -0x594(%rbp),%edx
    0.00 :	   480c9:       09 c8                   or     %ecx,%eax
    0.00 :	   480cb:       88 85 2c ff ff ff       mov    %al,-0xd4(%rbp)
    0.00 :	   480d1:       0f b6 85 2d ff ff ff    movzbl -0xd3(%rbp),%eax
    0.00 :	   480d8:       83 e2 01                and    $0x1,%edx
    0.00 :	   480db:       c1 e2 03                shl    $0x3,%edx
    0.00 :	   480de:       83 e0 f7                and    $0xfffffff7,%eax
    0.00 :	   480e1:       09 d0                   or     %edx,%eax
    0.00 :	   480e3:       45 85 db                test   %r11d,%r11d
    0.00 :	   480e6:       88 85 2d ff ff ff       mov    %al,-0xd3(%rbp)
    0.00 :	   480ec:       0f be 85 72 fa ff ff    movsbl -0x58e(%rbp),%eax
    0.00 :	   480f3:       89 85 30 ff ff ff       mov    %eax,-0xd0(%rbp)
    0.00 :	   480f9:       0f 84 be 06 00 00       je     487bd <_IO_vfprintf+0x44fd>
    0.00 :	   480ff:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	   48103:       48 83 c0 0f             add    $0xf,%rax
    0.00 :	   48107:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   4810b:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   4810f:       49 89 56 08             mov    %rdx,0x8(%r14)
    0.00 :	   48113:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	   48116:       48 8b 00                mov    (%rax),%rax
    0.00 :	   48119:       89 95 48 ff ff ff       mov    %edx,-0xb8(%rbp)
    0.00 :	   4811f:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
    0.00 :	   48126:       48 8d 85 40 ff ff ff    lea    -0xc0(%rbp),%rax
    0.00 :	   4812d:       48 8d 95 78 ff ff ff    lea    -0x88(%rbp),%rdx
    0.00 :	   48134:       48 8d b5 20 ff ff ff    lea    -0xe0(%rbp),%rsi
    0.00 :	   4813b:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4813e:       48 89 85 78 ff ff ff    mov    %rax,-0x88(%rbp)
    0.00 :	   48145:       e8 66 1c 00 00          callq  49db0 <__printf_fp>
    0.00 :	   4814a:       89 c2                   mov    %eax,%edx
    0.00 :	   4814c:       e9 31 e1 ff ff          jmpq   46282 <_IO_vfprintf+0x1fc2>
    0.00 :	   48151:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48156:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4815b:       0f 83 6e 13 00 00       jae    494cf <_IO_vfprintf+0x520f>
    0.00 :	   48161:       c6 00 2b                movb   $0x2b,(%rax)
    0.00 :	   48164:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48168:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4816d:       48 8b 8d d8 fa ff ff    mov    -0x528(%rbp),%rcx
    0.00 :	   48174:       83 c3 01                add    $0x1,%ebx
    0.00 :	   48177:       0f b6 41 0c             movzbl 0xc(%rcx),%eax
    0.00 :	   4817b:       e9 f6 cf ff ff          jmpq   45176 <_IO_vfprintf+0xeb6>
    0.00 :	   48180:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48184:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48188:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4818c:       e9 7c e7 ff ff          jmpq   4690d <_IO_vfprintf+0x264d>
    0.00 :	   48191:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48195:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48199:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4819d:       e9 97 d7 ff ff          jmpq   45939 <_IO_vfprintf+0x1679>
    0.00 :	   481a2:       8b bd c4 f9 ff ff       mov    -0x63c(%rbp),%edi
    0.00 :	   481a8:       85 ff                   test   %edi,%edi
    0.00 :	   481aa:       0f 84 83 00 00 00       je     48233 <_IO_vfprintf+0x3f73>
    0.00 :	   481b0:       41 8b 06                mov    (%r14),%eax
    0.00 :	   481b3:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   481b6:       0f 83 61 06 00 00       jae    4881d <_IO_vfprintf+0x455d>
    0.00 :	   481bc:       89 c2                   mov    %eax,%edx
    0.00 :	   481be:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   481c2:       83 c0 08                add    $0x8,%eax
    0.00 :	   481c5:       41 89 06                mov    %eax,(%r14)
    0.00 :	   481c8:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   481cb:       44 88 28                mov    %r13b,(%rax)
    0.00 :	   481ce:       e9 bd c6 ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   481d3:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   481d8:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   481dd:       0f 83 01 06 00 00       jae    487e4 <_IO_vfprintf+0x4524>
    0.00 :	   481e3:       c6 00 23                movb   $0x23,(%rax)
    0.00 :	   481e6:       48 8b bd d8 fa ff ff    mov    -0x528(%rbp),%rdi
    0.00 :	   481ed:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   481f1:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   481f6:       bb 02 00 00 00          mov    $0x2,%ebx
    0.00 :	   481fb:       0f b6 47 0c             movzbl 0xc(%rdi),%eax
    0.00 :	   481ff:       e9 55 cf ff ff          jmpq   45159 <_IO_vfprintf+0xe99>
    0.00 :	   48204:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48209:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4820e:       0f 83 1a 06 00 00       jae    4882e <_IO_vfprintf+0x456e>
    0.00 :	   48214:       c6 00 27                movb   $0x27,(%rax)
    0.00 :	   48217:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4821b:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   48220:       48 8b 95 d8 fa ff ff    mov    -0x528(%rbp),%rdx
    0.00 :	   48227:       83 c3 01                add    $0x1,%ebx
    0.00 :	   4822a:       0f b6 42 0c             movzbl 0xc(%rdx),%eax
    0.00 :	   4822e:       e9 2e cf ff ff          jmpq   45161 <_IO_vfprintf+0xea1>
    0.00 :	   48233:       8b b5 bc f9 ff ff       mov    -0x644(%rbp),%esi
    0.00 :	   48239:       85 f6                   test   %esi,%esi
    0.00 :	   4823b:       0f 85 de 12 00 00       jne    4951f <_IO_vfprintf+0x525f>
    0.00 :	   48241:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48244:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48247:       0f 83 c1 12 00 00       jae    4950e <_IO_vfprintf+0x524e>
    0.00 :	   4824d:       89 c2                   mov    %eax,%edx
    0.00 :	   4824f:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48253:       83 c0 08                add    $0x8,%eax
    0.00 :	   48256:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48259:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4825c:       44 89 28                mov    %r13d,(%rax)
    0.00 :	   4825f:       e9 2c c6 ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   48264:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   48268:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4826d:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   48272:       0f 83 e2 12 00 00       jae    4955a <_IO_vfprintf+0x529a>
    0.00 :	   48278:       c6 00 2b                movb   $0x2b,(%rax)
    0.00 :	   4827b:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4827f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   48284:       e9 76 f0 ff ff          jmpq   472ff <_IO_vfprintf+0x303f>
    0.00 :	   48289:       48 8b 15 68 ab 32 00    mov    0x32ab68(%rip),%rdx        # 372df8 <__printf_va_arg_table>
    0.00 :	   48290:       48 85 d2                test   %rdx,%rdx
    0.00 :	   48293:       0f 85 12 03 00 00       jne    485ab <_IO_vfprintf+0x42eb>
    0.00 :	   48299:       d9 ee                   fldz   
    0.00 :	   4829b:       db 3b                   fstpt  (%rbx)
    0.00 :	   4829d:       e9 d6 ee ff ff          jmpq   47178 <_IO_vfprintf+0x2eb8>
    0.00 :	   482a2:       48 8d 0d 67 a6 0f 00    lea    0xfa667(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   482a9:       48 8d 35 26 2a 0f 00    lea    0xf2a26(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   482b0:       48 8d 3d d9 65 0f 00    lea    0xf65d9(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   482b7:       ba b6 07 00 00          mov    $0x7b6,%edx
    0.00 :	   482bc:       e8 5f 36 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   482c1:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   482c6:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   482cb:       0f 83 0e 01 00 00       jae    483df <_IO_vfprintf+0x411f>
    0.00 :	   482d1:       c6 00 30                movb   $0x30,(%rax)
    0.00 :	   482d4:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   482d8:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   482dd:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   482e4:       0f 84 e7 e5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   482ea:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   482ef:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   482f4:       0f 83 c8 00 00 00       jae    483c2 <_IO_vfprintf+0x4102>
    0.00 :	   482fa:       0f b6 95 73 fa ff ff    movzbl -0x58d(%rbp),%edx
    0.00 :	   48301:       88 10                   mov    %dl,(%rax)
    0.00 :	   48303:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48307:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4830c:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   48313:       0f 84 b8 e5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48319:       41 83 c5 02             add    $0x2,%r13d
    0.00 :	   4831d:       83 ad 64 fa ff ff 02    subl   $0x2,-0x59c(%rbp)
    0.00 :	   48324:       e9 fb e8 ff ff          jmpq   46c24 <_IO_vfprintf+0x2964>
    0.00 :	   48329:       48 8d 5d 98             lea    -0x68(%rbp),%rbx
    0.00 :	   4832d:       48 8b 8d 68 f8 ff ff    mov    -0x798(%rbp),%rcx
    0.00 :	   48334:       31 d2                   xor    %edx,%edx
    0.00 :	   48336:       31 ff                   xor    %edi,%edi
    0.00 :	   48338:       48 89 de                mov    %rbx,%rsi
    0.00 :	   4833b:       48 89 9d 70 f8 ff ff    mov    %rbx,-0x790(%rbp)
    0.00 :	   48342:       e8 29 4f 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   48347:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   4834b:       48 89 c3                mov    %rax,%rbx
    0.00 :	   4834e:       0f 84 7d e5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48354:       8b 45 a0                mov    -0x60(%rbp),%eax
    0.00 :	   48357:       85 c0                   test   %eax,%eax
    0.00 :	   48359:       0f 85 ee 05 00 00       jne    4894d <_IO_vfprintf+0x468d>
    0.00 :	   4835f:       48 8d 7b 01             lea    0x1(%rbx),%rdi
    0.00 :	   48363:       4c 89 7d 98             mov    %r15,-0x68(%rbp)
    0.00 :	   48367:       48 81 ff 00 10 00 00    cmp    $0x1000,%rdi
    0.00 :	   4836e:       48 89 bd e8 f8 ff ff    mov    %rdi,-0x718(%rbp)
    0.00 :	   48375:       0f 87 9a 05 00 00       ja     48915 <_IO_vfprintf+0x4655>
    0.00 :	   4837b:       48 8b 85 e8 f8 ff ff    mov    -0x718(%rbp),%rax
    0.00 :	   48382:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   48389:       00 00 00 
    0.00 :	   4838c:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   48390:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   48394:       48 29 c4                sub    %rax,%rsp
    0.00 :	   48397:       4c 8d 7c 24 0f          lea    0xf(%rsp),%r15
    0.00 :	   4839c:       49 83 e7 f0             and    $0xfffffffffffffff0,%r15
    0.00 :	   483a0:       48 8b 8d 68 f8 ff ff    mov    -0x798(%rbp),%rcx
    0.00 :	   483a7:       48 8b 95 e8 f8 ff ff    mov    -0x718(%rbp),%rdx
    0.00 :	   483ae:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   483b1:       48 8b b5 70 f8 ff ff    mov    -0x790(%rbp),%rsi
    0.00 :	   483b8:       e8 b3 4e 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   483bd:       e9 48 d6 ff ff          jmpq   45a0a <_IO_vfprintf+0x174a>
    0.00 :	   483c2:       0f b6 b5 73 fa ff ff    movzbl -0x58d(%rbp),%esi
    0.00 :	   483c9:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   483cc:       e8 cf b9 02 00          callq  73da0 <__overflow>
    0.00 :	   483d1:       83 c0 01                add    $0x1,%eax
    0.00 :	   483d4:       0f 85 32 ff ff ff       jne    4830c <_IO_vfprintf+0x404c>
    0.00 :	   483da:       e9 f2 e4 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   483df:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   483e4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   483e7:       e8 b4 b9 02 00          callq  73da0 <__overflow>
    0.00 :	   483ec:       83 c0 01                add    $0x1,%eax
    0.00 :	   483ef:       90                      nop
    0.00 :	   483f0:       0f 85 e7 fe ff ff       jne    482dd <_IO_vfprintf+0x401d>
    0.00 :	   483f6:       e9 d6 e4 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   483fb:       48 8d 0d 0e a5 0f 00    lea    0xfa50e(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   48402:       48 8d 35 cd 28 0f 00    lea    0xf28cd(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   48409:       48 8d 3d b0 64 0f 00    lea    0xf64b0(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   48410:       ba b6 07 00 00          mov    $0x7b6,%edx
    0.00 :	   48415:       e8 06 35 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   4841a:       f7 d8                   neg    %eax
    0.00 :	   4841c:       83 ca 20                or     $0x20,%edx
    0.00 :	   4841f:       41 89 47 04             mov    %eax,0x4(%r15)
    0.00 :	   48423:       41 88 57 0c             mov    %dl,0xc(%r15)
    0.00 :	   48427:       c7 85 48 fa ff ff 01    movl   $0x1,-0x5b8(%rbp)
    0.00 :	   4842e:       00 00 00 
    0.00 :	   48431:       e9 0a c8 ff ff          jmpq   44c40 <_IO_vfprintf+0x980>
    0.00 :	   48436:       48 8d 0d d3 a4 0f 00    lea    0xfa4d3(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   4843d:       48 8d 35 92 28 0f 00    lea    0xf2892(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   48444:       48 8d 3d 75 64 0f 00    lea    0xf6475(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   4844b:       ba db 07 00 00          mov    $0x7db,%edx
    0.00 :	   48450:       e8 cb 34 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   48455:       48 89 df                mov    %rbx,%rdi
    0.00 :	   48458:       e8 63 f7 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   4845d:       85 c0                   test   %eax,%eax
    0.00 :	   4845f:       0f 85 64 c8 ff ff       jne    44cc9 <_IO_vfprintf+0xa09>
    0.00 :	   48465:       48 89 df                mov    %rbx,%rdi
    0.00 :	   48468:       e8 e3 63 fd ff          callq  1e850 <malloc@plt>
    0.00 :	   4846d:       48 89 85 58 f9 ff ff    mov    %rax,-0x6a8(%rbp)
    0.00 :	   48474:       48 63 85 04 f9 ff ff    movslq -0x6fc(%rbp),%rax
    0.00 :	   4847b:       48 8b 95 58 f9 ff ff    mov    -0x6a8(%rbp),%rdx
    0.00 :	   48482:       48 8d 44 02 20          lea    0x20(%rdx,%rax,1),%rax
    0.00 :	   48487:       48 89 85 60 f9 ff ff    mov    %rax,-0x6a0(%rbp)
    0.00 :	   4848e:       e9 68 c8 ff ff          jmpq   44cfb <_IO_vfprintf+0xa3b>
    0.00 :	   48493:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   48499:       48 8b a5 18 f9 ff ff    mov    -0x6e8(%rbp),%rsp
    0.00 :	   484a0:       e9 32 e4 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   484a5:       41 8b 06                mov    (%r14),%eax
    0.00 :	   484a8:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   484ab:       73 61                   jae    4850e <_IO_vfprintf+0x424e>
    0.00 :	   484ad:       89 c1                   mov    %eax,%ecx
    0.00 :	   484af:       49 03 4e 10             add    0x10(%r14),%rcx
    0.00 :	   484b3:       83 c0 08                add    $0x8,%eax
    0.00 :	   484b6:       41 89 06                mov    %eax,(%r14)
    0.00 :	   484b9:       8b 31                   mov    (%rcx),%esi
    0.00 :	   484bb:       e9 07 c5 ff ff          jmpq   449c7 <_IO_vfprintf+0x707>
    0.00 :	   484c0:       48 89 df                mov    %rbx,%rdi
    0.00 :	   484c3:       e8 f8 f6 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   484c8:       85 c0                   test   %eax,%eax
    0.00 :	   484ca:       0f 85 8f ca ff ff       jne    44f5f <_IO_vfprintf+0xc9f>
    0.00 :	   484d0:       48 89 df                mov    %rbx,%rdi
    0.00 :	   484d3:       e8 78 63 fd ff          callq  1e850 <malloc@plt>
    0.00 :	   484d8:       48 85 c0                test   %rax,%rax
    0.00 :	   484db:       49 89 c7                mov    %rax,%r15
    0.00 :	   484de:       0f 84 ed e3 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   484e4:       c7 85 74 fa ff ff 01    movl   $0x1,-0x58c(%rbp)
    0.00 :	   484eb:       00 00 00 
    0.00 :	   484ee:       e9 8a ca ff ff          jmpq   44f7d <_IO_vfprintf+0xcbd>
    0.00 :	   484f3:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   484f8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   484fb:       e8 a0 b8 02 00          callq  73da0 <__overflow>
    0.00 :	   48500:       83 c0 01                add    $0x1,%eax
    0.00 :	   48503:       0f 85 f6 ed ff ff       jne    472ff <_IO_vfprintf+0x303f>
    0.00 :	   48509:       e9 c3 e3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4850e:       49 8b 4e 08             mov    0x8(%r14),%rcx
    0.00 :	   48512:       48 8d 41 08             lea    0x8(%rcx),%rax
    0.00 :	   48516:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4851a:       eb 9d                   jmp    484b9 <_IO_vfprintf+0x41f9>
    0.00 :	   4851c:       48 8d 0d ed a3 0f 00    lea    0xfa3ed(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   48523:       48 8d 35 ac 27 0f 00    lea    0xf27ac(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   4852a:       48 8d 3d 8f 63 0f 00    lea    0xf638f(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   48531:       ba 42 06 00 00          mov    $0x642,%edx
    0.00 :	   48536:       e8 e5 33 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   4853b:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   48541:       48 8b a5 d8 f8 ff ff    mov    -0x728(%rbp),%rsp
    0.00 :	   48548:       e9 8a e3 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   4854d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48550:       e8 4b b8 02 00          callq  73da0 <__overflow>
    0.00 :	   48555:       83 c0 01                add    $0x1,%eax
    0.00 :	   48558:       0f 85 0f c9 ff ff       jne    44e6d <_IO_vfprintf+0xbad>
    0.00 :	   4855e:       66 90                   xchg   %ax,%ax
    0.00 :	   48560:       e9 6c e3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48565:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48568:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4856b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   48570:       0f 83 4d 01 00 00       jae    486c3 <_IO_vfprintf+0x4403>
    0.00 :	   48576:       89 c2                   mov    %eax,%edx
    0.00 :	   48578:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   4857c:       83 c0 08                add    $0x8,%eax
    0.00 :	   4857f:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48582:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48587:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4858c:       0f b6 32                movzbl (%rdx),%esi
    0.00 :	   4858f:       0f 82 cc c8 ff ff       jb     44e61 <_IO_vfprintf+0xba1>
    0.00 :	   48595:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48598:       e8 03 b8 02 00          callq  73da0 <__overflow>
    0.00 :	   4859d:       83 c0 01                add    $0x1,%eax
    0.00 :	   485a0:       0f 85 c7 c8 ff ff       jne    44e6d <_IO_vfprintf+0xbad>
    0.00 :	   485a6:       e9 26 e3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   485ab:       48 98                   cltq   
    0.00 :	   485ad:       48 83 7c c2 c0 00       cmpq   $0x0,-0x40(%rdx,%rax,8)
    0.00 :	   485b3:       0f 84 e0 fc ff ff       je     48299 <_IO_vfprintf+0x3fd9>
    0.00 :	   485b9:       48 8b 8d 10 fa ff ff    mov    -0x5f0(%rbp),%rcx
    0.00 :	   485c0:       4a 63 04 b9             movslq (%rcx,%r15,4),%rax
    0.00 :	   485c4:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   485c8:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   485cc:       48 29 c4                sub    %rax,%rsp
    0.00 :	   485cf:       48 8d 7c 24 0f          lea    0xf(%rsp),%rdi
    0.00 :	   485d4:       48 83 e7 f0             and    $0xfffffffffffffff0,%rdi
    0.00 :	   485d8:       48 89 3b                mov    %rdi,(%rbx)
    0.00 :	   485db:       48 8b 85 18 fa ff ff    mov    -0x5e8(%rbp),%rax
    0.00 :	   485e2:       48 8b b5 50 f8 ff ff    mov    -0x7b0(%rbp),%rsi
    0.00 :	   485e9:       4a 63 14 b8             movslq (%rax,%r15,4),%rdx
    0.00 :	   485ed:       48 8b 05 04 a8 32 00    mov    0x32a804(%rip),%rax        # 372df8 <__printf_va_arg_table>
    0.00 :	   485f4:       ff 54 d0 c0             callq  *-0x40(%rax,%rdx,8)
    0.00 :	   485f8:       e9 7b eb ff ff          jmpq   47178 <_IO_vfprintf+0x2eb8>
    0.00 :	   485fd:       0f b6 85 73 fa ff ff    movzbl -0x58d(%rbp),%eax
    0.00 :	   48604:       8b 95 24 f8 ff ff       mov    -0x7dc(%rbp),%edx
    0.00 :	   4860a:       83 e8 20                sub    $0x20,%eax
    0.00 :	   4860d:       3c 5a                   cmp    $0x5a,%al
    0.00 :	   4860f:       77 21                   ja     48632 <_IO_vfprintf+0x4372>
    0.00 :	   48611:       0f be 85 73 fa ff ff    movsbl -0x58d(%rbp),%eax
    0.00 :	   48618:       48 8d 15 61 c8 0e 00    lea    0xec861(%rip),%rdx        # 134e80 <jump_table.14533>
    0.00 :	   4861f:       83 e8 20                sub    $0x20,%eax
    0.00 :	   48622:       48 98                   cltq   
    0.00 :	   48624:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	   48628:       48 8d 05 d1 c4 0e 00    lea    0xec4d1(%rip),%rax        # 134b00 <step4_jumps.14755>
    0.00 :	   4862f:       8b 14 90                mov    (%rax,%rdx,4),%edx
    0.00 :	   48632:       0f b6 85 f8 f8 ff ff    movzbl -0x708(%rbp),%eax
    0.00 :	   48639:       0f b6 bd f7 f8 ff ff    movzbl -0x709(%rbp),%edi
    0.00 :	   48640:       0f b6 8d f9 f8 ff ff    movzbl -0x707(%rbp),%ecx
    0.00 :	   48647:       0f b6 9d fa f8 ff ff    movzbl -0x706(%rbp),%ebx
    0.00 :	   4864e:       89 85 44 fa ff ff       mov    %eax,-0x5bc(%rbp)
    0.00 :	   48654:       0f b6 85 fc f8 ff ff    movzbl -0x704(%rbp),%eax
    0.00 :	   4865b:       89 bd 40 fa ff ff       mov    %edi,-0x5c0(%rbp)
    0.00 :	   48661:       0f b6 bd fb f8 ff ff    movzbl -0x705(%rbp),%edi
    0.00 :	   48668:       89 8d 4c fa ff ff       mov    %ecx,-0x5b4(%rbp)
    0.00 :	   4866e:       89 9d 50 fa ff ff       mov    %ebx,-0x5b0(%rbp)
    0.00 :	   48674:       0f b6 8d fd f8 ff ff    movzbl -0x703(%rbp),%ecx
    0.00 :	   4867b:       0f b6 9d fe f8 ff ff    movzbl -0x702(%rbp),%ebx
    0.00 :	   48682:       89 85 58 fa ff ff       mov    %eax,-0x5a8(%rbp)
    0.00 :	   48688:       0f b6 85 00 f9 ff ff    movzbl -0x700(%rbp),%eax
    0.00 :	   4868f:       89 bd 54 fa ff ff       mov    %edi,-0x5ac(%rbp)
    0.00 :	   48695:       0f b6 bd ff f8 ff ff    movzbl -0x701(%rbp),%edi
    0.00 :	   4869c:       89 8d 5c fa ff ff       mov    %ecx,-0x5a4(%rbp)
    0.00 :	   486a2:       89 9d 60 fa ff ff       mov    %ebx,-0x5a0(%rbp)
    0.00 :	   486a8:       88 85 72 fa ff ff       mov    %al,-0x58e(%rbp)
    0.00 :	   486ae:       48 63 c2                movslq %edx,%rax
    0.00 :	   486b1:       48 8d 15 22 d6 ff ff    lea    -0x29de(%rip),%rdx        # 45cda <_IO_vfprintf+0x1a1a>
    0.00 :	   486b8:       89 bd 6c fa ff ff       mov    %edi,-0x594(%rbp)
    0.00 :	   486be:       48 01 c2                add    %rax,%rdx
    0.00 :	   486c1:       ff e2                   jmpq   *%rdx
    0.00 :	   486c3:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   486c7:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   486cb:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   486cf:       e9 ae fe ff ff          jmpq   48582 <_IO_vfprintf+0x42c2>
    0.00 :	   486d4:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   486d9:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   486de:       73 34                   jae    48714 <_IO_vfprintf+0x4454>
    0.00 :	   486e0:       c6 00 49                movb   $0x49,(%rax)
    0.00 :	   486e3:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   486e7:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   486ec:       83 c3 01                add    $0x1,%ebx
    0.00 :	   486ef:       e9 ac ca ff ff          jmpq   451a0 <_IO_vfprintf+0xee0>
    0.00 :	   486f4:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   486f9:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   486fe:       73 2b                   jae    4872b <_IO_vfprintf+0x446b>
    0.00 :	   48700:       c6 00 30                movb   $0x30,(%rax)
    0.00 :	   48703:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48707:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4870c:       83 c3 01                add    $0x1,%ebx
    0.00 :	   4870f:       e9 7b ca ff ff          jmpq   4518f <_IO_vfprintf+0xecf>
    0.00 :	   48714:       be 49 00 00 00          mov    $0x49,%esi
    0.00 :	   48719:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4871c:       e8 7f b6 02 00          callq  73da0 <__overflow>
    0.00 :	   48721:       83 c0 01                add    $0x1,%eax
    0.00 :	   48724:       75 c6                   jne    486ec <_IO_vfprintf+0x442c>
    0.00 :	   48726:       e9 a6 e1 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4872b:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   48730:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48733:       e8 68 b6 02 00          callq  73da0 <__overflow>
    0.00 :	   48738:       83 c0 01                add    $0x1,%eax
    0.00 :	   4873b:       75 cf                   jne    4870c <_IO_vfprintf+0x444c>
    0.00 :	   4873d:       e9 8f e1 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48742:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48747:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4874c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   48750:       73 46                   jae    48798 <_IO_vfprintf+0x44d8>
    0.00 :	   48752:       c6 00 20                movb   $0x20,(%rax)
    0.00 :	   48755:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48759:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4875e:       48 8b bd d8 fa ff ff    mov    -0x528(%rbp),%rdi
    0.00 :	   48765:       83 c3 01                add    $0x1,%ebx
    0.00 :	   48768:       0f b6 47 0c             movzbl 0xc(%rdi),%eax
    0.00 :	   4876c:       e9 05 ca ff ff          jmpq   45176 <_IO_vfprintf+0xeb6>
    0.00 :	   48771:       41 8b 46 04             mov    0x4(%r14),%eax
    0.00 :	   48775:       3d b0 00 00 00          cmp    $0xb0,%eax
    0.00 :	   4877a:       73 33                   jae    487af <_IO_vfprintf+0x44ef>
    0.00 :	   4877c:       89 c2                   mov    %eax,%edx
    0.00 :	   4877e:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48782:       83 c0 10                add    $0x10,%eax
    0.00 :	   48785:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	   48789:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4878c:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
    0.00 :	   48793:       e9 85 f7 ff ff          jmpq   47f1d <_IO_vfprintf+0x3c5d>
    0.00 :	   48798:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   4879d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   487a0:       e8 fb b5 02 00          callq  73da0 <__overflow>
    0.00 :	   487a5:       83 c0 01                add    $0x1,%eax
    0.00 :	   487a8:       75 b4                   jne    4875e <_IO_vfprintf+0x449e>
    0.00 :	   487aa:       e9 22 e1 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   487af:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   487b3:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   487b7:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   487bb:       eb cc                   jmp    48789 <_IO_vfprintf+0x44c9>
    0.00 :	   487bd:       41 8b 46 04             mov    0x4(%r14),%eax
    0.00 :	   487c1:       3d b0 00 00 00          cmp    $0xb0,%eax
    0.00 :	   487c6:       73 47                   jae    4880f <_IO_vfprintf+0x454f>
    0.00 :	   487c8:       89 c2                   mov    %eax,%edx
    0.00 :	   487ca:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   487ce:       83 c0 10                add    $0x10,%eax
    0.00 :	   487d1:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	   487d5:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   487d8:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
    0.00 :	   487df:       e9 42 f9 ff ff          jmpq   48126 <_IO_vfprintf+0x3e66>
    0.00 :	   487e4:       be 23 00 00 00          mov    $0x23,%esi
    0.00 :	   487e9:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   487ec:       e8 af b5 02 00          callq  73da0 <__overflow>
    0.00 :	   487f1:       83 c0 01                add    $0x1,%eax
    0.00 :	   487f4:       0f 84 d7 e0 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   487fa:       48 8b 8d d8 fa ff ff    mov    -0x528(%rbp),%rcx
    0.00 :	   48801:       bb 02 00 00 00          mov    $0x2,%ebx
    0.00 :	   48806:       0f b6 41 0c             movzbl 0xc(%rcx),%eax
    0.00 :	   4880a:       e9 4a c9 ff ff          jmpq   45159 <_IO_vfprintf+0xe99>
    0.00 :	   4880f:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48813:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48817:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4881b:       eb b8                   jmp    487d5 <_IO_vfprintf+0x4515>
    0.00 :	   4881d:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48821:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48825:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48829:       e9 9a f9 ff ff          jmpq   481c8 <_IO_vfprintf+0x3f08>
    0.00 :	   4882e:       be 27 00 00 00          mov    $0x27,%esi
    0.00 :	   48833:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48836:       e8 65 b5 02 00          callq  73da0 <__overflow>
    0.00 :	   4883b:       83 c0 01                add    $0x1,%eax
    0.00 :	   4883e:       0f 85 dc f9 ff ff       jne    48220 <_IO_vfprintf+0x3f60>
    0.00 :	   48844:       e9 88 e0 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48849:       48 8b bd b0 f8 ff ff    mov    -0x750(%rbp),%rdi
    0.00 :	   48850:       e8 5b 83 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   48855:       48 8b bd b0 f8 ff ff    mov    -0x750(%rbp),%rdi
    0.00 :	   4885c:       48 8d 70 01             lea    0x1(%rax),%rsi
    0.00 :	   48860:       e8 4b 6f 0a 00          callq  ef7b0 <__readonly_area>
    0.00 :	   48865:       85 c0                   test   %eax,%eax
    0.00 :	   48867:       89 85 74 f9 ff ff       mov    %eax,-0x68c(%rbp)
    0.00 :	   4886d:       0f 89 9e d0 ff ff       jns    45911 <_IO_vfprintf+0x1651>
    0.00 :	   48873:       48 8d 3d 6e 60 0f 00    lea    0xf606e(%rip),%rdi        # 13e8e8 <__PRETTY_FUNCTION__.11129+0xf0f>
    0.00 :	   4887a:       e8 51 86 02 00          callq  70ed0 <__libc_fatal>
    0.00 :	   4887f:       48 8d 3d 92 60 0f 00    lea    0xf6092(%rip),%rdi        # 13e918 <__PRETTY_FUNCTION__.11129+0xf3f>
    0.00 :	   48886:       e8 45 86 02 00          callq  70ed0 <__libc_fatal>
    0.00 :	   4888b:       be 2b 00 00 00          mov    $0x2b,%esi
    0.00 :	   48890:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48893:       e8 08 b5 02 00          callq  73da0 <__overflow>
    0.00 :	   48898:       83 c0 01                add    $0x1,%eax
    0.00 :	   4889b:       0f 85 a7 ee ff ff       jne    47748 <_IO_vfprintf+0x3488>
    0.00 :	   488a1:       e9 2b e0 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   488a6:       be 25 00 00 00          mov    $0x25,%esi
    0.00 :	   488ab:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   488ae:       66 90                   xchg   %ax,%ax
    0.00 :	   488b0:       e8 eb b4 02 00          callq  73da0 <__overflow>
    0.00 :	   488b5:       83 c0 01                add    $0x1,%eax
    0.00 :	   488b8:       0f 85 83 c8 ff ff       jne    45141 <_IO_vfprintf+0xe81>
    0.00 :	   488be:       66 90                   xchg   %ax,%ax
    0.00 :	   488c0:       e9 0c e0 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   488c5:       48 89 df                mov    %rbx,%rdi
    0.00 :	   488c8:       e8 f3 f2 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   488cd:       85 c0                   test   %eax,%eax
    0.00 :	   488cf:       90                      nop
    0.00 :	   488d0:       0f 85 e5 d0 ff ff       jne    459bb <_IO_vfprintf+0x16fb>
    0.00 :	   488d6:       48 89 df                mov    %rbx,%rdi
    0.00 :	   488d9:       e8 72 5f fd ff          callq  1e850 <malloc@plt>
    0.00 :	   488de:       48 85 c0                test   %rax,%rax
    0.00 :	   488e1:       49 89 c7                mov    %rax,%r15
    0.00 :	   488e4:       0f 84 e7 df ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   488ea:       c7 85 ec f9 ff ff 01    movl   $0x1,-0x614(%rbp)
    0.00 :	   488f1:       00 00 00 
    0.00 :	   488f4:       e9 e0 d0 ff ff          jmpq   459d9 <_IO_vfprintf+0x1719>
    0.00 :	   488f9:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   488fe:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48901:       e8 9a b4 02 00          callq  73da0 <__overflow>
    0.00 :	   48906:       83 c0 01                add    $0x1,%eax
    0.00 :	   48909:       0f 85 5a ec ff ff       jne    47569 <_IO_vfprintf+0x32a9>
    0.00 :	   4890f:       90                      nop
    0.00 :	   48910:       e9 bc df ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48915:       0f 1f 00                nopl   (%rax)
    0.00 :	   48918:       e8 a3 f2 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   4891d:       85 c0                   test   %eax,%eax
    0.00 :	   4891f:       90                      nop
    0.00 :	   48920:       0f 85 55 fa ff ff       jne    4837b <_IO_vfprintf+0x40bb>
    0.00 :	   48926:       48 8b bd e8 f8 ff ff    mov    -0x718(%rbp),%rdi
    0.00 :	   4892d:       e8 1e 5f fd ff          callq  1e850 <malloc@plt>
    0.00 :	   48932:       48 85 c0                test   %rax,%rax
    0.00 :	   48935:       49 89 c7                mov    %rax,%r15
    0.00 :	   48938:       0f 84 93 df ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4893e:       c7 85 ec f9 ff ff 01    movl   $0x1,-0x614(%rbp)
    0.00 :	   48945:       00 00 00 
    0.00 :	   48948:       e9 53 fa ff ff          jmpq   483a0 <_IO_vfprintf+0x40e0>
    0.00 :	   4894d:       48 8d 0d bc 9f 0f 00    lea    0xf9fbc(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   48954:       48 8d 35 7b 23 0f 00    lea    0xf237b(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   4895b:       48 8d 3d 85 23 0f 00    lea    0xf2385(%rip),%rdi        # 13ace7 <__PRETTY_FUNCTION__.9779+0x9b>
    0.00 :	   48962:       ba 42 06 00 00          mov    $0x642,%edx
    0.00 :	   48967:       e8 b4 2f fe ff          callq  2b920 <__assert_fail>
    0.00 :	   4896c:       48 8b 95 58 f8 ff ff    mov    -0x7a8(%rbp),%rdx
    0.00 :	   48973:       48 8b 05 be 94 32 00    mov    0x3294be(%rip),%rax        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   4897a:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   48980:       c7 04 02 22 00 00 00    movl   $0x22,(%rdx,%rax,1)
    0.00 :	   48987:       e9 4b df ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   4898c:       41 8b 06                mov    (%r14),%eax
    0.00 :	   4898f:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48992:       0f 83 c4 00 00 00       jae    48a5c <_IO_vfprintf+0x479c>
    0.00 :	   48998:       89 c2                   mov    %eax,%edx
    0.00 :	   4899a:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   4899e:       83 c0 08                add    $0x8,%eax
    0.00 :	   489a1:       41 89 06                mov    %eax,(%r14)
    0.00 :	   489a4:       4c 8b 3a                mov    (%rdx),%r15
    0.00 :	   489a7:       e9 61 c5 ff ff          jmpq   44f0d <_IO_vfprintf+0xc4d>
    0.00 :	   489ac:       48 89 9d 80 f9 ff ff    mov    %rbx,-0x680(%rbp)
    0.00 :	   489b3:       48 89 8d 48 f9 ff ff    mov    %rcx,-0x6b8(%rbp)
    0.00 :	   489ba:       48 c7 85 e0 fa ff ff    movq   $0x0,-0x520(%rbp)
    0.00 :	   489c1:       00 00 00 00 
    0.00 :	   489c5:       48 c7 85 00 fa ff ff    movq   $0x0,-0x600(%rbp)
    0.00 :	   489cc:       00 00 00 00 
    0.00 :	   489d0:       48 c7 85 f8 f9 ff ff    movq   $0x0,-0x608(%rbp)
    0.00 :	   489d7:       00 00 00 00 
    0.00 :	   489db:       e9 dd e5 ff ff          jmpq   46fbd <_IO_vfprintf+0x2cfd>
    0.00 :	   489e0:       48 89 bd 48 f9 ff ff    mov    %rdi,-0x6b8(%rbp)
    0.00 :	   489e7:       c7 85 ec fa ff ff ff    movl   $0xffffffff,-0x514(%rbp)
    0.00 :	   489ee:       ff ff ff 
    0.00 :	   489f1:       ba ff ff ff ff          mov    $0xffffffff,%edx
    0.00 :	   489f6:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	   489fb:       e9 41 cc ff ff          jmpq   45641 <_IO_vfprintf+0x1381>
    0.00 :	   48a00:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48a04:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48a08:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48a0c:       e9 dd ee ff ff          jmpq   478ee <_IO_vfprintf+0x362e>
    0.00 :	   48a11:       48 8b 05 70 93 32 00    mov    0x329370(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   48a18:       48 8b 8d 58 f8 ff ff    mov    -0x7a8(%rbp),%rcx
    0.00 :	   48a1f:       48 8b 04 01             mov    (%rcx,%rax,1),%rax
    0.00 :	   48a23:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	   48a27:       48 8b 78 48             mov    0x48(%rax),%rdi
    0.00 :	   48a2b:       48 89 bd 38 f9 ff ff    mov    %rdi,-0x6c8(%rbp)
    0.00 :	   48a32:       48 8b 40 50             mov    0x50(%rax),%rax
    0.00 :	   48a36:       48 89 85 40 f9 ff ff    mov    %rax,-0x6c0(%rbp)
    0.00 :	   48a3d:       0f b6 00                movzbl (%rax),%eax
    0.00 :	   48a40:       84 c0                   test   %al,%al
    0.00 :	   48a42:       74 08                   je     48a4c <_IO_vfprintf+0x478c>
    0.00 :	   48a44:       3c 7f                   cmp    $0x7f,%al
    0.00 :	   48a46:       0f 85 d4 d2 ff ff       jne    45d20 <_IO_vfprintf+0x1a60>
    0.00 :	   48a4c:       48 c7 85 40 f9 ff ff    movq   $0x0,-0x6c0(%rbp)
    0.00 :	   48a53:       00 00 00 00 
    0.00 :	   48a57:       e9 c4 d2 ff ff          jmpq   45d20 <_IO_vfprintf+0x1a60>
    0.00 :	   48a5c:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48a60:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48a64:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48a68:       e9 37 ff ff ff          jmpq   489a4 <_IO_vfprintf+0x46e4>
    0.00 :	   48a6d:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48a71:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48a75:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48a79:       e9 98 ef ff ff          jmpq   47a16 <_IO_vfprintf+0x3756>
    0.00 :	   48a7e:       8b 85 5c fa ff ff       mov    -0x5a4(%rbp),%eax
    0.00 :	   48a84:       85 c0                   test   %eax,%eax
    0.00 :	   48a86:       0f 84 19 01 00 00       je     48ba5 <_IO_vfprintf+0x48e5>
    0.00 :	   48a8c:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48a8f:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48a92:       0f 83 fc 00 00 00       jae    48b94 <_IO_vfprintf+0x48d4>
    0.00 :	   48a98:       89 c2                   mov    %eax,%edx
    0.00 :	   48a9a:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48a9e:       83 c0 08                add    $0x8,%eax
    0.00 :	   48aa1:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48aa4:       0f b6 12                movzbl (%rdx),%edx
    0.00 :	   48aa7:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   48aae:       00 00 00 
    0.00 :	   48ab1:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   48ab8:       00 00 00 
    0.00 :	   48abb:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   48ac2:       00 00 00 
    0.00 :	   48ac5:       48 89 95 08 f9 ff ff    mov    %rdx,-0x6f8(%rbp)
    0.00 :	   48acc:       e9 42 d4 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   48ad1:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   48ad4:       e8 d7 80 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   48ad9:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   48ae0:       00 00 00 
    0.00 :	   48ae3:       48 89 c3                mov    %rax,%rbx
    0.00 :	   48ae6:       89 85 88 fa ff ff       mov    %eax,-0x578(%rbp)
    0.00 :	   48aec:       e9 b8 c4 ff ff          jmpq   44fa9 <_IO_vfprintf+0xce9>
    0.00 :	   48af1:       48 8d bd 78 ff ff ff    lea    -0x88(%rbp),%rdi
    0.00 :	   48af8:       48 8b 8d 30 f8 ff ff    mov    -0x7d0(%rbp),%rcx
    0.00 :	   48aff:       31 d2                   xor    %edx,%edx
    0.00 :	   48b01:       48 89 bd 80 f8 ff ff    mov    %rdi,-0x780(%rbp)
    0.00 :	   48b08:       48 89 fe                mov    %rdi,%rsi
    0.00 :	   48b0b:       31 ff                   xor    %edi,%edi
    0.00 :	   48b0d:       e8 5e 47 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   48b12:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   48b16:       48 89 c3                mov    %rax,%rbx
    0.00 :	   48b19:       0f 84 b2 dd ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48b1f:       44 8b 8d 60 ff ff ff    mov    -0xa0(%rbp),%r9d
    0.00 :	   48b26:       45 85 c9                test   %r9d,%r9d
    0.00 :	   48b29:       0f 85 ff 00 00 00       jne    48c2e <_IO_vfprintf+0x496e>
    0.00 :	   48b2f:       48 8d 40 01             lea    0x1(%rax),%rax
    0.00 :	   48b33:       4c 89 bd 78 ff ff ff    mov    %r15,-0x88(%rbp)
    0.00 :	   48b3a:       48 3d 00 10 00 00       cmp    $0x1000,%rax
    0.00 :	   48b40:       48 89 85 28 f9 ff ff    mov    %rax,-0x6d8(%rbp)
    0.00 :	   48b47:       0f 87 aa 00 00 00       ja     48bf7 <_IO_vfprintf+0x4937>
    0.00 :	   48b4d:       48 8b 85 28 f9 ff ff    mov    -0x6d8(%rbp),%rax
    0.00 :	   48b54:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   48b5b:       00 00 00 
    0.00 :	   48b5e:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	   48b62:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   48b66:       48 29 c4                sub    %rax,%rsp
    0.00 :	   48b69:       4c 8d 7c 24 0f          lea    0xf(%rsp),%r15
    0.00 :	   48b6e:       49 83 e7 f0             and    $0xfffffffffffffff0,%r15
    0.00 :	   48b72:       48 8b 8d 30 f8 ff ff    mov    -0x7d0(%rbp),%rcx
    0.00 :	   48b79:       48 8b 95 28 f9 ff ff    mov    -0x6d8(%rbp),%rdx
    0.00 :	   48b80:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   48b83:       48 8b b5 80 f8 ff ff    mov    -0x780(%rbp),%rsi
    0.00 :	   48b8a:       e8 e1 46 04 00          callq  8d270 <wcsrtombs>
    0.00 :	   48b8f:       e9 0f c4 ff ff          jmpq   44fa3 <_IO_vfprintf+0xce3>
    0.00 :	   48b94:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48b98:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48b9c:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48ba0:       e9 ff fe ff ff          jmpq   48aa4 <_IO_vfprintf+0x47e4>
    0.00 :	   48ba5:       8b 85 58 fa ff ff       mov    -0x5a8(%rbp),%eax
    0.00 :	   48bab:       85 c0                   test   %eax,%eax
    0.00 :	   48bad:       0f 85 ab 00 00 00       jne    48c5e <_IO_vfprintf+0x499e>
    0.00 :	   48bb3:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48bb6:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48bb9:       0f 83 8e 00 00 00       jae    48c4d <_IO_vfprintf+0x498d>
    0.00 :	   48bbf:       89 c2                   mov    %eax,%edx
    0.00 :	   48bc1:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48bc5:       83 c0 08                add    $0x8,%eax
    0.00 :	   48bc8:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48bcb:       8b 12                   mov    (%rdx),%edx
    0.00 :	   48bcd:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   48bd4:       00 00 00 
    0.00 :	   48bd7:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   48bde:       00 00 00 
    0.00 :	   48be1:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   48be8:       00 00 00 
    0.00 :	   48beb:       48 89 95 08 f9 ff ff    mov    %rdx,-0x6f8(%rbp)
    0.00 :	   48bf2:       e9 1c d3 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   48bf7:       48 89 c7                mov    %rax,%rdi
    0.00 :	   48bfa:       e8 c1 ef 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   48bff:       85 c0                   test   %eax,%eax
    0.00 :	   48c01:       0f 85 46 ff ff ff       jne    48b4d <_IO_vfprintf+0x488d>
    0.00 :	   48c07:       48 8b bd 28 f9 ff ff    mov    -0x6d8(%rbp),%rdi
    0.00 :	   48c0e:       e8 3d 5c fd ff          callq  1e850 <malloc@plt>
    0.00 :	   48c13:       48 85 c0                test   %rax,%rax
    0.00 :	   48c16:       49 89 c7                mov    %rax,%r15
    0.00 :	   48c19:       0f 84 b2 dc ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48c1f:       c7 85 74 fa ff ff 01    movl   $0x1,-0x58c(%rbp)
    0.00 :	   48c26:       00 00 00 
    0.00 :	   48c29:       e9 44 ff ff ff          jmpq   48b72 <_IO_vfprintf+0x48b2>
    0.00 :	   48c2e:       48 8d 0d db 9c 0f 00    lea    0xf9cdb(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   48c35:       48 8d 35 9a 20 0f 00    lea    0xf209a(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   48c3c:       48 8d 3d a4 20 0f 00    lea    0xf20a4(%rip),%rdi        # 13ace7 <__PRETTY_FUNCTION__.9779+0x9b>
    0.00 :	   48c43:       ba b6 07 00 00          mov    $0x7b6,%edx
    0.00 :	   48c48:       e8 d3 2c fe ff          callq  2b920 <__assert_fail>
    0.00 :	   48c4d:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48c51:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48c55:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48c59:       e9 6d ff ff ff          jmpq   48bcb <_IO_vfprintf+0x490b>
    0.00 :	   48c5e:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48c61:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48c64:       0f 83 85 00 00 00       jae    48cef <_IO_vfprintf+0x4a2f>
    0.00 :	   48c6a:       89 c2                   mov    %eax,%edx
    0.00 :	   48c6c:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48c70:       83 c0 08                add    $0x8,%eax
    0.00 :	   48c73:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48c76:       0f b7 12                movzwl (%rdx),%edx
    0.00 :	   48c79:       c7 85 20 fa ff ff 00    movl   $0x0,-0x5e0(%rbp)
    0.00 :	   48c80:       00 00 00 
    0.00 :	   48c83:       c7 85 44 fa ff ff 00    movl   $0x0,-0x5bc(%rbp)
    0.00 :	   48c8a:       00 00 00 
    0.00 :	   48c8d:       c7 85 4c fa ff ff 00    movl   $0x0,-0x5b4(%rbp)
    0.00 :	   48c94:       00 00 00 
    0.00 :	   48c97:       48 89 95 08 f9 ff ff    mov    %rdx,-0x6f8(%rbp)
    0.00 :	   48c9e:       e9 70 d2 ff ff          jmpq   45f13 <_IO_vfprintf+0x1c53>
    0.00 :	   48ca3:       8b 85 58 fa ff ff       mov    -0x5a8(%rbp),%eax
    0.00 :	   48ca9:       85 c0                   test   %eax,%eax
    0.00 :	   48cab:       75 72                   jne    48d1f <_IO_vfprintf+0x4a5f>
    0.00 :	   48cad:       48 8b 9d 80 f9 ff ff    mov    -0x680(%rbp),%rbx
    0.00 :	   48cb4:       48 8b bd 08 fa ff ff    mov    -0x5f8(%rbp),%rdi
    0.00 :	   48cbb:       48 63 44 13 30          movslq 0x30(%rbx,%rdx,1),%rax
    0.00 :	   48cc0:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   48cc4:       48 63 14 07             movslq (%rdi,%rax,1),%rdx
    0.00 :	   48cc8:       e9 1c d2 ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48ccd:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48cd1:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48cd5:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48cd9:       e9 c5 e6 ff ff          jmpq   473a3 <_IO_vfprintf+0x30e3>
    0.00 :	   48cde:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48ce2:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48ce6:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48cea:       e9 51 ee ff ff          jmpq   47b40 <_IO_vfprintf+0x3880>
    0.00 :	   48cef:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48cf3:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48cf7:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48cfb:       e9 76 ff ff ff          jmpq   48c76 <_IO_vfprintf+0x49b6>
    0.00 :	   48d00:       48 8d 0d 09 9c 0f 00    lea    0xf9c09(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   48d07:       48 8d 35 c8 1f 0f 00    lea    0xf1fc8(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   48d0e:       48 8d 3d ab 5b 0f 00    lea    0xf5bab(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   48d15:       ba 41 06 00 00          mov    $0x641,%edx
    0.00 :	   48d1a:       e8 01 2c fe ff          callq  2b920 <__assert_fail>
    0.00 :	   48d1f:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   48d26:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   48d2d:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   48d32:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   48d36:       48 0f bf 14 03          movswq (%rbx,%rax,1),%rdx
    0.00 :	   48d3b:       e9 a9 d1 ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48d40:       48 8b 8d 58 f8 ff ff    mov    -0x7a8(%rbp),%rcx
    0.00 :	   48d47:       48 8b 15 ea 90 32 00    mov    0x3290ea(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   48d4e:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   48d54:       c7 04 11 22 00 00 00    movl   $0x22,(%rcx,%rdx,1)
    0.00 :	   48d5b:       e9 77 db ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   48d60:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48d65:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   48d6a:       0f 83 92 00 00 00       jae    48e02 <_IO_vfprintf+0x4b42>
    0.00 :	   48d70:       c6 00 30                movb   $0x30,(%rax)
    0.00 :	   48d73:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48d77:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   48d7c:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   48d83:       0f 84 48 db ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48d89:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   48d8e:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   48d93:       73 54                   jae    48de9 <_IO_vfprintf+0x4b29>
    0.00 :	   48d95:       0f b6 95 73 fa ff ff    movzbl -0x58d(%rbp),%edx
    0.00 :	   48d9c:       88 10                   mov    %dl,(%rax)
    0.00 :	   48d9e:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   48da2:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   48da7:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   48dae:       0f 84 1d db ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48db4:       41 83 c5 02             add    $0x2,%r13d
    0.00 :	   48db8:       e9 87 d2 ff ff          jmpq   46044 <_IO_vfprintf+0x1d84>
    0.00 :	   48dbd:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48dc1:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48dc5:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48dc9:       e9 c3 eb ff ff          jmpq   47991 <_IO_vfprintf+0x36d1>
    0.00 :	   48dce:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   48dd3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48dd6:       e8 c5 af 02 00          callq  73da0 <__overflow>
    0.00 :	   48ddb:       83 c0 01                add    $0x1,%eax
    0.00 :	   48dde:       0f 85 be e7 ff ff       jne    475a2 <_IO_vfprintf+0x32e2>
    0.00 :	   48de4:       e9 e8 da ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48de9:       0f b6 b5 73 fa ff ff    movzbl -0x58d(%rbp),%esi
    0.00 :	   48df0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48df3:       e8 a8 af 02 00          callq  73da0 <__overflow>
    0.00 :	   48df8:       83 c0 01                add    $0x1,%eax
    0.00 :	   48dfb:       75 aa                   jne    48da7 <_IO_vfprintf+0x4ae7>
    0.00 :	   48dfd:       e9 cf da ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48e02:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   48e07:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48e0a:       e8 91 af 02 00          callq  73da0 <__overflow>
    0.00 :	   48e0f:       83 c0 01                add    $0x1,%eax
    0.00 :	   48e12:       0f 85 64 ff ff ff       jne    48d7c <_IO_vfprintf+0x4abc>
    0.00 :	   48e18:       e9 b4 da ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48e1d:       8b b5 60 fa ff ff       mov    -0x5a0(%rbp),%esi
    0.00 :	   48e23:       85 f6                   test   %esi,%esi
    0.00 :	   48e25:       74 45                   je     48e6c <_IO_vfprintf+0x4bac>
    0.00 :	   48e27:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48e2a:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48e2d:       73 2f                   jae    48e5e <_IO_vfprintf+0x4b9e>
    0.00 :	   48e2f:       89 c2                   mov    %eax,%edx
    0.00 :	   48e31:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48e35:       83 c0 08                add    $0x8,%eax
    0.00 :	   48e38:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48e3b:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   48e3e:       e9 a6 d0 ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48e43:       be 25 00 00 00          mov    $0x25,%esi
    0.00 :	   48e48:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48e4b:       e8 50 af 02 00          callq  73da0 <__overflow>
    0.00 :	   48e50:       83 c0 01                add    $0x1,%eax
    0.00 :	   48e53:       0f 85 2b d0 ff ff       jne    45e84 <_IO_vfprintf+0x1bc4>
    0.00 :	   48e59:       e9 73 da ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48e5e:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48e62:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48e66:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48e6a:       eb cf                   jmp    48e3b <_IO_vfprintf+0x4b7b>
    0.00 :	   48e6c:       8b 8d 5c fa ff ff       mov    -0x5a4(%rbp),%ecx
    0.00 :	   48e72:       85 c9                   test   %ecx,%ecx
    0.00 :	   48e74:       74 59                   je     48ecf <_IO_vfprintf+0x4c0f>
    0.00 :	   48e76:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48e79:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48e7c:       73 43                   jae    48ec1 <_IO_vfprintf+0x4c01>
    0.00 :	   48e7e:       89 c2                   mov    %eax,%edx
    0.00 :	   48e80:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48e84:       83 c0 08                add    $0x8,%eax
    0.00 :	   48e87:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48e8a:       48 0f be 12             movsbq (%rdx),%rdx
    0.00 :	   48e8e:       e9 56 d0 ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48e93:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48e97:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48e9b:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48e9f:       e9 3f eb ff ff          jmpq   479e3 <_IO_vfprintf+0x3723>
    0.00 :	   48ea4:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48ea7:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48eaa:       73 49                   jae    48ef5 <_IO_vfprintf+0x4c35>
    0.00 :	   48eac:       89 c2                   mov    %eax,%edx
    0.00 :	   48eae:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48eb2:       83 c0 08                add    $0x8,%eax
    0.00 :	   48eb5:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48eb8:       48 0f bf 12             movswq (%rdx),%rdx
    0.00 :	   48ebc:       e9 ee da ff ff          jmpq   469af <_IO_vfprintf+0x26ef>
    0.00 :	   48ec1:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48ec5:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48ec9:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48ecd:       eb bb                   jmp    48e8a <_IO_vfprintf+0x4bca>
    0.00 :	   48ecf:       8b 95 58 fa ff ff       mov    -0x5a8(%rbp),%edx
    0.00 :	   48ed5:       85 d2                   test   %edx,%edx
    0.00 :	   48ed7:       75 38                   jne    48f11 <_IO_vfprintf+0x4c51>
    0.00 :	   48ed9:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48edc:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48edf:       73 22                   jae    48f03 <_IO_vfprintf+0x4c43>
    0.00 :	   48ee1:       89 c2                   mov    %eax,%edx
    0.00 :	   48ee3:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48ee7:       83 c0 08                add    $0x8,%eax
    0.00 :	   48eea:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48eed:       48 63 12                movslq (%rdx),%rdx
    0.00 :	   48ef0:       e9 f4 cf ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48ef5:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48ef9:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48efd:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48f01:       eb b5                   jmp    48eb8 <_IO_vfprintf+0x4bf8>
    0.00 :	   48f03:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   48f07:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   48f0b:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   48f0f:       eb dc                   jmp    48eed <_IO_vfprintf+0x4c2d>
    0.00 :	   48f11:       41 8b 06                mov    (%r14),%eax
    0.00 :	   48f14:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   48f17:       0f 83 19 02 00 00       jae    49136 <_IO_vfprintf+0x4e76>
    0.00 :	   48f1d:       89 c2                   mov    %eax,%edx
    0.00 :	   48f1f:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   48f23:       83 c0 08                add    $0x8,%eax
    0.00 :	   48f26:       41 89 06                mov    %eax,(%r14)
    0.00 :	   48f29:       48 0f bf 12             movswq (%rdx),%rdx
    0.00 :	   48f2d:       e9 b7 cf ff ff          jmpq   45ee9 <_IO_vfprintf+0x1c29>
    0.00 :	   48f32:       be 2d 00 00 00          mov    $0x2d,%esi
    0.00 :	   48f37:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48f3a:       e8 61 ae 02 00          callq  73da0 <__overflow>
    0.00 :	   48f3f:       83 c0 01                add    $0x1,%eax
    0.00 :	   48f42:       0f 85 21 e6 ff ff       jne    47569 <_IO_vfprintf+0x32a9>
    0.00 :	   48f48:       e9 84 d9 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48f4d:       48 8b 05 34 8e 32 00    mov    0x328e34(%rip),%rax        # 371d88 <_DYNAMIC+0x228>
    0.00 :	   48f54:       48 8b bd 58 f8 ff ff    mov    -0x7a8(%rbp),%rdi
    0.00 :	   48f5b:       48 8b 04 07             mov    (%rdi,%rax,1),%rax
    0.00 :	   48f5f:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	   48f63:       48 8b 50 48             mov    0x48(%rax),%rdx
    0.00 :	   48f67:       48 89 95 38 f9 ff ff    mov    %rdx,-0x6c8(%rbp)
    0.00 :	   48f6e:       48 8b 40 50             mov    0x50(%rax),%rax
    0.00 :	   48f72:       48 89 85 40 f9 ff ff    mov    %rax,-0x6c0(%rbp)
    0.00 :	   48f79:       0f b6 00                movzbl (%rax),%eax
    0.00 :	   48f7c:       84 c0                   test   %al,%al
    0.00 :	   48f7e:       74 0d                   je     48f8d <_IO_vfprintf+0x4ccd>
    0.00 :	   48f80:       3c 7f                   cmp    $0x7f,%al
    0.00 :	   48f82:       74 09                   je     48f8d <_IO_vfprintf+0x4ccd>
    0.00 :	   48f84:       80 3a 00                cmpb   $0x0,(%rdx)
    0.00 :	   48f87:       0f 85 51 c3 ff ff       jne    452de <_IO_vfprintf+0x101e>
    0.00 :	   48f8d:       48 c7 85 40 f9 ff ff    movq   $0x0,-0x6c0(%rbp)
    0.00 :	   48f94:       00 00 00 00 
    0.00 :	   48f98:       e9 41 c3 ff ff          jmpq   452de <_IO_vfprintf+0x101e>
    0.00 :	   48f9d:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   48fa0:       e8 1b ec 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   48fa5:       85 c0                   test   %eax,%eax
    0.00 :	   48fa7:       0f 85 a5 c5 ff ff       jne    45552 <_IO_vfprintf+0x1292>
    0.00 :	   48fad:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   48fb0:       e8 9b 58 fd ff          callq  1e850 <malloc@plt>
    0.00 :	   48fb5:       48 85 c0                test   %rax,%rax
    0.00 :	   48fb8:       48 89 85 58 f9 ff ff    mov    %rax,-0x6a8(%rbp)
    0.00 :	   48fbf:       0f 84 0c d9 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48fc5:       4c 03 bd 58 f9 ff ff    add    -0x6a8(%rbp),%r15
    0.00 :	   48fcc:       48 8b 8d 48 f9 ff ff    mov    -0x6b8(%rbp),%rcx
    0.00 :	   48fd3:       4c 89 bd 60 f9 ff ff    mov    %r15,-0x6a0(%rbp)
    0.00 :	   48fda:       0f b6 19                movzbl (%rcx),%ebx
    0.00 :	   48fdd:       e9 8e c5 ff ff          jmpq   45570 <_IO_vfprintf+0x12b0>
    0.00 :	   48fe2:       be 25 00 00 00          mov    $0x25,%esi
    0.00 :	   48fe7:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   48fea:       e8 b1 ad 02 00          callq  73da0 <__overflow>
    0.00 :	   48fef:       83 c0 01                add    $0x1,%eax
    0.00 :	   48ff2:       0f 85 78 d9 ff ff       jne    46970 <_IO_vfprintf+0x26b0>
    0.00 :	   48ff8:       e9 d4 d8 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   48ffd:       be 2b 00 00 00          mov    $0x2b,%esi
    0.00 :	   49002:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49005:       e8 96 ad 02 00          callq  73da0 <__overflow>
    0.00 :	   4900a:       83 c0 01                add    $0x1,%eax
    0.00 :	   4900d:       0f 85 8f e5 ff ff       jne    475a2 <_IO_vfprintf+0x32e2>
    0.00 :	   49013:       e9 b9 d8 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49018:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4901d:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   49022:       0f 83 d6 00 00 00       jae    490fe <_IO_vfprintf+0x4e3e>
    0.00 :	   49028:       c6 00 30                movb   $0x30,(%rax)
    0.00 :	   4902b:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4902f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   49034:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   4903b:       0f 84 90 d8 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49041:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   49046:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4904b:       0f 83 90 00 00 00       jae    490e1 <_IO_vfprintf+0x4e21>
    0.00 :	   49051:       0f b6 95 eb f9 ff ff    movzbl -0x615(%rbp),%edx
    0.00 :	   49058:       88 10                   mov    %dl,(%rax)
    0.00 :	   4905a:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4905e:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   49063:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   4906a:       0f 84 61 d8 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49070:       41 83 c5 02             add    $0x2,%r13d
    0.00 :	   49074:       e9 4e d5 ff ff          jmpq   465c7 <_IO_vfprintf+0x2307>
    0.00 :	   49079:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4907e:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   49083:       0f 83 db 00 00 00       jae    49164 <_IO_vfprintf+0x4ea4>
    0.00 :	   49089:       c6 00 30                movb   $0x30,(%rax)
    0.00 :	   4908c:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   49090:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   49095:       41 81 fd ff ff ff 7f    cmp    $0x7fffffff,%r13d
    0.00 :	   4909c:       0f 84 2f d8 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   490a2:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   490a7:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   490ac:       0f 83 95 00 00 00       jae    49147 <_IO_vfprintf+0x4e87>
    0.00 :	   490b2:       0f b6 95 eb f9 ff ff    movzbl -0x615(%rbp),%edx
    0.00 :	   490b9:       88 10                   mov    %dl,(%rax)
    0.00 :	   490bb:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   490bf:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   490c4:       41 81 fd fe ff ff 7f    cmp    $0x7ffffffe,%r13d
    0.00 :	   490cb:       0f 84 00 d8 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   490d1:       41 83 c5 02             add    $0x2,%r13d
    0.00 :	   490d5:       83 ad b8 fa ff ff 02    subl   $0x2,-0x548(%rbp)
    0.00 :	   490dc:       e9 1a da ff ff          jmpq   46afb <_IO_vfprintf+0x283b>
    0.00 :	   490e1:       0f b6 b5 eb f9 ff ff    movzbl -0x615(%rbp),%esi
    0.00 :	   490e8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   490eb:       e8 b0 ac 02 00          callq  73da0 <__overflow>
    0.00 :	   490f0:       83 c0 01                add    $0x1,%eax
    0.00 :	   490f3:       0f 85 6a ff ff ff       jne    49063 <_IO_vfprintf+0x4da3>
    0.00 :	   490f9:       e9 d3 d7 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   490fe:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   49103:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49106:       e8 95 ac 02 00          callq  73da0 <__overflow>
    0.00 :	   4910b:       83 c0 01                add    $0x1,%eax
    0.00 :	   4910e:       66 90                   xchg   %ax,%ax
    0.00 :	   49110:       0f 85 1e ff ff ff       jne    49034 <_IO_vfprintf+0x4d74>
    0.00 :	   49116:       e9 b6 d7 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4911b:       be 2d 00 00 00          mov    $0x2d,%esi
    0.00 :	   49120:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49123:       e8 78 ac 02 00          callq  73da0 <__overflow>
    0.00 :	   49128:       83 c0 01                add    $0x1,%eax
    0.00 :	   4912b:       0f 85 ce e1 ff ff       jne    472ff <_IO_vfprintf+0x303f>
    0.00 :	   49131:       e9 9b d7 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49136:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   4913a:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4913e:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   49142:       e9 e2 fd ff ff          jmpq   48f29 <_IO_vfprintf+0x4c69>
    0.00 :	   49147:       0f b6 b5 eb f9 ff ff    movzbl -0x615(%rbp),%esi
    0.00 :	   4914e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49151:       e8 4a ac 02 00          callq  73da0 <__overflow>
    0.00 :	   49156:       83 c0 01                add    $0x1,%eax
    0.00 :	   49159:       0f 85 65 ff ff ff       jne    490c4 <_IO_vfprintf+0x4e04>
    0.00 :	   4915f:       e9 6d d7 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49164:       be 30 00 00 00          mov    $0x30,%esi
    0.00 :	   49169:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4916c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   49170:       e8 2b ac 02 00          callq  73da0 <__overflow>
    0.00 :	   49175:       83 c0 01                add    $0x1,%eax
    0.00 :	   49178:       0f 85 17 ff ff ff       jne    49095 <_IO_vfprintf+0x4dd5>
    0.00 :	   4917e:       66 90                   xchg   %ax,%ax
    0.00 :	   49180:       e9 4c d7 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49185:       48 8b bd b0 f8 ff ff    mov    -0x750(%rbp),%rdi
    0.00 :	   4918c:       e8 1f 7a 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   49191:       48 8b bd b0 f8 ff ff    mov    -0x750(%rbp),%rdi
    0.00 :	   49198:       48 8d 70 01             lea    0x1(%rax),%rsi
    0.00 :	   4919c:       e8 0f 66 0a 00          callq  ef7b0 <__readonly_area>
    0.00 :	   491a1:       85 c0                   test   %eax,%eax
    0.00 :	   491a3:       89 85 74 f9 ff ff       mov    %eax,-0x68c(%rbp)
    0.00 :	   491a9:       0f 88 c4 f6 ff ff       js     48873 <_IO_vfprintf+0x45b3>
    0.00 :	   491af:       e9 a9 d1 ff ff          jmpq   4635d <_IO_vfprintf+0x209d>
    0.00 :	   491b4:       4c 8d 3d 85 18 0f 00    lea    0xf1885(%rip),%r15        # 13aa40 <not_available+0x117>
    0.00 :	   491bb:       31 db                   xor    %ebx,%ebx
    0.00 :	   491bd:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   491c4:       00 00 00 
    0.00 :	   491c7:       c7 85 8c fa ff ff 00    movl   $0x0,-0x574(%rbp)
    0.00 :	   491ce:       00 00 00 
    0.00 :	   491d1:       e9 3a c8 ff ff          jmpq   45a10 <_IO_vfprintf+0x1750>
    0.00 :	   491d6:       48 8d 0d 33 97 0f 00    lea    0xf9733(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   491dd:       48 8d 35 f2 1a 0f 00    lea    0xf1af2(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   491e4:       48 8d 3d d5 56 0f 00    lea    0xf56d5(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   491eb:       ba 60 06 00 00          mov    $0x660,%edx
    0.00 :	   491f0:       e8 2b 27 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   491f5:       48 8b bd 58 f9 ff ff    mov    -0x6a8(%rbp),%rdi
    0.00 :	   491fc:       e8 9f 56 fd ff          callq  1e8a0 <free@plt>
    0.00 :	   49201:       e9 98 b6 ff ff          jmpq   4489e <_IO_vfprintf+0x5de>
    0.00 :	   49206:       be 2d 00 00 00          mov    $0x2d,%esi
    0.00 :	   4920b:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4920e:       e8 8d ab 02 00          callq  73da0 <__overflow>
    0.00 :	   49213:       83 c0 01                add    $0x1,%eax
    0.00 :	   49216:       0f 85 2c e5 ff ff       jne    47748 <_IO_vfprintf+0x3488>
    0.00 :	   4921c:       e9 b0 d6 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49221:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   49224:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   49228:       e8 83 79 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   4922d:       c7 85 ec f9 ff ff 00    movl   $0x0,-0x614(%rbp)
    0.00 :	   49234:       00 00 00 
    0.00 :	   49237:       48 89 c3                mov    %rax,%rbx
    0.00 :	   4923a:       89 85 8c fa ff ff       mov    %eax,-0x574(%rbp)
    0.00 :	   49240:       e9 cb c7 ff ff          jmpq   45a10 <_IO_vfprintf+0x1750>
    0.00 :	   49245:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   49248:       e8 63 79 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   4924d:       48 89 c3                mov    %rax,%rbx
    0.00 :	   49250:       e9 8e e2 ff ff          jmpq   474e3 <_IO_vfprintf+0x3223>
    0.00 :	   49255:       48 8d 0d b4 96 0f 00    lea    0xf96b4(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   4925c:       48 8d 35 73 1a 0f 00    lea    0xf1a73(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   49263:       48 8d 3d 26 56 0f 00    lea    0xf5626(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   4926a:       ba 42 06 00 00          mov    $0x642,%edx
    0.00 :	   4926f:       e8 ac 26 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   49274:       44 8b 85 60 fa ff ff    mov    -0x5a0(%rbp),%r8d
    0.00 :	   4927b:       45 85 c0                test   %r8d,%r8d
    0.00 :	   4927e:       0f 84 69 01 00 00       je     493ed <_IO_vfprintf+0x512d>
    0.00 :	   49284:       41 8b 06                mov    (%r14),%eax
    0.00 :	   49287:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4928a:       0f 83 98 00 00 00       jae    49328 <_IO_vfprintf+0x5068>
    0.00 :	   49290:       89 c2                   mov    %eax,%edx
    0.00 :	   49292:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   49296:       83 c0 08                add    $0x8,%eax
    0.00 :	   49299:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4929c:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	   4929f:       49 63 c5                movslq %r13d,%rax
    0.00 :	   492a2:       48 89 02                mov    %rax,(%rdx)
    0.00 :	   492a5:       e9 16 b8 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   492aa:       48 8b b5 28 f8 ff ff    mov    -0x7d8(%rbp),%rsi
    0.00 :	   492b1:       31 c9                   xor    %ecx,%ecx
    0.00 :	   492b3:       48 63 f8                movslq %eax,%rdi
    0.00 :	   492b6:       ba 0a 00 00 00          mov    $0xa,%edx
    0.00 :	   492bb:       e8 10 aa ff ff          callq  43cd0 <_itoa_word>
    0.00 :	   492c0:       48 39 85 28 f8 ff ff    cmp    %rax,-0x7d8(%rbp)
    0.00 :	   492c7:       49 89 c7                mov    %rax,%r15
    0.00 :	   492ca:       77 37                   ja     49303 <_IO_vfprintf+0x5043>
    0.00 :	   492cc:       e9 e1 be ff ff          jmpq   451b2 <_IO_vfprintf+0xef2>
    0.00 :	   492d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   492d8:       88 10                   mov    %dl,(%rax)
    0.00 :	   492da:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   492de:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   492e3:       81 fb ff ff ff 7f       cmp    $0x7fffffff,%ebx
    0.00 :	   492e9:       0f 84 e2 d5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   492ef:       49 83 c7 01             add    $0x1,%r15
    0.00 :	   492f3:       83 c3 01                add    $0x1,%ebx
    0.00 :	   492f6:       4c 39 bd 28 f8 ff ff    cmp    %r15,-0x7d8(%rbp)
    0.00 :	   492fd:       0f 86 af be ff ff       jbe    451b2 <_IO_vfprintf+0xef2>
    0.00 :	   49303:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   49308:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   4930d:       41 0f b6 17             movzbl (%r15),%edx
    0.00 :	   49311:       72 c5                   jb     492d8 <_IO_vfprintf+0x5018>
    0.00 :	   49313:       0f b6 f2                movzbl %dl,%esi
    0.00 :	   49316:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49319:       e8 82 aa 02 00          callq  73da0 <__overflow>
    0.00 :	   4931e:       83 c0 01                add    $0x1,%eax
    0.00 :	   49321:       75 c0                   jne    492e3 <_IO_vfprintf+0x5023>
    0.00 :	   49323:       e9 a9 d5 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49328:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   4932c:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   49330:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   49334:       e9 63 ff ff ff          jmpq   4929c <_IO_vfprintf+0x4fdc>
    0.00 :	   49339:       48 8d 0d d0 95 0f 00    lea    0xf95d0(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   49340:       48 8d 35 8f 19 0f 00    lea    0xf198f(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   49347:       48 8d 3d 42 55 0f 00    lea    0xf5542(%rip),%rdi        # 13e890 <__PRETTY_FUNCTION__.11129+0xeb7>
    0.00 :	   4934e:       ba d0 07 00 00          mov    $0x7d0,%edx
    0.00 :	   49353:       e8 c8 25 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   49358:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   4935d:       49 3b 44 24 30          cmp    0x30(%r12),%rax
    0.00 :	   49362:       73 59                   jae    493bd <_IO_vfprintf+0x50fd>
    0.00 :	   49364:       88 10                   mov    %dl,(%rax)
    0.00 :	   49366:       48 83 c0 01             add    $0x1,%rax
    0.00 :	   4936a:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   4936f:       81 fb ff ff ff 7f       cmp    $0x7fffffff,%ebx
    0.00 :	   49375:       0f 84 56 d5 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4937b:       83 c3 01                add    $0x1,%ebx
    0.00 :	   4937e:       e9 76 ea ff ff          jmpq   47df9 <_IO_vfprintf+0x3b39>
    0.00 :	   49383:       48 8d 0d 86 95 0f 00    lea    0xf9586(%rip),%rcx        # 142910 <__PRETTY_FUNCTION__.14549>
    0.00 :	   4938a:       48 8d 35 45 19 0f 00    lea    0xf1945(%rip),%rsi        # 13acd6 <__PRETTY_FUNCTION__.9779+0x8a>
    0.00 :	   49391:       48 8d 3d 28 55 0f 00    lea    0xf5528(%rip),%rdi        # 13e8c0 <__PRETTY_FUNCTION__.11129+0xee7>
    0.00 :	   49398:       ba b5 07 00 00          mov    $0x7b5,%edx
    0.00 :	   4939d:       e8 7e 25 fe ff          callq  2b920 <__assert_fail>
    0.00 :	   493a2:       be 2b 00 00 00          mov    $0x2b,%esi
    0.00 :	   493a7:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   493aa:       e8 f1 a9 02 00          callq  73da0 <__overflow>
    0.00 :	   493af:       83 c0 01                add    $0x1,%eax
    0.00 :	   493b2:       0f 85 b1 e1 ff ff       jne    47569 <_IO_vfprintf+0x32a9>
    0.00 :	   493b8:       e9 14 d5 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   493bd:       0f b6 f2                movzbl %dl,%esi
    0.00 :	   493c0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   493c3:       e8 d8 a9 02 00          callq  73da0 <__overflow>
    0.00 :	   493c8:       83 c0 01                add    $0x1,%eax
    0.00 :	   493cb:       75 a2                   jne    4936f <_IO_vfprintf+0x50af>
    0.00 :	   493cd:       e9 ff d4 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   493d2:       be 2e 00 00 00          mov    $0x2e,%esi
    0.00 :	   493d7:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   493da:       e8 c1 a9 02 00          callq  73da0 <__overflow>
    0.00 :	   493df:       83 c0 01                add    $0x1,%eax
    0.00 :	   493e2:       0f 85 f6 bd ff ff       jne    451de <_IO_vfprintf+0xf1e>
    0.00 :	   493e8:       e9 e4 d4 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   493ed:       8b bd 5c fa ff ff       mov    -0x5a4(%rbp),%edi
    0.00 :	   493f3:       85 ff                   test   %edi,%edi
    0.00 :	   493f5:       74 2d                   je     49424 <_IO_vfprintf+0x5164>
    0.00 :	   493f7:       41 8b 06                mov    (%r14),%eax
    0.00 :	   493fa:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   493fd:       73 17                   jae    49416 <_IO_vfprintf+0x5156>
    0.00 :	   493ff:       89 c2                   mov    %eax,%edx
    0.00 :	   49401:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   49405:       83 c0 08                add    $0x8,%eax
    0.00 :	   49408:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4940b:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4940e:       44 88 28                mov    %r13b,(%rax)
    0.00 :	   49411:       e9 aa b6 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   49416:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   4941a:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4941e:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   49422:       eb e7                   jmp    4940b <_IO_vfprintf+0x514b>
    0.00 :	   49424:       8b b5 58 fa ff ff       mov    -0x5a8(%rbp),%esi
    0.00 :	   4942a:       85 f6                   test   %esi,%esi
    0.00 :	   4942c:       0f 85 11 02 00 00       jne    49643 <_IO_vfprintf+0x5383>
    0.00 :	   49432:       41 8b 06                mov    (%r14),%eax
    0.00 :	   49435:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   49438:       0f 83 f4 01 00 00       jae    49632 <_IO_vfprintf+0x5372>
    0.00 :	   4943e:       89 c2                   mov    %eax,%edx
    0.00 :	   49440:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   49444:       83 c0 08                add    $0x8,%eax
    0.00 :	   49447:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4944a:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4944d:       44 89 28                mov    %r13d,(%rax)
    0.00 :	   49450:       e9 6b b6 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   49455:       4c 8d 3d e4 15 0f 00    lea    0xf15e4(%rip),%r15        # 13aa40 <not_available+0x117>
    0.00 :	   4945c:       31 db                   xor    %ebx,%ebx
    0.00 :	   4945e:       c7 85 74 fa ff ff 00    movl   $0x0,-0x58c(%rbp)
    0.00 :	   49465:       00 00 00 
    0.00 :	   49468:       c7 85 88 fa ff ff 00    movl   $0x0,-0x578(%rbp)
    0.00 :	   4946f:       00 00 00 
    0.00 :	   49472:       e9 32 bb ff ff          jmpq   44fa9 <_IO_vfprintf+0xce9>
    0.00 :	   49477:       4c 89 ff                mov    %r15,%rdi
    0.00 :	   4947a:       e8 31 77 03 00          callq  80bb0 <__GI_strlen>
    0.00 :	   4947f:       48 89 c3                mov    %rax,%rbx
    0.00 :	   49482:       e9 49 e2 ff ff          jmpq   476d0 <_IO_vfprintf+0x3410>
    0.00 :	   49487:       be 2d 00 00 00          mov    $0x2d,%esi
    0.00 :	   4948c:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4948f:       e8 0c a9 02 00          callq  73da0 <__overflow>
    0.00 :	   49494:       83 c0 01                add    $0x1,%eax
    0.00 :	   49497:       0f 85 05 e1 ff ff       jne    475a2 <_IO_vfprintf+0x32e2>
    0.00 :	   4949d:       e9 2f d4 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   494a2:       8b 85 58 fa ff ff       mov    -0x5a8(%rbp),%eax
    0.00 :	   494a8:       85 c0                   test   %eax,%eax
    0.00 :	   494aa:       75 3e                   jne    494ea <_IO_vfprintf+0x522a>
    0.00 :	   494ac:       48 8b 8d 80 f9 ff ff    mov    -0x680(%rbp),%rcx
    0.00 :	   494b3:       48 8b 9d 08 fa ff ff    mov    -0x5f8(%rbp),%rbx
    0.00 :	   494ba:       48 63 44 11 30          movslq 0x30(%rcx,%rdx,1),%rax
    0.00 :	   494bf:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   494c3:       48 8b 04 03             mov    (%rbx,%rax,1),%rax
    0.00 :	   494c7:       44 89 28                mov    %r13d,(%rax)
    0.00 :	   494ca:       e9 f1 b5 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   494cf:       be 2b 00 00 00          mov    $0x2b,%esi
    0.00 :	   494d4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   494d7:       e8 c4 a8 02 00          callq  73da0 <__overflow>
    0.00 :	   494dc:       83 c0 01                add    $0x1,%eax
    0.00 :	   494df:       0f 85 88 ec ff ff       jne    4816d <_IO_vfprintf+0x3ead>
    0.00 :	   494e5:       e9 e7 d3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   494ea:       48 8b bd 80 f9 ff ff    mov    -0x680(%rbp),%rdi
    0.00 :	   494f1:       48 63 44 17 30          movslq 0x30(%rdi,%rdx,1),%rax
    0.00 :	   494f6:       48 8b 95 08 fa ff ff    mov    -0x5f8(%rbp),%rdx
    0.00 :	   494fd:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	   49501:       48 8b 04 02             mov    (%rdx,%rax,1),%rax
    0.00 :	   49505:       66 44 89 28             mov    %r13w,(%rax)
    0.00 :	   49509:       e9 b2 b5 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   4950e:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   49512:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   49516:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4951a:       e9 3a ed ff ff          jmpq   48259 <_IO_vfprintf+0x3f99>
    0.00 :	   4951f:       41 8b 06                mov    (%r14),%eax
    0.00 :	   49522:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   49525:       73 4e                   jae    49575 <_IO_vfprintf+0x52b5>
    0.00 :	   49527:       89 c2                   mov    %eax,%edx
    0.00 :	   49529:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   4952d:       83 c0 08                add    $0x8,%eax
    0.00 :	   49530:       41 89 06                mov    %eax,(%r14)
    0.00 :	   49533:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   49536:       66 44 89 28             mov    %r13w,(%rax)
    0.00 :	   4953a:       e9 51 b3 ff ff          jmpq   44890 <_IO_vfprintf+0x5d0>
    0.00 :	   4953f:       be 2d 00 00 00          mov    $0x2d,%esi
    0.00 :	   49544:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49547:       e8 54 a8 02 00          callq  73da0 <__overflow>
    0.00 :	   4954c:       83 c0 01                add    $0x1,%eax
    0.00 :	   4954f:       0f 85 0f ea ff ff       jne    47f64 <_IO_vfprintf+0x3ca4>
    0.00 :	   49555:       e9 77 d3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4955a:       be 2b 00 00 00          mov    $0x2b,%esi
    0.00 :	   4955f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   49562:       e8 39 a8 02 00          callq  73da0 <__overflow>
    0.00 :	   49567:       83 c0 01                add    $0x1,%eax
    0.00 :	   4956a:       0f 85 8f dd ff ff       jne    472ff <_IO_vfprintf+0x303f>
    0.00 :	   49570:       e9 5c d3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49575:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   49579:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4957d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   49581:       eb b0                   jmp    49533 <_IO_vfprintf+0x5273>
    0.00 :	   49583:       be 20 00 00 00          mov    $0x20,%esi
    0.00 :	   49588:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   4958b:       e8 10 a8 02 00          callq  73da0 <__overflow>
    0.00 :	   49590:       83 c0 01                add    $0x1,%eax
    0.00 :	   49593:       0f 85 af e1 ff ff       jne    47748 <_IO_vfprintf+0x3488>
    0.00 :	   49599:       e9 33 d3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   4959e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	   495a1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   495a8:       e8 f3 a7 02 00          callq  73da0 <__overflow>
    0.00 :	   495ad:       83 c0 01                add    $0x1,%eax
    0.00 :	   495b0:       0f 85 e4 c2 ff ff       jne    4589a <_IO_vfprintf+0x15da>
    0.00 :	   495b6:       e9 16 d3 ff ff          jmpq   468d1 <_IO_vfprintf+0x2611>
    0.00 :	   495bb:       48 8b 85 58 f8 ff ff    mov    -0x7a8(%rbp),%rax
    0.00 :	   495c2:       48 8b 3d 6f 88 32 00    mov    0x32886f(%rip),%rdi        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   495c9:       41 bd ff ff ff ff       mov    $0xffffffff,%r13d
    0.00 :	   495cf:       c7 04 38 22 00 00 00    movl   $0x22,(%rax,%rdi,1)
    0.00 :	   495d6:       e9 fc d2 ff ff          jmpq   468d7 <_IO_vfprintf+0x2617>
    0.00 :	   495db:       48 89 df                mov    %rbx,%rdi
    0.00 :	   495de:       e8 dd e5 09 00          callq  e7bc0 <__libc_alloca_cutoff>
    0.00 :	   495e3:       85 c0                   test   %eax,%eax
    0.00 :	   495e5:       0f 85 86 be ff ff       jne    45471 <_IO_vfprintf+0x11b1>
    0.00 :	   495eb:       48 89 df                mov    %rbx,%rdi
    0.00 :	   495ee:       e8 5d 52 fd ff          callq  1e850 <malloc@plt>
    0.00 :	   495f3:       48 85 c0                test   %rax,%rax
    0.00 :	   495f6:       48 89 85 58 f9 ff ff    mov    %rax,-0x6a8(%rbp)
    0.00 :	   495fd:       0f 84 ce d2 ff ff       je     468d1 <_IO_vfprintf+0x2611>
    0.00 :	   49603:       48 03 9d 58 f9 ff ff    add    -0x6a8(%rbp),%rbx
    0.00 :	   4960a:       48 89 9d 60 f9 ff ff    mov    %rbx,-0x6a0(%rbp)
    0.00 :	   49611:       e9 79 be ff ff          jmpq   4548f <_IO_vfprintf+0x11cf>
    0.00 :	   49616:       41 8b 06                mov    (%r14),%eax
    0.00 :	   49619:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   4961c:       73 45                   jae    49663 <_IO_vfprintf+0x53a3>
    0.00 :	   4961e:       89 c2                   mov    %eax,%edx
    0.00 :	   49620:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   49624:       83 c0 08                add    $0x8,%eax
    0.00 :	   49627:       41 89 06                mov    %eax,(%r14)
    0.00 :	   4962a:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4962d:       e9 cf cc ff ff          jmpq   46301 <_IO_vfprintf+0x2041>
    0.00 :	   49632:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   49636:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4963a:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4963e:       e9 07 fe ff ff          jmpq   4944a <_IO_vfprintf+0x518a>
    0.00 :	   49643:       41 8b 06                mov    (%r14),%eax
    0.00 :	   49646:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   49649:       73 26                   jae    49671 <_IO_vfprintf+0x53b1>
    0.00 :	   4964b:       89 c2                   mov    %eax,%edx
    0.00 :	   4964d:       49 03 56 10             add    0x10(%r14),%rdx
    0.00 :	   49651:       83 c0 08                add    $0x8,%eax
    0.00 :	   49654:       41 89 06                mov    %eax,(%r14)
    0.00 :	   49657:       48 8b 02                mov    (%rdx),%rax
    0.00 :	   4965a:       66 44 89 28             mov    %r13w,(%rax)
    0.00 :	   4965e:       e9 5d b4 ff ff          jmpq   44ac0 <_IO_vfprintf+0x800>
    0.00 :	   49663:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   49667:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   4966b:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4966f:       eb b9                   jmp    4962a <_IO_vfprintf+0x536a>
    0.00 :	   49671:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	   49675:       48 8d 42 08             lea    0x8(%rdx),%rax
    0.00 :	   49679:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	   4967d:       eb d8                   jmp    49657 <_IO_vfprintf+0x5397>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000078e20 <_int_malloc>:
    0.00 :	   78e20:       41 57                   push   %r15
 ??:0
  100.00 :	   78e22:       41 56                   push   %r14
    0.00 :	   78e24:       41 55                   push   %r13
    0.00 :	   78e26:       41 54                   push   %r12
    0.00 :	   78e28:       55                      push   %rbp
    0.00 :	   78e29:       53                      push   %rbx
    0.00 :	   78e2a:       48 83 ec 78             sub    $0x78,%rsp
    0.00 :	   78e2e:       48 83 fe bf             cmp    $0xffffffffffffffbf,%rsi
    0.00 :	   78e32:       48 89 7c 24 20          mov    %rdi,0x20(%rsp)
    0.00 :	   78e37:       48 89 74 24 18          mov    %rsi,0x18(%rsp)
    0.00 :	   78e3c:       0f 87 bd 09 00 00       ja     797ff <_int_malloc+0x9df>
    0.00 :	   78e42:       48 8b 44 24 18          mov    0x18(%rsp),%rax
    0.00 :	   78e47:       48 c7 44 24 28 20 00    movq   $0x20,0x28(%rsp)
    0.00 :	   78e4e:       00 00 
    0.00 :	   78e50:       48 83 c0 17             add    $0x17,%rax
    0.00 :	   78e54:       48 89 c2                mov    %rax,%rdx
    0.00 :	   78e57:       48 83 e2 f0             and    $0xfffffffffffffff0,%rdx
    0.00 :	   78e5b:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   78e5f:       48 0f 46 54 24 28       cmovbe 0x28(%rsp),%rdx
    0.00 :	   78e65:       48 3b 15 0c b9 2f 00    cmp    0x2fb90c(%rip),%rdx        # 374778 <global_max_fast>
    0.00 :	   78e6c:       48 89 54 24 28          mov    %rdx,0x28(%rsp)
    0.00 :	   78e71:       77 6d                   ja     78ee0 <_int_malloc+0xc0>
    0.00 :	   78e73:       8b 44 24 28             mov    0x28(%rsp),%eax
    0.00 :	   78e77:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   78e7c:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   78e81:       c1 e8 04                shr    $0x4,%eax
    0.00 :	   78e84:       8d 50 fe                lea    -0x2(%rax),%edx
    0.00 :	   78e87:       89 d0                   mov    %edx,%eax
    0.00 :	   78e89:       48 8d 4c c1 08          lea    0x8(%rcx,%rax,8),%rcx
    0.00 :	   78e8e:       48 89 4c 24 38          mov    %rcx,0x38(%rsp)
    0.00 :	   78e93:       4c 8b 7c c3 08          mov    0x8(%rbx,%rax,8),%r15
    0.00 :	   78e98:       4d 85 ff                test   %r15,%r15
    0.00 :	   78e9b:       74 43                   je     78ee0 <_int_malloc+0xc0>
    0.00 :	   78e9d:       49 8b 47 08             mov    0x8(%r15),%rax
    0.00 :	   78ea1:       49 8d 5f 10             lea    0x10(%r15),%rbx
    0.00 :	   78ea5:       c1 e8 04                shr    $0x4,%eax
    0.00 :	   78ea8:       83 e8 02                sub    $0x2,%eax
    0.00 :	   78eab:       39 d0                   cmp    %edx,%eax
    0.00 :	   78ead:       0f 85 91 0d 00 00       jne    79c44 <_int_malloc+0xe24>
    0.00 :	   78eb3:       49 8b 47 10             mov    0x10(%r15),%rax
    0.00 :	   78eb7:       48 8b 54 24 38          mov    0x38(%rsp),%rdx
    0.00 :	   78ebc:       48 89 02                mov    %rax,(%rdx)
    0.00 :	   78ebf:       8b 05 bb b8 2f 00       mov    0x2fb8bb(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   78ec5:       85 c0                   test   %eax,%eax
    0.00 :	   78ec7:       0f 85 60 0d 00 00       jne    79c2d <_int_malloc+0xe0d>
    0.00 :	   78ecd:       48 83 c4 78             add    $0x78,%rsp
    0.00 :	   78ed1:       48 89 d8                mov    %rbx,%rax
    0.00 :	   78ed4:       5b                      pop    %rbx
    0.00 :	   78ed5:       5d                      pop    %rbp
    0.00 :	   78ed6:       41 5c                   pop    %r12
    0.00 :	   78ed8:       41 5d                   pop    %r13
    0.00 :	   78eda:       41 5e                   pop    %r14
    0.00 :	   78edc:       41 5f                   pop    %r15
    0.00 :	   78ede:       c3                      retq   
    0.00 :	   78edf:       90                      nop
    0.00 :	   78ee0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   78ee7:       00 00 
    0.00 :	   78ee9:       0f 87 b1 00 00 00       ja     78fa0 <_int_malloc+0x180>
    0.00 :	   78eef:       8b 4c 24 28             mov    0x28(%rsp),%ecx
    0.00 :	   78ef3:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   78ef8:       c1 e9 04                shr    $0x4,%ecx
    0.00 :	   78efb:       48 83 c3 68             add    $0x68,%rbx
    0.00 :	   78eff:       8d 44 09 fe             lea    -0x2(%rcx,%rcx,1),%eax
    0.00 :	   78f03:       89 4c 24 34             mov    %ecx,0x34(%rsp)
    0.00 :	   78f07:       48 89 5c 24 10          mov    %rbx,0x10(%rsp)
    0.00 :	   78f0c:       89 c0                   mov    %eax,%eax
    0.00 :	   78f0e:       48 8d 4c c3 f0          lea    -0x10(%rbx,%rax,8),%rcx
    0.00 :	   78f13:       4c 8b 79 18             mov    0x18(%rcx),%r15
    0.00 :	   78f17:       49 39 cf                cmp    %rcx,%r15
    0.00 :	   78f1a:       0f 84 ce 00 00 00       je     78fee <_int_malloc+0x1ce>
    0.00 :	   78f20:       4d 85 ff                test   %r15,%r15
    0.00 :	   78f23:       0f 84 c7 08 00 00       je     797f0 <_int_malloc+0x9d0>
    0.00 :	   78f29:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   78f2d:       48 8d 35 5c 65 0c 00    lea    0xc655c(%rip),%rsi        # 13f490 <__PRETTY_FUNCTION__.11129+0x1ab7>
    0.00 :	   78f34:       48 8b 50 10             mov    0x10(%rax),%rdx
    0.00 :	   78f38:       4c 39 fa                cmp    %r15,%rdx
    0.00 :	   78f3b:       0f 85 0a 0d 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   78f41:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   78f46:       48 83 4c 1a 08 01       orq    $0x1,0x8(%rdx,%rbx,1)
    0.00 :	   78f4c:       48 89 41 18             mov    %rax,0x18(%rcx)
    0.00 :	   78f50:       48 89 48 10             mov    %rcx,0x10(%rax)
    0.00 :	   78f54:       48 8d 05 45 af 2f 00    lea    0x2faf45(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   78f5b:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   78f60:       74 05                   je     78f67 <_int_malloc+0x147>
    0.00 :	   78f62:       48 83 4a 08 04          orq    $0x4,0x8(%rdx)
    0.00 :	   78f67:       8b 05 13 b8 2f 00       mov    0x2fb813(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   78f6d:       48 8d 6a 10             lea    0x10(%rdx),%rbp
    0.00 :	   78f71:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   78f74:       85 c0                   test   %eax,%eax
    0.00 :	   78f76:       0f 84 51 ff ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   78f7c:       48 8b 54 24 18          mov    0x18(%rsp),%rdx
    0.00 :	   78f81:       f7 d0                   not    %eax
    0.00 :	   78f83:       48 89 ef                mov    %rbp,%rdi
    0.00 :	   78f86:       0f b6 f0                movzbl %al,%esi
    0.00 :	   78f89:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   78f8c:       e8 df a4 00 00          callq  83470 <__GI_memset>
    0.00 :	   78f91:       e9 37 ff ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   78f96:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   78f9d:       00 00 00 
    0.00 :	   78fa0:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78fa5:       48 c1 e8 06             shr    $0x6,%rax
    0.00 :	   78fa9:       48 83 f8 30             cmp    $0x30,%rax
    0.00 :	   78fad:       0f 86 26 06 00 00       jbe    795d9 <_int_malloc+0x7b9>
    0.00 :	   78fb3:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78fb8:       48 c1 e8 09             shr    $0x9,%rax
    0.00 :	   78fbc:       48 83 f8 14             cmp    $0x14,%rax
    0.00 :	   78fc0:       0f 87 d6 06 00 00       ja     7969c <_int_malloc+0x87c>
    0.00 :	   78fc6:       83 c0 5b                add    $0x5b,%eax
    0.00 :	   78fc9:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   78fcd:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   78fd2:       48 8b 54 24 20          mov    0x20(%rsp),%rdx
    0.00 :	   78fd7:       48 83 c0 68             add    $0x68,%rax
    0.00 :	   78fdb:       48 89 44 24 10          mov    %rax,0x10(%rsp)
    0.00 :	   78fe0:       f6 42 04 01             testb  $0x1,0x4(%rdx)
    0.00 :	   78fe4:       75 08                   jne    78fee <_int_malloc+0x1ce>
    0.00 :	   78fe6:       48 89 d7                mov    %rdx,%rdi
    0.00 :	   78fe9:       e8 52 d8 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   78fee:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   78ff3:       8b 5c 24 28             mov    0x28(%rsp),%ebx
    0.00 :	   78ff7:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78ffc:       48 83 c1 58             add    $0x58,%rcx
    0.00 :	   79000:       c1 eb 04                shr    $0x4,%ebx
    0.00 :	   79003:       48 83 c0 20             add    $0x20,%rax
    0.00 :	   79007:       48 89 4c 24 60          mov    %rcx,0x60(%rsp)
    0.00 :	   7900c:       89 5c 24 6c             mov    %ebx,0x6c(%rsp)
    0.00 :	   79010:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	   79015:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   79018:       eb 67                   jmp    79081 <_int_malloc+0x261>
    0.00 :	   7901a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79020:       41 89 d5                mov    %edx,%r13d
    0.00 :	   79023:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   79028:       41 c1 ed 04             shr    $0x4,%r13d
    0.00 :	   7902c:       43 8d 44 2d fe          lea    -0x2(%r13,%r13,1),%eax
    0.00 :	   79031:       48 98                   cltq   
    0.00 :	   79033:       48 8d 74 c2 f0          lea    -0x10(%rdx,%rax,8),%rsi
    0.00 :	   79038:       48 8b 5e 10             mov    0x10(%rsi),%rbx
    0.00 :	   7903c:       44 89 e8                mov    %r13d,%eax
    0.00 :	   7903f:       41 83 e5 1f             and    $0x1f,%r13d
    0.00 :	   79043:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	   79048:       44 89 e9                mov    %r13d,%ecx
    0.00 :	   7904b:       c1 f8 05                sar    $0x5,%eax
    0.00 :	   7904e:       41 83 c7 01             add    $0x1,%r15d
    0.00 :	   79052:       d3 e2                   shl    %cl,%edx
    0.00 :	   79054:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79059:       48 98                   cltq   
    0.00 :	   7905b:       09 94 81 58 08 00 00    or     %edx,0x858(%rcx,%rax,4)
    0.00 :	   79062:       41 81 ff 10 27 00 00    cmp    $0x2710,%r15d
    0.00 :	   79069:       49 89 74 24 18          mov    %rsi,0x18(%r12)
    0.00 :	   7906e:       49 89 5c 24 10          mov    %rbx,0x10(%r12)
    0.00 :	   79073:       4c 89 63 18             mov    %r12,0x18(%rbx)
    0.00 :	   79077:       4c 89 66 10             mov    %r12,0x10(%rsi)
    0.00 :	   7907b:       0f 84 3f 03 00 00       je     793c0 <_int_malloc+0x5a0>
    0.00 :	   79081:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79086:       4c 8b 63 18             mov    0x18(%rbx),%r12
    0.00 :	   7908a:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	   7908d:       0f 84 2d 03 00 00       je     793c0 <_int_malloc+0x5a0>
    0.00 :	   79093:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	   79098:       49 8b 5c 24 18          mov    0x18(%r12),%rbx
    0.00 :	   7909d:       48 83 f8 10             cmp    $0x10,%rax
    0.00 :	   790a1:       0f 86 11 05 00 00       jbe    795b8 <_int_malloc+0x798>
    0.00 :	   790a7:       48 8b 54 24 20          mov    0x20(%rsp),%rdx
    0.00 :	   790ac:       48 3b 82 70 08 00 00    cmp    0x870(%rdx),%rax
    0.00 :	   790b3:       0f 87 ff 04 00 00       ja     795b8 <_int_malloc+0x798>
    0.00 :	   790b9:       48 89 c2                mov    %rax,%rdx
    0.00 :	   790bc:       48 83 e2 f8             and    $0xfffffffffffffff8,%rdx
    0.00 :	   790c0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   790c7:       00 00 
    0.00 :	   790c9:       77 0b                   ja     790d6 <_int_malloc+0x2b6>
    0.00 :	   790cb:       48 39 5c 24 60          cmp    %rbx,0x60(%rsp)
    0.00 :	   790d0:       0f 84 aa 01 00 00       je     79280 <_int_malloc+0x460>
    0.00 :	   790d6:       48 8b 4c 24 60          mov    0x60(%rsp),%rcx
    0.00 :	   790db:       48 89 59 18             mov    %rbx,0x18(%rcx)
    0.00 :	   790df:       48 89 4b 10             mov    %rcx,0x10(%rbx)
    0.00 :	   790e3:       48 39 54 24 28          cmp    %rdx,0x28(%rsp)
    0.00 :	   790e8:       0f 84 8a 04 00 00       je     79578 <_int_malloc+0x758>
    0.00 :	   790ee:       48 81 fa ff 03 00 00    cmp    $0x3ff,%rdx
    0.00 :	   790f5:       0f 86 25 ff ff ff       jbe    79020 <_int_malloc+0x200>
    0.00 :	   790fb:       48 89 d0                mov    %rdx,%rax
    0.00 :	   790fe:       48 c1 e8 06             shr    $0x6,%rax
    0.00 :	   79102:       48 83 f8 30             cmp    $0x30,%rax
    0.00 :	   79106:       77 70                   ja     79178 <_int_malloc+0x358>
    0.00 :	   79108:       44 8d 68 30             lea    0x30(%rax),%r13d
    0.00 :	   7910c:       8d 44 00 5e             lea    0x5e(%rax,%rax,1),%eax
    0.00 :	   79110:       48 98                   cltq   
    0.00 :	   79112:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79119:       ff 
    0.00 :	   7911a:       48 8b 6c 24 10          mov    0x10(%rsp),%rbp
    0.00 :	   7911f:       48 01 c5                add    %rax,%rbp
    0.00 :	   79122:       48 8b 5d 10             mov    0x10(%rbp),%rbx
    0.00 :	   79126:       48 39 eb                cmp    %rbp,%rbx
    0.00 :	   79129:       0f 84 11 02 00 00       je     79340 <_int_malloc+0x520>
    0.00 :	   7912f:       48 8b 75 18             mov    0x18(%rbp),%rsi
    0.00 :	   79133:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79136:       49 83 ce 01             or     $0x1,%r14
    0.00 :	   7913a:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	   7913e:       a8 04                   test   $0x4,%al
    0.00 :	   79140:       0f 85 da 00 00 00       jne    79220 <_int_malloc+0x400>
    0.00 :	   79146:       49 39 c6                cmp    %rax,%r14
    0.00 :	   79149:       73 5d                   jae    791a8 <_int_malloc+0x388>
    0.00 :	   7914b:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	   7914f:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   79152:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	   79157:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	   7915b:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   7915f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   79164:       48 8b 55 10             mov    0x10(%rbp),%rdx
    0.00 :	   79168:       4c 89 60 20             mov    %r12,0x20(%rax)
    0.00 :	   7916c:       4c 89 62 28             mov    %r12,0x28(%rdx)
    0.00 :	   79170:       e9 c7 fe ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   79175:       0f 1f 00                nopl   (%rax)
    0.00 :	   79178:       48 89 d0                mov    %rdx,%rax
    0.00 :	   7917b:       48 c1 e8 09             shr    $0x9,%rax
    0.00 :	   7917f:       48 83 f8 14             cmp    $0x14,%rax
    0.00 :	   79183:       0f 87 c7 00 00 00       ja     79250 <_int_malloc+0x430>
    0.00 :	   79189:       44 8d 68 5b             lea    0x5b(%rax),%r13d
    0.00 :	   7918d:       8d 84 00 b4 00 00 00    lea    0xb4(%rax,%rax,1),%eax
    0.00 :	   79194:       48 98                   cltq   
    0.00 :	   79196:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   7919d:       ff 
    0.00 :	   7919e:       e9 77 ff ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   791a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   791a8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791ac:       a8 04                   test   $0x4,%al
    0.00 :	   791ae:       0f 85 b4 01 00 00       jne    79368 <_int_malloc+0x548>
    0.00 :	   791b4:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   791b8:       49 39 c6                cmp    %rax,%r14
    0.00 :	   791bb:       73 34                   jae    791f1 <_int_malloc+0x3d1>
    0.00 :	   791bd:       48 8b 5b 20             mov    0x20(%rbx),%rbx
    0.00 :	   791c1:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791c5:       a8 04                   test   $0x4,%al
    0.00 :	   791c7:       74 ef                   je     791b8 <_int_malloc+0x398>
    0.00 :	   791c9:       48 8d 0d 57 2c 0c 00    lea    0xc2c57(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   791d0:       48 8d 35 6b 29 0c 00    lea    0xc296b(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   791d7:       48 8d 3d 82 2a 0c 00    lea    0xc2a82(%rip),%rdi        # 13bc60 <__PRETTY_FUNCTION__.14063+0x1f9>
    0.00 :	   791de:       ba 94 11 00 00          mov    $0x1194,%edx
    0.00 :	   791e3:       e8 d8 d5 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   791e8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791ec:       49 39 c6                cmp    %rax,%r14
    0.00 :	   791ef:       72 cc                   jb     791bd <_int_malloc+0x39d>
    0.00 :	   791f1:       0f 84 61 01 00 00       je     79358 <_int_malloc+0x538>
    0.00 :	   791f7:       49 89 5c 24 20          mov    %rbx,0x20(%r12)
    0.00 :	   791fc:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	   79200:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   79205:       4c 89 63 28             mov    %r12,0x28(%rbx)
    0.00 :	   79209:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   7920e:       4c 89 60 20             mov    %r12,0x20(%rax)
    0.00 :	   79212:       48 8b 73 18             mov    0x18(%rbx),%rsi
    0.00 :	   79216:       e9 21 fe ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   7921b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   79220:       48 8d 35 1b 29 0c 00    lea    0xc291b(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79227:       48 8d 0d f9 2b 0c 00    lea    0xc2bf9(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7922e:       48 8d 3d 10 2a 0c 00    lea    0xc2a10(%rip),%rdi        # 13bc45 <__PRETTY_FUNCTION__.14063+0x1de>
    0.00 :	   79235:       ba 86 11 00 00          mov    $0x1186,%edx
    0.00 :	   7923a:       e8 81 d5 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7923f:       48 8b 75 18             mov    0x18(%rbp),%rsi
    0.00 :	   79243:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	   79247:       e9 fa fe ff ff          jmpq   79146 <_int_malloc+0x326>
    0.00 :	   7924c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   79250:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79253:       48 c1 e8 0c             shr    $0xc,%rax
    0.00 :	   79257:       48 83 f8 0a             cmp    $0xa,%rax
    0.00 :	   7925b:       0f 87 2f 01 00 00       ja     79390 <_int_malloc+0x570>
    0.00 :	   79261:       44 8d 68 6e             lea    0x6e(%rax),%r13d
    0.00 :	   79265:       8d 84 00 da 00 00 00    lea    0xda(%rax,%rax,1),%eax
    0.00 :	   7926c:       48 98                   cltq   
    0.00 :	   7926e:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79275:       ff 
    0.00 :	   79276:       e9 9f fe ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   7927b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   79280:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79285:       48 8b 48 60             mov    0x60(%rax),%rcx
    0.00 :	   79289:       4c 39 e1                cmp    %r12,%rcx
    0.00 :	   7928c:       0f 85 44 fe ff ff       jne    790d6 <_int_malloc+0x2b6>
    0.00 :	   79292:       48 3b 54 24 08          cmp    0x8(%rsp),%rdx
    0.00 :	   79297:       0f 86 39 fe ff ff       jbe    790d6 <_int_malloc+0x2b6>
    0.00 :	   7929d:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   792a2:       48 8b 44 24 60          mov    0x60(%rsp),%rax
    0.00 :	   792a7:       48 89 d6                mov    %rdx,%rsi
    0.00 :	   792aa:       48 2b 74 24 28          sub    0x28(%rsp),%rsi
    0.00 :	   792af:       49 8d 14 1c             lea    (%r12,%rbx,1),%rdx
    0.00 :	   792b3:       48 89 50 10             mov    %rdx,0x10(%rax)
    0.00 :	   792b7:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   792bb:       48 81 fe ff 03 00 00    cmp    $0x3ff,%rsi
    0.00 :	   792c2:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   792c7:       48 89 53 60             mov    %rdx,0x60(%rbx)
    0.00 :	   792cb:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   792cf:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	   792d3:       76 10                   jbe    792e5 <_int_malloc+0x4c5>
    0.00 :	   792d5:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   792dc:       00 
    0.00 :	   792dd:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   792e4:       00 
    0.00 :	   792e5:       48 8d 05 b4 ab 2f 00    lea    0x2fabb4(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   792ec:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   792f1:       48 8d 69 10             lea    0x10(%rcx),%rbp
    0.00 :	   792f5:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   792f8:       0f 95 c0                setne  %al
    0.00 :	   792fb:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   79301:       0f b6 c0                movzbl %al,%eax
    0.00 :	   79304:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   79308:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   7930d:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79312:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   79316:       48 89 f0                mov    %rsi,%rax
    0.00 :	   79319:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7931d:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   79321:       48 89 34 32             mov    %rsi,(%rdx,%rsi,1)
    0.00 :	   79325:       8b 05 55 b4 2f 00       mov    0x2fb455(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7932b:       85 c0                   test   %eax,%eax
    0.00 :	   7932d:       0f 84 9a fb ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79333:       e9 44 fc ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   79338:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   7933f:       00 
    0.00 :	   79340:       4d 89 64 24 28          mov    %r12,0x28(%r12)
    0.00 :	   79345:       4d 89 64 24 20          mov    %r12,0x20(%r12)
    0.00 :	   7934a:       48 89 de                mov    %rbx,%rsi
    0.00 :	   7934d:       e9 ea fc ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   79352:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79358:       48 8b 5b 10             mov    0x10(%rbx),%rbx
    0.00 :	   7935c:       e9 b1 fe ff ff          jmpq   79212 <_int_malloc+0x3f2>
    0.00 :	   79361:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   79368:       48 8d 0d b8 2a 0c 00    lea    0xc2ab8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7936f:       48 8d 35 cc 27 0c 00    lea    0xc27cc(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79376:       48 8d 3d e3 28 0c 00    lea    0xc28e3(%rip),%rdi        # 13bc60 <__PRETTY_FUNCTION__.14063+0x1f9>
    0.00 :	   7937d:       ba 90 11 00 00          mov    $0x1190,%edx
    0.00 :	   79382:       e8 39 d4 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79387:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   7938b:       e9 28 fe ff ff          jmpq   791b8 <_int_malloc+0x398>
    0.00 :	   79390:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79393:       48 c1 e8 0f             shr    $0xf,%rax
    0.00 :	   79397:       48 83 f8 04             cmp    $0x4,%rax
    0.00 :	   7939b:       0f 87 47 01 00 00       ja     794e8 <_int_malloc+0x6c8>
    0.00 :	   793a1:       44 8d 68 77             lea    0x77(%rax),%r13d
    0.00 :	   793a5:       8d 84 00 ec 00 00 00    lea    0xec(%rax,%rax,1),%eax
    0.00 :	   793ac:       48 98                   cltq   
    0.00 :	   793ae:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   793b5:       ff 
    0.00 :	   793b6:       e9 5f fd ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   793bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   793c0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   793c7:       00 00 
    0.00 :	   793c9:       76 2c                   jbe    793f7 <_int_malloc+0x5d7>
    0.00 :	   793cb:       8b 54 24 34             mov    0x34(%rsp),%edx
    0.00 :	   793cf:       48 8b 4c 24 10          mov    0x10(%rsp),%rcx
    0.00 :	   793d4:       8d 44 12 fe             lea    -0x2(%rdx,%rdx,1),%eax
    0.00 :	   793d8:       89 c0                   mov    %eax,%eax
    0.00 :	   793da:       48 8d 54 c1 f0          lea    -0x10(%rcx,%rax,8),%rdx
    0.00 :	   793df:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	   793e3:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   793e6:       74 0f                   je     793f7 <_int_malloc+0x5d7>
    0.00 :	   793e8:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   793ed:       48 3b 58 08             cmp    0x8(%rax),%rbx
    0.00 :	   793f1:       0f 86 df 02 00 00       jbe    796d6 <_int_malloc+0x8b6>
    0.00 :	   793f7:       8b 4c 24 34             mov    0x34(%rsp),%ecx
    0.00 :	   793fb:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79400:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   79405:       83 c1 01                add    $0x1,%ecx
    0.00 :	   79408:       8d 44 09 fe             lea    -0x2(%rcx,%rcx,1),%eax
    0.00 :	   7940c:       41 89 cd                mov    %ecx,%r13d
    0.00 :	   7940f:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	   79412:       41 c1 ed 05             shr    $0x5,%r13d
    0.00 :	   79416:       89 c0                   mov    %eax,%eax
    0.00 :	   79418:       45 89 ee                mov    %r13d,%r14d
    0.00 :	   7941b:       46 8b a4 b3 58 08 00    mov    0x858(%rbx,%r14,4),%r12d
    0.00 :	   79422:       00 
    0.00 :	   79423:       48 8d 6c c2 f0          lea    -0x10(%rdx,%rax,8),%rbp
    0.00 :	   79428:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	   7942d:       d3 e3                   shl    %cl,%ebx
    0.00 :	   7942f:       90                      nop
    0.00 :	   79430:       44 39 e3                cmp    %r12d,%ebx
    0.00 :	   79433:       77 0b                   ja     79440 <_int_malloc+0x620>
    0.00 :	   79435:       85 db                   test   %ebx,%ebx
    0.00 :	   79437:       0f 85 9a 00 00 00       jne    794d7 <_int_malloc+0x6b7>
    0.00 :	   7943d:       0f 1f 00                nopl   (%rax)
    0.00 :	   79440:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   79444:       41 83 fd 03             cmp    $0x3,%r13d
    0.00 :	   79448:       0f 87 d2 00 00 00       ja     79520 <_int_malloc+0x700>
    0.00 :	   7944e:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79453:       45 89 ee                mov    %r13d,%r14d
    0.00 :	   79456:       46 8b a4 b0 58 08 00    mov    0x858(%rax,%r14,4),%r12d
    0.00 :	   7945d:       00 
    0.00 :	   7945e:       45 85 e4                test   %r12d,%r12d
    0.00 :	   79461:       74 dd                   je     79440 <_int_malloc+0x620>
    0.00 :	   79463:       44 89 e8                mov    %r13d,%eax
    0.00 :	   79466:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   7946b:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	   79470:       c1 e0 06                shl    $0x6,%eax
    0.00 :	   79473:       83 e8 02                sub    $0x2,%eax
    0.00 :	   79476:       44 85 e3                test   %r12d,%ebx
    0.00 :	   79479:       89 c0                   mov    %eax,%eax
    0.00 :	   7947b:       48 8d 6c c2 f0          lea    -0x10(%rdx,%rax,8),%rbp
    0.00 :	   79480:       74 5a                   je     794dc <_int_malloc+0x6bc>
    0.00 :	   79482:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79488:       4c 8b 7d 18             mov    0x18(%rbp),%r15
    0.00 :	   7948c:       49 39 ef                cmp    %rbp,%r15
    0.00 :	   7948f:       0f 85 50 01 00 00       jne    795e5 <_int_malloc+0x7c5>
    0.00 :	   79495:       89 d8                   mov    %ebx,%eax
    0.00 :	   79497:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   7949c:       48 83 c5 10             add    $0x10,%rbp
    0.00 :	   794a0:       f7 d0                   not    %eax
    0.00 :	   794a2:       01 db                   add    %ebx,%ebx
    0.00 :	   794a4:       41 21 c4                and    %eax,%r12d
    0.00 :	   794a7:       46 89 a4 b1 58 08 00    mov    %r12d,0x858(%rcx,%r14,4)
    0.00 :	   794ae:       00 
    0.00 :	   794af:       e9 7c ff ff ff          jmpq   79430 <_int_malloc+0x610>
    0.00 :	   794b4:       48 8d 0d 6c 29 0c 00    lea    0xc296c(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   794bb:       48 8d 35 80 26 0c 00    lea    0xc2680(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   794c2:       48 8d 3d ae 27 0c 00    lea    0xc27ae(%rip),%rdi        # 13bc77 <__PRETTY_FUNCTION__.14063+0x210>
    0.00 :	   794c9:       ba 15 12 00 00          mov    $0x1215,%edx
    0.00 :	   794ce:       e8 ed d2 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   794d3:       48 83 c5 10             add    $0x10,%rbp
    0.00 :	   794d7:       44 85 e3                test   %r12d,%ebx
    0.00 :	   794da:       75 ac                   jne    79488 <_int_malloc+0x668>
    0.00 :	   794dc:       01 db                   add    %ebx,%ebx
    0.00 :	   794de:       75 f3                   jne    794d3 <_int_malloc+0x6b3>
    0.00 :	   794e0:       eb d2                   jmp    794b4 <_int_malloc+0x694>
    0.00 :	   794e2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   794e8:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   794eb:       41 bd 7e 00 00 00       mov    $0x7e,%r13d
    0.00 :	   794f1:       b8 c0 07 00 00          mov    $0x7c0,%eax
    0.00 :	   794f6:       48 c1 e9 12             shr    $0x12,%rcx
    0.00 :	   794fa:       48 83 f9 02             cmp    $0x2,%rcx
    0.00 :	   794fe:       0f 87 16 fc ff ff       ja     7911a <_int_malloc+0x2fa>
    0.00 :	   79504:       8d 84 09 f6 00 00 00    lea    0xf6(%rcx,%rcx,1),%eax
    0.00 :	   7950b:       44 8d 69 7c             lea    0x7c(%rcx),%r13d
    0.00 :	   7950f:       48 98                   cltq   
    0.00 :	   79511:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79518:       ff 
    0.00 :	   79519:       e9 fc fb ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   7951e:       66 90                   xchg   %ax,%ax
    0.00 :	   79520:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79525:       4c 8b 6b 58             mov    0x58(%rbx),%r13
    0.00 :	   79529:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   7952d:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79530:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79534:       4c 3b 74 24 08          cmp    0x8(%rsp),%r14
    0.00 :	   79539:       0f 83 53 04 00 00       jae    79992 <_int_malloc+0xb72>
    0.00 :	   7953f:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79544:       f6 41 04 01             testb  $0x1,0x4(%rcx)
    0.00 :	   79548:       0f 85 a2 04 00 00       jne    799f0 <_int_malloc+0xbd0>
    0.00 :	   7954e:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   79555:       00 00 
    0.00 :	   79557:       0f 87 1b 01 00 00       ja     79678 <_int_malloc+0x858>
    0.00 :	   7955d:       48 8b 7c 24 20          mov    0x20(%rsp),%rdi
    0.00 :	   79562:       e8 d9 d2 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   79567:       8b 5c 24 6c             mov    0x6c(%rsp),%ebx
    0.00 :	   7956b:       89 5c 24 34             mov    %ebx,0x34(%rsp)
    0.00 :	   7956f:       e9 a1 fa ff ff          jmpq   79015 <_int_malloc+0x1f5>
    0.00 :	   79574:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   79578:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   7957d:       48 8d 05 1c a9 2f 00    lea    0x2fa91c(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   79584:       49 83 4c 1c 08 01       orq    $0x1,0x8(%r12,%rbx,1)
    0.00 :	   7958a:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   7958f:       74 06                   je     79597 <_int_malloc+0x777>
    0.00 :	   79591:       49 83 4c 24 08 04       orq    $0x4,0x8(%r12)
    0.00 :	   79597:       8b 05 e3 b1 2f 00       mov    0x2fb1e3(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7959d:       49 8d 6c 24 10          lea    0x10(%r12),%rbp
    0.00 :	   795a2:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   795a5:       85 c0                   test   %eax,%eax
    0.00 :	   795a7:       0f 84 20 f9 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   795ad:       e9 ca f9 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   795b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   795b8:       8b 3d 4a 8b 2f 00       mov    0x2f8b4a(%rip),%edi        # 372108 <check_action>
    0.00 :	   795be:       49 8d 54 24 10          lea    0x10(%r12),%rdx
    0.00 :	   795c3:       48 8d 35 5f 26 0c 00    lea    0xc265f(%rip),%rsi        # 13bc29 <__PRETTY_FUNCTION__.14063+0x1c2>
    0.00 :	   795ca:       e8 91 cf ff ff          callq  76560 <malloc_printerr>
    0.00 :	   795cf:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	   795d4:       e9 e0 fa ff ff          jmpq   790b9 <_int_malloc+0x299>
    0.00 :	   795d9:       83 c0 30                add    $0x30,%eax
    0.00 :	   795dc:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   795e0:       e9 e8 f9 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   795e5:       4d 8b 67 08             mov    0x8(%r15),%r12
    0.00 :	   795e9:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   795ed:       4c 39 64 24 28          cmp    %r12,0x28(%rsp)
    0.00 :	   795f2:       0f 87 50 03 00 00       ja     79948 <_int_malloc+0xb28>
    0.00 :	   795f8:       49 8b 5f 10             mov    0x10(%r15),%rbx
    0.00 :	   795fc:       4d 89 e5                mov    %r12,%r13
    0.00 :	   795ff:       4c 2b 6c 24 28          sub    0x28(%rsp),%r13
    0.00 :	   79604:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   79608:       48 8b 6b 18             mov    0x18(%rbx),%rbp
    0.00 :	   7960c:       4c 39 fd                cmp    %r15,%rbp
    0.00 :	   7960f:       0f 85 de 06 00 00       jne    79cf3 <_int_malloc+0xed3>
    0.00 :	   79615:       4c 3b 78 10             cmp    0x10(%rax),%r15
    0.00 :	   79619:       0f 85 d4 06 00 00       jne    79cf3 <_int_malloc+0xed3>
    0.00 :	   7961f:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	   79623:       48 89 58 10             mov    %rbx,0x10(%rax)
    0.00 :	   79627:       49 81 7f 08 ff 03 00    cmpq   $0x3ff,0x8(%r15)
    0.00 :	   7962e:       00 
    0.00 :	   7962f:       0f 87 89 02 00 00       ja     798be <_int_malloc+0xa9e>
    0.00 :	   79635:       49 83 fd 1f             cmp    $0x1f,%r13
    0.00 :	   79639:       0f 87 de 01 00 00       ja     7981d <_int_malloc+0x9fd>
    0.00 :	   7963f:       4b 83 4c 27 08 01       orq    $0x1,0x8(%r15,%r12,1)
    0.00 :	   79645:       48 8d 05 54 a8 2f 00    lea    0x2fa854(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   7964c:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   79651:       74 05                   je     79658 <_int_malloc+0x838>
    0.00 :	   79653:       49 83 4f 08 04          orq    $0x4,0x8(%r15)
    0.00 :	   79658:       8b 05 22 b1 2f 00       mov    0x2fb122(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7965e:       49 8d 6f 10             lea    0x10(%r15),%rbp
    0.00 :	   79662:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   79665:       85 c0                   test   %eax,%eax
    0.00 :	   79667:       0f 84 60 f8 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   7966d:       e9 0a f9 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   79672:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79678:       48 8d 0d a8 27 0c 00    lea    0xc27a8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7967f:       48 8d 35 bc 24 0c 00    lea    0xc24bc(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79686:       48 8d 3d 13 5f 0c 00    lea    0xc5f13(%rip),%rdi        # 13f5a0 <__PRETTY_FUNCTION__.11129+0x1bc7>
    0.00 :	   7968d:       ba 90 12 00 00          mov    $0x1290,%edx
    0.00 :	   79692:       e8 29 d1 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79697:       e9 c1 fe ff ff          jmpq   7955d <_int_malloc+0x73d>
    0.00 :	   7969c:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   796a1:       48 c1 e8 0c             shr    $0xc,%rax
    0.00 :	   796a5:       48 83 f8 0a             cmp    $0xa,%rax
    0.00 :	   796a9:       76 1f                   jbe    796ca <_int_malloc+0x8aa>
    0.00 :	   796ab:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   796b0:       48 c1 e8 0f             shr    $0xf,%rax
    0.00 :	   796b4:       48 83 f8 04             cmp    $0x4,%rax
    0.00 :	   796b8:       0f 87 ae 02 00 00       ja     7996c <_int_malloc+0xb4c>
    0.00 :	   796be:       83 c0 77                add    $0x77,%eax
    0.00 :	   796c1:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   796c5:       e9 03 f9 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   796ca:       83 c0 6e                add    $0x6e,%eax
    0.00 :	   796cd:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   796d1:       e9 f7 f8 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   796d6:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   796da:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	   796de:       49 89 cc                mov    %rcx,%r12
    0.00 :	   796e1:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   796e5:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	   796e8:       76 16                   jbe    79700 <_int_malloc+0x8e0>
    0.00 :	   796ea:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   796ee:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	   796f2:       49 89 cc                mov    %rcx,%r12
    0.00 :	   796f5:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   796f9:       4c 39 64 24 28          cmp    %r12,0x28(%rsp)
    0.00 :	   796fe:       77 ea                   ja     796ea <_int_malloc+0x8ca>
    0.00 :	   79700:       48 39 42 18             cmp    %rax,0x18(%rdx)
    0.00 :	   79704:       0f 84 9a 0a 00 00       je     7a1a4 <_int_malloc+0x1384>
    0.00 :	   7970a:       4c 8b 78 10             mov    0x10(%rax),%r15
    0.00 :	   7970e:       49 39 4f 08             cmp    %rcx,0x8(%r15)
    0.00 :	   79712:       0f 84 83 0a 00 00       je     7a19b <_int_malloc+0x137b>
    0.00 :	   79718:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   7971b:       49 89 c7                mov    %rax,%r15
    0.00 :	   7971e:       48 8b 6b 18             mov    0x18(%rbx),%rbp
    0.00 :	   79722:       4d 89 e5                mov    %r12,%r13
    0.00 :	   79725:       4c 2b 6c 24 28          sub    0x28(%rsp),%r13
    0.00 :	   7972a:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   7972e:       4c 39 fd                cmp    %r15,%rbp
    0.00 :	   79731:       0f 85 20 0a 00 00       jne    7a157 <_int_malloc+0x1337>
    0.00 :	   79737:       4c 3b 78 10             cmp    0x10(%rax),%r15
    0.00 :	   7973b:       0f 85 16 0a 00 00       jne    7a157 <_int_malloc+0x1337>
    0.00 :	   79741:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	   79745:       48 89 58 10             mov    %rbx,0x10(%rax)
    0.00 :	   79749:       49 81 7f 08 ff 03 00    cmpq   $0x3ff,0x8(%r15)
    0.00 :	   79750:       00 
    0.00 :	   79751:       0f 87 81 09 00 00       ja     7a0d8 <_int_malloc+0x12b8>
    0.00 :	   79757:       49 83 fd 1f             cmp    $0x1f,%r13
    0.00 :	   7975b:       0f 86 de fe ff ff       jbe    7963f <_int_malloc+0x81f>
    0.00 :	   79761:       48 8b 54 24 60          mov    0x60(%rsp),%rdx
    0.00 :	   79766:       48 8d 35 b3 5d 0c 00    lea    0xc5db3(%rip),%rsi        # 13f520 <__PRETTY_FUNCTION__.11129+0x1b47>
    0.00 :	   7976d:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	   79771:       48 3b 50 18             cmp    0x18(%rax),%rdx
    0.00 :	   79775:       0f 85 d0 04 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   7977b:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   79780:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79785:       49 81 fd ff 03 00 00    cmp    $0x3ff,%r13
    0.00 :	   7978c:       49 8d 14 0f             lea    (%r15,%rcx,1),%rdx
    0.00 :	   79790:       48 89 5a 18             mov    %rbx,0x18(%rdx)
    0.00 :	   79794:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   79798:       48 89 53 10             mov    %rdx,0x10(%rbx)
    0.00 :	   7979c:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   797a0:       76 10                   jbe    797b2 <_int_malloc+0x992>
    0.00 :	   797a2:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   797a9:       00 
    0.00 :	   797aa:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   797b1:       00 
    0.00 :	   797b2:       48 8d 05 e7 a6 2f 00    lea    0x2fa6e7(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   797b9:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   797be:       0f 95 c0                setne  %al
    0.00 :	   797c1:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   797c7:       0f b6 c0                movzbl %al,%eax
    0.00 :	   797ca:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   797ce:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   797d3:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   797d8:       49 89 47 08             mov    %rax,0x8(%r15)
    0.00 :	   797dc:       4c 89 e8                mov    %r13,%rax
    0.00 :	   797df:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   797e3:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   797e7:       4e 89 2c 2a             mov    %r13,(%rdx,%r13,1)
    0.00 :	   797eb:       e9 68 fe ff ff          jmpq   79658 <_int_malloc+0x838>
    0.00 :	   797f0:       48 8b 7c 24 20          mov    0x20(%rsp),%rdi
    0.00 :	   797f5:       e8 46 d0 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   797fa:       e9 ef f7 ff ff          jmpq   78fee <_int_malloc+0x1ce>
    0.00 :	   797ff:       48 8b 15 32 86 2f 00    mov    0x2f8632(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   79806:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   7980d:       00 00 
    0.00 :	   7980f:       31 db                   xor    %ebx,%ebx
    0.00 :	   79811:       c7 04 10 0c 00 00 00    movl   $0xc,(%rax,%rdx,1)
    0.00 :	   79818:       e9 b0 f6 ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   7981d:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79822:       48 8d 35 4f 5d 0c 00    lea    0xc5d4f(%rip),%rsi        # 13f578 <__PRETTY_FUNCTION__.11129+0x1b9f>
    0.00 :	   79829:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	   7982d:       48 3b 58 18             cmp    0x18(%rax),%rbx
    0.00 :	   79831:       0f 85 14 04 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   79837:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   7983c:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79841:       49 8d 14 0f             lea    (%r15,%rcx,1),%rdx
    0.00 :	   79845:       48 81 f9 ff 03 00 00    cmp    $0x3ff,%rcx
    0.00 :	   7984c:       48 89 5a 18             mov    %rbx,0x18(%rdx)
    0.00 :	   79850:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   79854:       48 89 53 10             mov    %rdx,0x10(%rbx)
    0.00 :	   79858:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   7985c:       77 09                   ja     79867 <_int_malloc+0xa47>
    0.00 :	   7985e:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79863:       48 89 50 60             mov    %rdx,0x60(%rax)
    0.00 :	   79867:       49 81 fd ff 03 00 00    cmp    $0x3ff,%r13
    0.00 :	   7986e:       76 10                   jbe    79880 <_int_malloc+0xa60>
    0.00 :	   79870:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   79877:       00 
    0.00 :	   79878:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   7987f:       00 
    0.00 :	   79880:       48 8d 05 19 a6 2f 00    lea    0x2fa619(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   79887:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   7988c:       0f 95 c0                setne  %al
    0.00 :	   7988f:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   79895:       0f b6 c0                movzbl %al,%eax
    0.00 :	   79898:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   7989c:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   798a1:       4c 89 e8                mov    %r13,%rax
    0.00 :	   798a4:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   798a9:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   798ad:       49 89 4f 08             mov    %rcx,0x8(%r15)
    0.00 :	   798b1:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   798b5:       4e 89 2c 2a             mov    %r13,(%rdx,%r13,1)
    0.00 :	   798b9:       e9 9a fd ff ff          jmpq   79658 <_int_malloc+0x838>
    0.00 :	   798be:       49 8b 47 20             mov    0x20(%r15),%rax
    0.00 :	   798c2:       48 85 c0                test   %rax,%rax
    0.00 :	   798c5:       0f 84 6a fd ff ff       je     79635 <_int_malloc+0x815>
    0.00 :	   798cb:       4c 3b 78 28             cmp    0x28(%rax),%r15
    0.00 :	   798cf:       74 1f                   je     798f0 <_int_malloc+0xad0>
    0.00 :	   798d1:       48 8d 0d 4f 25 0c 00    lea    0xc254f(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   798d8:       48 8d 35 63 22 0c 00    lea    0xc2263(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   798df:       48 8d 3d da 5b 0c 00    lea    0xc5bda(%rip),%rdi        # 13f4c0 <__PRETTY_FUNCTION__.11129+0x1ae7>
    0.00 :	   798e6:       ba 2b 12 00 00          mov    $0x122b,%edx
    0.00 :	   798eb:       e8 d0 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   798f0:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   798f4:       48 3b 68 20             cmp    0x20(%rax),%rbp
    0.00 :	   798f8:       74 1f                   je     79919 <_int_malloc+0xaf9>
    0.00 :	   798fa:       48 8d 0d 26 25 0c 00    lea    0xc2526(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   79901:       48 8d 35 3a 22 0c 00    lea    0xc223a(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79908:       48 8d 3d e1 5b 0c 00    lea    0xc5be1(%rip),%rdi        # 13f4f0 <__PRETTY_FUNCTION__.11129+0x1b17>
    0.00 :	   7990f:       ba 2b 12 00 00          mov    $0x122b,%edx
    0.00 :	   79914:       e8 a7 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79919:       48 83 7b 20 00          cmpq   $0x0,0x20(%rbx)
    0.00 :	   7991e:       0f 84 e9 03 00 00       je     79d0d <_int_malloc+0xeed>
    0.00 :	   79924:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	   79928:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7992c:       48 89 42 28             mov    %rax,0x28(%rdx)
    0.00 :	   79930:       48 8b 55 28             mov    0x28(%rbp),%rdx
    0.00 :	   79934:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79938:       48 89 42 20             mov    %rax,0x20(%rdx)
    0.00 :	   7993c:       e9 f4 fc ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79941:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   79948:       48 8d 0d d8 24 0c 00    lea    0xc24d8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7994f:       48 8d 35 ec 21 0c 00    lea    0xc21ec(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79956:       48 8d 3d eb 5b 0c 00    lea    0xc5beb(%rip),%rdi        # 13f548 <__PRETTY_FUNCTION__.11129+0x1b6f>
    0.00 :	   7995d:       ba 26 12 00 00          mov    $0x1226,%edx
    0.00 :	   79962:       e8 59 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79967:       e9 8c fc ff ff          jmpq   795f8 <_int_malloc+0x7d8>
    0.00 :	   7996c:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79971:       c7 44 24 34 7e 00 00    movl   $0x7e,0x34(%rsp)
    0.00 :	   79978:       00 
    0.00 :	   79979:       48 c1 e8 12             shr    $0x12,%rax
    0.00 :	   7997d:       8d 50 7c                lea    0x7c(%rax),%edx
    0.00 :	   79980:       48 83 f8 03             cmp    $0x3,%rax
    0.00 :	   79984:       0f 43 54 24 34          cmovae 0x34(%rsp),%edx
    0.00 :	   79989:       89 54 24 34             mov    %edx,0x34(%rsp)
    0.00 :	   7998d:       e9 3b f6 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   79992:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79997:       31 d2                   xor    %edx,%edx
    0.00 :	   79999:       49 8d 6d 10             lea    0x10(%r13),%rbp
    0.00 :	   7999d:       49 8d 4c 05 00          lea    0x0(%r13,%rax,1),%rcx
    0.00 :	   799a2:       48 8d 05 f7 a4 2f 00    lea    0x2fa4f7(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   799a9:       48 89 4b 58             mov    %rcx,0x58(%rbx)
    0.00 :	   799ad:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   799b0:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   799b5:       0f 95 c2                setne  %dl
    0.00 :	   799b8:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   799bb:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   799bf:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   799c3:       48 09 d0                or     %rdx,%rax
    0.00 :	   799c6:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   799ca:       4c 2b 74 24 28          sub    0x28(%rsp),%r14
    0.00 :	   799cf:       49 83 ce 01             or     $0x1,%r14
    0.00 :	   799d3:       4c 89 71 08             mov    %r14,0x8(%rcx)
    0.00 :	   799d7:       8b 05 a3 ad 2f 00       mov    0x2fada3(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   799dd:       85 c0                   test   %eax,%eax
    0.00 :	   799df:       0f 84 e8 f4 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   799e5:       e9 92 f5 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   799ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   799f0:       8b 05 5a ad 2f 00       mov    0x2fad5a(%rip),%eax        # 374750 <mp_+0x30>
    0.00 :	   799f6:       83 e8 01                sub    $0x1,%eax
    0.00 :	   799f9:       48 89 44 24 40          mov    %rax,0x40(%rsp)
    0.00 :	   799fe:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79a03:       48 3b 05 26 ad 2f 00    cmp    0x2fad26(%rip),%rax        # 374730 <mp_+0x10>
    0.00 :	   79a0a:       0f 82 db 02 00 00       jb     79ceb <_int_malloc+0xecb>
    0.00 :	   79a10:       8b 05 2a ad 2f 00       mov    0x2fad2a(%rip),%eax        # 374740 <mp_+0x20>
    0.00 :	   79a16:       3b 05 28 ad 2f 00       cmp    0x2fad28(%rip),%eax        # 374744 <mp_+0x24>
    0.00 :	   79a1c:       0f 8d c9 02 00 00       jge    79ceb <_int_malloc+0xecb>
    0.00 :	   79a22:       48 8b 4c 24 40          mov    0x40(%rsp),%rcx
    0.00 :	   79a27:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79a2c:       48 89 c8                mov    %rcx,%rax
    0.00 :	   79a2f:       48 8d 6c 11 08          lea    0x8(%rcx,%rdx,1),%rbp
    0.00 :	   79a34:       48 f7 d0                not    %rax
    0.00 :	   79a37:       48 21 c5                and    %rax,%rbp
    0.00 :	   79a3a:       48 39 ea                cmp    %rbp,%rdx
    0.00 :	   79a3d:       0f 82 68 03 00 00       jb     79dab <_int_malloc+0xf8b>
    0.00 :	   79a43:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79a48:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79a4e:       4c 8b 6b 58             mov    0x58(%rbx),%r13
    0.00 :	   79a52:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   79a56:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79a59:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79a5d:       4d 85 f6                test   %r14,%r14
    0.00 :	   79a60:       4b 8d 4c 35 00          lea    0x0(%r13,%r14,1),%rcx
    0.00 :	   79a65:       0f 95 44 24 5f          setne  0x5f(%rsp)
    0.00 :	   79a6a:       4c 39 6c 24 60          cmp    %r13,0x60(%rsp)
    0.00 :	   79a6f:       48 89 4c 24 50          mov    %rcx,0x50(%rsp)
    0.00 :	   79a74:       0f 84 c6 07 00 00       je     7a240 <_int_malloc+0x1420>
    0.00 :	   79a7a:       49 83 fe 1f             cmp    $0x1f,%r14
    0.00 :	   79a7e:       76 11                   jbe    79a91 <_int_malloc+0xc71>
    0.00 :	   79a80:       83 e2 01                and    $0x1,%edx
    0.00 :	   79a83:       74 0c                   je     79a91 <_int_malloc+0xc71>
    0.00 :	   79a85:       48 8b 5c 24 40          mov    0x40(%rsp),%rbx
    0.00 :	   79a8a:       48 85 5c 24 50          test   %rbx,0x50(%rsp)
    0.00 :	   79a8f:       74 1f                   je     79ab0 <_int_malloc+0xc90>
    0.00 :	   79a91:       48 8d 0d 9b 23 0c 00    lea    0xc239b(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79a98:       48 8d 35 a3 20 0c 00    lea    0xc20a3(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79a9f:       48 8d 3d a2 5b 0c 00    lea    0xc5ba2(%rip),%rdi        # 13f648 <__PRETTY_FUNCTION__.11129+0x1c6f>
    0.00 :	   79aa6:       ba 13 0c 00 00          mov    $0xc13,%edx
    0.00 :	   79aab:       e8 10 cd ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79ab0:       4c 39 74 24 08          cmp    %r14,0x8(%rsp)
    0.00 :	   79ab5:       77 1f                   ja     79ad6 <_int_malloc+0xcb6>
    0.00 :	   79ab7:       48 8d 0d 75 23 0c 00    lea    0xc2375(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79abe:       48 8d 35 7d 20 0c 00    lea    0xc207d(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79ac5:       48 8d 3d fc 5c 0c 00    lea    0xc5cfc(%rip),%rdi        # 13f7c8 <__PRETTY_FUNCTION__.11129+0x1def>
    0.00 :	   79acc:       ba 16 0c 00 00          mov    $0xc16,%edx
    0.00 :	   79ad1:       e8 ea cc ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79ad6:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79adb:       f6 40 04 01             testb  $0x1,0x4(%rax)
    0.00 :	   79adf:       75 1f                   jne    79b00 <_int_malloc+0xce0>
    0.00 :	   79ae1:       48 8d 0d 4b 23 0c 00    lea    0xc234b(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79ae8:       48 8d 35 53 20 0c 00    lea    0xc2053(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79aef:       48 8d 3d 8a 21 0c 00    lea    0xc218a(%rip),%rdi        # 13bc80 <__PRETTY_FUNCTION__.14063+0x219>
    0.00 :	   79af6:       ba 1a 0c 00 00          mov    $0xc1a,%edx
    0.00 :	   79afb:       e8 c0 cc ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79b00:       48 8d 15 99 a3 2f 00    lea    0x2fa399(%rip),%rdx        # 373ea0 <main_arena>
    0.00 :	   79b07:       48 39 54 24 20          cmp    %rdx,0x20(%rsp)
    0.00 :	   79b0c:       0f 84 58 03 00 00       je     79e6a <_int_malloc+0x104a>
    0.00 :	   79b12:       48 8b 5c 24 08          mov    0x8(%rsp),%rbx
    0.00 :	   79b17:       4c 89 ed                mov    %r13,%rbp
    0.00 :	   79b1a:       48 81 e5 00 00 00 fc    and    $0xfffffffffc000000,%rbp
    0.00 :	   79b21:       4c 8b 65 10             mov    0x10(%rbp),%r12
    0.00 :	   79b25:       4c 29 f3                sub    %r14,%rbx
    0.00 :	   79b28:       48 85 db                test   %rbx,%rbx
    0.00 :	   79b2b:       0f 8e 31 01 00 00       jle    79c62 <_int_malloc+0xe42>
    0.00 :	   79b31:       e8 4a a6 05 00          callq  d4180 <__getpagesize>
    0.00 :	   79b36:       83 e8 01                sub    $0x1,%eax
    0.00 :	   79b39:       48 98                   cltq   
    0.00 :	   79b3b:       48 8d 14 03             lea    (%rbx,%rax,1),%rdx
    0.00 :	   79b3f:       48 f7 d0                not    %rax
    0.00 :	   79b42:       48 21 c2                and    %rax,%rdx
    0.00 :	   79b45:       4a 8d 1c 22             lea    (%rdx,%r12,1),%rbx
    0.00 :	   79b49:       48 81 fb 00 00 00 04    cmp    $0x4000000,%rbx
    0.00 :	   79b50:       0f 87 0c 01 00 00       ja     79c62 <_int_malloc+0xe42>
    0.00 :	   79b56:       48 8b 45 18             mov    0x18(%rbp),%rax
    0.00 :	   79b5a:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   79b5d:       0f 87 22 02 00 00       ja     79d85 <_int_malloc+0xf65>
    0.00 :	   79b63:       48 89 5d 10             mov    %rbx,0x10(%rbp)
    0.00 :	   79b67:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79b6c:       4c 29 e3                sub    %r12,%rbx
    0.00 :	   79b6f:       48 01 99 70 08 00 00    add    %rbx,0x870(%rcx)
    0.00 :	   79b76:       48 8b 05 13 ac 2f 00    mov    0x2fac13(%rip),%rax        # 374790 <arena_mem>
    0.00 :	   79b7d:       48 03 45 10             add    0x10(%rbp),%rax
    0.00 :	   79b81:       4c 29 e0                sub    %r12,%rax
    0.00 :	   79b84:       48 89 05 05 ac 2f 00    mov    %rax,0x2fac05(%rip)        # 374790 <arena_mem>
    0.00 :	   79b8b:       48 03 6d 10             add    0x10(%rbp),%rbp
    0.00 :	   79b8f:       4c 29 ed                sub    %r13,%rbp
    0.00 :	   79b92:       48 83 cd 01             or     $0x1,%rbp
    0.00 :	   79b96:       49 89 6d 08             mov    %rbp,0x8(%r13)
    0.00 :	   79b9a:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79b9f:       48 8b 83 70 08 00 00    mov    0x870(%rbx),%rax
    0.00 :	   79ba6:       48 3b 83 78 08 00 00    cmp    0x878(%rbx),%rax
    0.00 :	   79bad:       76 07                   jbe    79bb6 <_int_malloc+0xd96>
    0.00 :	   79baf:       48 89 83 78 08 00 00    mov    %rax,0x878(%rbx)
    0.00 :	   79bb6:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79bbb:       48 8b 78 58             mov    0x58(%rax),%rdi
    0.00 :	   79bbf:       48 8b 77 08             mov    0x8(%rdi),%rsi
    0.00 :	   79bc3:       48 83 e6 f8             and    $0xfffffffffffffff8,%rsi
    0.00 :	   79bc7:       48 39 74 24 08          cmp    %rsi,0x8(%rsp)
    0.00 :	   79bcc:       0f 87 2d fc ff ff       ja     797ff <_int_malloc+0x9df>
    0.00 :	   79bd2:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79bd7:       48 8d 1d c2 a2 2f 00    lea    0x2fa2c2(%rip),%rbx        # 373ea0 <main_arena>
    0.00 :	   79bde:       48 8d 0c 17             lea    (%rdi,%rdx,1),%rcx
    0.00 :	   79be2:       31 d2                   xor    %edx,%edx
    0.00 :	   79be4:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   79be7:       0f 95 c2                setne  %dl
    0.00 :	   79bea:       48 8d 5f 10             lea    0x10(%rdi),%rbx
    0.00 :	   79bee:       48 89 48 58             mov    %rcx,0x58(%rax)
    0.00 :	   79bf2:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79bf7:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   79bfb:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79bff:       48 09 d0                or     %rdx,%rax
    0.00 :	   79c02:       48 89 47 08             mov    %rax,0x8(%rdi)
    0.00 :	   79c06:       48 89 f0                mov    %rsi,%rax
    0.00 :	   79c09:       48 2b 44 24 28          sub    0x28(%rsp),%rax
    0.00 :	   79c0e:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79c12:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   79c16:       48 85 db                test   %rbx,%rbx
    0.00 :	   79c19:       0f 84 ae f2 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79c1f:       8b 05 5b ab 2f 00       mov    0x2fab5b(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   79c25:       85 c0                   test   %eax,%eax
    0.00 :	   79c27:       0f 84 a0 f2 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79c2d:       48 8b 54 24 18          mov    0x18(%rsp),%rdx
    0.00 :	   79c32:       f7 d0                   not    %eax
    0.00 :	   79c34:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79c37:       0f b6 f0                movzbl %al,%esi
    0.00 :	   79c3a:       e8 31 98 00 00          callq  83470 <__GI_memset>
    0.00 :	   79c3f:       e9 89 f2 ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   79c44:       48 8d 35 1d 58 0c 00    lea    0xc581d(%rip),%rsi        # 13f468 <__PRETTY_FUNCTION__.11129+0x1a8f>
    0.00 :	   79c4b:       49 8d 5f 10             lea    0x10(%r15),%rbx
    0.00 :	   79c4f:       8b 3d b3 84 2f 00       mov    0x2f84b3(%rip),%edi        # 372108 <check_action>
    0.00 :	   79c55:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79c58:       e8 03 c9 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   79c5d:       e9 51 f2 ff ff          jmpq   78eb3 <_int_malloc+0x93>
    0.00 :	   79c62:       48 8b 7c 24 28          mov    0x28(%rsp),%rdi
    0.00 :	   79c67:       48 8b 35 ba aa 2f 00    mov    0x2faaba(%rip),%rsi        # 374728 <mp_+0x8>
    0.00 :	   79c6e:       48 83 c7 40             add    $0x40,%rdi
    0.00 :	   79c72:       e8 69 ec ff ff          callq  788e0 <new_heap>
    0.00 :	   79c77:       48 85 c0                test   %rax,%rax
    0.00 :	   79c7a:       48 89 c1                mov    %rax,%rcx
    0.00 :	   79c7d:       0f 84 dc 00 00 00       je     79d5f <_int_malloc+0xf3f>
    0.00 :	   79c83:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79c88:       48 8d 51 20             lea    0x20(%rcx),%rdx
    0.00 :	   79c8c:       48 89 68 08             mov    %rbp,0x8(%rax)
    0.00 :	   79c90:       48 89 18                mov    %rbx,(%rax)
    0.00 :	   79c93:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	   79c97:       48 01 83 70 08 00 00    add    %rax,0x870(%rbx)
    0.00 :	   79c9e:       48 8b 41 10             mov    0x10(%rcx),%rax
    0.00 :	   79ca2:       48 01 05 e7 aa 2f 00    add    %rax,0x2faae7(%rip)        # 374790 <arena_mem>
    0.00 :	   79ca9:       48 89 53 58             mov    %rdx,0x58(%rbx)
    0.00 :	   79cad:       48 8b 41 10             mov    0x10(%rcx),%rax
    0.00 :	   79cb1:       48 83 e8 20             sub    $0x20,%rax
    0.00 :	   79cb5:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79cb9:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   79cbd:       49 8d 46 e0             lea    -0x20(%r14),%rax
    0.00 :	   79cc1:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   79cc5:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   79cc9:       49 8d 4c 15 00          lea    0x0(%r13,%rdx,1),%rcx
    0.00 :	   79cce:       48 c7 41 08 01 00 00    movq   $0x1,0x8(%rcx)
    0.00 :	   79cd5:       00 
    0.00 :	   79cd6:       77 5f                   ja     79d37 <_int_malloc+0xf17>
    0.00 :	   79cd8:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79cdb:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79cdf:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   79ce3:       48 89 11                mov    %rdx,(%rcx)
    0.00 :	   79ce6:       e9 af fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79ceb:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   79cee:       e9 6a fd ff ff          jmpq   79a5d <_int_malloc+0xc3d>
    0.00 :	   79cf3:       8b 3d 0f 84 2f 00       mov    0x2f840f(%rip),%edi        # 372108 <check_action>
    0.00 :	   79cf9:       48 8d 35 25 1e 0c 00    lea    0xc1e25(%rip),%rsi        # 13bb25 <__PRETTY_FUNCTION__.14063+0xbe>
    0.00 :	   79d00:       4c 89 fa                mov    %r15,%rdx
    0.00 :	   79d03:       e8 58 c8 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   79d08:       e9 28 f9 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d0d:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79d11:       48 39 c5                cmp    %rax,%rbp
    0.00 :	   79d14:       74 5f                   je     79d75 <_int_malloc+0xf55>
    0.00 :	   79d16:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	   79d1a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   79d1e:       48 89 43 28             mov    %rax,0x28(%rbx)
    0.00 :	   79d22:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79d26:       48 89 58 28             mov    %rbx,0x28(%rax)
    0.00 :	   79d2a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   79d2e:       48 89 58 20             mov    %rbx,0x20(%rax)
    0.00 :	   79d32:       e9 fe f8 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d37:       48 83 c8 05             or     $0x5,%rax
    0.00 :	   79d3b:       4b c7 44 35 e8 11 00    movq   $0x11,-0x18(%r13,%r14,1)
    0.00 :	   79d42:       00 00 
    0.00 :	   79d44:       4c 89 ee                mov    %r13,%rsi
    0.00 :	   79d47:       48 c7 01 10 00 00 00    movq   $0x10,(%rcx)
    0.00 :	   79d4e:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79d51:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   79d55:       e8 46 dd ff ff          callq  77aa0 <_int_free>
    0.00 :	   79d5a:       e9 3b fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79d5f:       45 84 ff                test   %r15b,%r15b
    0.00 :	   79d62:       0f 84 ba fc ff ff       je     79a22 <_int_malloc+0xc02>
    0.00 :	   79d68:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   79d6f:       00 
    0.00 :	   79d70:       e9 25 fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79d75:       48 89 5b 28             mov    %rbx,0x28(%rbx)
    0.00 :	   79d79:       48 89 5b 20             mov    %rbx,0x20(%rbx)
    0.00 :	   79d7d:       0f 1f 00                nopl   (%rax)
    0.00 :	   79d80:       e9 b0 f8 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d85:       48 89 de                mov    %rbx,%rsi
    0.00 :	   79d88:       48 8d 7c 05 00          lea    0x0(%rbp,%rax,1),%rdi
    0.00 :	   79d8d:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   79d92:       48 29 c6                sub    %rax,%rsi
    0.00 :	   79d95:       e8 16 df 05 00          callq  d7cb0 <mprotect>
    0.00 :	   79d9a:       85 c0                   test   %eax,%eax
    0.00 :	   79d9c:       0f 85 c0 fe ff ff       jne    79c62 <_int_malloc+0xe42>
    0.00 :	   79da2:       48 89 5d 18             mov    %rbx,0x18(%rbp)
    0.00 :	   79da6:       e9 b8 fd ff ff          jmpq   79b63 <_int_malloc+0xd43>
    0.00 :	   79dab:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   79dae:       31 ff                   xor    %edi,%edi
    0.00 :	   79db0:       41 b8 ff ff ff ff       mov    $0xffffffff,%r8d
    0.00 :	   79db6:       b9 22 00 00 00          mov    $0x22,%ecx
    0.00 :	   79dbb:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   79dc0:       48 89 ee                mov    %rbp,%rsi
    0.00 :	   79dc3:       e8 88 de 05 00          callq  d7c50 <mmap>
    0.00 :	   79dc8:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   79dcc:       48 89 c3                mov    %rax,%rbx
    0.00 :	   79dcf:       74 7a                   je     79e4b <_int_malloc+0x102b>
    0.00 :	   79dd1:       4c 8d 60 10             lea    0x10(%rax),%r12
    0.00 :	   79dd5:       41 f6 c4 0f             test   $0xf,%r12b
    0.00 :	   79dd9:       74 1f                   je     79dfa <_int_malloc+0xfda>
    0.00 :	   79ddb:       48 8d 0d 51 20 0c 00    lea    0xc2051(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79de2:       48 8d 35 59 1d 0c 00    lea    0xc1d59(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79de9:       48 8d 3d f8 57 0c 00    lea    0xc57f8(%rip),%rdi        # 13f5e8 <__PRETTY_FUNCTION__.11129+0x1c0f>
    0.00 :	   79df0:       ba dd 0b 00 00          mov    $0xbdd,%edx
    0.00 :	   79df5:       e8 c6 c9 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79dfa:       48 89 e8                mov    %rbp,%rax
    0.00 :	   79dfd:       48 83 c8 02             or     $0x2,%rax
    0.00 :	   79e01:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	   79e05:       8b 05 35 a9 2f 00       mov    0x2fa935(%rip),%eax        # 374740 <mp_+0x20>
    0.00 :	   79e0b:       83 c0 01                add    $0x1,%eax
    0.00 :	   79e0e:       3b 05 34 a9 2f 00       cmp    0x2fa934(%rip),%eax        # 374748 <mp_+0x28>
    0.00 :	   79e14:       89 05 26 a9 2f 00       mov    %eax,0x2fa926(%rip)        # 374740 <mp_+0x20>
    0.00 :	   79e1a:       7e 06                   jle    79e22 <_int_malloc+0x1002>
    0.00 :	   79e1c:       89 05 26 a9 2f 00       mov    %eax,0x2fa926(%rip)        # 374748 <mp_+0x28>
    0.00 :	   79e22:       48 89 e8                mov    %rbp,%rax
    0.00 :	   79e25:       48 03 05 2c a9 2f 00    add    0x2fa92c(%rip),%rax        # 374758 <mp_+0x38>
    0.00 :	   79e2c:       48 3b 05 2d a9 2f 00    cmp    0x2fa92d(%rip),%rax        # 374760 <mp_+0x40>
    0.00 :	   79e33:       48 89 05 1e a9 2f 00    mov    %rax,0x2fa91e(%rip)        # 374758 <mp_+0x38>
    0.00 :	   79e3a:       76 07                   jbe    79e43 <_int_malloc+0x1023>
    0.00 :	   79e3c:       48 89 05 1d a9 2f 00    mov    %rax,0x2fa91d(%rip)        # 374760 <mp_+0x40>
    0.00 :	   79e43:       4c 89 e3                mov    %r12,%rbx
    0.00 :	   79e46:       e9 cb fd ff ff          jmpq   79c16 <_int_malloc+0xdf6>
    0.00 :	   79e4b:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79e50:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79e56:       4c 8b 68 58             mov    0x58(%rax),%r13
    0.00 :	   79e5a:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   79e5e:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79e61:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79e65:       e9 f3 fb ff ff          jmpq   79a5d <_int_malloc+0xc3d>
    0.00 :	   79e6a:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79e6f:       48 8b 05 b2 a8 2f 00    mov    0x2fa8b2(%rip),%rax        # 374728 <mp_+0x8>
    0.00 :	   79e76:       48 8b 5c 24 40          mov    0x40(%rsp),%rbx
    0.00 :	   79e7b:       48 8d 44 02 20          lea    0x20(%rdx,%rax,1),%rax
    0.00 :	   79e80:       8b 15 1e a0 2f 00       mov    0x2fa01e(%rip),%edx        # 373ea4 <main_arena+0x4>
    0.00 :	   79e86:       48 89 c1                mov    %rax,%rcx
    0.00 :	   79e89:       4c 29 f1                sub    %r14,%rcx
    0.00 :	   79e8c:       83 e2 02                and    $0x2,%edx
    0.00 :	   79e8f:       48 0f 44 c1             cmove  %rcx,%rax
    0.00 :	   79e93:       48 8b 4c 24 40          mov    0x40(%rsp),%rcx
    0.00 :	   79e98:       48 8d 2c 18             lea    (%rax,%rbx,1),%rbp
    0.00 :	   79e9c:       48 f7 d1                not    %rcx
    0.00 :	   79e9f:       48 21 cd                and    %rcx,%rbp
    0.00 :	   79ea2:       48 89 4c 24 70          mov    %rcx,0x70(%rsp)
    0.00 :	   79ea7:       48 85 ed                test   %rbp,%rbp
    0.00 :	   79eaa:       49 89 ec                mov    %rbp,%r12
    0.00 :	   79ead:       0f 8e 13 03 00 00       jle    7a1c6 <_int_malloc+0x13a6>
    0.00 :	   79eb3:       48 8b 05 c6 7e 2f 00    mov    0x2f7ec6(%rip),%rax        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   79eba:       48 89 ef                mov    %rbp,%rdi
    0.00 :	   79ebd:       ff 10                   callq  *(%rax)
    0.00 :	   79ebf:       48 85 c0                test   %rax,%rax
    0.00 :	   79ec2:       48 89 c3                mov    %rax,%rbx
    0.00 :	   79ec5:       0f 84 f2 02 00 00       je     7a1bd <_int_malloc+0x139d>
    0.00 :	   79ecb:       48 8b 05 9e 7f 2f 00    mov    0x2f7f9e(%rip),%rax        # 371e70 <_DYNAMIC+0x310>
    0.00 :	   79ed2:       48 8b 00                mov    (%rax),%rax
    0.00 :	   79ed5:       48 85 c0                test   %rax,%rax
    0.00 :	   79ed8:       74 02                   je     79edc <_int_malloc+0x10bc>
    0.00 :	   79eda:       ff d0                   callq  *%rax
    0.00 :	   79edc:       45 31 e4                xor    %r12d,%r12d
    0.00 :	   79edf:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79ee5:       48 83 3d 83 a8 2f 00    cmpq   $0x0,0x2fa883(%rip)        # 374770 <mp_+0x50>
    0.00 :	   79eec:       00 
    0.00 :	   79eed:       75 07                   jne    79ef6 <_int_malloc+0x10d6>
    0.00 :	   79eef:       48 89 1d 7a a8 2f 00    mov    %rbx,0x2fa87a(%rip)        # 374770 <mp_+0x50>
    0.00 :	   79ef6:       48 89 ea                mov    %rbp,%rdx
    0.00 :	   79ef9:       48 03 15 10 a8 2f 00    add    0x2fa810(%rip),%rdx        # 374710 <main_arena+0x870>
    0.00 :	   79f00:       45 84 ff                test   %r15b,%r15b
    0.00 :	   79f03:       48 89 15 06 a8 2f 00    mov    %rdx,0x2fa806(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   79f0a:       74 0b                   je     79f17 <_int_malloc+0x10f7>
    0.00 :	   79f0c:       48 39 5c 24 50          cmp    %rbx,0x50(%rsp)
    0.00 :	   79f11:       0f 84 39 03 00 00       je     7a250 <_int_malloc+0x1430>
    0.00 :	   79f17:       8b 05 87 9f 2f 00       mov    0x2f9f87(%rip),%eax        # 373ea4 <main_arena+0x4>
    0.00 :	   79f1d:       d1 e8                   shr    %eax
    0.00 :	   79f1f:       83 f0 01                xor    $0x1,%eax
    0.00 :	   79f22:       83 e0 01                and    $0x1,%eax
    0.00 :	   79f25:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   79f2a:       0f 84 5c 01 00 00       je     7a08c <_int_malloc+0x126c>
    0.00 :	   79f30:       84 c0                   test   %al,%al
    0.00 :	   79f32:       0f 84 5c 01 00 00       je     7a094 <_int_malloc+0x1274>
    0.00 :	   79f38:       48 39 5c 24 50          cmp    %rbx,0x50(%rsp)
    0.00 :	   79f3d:       0f 87 30 01 00 00       ja     7a073 <_int_malloc+0x1253>
    0.00 :	   79f43:       48 89 d8                mov    %rbx,%rax
    0.00 :	   79f46:       48 2b 44 24 50          sub    0x50(%rsp),%rax
    0.00 :	   79f4b:       48 01 d0                add    %rdx,%rax
    0.00 :	   79f4e:       48 89 05 bb a7 2f 00    mov    %rax,0x2fa7bb(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   79f55:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79f58:       31 c0                   xor    %eax,%eax
    0.00 :	   79f5a:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   79f5f:       83 e2 0f                and    $0xf,%edx
    0.00 :	   79f62:       74 11                   je     79f75 <_int_malloc+0x1155>
    0.00 :	   79f64:       b8 10 00 00 00          mov    $0x10,%eax
    0.00 :	   79f69:       48 29 d0                sub    %rdx,%rax
    0.00 :	   79f6c:       48 8d 0c 03             lea    (%rbx,%rax,1),%rcx
    0.00 :	   79f70:       48 89 4c 24 48          mov    %rcx,0x48(%rsp)
    0.00 :	   79f75:       4a 8d 14 30             lea    (%rax,%r14,1),%rdx
    0.00 :	   79f79:       48 8d 04 2a             lea    (%rdx,%rbp,1),%rax
    0.00 :	   79f7d:       48 8d 04 03             lea    (%rbx,%rax,1),%rax
    0.00 :	   79f81:       48 29 c2                sub    %rax,%rdx
    0.00 :	   79f84:       48 03 44 24 40          add    0x40(%rsp),%rax
    0.00 :	   79f89:       48 23 44 24 70          and    0x70(%rsp),%rax
    0.00 :	   79f8e:       48 89 d3                mov    %rdx,%rbx
    0.00 :	   79f91:       48 01 c3                add    %rax,%rbx
    0.00 :	   79f94:       79 1f                   jns    79fb5 <_int_malloc+0x1195>
    0.00 :	   79f96:       48 8d 0d 96 1e 0c 00    lea    0xc1e96(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79f9d:       48 8d 35 9e 1b 0c 00    lea    0xc1b9e(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79fa4:       48 8d 3d f2 1c 0c 00    lea    0xc1cf2(%rip),%rdi        # 13bc9d <__PRETTY_FUNCTION__.14063+0x236>
    0.00 :	   79fab:       ba f6 0c 00 00          mov    $0xcf6,%edx
    0.00 :	   79fb0:       e8 0b c8 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79fb5:       48 8b 2d c4 7d 2f 00    mov    0x2f7dc4(%rip),%rbp        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   79fbc:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79fbf:       ff 55 00                callq  *0x0(%rbp)
    0.00 :	   79fc2:       48 85 c0                test   %rax,%rax
    0.00 :	   79fc5:       49 89 c4                mov    %rax,%r12
    0.00 :	   79fc8:       0f 84 8b 00 00 00       je     7a059 <_int_malloc+0x1239>
    0.00 :	   79fce:       48 8b 05 9b 7e 2f 00    mov    0x2f7e9b(%rip),%rax        # 371e70 <_DYNAMIC+0x310>
    0.00 :	   79fd5:       48 8b 00                mov    (%rax),%rax
    0.00 :	   79fd8:       48 85 c0                test   %rax,%rax
    0.00 :	   79fdb:       74 02                   je     79fdf <_int_malloc+0x11bf>
    0.00 :	   79fdd:       ff d0                   callq  *%rax
    0.00 :	   79fdf:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79fe2:       48 8b 44 24 48          mov    0x48(%rsp),%rax
    0.00 :	   79fe7:       48 8b 4c 24 48          mov    0x48(%rsp),%rcx
    0.00 :	   79fec:       48 89 05 05 9f 2f 00    mov    %rax,0x2f9f05(%rip)        # 373ef8 <main_arena+0x58>
    0.00 :	   79ff3:       49 8d 04 1c             lea    (%r12,%rbx,1),%rax
    0.00 :	   79ff7:       48 2b 44 24 48          sub    0x48(%rsp),%rax
    0.00 :	   79ffc:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7a000:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   7a004:       48 01 15 05 a7 2f 00    add    %rdx,0x2fa705(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   7a00b:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   7a010:       0f 84 84 fb ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a016:       49 8d 46 e0             lea    -0x20(%r14),%rax
    0.00 :	   7a01a:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   7a01e:       48 89 c2                mov    %rax,%rdx
    0.00 :	   7a021:       48 83 ca 01             or     $0x1,%rdx
    0.00 :	   7a025:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   7a029:       49 89 55 08             mov    %rdx,0x8(%r13)
    0.00 :	   7a02d:       49 c7 44 05 08 11 00    movq   $0x11,0x8(%r13,%rax,1)
    0.00 :	   7a034:       00 00 
    0.00 :	   7a036:       49 c7 44 05 18 11 00    movq   $0x11,0x18(%r13,%rax,1)
    0.00 :	   7a03d:       00 00 
    0.00 :	   7a03f:       0f 86 55 fb ff ff       jbe    79b9a <_int_malloc+0xd7a>
    0.00 :	   7a045:       48 8d 3d 54 9e 2f 00    lea    0x2f9e54(%rip),%rdi        # 373ea0 <main_arena>
    0.00 :	   7a04c:       4c 89 ee                mov    %r13,%rsi
    0.00 :	   7a04f:       e8 4c da ff ff          callq  77aa0 <_int_free>
    0.00 :	   7a054:       e9 41 fb ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   7a059:       31 ff                   xor    %edi,%edi
    0.00 :	   7a05b:       ff 55 00                callq  *0x0(%rbp)
    0.00 :	   7a05e:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a061:       4d 85 e4                test   %r12,%r12
    0.00 :	   7a064:       0f 84 30 fb ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a06a:       31 db                   xor    %ebx,%ebx
    0.00 :	   7a06c:       31 d2                   xor    %edx,%edx
    0.00 :	   7a06e:       e9 6f ff ff ff          jmpq   79fe2 <_int_malloc+0x11c2>
    0.00 :	   7a073:       48 8d 35 0e 58 0c 00    lea    0xc580e(%rip),%rsi        # 13f888 <__PRETTY_FUNCTION__.11129+0x1eaf>
    0.00 :	   7a07a:       48 89 da                mov    %rbx,%rdx
    0.00 :	   7a07d:       bf 03 00 00 00          mov    $0x3,%edi
    0.00 :	   7a082:       e8 d9 c4 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   7a087:       e9 0e fb ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   7a08c:       84 c0                   test   %al,%al
    0.00 :	   7a08e:       0f 85 c1 fe ff ff       jne    79f55 <_int_malloc+0x1135>
    0.00 :	   7a094:       f6 c3 0f                test   $0xf,%bl
    0.00 :	   7a097:       90                      nop
    0.00 :	   7a098:       74 1f                   je     7a0b9 <_int_malloc+0x1299>
    0.00 :	   7a09a:       48 8d 0d 92 1d 0c 00    lea    0xc1d92(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   7a0a1:       48 8d 35 9a 1a 0c 00    lea    0xc1a9a(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a0a8:       48 8d 3d 01 58 0c 00    lea    0xc5801(%rip),%rdi        # 13f8b0 <__PRETTY_FUNCTION__.11129+0x1ed7>
    0.00 :	   7a0af:       ba 11 0d 00 00          mov    $0xd11,%edx
    0.00 :	   7a0b4:       e8 07 c7 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a0b9:       45 84 ff                test   %r15b,%r15b
    0.00 :	   7a0bc:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   7a0c1:       74 9e                   je     7a061 <_int_malloc+0x1241>
    0.00 :	   7a0c3:       48 8b 05 b6 7c 2f 00    mov    0x2f7cb6(%rip),%rax        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   7a0ca:       31 ff                   xor    %edi,%edi
    0.00 :	   7a0cc:       ff 10                   callq  *(%rax)
    0.00 :	   7a0ce:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   7a0d3:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a0d6:       eb 89                   jmp    7a061 <_int_malloc+0x1241>
    0.00 :	   7a0d8:       49 8b 47 20             mov    0x20(%r15),%rax
    0.00 :	   7a0dc:       48 85 c0                test   %rax,%rax
    0.00 :	   7a0df:       0f 84 72 f6 ff ff       je     79757 <_int_malloc+0x937>
    0.00 :	   7a0e5:       4c 3b 78 28             cmp    0x28(%rax),%r15
    0.00 :	   7a0e9:       74 1f                   je     7a10a <_int_malloc+0x12ea>
    0.00 :	   7a0eb:       48 8d 0d 35 1d 0c 00    lea    0xc1d35(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7a0f2:       48 8d 35 49 1a 0c 00    lea    0xc1a49(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a0f9:       48 8d 3d c0 53 0c 00    lea    0xc53c0(%rip),%rdi        # 13f4c0 <__PRETTY_FUNCTION__.11129+0x1ae7>
    0.00 :	   7a100:       ba c9 11 00 00          mov    $0x11c9,%edx
    0.00 :	   7a105:       e8 b6 c6 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a10a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a10e:       48 3b 68 20             cmp    0x20(%rax),%rbp
    0.00 :	   7a112:       74 1f                   je     7a133 <_int_malloc+0x1313>
    0.00 :	   7a114:       48 8d 0d 0c 1d 0c 00    lea    0xc1d0c(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7a11b:       48 8d 35 20 1a 0c 00    lea    0xc1a20(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a122:       48 8d 3d c7 53 0c 00    lea    0xc53c7(%rip),%rdi        # 13f4f0 <__PRETTY_FUNCTION__.11129+0x1b17>
    0.00 :	   7a129:       ba c9 11 00 00          mov    $0x11c9,%edx
    0.00 :	   7a12e:       e8 8d c6 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a133:       48 83 7b 20 00          cmpq   $0x0,0x20(%rbx)
    0.00 :	   7a138:       74 37                   je     7a171 <_int_malloc+0x1351>
    0.00 :	   7a13a:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	   7a13e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a142:       48 89 42 28             mov    %rax,0x28(%rdx)
    0.00 :	   7a146:       48 8b 55 28             mov    0x28(%rbp),%rdx
    0.00 :	   7a14a:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a14e:       48 89 42 20             mov    %rax,0x20(%rdx)
    0.00 :	   7a152:       e9 00 f6 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a157:       8b 3d ab 7f 2f 00       mov    0x2f7fab(%rip),%edi        # 372108 <check_action>
    0.00 :	   7a15d:       48 8d 35 c1 19 0c 00    lea    0xc19c1(%rip),%rsi        # 13bb25 <__PRETTY_FUNCTION__.14063+0xbe>
    0.00 :	   7a164:       4c 89 fa                mov    %r15,%rdx
    0.00 :	   7a167:       e8 f4 c3 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   7a16c:       e9 e6 f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a171:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a175:       48 39 c5                cmp    %rax,%rbp
    0.00 :	   7a178:       74 36                   je     7a1b0 <_int_malloc+0x1390>
    0.00 :	   7a17a:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	   7a17e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a182:       48 89 43 28             mov    %rax,0x28(%rbx)
    0.00 :	   7a186:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a18a:       48 89 58 28             mov    %rbx,0x28(%rax)
    0.00 :	   7a18e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a192:       48 89 58 20             mov    %rbx,0x20(%rax)
    0.00 :	   7a196:       e9 bc f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a19b:       49 8b 5f 10             mov    0x10(%r15),%rbx
    0.00 :	   7a19f:       e9 7a f5 ff ff          jmpq   7971e <_int_malloc+0x8fe>
    0.00 :	   7a1a4:       48 8b 58 10             mov    0x10(%rax),%rbx
    0.00 :	   7a1a8:       49 89 c7                mov    %rax,%r15
    0.00 :	   7a1ab:       e9 6e f5 ff ff          jmpq   7971e <_int_malloc+0x8fe>
    0.00 :	   7a1b0:       48 89 5b 28             mov    %rbx,0x28(%rbx)
    0.00 :	   7a1b4:       48 89 5b 20             mov    %rbx,0x20(%rbx)
    0.00 :	   7a1b8:       e9 9a f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a1bd:       8b 15 e1 9c 2f 00       mov    0x2f9ce1(%rip),%edx        # 373ea4 <main_arena+0x4>
    0.00 :	   7a1c3:       83 e2 02                and    $0x2,%edx
    0.00 :	   7a1c6:       85 d2                   test   %edx,%edx
    0.00 :	   7a1c8:       75 12                   jne    7a1dc <_int_malloc+0x13bc>
    0.00 :	   7a1ca:       48 8b 54 24 40          mov    0x40(%rsp),%rdx
    0.00 :	   7a1cf:       49 8d 04 16             lea    (%r14,%rdx,1),%rax
    0.00 :	   7a1d3:       4c 8d 24 28             lea    (%rax,%rbp,1),%r12
    0.00 :	   7a1d7:       4c 23 64 24 70          and    0x70(%rsp),%r12
    0.00 :	   7a1dc:       49 81 fc ff ff 0f 00    cmp    $0xfffff,%r12
    0.00 :	   7a1e3:       bd 00 00 10 00          mov    $0x100000,%ebp
    0.00 :	   7a1e8:       49 0f 47 ec             cmova  %r12,%rbp
    0.00 :	   7a1ec:       48 39 6c 24 28          cmp    %rbp,0x28(%rsp)
    0.00 :	   7a1f1:       0f 83 a3 f9 ff ff       jae    79b9a <_int_malloc+0xd7a>
    0.00 :	   7a1f7:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   7a1fa:       31 ff                   xor    %edi,%edi
    0.00 :	   7a1fc:       41 b8 ff ff ff ff       mov    $0xffffffff,%r8d
    0.00 :	   7a202:       b9 22 00 00 00          mov    $0x22,%ecx
    0.00 :	   7a207:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   7a20c:       48 89 ee                mov    %rbp,%rsi
    0.00 :	   7a20f:       e8 3c da 05 00          callq  d7c50 <mmap>
    0.00 :	   7a214:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   7a218:       48 89 c3                mov    %rax,%rbx
    0.00 :	   7a21b:       0f 84 79 f9 ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a221:       83 0d 7c 9c 2f 00 02    orl    $0x2,0x2f9c7c(%rip)        # 373ea4 <main_arena+0x4>
    0.00 :	   7a228:       48 85 c0                test   %rax,%rax
    0.00 :	   7a22b:       0f 84 69 f9 ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a231:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a234:       49 01 ec                add    %rbp,%r12
    0.00 :	   7a237:       41 0f 94 c7             sete   %r15b
    0.00 :	   7a23b:       e9 a5 fc ff ff          jmpq   79ee5 <_int_malloc+0x10c5>
    0.00 :	   7a240:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   7a245:       0f 84 8b f8 ff ff       je     79ad6 <_int_malloc+0xcb6>
    0.00 :	   7a24b:       e9 2a f8 ff ff          jmpq   79a7a <_int_malloc+0xc5a>
    0.00 :	   7a250:       4a 8d 44 35 00          lea    0x0(%rbp,%r14,1),%rax
    0.00 :	   7a255:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7a259:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   7a25d:       e9 38 f9 ff ff          jmpq   79b9a <_int_malloc+0xd7a>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000082e60 <memcmp>:
    0.00 :	   82e60:       48 85 d2                test   %rdx,%rdx
    0.00 :	   82e63:       0f 84 f7 00 00 00       je     82f60 <memcmp+0x100>
    0.00 :	   82e69:       48 83 fa 01             cmp    $0x1,%rdx
    0.00 :	   82e6d:       0f 8e bd 00 00 00       jle    82f30 <memcmp+0xd0>
    0.00 :	   82e73:       48 29 fe                sub    %rdi,%rsi
    0.00 :	   82e76:       49 89 d2                mov    %rdx,%r10
 ??:0
  100.00 :	   82e79:       49 83 fa 20             cmp    $0x20,%r10
    0.00 :	   82e7d:       0f 8d e0 00 00 00       jge    82f63 <memcmp+0x103>
    0.00 :	   82e83:       49 f7 c2 01 00 00 00    test   $0x1,%r10
    0.00 :	   82e8a:       74 1d                   je     82ea9 <memcmp+0x49>
    0.00 :	   82e8c:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	   82e8f:       0f b6 14 37             movzbl (%rdi,%rsi,1),%edx
    0.00 :	   82e93:       49 83 ea 01             sub    $0x1,%r10
    0.00 :	   82e97:       0f 84 99 00 00 00       je     82f36 <memcmp+0xd6>
    0.00 :	   82e9d:       48 83 c7 01             add    $0x1,%rdi
    0.00 :	   82ea1:       29 d0                   sub    %edx,%eax
    0.00 :	   82ea3:       0f 85 8f 00 00 00       jne    82f38 <memcmp+0xd8>
    0.00 :	   82ea9:       49 f7 c2 02 00 00 00    test   $0x2,%r10
    0.00 :	   82eb0:       74 15                   je     82ec7 <memcmp+0x67>
    0.00 :	   82eb2:       0f b7 07                movzwl (%rdi),%eax
    0.00 :	   82eb5:       0f b7 14 37             movzwl (%rdi,%rsi,1),%edx
    0.00 :	   82eb9:       49 83 ea 02             sub    $0x2,%r10
    0.00 :	   82ebd:       74 7a                   je     82f39 <memcmp+0xd9>
    0.00 :	   82ebf:       48 83 c7 02             add    $0x2,%rdi
    0.00 :	   82ec3:       39 d0                   cmp    %edx,%eax
    0.00 :	   82ec5:       75 72                   jne    82f39 <memcmp+0xd9>
    0.00 :	   82ec7:       49 f7 c2 04 00 00 00    test   $0x4,%r10
    0.00 :	   82ece:       74 13                   je     82ee3 <memcmp+0x83>
    0.00 :	   82ed0:       8b 07                   mov    (%rdi),%eax
    0.00 :	   82ed2:       8b 14 37                mov    (%rdi,%rsi,1),%edx
    0.00 :	   82ed5:       49 83 ea 04             sub    $0x4,%r10
    0.00 :	   82ed9:       74 5e                   je     82f39 <memcmp+0xd9>
    0.00 :	   82edb:       48 83 c7 04             add    $0x4,%rdi
    0.00 :	   82edf:       39 d0                   cmp    %edx,%eax
    0.00 :	   82ee1:       75 56                   jne    82f39 <memcmp+0xd9>
    0.00 :	   82ee3:       49 f7 c2 08 00 00 00    test   $0x8,%r10
    0.00 :	   82eea:       74 16                   je     82f02 <memcmp+0xa2>
    0.00 :	   82eec:       48 8b 07                mov    (%rdi),%rax
    0.00 :	   82eef:       48 8b 14 37             mov    (%rdi,%rsi,1),%rdx
    0.00 :	   82ef3:       49 83 ea 08             sub    $0x8,%r10
    0.00 :	   82ef7:       74 40                   je     82f39 <memcmp+0xd9>
    0.00 :	   82ef9:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	   82efd:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   82f00:       75 37                   jne    82f39 <memcmp+0xd9>
    0.00 :	   82f02:       f3 0f 6f 0f             movdqu (%rdi),%xmm1
    0.00 :	   82f06:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   82f0b:       66 0f 74 c8             pcmpeqb %xmm0,%xmm1
    0.00 :	   82f0f:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   82f13:       31 c0                   xor    %eax,%eax
    0.00 :	   82f15:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   82f1b:       74 43                   je     82f60 <memcmp+0x100>
    0.00 :	   82f1d:       0f bc ca                bsf    %edx,%ecx
    0.00 :	   82f20:       48 8d 0c 0f             lea    (%rdi,%rcx,1),%rcx
    0.00 :	   82f24:       0f b6 01                movzbl (%rcx),%eax
    0.00 :	   82f27:       0f b6 14 0e             movzbl (%rsi,%rcx,1),%edx
    0.00 :	   82f2b:       eb 09                   jmp    82f36 <memcmp+0xd6>
    0.00 :	   82f2d:       0f 1f 00                nopl   (%rax)
    0.00 :	   82f30:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	   82f33:       0f b6 16                movzbl (%rsi),%edx
    0.00 :	   82f36:       29 d0                   sub    %edx,%eax
    0.00 :	   82f38:       c3                      retq   
    0.00 :	   82f39:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   82f3c:       74 22                   je     82f60 <memcmp+0x100>
    0.00 :	   82f3e:       49 89 c3                mov    %rax,%r11
    0.00 :	   82f41:       49 29 d3                sub    %rdx,%r11
    0.00 :	   82f44:       49 0f bc cb             bsf    %r11,%rcx
    0.00 :	   82f48:       48 c1 f9 03             sar    $0x3,%rcx
    0.00 :	   82f4c:       48 c1 e1 03             shl    $0x3,%rcx
    0.00 :	   82f50:       48 d3 f8                sar    %cl,%rax
    0.00 :	   82f53:       0f b6 c0                movzbl %al,%eax
    0.00 :	   82f56:       48 d3 fa                sar    %cl,%rdx
    0.00 :	   82f59:       0f b6 d2                movzbl %dl,%edx
    0.00 :	   82f5c:       29 d0                   sub    %edx,%eax
    0.00 :	   82f5e:       c3                      retq   
    0.00 :	   82f5f:       90                      nop
    0.00 :	   82f60:       31 c0                   xor    %eax,%eax
    0.00 :	   82f62:       c3                      retq   
    0.00 :	   82f63:       49 89 d3                mov    %rdx,%r11
    0.00 :	   82f66:       49 01 fb                add    %rdi,%r11
    0.00 :	   82f69:       49 89 f8                mov    %rdi,%r8
    0.00 :	   82f6c:       49 83 e0 0f             and    $0xf,%r8
    0.00 :	   82f70:       74 25                   je     82f97 <memcmp+0x137>
    0.00 :	   82f72:       f3 0f 6f 0f             movdqu (%rdi),%xmm1
    0.00 :	   82f76:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   82f7b:       66 0f 74 c8             pcmpeqb %xmm0,%xmm1
    0.00 :	   82f7f:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   82f83:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   82f89:       0f 85 61 01 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   82f8f:       49 f7 d8                neg    %r8
    0.00 :	   82f92:       4a 8d 7c 07 10          lea    0x10(%rdi,%r8,1),%rdi
    0.00 :	   82f97:       48 f7 c6 0f 00 00 00    test   $0xf,%rsi
    0.00 :	   82f9e:       0f 84 5f 01 00 00       je     83103 <memcmp+0x2a3>
    0.00 :	   82fa4:       48 f7 c7 10 00 00 00    test   $0x10,%rdi
    0.00 :	   82fab:       74 1d                   je     82fca <memcmp+0x16a>
    0.00 :	   82fad:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   82fb2:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   82fb6:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   82fba:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   82fc0:       0f 85 2a 01 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   82fc6:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   82fca:       4d 89 da                mov    %r11,%r10
    0.00 :	   82fcd:       49 83 e2 e0             and    $0xffffffffffffffe0,%r10
    0.00 :	   82fd1:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   82fd4:       0f 8d 03 01 00 00       jge    830dd <memcmp+0x27d>
    0.00 :	   82fda:       48 f7 c7 20 00 00 00    test   $0x20,%rdi
    0.00 :	   82fe1:       74 3a                   je     8301d <memcmp+0x1bd>
    0.00 :	   82fe3:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   82fe8:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   82fec:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   82ff0:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   82ff6:       0f 85 f4 00 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   82ffc:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83000:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   83005:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83009:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   8300d:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83013:       0f 85 d7 00 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   83019:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   8301d:       4d 89 da                mov    %r11,%r10
    0.00 :	   83020:       49 83 e2 c0             and    $0xffffffffffffffc0,%r10
    0.00 :	   83024:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   83027:       7d 71                   jge    8309a <memcmp+0x23a>
    0.00 :	   83029:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   8302e:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83032:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83036:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8303c:       0f 85 ae 00 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   83042:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83046:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   8304b:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   8304f:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83053:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83059:       0f 85 91 00 00 00       jne    830f0 <memcmp+0x290>
    0.00 :	   8305f:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83063:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   83068:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   8306c:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83070:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83076:       75 78                   jne    830f0 <memcmp+0x290>
    0.00 :	   83078:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   8307c:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   83081:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83085:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83089:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8308f:       75 5f                   jne    830f0 <memcmp+0x290>
    0.00 :	   83091:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83095:       49 39 fa                cmp    %rdi,%r10
    0.00 :	   83098:       75 8f                   jne    83029 <memcmp+0x1c9>
    0.00 :	   8309a:       4d 89 da                mov    %r11,%r10
    0.00 :	   8309d:       49 83 e2 e0             and    $0xffffffffffffffe0,%r10
    0.00 :	   830a1:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   830a4:       7d 37                   jge    830dd <memcmp+0x27d>
    0.00 :	   830a6:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   830ab:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   830af:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   830b3:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   830b9:       75 35                   jne    830f0 <memcmp+0x290>
    0.00 :	   830bb:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   830bf:       f3 0f 6f 04 37          movdqu (%rdi,%rsi,1),%xmm0
    0.00 :	   830c4:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   830c8:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   830cc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   830d2:       75 1c                   jne    830f0 <memcmp+0x290>
    0.00 :	   830d4:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   830d8:       49 39 fa                cmp    %rdi,%r10
    0.00 :	   830db:       75 c9                   jne    830a6 <memcmp+0x246>
    0.00 :	   830dd:       49 29 fb                sub    %rdi,%r11
    0.00 :	   830e0:       0f 84 7a fe ff ff       je     82f60 <memcmp+0x100>
    0.00 :	   830e6:       4d 89 da                mov    %r11,%r10
    0.00 :	   830e9:       e9 95 fd ff ff          jmpq   82e83 <memcmp+0x23>
    0.00 :	   830ee:       66 90                   xchg   %ax,%ax
    0.00 :	   830f0:       0f bc ca                bsf    %edx,%ecx
    0.00 :	   830f3:       0f b6 04 0f             movzbl (%rdi,%rcx,1),%eax
    0.00 :	   830f7:       48 01 fe                add    %rdi,%rsi
    0.00 :	   830fa:       0f b6 14 0e             movzbl (%rsi,%rcx,1),%edx
    0.00 :	   830fe:       e9 33 fe ff ff          jmpq   82f36 <memcmp+0xd6>
    0.00 :	   83103:       4d 89 da                mov    %r11,%r10
    0.00 :	   83106:       49 83 e2 e0             and    $0xffffffffffffffe0,%r10
    0.00 :	   8310a:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   8310d:       7d ce                   jge    830dd <memcmp+0x27d>
    0.00 :	   8310f:       48 f7 c7 10 00 00 00    test   $0x10,%rdi
    0.00 :	   83116:       74 1e                   je     83136 <memcmp+0x2d6>
    0.00 :	   83118:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   8311d:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83121:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83125:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8312b:       75 c3                   jne    830f0 <memcmp+0x290>
    0.00 :	   8312d:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83131:       49 39 fa                cmp    %rdi,%r10
    0.00 :	   83134:       74 a7                   je     830dd <memcmp+0x27d>
    0.00 :	   83136:       4d 89 da                mov    %r11,%r10
    0.00 :	   83139:       49 83 e2 c0             and    $0xffffffffffffffc0,%r10
    0.00 :	   8313d:       48 f7 c7 20 00 00 00    test   $0x20,%rdi
    0.00 :	   83144:       74 36                   je     8317c <memcmp+0x31c>
    0.00 :	   83146:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   8314b:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   8314f:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83153:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83159:       75 95                   jne    830f0 <memcmp+0x290>
    0.00 :	   8315b:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   8315f:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   83164:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83168:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   8316c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83172:       0f 85 78 ff ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   83178:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   8317c:       49 39 fa                cmp    %rdi,%r10
    0.00 :	   8317f:       0f 84 15 ff ff ff       je     8309a <memcmp+0x23a>
    0.00 :	   83185:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   8318a:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   8318e:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83192:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83198:       0f 85 52 ff ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   8319e:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   831a2:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   831a7:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   831ab:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   831af:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   831b5:       0f 85 35 ff ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   831bb:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   831bf:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   831c4:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   831c8:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   831cc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   831d2:       0f 85 18 ff ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   831d8:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   831dc:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   831e1:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   831e5:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   831e9:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   831ef:       0f 85 fb fe ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   831f5:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   831f9:       49 39 fa                cmp    %rdi,%r10
    0.00 :	   831fc:       75 87                   jne    83185 <memcmp+0x325>
    0.00 :	   831fe:       4d 89 da                mov    %r11,%r10
    0.00 :	   83201:       49 83 e2 e0             and    $0xffffffffffffffe0,%r10
    0.00 :	   83205:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   83208:       0f 8d cf fe ff ff       jge    830dd <memcmp+0x27d>
    0.00 :	   8320e:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   83213:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83217:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   8321b:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   83221:       0f 85 c9 fe ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   83227:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   8322b:       66 0f 6f 04 37          movdqa (%rdi,%rsi,1),%xmm0
    0.00 :	   83230:       66 0f 74 07             pcmpeqb (%rdi),%xmm0
    0.00 :	   83234:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   83238:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8323e:       0f 85 ac fe ff ff       jne    830f0 <memcmp+0x290>
    0.00 :	   83244:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   83248:       4c 39 d7                cmp    %r10,%rdi
    0.00 :	   8324b:       75 c1                   jne    8320e <memcmp+0x3ae>
    0.00 :	   8324d:       49 29 fb                sub    %rdi,%r11
    0.00 :	   83250:       0f 84 0a fd ff ff       je     82f60 <memcmp+0x100>
    0.00 :	   83256:       4d 89 da                mov    %r11,%r10
    0.00 :	   83259:       e9 25 fc ff ff          jmpq   82e83 <memcmp+0x23>
    0.00 :	   8325e:       66 90                   xchg   %ax,%ax

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000dc030 <__send>:
 ??:0
  100.00 :	   dc030:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   dc035:       48 89 6c 24 e0          mov    %rbp,-0x20(%rsp)
    0.00 :	   dc03a:       89 cb                   mov    %ecx,%ebx
    0.00 :	   dc03c:       4c 89 64 24 e8          mov    %r12,-0x18(%rsp)
    0.00 :	   dc041:       4c 89 6c 24 f0          mov    %r13,-0x10(%rsp)
    0.00 :	   dc046:       49 89 f4                mov    %rsi,%r12
    0.00 :	   dc049:       4c 89 74 24 f8          mov    %r14,-0x8(%rsp)
    0.00 :	   dc04e:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	   dc052:       8b 05 5c b6 29 00       mov    0x29b65c(%rip),%eax        # 3776b4 <__libc_multiple_threads>
    0.00 :	   dc058:       41 89 fd                mov    %edi,%r13d
    0.00 :	   dc05b:       48 89 d5                mov    %rdx,%rbp
    0.00 :	   dc05e:       85 c0                   test   %eax,%eax
    0.00 :	   dc060:       75 3e                   jne    dc0a0 <__send+0x70>
    0.00 :	   dc062:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   dc065:       45 31 c0                xor    %r8d,%r8d
    0.00 :	   dc068:       4c 63 d1                movslq %ecx,%r10
    0.00 :	   dc06b:       48 63 ff                movslq %edi,%rdi
    0.00 :	   dc06e:       b8 2c 00 00 00          mov    $0x2c,%eax
    0.00 :	   dc073:       0f 05                   syscall 
    0.00 :	   dc075:       48 3d 00 f0 ff ff       cmp    $0xfffffffffffff000,%rax
    0.00 :	   dc07b:       48 89 c3                mov    %rax,%rbx
    0.00 :	   dc07e:       77 56                   ja     dc0d6 <__send+0xa6>
    0.00 :	   dc080:       48 89 d8                mov    %rbx,%rax
    0.00 :	   dc083:       48 8b 6c 24 08          mov    0x8(%rsp),%rbp
    0.00 :	   dc088:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	   dc08c:       4c 8b 64 24 10          mov    0x10(%rsp),%r12
    0.00 :	   dc091:       4c 8b 6c 24 18          mov    0x18(%rsp),%r13
    0.00 :	   dc096:       4c 8b 74 24 20          mov    0x20(%rsp),%r14
    0.00 :	   dc09b:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	   dc09f:       c3                      retq   
    0.00 :	   dc0a0:       e8 8b c1 00 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   dc0a5:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   dc0a8:       41 89 c6                mov    %eax,%r14d
    0.00 :	   dc0ab:       45 31 c0                xor    %r8d,%r8d
    0.00 :	   dc0ae:       4c 63 d3                movslq %ebx,%r10
    0.00 :	   dc0b1:       48 89 ea                mov    %rbp,%rdx
    0.00 :	   dc0b4:       4c 89 e6                mov    %r12,%rsi
    0.00 :	   dc0b7:       49 63 fd                movslq %r13d,%rdi
    0.00 :	   dc0ba:       b8 2c 00 00 00          mov    $0x2c,%eax
    0.00 :	   dc0bf:       0f 05                   syscall 
    0.00 :	   dc0c1:       48 3d 00 f0 ff ff       cmp    $0xfffffffffffff000,%rax
    0.00 :	   dc0c7:       48 89 c3                mov    %rax,%rbx
    0.00 :	   dc0ca:       77 2a                   ja     dc0f6 <__send+0xc6>
    0.00 :	   dc0cc:       44 89 f7                mov    %r14d,%edi
    0.00 :	   dc0cf:       e8 bc c1 00 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   dc0d4:       eb aa                   jmp    dc080 <__send+0x50>
    0.00 :	   dc0d6:       89 c1                   mov    %eax,%ecx
    0.00 :	   dc0d8:       48 8b 15 59 5d 29 00    mov    0x295d59(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   dc0df:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   dc0e6:       00 00 
    0.00 :	   dc0e8:       f7 d9                   neg    %ecx
    0.00 :	   dc0ea:       48 c7 c3 ff ff ff ff    mov    $0xffffffffffffffff,%rbx
    0.00 :	   dc0f1:       89 0c 10                mov    %ecx,(%rax,%rdx,1)
    0.00 :	   dc0f4:       eb 8a                   jmp    dc080 <__send+0x50>
    0.00 :	   dc0f6:       89 c1                   mov    %eax,%ecx
    0.00 :	   dc0f8:       48 8b 15 39 5d 29 00    mov    0x295d39(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   dc0ff:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   dc106:       00 00 
    0.00 :	   dc108:       f7 d9                   neg    %ecx
    0.00 :	   dc10a:       48 c7 c3 ff ff ff ff    mov    $0xffffffffffffffff,%rbx
    0.00 :	   dc111:       89 0c 10                mov    %ecx,(%rax,%rdx,1)
    0.00 :	   dc114:       eb b6                   jmp    dc0cc <__send+0x9c>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_nat.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_nat.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000750 <nf_nat_in>:
    0.00 :	 750:   48 83 ec 18             sub    $0x18,%rsp
    0.00 :	 784:   48 89 1c 24 48 89       xor    0x2e7402f8(%rbx),%eax
    0.00 :	 78a:   6c 24 08 48 89 f3       mov    0xc4(%rbx),%edx
 ??:0
  100.00 :	 790:   4c 89 64 24 10 8b b6    mov    0xd8(%rbx),%rax
    0.00 :	 797:   c4 00 00 00 48          cmp    %r12d,0x10(%rax,%rdx,1)
    0.00 :	 79c:   8b 83                   je     7b8 <nf_nat_rule_cleanup+0x788>
    0.00 :	 79e:   d8 00 00 00             mov    0x58(%rbx),%rdi
    0.00 :	 7a2:   44 8b 64                test   %rdi,%rdi
    0.00 :	 7a5:   30 10                   je     7b8 <nf_nat_rule_cleanup+0x788>
    0.00 :	 7a7:   48 89 de e8             test   $0x1,%dil
    0.00 :	 7ab:   a1 fb                   je     7d0 <nf_nat_rule_cleanup+0x7a0>
    0.00 :	 7ad:   ff ff 85 c0 89 c5 74    movq   $0x0,0x58(%rbx)
    0.00 :	 7b4:   33 
    0.00 :	 7b5:   83 f8 02                nopl   (%rax)
    0.00 :	 7b8:   74 2e                   mov    %ebp,%eax
    0.00 :	 7ba:   8b 93 c4 00             mov    (%rsp),%rbx
    0.00 :	 7be:   00 00 48 8b 83          mov    0x8(%rsp),%rbp
    0.00 :	 7c3:   d8 00 00 00 44          mov    0x10(%rsp),%r12
    0.00 :	 7c8:   39 64 10 10             add    $0x18,%rsp
    0.00 :	 7cc:   74                      retq   
    0.00 :	 7cd:   1a 48 8b                nopl   (%rax)
    0.00 :	 7d0:   7b 58 48 85             and    $0xfffffffffffffffe,%rdi
    0.00 :	 7d4:   ff 74 11 40 f6          callq  7d9 <nf_nat_rule_cleanup+0x7a9>
    0.00 :	 7d9:   c7 01                   jmp    7ad <nf_nat_rule_cleanup+0x77d>
         :	 7db:   74                      nop
         :	 7dc:   Address 0x00000000000007dc is out of bounds.
         :

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000082a0 <journal_add_journal_head>:
    0.00 :	    82a0:       41 56                   push   %r14
    0.00 :	    82d2:       45 31 f6                test   $0x40,%ah
    0.00 :	    82d5:       41 55                   jne    8320 <journal_add_journal_head+0x50>
    0.00 :	    82d7:       41 bd 0e 00             mov    (%r12),%eax
    0.00 :	    82db:       00 00                   test   %eax,%eax
    0.00 :	    82dd:       41 54 4c 8d 67 60       jle    83d6 <journal_add_journal_head+0x106>
    0.00 :	    82e3:       55 48 8d                test   %rdx,%rdx
    0.00 :	    82e6:       6f 02                   jne    8350 <journal_add_journal_head+0x80>
    0.00 :	    82e8:       53 48 89 fb eb          lock andb $0xdf,0x0(%rbp)
    0.00 :	    82ed:       2f 66 90                mov    (%rbx),%rax
    0.00 :	    82f0:       f0 0f                   xor    %edx,%edx
    0.00 :	    82f2:       ba 2b 15                test   $0x40,%ah
    0.00 :	    82f5:       19 c0                   jne    82c0 <journal_next_log_block+0x50>
    0.00 :	    82f7:       85 c0 0f 85 f3 00 00    mov    0x0(%rip),%rdi        # 82fe <journal_add_journal_head+0x2e>
    0.00 :	    82fe:       00 48 8b 03 f6          mov    $0x50,%esi
    0.00 :	    8303:       c4 40 75 49 41          callq  8308 <journal_add_journal_head+0x38>
    0.00 :	    8308:       8b 04 24                test   %rax,%rax
    0.00 :	    830b:       85 c0 0f                mov    %rax,%rdx
    0.00 :	    830e:       8e f3                   je     8370 <journal_add_journal_head+0xa0>
    0.00 :	    8310:       00 00 00                mov    %rdx,%rdi
    0.00 :	    8313:       48 85 d2                mov    %r13,%rcx
    0.00 :	    8316:       75 68 f0                mov    %r14,%rax
    0.00 :	    8319:       80 65 00                rep stos %rax,%es:(%rdi)
    0.00 :	    831c:       df 48                   jmp    82c0 <journal_next_log_block+0x50>
    0.00 :	    831e:       8b 03                   xchg   %ax,%ax
    0.00 :	    8320:       31 d2 f6 c4             mov    0x40(%rbx),%rdi
    0.00 :	    8324:       40 75 c9 48             addl   $0x1,0x8(%rdi)
 ??:0
  100.00 :	    8328:       8b 3d 00 00 00          lock andb $0xdf,0x2(%rbx)
    0.00 :	    832d:       00 be 50                test   %rdx,%rdx
    0.00 :	    8330:       00 00                   je     8341 <journal_add_journal_head+0x71>
    0.00 :	    8332:       00 e8 00 00 00 00 48    mov    0x0(%rip),%rdi        # 8339 <journal_add_journal_head+0x69>
    0.00 :	    8339:       85 c0 48                mov    %rdx,%rsi
    0.00 :	    833c:       89 c2 74 60 48          callq  8341 <journal_add_journal_head+0x71>
    0.00 :	    8341:       89 d7 4c 89             mov    0x40(%rbx),%rax
    0.00 :	    8345:       e9                      pop    %rbx
    0.00 :	    8346:       4c                      pop    %rbp
    0.00 :	    8347:       89 f0                   pop    %r12
    0.00 :	    8349:       f3 48                   pop    %r13
    0.00 :	    834b:       ab eb                   pop    %r14
    0.00 :	    834d:       a2                      retq   
    0.00 :	    834e:       66 90                   xchg   %ax,%ax
    0.00 :	    8350:       48 8b 7b 40             lea    0x1(%rbx),%rax
    0.00 :	    8354:       83 47 08 01 f0          lock orb $0x40,0x1(%rbx)
    0.00 :	    8359:       80 63 02 df             mov    %rdx,0x40(%rbx)
    0.00 :	    835d:       48 85 d2                mov    %rbx,(%rdx)
    0.00 :	    8360:       74 0f 48 8b             lock incl 0x60(%rbx)
    0.00 :	    8364:       3d 00 00                mov    %rdx,%rdi
    0.00 :	    8367:       00 00                   xor    %edx,%edx
    0.00 :	    8369:       48 89                   jmp    8324 <journal_add_journal_head+0x54>
    0.00 :	    836b:       d6 e8 00 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    8370:       00 48 8b 43 40 5b 5d    mov    $0x0,%rsi
    0.00 :	    8377:       41 5c 41 5d 41 5e c3    mov    $0x0,%rdi
    0.00 :	    837e:       66 90 48 8d 43          callq  8383 <journal_add_journal_head+0xb3>
    0.00 :	    8383:       01 f0                   test   %eax,%eax
    0.00 :	    8385:       80 4b                   jne    83f0 <journal_add_journal_head+0x120>
    0.00 :	    8387:       01 40 48 89 53 40 48    nopw   0x0(%rax,%rax,1)
    0.00 :	    838e:       89 1a 
    0.00 :	    8390:       f0 ff 43 60 48          callq  8395 <journal_add_journal_head+0xc5>
    0.00 :	    8395:       89 d7 31 d2 eb b9 0f    mov    0x0(%rip),%rdi        # 839c <journal_add_journal_head+0xcc>
    0.00 :	    839c:       1f 44 00 00 48          mov    $0x50,%esi
    0.00 :	    83a1:       c7 c6 00 00 00          callq  83a6 <journal_add_journal_head+0xd6>
    0.00 :	    83a6:       00 48 c7                test   %rax,%rax
    0.00 :	    83a9:       c7 00 00                mov    %rax,%rdx
    0.00 :	    83ac:       00 00                   je     8390 <journal_add_journal_head+0xc0>
    0.00 :	    83ae:       e8 00 00 00 00          jmpq   8310 <journal_add_journal_head+0x40>
    0.00 :	    83b3:       85 c0 75 69 66          lock btsl $0x15,(%rbx)
    0.00 :	    83b8:       0f 1f                   sbb    %eax,%eax
    0.00 :	    83ba:       84 00                   test   %eax,%eax
    0.00 :	    83bc:       00 00 00 00 e8 00       je     82cf <journal_next_log_block+0x5f>
    0.00 :	    83c2:       00 00 00 48 8b 3d       nopw   0x0(%rax,%rax,1)
    0.00 :	    83c8:       00 00                   pause  
    0.00 :	    83ca:       00 00 be                mov    (%rbx),%rax
    0.00 :	    83cd:       50 00 00 00 e8          test   $0x200000,%eax
    0.00 :	    83d2:       00 00                   jne    83c8 <journal_add_journal_head+0xf8>
    0.00 :	    83d4:       00 00                   jmp    83b3 <journal_add_journal_head+0xe3>
    0.00 :	    83d6:       48 85 c0 48             mov    0x10(%rbx),%rax
    0.00 :	    83da:       89 c2 74                test   %rax,%rax
    0.00 :	    83dd:       e2 e9                   je     83ea <journal_add_journal_head+0x11a>
    0.00 :	    83df:       5d ff ff ff f0          cmpq   $0x0,0x18(%rax)
    0.00 :	    83e4:       0f ba 2b 15 19 c0       jne    82e3 <journal_add_journal_head+0x13>
    0.00 :	    83ea:       85 c0                   ud2    
    0.00 :	    83ec:       0f 84                   jmp    83ec <journal_add_journal_head+0x11c>
    0.00 :	    83ee:       0d ff                   xchg   %ax,%ax
    0.00 :	    83f0:       ff ff 66 0f 1f 44 00    mov    $0x0,%rsi
    0.00 :	    83f7:       00 f3 90 48 8b 03 a9    mov    $0x0,%rdi
    0.00 :	    83fe:       00 00                   xor    %eax,%eax
    0.00 :	    8400:       20 00 75 f4 eb          callq  8405 <journal_add_journal_head+0x135>
    0.00 :	    8405:       dd 48                   jmp    8390 <journal_add_journal_head+0xc0>
         :	    8407:       8b 43 10 48 85 c0 74    nopw   0x0(%rax,%rax,1)
         :	    840e:       0b 48 
         :	    8410:       83 78 18 00             sub    $0x28,%rsp
         :	    8414:       0f 85 f9 fe ff          lea    0x14(%rsp),%rsi
         :	    8419:       ff 0f 0b eb fe          mov    %rbx,0x18(%rsp)
         :	    841e:       66 90 48 c7 c6          mov    %rbp,0x20(%rsp)
         :	    8423:       00 00 00                mov    %rdi,%rbx
         :	    8426:       00 48 c7 c7 00          callq  842b <journal_add_journal_head+0x15b>
         :	    842b:       00 00                   test   %eax,%eax
         :	    842d:       00 31                   je     8440 <journal_get_descriptor_buffer>
         :	    842f:       c0 e8                   xor    %eax,%eax
         :	    8431:       00 00 00 00 eb          mov    0x18(%rsp),%rbx

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000005b40 <ext3_do_update_inode>:
 ??:0
  100.00 :	    5b40:       41 57                   push   %r15
    0.00 :	    5b72:       41 56                   or     %al,(%rax)
    0.00 :	    5b74:       49 89                   add    %al,(%rax)
    0.00 :	    5b76:       fe 41                   add    %al,%bh
    0.00 :	    5b78:       55 4c 8d                rex.R and $0xc,%al
    0.00 :	    5b7b:       ae 20                   add    %al,(%rax)
    0.00 :	    5b7d:       ff ff                   add    %al,(%rax)
    0.00 :	    5b7f:       ff 41 54 49 8d          jmpq   5ced <ext3_do_update_inode+0x17d>
    0.00 :	    5b84:       45 58 49 89             nopl   0x0(%rax)
    0.00 :	    5b88:       f4 55 53 48 83          mov    0x4(%r12),%eax
    0.00 :	    5b8d:       ec 18 4c 8b             mov    %ax,0x2(%rbx)
    0.00 :	    5b91:       3a 49 8b 5f 28          mov    0x8(%r12),%eax
    0.00 :	    5b96:       48 03 5a 08             mov    %ax,0x18(%rbx)
    0.00 :	    5b9a:       48 89 44 24             mov    0x4c(%r13),%edi
    0.00 :	    5b9e:       10 c7                   test   %edi,%edi
    0.00 :	    5ba0:       44 24 08 00 00 00       jne    5d61 <ext3_do_update_inode+0x1f1>
    0.00 :	    5ba6:       00 c7 44 24 0c 00       movzwl 0x6(%r12),%eax
    0.00 :	    5bac:       00 00 00 e9             mov    %ax,0x78(%rbx)
    0.00 :	    5bb0:       69 01 00 00 0f 1f       movzwl 0xa(%r12),%eax
    0.00 :	    5bb6:       40 00 41 8b             mov    %ax,0x7a(%rbx)
    0.00 :	    5bba:       44 24 04 66 89 43 02    mov    0xbc(%r12),%eax
    0.00 :	    5bc1:       41 
    0.00 :	    5bc2:       8b 44 24 08             mov    %ax,0x1a(%rbx)
    0.00 :	    5bc6:       66 89 43 18 41 8b 7d    mov    0xa8(%r13),%rax
    0.00 :	    5bcd:       4c 85 ff                cmp    %eax,0x4(%rbx)
    0.00 :	    5bd0:       0f 85                   je     5bdd <ext3_do_update_inode+0x6d>
    0.00 :	    5bd2:       bb 01 00                mov    %eax,0x4(%rbx)
    0.00 :	    5bd5:       00 41 0f b7 44 24 06    movl   $0x1,0xc(%rsp)
    0.00 :	    5bdc:       66 
    0.00 :	    5bdd:       89 43 78 41 0f b7 44    mov    0xd8(%r12),%rax
    0.00 :	    5be4:       24 
    0.00 :	    5be5:       0a 66 89                mov    %eax,0x8(%rbx)
    0.00 :	    5be8:       43 7a 41 8b 84 24 bc    mov    0xf8(%r12),%rax
    0.00 :	    5bef:       00 
    0.00 :	    5bf0:       00 00 66                mov    %eax,0xc(%rbx)
    0.00 :	    5bf3:       89 43 1a 49 8b 85 a8    mov    0xe8(%r12),%rax
    0.00 :	    5bfa:       00 
    0.00 :	    5bfb:       00 00 39                mov    %eax,0x10(%rbx)
    0.00 :	    5bfe:       43 04 74 0b 89 43 04    mov    0x108(%r12),%rax
    0.00 :	    5c05:       c7 
    0.00 :	    5c06:       44 24 0c                mov    %eax,0x1c(%rbx)
    0.00 :	    5c09:       01 00 00 00             mov    0x4c(%r13),%eax
    0.00 :	    5c0d:       49 8b 84                mov    %eax,0x14(%rbx)
    0.00 :	    5c10:       24 d8 00 00             mov    0x3c(%r13),%eax
    0.00 :	    5c14:       00 89 43                mov    %eax,0x20(%rbx)
    0.00 :	    5c17:       08 49 8b 84             mov    0x40(%r13),%rax
    0.00 :	    5c1b:       24 f8 00                mov    %eax,0x68(%rbx)
    0.00 :	    5c1e:       00 00 89 43 0c          movzwl (%r12),%eax
    0.00 :	    5c23:       49 8b 84 24 e8          and    $0xf000,%eax
    0.00 :	    5c28:       00 00 00 89 43          cmp    $0x8000,%eax
    0.00 :	    5c2d:       10 49 8b 84 24 08       jne    5db0 <ext3_do_update_inode+0x240>
    0.00 :	    5c33:       01 00 00 89 43 1c 41    mov    0xa8(%r13),%rax
    0.00 :	    5c3a:       8b 45 4c                mov    %rax,%rdx
    0.00 :	    5c3d:       89 43 14 41             sar    $0x20,%rdx
    0.00 :	    5c41:       8b 45 3c                cmp    %edx,0x6c(%rbx)
    0.00 :	    5c44:       89 43                   je     5c58 <ext3_do_update_inode+0xe8>
    0.00 :	    5c46:       20 49 8b                mov    %edx,0x6c(%rbx)
    0.00 :	    5c49:       45 40 89 43 68 41 0f    mov    0xa8(%r13),%rax
    0.00 :	    5c50:       b7 04 24 25 00 f0 00    movl   $0x1,0xc(%rsp)
    0.00 :	    5c57:       00 
    0.00 :	    5c58:       3d 00 80 00 00 0f       cmp    $0x7fffffff,%rax
    0.00 :	    5c5e:       85 7d 01 00 00 49       jbe    5dbb <ext3_do_update_inode+0x24b>
    0.00 :	    5c64:       8b 85 a8 00 00          mov    0x18(%r12),%rbp
    0.00 :	    5c69:       00 48 89 c2 48 c1 fa    mov    0x338(%rbp),%rax
    0.00 :	    5c70:       20 39 53 6c             mov    0x68(%rax),%rax
    0.00 :	    5c74:       74 12 89 53             testb  $0x2,0x64(%rax)
    0.00 :	    5c78:       6c 49                   je     5c85 <ext3_do_update_inode+0x115>
    0.00 :	    5c7a:       8b 85 a8                mov    0x4c(%rax),%esi
    0.00 :	    5c7d:       00 00                   test   %esi,%esi
    0.00 :	    5c7f:       00 c7 44 24 0c 01       jne    5dbb <ext3_do_update_inode+0x24b>
    0.00 :	    5c85:       00 00 00                mov    %r15,%rdi
    0.00 :	    5c88:       48 3d ff ff ff          callq  5c8d <ext3_do_update_inode+0x11d>
    0.00 :	    5c8d:       7f 0f 86 57 01 00 00    mov    0x338(%rbp),%rax
    0.00 :	    5c94:       49 8b 6c                mov    %r14,%rsi
    0.00 :	    5c97:       24 18 48 8b 85 38 03    mov    $0x0,%rdi
    0.00 :	    5c9e:       00 00 48 8b             mov    0x60(%rax),%rdx
    0.00 :	    5ca2:       40 68 f6 40 64          callq  5ca7 <ext3_do_update_inode+0x137>
    0.00 :	    5ca7:       02 74                   test   %eax,%eax
    0.00 :	    5ca9:       0b 8b 70 4c             mov    %eax,0x8(%rsp)
    0.00 :	    5cad:       85 f6 0f 85 36 01       jne    5e90 <ext3_do_update_inode+0x320>
    0.00 :	    5cb3:       00 00 4c                mov    %rbp,%rdi
    0.00 :	    5cb6:       89 ff e8 00 00          callq  5cbb <ext3_do_update_inode+0x14b>
    0.00 :	    5cbb:       00 00 48 8b 85 38 03    mov    0x338(%rbp),%rax
    0.00 :	    5cc2:       00 00 4c                mov    %r14,%rsi
    0.00 :	    5cc5:       89 f6 48 c7 c7 00 00    mov    $0x0,%rdi
    0.00 :	    5ccc:       00 00 48 8b             mov    0x68(%rax),%rax
    0.00 :	    5cd0:       50 60 e8 00             orl    $0x2,0x64(%rax)
    0.00 :	    5cd4:       00 00 00 85 c0          orb    $0x1,0x14(%r14)
    0.00 :	    5cd9:       89 44 24 08 0f 85 dd    mov    0x338(%rbp),%rax
    0.00 :	    5ce0:       01 00 00 48             mov    0x60(%rax),%rdx
    0.00 :	    5ce4:       89 ef e8 00 00          callq  5ce9 <ext3_do_update_inode+0x179>
    0.00 :	    5ce9:       00 00 48 8b             mov    %eax,0x8(%rsp)
    0.00 :	    5ced:       85 38 03 00 00 4c       lock btsl $0x2,(%r15)
    0.00 :	    5cf3:       89 f6                   sbb    %eax,%eax
    0.00 :	    5cf5:       48 c7                   test   %eax,%eax
    0.00 :	    5cf7:       c7 00 00 00 00 48       jne    5da0 <ext3_do_update_inode+0x230>
    0.00 :	    5cfd:       8b 40 68 83 48          mov    0x10(%rsp),%rdx
    0.00 :	    5d02:       64 02 41                mov    (%rdx),%rax
    0.00 :	    5d05:       80 4e                   test   $0x2,%al
    0.00 :	    5d07:       14 01                   jne    5d78 <ext3_do_update_inode+0x208>
    0.00 :	    5d09:       48 8b 85                mov    %r13,%rdi
    0.00 :	    5d0c:       38 03 00 00 48          callq  5d11 <ext3_do_update_inode+0x1a1>
    0.00 :	    5d11:       8b 50 60 e8 00          movzwl (%r12),%eax
    0.00 :	    5d16:       00 00 00                mov    %ax,(%rbx)
    0.00 :	    5d19:       89 44 24 08 f0          mov    0x18(%r12),%rax
    0.00 :	    5d1e:       41 0f ba 2f 02 19 c0    mov    0x338(%rax),%rax
    0.00 :	    5d25:       85 c0 0f 85             testb  $0x20,0x79(%rax)
    0.00 :	    5d29:       a3 00 00 00 48 8b       je     5b88 <ext3_do_update_inode+0x18>
    0.00 :	    5d2f:       54 24 10 48 8b          mov    0x4(%r12),%eax
    0.00 :	    5d34:       02 a8 02 75 6f          test   $0xffff0000,%eax
    0.00 :	    5d39:       4c 89                   mov    %eax,%edx
    0.00 :	    5d3b:       ef e8                   je     5d44 <ext3_do_update_inode+0x1d4>
    0.00 :	    5d3d:       00 00 00 00 41 0f b7    movzwl 0x0(%rip),%edx        # 5d44 <ext3_do_update_inode+0x1d4>
    0.00 :	    5d44:       04 24 66 89             mov    %dx,0x2(%rbx)
    0.00 :	    5d48:       03 49 8b 44 24          mov    0x8(%r12),%eax
    0.00 :	    5d4d:       18 48 8b 80 38          test   $0xffff0000,%eax
    0.00 :	    5d52:       03 00                   mov    %eax,%edx
    0.00 :	    5d54:       00 f6                   je     5d5d <ext3_do_update_inode+0x1ed>
    0.00 :	    5d56:       40 79 20 0f 84 59 fe    movzwl 0x0(%rip),%edx        # 5d5d <ext3_do_update_inode+0x1ed>
    0.00 :	    5d5d:       ff ff 41 8b             mov    %dx,0x18(%rbx)
    0.00 :	    5d61:       44 24 04 a9 00 00       movw   $0x0,0x78(%rbx)
    0.00 :	    5d67:       ff ff 89 c2 74 07       movw   $0x0,0x7a(%rbx)
    0.00 :	    5d6d:       0f b7 15 00 00          jmpq   5bba <ext3_do_update_inode+0x4a>
    0.00 :	    5d72:       00 00 66 89 53 02       nopw   0x0(%rax,%rax,1)
    0.00 :	    5d78:       41 8b 44 24 08          mov    0x18(%r12),%rax
    0.00 :	    5d7d:       a9 00                   xor    %esi,%esi
    0.00 :	    5d7f:       00 ff ff                mov    %rbx,%rdi
    0.00 :	    5d82:       89 c2 74 07 0f b7 15    mov    0x338(%rax),%rax
    0.00 :	    5d89:       00 00 00 00 66 89 53    movslq 0x9c(%rax),%rdx
    0.00 :	    5d90:       18 66 c7 43 78          callq  5d95 <ext3_do_update_inode+0x225>
    0.00 :	    5d95:       00 00 66 c7 43          jmpq   5d09 <ext3_do_update_inode+0x199>
    0.00 :	    5d9a:       7a 00 00 e9 48 fe       nopw   0x0(%rax,%rax,1)
    0.00 :	    5da0:       ff ff 66                mov    %r15,%rdi
    0.00 :	    5da3:       0f 1f 44 00 00          callq  5da8 <ext3_do_update_inode+0x238>
    0.00 :	    5da8:       49 8b 44 24 18          jmpq   5cfd <ext3_do_update_inode+0x18d>
    0.00 :	    5dad:       31 f6 48                nopl   (%rax)
    0.00 :	    5db0:       89 df 48 8b 80 38 03    mov    -0x98(%r12),%eax
    0.00 :	    5db7:       00 
    0.00 :	    5db8:       00 48 63                mov    %eax,0x6c(%rbx)
    0.00 :	    5dbb:       90 9c 00 00 00 e8 00    mov    0x220(%r12),%eax
    0.00 :	    5dc2:       00 
    0.00 :	    5dc3:       00 00 e9                mov    %eax,0x64(%rbx)
    0.00 :	    5dc6:       6f ff ff ff 66          movzwl (%r12),%eax
    0.00 :	    5dcb:       0f 1f 44 00 00          and    $0xf000,%eax
    0.00 :	    5dd0:       4c 89 ff e8 00          cmp    $0x2000,%eax
    0.00 :	    5dd5:       00 00                   je     5de4 <ext3_do_update_inode+0x274>
    0.00 :	    5dd7:       00 e9                   xor    %edx,%edx
    0.00 :	    5dd9:       50 ff ff ff 0f          cmp    $0x6000,%eax
    0.00 :	    5dde:       1f 00 41 8b 84 24       jne    5ed0 <ext3_do_update_inode+0x360>
    0.00 :	    5de4:       68 ff ff ff 89 43 6c    mov    0xc0(%r12),%edx
    0.00 :	    5deb:       41 
    0.00 :	    5dec:       8b 84                   mov    %edx,%ecx
    0.00 :	    5dee:       24 20 02                shr    $0x14,%ecx
    0.00 :	    5df1:       00 00 89 43 64 41       cmp    $0xff,%ecx
    0.00 :	    5df7:       0f b7 04 24 25 00       ja     5ef0 <ext3_do_update_inode+0x380>
    0.00 :	    5dfd:       f0 00                   mov    %edx,%eax
    0.00 :	    5dff:       00 3d 00 20 00          and    $0xfffff,%eax
    0.00 :	    5e04:       00 74 0d 31 d2          cmp    $0xff,%eax
    0.00 :	    5e09:       3d 00 60 00 00 0f       ja     5ef0 <ext3_do_update_inode+0x380>
    0.00 :	    5e0f:       85 ec                   mov    %ecx,%eax
    0.00 :	    5e11:       00 00 00 41 8b 94 24    movl   $0x0,0x2c(%rbx)
    0.00 :	    5e18:       c0 00 00                shl    $0x8,%eax
    0.00 :	    5e1b:       00 89                   or     %edx,%eax
    0.00 :	    5e1d:       d1 c1 e9                movzwl %ax,%eax
    0.00 :	    5e20:       14 81 f9                mov    %eax,0x28(%rbx)
    0.00 :	    5e23:       ff 00 00 00 0f          nopl   0x0(%rax,%rax,1)
    0.00 :	    5e28:       87 f3 00 00 00 89       movzwl -0x30(%r12),%eax
    0.00 :	    5e2e:       d0 25 ff                test   %ax,%ax
    0.00 :	    5e31:       ff 0f                   je     5e3a <ext3_do_update_inode+0x2ca>
    0.00 :	    5e33:       00 3d ff 00 00 00 0f    mov    %ax,0x80(%rbx)
    0.00 :	    5e3a:       87 e1 00                mov    %r15,%rdi
    0.00 :	    5e3d:       00 00 89 c8 c7          callq  5e42 <ext3_do_update_inode+0x2d2>
    0.00 :	    5e42:       43 2c 00                mov    %r15,%rdx
    0.00 :	    5e45:       00 00 00                mov    %r14,%rsi
    0.00 :	    5e48:       c1 e0 08 09 d0 0f b7    mov    $0x0,%rdi
    0.00 :	    5e4f:       c0 89 43 28 0f          callq  5e54 <ext3_do_update_inode+0x2e4>
    0.00 :	    5e54:       1f 44 00 00             mov    0x8(%rsp),%ecx
    0.00 :	    5e58:       41 0f                   test   %ecx,%ecx
    0.00 :	    5e5a:       b7 44 24 d0 66          cmovne 0x8(%rsp),%eax
    0.00 :	    5e5f:       85 c0 74 07             mov    %eax,0x8(%rsp)
    0.00 :	    5e63:       66 89 83 80 00          mov    0x10(%rsp),%rax
    0.00 :	    5e68:       00 00 4c 89 ff e8 00    lock andb $0xfd,-0x88(%r12)
    0.00 :	    5e6f:       00 00 00 
    0.00 :	    5e72:       4c 89 fa                mov    (%r14),%rax
    0.00 :	    5e75:       4c 89 f6 48             mov    0xc(%rsp),%edx
    0.00 :	    5e79:       c7 c7 00                mov    0x8(%rax),%eax
    0.00 :	    5e7c:       00 00                   test   %edx,%edx
    0.00 :	    5e7e:       00 e8 00 00 00          mov    %eax,-0x8(%r12)
    0.00 :	    5e83:       00 8b                   je     5e90 <ext3_do_update_inode+0x320>
    0.00 :	    5e85:       4c 24 08                mov    (%r14),%rax
    0.00 :	    5e88:       85 c9 0f                mov    0x8(%rax),%eax
    0.00 :	    5e8b:       45 44 24 08 89          mov    %eax,-0x4(%r12)
    0.00 :	    5e90:       44 24 08                test   %r15,%r15
    0.00 :	    5e93:       48 8b                   je     5e9d <ext3_do_update_inode+0x32d>
    0.00 :	    5e95:       44 24 10                mov    %r15,%rdi
    0.00 :	    5e98:       f0 41 80 a4 24          callq  5e9d <ext3_do_update_inode+0x32d>
    0.00 :	    5e9d:       78 ff ff ff             mov    0x8(%rsp),%eax
    0.00 :	    5ea1:       fd 49                   test   %eax,%eax
    0.00 :	    5ea3:       8b 06                   je     5eba <ext3_do_update_inode+0x34a>
    0.00 :	    5ea5:       8b 54 24 0c 8b          mov    0x18(%r12),%rdi
    0.00 :	    5eaa:       40 08 85 d2             mov    0x8(%rsp),%edx
    0.00 :	    5eae:       41 89 44 24 f8 74 0b    mov    $0x0,%rsi
    0.00 :	    5eb5:       49 8b 06 8b 40          callq  5eba <ext3_do_update_inode+0x34a>
    0.00 :	    5eba:       08 41 89 44             mov    0x8(%rsp),%eax
    0.00 :	    5ebe:       24 fc 4d 85             add    $0x18,%rsp
    0.00 :	    5ec2:       ff                      pop    %rbx
    0.00 :	    5ec3:       74                      pop    %rbp
    0.00 :	    5ec4:       08 4c                   pop    %r12
    0.00 :	    5ec6:       89 ff                   pop    %r13
    0.00 :	    5ec8:       e8 00                   pop    %r14
    0.00 :	    5eca:       00 00                   pop    %r15
    0.00 :	    5ecc:       00                      retq   
    0.00 :	    5ecd:       8b 44 24                nopl   (%rax)
    0.00 :	    5ed0:       08 85 c0 74 15          mov    0x0(%r13,%rdx,1),%eax
    0.00 :	    5ed5:       49 8b 7c 24             mov    %eax,0x28(%rbx,%rdx,1)
    0.00 :	    5ed9:       18 8b 54 24             add    $0x4,%rdx
    0.00 :	    5edd:       08 48 c7 c6             cmp    $0x3c,%rdx
    0.00 :	    5ee1:       00 00                   jne    5ed0 <ext3_do_update_inode+0x360>
    0.00 :	    5ee3:       00 00 e8 00 00          jmpq   5e28 <ext3_do_update_inode+0x2b8>
    0.00 :	    5ee8:       00 00 8b 44 24 08 48    nopl   0x0(%rax,%rax,1)
    0.00 :	    5eef:       83 
    0.00 :	    5ef0:       c4 18 5b 5d 41 5c 41    movl   $0x0,0x28(%rbx)
    0.00 :	    5ef7:       5d 41 5e 41 5f c3 0f    mov    0xc0(%r12),%eax
    0.00 :	    5efe:       1f 
    0.00 :	    5eff:       00 41 8b 44 15 00 89    movl   $0x0,0x30(%rbx)
    0.00 :	    5f06:       44 13                   mov    %eax,%edx
    0.00 :	    5f08:       28 48 83                movzbl %al,%ecx
    0.00 :	    5f0b:       c2 04 48 83 fa          and    $0xfff00,%eax
    0.00 :	    5f10:       3c 75 ed                shr    $0x14,%edx
    0.00 :	    5f13:       e9 40 ff                shl    $0xc,%eax
    0.00 :	    5f16:       ff ff 0f                shl    $0x8,%edx
    0.00 :	    5f19:       1f 84                   or     %ecx,%edx
    0.00 :	    5f1b:       00 00                   or     %eax,%edx
    0.00 :	    5f1d:       00 00 00                mov    %edx,0x2c(%rbx)
    0.00 :	    5f20:       c7 43 28 00 00 00       movzwl -0x30(%r12),%eax
    0.00 :	    5f26:       00 41 8b                test   %ax,%ax
    0.00 :	    5f29:       84 24 c0 00 00 00       je     5e3a <ext3_do_update_inode+0x2ca>
    0.00 :	    5f2f:       c7 43 30 00 00          jmpq   5e33 <ext3_do_update_inode+0x2c3>
         :	    5f34:       00 00 89 c2 0f b6 c8    data32 data32 nopw %cs:0x0(%rax,%rax,1)
         :	    5f3b:       25 00 ff 0f 00 
         :	    5f40:       c1                      push   %rbx
         :	    5f41:       ea 14 c1                mov    %rdx,%rbx
         :	    5f44:       e0 0c c1                mov    (%rdx),%rax
         :	    5f47:       e2 08 09 ca             lock incl 0x60(%rax)
         :	    5f4b:       09 c2 89 53 2c          callq  5b40 <ext3_forget+0x90>
         :	    5f50:       41 0f b7                mov    (%rbx),%rdx
         :	    5f53:       44 24 d0 66             lock decl 0x60(%rdx)
         :	    5f57:       85                      pop    %rbx
         :	    5f58:       c0                      retq   
         :	    5f59:       0f 84 0b ff ff ff e9    nopl   0x0(%rax)
         :	    5f60:       ff fe ff ff             sub    $0x38,%rsp

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------
