
Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   39.39 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   25.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
   13.64 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
   10.61 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:779
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:782
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:828
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:828
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:800
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782ca0 <CHashBucketScan>:
         :	CHashBucketScan(CHashTable table,
         :	                                CHashPtr *start,
         :	                                uint32 hashcode,
         :	                                const void *key,
         :	                                CHashScanResult *res)
         :	{
    0.00 :	  782ca0:       55                      push   %rbp
    0.00 :	  782ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782ca4:       41 57                   push   %r15
    0.00 :	  782ca6:       41 89 d7                mov    %edx,%r15d
    0.00 :	  782ca9:       41 56                   push   %r14
    0.00 :	  782cab:       41 55                   push   %r13
    0.00 :	  782cad:       49 89 fd                mov    %rdi,%r13
    0.00 :	  782cb0:       41 54                   push   %r12
    0.00 :	  782cb2:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  782cb5:       53                      push   %rbx
    0.00 :	  782cb6:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  782cba:       48 89 75 d0             mov    %rsi,-0x30(%rbp)
    0.00 :	  782cbe:       48 89 4d c8             mov    %rcx,-0x38(%rbp)
    0.00 :	  782cc2:       4c 89 45 c0             mov    %r8,-0x40(%rbp)
         :	        CHashPtr   *pointer_to_target;
         :	        CHashNode  *target_node = NULL;
         :
         :	retry:
         :	        pointer_to_target = start;
         :	        target = *pointer_to_target;
    0.00 :	  782cc6:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  782cca:       44 8b 10                mov    (%rax),%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
   25.76 :	  782ccd:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cd1:       0f 87 ff 00 00 00       ja     782dd6 <CHashBucketScan+0x136>
         :	                {
         :	                        res->found = false;
         :	                        break;
    0.00 :	  782cd7:       4c 8b 75 d0             mov    -0x30(%rbp),%r14
    0.00 :	  782cdb:       eb 21                   jmp    782cfe <CHashBucketScan+0x5e>
    0.00 :	  782cdd:       0f 1f 00                nopl   (%rax)
         :	                /*
         :	                 * Bucket chains are kept in order, so that there is exactly one legal
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
    0.00 :	  782ce0:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	                if (h == hashcode)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:779
    1.52 :	  782ce5:       44 39 f8                cmp    %r15d,%eax
    0.00 :	  782ce8:       74 5e                   je     782d48 <CHashBucketScan+0xa8>
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
         :	                                                 table->desc.key_size);
         :	                else if (h > hashcode)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:782
    1.52 :	  782cea:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  782ced:       0f 1f 00                nopl   (%rax)
    0.00 :	  782cf0:       72 7b                   jb     782d6d <CHashBucketScan+0xcd>
         :	                                break;
         :	                        }
         :	                }
         :
         :	                /* Continue scan from next node. */
         :	                pointer_to_target = &target_node->next;
    0.00 :	  782cf2:       4d 89 e6                mov    %r12,%r14
    0.00 :	  782cf5:       45 89 c2                mov    %r8d,%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
    0.00 :	  782cf8:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cfc:       77 79                   ja     782d77 <CHashBucketScan+0xd7>
         :	                {
         :	                        res->found = false;
         :	                        break;
         :	                }
         :	                target_node = CHashTableGetNode(table, target);
    0.00 :	  782cfe:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d01:       d1 e8                   shr    %eax
    0.00 :	  782d03:       41 89 c4                mov    %eax,%r12d
    0.00 :	  782d06:       45 0f af 65 1c          imul   0x1c(%r13),%r12d
    0.00 :	  782d0b:       4d 03 65 30             add    0x30(%r13),%r12
         :	                 * target may have been fetched from an arena entry that could be
         :	                 * concurrently modified, so a dependency barrier is required before
         :	                 * dereferencing the derived pointer.
         :	                 */
         :	                pg_read_barrier_depends();
         :	                next = target_node->next;
    0.00 :	  782d0f:       45 8b 04 24             mov    (%r12),%r8d
         :	                 * ensures that delete-marked elements are removed from bucket chains
         :	                 * as quickly as possible and reduces code duplication.  See
         :	                 * CHashDelete for further comments about why delete-marking is
         :	                 * necessary and how it allows safe deletion.
         :	                 */
         :	                if (CHashPtrIsMarked(next))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   39.39 :	  782d13:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d17:       74 c7                   je     782ce0 <CHashBucketScan+0x40>
         :	                {
         :	zap:
         :	                        if (__sync_bool_compare_and_swap(pointer_to_target,
    0.00 :	  782d19:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  782d1c:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d1f:       83 e3 fe                and    $0xfffffffe,%ebx
    0.00 :	  782d22:       f0 41 0f b1 1e          lock cmpxchg %ebx,(%r14)
    0.00 :	  782d27:       74 77                   je     782da0 <CHashBucketScan+0x100>
         :	                                 * the node which precedes it before we advance to the next
         :	                                 * node.  That could certainly happen occasionally, but we'd
         :	                                 * have to be pretty unlucky to have it happen even twice in
         :	                                 * a row.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge_Fail);
    0.00 :	  782d29:       49 83 85 88 00 00 00    addq   $0x1,0x88(%r13)
    0.00 :	  782d30:       01 
         :	                                target = *pointer_to_target;
    0.00 :	  782d31:       45 8b 16                mov    (%r14),%r10d
         :	                                if (CHashPtrIsMarked(target))
    0.00 :	  782d34:       41 f6 c2 01             test   $0x1,%r10b
    0.00 :	  782d38:       74 be                   je     782cf8 <CHashBucketScan+0x58>
         :	                                {
         :	                                        CHashTableIncrementStatistic(table, CHS_Scan_Restart);
    0.00 :	  782d3a:       49 83 85 90 00 00 00    addq   $0x1,0x90(%r13)
    0.00 :	  782d41:       01 
         :	                                        goto retry;
    0.00 :	  782d42:       eb 82                   jmp    782cc6 <CHashBucketScan+0x26>
    0.00 :	  782d44:       0f 1f 40 00             nopl   0x0(%rax)
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
         :	                if (h == hashcode)
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
    0.00 :	  782d48:       41 0f b7 4d 0e          movzwl 0xe(%r13),%ecx
    0.00 :	  782d4d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  782d51:       49 8d 74 24 08          lea    0x8(%r12),%rsi
    0.00 :	  782d56:       48 39 c9                cmp    %rcx,%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
   10.61 :	  782d59:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
   13.64 :	  782d5b:       0f 97 c0                seta   %al
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.52 :	  782d5e:       0f 92 c2                setb   %dl
    0.00 :	  782d61:       28 d0                   sub    %dl,%al
    0.00 :	  782d63:       0f be c0                movsbl %al,%eax
         :	                 * the point where we expect to find the key OR someone delete-marked
         :	                 * the item and overwrote the hashcode with a gcnext pointer.  In the
         :	                 * latter case we must take care not to be fooled into stopping the
         :	                 * scan early.
         :	                 */
         :	                if (cmp >= 0)
    0.00 :	  782d66:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  782d69:       7c 87                   jl     782cf2 <CHashBucketScan+0x52>
         :	                {
         :	                        if (cmp == 0)
    0.00 :	  782d6b:       74 5b                   je     782dc8 <CHashBucketScan+0x128>
         :	                                /*
         :	                                 * pg_read_barrier() prevents the reread of the next pointer
         :	                                 * from being speculated ahead of the read of the hash value.
         :	                                 */
         :	                                pg_read_barrier();
         :	                                next = target_node->next;
    0.00 :	  782d6d:       45 8b 04 24             mov    (%r12),%r8d
         :	                                if (CHashPtrIsMarked(next))
    0.00 :	  782d71:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d75:       75 a2                   jne    782d19 <CHashBucketScan+0x79>
         :	                                        goto zap;
         :	                                res->found = false;
    0.00 :	  782d77:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  782d7b:       c6 47 18 00             movb   $0x0,0x18(%rdi)
         :	                pointer_to_target = &target_node->next;
         :	                target = next;
         :	        }
         :
         :	        /* Send results back to caller. */
         :	        res->target = target;
    0.00 :	  782d7f:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782d83:       44 89 10                mov    %r10d,(%rax)
         :	        res->pointer_to_target = pointer_to_target;
    0.00 :	  782d86:       4c 89 70 08             mov    %r14,0x8(%rax)
         :	        res->target_node = target_node;
    0.00 :	  782d8a:       4c 89 60 10             mov    %r12,0x10(%rax)
         :	}
    0.00 :	  782d8e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  782d92:       5b                      pop    %rbx
    0.00 :	  782d93:       41 5c                   pop    %r12
    0.00 :	  782d95:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:828
    1.52 :	  782d97:       41 5e                   pop    %r14
    0.00 :	  782d99:       41 5f                   pop    %r15
    1.52 :	  782d9b:       c9                      leaveq 
    0.00 :	  782d9c:       c3                      retq   
    0.00 :	  782d9d:       0f 1f 00                nopl   (%rax)
         :	                                 * delete-mark has been applied.  Thus, if we just keep
         :	                                 * following the next pointers, we're guaranteed to visit
         :	                                 * all non-deleted items (and possibly some deleted items)
         :	                                 * that were present at the time we began the scan.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge);
    0.00 :	  782da0:       49 83 85 80 00 00 00    addq   $0x1,0x80(%r13)
    0.00 :	  782da7:       01 
         :	                                CHashAddToGarbage(table, hashcode & table->bucket_mask,
    0.00 :	  782da8:       44 89 fe                mov    %r15d,%esi
    0.00 :	  782dab:       41 23 75 10             and    0x10(%r13),%esi
    0.00 :	  782daf:       44 89 d2                mov    %r10d,%edx
    0.00 :	  782db2:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  782db5:       e8 96 fe ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782dba:       41 89 da                mov    %ebx,%r10d
    0.00 :	  782dbd:       e9 36 ff ff ff          jmpq   782cf8 <CHashBucketScan+0x58>
    0.00 :	  782dc2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 */
         :	                if (cmp >= 0)
         :	                {
         :	                        if (cmp == 0)
         :	                        {
         :	                                res->found = true;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:800
    1.52 :	  782dc8:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782dcc:       c6 40 18 01             movb   $0x1,0x18(%rax)
         :	                                res->next = next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
    1.52 :	  782dd0:       44 89 40 04             mov    %r8d,0x4(%rax)
         :	                                break;
    0.00 :	  782dd4:       eb a9                   jmp    782d7f <CHashBucketScan+0xdf>
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
    0.00 :	  782dd6:       49 89 c6                mov    %rax,%r14
    0.00 :	  782dd9:       eb 9c                   jmp    782d77 <CHashBucketScan+0xd7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   62.50 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
   20.83 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:76
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:152
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049f650 <heap_page_prune_opt>:
         :	 * OldestXmin is the cutoff XID used to distinguish whether tuples are DEAD
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
    0.00 :	  49f650:       55                      push   %rbp
    0.00 :	  49f651:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  49f654:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  49f658:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  49f65c:       41 89 f4                mov    %esi,%r12d
    0.00 :	  49f65f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  49f663:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    4.17 :	  49f667:       49 89 fe                mov    %rdi,%r14
    0.00 :	  49f66a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  49f66e:       48 83 ec 40             sub    $0x40,%rsp
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f672:       85 f6                   test   %esi,%esi
    0.00 :	  49f674:       0f 88 fe 00 00 00       js     49f778 <heap_page_prune_opt+0x128>
    0.00 :	  49f67a:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  49f67f:       48 63 d8                movslq %eax,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:76
    8.33 :	  49f682:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  49f686:       48 03 1d 6b 04 72 00    add    0x72046b(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        /*
         :	         * We can't write WAL in recovery mode, so there's no point trying to
         :	         * clean the page. The master will likely issue a cleaning WAL record soon
         :	         * anyway, so this is no particular loss.
         :	         */
         :	        if (RecoveryInProgress())
    0.00 :	  49f68d:       e8 2e de 02 00          callq  4cd4c0 <RecoveryInProgress>
    0.00 :	  49f692:       84 c0                   test   %al,%al
    0.00 :	  49f694:       74 1a                   je     49f6b0 <heap_page_prune_opt+0x60>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
         :	        }
         :	}
    0.00 :	  49f696:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  49f69a:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  49f69e:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  49f6a2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:152
    4.17 :	  49f6a6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  49f6aa:       c9                      leaveq 
    0.00 :	  49f6ab:       c3                      retq   
    0.00 :	  49f6ac:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f6b0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f6b3:       e8 28 37 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f6b8:       84 c0                   test   %al,%al
    0.00 :	  49f6ba:       0f 84 d0 00 00 00       je     49f790 <heap_page_prune_opt+0x140>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
    0.00 :	  49f6c0:       44 8b 3d 39 b2 71 00    mov    0x71b239(%rip),%r15d        # bba900 <RecentGlobalXmin>
         :	         * Let's see if we really need pruning.
         :	         *
         :	         * Forget it if page is not hinted to contain something prunable that's
         :	         * older than OldestXmin.
         :	         */
         :	        if (!PageIsPrunable(page, OldestXmin))
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
   20.83 :	  49f6c7:       8b 7b 14                mov    0x14(%rbx),%edi
   62.50 :	  49f6ca:       85 ff                   test   %edi,%edi
    0.00 :	  49f6cc:       74 c8                   je     49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f6ce:       44 89 fe                mov    %r15d,%esi
    0.00 :	  49f6d1:       e8 0a 09 02 00          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  49f6d6:       84 c0                   test   %al,%al
    0.00 :	  49f6d8:       74 bc                   je     49f696 <heap_page_prune_opt+0x46>
         :	         * unlikely to be *seriously* wrong, though, since reading either pd_lower
         :	         * or pd_upper is probably atomic.  Avoiding taking a lock seems more
         :	         * important than sometimes getting a wrong answer in what is after all
         :	         * just a heuristic estimate.
         :	         */
         :	        minfree = RelationGetTargetPageFreeSpace(relation,
    0.00 :	  49f6da:       49 8b 96 98 00 00 00    mov    0x98(%r14),%rdx
    0.00 :	  49f6e1:       41 bd 33 03 00 00       mov    $0x333,%r13d
    0.00 :	  49f6e7:       48 85 d2                test   %rdx,%rdx
    0.00 :	  49f6ea:       74 2f                   je     49f71b <heap_page_prune_opt+0xcb>
    0.00 :	  49f6ec:       b9 64 00 00 00          mov    $0x64,%ecx
    0.00 :	  49f6f1:       2b 4a 04                sub    0x4(%rdx),%ecx
    0.00 :	  49f6f4:       ba 1f 85 eb 51          mov    $0x51eb851f,%edx
    0.00 :	  49f6f9:       c1 e1 0d                shl    $0xd,%ecx
    0.00 :	  49f6fc:       89 c8                   mov    %ecx,%eax
    0.00 :	  49f6fe:       c1 f9 1f                sar    $0x1f,%ecx
    0.00 :	  49f701:       f7 ea                   imul   %edx
    0.00 :	  49f703:       b8 33 03 00 00          mov    $0x333,%eax
    0.00 :	  49f708:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  49f70b:       29 ca                   sub    %ecx,%edx
    0.00 :	  49f70d:       4c 63 ea                movslq %edx,%r13
    0.00 :	  49f710:       49 81 fd 33 03 00 00    cmp    $0x333,%r13
    0.00 :	  49f717:       4c 0f 42 e8             cmovb  %rax,%r13
         :	                                                                                         HEAP_DEFAULT_FILLFACTOR);
         :	        minfree = Max(minfree, BLCKSZ / 10);
         :
         :	        if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f71b:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f71f:       75 11                   jne    49f732 <heap_page_prune_opt+0xe2>
    0.00 :	  49f721:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f724:       e8 37 56 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f729:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f72c:       0f 83 64 ff ff ff       jae    49f696 <heap_page_prune_opt+0x46>
         :	        {
         :	                /* OK, try to get exclusive buffer lock */
         :	                if (!ConditionalLockBufferForCleanup(buffer))
    0.00 :	  49f732:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f735:       e8 26 78 1d 00          callq  676f60 <ConditionalLockBufferForCleanup>
    0.00 :	  49f73a:       84 c0                   test   %al,%al
    0.00 :	  49f73c:       0f 84 54 ff ff ff       je     49f696 <heap_page_prune_opt+0x46>
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f742:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f746:       74 68                   je     49f7b0 <heap_page_prune_opt+0x160>
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f748:       4c 8d 45 d4             lea    -0x2c(%rbp),%r8
    0.00 :	  49f74c:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  49f751:       44 89 fa                mov    %r15d,%edx
    0.00 :	  49f754:       44 89 e6                mov    %r12d,%esi
    0.00 :	  49f757:       4c 89 f7                mov    %r14,%rdi
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
    0.00 :	  49f75a:       c7 45 d4 00 00 00 00    movl   $0x0,-0x2c(%rbp)
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f761:       e8 5a f4 ff ff          callq  49ebc0 <heap_page_prune>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  49f766:       31 f6                   xor    %esi,%esi
    0.00 :	  49f768:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f76b:       e8 a0 4f 1d 00          callq  674710 <LockBuffer>
    0.00 :	  49f770:       e9 21 ff ff ff          jmpq   49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f775:       0f 1f 00                nopl   (%rax)
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f778:       89 f0                   mov    %esi,%eax
    0.00 :	  49f77a:       48 8b 15 97 d9 6d 00    mov    0x6dd997(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49f781:       f7 d0                   not    %eax
    0.00 :	  49f783:       48 98                   cltq   
    0.00 :	  49f785:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  49f789:       e9 ff fe ff ff          jmpq   49f68d <heap_page_prune_opt+0x3d>
    0.00 :	  49f78e:       66 90                   xchg   %ax,%ax
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f790:       83 3d c5 99 6d 00 02    cmpl   $0x2,0x6d99c5(%rip)        # b7915c <wal_level>
    0.00 :	  49f797:       7e 0a                   jle    49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f799:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  49f79d:       80 78 6e 70             cmpb   $0x70,0x6e(%rax)
    0.00 :	  49f7a1:       74 25                   je     49f7c8 <heap_page_prune_opt+0x178>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
         :	        else
         :	                OldestXmin = RecentGlobalDataXmin;
    0.00 :	  49f7a3:       44 8b 3d 5a b1 71 00    mov    0x71b15a(%rip),%r15d        # bba904 <RecentGlobalDataXmin>
    0.00 :	  49f7aa:       e9 18 ff ff ff          jmpq   49f6c7 <heap_page_prune_opt+0x77>
    0.00 :	  49f7af:       90                      nop
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f7b0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f7b3:       e8 a8 55 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f7b8:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f7bb:       73 a9                   jae    49f766 <heap_page_prune_opt+0x116>
    0.00 :	  49f7bd:       0f 1f 00                nopl   (%rax)
    0.00 :	  49f7c0:       eb 86                   jmp    49f748 <heap_page_prune_opt+0xf8>
    0.00 :	  49f7c2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f7c8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f7cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  49f7d0:       e8 0b 36 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f7d5:       84 c0                   test   %al,%al
    0.00 :	  49f7d7:       0f 85 e3 fe ff ff       jne    49f6c0 <heap_page_prune_opt+0x70>
    0.00 :	  49f7dd:       49 8b 86 98 00 00 00    mov    0x98(%r14),%rax
    0.00 :	  49f7e4:       48 85 c0                test   %rax,%rax
    0.00 :	  49f7e7:       74 ba                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7e9:       80 78 48 00             cmpb   $0x0,0x48(%rax)
    0.00 :	  49f7ed:       74 b4                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7ef:       90                      nop
    0.00 :	  49f7f0:       e9 cb fe ff ff          jmpq   49f6c0 <heap_page_prune_opt+0x70>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   70.59 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000677560 <StrategyGetBuffer>:
         :	 *      To ensure that no one else can pin the buffer before we do, we must
         :	 *      return the buffer with the buffer header spinlock still held.
         :	 */
         :	volatile BufferDesc *
         :	StrategyGetBuffer(BufferAccessStrategy strategy)
         :	{
    0.00 :	  677560:       55                      push   %rbp
    0.00 :	  677561:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  677564:       41 57                   push   %r15
    0.00 :	  677566:       41 56                   push   %r14
    0.00 :	  677568:       41 55                   push   %r13
    0.00 :	  67756a:       49 89 fd                mov    %rdi,%r13
    0.00 :	  67756d:       41 54                   push   %r12
    0.00 :	  67756f:       53                      push   %rbx
    0.00 :	  677570:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * If given a strategy object, see whether it can select a buffer. We
         :	         * assume strategy objects don't need buffer_strategy_lock.
         :	         */
         :	        if (strategy != NULL)
    0.00 :	  677574:       48 85 ff                test   %rdi,%rdi
    0.00 :	  677577:       74 65                   je     6775de <StrategyGetBuffer+0x7e>
         :	{
         :	        volatile BufferDesc *buf;
         :	        Buffer          bufnum;
         :
         :	        /* Advance to next ring slot */
         :	        if (++strategy->current >= strategy->ring_size)
    0.00 :	  677579:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  67757c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67757f:       3b 47 04                cmp    0x4(%rdi),%eax
    0.00 :	  677582:       89 47 08                mov    %eax,0x8(%rdi)
    0.00 :	  677585:       7c 09                   jl     677590 <StrategyGetBuffer+0x30>
         :	                strategy->current = 0;
    0.00 :	  677587:       c7 47 08 00 00 00 00    movl   $0x0,0x8(%rdi)
    0.00 :	  67758e:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * If the slot hasn't been filled yet, tell the caller to allocate a new
         :	         * buffer with the normal allocation strategy.  He will then fill this
         :	         * slot by calling AddBufferToRing with the new buffer.
         :	         */
         :	        bufnum = strategy->buffers[strategy->current];
    0.00 :	  677590:       48 98                   cltq   
    0.00 :	  677592:       41 8b 44 85 10          mov    0x10(%r13,%rax,4),%eax
         :	        if (bufnum == InvalidBuffer)
    0.00 :	  677597:       85 c0                   test   %eax,%eax
    0.00 :	  677599:       74 3e                   je     6775d9 <StrategyGetBuffer+0x79>
         :	         * since our own previous usage of the ring element would have left it
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
    0.00 :	  67759b:       48 98                   cltq   
    0.00 :	  67759d:       48 8d 58 ff             lea    -0x1(%rax),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6775a1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6775a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6775aa:       48 03 1d 4f 85 54 00    add    0x54854f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	        LockBufHdr(buf);
    0.00 :	  6775b1:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6775b5:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  6775b8:       84 c0                   test   %al,%al
    0.00 :	  6775ba:       0f 85 b8 02 00 00       jne    677878 <StrategyGetBuffer+0x318>
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
    0.00 :	  6775c0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6775c3:       85 c0                   test   %eax,%eax
    0.00 :	  6775c5:       75 0e                   jne    6775d5 <StrategyGetBuffer+0x75>
    0.00 :	  6775c7:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  6775cb:       66 83 f8 01             cmp    $0x1,%ax
    0.00 :	  6775cf:       0f 86 92 02 00 00       jbe    677867 <StrategyGetBuffer+0x307>
         :	        {
         :	                strategy->current_was_in_ring = true;
         :	                return buf;
         :	        }
         :	        UnlockBufHdr(buf);
    0.00 :	  6775d5:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Tell caller to allocate a new buffer with the normal allocation
         :	         * strategy.  He'll then replace this ring element via AddBufferToRing.
         :	         */
         :	        strategy->current_was_in_ring = false;
    0.00 :	  6775d9:       41 c6 45 0c 00          movb   $0x0,0xc(%r13)
         :	        /*
         :	         * We count buffer allocation requests so that the bgwriter can estimate
         :	         * the rate of buffer consumption.  Note that buffers recycled by a
         :	         * strategy object are intentionally not counted here.
         :	         */
         :	        pg_atomic_fetch_add_u32(&StrategyControl->numBufferAllocs, 1);
    0.00 :	  6775de:       48 8b 05 1b 5b 50 00    mov    0x505b1b(%rip),%rax        # b7d100 <StrategyControl>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  6775e5:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6775ea:       48 83 c0 14             add    $0x14,%rax
    0.00 :	  6775ee:       f0 0f c1 10             lock xadd %edx,(%rax)
         :	         * Since we're not guaranteed atomic 8 byte reads we need to acquire the
         :	         * spinlock if not null to be sure we get a correct pointer. Because we
         :	         * don't want to set the latch while holding the buffer_strategy_lock we
         :	         * just grab the lock to read and reset the pointer.
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    5.88 :	  6775f2:       48 8b 15 07 5b 50 00    mov    0x505b07(%rip),%rdx        # b7d100 <StrategyControl>
         :	        if (bgwriterLatch)
    0.00 :	  6775f9:       48 83 7a 18 00          cmpq   $0x0,0x18(%rdx)
    0.00 :	  6775fe:       74 3e                   je     67763e <StrategyGetBuffer+0xde>
    0.00 :	  677600:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  677605:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677608:       84 c0                   test   %al,%al
    0.00 :	  67760a:       0f 85 21 02 00 00       jne    677831 <StrategyGetBuffer+0x2d1>
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
    0.00 :	  677610:       48 8b 05 e9 5a 50 00    mov    0x505ae9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677617:       48 8b 78 18             mov    0x18(%rax),%rdi
         :	                StrategyControl->bgwriterLatch = NULL;
    0.00 :	  67761b:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  677622:       00 
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677623:       48 8b 05 d6 5a 50 00    mov    0x505ad6(%rip),%rax        # b7d100 <StrategyControl>
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  67762a:       48 85 ff                test   %rdi,%rdi
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	                StrategyControl->bgwriterLatch = NULL;
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67762d:       c6 00 00                movb   $0x0,(%rax)
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  677630:       74 05                   je     677637 <StrategyGetBuffer+0xd7>
         :	                        SetLatch(bgwriterLatch);
    0.00 :	  677632:       e8 89 1a fc ff          callq  6390c0 <SetLatch>
    0.00 :	  677637:       48 8b 15 c2 5a 50 00    mov    0x505ac2(%rip),%rdx        # b7d100 <StrategyControl>
         :	         *
         :	         * Note that the freeNext fields are considered to be protected by
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
    0.00 :	  67763e:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  677641:       85 c0                   test   %eax,%eax
    0.00 :	  677643:       0f 88 08 01 00 00       js     677751 <StrategyGetBuffer+0x1f1>
    0.00 :	  677649:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  67764e:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677651:       84 c0                   test   %al,%al
    0.00 :	  677653:       0f 85 f3 01 00 00       jne    67784c <StrategyGetBuffer+0x2ec>
    0.00 :	  677659:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67765f:       eb 30                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677661:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
         :	                        if (buf->refcount == 0 && buf->usage_count == 0)
    0.00 :	  677668:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  67766b:       85 c0                   test   %eax,%eax
    0.00 :	  67766d:       75 0d                   jne    67767c <StrategyGetBuffer+0x11c>
    0.00 :	  67766f:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677673:       66 85 c0                test   %ax,%ax
    0.00 :	  677676:       0f 84 94 00 00 00       je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
    0.00 :	  67767c:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  677680:       44 89 e0                mov    %r12d,%eax
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677683:       48 8b 15 76 5a 50 00    mov    0x505a76(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  67768a:       f0 86 02                lock xchg %al,(%rdx)
    0.00 :	  67768d:       84 c0                   test   %al,%al
    0.00 :	  67768f:       75 5f                   jne    6776f0 <StrategyGetBuffer+0x190>
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :
         :	                while (StrategyControl->firstFreeBuffer >= 0)
    0.00 :	  677691:       48 8b 15 68 5a 50 00    mov    0x505a68(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  677698:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67769b:       85 c0                   test   %eax,%eax
    0.00 :	  67769d:       0f 88 9d 00 00 00       js     677740 <StrategyGetBuffer+0x1e0>
         :	                {
         :	                        buf = &BufferDescriptors[StrategyControl->firstFreeBuffer];
    0.00 :	  6776a3:       48 63 d8                movslq %eax,%rbx
    0.00 :	  6776a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6776aa:       48 03 1d 4f 84 54 00    add    0x54844f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        Assert(buf->freeNext != FREENEXT_NOT_IN_LIST);
         :
         :	                        /* Unconditionally remove buffer from freelist */
         :	                        StrategyControl->firstFreeBuffer = buf->freeNext;
    0.00 :	  6776b1:       8b 43 28                mov    0x28(%rbx),%eax
    0.00 :	  6776b4:       89 42 08                mov    %eax,0x8(%rdx)
         :	                        buf->freeNext = FREENEXT_NOT_IN_LIST;
    0.00 :	  6776b7:       c7 43 28 fe ff ff ff    movl   $0xfffffffe,0x28(%rbx)
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776be:       48 8b 05 3b 5a 50 00    mov    0x505a3b(%rip),%rax        # b7d100 <StrategyControl>
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776c5:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776c9:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  6776cc:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6776cf:       f0 86 07                lock xchg %al,(%rdi)
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776d2:       84 c0                   test   %al,%al
    0.00 :	  6776d4:       74 92                   je     677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776d6:       ba d0 00 00 00          mov    $0xd0,%edx
    0.00 :	  6776db:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  6776e0:       e8 5b 89 01 00          callq  690040 <s_lock>
    0.00 :	  6776e5:       eb 81                   jmp    677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6776ee:       00 00 
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776f0:       48 8b 3d 09 5a 50 00    mov    0x505a09(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  6776f7:       ba da 00 00 00          mov    $0xda,%edx
    0.00 :	  6776fc:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677701:       e8 3a 89 01 00          callq  690040 <s_lock>
    0.00 :	  677706:       eb 89                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677708:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67770f:       00 
         :	                                trycounter = NBuffers;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Found a usable buffer */
         :	                                if (strategy != NULL)
    0.00 :	  677710:       4d 85 ed                test   %r13,%r13
    0.00 :	  677713:       74 0f                   je     677724 <StrategyGetBuffer+0x1c4>
         :	 * is called with the spinlock held, it had better be quite cheap.
         :	 */
         :	static void
         :	AddBufferToRing(BufferAccessStrategy strategy, volatile BufferDesc *buf)
         :	{
         :	        strategy->buffers[strategy->current] = BufferDescriptorGetBuffer(buf);
    0.00 :	  677715:       8b 43 24                mov    0x24(%rbx),%eax
    0.00 :	  677718:       49 63 55 08             movslq 0x8(%r13),%rdx
    0.00 :	  67771c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67771f:       41 89 44 95 10          mov    %eax,0x10(%r13,%rdx,4)
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
         :	        }
         :	}
    0.00 :	  677724:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  677728:       48 89 d8                mov    %rbx,%rax
    0.00 :	  67772b:       5b                      pop    %rbx
    0.00 :	  67772c:       41 5c                   pop    %r12
    0.00 :	  67772e:       41 5d                   pop    %r13
    0.00 :	  677730:       41 5e                   pop    %r14
    0.00 :	  677732:       41 5f                   pop    %r15
    0.00 :	  677734:       c9                      leaveq 
    0.00 :	  677735:       c3                      retq   
    0.00 :	  677736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67773d:       00 00 00 
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                }
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677740:       48 8b 05 b9 59 50 00    mov    0x5059b9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677747:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  67774a:       48 8b 15 af 59 50 00    mov    0x5059af(%rip),%rdx        # b7d100 <StrategyControl>
         :	        }
         :
         :	        /* Nothing on the freelist, so run the "clock sweep" algorithm */
         :	        trycounter = NBuffers;
    0.00 :	  677751:       44 8b 25 c8 13 4f 00    mov    0x4f13c8(%rip),%r12d        # b68b20 <NBuffers>
    0.00 :	  677758:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  67775e:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  677764:       eb 30                   jmp    677796 <StrategyGetBuffer+0x236>
    0.00 :	  677766:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67776d:       00 00 00 
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
         :	                if (buf->refcount == 0)
         :	                {
         :	                        if (buf->usage_count > 0)
    0.00 :	  677770:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677774:       66 85 c0                test   %ax,%ax
    0.00 :	  677777:       74 97                   je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                buf->usage_count--;
    0.00 :	  677779:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  67777d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  677780:       66 89 43 16             mov    %ax,0x16(%rbx)
         :	                                trycounter = NBuffers;
    0.00 :	  677784:       44 8b 25 95 13 4f 00    mov    0x4f1395(%rip),%r12d        # b68b20 <NBuffers>
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
    0.00 :	  67778b:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  67778f:       48 8b 15 6a 59 50 00    mov    0x50596a(%rip),%rdx        # b7d100 <StrategyControl>
         :	        trycounter = NBuffers;
         :	        for (;;)
         :	        {
         :	                int victim;
         :
         :	                victim = pg_atomic_fetch_add_u32(&StrategyControl->nextVictimBuffer, 1);
    0.00 :	  677796:       48 8d 42 04             lea    0x4(%rdx),%rax
    0.00 :	  67779a:       44 89 f2                mov    %r14d,%edx
    0.00 :	  67779d:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                buf = &BufferDescriptors[victim % NBuffers];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
   17.65 :	  6777a1:       89 d0                   mov    %edx,%eax
    0.00 :	  6777a3:       c1 fa 1f                sar    $0x1f,%edx
    0.00 :	  6777a6:       f7 3d 74 13 4f 00       idivl  0x4f1374(%rip)        # b68b20 <NBuffers>
    5.88 :	  6777ac:       48 63 da                movslq %edx,%rbx
    0.00 :	  6777af:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6777b3:       48 03 1d 46 83 54 00    add    0x548346(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                if (victim % NBuffers == 0)
    0.00 :	  6777ba:       85 d2                   test   %edx,%edx
    0.00 :	  6777bc:       75 12                   jne    6777d0 <StrategyGetBuffer+0x270>
         :	                {
         :	                        pg_atomic_add_fetch_u32(&StrategyControl->completePasses, 1);
    0.00 :	  6777be:       48 8b 05 3b 59 50 00    mov    0x50593b(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  6777c5:       44 89 f2                mov    %r14d,%edx
    0.00 :	  6777c8:       48 83 c0 10             add    $0x10,%rax
    0.00 :	  6777cc:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6777d0:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6777d4:       44 89 f8                mov    %r15d,%eax
    0.00 :	  6777d7:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   70.59 :	  6777da:       84 c0                   test   %al,%al
    0.00 :	  6777dc:       75 42                   jne    677820 <StrategyGetBuffer+0x2c0>
         :	                if (buf->refcount == 0)
    0.00 :	  6777de:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6777e1:       85 c0                   test   %eax,%eax
    0.00 :	  6777e3:       74 8b                   je     677770 <StrategyGetBuffer+0x210>
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                }
         :	                else if (--trycounter == 0)
    0.00 :	  6777e5:       41 83 ec 01             sub    $0x1,%r12d
    0.00 :	  6777e9:       75 a0                   jne    67778b <StrategyGetBuffer+0x22b>
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777eb:       ba 80 a1 8a 00          mov    $0x8aa180,%edx
    0.00 :	  6777f0:       be 0c 01 00 00          mov    $0x10c,%esi
    0.00 :	  6777f5:       bf ec a0 8a 00          mov    $0x8aa0ec,%edi
         :	                         * so all the buffers are pinned (or were when we looked at them).
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
    0.00 :	  6777fa:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777fe:       e8 1d 3c 10 00          callq  77b420 <elog_start>
    0.00 :	  677803:       be 0e a1 8a 00          mov    $0x8aa10e,%esi
    0.00 :	  677808:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67780d:       31 c0                   xor    %eax,%eax
    0.00 :	  67780f:       e8 1c 3a 10 00          callq  77b230 <elog_finish>
    0.00 :	  677814:       e8 b7 1c df ff          callq  4694d0 <abort@plt>
    0.00 :	  677819:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  677820:       ba f2 00 00 00          mov    $0xf2,%edx
    0.00 :	  677825:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67782a:       e8 11 88 01 00          callq  690040 <s_lock>
    0.00 :	  67782f:       eb ad                   jmp    6777de <StrategyGetBuffer+0x27e>
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	        if (bgwriterLatch)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677831:       48 8b 3d c8 58 50 00    mov    0x5058c8(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677838:       ba 9f 00 00 00          mov    $0x9f,%edx
    0.00 :	  67783d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677842:       e8 f9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677847:       e9 c4 fd ff ff          jmpq   677610 <StrategyGetBuffer+0xb0>
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67784c:       48 8b 3d ad 58 50 00    mov    0x5058ad(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677853:       ba b8 00 00 00          mov    $0xb8,%edx
    0.00 :	  677858:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67785d:       e8 de 87 01 00          callq  690040 <s_lock>
    0.00 :	  677862:       e9 f2 fd ff ff          jmpq   677659 <StrategyGetBuffer+0xf9>
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
         :	        {
         :	                strategy->current_was_in_ring = true;
    0.00 :	  677867:       41 c6 45 0c 01          movb   $0x1,0xc(%r13)
    0.00 :	  67786c:       e9 b3 fe ff ff          jmpq   677724 <StrategyGetBuffer+0x1c4>
    0.00 :	  677871:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
    0.00 :	  677878:       ba 20 02 00 00          mov    $0x220,%edx
    0.00 :	  67787d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677882:       e8 b9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677887:       e9 34 fd ff ff          jmpq   6775c0 <StrategyGetBuffer+0x60>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   12.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ef10 <slot_deform_tuple>:
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.00 :	  46ef10:       55                      push   %rbp
    0.00 :	  46ef11:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46ef14:       41 57                   push   %r15
    0.00 :	  46ef16:       41 89 f7                mov    %esi,%r15d
    0.00 :	  46ef19:       41 56                   push   %r14
    0.00 :	  46ef1b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  46ef1e:       41 55                   push   %r13
    0.00 :	  46ef20:       41 54                   push   %r12
    0.00 :	  46ef22:       53                      push   %rbx
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef23:       31 db                   xor    %ebx,%ebx
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.00 :	  46ef25:       48 83 ec 28             sub    $0x28,%rsp
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
    0.00 :	  46ef29:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  46ef2d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
    0.00 :	  46ef31:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
    0.00 :	  46ef35:       8b 77 24                mov    0x24(%rdi),%esi
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
    0.00 :	  46ef38:       4c 8b 5f 30             mov    0x30(%rdi),%r11
         :	        HeapTupleHeader tup = tuple->t_data;
    0.00 :	  46ef3c:       4c 8b 40 10             mov    0x10(%rax),%r8
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
    0.00 :	  46ef40:       41 0f b7 40 14          movzwl 0x14(%r8),%eax
    0.00 :	  46ef45:       83 e0 01                and    $0x1,%eax
    0.00 :	  46ef48:       41 89 c2                mov    %eax,%r10d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef4b:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef4f:       31 ff                   xor    %edi,%edi
    0.00 :	  46ef51:       85 f6                   test   %esi,%esi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef53:       4c 8b 48 08             mov    0x8(%rax),%r9
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef57:       74 09                   je     46ef62 <slot_deform_tuple+0x52>
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
    0.00 :	  46ef59:       41 0f b6 7e 07          movzbl 0x7(%r14),%edi
         :	                slow = false;
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
    0.00 :	  46ef5e:       49 8b 5e 58             mov    0x58(%r14),%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.00 :	  46ef62:       41 0f b6 40 16          movzbl 0x16(%r8),%eax
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46ef67:       44 39 fe                cmp    %r15d,%esi
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.00 :	  46ef6a:       4d 8d 2c 00             lea    (%r8,%rax,1),%r13
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46ef6e:       0f 8d c0 00 00 00       jge    46f034 <slot_deform_tuple+0x124>
    0.00 :	  46ef74:       41 89 f4                mov    %esi,%r12d
    0.00 :	  46ef77:       eb 40                   jmp    46efb9 <slot_deform_tuple+0xa9>
    0.00 :	  46ef79:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
    0.00 :	  46ef80:       44 89 e0                mov    %r12d,%eax
    0.00 :	  46ef83:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  46ef86:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46ef89:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46ef8c:       48 98                   cltq   
    0.00 :	  46ef8e:       41 0f b6 44 00 17       movzbl 0x17(%r8,%rax,1),%eax
    0.00 :	  46ef94:       d3 f8                   sar    %cl,%eax
    0.00 :	  46ef96:       a8 01                   test   $0x1,%al
    0.00 :	  46ef98:       75 2b                   jne    46efc5 <slot_deform_tuple+0xb5>
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46ef9a:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
         :	                        isnull[attnum] = true;
    0.00 :	  46ef9e:       bf 01 00 00 00          mov    $0x1,%edi
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46efa3:       48 c7 04 f2 00 00 00    movq   $0x0,(%rdx,%rsi,8)
    0.00 :	  46efaa:       00 
         :	                        isnull[attnum] = true;
    0.00 :	  46efab:       41 c6 04 33 01          movb   $0x1,(%r11,%rsi,1)
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46efb0:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  46efb4:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46efb7:       7e 78                   jle    46f031 <slot_deform_tuple+0x121>
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
    0.00 :	  46efb9:       49 63 f4                movslq %r12d,%rsi
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
    0.00 :	  46efbc:       45 84 d2                test   %r10b,%r10b
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    6.25 :	  46efbf:       49 8b 14 f1             mov    (%r9,%rsi,8),%rdx
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
   12.50 :	  46efc3:       75 bb                   jne    46ef80 <slot_deform_tuple+0x70>
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
    0.00 :	  46efc5:       40 84 ff                test   %dil,%dil
         :	                        isnull[attnum] = true;
         :	                        slow = true;            /* can't use attcacheoff anymore */
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
    0.00 :	  46efc8:       41 c6 04 33 00          movb   $0x0,(%r11,%rsi,1)
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    6.25 :	  46efcd:       0f 85 7d 00 00 00       jne    46f050 <slot_deform_tuple+0x140>
    0.00 :	  46efd3:       8b 42 54                mov    0x54(%rdx),%eax
    6.25 :	  46efd6:       85 c0                   test   %eax,%eax
    0.00 :	  46efd8:       78 76                   js     46f050 <slot_deform_tuple+0x140>
         :	                        off = thisatt->attcacheoff;
    0.00 :	  46efda:       48 63 d8                movslq %eax,%rbx
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46efdd:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.00 :	  46efe1:       49 8d 44 1d 00          lea    0x0(%r13,%rbx,1),%rax
    0.00 :	  46efe6:       74 28                   je     46f010 <slot_deform_tuple+0x100>
    0.00 :	  46efe8:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
    0.00 :	  46efec:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  46eff0:       0f 84 3a 01 00 00       je     46f130 <slot_deform_tuple+0x220>
    0.00 :	  46eff6:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  46effa:       0f 84 90 01 00 00       je     46f190 <slot_deform_tuple+0x280>
    0.00 :	  46f000:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  46f004:       0f 84 a6 01 00 00       je     46f1b0 <slot_deform_tuple+0x2a0>
    0.00 :	  46f00a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.25 :	  46f010:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
    0.00 :	  46f014:       48 89 04 f1             mov    %rax,(%rcx,%rsi,8)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 :	  46f018:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
    0.00 :	  46f01c:       66 85 c0                test   %ax,%ax
    0.00 :	  46f01f:       7e 6f                   jle    46f090 <slot_deform_tuple+0x180>
    0.00 :	  46f021:       48 0f bf c0             movswq %ax,%rax
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46f025:       41 83 c4 01             add    $0x1,%r12d
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    6.25 :	  46f029:       48 01 c3                add    %rax,%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46f02c:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46f02f:       7f 88                   jg     46efb9 <slot_deform_tuple+0xa9>
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.00 :	  46f031:       44 89 fe                mov    %r15d,%esi
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
    0.00 :	  46f034:       49 89 5e 58             mov    %rbx,0x58(%r14)
         :	        }
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    6.25 :	  46f038:       41 89 76 24             mov    %esi,0x24(%r14)
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
    0.00 :	  46f03c:       41 88 7e 07             mov    %dil,0x7(%r14)
         :	}
    0.00 :	  46f040:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  46f044:       5b                      pop    %rbx
    0.00 :	  46f045:       41 5c                   pop    %r12
    0.00 :	  46f047:       41 5d                   pop    %r13
    0.00 :	  46f049:       41 5e                   pop    %r14
    0.00 :	  46f04b:       41 5f                   pop    %r15
    0.00 :	  46f04d:       c9                      leaveq 
    0.00 :	  46f04e:       c3                      retq   
    0.00 :	  46f04f:       90                      nop
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
         :	                        off = thisatt->attcacheoff;
         :	                else if (thisatt->attlen == -1)
    0.00 :	  46f050:       66 83 7a 4c ff          cmpw   $0xffff,0x4c(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    6.25 :	  46f055:       74 71                   je     46f0c8 <slot_deform_tuple+0x1b8>
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f057:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f05b:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f05d:       0f 84 1d 01 00 00       je     46f180 <slot_deform_tuple+0x270>
    0.00 :	  46f063:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f065:       74 10                   je     46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f067:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f069:       0f 84 51 01 00 00       je     46f1c0 <slot_deform_tuple+0x2b0>
    0.00 :	  46f06f:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f073:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
         :
         :	                        if (!slow)
    0.00 :	  46f077:       40 84 ff                test   %dil,%dil
    0.00 :	  46f07a:       0f 85 5d ff ff ff       jne    46efdd <slot_deform_tuple+0xcd>
         :	                                thisatt->attcacheoff = off;
    0.00 :	  46f080:       89 5a 54                mov    %ebx,0x54(%rdx)
    0.00 :	  46f083:       e9 55 ff ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f088:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f08f:       00 
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f090:       66 83 c0 01             add    $0x1,%ax
    0.00 :	  46f094:       0f 85 a6 00 00 00       jne    46f140 <slot_deform_tuple+0x230>
    0.00 :	  46f09a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.25 :	  46f0a0:       3c 01                   cmp    $0x1,%al
    0.00 :	  46f0a2:       0f 84 50 01 00 00       je     46f1f8 <slot_deform_tuple+0x2e8>
    0.00 :	  46f0a8:       a8 01                   test   $0x1,%al
    0.00 :	  46f0aa:       0f 85 20 01 00 00       jne    46f1d0 <slot_deform_tuple+0x2c0>
    0.00 :	  46f0b0:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    0.00 :	  46f0b5:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  46f0b8:       89 c0                   mov    %eax,%eax
    6.25 :	  46f0ba:       48 8d 1c 18             lea    (%rax,%rbx,1),%rbx
    0.00 :	  46f0be:       e9 ad 00 00 00          jmpq   46f170 <slot_deform_tuple+0x260>
    0.00 :	  46f0c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.00 :	  46f0c8:       40 84 ff                test   %dil,%dil
    0.00 :	  46f0cb:       75 26                   jne    46f0f3 <slot_deform_tuple+0x1e3>
    0.00 :	  46f0cd:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f0d1:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f0d3:       0f 84 4f 01 00 00       je     46f228 <slot_deform_tuple+0x318>
    0.00 :	  46f0d9:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f0db:       74 a3                   je     46f080 <slot_deform_tuple+0x170>
    0.00 :	  46f0dd:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f0df:       90                      nop
    0.00 :	  46f0e0:       0f 84 52 01 00 00       je     46f238 <slot_deform_tuple+0x328>
    0.00 :	  46f0e6:       48 8d 43 01             lea    0x1(%rbx),%rax
    0.00 :	  46f0ea:       48 83 e0 fe             and    $0xfffffffffffffffe,%rax
    0.00 :	  46f0ee:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  46f0f1:       74 8d                   je     46f080 <slot_deform_tuple+0x170>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f0f3:       41 80 7c 1d 00 00       cmpb   $0x0,0x0(%r13,%rbx,1)
    0.00 :	  46f0f9:       0f 85 a1 00 00 00       jne    46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f0ff:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f103:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f105:       0f 84 d5 00 00 00       je     46f1e0 <slot_deform_tuple+0x2d0>
    0.00 :	  46f10b:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f10d:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f110:       0f 84 8a 00 00 00       je     46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f116:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f118:       0f 84 27 01 00 00       je     46f245 <slot_deform_tuple+0x335>
    0.00 :	  46f11e:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f122:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f127:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
    0.00 :	  46f12b:       e9 ad fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f130:       49 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%rax
    0.00 :	  46f135:       e9 d6 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f13a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f140:       49 8d 7c 1d 00          lea    0x0(%r13,%rbx,1),%rdi
    0.00 :	  46f145:       4c 89 45 c8             mov    %r8,-0x38(%rbp)
    0.00 :	  46f149:       4c 89 4d c0             mov    %r9,-0x40(%rbp)
    0.00 :	  46f14d:       44 88 55 b8             mov    %r10b,-0x48(%rbp)
    0.00 :	  46f151:       4c 89 5d b0             mov    %r11,-0x50(%rbp)
    0.00 :	  46f155:       e8 f6 a6 ff ff          callq  469850 <strlen@plt>
    0.00 :	  46f15a:       44 0f b6 55 b8          movzbl -0x48(%rbp),%r10d
    0.00 :	  46f15f:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  46f163:       48 8d 5c 03 01          lea    0x1(%rbx,%rax,1),%rbx
    0.00 :	  46f168:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  46f16c:       4c 8b 5d b0             mov    -0x50(%rbp),%r11
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
   12.50 :	  46f170:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f175:       e9 36 fe ff ff          jmpq   46efb0 <slot_deform_tuple+0xa0>
    0.00 :	  46f17a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f180:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f184:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.00 :	  46f188:       e9 ea fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f18d:       0f 1f 00                nopl   (%rax)
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    6.25 :	  46f190:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    6.25 :	  46f195:       e9 76 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f19a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
    0.00 :	  46f1a0:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1a5:       e9 33 fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f1b0:       41 0f b7 44 1d 00       movzwl 0x0(%r13,%rbx,1),%eax
    0.00 :	  46f1b6:       e9 55 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f1bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f1c0:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f1c4:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f1c8:       e9 aa fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f1cd:       0f 1f 00                nopl   (%rax)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f1d0:       d0 e8                   shr    %al
    0.00 :	  46f1d2:       0f b6 c0                movzbl %al,%eax
    0.00 :	  46f1d5:       e9 e0 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f1da:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (!slow &&
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f1e0:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f1e4:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1e9:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.00 :	  46f1ed:       e9 eb fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f1f8:       41 0f b6 54 1d 01       movzbl 0x1(%r13,%rbx,1),%edx
    0.00 :	  46f1fe:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  46f203:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  46f206:       0f 84 ae fe ff ff       je     46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f20c:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  46f20f:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  46f214:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  46f219:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  46f21d:       e9 98 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f222:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.00 :	  46f228:       48 8d 43 03             lea    0x3(%rbx),%rax
    0.00 :	  46f22c:       48 83 e0 fc             and    $0xfffffffffffffffc,%rax
    0.00 :	  46f230:       e9 b9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
    0.00 :	  46f235:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f238:       48 8d 43 07             lea    0x7(%rbx),%rax
    0.00 :	  46f23c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  46f240:       e9 a9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f245:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f249:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f24e:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f252:       e9 86 fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   37.50 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1742
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1720
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1742
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1687
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1702
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1704
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1714
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1816
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1779
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049d220 <heap_hot_search_buffer>:
         :	 */
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
    0.00 :	  49d220:       55                      push   %rbp
    0.00 :	  49d221:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1687
    6.25 :	  49d224:       41 57                   push   %r15
    0.00 :	  49d226:       4d 89 cf                mov    %r9,%r15
    0.00 :	  49d229:       41 56                   push   %r14
    0.00 :	  49d22b:       4d 89 c6                mov    %r8,%r14
    0.00 :	  49d22e:       41 55                   push   %r13
    0.00 :	  49d230:       41 54                   push   %r12
    0.00 :	  49d232:       53                      push   %rbx
    0.00 :	  49d233:       48 83 ec 28             sub    $0x28,%rsp
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d237:       85 d2                   test   %edx,%edx
         :	 */
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
    0.00 :	  49d239:       48 89 4d b8             mov    %rcx,-0x48(%rbp)
    0.00 :	  49d23d:       48 89 7d d0             mov    %rdi,-0x30(%rbp)
    0.00 :	  49d241:       48 89 75 c8             mov    %rsi,-0x38(%rbp)
    0.00 :	  49d245:       89 55 c4                mov    %edx,-0x3c(%rbp)
    0.00 :	  49d248:       0f b6 4d 10             movzbl 0x10(%rbp),%ecx
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d24c:       0f 88 5e 02 00 00       js     49d4b0 <heap_hot_search_buffer+0x290>
    0.00 :	  49d252:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  49d255:       83 e8 01                sub    $0x1,%eax
    0.00 :	  49d258:       4c 63 e8                movslq %eax,%r13
    0.00 :	  49d25b:       49 c1 e5 0d             shl    $0xd,%r13
    0.00 :	  49d25f:       4c 03 2d 92 28 72 00    add    0x722892(%rip),%r13        # bbfaf8 <BufferBlocks>
         :	        bool            at_chain_start;
         :	        bool            valid;
         :	        bool            skip;
         :
         :	        /* If this is not the first call, previous call returned a (live!) tuple */
         :	        if (all_dead)
    0.00 :	  49d266:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d269:       74 03                   je     49d26e <heap_hot_search_buffer+0x4e>
         :	                *all_dead = first_call;
    0.00 :	  49d26b:       41 88 0f                mov    %cl,(%r15)
         :
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1702
    6.25 :	  49d26e:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  49d272:       44 0f b7 60 04          movzwl 0x4(%rax),%r12d
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
         :
         :	        heapTuple->t_self = *tid;
    0.00 :	  49d277:       48 89 c2                mov    %rax,%rdx
    0.00 :	  49d27a:       8b 00                   mov    (%rax),%eax
    0.00 :	  49d27c:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	  49d280:       0f b7 42 04             movzwl 0x4(%rdx),%eax
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d284:       66 45 85 e4             test   %r12w,%r12w
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
         :
         :	        heapTuple->t_self = *tid;
    0.00 :	  49d288:       66 41 89 46 08          mov    %ax,0x8(%r14)
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d28d:       74 4e                   je     49d2dd <heap_hot_search_buffer+0xbd>
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
    0.00 :	  49d28f:       84 c9                   test   %cl,%cl
    0.00 :	  49d291:       89 ce                   mov    %ecx,%esi
    0.00 :	  49d293:       41 0f 94 c0             sete   %r8b
    0.00 :	  49d297:       31 ff                   xor    %edi,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1704
    6.25 :	  49d299:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d2a0:       41 0f b7 55 0c          movzwl 0xc(%r13),%edx
    0.00 :	  49d2a5:       31 c0                   xor    %eax,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1714
    6.25 :	  49d2a7:       41 0f b7 cc             movzwl %r12w,%ecx
    0.00 :	  49d2ab:       66 83 fa 18             cmp    $0x18,%dx
    0.00 :	  49d2af:       76 0b                   jbe    49d2bc <heap_hot_search_buffer+0x9c>
    0.00 :	  49d2b1:       0f b7 c2                movzwl %dx,%eax
    0.00 :	  49d2b4:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  49d2b8:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  49d2bc:       48 39 c8                cmp    %rcx,%rax
    0.00 :	  49d2bf:       72 1c                   jb     49d2dd <heap_hot_search_buffer+0xbd>
         :	                        break;
         :
         :	                lp = PageGetItemId(dp, offnum);
         :
         :	                /* check for unused, dead, or redirected items */
         :	                if (!ItemIdIsNormal(lp))
    0.00 :	  49d2c1:       48 8d 51 03             lea    0x3(%rcx),%rdx
    0.00 :	  49d2c5:       41 8b 44 95 08          mov    0x8(%r13,%rdx,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1720
   12.50 :	  49d2ca:       25 00 80 01 00          and    $0x18000,%eax
    0.00 :	  49d2cf:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  49d2d4:       74 3a                   je     49d310 <heap_hot_search_buffer+0xf0>
         :	                {
         :	                        /* We should only see a redirect at start of chain */
         :	                        if (ItemIdIsRedirected(lp) && at_chain_start)
    0.00 :	  49d2d6:       3d 00 00 01 00          cmp    $0x10000,%eax
    0.00 :	  49d2db:       74 13                   je     49d2f0 <heap_hot_search_buffer+0xd0>
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d2dd:       31 c0                   xor    %eax,%eax
         :	                else
         :	                        break;                          /* end of chain */
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  49d2df:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  49d2e3:       5b                      pop    %rbx
    0.00 :	  49d2e4:       41 5c                   pop    %r12
    0.00 :	  49d2e6:       41 5d                   pop    %r13
    0.00 :	  49d2e8:       41 5e                   pop    %r14
    0.00 :	  49d2ea:       41 5f                   pop    %r15
    0.00 :	  49d2ec:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1816
    6.25 :	  49d2ed:       c3                      retq   
    0.00 :	  49d2ee:       66 90                   xchg   %ax,%ax
         :
         :	                /* check for unused, dead, or redirected items */
         :	                if (!ItemIdIsNormal(lp))
         :	                {
         :	                        /* We should only see a redirect at start of chain */
         :	                        if (ItemIdIsRedirected(lp) && at_chain_start)
    0.00 :	  49d2f0:       40 84 f6                test   %sil,%sil
    0.00 :	  49d2f3:       74 e8                   je     49d2dd <heap_hot_search_buffer+0xbd>
         :	                        {
         :	                                /* Follow the redirect */
         :	                                offnum = ItemIdGetRedirect(lp);
    0.00 :	  49d2f5:       45 0f b7 64 95 08       movzwl 0x8(%r13,%rdx,4),%r12d
    0.00 :	  49d2fb:       66 41 81 e4 ff 7f       and    $0x7fff,%r12w
         :	        Assert(TransactionIdIsValid(RecentGlobalXmin));
         :
         :	        Assert(ItemPointerGetBlockNumber(tid) == BufferGetBlockNumber(buffer));
         :	        offnum = ItemPointerGetOffsetNumber(tid);
         :	        at_chain_start = first_call;
         :	        skip = !first_call;
    0.00 :	  49d301:       31 f6                   xor    %esi,%esi
         :	        for (;;)
         :	        {
         :	                ItemId          lp;
         :
         :	                /* check for bogus TID */
         :	                if (offnum < FirstOffsetNumber || offnum > PageGetMaxOffsetNumber(dp))
    0.00 :	  49d303:       66 45 85 e4             test   %r12w,%r12w
    0.00 :	  49d307:       75 97                   jne    49d2a0 <heap_hot_search_buffer+0x80>
    0.00 :	  49d309:       eb d2                   jmp    49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d30b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
    0.00 :	  49d310:       41 0f b7 44 95 08       movzwl 0x8(%r13,%rdx,4),%eax
    0.00 :	  49d316:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  49d31b:       49 8d 4c 05 00          lea    0x0(%r13,%rax,1),%rcx
    0.00 :	  49d320:       49 89 4e 10             mov    %rcx,0x10(%r14)
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d324:       41 0f b7 44 95 0a       movzwl 0xa(%r13,%rdx,4),%eax
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d32a:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d32e:       66 d1 e8                shr    %ax
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
         :
         :	                /*
         :	                 * Shouldn't see a HEAP_ONLY tuple at chain start.
         :	                 */
         :	                if (at_chain_start && HeapTupleIsHeapOnly(heapTuple))
    0.00 :	  49d331:       40 84 f6                test   %sil,%sil
         :	                        /* else must be end of chain */
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
    0.00 :	  49d334:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  49d337:       41 89 06                mov    %eax,(%r14)
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d33a:       8b 42 40                mov    0x40(%rdx),%eax
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
    0.00 :	  49d33d:       66 45 89 66 08          mov    %r12w,0x8(%r14)
         :	                        break;
         :	                }
         :
         :	                heapTuple->t_data = (HeapTupleHeader) PageGetItem(dp, lp);
         :	                heapTuple->t_len = ItemIdGetLength(lp);
         :	                heapTuple->t_tableOid = RelationGetRelid(relation);
    0.00 :	  49d342:       41 89 46 0c             mov    %eax,0xc(%r14)
         :	                ItemPointerSetOffsetNumber(&heapTuple->t_self, offnum);
         :
         :	                /*
         :	                 * Shouldn't see a HEAP_ONLY tuple at chain start.
         :	                 */
         :	                if (at_chain_start && HeapTupleIsHeapOnly(heapTuple))
    0.00 :	  49d346:       74 07                   je     49d34f <heap_hot_search_buffer+0x12f>
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1742
   12.50 :	  49d348:       66 83 79 12 00          cmpw   $0x0,0x12(%rcx)
   37.50 :	  49d34d:       78 8e                   js     49d2dd <heap_hot_search_buffer+0xbd>
         :
         :	                /*
         :	                 * The xmin should match the previous xmax value, else chain is
         :	                 * broken.
         :	                 */
         :	                if (TransactionIdIsValid(prev_xmax) &&
    0.00 :	  49d34f:       85 ff                   test   %edi,%edi
    0.00 :	  49d351:       74 23                   je     49d376 <heap_hot_search_buffer+0x156>
    0.00 :	  49d353:       49 8b 4e 10             mov    0x10(%r14),%rcx
    0.00 :	  49d357:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  49d35c:       0f b7 41 14             movzwl 0x14(%rcx),%eax
    0.00 :	  49d360:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  49d365:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  49d36a:       74 02                   je     49d36e <heap_hot_search_buffer+0x14e>
    0.00 :	  49d36c:       8b 11                   mov    (%rcx),%edx
    0.00 :	  49d36e:       39 fa                   cmp    %edi,%edx
    0.00 :	  49d370:       0f 85 67 ff ff ff       jne    49d2dd <heap_hot_search_buffer+0xbd>
         :	                 * return the first tuple we find.  But on later passes, heapTuple
         :	                 * will initially be pointing to the tuple we returned last time.
         :	                 * Returning it again would be incorrect (and would loop forever), so
         :	                 * we skip it and return the next match we find.
         :	                 */
         :	                if (!skip)
    0.00 :	  49d376:       45 84 c0                test   %r8b,%r8b
    0.00 :	  49d379:       74 65                   je     49d3e0 <heap_hot_search_buffer+0x1c0>
         :	                /*
         :	                 * If we can't see it, maybe no one else can either.  At caller
         :	                 * request, check whether all chain members are dead to all
         :	                 * transactions.
         :	                 */
         :	                if (all_dead && *all_dead &&
    0.00 :	  49d37b:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d37e:       66 90                   xchg   %ax,%ax
    0.00 :	  49d380:       74 0a                   je     49d38c <heap_hot_search_buffer+0x16c>
    0.00 :	  49d382:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	  49d386:       0f 85 04 01 00 00       jne    49d490 <heap_hot_search_buffer+0x270>
         :
         :	                /*
         :	                 * Check to see if HOT chain continues past this tuple; if so fetch
         :	                 * the next offnum and loop around.
         :	                 */
         :	                if (HeapTupleIsHotUpdated(heapTuple))
    0.00 :	  49d38c:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  49d390:       f6 47 13 40             testb  $0x40,0x13(%rdi)
    0.00 :	  49d394:       0f 84 43 ff ff ff       je     49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d39a:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  49d39e:       f6 c6 08                test   $0x8,%dh
    0.00 :	  49d3a1:       0f 85 36 ff ff ff       jne    49d2dd <heap_hot_search_buffer+0xbd>
    0.00 :	  49d3a7:       89 d0                   mov    %edx,%eax
    0.00 :	  49d3a9:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  49d3ae:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  49d3b3:       0f 84 24 ff ff ff       je     49d2dd <heap_hot_search_buffer+0xbd>
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d3b9:       89 d0                   mov    %edx,%eax
         :	                 */
         :	                if (HeapTupleIsHotUpdated(heapTuple))
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
    0.00 :	  49d3bb:       44 0f b7 67 10          movzwl 0x10(%rdi),%r12d
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d3c0:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  49d3c5:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  49d3ca:       0f 84 a8 00 00 00       je     49d478 <heap_hot_search_buffer+0x258>
    0.00 :	  49d3d0:       8b 7f 04                mov    0x4(%rdi),%edi
    0.00 :	  49d3d3:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  49d3d6:       e9 26 ff ff ff          jmpq   49d301 <heap_hot_search_buffer+0xe1>
    0.00 :	  49d3db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * element of the HOT chain we're currently investigating instead
         :	                         * of the root tuple of the HOT chain. This is important because
         :	                         * the *Satisfies routine for historical mvcc snapshots needs the
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
    0.00 :	  49d3e0:       8b 7d c4                mov    -0x3c(%rbp),%edi
    0.00 :	  49d3e3:       e8 48 6c 1d 00          callq  674030 <BufferGetBlockNumber>
    0.00 :	  49d3e8:       8b 7d c4                mov    -0x3c(%rbp),%edi
    0.00 :	  49d3eb:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  49d3ee:       66 41 89 46 04          mov    %ax,0x4(%r14)
    0.00 :	  49d3f3:       e8 38 6c 1d 00          callq  674030 <BufferGetBlockNumber>
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d3f8:       48 8b 75 b8             mov    -0x48(%rbp),%rsi
    0.00 :	  49d3fc:       8b 55 c4                mov    -0x3c(%rbp),%edx
    0.00 :	  49d3ff:       4c 89 f7                mov    %r14,%rdi
         :	                         * element of the HOT chain we're currently investigating instead
         :	                         * of the root tuple of the HOT chain. This is important because
         :	                         * the *Satisfies routine for historical mvcc snapshots needs the
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
    0.00 :	  49d402:       66 41 89 46 06          mov    %ax,0x6(%r14)
    0.00 :	  49d407:       66 45 89 66 08          mov    %r12w,0x8(%r14)
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d40c:       ff 16                   callq  *(%rsi)
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
    0.00 :	  49d40e:       8b 4d c4                mov    -0x3c(%rbp),%ecx
    0.00 :	  49d411:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  49d415:       0f be f8                movsbl %al,%edi
    0.00 :	  49d418:       48 8b 75 c8             mov    -0x38(%rbp),%rsi
    0.00 :	  49d41c:       4c 89 f2                mov    %r14,%rdx
         :	                         * correct tid to decide about the visibility in some cases.
         :	                         */
         :	                        ItemPointerSet(&(heapTuple->t_self), BufferGetBlockNumber(buffer), offnum);
         :
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
    0.00 :	  49d41f:       89 c3                   mov    %eax,%ebx
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
    0.00 :	  49d421:       e8 3a 72 1f 00          callq  694660 <CheckForSerializableConflictOut>
         :	                                                                                        buffer, snapshot);
         :	                        /* reset to original, non-redirected, tid */
         :	                        heapTuple->t_self = *tid;
    0.00 :	  49d426:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
         :
         :	                        if (valid)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1779
    6.25 :	  49d42a:       84 db                   test   %bl,%bl
         :	                        /* If it's visible per the snapshot, we must return it */
         :	                        valid = HeapTupleSatisfiesVisibility(heapTuple, snapshot, buffer);
         :	                        CheckForSerializableConflictOut(valid, relation, heapTuple,
         :	                                                                                        buffer, snapshot);
         :	                        /* reset to original, non-redirected, tid */
         :	                        heapTuple->t_self = *tid;
    0.00 :	  49d42c:       8b 01                   mov    (%rcx),%eax
    0.00 :	  49d42e:       41 89 46 04             mov    %eax,0x4(%r14)
    0.00 :	  49d432:       0f b7 41 04             movzwl 0x4(%rcx),%eax
    0.00 :	  49d436:       66 41 89 46 08          mov    %ax,0x8(%r14)
         :
         :	                        if (valid)
    0.00 :	  49d43b:       0f 84 3a ff ff ff       je     49d37b <heap_hot_search_buffer+0x15b>
         :	                        {
         :	                                ItemPointerSetOffsetNumber(tid, offnum);
    0.00 :	  49d441:       66 44 89 61 04          mov    %r12w,0x4(%rcx)
         :	                                PredicateLockTuple(relation, heapTuple, snapshot);
    0.00 :	  49d446:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  49d44a:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  49d44d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  49d451:       e8 4a 77 1f 00          callq  694ba0 <PredicateLockTuple>
         :	                                if (all_dead)
    0.00 :	  49d456:       4d 85 ff                test   %r15,%r15
    0.00 :	  49d459:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  49d45e:       0f 84 7b fe ff ff       je     49d2df <heap_hot_search_buffer+0xbf>
         :	                                        *all_dead = false;
    0.00 :	  49d464:       41 c6 07 00             movb   $0x0,(%r15)
    0.00 :	  49d468:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  49d46d:       e9 6d fe ff ff          jmpq   49d2df <heap_hot_search_buffer+0xbf>
    0.00 :	  49d472:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        Assert(ItemPointerGetBlockNumber(&heapTuple->t_data->t_ctid) ==
         :	                                   ItemPointerGetBlockNumber(tid));
         :	                        offnum = ItemPointerGetOffsetNumber(&heapTuple->t_data->t_ctid);
         :	                        at_chain_start = false;
         :	                        prev_xmax = HeapTupleHeaderGetUpdateXid(heapTuple->t_data);
    0.00 :	  49d478:       84 d2                   test   %dl,%dl
    0.00 :	  49d47a:       0f 88 50 ff ff ff       js     49d3d0 <heap_hot_search_buffer+0x1b0>
    0.00 :	  49d480:       e8 9b 9c ff ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  49d485:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  49d488:       89 c7                   mov    %eax,%edi
    0.00 :	  49d48a:       e9 72 fe ff ff          jmpq   49d301 <heap_hot_search_buffer+0xe1>
    0.00 :	  49d48f:       90                      nop
         :	                /*
         :	                 * If we can't see it, maybe no one else can either.  At caller
         :	                 * request, check whether all chain members are dead to all
         :	                 * transactions.
         :	                 */
         :	                if (all_dead && *all_dead &&
    0.00 :	  49d490:       8b 35 6a d4 71 00       mov    0x71d46a(%rip),%esi        # bba900 <RecentGlobalXmin>
    0.00 :	  49d496:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49d499:       e8 62 72 30 00          callq  7a4700 <HeapTupleIsSurelyDead>
    0.00 :	  49d49e:       84 c0                   test   %al,%al
    0.00 :	  49d4a0:       0f 85 e6 fe ff ff       jne    49d38c <heap_hot_search_buffer+0x16c>
         :	                        !HeapTupleIsSurelyDead(heapTuple, RecentGlobalXmin))
         :	                        *all_dead = false;
    0.00 :	  49d4a6:       41 c6 07 00             movb   $0x0,(%r15)
    0.00 :	  49d4aa:       e9 dd fe ff ff          jmpq   49d38c <heap_hot_search_buffer+0x16c>
    0.00 :	  49d4af:       90                      nop
         :	bool
         :	heap_hot_search_buffer(ItemPointer tid, Relation relation, Buffer buffer,
         :	                                           Snapshot snapshot, HeapTuple heapTuple,
         :	                                           bool *all_dead, bool first_call)
         :	{
         :	        Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  49d4b0:       89 d0                   mov    %edx,%eax
    0.00 :	  49d4b2:       48 8b 15 5f fc 6d 00    mov    0x6dfc5f(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49d4b9:       f7 d0                   not    %eax
    0.00 :	  49d4bb:       48 98                   cltq   
    0.00 :	  49d4bd:       4c 8b 2c c2             mov    (%rdx,%rax,8),%r13
    0.00 :	  49d4c1:       e9 a0 fd ff ff          jmpq   49d266 <heap_hot_search_buffer+0x46>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   62.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
   18.75 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1292
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1318
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674c30 <PinBuffer>:
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    6.25 :	  674c30:       55                      push   %rbp
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c31:       ba 01 00 00 00          mov    $0x1,%edx
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
    0.00 :	  674c36:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674c39:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    6.25 :	  674c3d:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  674c41:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674c44:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  674c48:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  674c4c:       48 83 ec 20             sub    $0x20,%rsp
         :	        int                     b = buf->buf_id;
    0.00 :	  674c50:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
   62.50 :	  674c53:       49 89 f6                mov    %rsi,%r14
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c56:       be 01 00 00 00          mov    $0x1,%esi
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c5b:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	{
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c61:       83 c7 01                add    $0x1,%edi
    0.00 :	  674c64:       e8 b7 f8 ff ff          callq  674520 <GetPrivateRefCountEntry>
    0.00 :	  674c69:       49 89 c4                mov    %rax,%r12
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c6c:       8b 40 04                mov    0x4(%rax),%eax
    0.00 :	  674c6f:       85 c0                   test   %eax,%eax
    0.00 :	  674c71:       75 43                   jne    674cb6 <PinBuffer+0x86>
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674c73:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674c77:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674c7c:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1292
   18.75 :	  674c7f:       84 c0                   test   %al,%al
    0.00 :	  674c81:       75 6d                   jne    674cf0 <PinBuffer+0xc0>
         :	                buf->refcount++;
    0.00 :	  674c83:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674c86:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674c89:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674c8c:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674c8f:       74 7c                   je     674d0d <PinBuffer+0xdd>
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
         :	                                buf->usage_count++;
         :	                }
         :	                else
         :	                {
         :	                        if (buf->usage_count == 0)
    0.00 :	  674c91:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674c95:       66 85 c0                test   %ax,%ax
    0.00 :	  674c98:       75 06                   jne    674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count = 1;
    0.00 :	  674c9a:       66 c7 43 16 01 00       movw   $0x1,0x16(%rbx)
         :	                }
         :	                result = (buf->flags & BM_VALID) != 0;
    0.00 :	  674ca0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674ca4:       d1 e8                   shr    %eax
    0.00 :	  674ca6:       41 89 c5                mov    %eax,%r13d
    0.00 :	  674ca9:       41 83 e5 01             and    $0x1,%r13d
         :	                UnlockBufHdr(buf);
    0.00 :	  674cad:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  674cb1:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	        {
         :	                /* If we previously pinned the buffer, it must surely be valid */
         :	                result = true;
         :	        }
         :
         :	        ref->refcount++;
    0.00 :	  674cb6:       83 c0 01                add    $0x1,%eax
    0.00 :	  674cb9:       41 89 44 24 04          mov    %eax,0x4(%r12)
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674cbe:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674cc1:       48 8b 3d f8 5b 54 00    mov    0x545bf8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674cc8:       83 c6 01                add    $0x1,%esi
    0.00 :	  674ccb:       e8 d0 54 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	                                                                BufferDescriptorGetBuffer(buf));
         :	        return result;
         :	}
    0.00 :	  674cd0:       44 89 e8                mov    %r13d,%eax
    0.00 :	  674cd3:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1318
    6.25 :	  674cd7:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674cdc:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  674ce1:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  674ce6:       c9                      leaveq 
    0.00 :	  674ce7:       c3                      retq   
    0.00 :	  674ce8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674cef:       00 
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674cf0:       ba 0c 05 00 00          mov    $0x50c,%edx
    0.00 :	  674cf5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674cfa:       e8 41 b3 01 00          callq  690040 <s_lock>
         :	                buf->refcount++;
    0.00 :	  674cff:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d02:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674d05:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674d08:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674d0b:       75 84                   jne    674c91 <PinBuffer+0x61>
         :	                {
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
    0.00 :	  674d0d:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d11:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  674d15:       77 89                   ja     674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count++;
    0.00 :	  674d17:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d1b:       83 c0 01                add    $0x1,%eax
    0.00 :	  674d1e:       66 89 43 16             mov    %ax,0x16(%rbx)
    0.00 :	  674d22:       e9 79 ff ff ff          jmpq   674ca0 <PinBuffer+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1872
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1874
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1881
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675260 <SyncOneBuffer>:
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675260:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675261:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675266:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    6.25 :	  675269:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  67526d:       48 63 df                movslq %edi,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675270:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  675274:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
   12.50 :	  675278:       48 c1 e3 06             shl    $0x6,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  67527c:       48 83 ec 20             sub    $0x20,%rsp
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  675280:       48 03 1d 79 a8 54 00    add    0x54a879(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675287:       41 89 f5                mov    %esi,%r13d
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    6.25 :	  67528a:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  67528e:       f0 86 07                lock xchg %al,(%rdi)
   50.00 :	  675291:       84 c0                   test   %al,%al
    0.00 :	  675293:       75 5b                   jne    6752f0 <SyncOneBuffer+0x90>
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  675295:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  675298:       85 c0                   test   %eax,%eax
    0.00 :	  67529a:       75 0f                   jne    6752ab <SyncOneBuffer+0x4b>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1872
   12.50 :	  67529c:       0f b7 43 16             movzwl 0x16(%rbx),%eax
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752a0:       41 bc 02 00 00 00       mov    $0x2,%r12d
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  6752a6:       66 85 c0                test   %ax,%ax
    0.00 :	  6752a9:       74 08                   je     6752b3 <SyncOneBuffer+0x53>
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
    0.00 :	  6752ab:       45 31 e4                xor    %r12d,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1874
    6.25 :	  6752ae:       45 84 ed                test   %r13b,%r13b
    0.00 :	  6752b1:       75 2d                   jne    6752e0 <SyncOneBuffer+0x80>
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
         :	                return result;
         :	        }
         :
         :	        if (!(bufHdr->flags & BM_VALID) || !(bufHdr->flags & BM_DIRTY))
    0.00 :	  6752b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1881
    6.25 :	  6752b7:       a8 02                   test   $0x2,%al
    0.00 :	  6752b9:       74 08                   je     6752c3 <SyncOneBuffer+0x63>
    0.00 :	  6752bb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752bf:       a8 01                   test   $0x1,%al
    0.00 :	  6752c1:       75 45                   jne    675308 <SyncOneBuffer+0xa8>
         :	        {
         :	                /* It's clean, so nothing to do */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752c3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752c7:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6752ca:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6752ce:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6752d2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6752d6:       c9                      leaveq 
    0.00 :	  6752d7:       c3                      retq   
    0.00 :	  6752d8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  6752df:       00 
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752e0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752e3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752e7:       eb de                   jmp    6752c7 <SyncOneBuffer+0x67>
    0.00 :	  6752e9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
    0.00 :	  6752f0:       ba 4e 07 00 00          mov    $0x74e,%edx
    0.00 :	  6752f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6752fa:       e8 41 ad 01 00          callq  690040 <s_lock>
    0.00 :	  6752ff:       eb 94                   jmp    675295 <SyncOneBuffer+0x35>
    0.00 :	  675301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  675308:       48 89 df                mov    %rbx,%rdi
         :	        FlushBuffer(bufHdr, NULL);
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
    0.00 :	  67530b:       41 83 cc 01             or     $0x1,%r12d
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  67530f:       e8 bc f8 ff ff          callq  674bd0 <PinBuffer_Locked>
         :	        LWLockAcquire(bufHdr->content_lock, LW_SHARED);
    0.00 :	  675314:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675318:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67531d:       e8 ce a7 01 00          callq  68faf0 <LWLockAcquire>
         :
         :	        FlushBuffer(bufHdr, NULL);
    0.00 :	  675322:       31 f6                   xor    %esi,%esi
    0.00 :	  675324:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675327:       e8 24 fc ff ff          callq  674f50 <FlushBuffer>
         :
         :	        LWLockRelease(bufHdr->content_lock);
    0.00 :	  67532c:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675330:       e8 6b a0 01 00          callq  68f3a0 <LWLockRelease>
         :	        UnpinBuffer(bufHdr, true);
    0.00 :	  675335:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67533a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  67533d:       e8 ee f9 ff ff          callq  674d30 <UnpinBuffer>
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  675342:       eb 83                   jmp    6752c7 <SyncOneBuffer+0x67>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1364
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1401
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1367
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1372
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1368
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674d30 <UnpinBuffer>:
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d30:       55                      push   %rbp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1364
   13.33 :	  674d31:       31 d2                   xor    %edx,%edx
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d33:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674d36:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
    6.67 :	  674d3a:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    6.67 :	  674d3e:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674d41:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  674d45:       48 83 ec 30             sub    $0x30,%rsp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
    0.00 :	  674d49:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d4c:       41 89 f4                mov    %esi,%r12d
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d4f:       31 f6                   xor    %esi,%esi
    0.00 :	  674d51:       83 c7 01                add    $0x1,%edi
    0.00 :	  674d54:       e8 c7 f7 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1367
    6.67 :	  674d59:       45 84 e4                test   %r12b,%r12b
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d5c:       49 89 c5                mov    %rax,%r13
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
    0.00 :	  674d5f:       0f 85 b3 00 00 00       jne    674e18 <UnpinBuffer+0xe8>
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1372
    6.67 :	  674d65:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674d69:       83 e8 01                sub    $0x1,%eax
         :	        if (ref->refcount == 0)
    0.00 :	  674d6c:       85 c0                   test   %eax,%eax
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
    0.00 :	  674d6e:       41 89 45 04             mov    %eax,0x4(%r13)
         :	        if (ref->refcount == 0)
    0.00 :	  674d72:       75 66                   jne    674dda <UnpinBuffer+0xaa>
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
    6.67 :	  674d74:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674d78:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674d7d:       f0 86 07                lock xchg %al,(%rdi)
   33.33 :	  674d80:       84 c0                   test   %al,%al
    0.00 :	  674d82:       0f 85 a8 00 00 00       jne    674e30 <UnpinBuffer+0x100>
         :
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
    0.00 :	  674d88:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d8b:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674d8e:       89 43 18                mov    %eax,0x18(%rbx)
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674d91:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674d95:       a8 40                   test   $0x40,%al
    0.00 :	  674d97:       75 57                   jne    674df0 <UnpinBuffer+0xc0>
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
         :	                        UnlockBufHdr(buf);
         :	                        ProcSendSignal(wait_backend_pid);
         :	                }
         :	                else
         :	                        UnlockBufHdr(buf);
    0.00 :	  674d99:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	static void
         :	ForgetPrivateRefCountEntry(PrivateRefCountEntry *ref)
         :	{
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
    0.00 :	  674d9d:       49 81 fd c0 d0 b7 00    cmp    $0xb7d0c0,%r13
    0.00 :	  674da4:       72 0d                   jb     674db3 <UnpinBuffer+0x83>
    0.00 :	  674da6:       49 81 fd 00 d1 b7 00    cmp    $0xb7d100,%r13
    0.00 :	  674dad:       0f 82 95 00 00 00       jb     674e48 <UnpinBuffer+0x118>
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674db3:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674db7:       48 8b 3d ba 82 50 00    mov    0x5082ba(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674dbe:       48 8d 4d e7             lea    -0x19(%rbp),%rcx
    0.00 :	  674dc2:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
    0.00 :	  674dc6:       ba 02 00 00 00          mov    $0x2,%edx
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674dcb:       89 45 e0                mov    %eax,-0x20(%rbp)
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674dce:       e8 cd f8 10 00          callq  7846a0 <hash_search>
         :	                                        (void *) &buffer,
         :	                                        HASH_REMOVE,
         :	                                        &found);
         :	                Assert(found);
         :	                Assert(PrivateRefCountOverflowed > 0);
         :	                PrivateRefCountOverflowed--;
    0.00 :	  674dd3:       83 2d 96 82 50 00 01    subl   $0x1,0x508296(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                else
         :	                        UnlockBufHdr(buf);
         :
         :	                ForgetPrivateRefCountEntry(ref);
         :	        }
         :	}
    0.00 :	  674dda:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674dde:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674de2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674de6:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1401
   13.33 :	  674de7:       c3                      retq   
    0.00 :	  674de8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674def:       00 
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674df0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674df3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674df6:       75 a1                   jne    674d99 <UnpinBuffer+0x69>
         :	                        buf->refcount == 1)
         :	                {
         :	                        /* we just released the last pin other than the waiter's */
         :	                        int                     wait_backend_pid = buf->wait_backend_pid;
    0.00 :	  674df8:       8b 7b 1c                mov    0x1c(%rbx),%edi
         :
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
    0.00 :	  674dfb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674dff:       83 e0 bf                and    $0xffffffbf,%eax
    0.00 :	  674e02:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	                        UnlockBufHdr(buf);
    0.00 :	  674e06:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        ProcSendSignal(wait_backend_pid);
    0.00 :	  674e0a:       e8 b1 76 01 00          callq  68c4c0 <ProcSendSignal>
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674e0f:       eb 8c                   jmp    674d9d <UnpinBuffer+0x6d>
    0.00 :	  674e11:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1368
    6.67 :	  674e18:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674e1b:       48 8b 3d 9e 5a 54 00    mov    0x545a9e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e22:       83 c6 01                add    $0x1,%esi
    0.00 :	  674e25:       e8 d6 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
    0.00 :	  674e2a:       e9 36 ff ff ff          jmpq   674d65 <UnpinBuffer+0x35>
    0.00 :	  674e2f:       90                      nop
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
    0.00 :	  674e30:       ba 63 05 00 00          mov    $0x563,%edx
    0.00 :	  674e35:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674e3a:       e8 01 b2 01 00          callq  690040 <s_lock>
    0.00 :	  674e3f:       e9 44 ff ff ff          jmpq   674d88 <UnpinBuffer+0x58>
    0.00 :	  674e44:       0f 1f 40 00             nopl   0x0(%rax)
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
         :	                ref < &PrivateRefCountArray[REFCOUNT_ARRAY_ENTRIES])
         :	        {
         :	                ref->buffer = InvalidBuffer;
    0.00 :	  674e48:       41 c7 45 00 00 00 00    movl   $0x0,0x0(%r13)
    0.00 :	  674e4f:       00 
    0.00 :	  674e50:       eb 88                   jmp    674dda <UnpinBuffer+0xaa>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674520 <GetPrivateRefCountEntry>:
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674520:       55                      push   %rbp
    0.00 :	  674521:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674524:       41 57                   push   %r15
    0.00 :	  674526:       41 89 f7                mov    %esi,%r15d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674529:       89 fe                   mov    %edi,%esi
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67452b:       41 56                   push   %r14
    0.00 :	  67452d:       41 55                   push   %r13
    0.00 :	  67452f:       41 54                   push   %r12
    0.00 :	  674531:       41 89 d4                mov    %edx,%r12d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674534:       ba c0 d0 b7 00          mov    $0xb7d0c0,%edx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674539:       53                      push   %rbx
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  67453a:       31 db                   xor    %ebx,%ebx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67453c:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  674540:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	        PrivateRefCountEntry *res;
         :	        PrivateRefCountEntry *free = NULL;
         :	        bool            found = false;
    0.00 :	  674543:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
   14.29 :	  674547:       eb 14                   jmp    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674549:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                if (res->buffer == buffer)
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
    0.00 :	  674550:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
    0.00 :	  674554:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  67455b:       74 2b                   je     674588 <GetPrivateRefCountEntry+0x68>
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  67455d:       8b 0a                   mov    (%rdx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
   14.29 :	  67455f:       48 89 d0                mov    %rdx,%rax
    0.00 :	  674562:       39 f1                   cmp    %esi,%ecx
    0.00 :	  674564:       0f 84 c8 00 00 00       je     674632 <GetPrivateRefCountEntry+0x112>
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   14.29 :	  67456a:       48 85 db                test   %rbx,%rbx
    0.00 :	  67456d:       75 e1                   jne    674550 <GetPrivateRefCountEntry+0x30>
    7.14 :	  67456f:       85 c9                   test   %ecx,%ecx
    7.14 :	  674571:       48 0f 44 da             cmove  %rdx,%rbx
    7.14 :	  674575:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    7.14 :	  674579:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  674580:       75 db                   jne    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674582:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674588:       8b 05 e2 8a 50 00       mov    0x508ae2(%rip),%eax        # b7d070 <PrivateRefCountOverflowed>
         :	        /*
         :	         * By here we know that the buffer, if already pinned, isn't residing in
         :	         * the array.
         :	         */
         :	        res = NULL;
         :	        found = false;
    0.00 :	  67458e:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674592:       85 c0                   test   %eax,%eax
    0.00 :	  674594:       0f 8e ee 00 00 00       jle    674688 <GetPrivateRefCountEntry+0x168>
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  67459a:       4c 8d 75 d7             lea    -0x29(%rbp),%r14
    0.00 :	  67459e:       48 8b 3d d3 8a 50 00    mov    0x508ad3(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745a5:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  6745a9:       31 d2                   xor    %edx,%edx
    0.00 :	  6745ab:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745ae:       e8 ed 00 11 00          callq  7846a0 <hash_search>
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  6745b7:       49 89 c5                mov    %rax,%r13
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745ba:       0f 84 c8 00 00 00       je     674688 <GetPrivateRefCountEntry+0x168>
         :
         :	                }
         :	        }
         :	        else
         :	        {
         :	                if (!do_move)
    0.00 :	  6745c0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  6745c3:       74 6d                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        return res;
         :	                }
         :	                else if (found && free != NULL)
    0.00 :	  6745c5:       48 85 db                test   %rbx,%rbx
    0.00 :	  6745c8:       75 7e                   jne    674648 <GetPrivateRefCountEntry+0x128>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745ca:       8b 05 b0 8a 50 00       mov    0x508ab0(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745d0:       48 8b 3d a1 8a 50 00    mov    0x508aa1(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745d7:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745da:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745df:       49 89 c4                mov    %rax,%r12
    0.00 :	  6745e2:       83 c0 01                add    $0x1,%eax
    0.00 :	  6745e5:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6745e9:       89 05 91 8a 50 00       mov    %eax,0x508a91(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6745ef:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6745f6:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745f7:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6745fa:       e8 a1 00 11 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6745ff:       8b 53 04                mov    0x4(%rbx),%edx
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674602:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674605:       48 89 de                mov    %rbx,%rsi
         :	                        hashent = hash_search(PrivateRefCountHash,
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  674608:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  67460b:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67460f:       ba 02 00 00 00          mov    $0x2,%edx
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  674614:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  67461b:       00 
         :	                        arrayent->refcount = res->refcount;
    0.00 :	  67461c:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674620:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674623:       48 8b 3d 4e 8a 50 00    mov    0x508a4e(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  67462a:       e8 71 00 11 00          callq  7846a0 <hash_search>
    0.00 :	  67462f:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674632:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  674636:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
   14.29 :	  674637:       41 5c                   pop    %r12
    0.00 :	  674639:       41 5d                   pop    %r13
    0.00 :	  67463b:       41 5e                   pop    %r14
    0.00 :	  67463d:       41 5f                   pop    %r15
    7.14 :	  67463f:       c9                      leaveq 
    7.14 :	  674640:       c3                      retq   
    0.00 :	  674641:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674648:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = res->refcount;
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67464b:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  67464f:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674652:       ba 02 00 00 00          mov    $0x2,%edx
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674657:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = res->refcount;
    0.00 :	  674659:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  67465d:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674660:       48 8b 3d 11 8a 50 00    mov    0x508a11(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674667:       e8 34 00 11 00          callq  7846a0 <hash_search>
         :	                                                (void *) &buffer,
         :	                                                HASH_REMOVE,
         :	                                                &found);
         :	                        Assert(found);
         :	                        Assert(PrivateRefCountOverflowed > 0);
         :	                        PrivateRefCountOverflowed--;
    0.00 :	  67466c:       83 2d fd 89 50 00 01    subl   $0x1,0x5089fd(%rip)        # b7d070 <PrivateRefCountOverflowed>
    0.00 :	  674673:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674676:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  67467a:       5b                      pop    %rbx
    0.00 :	  67467b:       41 5c                   pop    %r12
    0.00 :	  67467d:       41 5d                   pop    %r13
    0.00 :	  67467f:       41 5e                   pop    %r14
    0.00 :	  674681:       41 5f                   pop    %r15
    0.00 :	  674683:       c9                      leaveq 
    0.00 :	  674684:       c3                      retq   
    0.00 :	  674685:       0f 1f 00                nopl   (%rax)
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
         :	        {
         :	                if (!create)
    0.00 :	  674688:       31 c0                   xor    %eax,%eax
    0.00 :	  67468a:       45 84 ff                test   %r15b,%r15b
    0.00 :	  67468d:       74 a3                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        /* Neither array nor hash have an entry and no new entry is needed */
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
    0.00 :	  67468f:       48 85 db                test   %rbx,%rbx
    0.00 :	  674692:       74 11                   je     6746a5 <GetPrivateRefCountEntry+0x185>
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674694:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = 0;
    0.00 :	  674697:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  67469e:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = 0;
    0.00 :	  6746a0:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746a3:       eb 8d                   jmp    674632 <GetPrivateRefCountEntry+0x112>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746a5:       8b 05 d5 89 50 00       mov    0x5089d5(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746ab:       48 8b 3d c6 89 50 00    mov    0x5089c6(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6746b2:       48 8d 4d d7             lea    -0x29(%rbp),%rcx
    0.00 :	  6746b6:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746bb:       49 89 c4                mov    %rax,%r12
    0.00 :	  6746be:       83 c0 01                add    $0x1,%eax
    0.00 :	  6746c1:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6746c5:       89 05 b5 89 50 00       mov    %eax,0x5089b5(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6746cb:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6746d2:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746d3:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6746d6:       e8 c5 ff 10 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6746db:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  6746de:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill the now free array slot */
         :	                        arrayent->buffer = buffer;
    0.00 :	  6746e1:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  6746e4:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  6746eb:       00 
         :	                        arrayent->refcount = 0;
    0.00 :	  6746ec:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :
         :	                        PrivateRefCountOverflowed++;
    0.00 :	  6746f3:       48 89 d8                mov    %rbx,%rax
    0.00 :	  6746f6:       83 05 73 89 50 00 01    addl   $0x1,0x508973(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746fd:       e9 30 ff ff ff          jmpq   674632 <GetPrivateRefCountEntry+0x112>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   58.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:612
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068eec0 <LWLockAttemptLock>:
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec0:       55                      push   %rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:612
    8.33 :	  68eec1:       48 85 d2                test   %rdx,%rdx
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec4:       48 89 e5                mov    %rsp,%rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec7:       74 03                   je     68eecc <LWLockAttemptLock+0xc>
         :	                *potentially_spurious = false;
    0.00 :	  68eec9:       c6 02 00                movb   $0x0,(%rdx)
         :
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68eecc:       85 f6                   test   %esi,%esi
    0.00 :	  68eece:       75 28                   jne    68eef8 <LWLockAttemptLock+0x38>
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68eed0:       8b 47 04                mov    0x4(%rdi),%eax
         :	                 * First check whether the variable is free without a atomic
         :	                 * operation; it's often quite a bit cheaper for contended
         :	                 * locks. Doing so can cause a superflous shared-exclusive cacheline
         :	                 * transition, but benchmarks show that it's still worth doing so.
         :	                 */
         :	                expected = pg_atomic_read_u32(&lock->lockcount);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
   33.33 :	  68eed3:       48 8d 57 04             lea    0x4(%rdi),%rdx
         :
         :	                if (expected != 0)
    0.00 :	  68eed7:       85 c0                   test   %eax,%eax
    0.00 :	  68eed9:       75 65                   jne    68ef40 <LWLockAttemptLock+0x80>
         :
         :	        /*
         :	         * Perform cmpxchg and use the zero flag which it implicitly sets when
         :	         * equal to measure the success.
         :	         */
         :	        __asm__ __volatile__(
    0.00 :	  68eedb:       b9 00 00 00 40          mov    $0x40000000,%ecx
    0.00 :	  68eee0:       89 f0                   mov    %esi,%eax
    0.00 :	  68eee2:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
    0.00 :	  68eee6:       40 0f 94 c6             sete   %sil
    0.00 :	  68eeea:       40 84 f6                test   %sil,%sil
    0.00 :	  68eeed:       0f 94 c1                sete   %cl
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68eef0:       89 c8                   mov    %ecx,%eax
    0.00 :	  68eef2:       c9                      leaveq 
    0.00 :	  68eef3:       c3                      retq   
    0.00 :	  68eef4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                /*
         :	                 * If the caller is interested in spurious locks, do an unlocked check
         :	                 * first.  This is useful if potentially spurious results have a
         :	                 * noticeable cost.
         :	                 */
         :	                if (potentially_spurious != NULL &&
    0.00 :	  68eef8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68eefb:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68eeff:       74 0e                   je     68ef0f <LWLockAttemptLock+0x4f>
    0.00 :	  68ef01:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  68ef04:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68ef08:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef0d:       77 31                   ja     68ef40 <LWLockAttemptLock+0x80>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68ef0f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68ef14:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                 * might have to back out again if it turns out somebody else has an
         :	                 * exclusive lock.
         :	                 */
         :	                oldstate = pg_atomic_fetch_add_u32(&lock->lockcount, 1);
         :
         :	                if (oldstate >= EXCLUSIVE_LOCK)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   58.33 :	  68ef18:       31 c9                   xor    %ecx,%ecx
    0.00 :	  68ef1a:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef1f:       76 cf                   jbe    68eef0 <LWLockAttemptLock+0x30>
    0.00 :	  68ef21:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68ef26:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                         * problems exist.
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
    0.00 :	  68ef2a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68ef2d:       74 11                   je     68ef40 <LWLockAttemptLock+0x80>
         :	                                *potentially_spurious = true;
    0.00 :	  68ef2f:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  68ef34:       c6 02 01                movb   $0x1,(%rdx)
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef37:       89 c8                   mov    %ecx,%eax
    0.00 :	  68ef39:       c9                      leaveq 
    0.00 :	  68ef3a:       c3                      retq   
    0.00 :	  68ef3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
         :	                                *potentially_spurious = true;
    0.00 :	  68ef40:       b9 01 00 00 00          mov    $0x1,%ecx
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef45:       c9                      leaveq 
    0.00 :	  68ef46:       89 c8                   mov    %ecx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b1430 <ExecMakeFunctionResultNoSets>:
         :	static Datum
         :	ExecMakeFunctionResultNoSets(FuncExprState *fcache,
         :	                                                         ExprContext *econtext,
         :	                                                         bool *isNull,
         :	                                                         ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   20.00 :	  5b1430:       55                      push   %rbp
    0.00 :	  5b1431:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b1434:       41 57                   push   %r15
    0.00 :	  5b1436:       49 89 d7                mov    %rdx,%r15
    0.00 :	  5b1439:       41 56                   push   %r14
   10.00 :	  5b143b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5b143e:       41 55                   push   %r13
   10.00 :	  5b1440:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5b1443:       41 54                   push   %r12
   10.00 :	  5b1445:       53                      push   %rbx
    0.00 :	  5b1446:       48 89 cb                mov    %rcx,%rbx
    0.00 :	  5b1449:       48 83 ec 48             sub    $0x48,%rsp
         :	        FunctionCallInfo fcinfo;
         :	        PgStat_FunctionCallUsage fcusage;
         :	        int                     i;
         :
         :	        /* Guard against stack overflow due to overly complex expressions */
         :	        check_stack_depth();
    0.00 :	  5b144d:       e8 8e a5 0e 00          callq  69b9e0 <check_stack_depth>
         :
         :	        if (isDone)
    0.00 :	  5b1452:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b1455:       74 06                   je     5b145d <ExecMakeFunctionResultNoSets+0x2d>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b1457:       c7 03 00 00 00 00       movl   $0x0,(%rbx)
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b145d:       49 8b 45 18             mov    0x18(%r13),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5b1461:       48 85 c0                test   %rax,%rax
    0.00 :	  5b1464:       0f 84 c2 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b146a:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  5b146e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b1471:       0f 84 b5 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b1477:       31 db                   xor    %ebx,%ebx
    0.00 :	  5b1479:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
    0.00 :	  5b1480:       49 8b 04 24             mov    (%r12),%rax
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
    0.00 :	  5b1484:       49 8d 94 1d b0 03 00    lea    0x3b0(%r13,%rbx,1),%rdx
    0.00 :	  5b148b:       00 
    0.00 :	  5b148c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b148e:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5b1491:       48 89 c7                mov    %rax,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
   20.00 :	  5b1494:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5b1497:       49 89 84 dd 90 00 00    mov    %rax,0x90(%r13,%rbx,8)
    0.00 :	  5b149e:       00 
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b149f:       4d 8b 64 24 08          mov    0x8(%r12),%r12
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
    0.00 :	  5b14a4:       8d 53 01                lea    0x1(%rbx),%edx
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b14a7:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  5b14ab:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b14ae:       75 d0                   jne    5b1480 <ExecMakeFunctionResultNoSets+0x50>
         :
         :	        /*
         :	         * If function is strict, and there are any NULL arguments, skip calling
         :	         * the function and return NULL.
         :	         */
         :	        if (fcache->func.fn_strict)
    0.00 :	  5b14b0:       41 80 7d 2e 00          cmpb   $0x0,0x2e(%r13)
    0.00 :	  5b14b5:       74 34                   je     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
    0.00 :	  5b14b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b14be:       00 00 
         :	        {
         :	                while (--i >= 0)
    0.00 :	  5b14c0:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5b14c3:       78 26                   js     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
         :	                {
         :	                        if (fcinfo->argnull[i])
    0.00 :	  5b14c5:       48 63 c2                movslq %edx,%rax
    0.00 :	  5b14c8:       41 80 bc 05 b0 03 00    cmpb   $0x0,0x3b0(%r13,%rax,1)
    0.00 :	  5b14cf:       00 00 
    0.00 :	  5b14d1:       74 ed                   je     5b14c0 <ExecMakeFunctionResultNoSets+0x90>
         :	                        {
         :	                                *isNull = true;
    0.00 :	  5b14d3:       41 c6 07 01             movb   $0x1,(%r15)
    0.00 :	  5b14d7:       31 db                   xor    %ebx,%ebx
         :	        *isNull = fcinfo->isnull;
         :
         :	        pgstat_end_function_usage(&fcusage, true);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
   10.00 :	  5b14d9:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5b14dd:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b14e0:       5b                      pop    %rbx
    0.00 :	  5b14e1:       41 5c                   pop    %r12
    0.00 :	  5b14e3:       41 5d                   pop    %r13
   10.00 :	  5b14e5:       41 5e                   pop    %r14
    0.00 :	  5b14e7:       41 5f                   pop    %r15
    0.00 :	  5b14e9:       c9                      leaveq 
    0.00 :	  5b14ea:       c3                      retq   
         :
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
    0.00 :	  5b14eb:       49 8d 5d 70             lea    0x70(%r13),%rbx
         :	                                return (Datum) 0;
         :	                        }
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
    0.00 :	  5b14ef:       4c 8d 65 90             lea    -0x70(%rbp),%r12
    0.00 :	  5b14f3:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b14f6:       4c 89 e6                mov    %r12,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
   10.00 :	  5b14f9:       e8 82 12 09 00          callq  642780 <pgstat_init_function_usage>
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
    0.00 :	  5b14fe:       49 8b 45 70             mov    0x70(%r13),%rax
    0.00 :	  5b1502:       48 89 df                mov    %rbx,%rdi
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
    0.00 :	  5b1505:       41 c6 85 8c 00 00 00    movb   $0x0,0x8c(%r13)
    0.00 :	  5b150c:       00 
         :	        result = FunctionCallInvoke(fcinfo);
    0.00 :	  5b150d:       ff 10                   callq  *(%rax)
    0.00 :	  5b150f:       48 89 c3                mov    %rax,%rbx
         :	        *isNull = fcinfo->isnull;
    0.00 :	  5b1512:       41 0f b6 85 8c 00 00    movzbl 0x8c(%r13),%eax
    0.00 :	  5b1519:       00 
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.00 :	  5b151a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5b151f:       4c 89 e7                mov    %r12,%rdi
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
         :	        *isNull = fcinfo->isnull;
    0.00 :	  5b1522:       41 88 07                mov    %al,(%r15)
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.00 :	  5b1525:       e8 a6 10 09 00          callq  6425d0 <pgstat_end_function_usage>
         :
         :	        return result;
         :	}
    0.00 :	  5b152a:       eb ad                   jmp    5b14d9 <ExecMakeFunctionResultNoSets+0xa9>
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b152c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b152e:       eb 80                   jmp    5b14b0 <ExecMakeFunctionResultNoSets+0x80>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:573
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:573
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:580
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:824
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:824
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:837
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:851
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:615
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1039
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:974
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675ca0 <ReadBuffer_common>:
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  675ca0:       55                      push   %rbp
    0.00 :	  675ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  675ca4:       41 57                   push   %r15
    0.00 :	  675ca6:       4d 89 cf                mov    %r9,%r15
    0.00 :	  675ca9:       41 56                   push   %r14
    0.00 :	  675cab:       41 55                   push   %r13
    0.00 :	  675cad:       41 54                   push   %r12
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:573
   10.00 :	  675caf:       53                      push   %rbx
    0.00 :	  675cb0:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  675cb4:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
   10.00 :	  675cb8:       89 95 78 ff ff ff       mov    %edx,-0x88(%rbp)
    0.00 :	  675cbe:       89 8d 74 ff ff ff       mov    %ecx,-0x8c(%rbp)
    0.00 :	  675cc4:       44 89 85 70 ff ff ff    mov    %r8d,-0x90(%rbp)
    0.00 :	  675ccb:       40 88 b5 7f ff ff ff    mov    %sil,-0x81(%rbp)
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cd2:       83 7f 0c ff             cmpl   $0xffffffff,0xc(%rdi)
         :
         :	        *hit = false;
    0.00 :	  675cd6:       48 8b 45 10             mov    0x10(%rbp),%rax
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cda:       0f 95 45 8f             setne  -0x71(%rbp)
         :
         :	        *hit = false;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:580
   10.00 :	  675cde:       c6 00 00                movb   $0x0,(%rax)
         :
         :	        /* Make sure we will have room to remember the buffer pin */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  675ce1:       48 8b 3d d8 4b 54 00    mov    0x544bd8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  675ce8:       e8 83 51 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :
         :	        isExtend = (blockNum == P_NEW);
    0.00 :	  675ced:       83 bd 74 ff ff ff ff    cmpl   $0xffffffff,-0x8c(%rbp)
         :	                                                                           smgr->smgr_rnode.node.relNode,
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
    0.00 :	  675cf4:       0f 94 45 8e             sete   -0x72(%rbp)
    0.00 :	  675cf8:       0f 84 2f 05 00 00       je     67622d <ReadBuffer_common+0x58d>
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
    0.00 :	  675cfe:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675d02:       74 7b                   je     675d7f <ReadBuffer_common+0xdf>
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d04:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d0a:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675d10:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  675d14:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675d18:       e8 c3 20 00 00          callq  677de0 <LocalBufferAlloc>
         :	                if (found)
    0.00 :	  675d1d:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d21:       49 89 c6                mov    %rax,%r14
         :	                if (found)
    0.00 :	  675d24:       0f 85 1b 04 00 00       jne    676145 <ReadBuffer_common+0x4a5>
         :	                        pgBufferUsage.local_blks_hit++;
         :	                else
         :	                        pgBufferUsage.local_blks_read++;
    0.00 :	  675d2a:       48 83 05 56 9a 54 00    addq   $0x1,0x549a56(%rip)        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  675d31:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675d32:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675d36:       0f 84 fa 00 00 00       je     675e36 <ReadBuffer_common+0x196>
         :	        {
         :	                if (!isExtend)
    0.00 :	  675d3c:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  675d40:       0f 85 01 05 00 00       jne    676247 <ReadBuffer_common+0x5a7>
         :	                {
         :	                        /* Just need to update stats before we exit */
         :	                        *hit = true;
    0.00 :	  675d46:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	  675d4a:       c6 00 01                movb   $0x1,(%rax)
         :	                        VacuumPageHit++;
    0.00 :	  675d4d:       83 05 80 43 54 00 01    addl   $0x1,0x544380(%rip)        # bba0d4 <VacuumPageHit>
         :
         :	                        if (VacuumCostActive)
    0.00 :	  675d54:       80 3d 89 43 54 00 00    cmpb   $0x0,0x544389(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675d5b:       74 0c                   je     675d69 <ReadBuffer_common+0xc9>
         :	                                VacuumCostBalance += VacuumCostPageHit;
    0.00 :	  675d5d:       8b 05 c9 2d 4f 00       mov    0x4f2dc9(%rip),%eax        # b68b2c <VacuumCostPageHit>
    0.00 :	  675d63:       01 05 77 43 54 00       add    %eax,0x544377(%rip)        # bba0e0 <VacuumCostBalance>
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d69:       41 8b 46 24             mov    0x24(%r14),%eax
         :	}
    0.00 :	  675d6d:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  675d71:       5b                      pop    %rbx
    0.00 :	  675d72:       41 5c                   pop    %r12
    0.00 :	  675d74:       41 5d                   pop    %r13
    0.00 :	  675d76:       41 5e                   pop    %r14
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d78:       83 c0 01                add    $0x1,%eax
         :	}
    0.00 :	  675d7b:       41 5f                   pop    %r15
    0.00 :	  675d7d:       c9                      leaveq 
    0.00 :	  675d7e:       c3                      retq   
         :	        int                     buf_id;
         :	        volatile BufferDesc *buf;
         :	        bool            valid;
         :
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
    0.00 :	  675d7f:       48 8b 55 80             mov    -0x80(%rbp),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:824
   10.00 :	  675d83:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  675d86:       48 89 45 b0             mov    %rax,-0x50(%rbp)
   10.00 :	  675d8a:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  675d8d:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d93:       89 45 b8                mov    %eax,-0x48(%rbp)
    0.00 :	  675d96:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  675d9c:       89 55 c0                mov    %edx,-0x40(%rbp)
    0.00 :	  675d9f:       89 45 bc                mov    %eax,-0x44(%rbp)
    0.00 :	  675da2:       eb 11                   jmp    675db5 <ReadBuffer_common+0x115>
    0.00 :	  675da4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                valid = PinBuffer(foundbuf, strategy);
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
    0.00 :	  675da8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675dad:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675db0:       e8 7b ef ff ff          callq  674d30 <UnpinBuffer>
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
         :
         :	        /* see if the block is in the buffer pool already */
         :	start:
         :	        buf_id = BufTableLookup(&newTag);
    0.00 :	  675db5:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675db9:       e8 22 e0 ff ff          callq  673de0 <BufTableLookup>
         :	        if (buf_id >= 0)
    0.00 :	  675dbe:       85 c0                   test   %eax,%eax
    0.00 :	  675dc0:       0f 88 bb 01 00 00       js     675f81 <ReadBuffer_common+0x2e1>
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:837
   10.00 :	  675dc6:       48 63 d8                movslq %eax,%rbx
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dc9:       4c 89 fe                mov    %r15,%rsi
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dcc:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675dd0:       48 03 1d 29 9d 54 00    add    0x549d29(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dd7:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675dda:       49 89 dc                mov    %rbx,%r12
    0.00 :	  675ddd:       e8 4e ee ff ff          callq  674c30 <PinBuffer>
    0.00 :	  675de2:       89 c2                   mov    %eax,%edx
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  675de4:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  675de7:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  675dea:       75 bc                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dec:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  675def:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  675df2:       75 b4                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675df4:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  675df7:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  675df9:       75 ad                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dfb:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  675dfe:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  675e01:       75 a5                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675e03:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  675e06:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  675e09:       75 9d                   jne    675da8 <ReadBuffer_common+0x108>
         :	                }
         :
         :	                *foundPtr = TRUE;
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e0b:       84 d2                   test   %dl,%dl
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
         :	                        goto start;
         :	                }
         :
         :	                *foundPtr = TRUE;
    0.00 :	  675e0d:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:851
   10.00 :	  675e11:       0f 84 33 02 00 00       je     67604a <ReadBuffer_common+0x3aa>
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e17:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e1b:       4d 89 e6                mov    %r12,%r14
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e1e:       0f 84 9a 03 00 00       je     6761be <ReadBuffer_common+0x51e>
         :	                        pgBufferUsage.shared_blks_hit++;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:615
   10.00 :	  675e24:       48 83 05 34 99 54 00    addq   $0x1,0x549934(%rip)        # bbf760 <pgBufferUsage>
    0.00 :	  675e2b:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675e2c:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675e30:       0f 85 06 ff ff ff       jne    675d3c <ReadBuffer_common+0x9c>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e36:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675e3a:       0f 84 8b 03 00 00       je     6761cb <ReadBuffer_common+0x52b>
    0.00 :	  675e40:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  675e44:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  675e49:       29 c2                   sub    %eax,%edx
         :
         :	        if (isExtend)
    0.00 :	  675e4b:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e4f:       48 8b 05 c2 72 50 00    mov    0x5072c2(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  675e56:       48 63 d2                movslq %edx,%rdx
    0.00 :	  675e59:       4c 8b 24 d0             mov    (%rax,%rdx,8),%r12
         :
         :	        if (isExtend)
    0.00 :	  675e5d:       0f 85 84 03 00 00       jne    6761e7 <ReadBuffer_common+0x547>
         :	        {
         :	                /*
         :	                 * Read in the page, unless the caller intends to overwrite it and
         :	                 * just wants us to allocate a buffer.
         :	                 */
         :	                if (mode == RBM_ZERO)
    0.00 :	  675e63:       83 bd 70 ff ff ff 01    cmpl   $0x1,-0x90(%rbp)
    0.00 :	  675e6a:       74 7e                   je     675eea <ReadBuffer_common+0x24a>
         :	                else
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
    0.00 :	  675e6c:       80 3d ee 71 50 00 00    cmpb   $0x0,0x5071ee(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e73:       0f 85 d1 04 00 00       jne    67634a <ReadBuffer_common+0x6aa>
         :	                                INSTR_TIME_SET_CURRENT(io_start);
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
    0.00 :	  675e79:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675e7f:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675e85:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  675e88:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675e8c:       e8 7f 35 02 00          callq  699410 <smgrread>
         :
         :	                        if (track_io_timing)
    0.00 :	  675e91:       80 3d c9 71 50 00 00    cmpb   $0x0,0x5071c9(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e98:       0f 85 bc 04 00 00       jne    67635a <ReadBuffer_common+0x6ba>
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
         :	                        }
         :
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
    0.00 :	  675e9e:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  675ea4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ea7:       e8 24 f0 01 00          callq  694ed0 <PageIsVerified>
    0.00 :	  675eac:       84 c0                   test   %al,%al
    0.00 :	  675eae:       75 47                   jne    675ef7 <ReadBuffer_common+0x257>
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
    0.00 :	  675eb0:       83 bd 70 ff ff ff 02    cmpl   $0x2,-0x90(%rbp)
    0.00 :	  675eb7:       74 0d                   je     675ec6 <ReadBuffer_common+0x226>
    0.00 :	  675eb9:       80 3d a0 71 50 00 00    cmpb   $0x0,0x5071a0(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  675ec0:       0f 84 51 05 00 00       je     676417 <ReadBuffer_common+0x777>
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  675ec6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  675ec9:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  675ece:       ba f0 02 00 00          mov    $0x2f0,%edx
    0.00 :	  675ed3:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  675ed8:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  675edd:       e8 de 4b 10 00          callq  77aac0 <errstart>
    0.00 :	  675ee2:       84 c0                   test   %al,%al
    0.00 :	  675ee4:       0f 85 11 04 00 00       jne    6762fb <ReadBuffer_common+0x65b>
         :	                                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                                         errmsg("invalid page in block %u of relation %s; zeroing out page",
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  675eea:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  675eef:       31 c0                   xor    %eax,%eax
    0.00 :	  675ef1:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ef4:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  675ef7:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675efb:       0f 84 18 03 00 00       je     676219 <ReadBuffer_common+0x579>
         :	        {
         :	                /* Only need to adjust flags */
         :	                bufHdr->flags |= BM_VALID;
    0.00 :	  675f01:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  675f06:       83 c8 02                or     $0x2,%eax
    0.00 :	  675f09:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
         :	        }
         :
         :	        VacuumPageMiss++;
    0.00 :	  675f0e:       83 05 c3 41 54 00 01    addl   $0x1,0x5441c3(%rip)        # bba0d8 <VacuumPageMiss>
         :	        if (VacuumCostActive)
    0.00 :	  675f15:       80 3d c8 41 54 00 00    cmpb   $0x0,0x5441c8(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675f1c:       0f 84 47 fe ff ff       je     675d69 <ReadBuffer_common+0xc9>
         :	                VacuumCostBalance += VacuumCostPageMiss;
    0.00 :	  675f22:       8b 05 08 2c 4f 00       mov    0x4f2c08(%rip),%eax        # b68b30 <VacuumCostPageMiss>
    0.00 :	  675f28:       01 05 b2 41 54 00       add    %eax,0x5441b2(%rip)        # bba0e0 <VacuumCostBalance>
    0.00 :	  675f2e:       e9 36 fe ff ff          jmpq   675d69 <ReadBuffer_common+0xc9>
    0.00 :	  675f33:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  675f38:       49 8d 5e 20             lea    0x20(%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675f3c:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675f41:       f0 86 03                lock xchg %al,(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1039
   10.00 :	  675f44:       84 c0                   test   %al,%al
    0.00 :	  675f46:       0f 85 a4 01 00 00       jne    6760f0 <ReadBuffer_common+0x450>
         :	                 * Somebody could have pinned or re-dirtied the buffer while we were
         :	                 * doing the I/O and making the new hashtable entry.  If so, we can't
         :	                 * recycle this buffer; we must undo everything we've done and start
         :	                 * over with a new victim buffer.
         :	                 */
         :	                oldFlags = buf->flags;
    0.00 :	  675f4c:       41 0f b7 56 14          movzwl 0x14(%r14),%edx
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
    0.00 :	  675f51:       41 8b 46 18             mov    0x18(%r14),%eax
    0.00 :	  675f55:       83 e8 01                sub    $0x1,%eax
    0.00 :	  675f58:       75 0c                   jne    675f66 <ReadBuffer_common+0x2c6>
    0.00 :	  675f5a:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  675f5d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675f60:       0f 84 ec 01 00 00       je     676152 <ReadBuffer_common+0x4b2>
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
         :	                BufTableDelete(&newTag);
    0.00 :	  675f66:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
         :	                 */
         :	                oldFlags = buf->flags;
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
    0.00 :	  675f6a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                BufTableDelete(&newTag);
    0.00 :	  675f6f:       e8 dc dd ff ff          callq  673d50 <BufTableDelete>
         :	                UnpinBuffer(buf, true);
    0.00 :	  675f74:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675f79:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  675f7c:       e8 af ed ff ff          callq  674d30 <UnpinBuffer>
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f81:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  675f84:       e8 d7 15 00 00          callq  677560 <StrategyGetBuffer>
         :
         :	                Assert(buf->refcount == 0);
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
    0.00 :	  675f89:       0f b7 58 14             movzwl 0x14(%rax),%ebx
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f8d:       48 89 c7                mov    %rax,%rdi
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f90:       49 89 c6                mov    %rax,%r14
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f93:       e8 38 ec ff ff          callq  674bd0 <PinBuffer_Locked>
         :	                 * condition here, in that someone might dirty it after we released it
         :	                 * above, or even while we are writing it out (since our share-lock
         :	                 * won't prevent hint-bit updates).  We will recheck the dirty bit
         :	                 * after re-locking the buffer header.
         :	                 */
         :	                if (oldFlags & BM_DIRTY)
    0.00 :	  675f98:       0f b7 db                movzwl %bx,%ebx
    0.00 :	  675f9b:       f6 c3 01                test   $0x1,%bl
    0.00 :	  675f9e:       0f 85 cc 00 00 00       jne    676070 <ReadBuffer_common+0x3d0>
         :
         :	                /*
         :	                 * To change the association of a valid buffer, we'll need to have
         :	                 * exclusive lock on both the old and new mapping partitions.
         :	                 */
         :	                if (oldFlags & BM_TAG_VALID)
    0.00 :	  675fa4:       83 e3 04                and    $0x4,%ebx
    0.00 :	  675fa7:       74 2c                   je     675fd5 <ReadBuffer_common+0x335>
         :	                {
         :	                        /* Save old tag. */
         :	                        oldTag = buf->tag;
    0.00 :	  675fa9:       49 8b 06                mov    (%r14),%rax
    0.00 :	  675fac:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  675fb0:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  675fb4:       48 89 45 98             mov    %rax,-0x68(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:974
   10.00 :	  675fb8:       41 8b 46 10             mov    0x10(%r14),%eax
    0.00 :	  675fbc:       89 45 a0                mov    %eax,-0x60(%rbp)
    0.00 :	  675fbf:       eb 14                   jmp    675fd5 <ReadBuffer_common+0x335>
    0.00 :	  675fc1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
         :	                        valid = PinBuffer(foundbuf, strategy);
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                        {
         :	                                UnpinBuffer(foundbuf, true);
    0.00 :	  675fc8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675fcd:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675fd0:       e8 5b ed ff ff          callq  674d30 <UnpinBuffer>
         :	                 * allocated another buffer for the same block we want to read in.
         :	                 * Note that we have not yet removed the hashtable entry for the old
         :	                 * tag.
         :	                 */
         :	enter:
         :	                buf_id = BufTableInsert(&newTag, buf->buf_id);
    0.00 :	  675fd5:       41 8b 76 24             mov    0x24(%r14),%esi
    0.00 :	  675fd9:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675fdd:       e8 be dd ff ff          callq  673da0 <BufTableInsert>
         :
         :	                if (buf_id >= 0)
    0.00 :	  675fe2:       85 c0                   test   %eax,%eax
    0.00 :	  675fe4:       0f 88 4e ff ff ff       js     675f38 <ReadBuffer_common+0x298>
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675fea:       48 63 d8                movslq %eax,%rbx
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675fed:       4c 89 fe                mov    %r15,%rsi
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675ff0:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675ff4:       48 03 1d 05 9b 54 00    add    0x549b05(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675ffb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675ffe:       49 89 dc                mov    %rbx,%r12
    0.00 :	  676001:       e8 2a ec ff ff          callq  674c30 <PinBuffer>
    0.00 :	  676006:       41 89 c5                mov    %eax,%r13d
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  676009:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  67600c:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  67600f:       75 b7                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676011:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  676014:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  676017:       75 af                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676019:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  67601c:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  67601e:       75 a8                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676020:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676023:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  676026:       75 a0                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676028:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  67602b:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  67602e:       75 98                   jne    675fc8 <ReadBuffer_common+0x328>
         :
         :	                        /*
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
    0.00 :	  676030:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676035:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676038:       e8 f3 ec ff ff          callq  674d30 <UnpinBuffer>
         :
         :	                        *foundPtr = TRUE;
         :
         :	                        if (!valid)
    0.00 :	  67603d:       45 84 ed                test   %r13b,%r13b
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
         :
         :	                        *foundPtr = TRUE;
    0.00 :	  676040:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                        if (!valid)
    0.00 :	  676044:       0f 85 cd fd ff ff       jne    675e17 <ReadBuffer_common+0x177>
         :	                                 * in the page, or (b) a previous read attempt failed.  We
         :	                                 * have to wait for any active read attempt to finish, and
         :	                                 * then set up our own read attempt if the page is still not
         :	                                 * BM_VALID.  StartBufferIO does it all.
         :	                                 */
         :	                                if (StartBufferIO(foundbuf, true))
    0.00 :	  67604a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67604f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  676052:       e8 e9 e3 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  676057:       84 c0                   test   %al,%al
    0.00 :	  676059:       0f 84 b8 fd ff ff       je     675e17 <ReadBuffer_common+0x177>
         :	                                {
         :	                                        /*
         :	                                         * If we get here, previous attempts to read the buffer
         :	                                         * must have failed ... but we shall bravely try again.
         :	                                         */
         :	                                        *foundPtr = FALSE;
    0.00 :	  67605f:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
    0.00 :	  676063:       e9 af fd ff ff          jmpq   675e17 <ReadBuffer_common+0x177>
    0.00 :	  676068:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67606f:       00 
         :	                         * (This has been observed to happen when two backends are both
         :	                         * trying to split btree index pages, and the second one just
         :	                         * happens to be trying to split the page the first one got from
         :	                         * StrategyGetBuffer.)
         :	                         */
         :	                        if (LWLockConditionalAcquire(buf->content_lock, LW_SHARED))
    0.00 :	  676070:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  676074:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676079:       e8 22 8f 01 00          callq  68efa0 <LWLockConditionalAcquire>
    0.00 :	  67607e:       84 c0                   test   %al,%al
    0.00 :	  676080:       0f 84 ee fe ff ff       je     675f74 <ReadBuffer_common+0x2d4>
         :	                                 * would require a WAL flush, let the strategy decide whether
         :	                                 * to go ahead and write/reuse the buffer or to choose another
         :	                                 * victim.  We need lock to inspect the page LSN, so this
         :	                                 * can't be done inside StrategyGetBuffer.
         :	                                 */
         :	                                if (strategy != NULL)
    0.00 :	  676086:       4d 85 ff                test   %r15,%r15
    0.00 :	  676089:       74 4c                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  67608b:       49 8d 7e 20             lea    0x20(%r14),%rdi
    0.00 :	  67608f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  676094:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  676097:       84 c0                   test   %al,%al
    0.00 :	  676099:       0f 85 92 00 00 00       jne    676131 <ReadBuffer_common+0x491>
         :	                                        lsn = BufferGetLSN(buf);
    0.00 :	  67609f:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6760a3:       41 8b 56 24             mov    0x24(%r14),%edx
    0.00 :	  6760a7:       48 8b 0d 4a 9a 54 00    mov    0x549a4a(%rip),%rcx        # bbfaf8 <BufferBlocks>
    0.00 :	  6760ae:       48 98                   cltq   
    0.00 :	  6760b0:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6760b3:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  6760b7:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  6760bb:       8b 3c 01                mov    (%rcx,%rax,1),%edi
    0.00 :	  6760be:       8b 44 11 04             mov    0x4(%rcx,%rdx,1),%eax
    0.00 :	  6760c2:       48 c1 e7 20             shl    $0x20,%rdi
    0.00 :	  6760c6:       48 09 c7                or     %rax,%rdi
         :	                                        UnlockBufHdr(buf);
    0.00 :	  6760c9:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  6760ce:       e8 dd dc e5 ff          callq  4d3db0 <XLogNeedsFlush>
    0.00 :	  6760d3:       84 c0                   test   %al,%al
    0.00 :	  6760d5:       75 30                   jne    676107 <ReadBuffer_common+0x467>
         :	                                TRACE_POSTGRESQL_BUFFER_WRITE_DIRTY_START(forkNum, blockNum,
         :	                                                                                           smgr->smgr_rnode.node.spcNode,
         :	                                                                                                smgr->smgr_rnode.node.dbNode,
         :	                                                                                          smgr->smgr_rnode.node.relNode);
         :
         :	                                FlushBuffer(buf, NULL);
    0.00 :	  6760d7:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6760da:       31 f6                   xor    %esi,%esi
    0.00 :	  6760dc:       e8 6f ee ff ff          callq  674f50 <FlushBuffer>
         :	                                LWLockRelease(buf->content_lock);
    0.00 :	  6760e1:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  6760e5:       e8 b6 92 01 00          callq  68f3a0 <LWLockRelease>
    0.00 :	  6760ea:       e9 b5 fe ff ff          jmpq   675fa4 <ReadBuffer_common+0x304>
    0.00 :	  6760ef:       90                      nop
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6760f0:       ba 0f 04 00 00          mov    $0x40f,%edx
    0.00 :	  6760f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6760fa:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6760fd:       e8 3e 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676102:       e9 45 fe ff ff          jmpq   675f4c <ReadBuffer_common+0x2ac>
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
         :	                                        lsn = BufferGetLSN(buf);
         :	                                        UnlockBufHdr(buf);
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  676107:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  67610a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  67610d:       e8 0e 11 00 00          callq  677220 <StrategyRejectBuffer>
    0.00 :	  676112:       84 c0                   test   %al,%al
    0.00 :	  676114:       74 c1                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                                StrategyRejectBuffer(strategy, buf))
         :	                                        {
         :	                                                /* Drop lock/pin and loop around for another buffer */
         :	                                                LWLockRelease(buf->content_lock);
    0.00 :	  676116:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  67611a:       e8 81 92 01 00          callq  68f3a0 <LWLockRelease>
         :	                                                UnpinBuffer(buf, true);
    0.00 :	  67611f:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676124:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676127:       e8 04 ec ff ff          callq  674d30 <UnpinBuffer>
    0.00 :	  67612c:       e9 50 fe ff ff          jmpq   675f81 <ReadBuffer_common+0x2e1>
         :	                                if (strategy != NULL)
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  676131:       ba a0 03 00 00          mov    $0x3a0,%edx
    0.00 :	  676136:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67613b:       e8 00 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676140:       e9 5a ff ff ff          jmpq   67609f <ReadBuffer_common+0x3ff>
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
         :	                if (found)
         :	                        pgBufferUsage.local_blks_hit++;
    0.00 :	  676145:       48 83 05 33 96 54 00    addq   $0x1,0x549633(%rip)        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  67614c:       01 
    0.00 :	  67614d:       e9 e0 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * Clearing BM_VALID here is necessary, clearing the dirtybits is just
         :	         * paranoia.  We also reset the usage_count since any recency of use of
         :	         * the old content is no longer relevant.  (The usage_count starts out at
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
    0.00 :	  676152:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676156:       49 89 06                mov    %rax,(%r14)
    0.00 :	  676159:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  67615d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	  676161:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676164:       41 89 46 10             mov    %eax,0x10(%r14)
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
    0.00 :	  676168:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  67616d:       66 25 4c fe             and    $0xfe4c,%ax
    0.00 :	  676171:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
    0.00 :	  676176:       80 bd 7f ff ff ff 70    cmpb   $0x70,-0x81(%rbp)
    0.00 :	  67617d:       0f 84 73 02 00 00       je     6763f6 <ReadBuffer_common+0x756>
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
    0.00 :	  676183:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676188:       83 c8 04                or     $0x4,%eax
    0.00 :	  67618b:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        buf->usage_count = 1;
    0.00 :	  676190:       66 41 c7 46 16 01 00    movw   $0x1,0x16(%r14)
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  676197:       83 e2 04                and    $0x4,%edx
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67619a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  67619f:       0f 85 64 02 00 00       jne    676409 <ReadBuffer_common+0x769>
         :	        /*
         :	         * Buffer contents are currently invalid.  Try to get the io_in_progress
         :	         * lock.  If StartBufferIO returns false, then someone else managed to
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
    0.00 :	  6761a5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6761aa:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6761ad:       e8 8e e2 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6761b2:       84 c0                   test   %al,%al
    0.00 :	  6761b4:       0f 84 d5 00 00 00       je     67628f <ReadBuffer_common+0x5ef>
         :	                *foundPtr = FALSE;
    0.00 :	  6761ba:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
         :	                        pgBufferUsage.shared_blks_hit++;
         :	                else
         :	                        pgBufferUsage.shared_blks_read++;
    0.00 :	  6761be:       48 83 05 a2 95 54 00    addq   $0x1,0x5495a2(%rip)        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  6761c5:       01 
    0.00 :	  6761c6:       e9 67 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6761cb:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6761cf:       4c 63 e0                movslq %eax,%r12
    0.00 :	  6761d2:       49 c1 e4 0d             shl    $0xd,%r12
    0.00 :	  6761d6:       4c 03 25 1b 99 54 00    add    0x54991b(%rip),%r12        # bbfaf8 <BufferBlocks>
         :
         :	        if (isExtend)
    0.00 :	  6761dd:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  6761e1:       0f 84 7c fc ff ff       je     675e63 <ReadBuffer_common+0x1c3>
         :	        {
         :	                /* new buffers are zero-filled */
         :	                MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  6761e7:       31 c0                   xor    %eax,%eax
    0.00 :	  6761e9:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  6761ee:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6761f1:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                /* don't set checksum for all-zero page */
         :	                smgrextend(smgr, forkNum, blockNum, (char *) bufBlock, false);
    0.00 :	  6761f4:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6761f7:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  6761fa:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  676200:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676206:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  67620a:       e8 c1 31 02 00          callq  6993d0 <smgrextend>
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  67620f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676213:       0f 85 e8 fc ff ff       jne    675f01 <ReadBuffer_common+0x261>
         :	                bufHdr->flags |= BM_VALID;
         :	        }
         :	        else
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
    0.00 :	  676219:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  67621e:       31 f6                   xor    %esi,%esi
    0.00 :	  676220:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676223:       e8 a8 df ff ff          callq  6741d0 <TerminateBufferIO>
    0.00 :	  676228:       e9 e1 fc ff ff          jmpq   675f0e <ReadBuffer_common+0x26e>
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
    0.00 :	  67622d:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676233:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  676237:       e8 14 32 02 00          callq  699450 <smgrnblocks>
    0.00 :	  67623c:       89 85 74 ff ff ff       mov    %eax,-0x8c(%rbp)
    0.00 :	  676242:       e9 b7 fa ff ff          jmpq   675cfe <ReadBuffer_common+0x5e>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  676247:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  67624b:       0f 85 8c 00 00 00       jne    6762dd <ReadBuffer_common+0x63d>
    0.00 :	  676251:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  676255:       48 98                   cltq   
    0.00 :	  676257:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  67625b:       48 03 05 96 98 54 00    add    0x549896(%rip),%rax        # bbfaf8 <BufferBlocks>
         :	                if (!PageIsNew((Page) bufBlock))
    0.00 :	  676262:       66 83 78 0e 00          cmpw   $0x0,0xe(%rax)
    0.00 :	  676267:       0f 85 19 02 00 00       jne    676486 <ReadBuffer_common+0x7e6>
         :	                 * We *must* do smgrextend before succeeding, else the page will not
         :	                 * be reserved by the kernel, and the next P_NEW call will decide to
         :	                 * return the same page.  Clear the BM_VALID bit, do the StartBufferIO
         :	                 * call that BufferAlloc didn't, and proceed.
         :	                 */
         :	                if (isLocalBuf)
    0.00 :	  67626d:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676271:       49 8d 5e 20             lea    0x20(%r14),%rbx
    0.00 :	  676275:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67627b:       74 54                   je     6762d1 <ReadBuffer_common+0x631>
         :	                {
         :	                        /* Only need to adjust flags */
         :	                        Assert(bufHdr->flags & BM_VALID);
         :	                        bufHdr->flags &= ~BM_VALID;
    0.00 :	  67627d:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676282:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  676285:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  67628a:       e9 b1 fb ff ff          jmpq   675e40 <ReadBuffer_common+0x1a0>
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
         :	                *foundPtr = FALSE;
         :	        else
         :	                *foundPtr = TRUE;
    0.00 :	  67628f:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
    0.00 :	  676293:       e9 8c fb ff ff          jmpq   675e24 <ReadBuffer_common+0x184>
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  676298:       ba ae 02 00 00          mov    $0x2ae,%edx
    0.00 :	  67629d:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6762a2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6762a5:       e8 96 9d 01 00          callq  690040 <s_lock>
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
    0.00 :	  6762aa:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6762af:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  6762b2:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	                                UnlockBufHdr(bufHdr);
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762b7:       be 01 00 00 00          mov    $0x1,%esi
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
         :	                                UnlockBufHdr(bufHdr);
    0.00 :	  6762bc:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762c1:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6762c4:       e8 77 e1 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6762c9:       84 c0                   test   %al,%al
    0.00 :	  6762cb:       0f 85 fa fe ff ff       jne    6761cb <ReadBuffer_common+0x52b>
    0.00 :	  6762d1:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6762d4:       f0 86 03                lock xchg %al,(%rbx)
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  6762d7:       84 c0                   test   %al,%al
    0.00 :	  6762d9:       74 cf                   je     6762aa <ReadBuffer_common+0x60a>
    0.00 :	  6762db:       eb bb                   jmp    676298 <ReadBuffer_common+0x5f8>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6762dd:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6762e1:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  6762e6:       29 c2                   sub    %eax,%edx
    0.00 :	  6762e8:       48 8b 05 29 6e 50 00    mov    0x506e29(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  6762ef:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6762f2:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  6762f6:       e9 67 ff ff ff          jmpq   676262 <ReadBuffer_common+0x5c2>
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  6762fb:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6762ff:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676306:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676309:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  67630c:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67630f:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  676312:       8b 30                   mov    (%rax),%esi
    0.00 :	  676314:       e8 b7 82 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676319:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67631f:       48 89 c2                mov    %rax,%rdx
    0.00 :	  676322:       bf c8 9e 8a 00          mov    $0x8a9ec8,%edi
    0.00 :	  676327:       31 c0                   xor    %eax,%eax
    0.00 :	  676329:       e8 72 65 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67632e:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  676333:       89 c3                   mov    %eax,%ebx
    0.00 :	  676335:       e8 16 6a 10 00          callq  77cd50 <errcode>
    0.00 :	  67633a:       89 de                   mov    %ebx,%esi
    0.00 :	  67633c:       89 c7                   mov    %eax,%edi
    0.00 :	  67633e:       31 c0                   xor    %eax,%eax
    0.00 :	  676340:       e8 9b 42 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676345:       e9 a0 fb ff ff          jmpq   675eea <ReadBuffer_common+0x24a>
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
         :	                                INSTR_TIME_SET_CURRENT(io_start);
    0.00 :	  67634a:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67634e:       31 f6                   xor    %esi,%esi
    0.00 :	  676350:       e8 6b 32 df ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  676355:       e9 1f fb ff ff          jmpq   675e79 <ReadBuffer_common+0x1d9>
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
    0.00 :	  67635a:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  67635e:       31 f6                   xor    %esi,%esi
    0.00 :	  676360:       e8 5b 32 df ff          callq  4695c0 <gettimeofday@plt>
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676365:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  676369:       48 2b 55 98             sub    -0x68(%rbp),%rdx
    0.00 :	  67636d:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676371:       48 2b 45 90             sub    -0x70(%rbp),%rax
    0.00 :	  676375:       48 85 d2                test   %rdx,%rdx
    0.00 :	  676378:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67637c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  67637f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676383:       79 18                   jns    67639d <ReadBuffer_common+0x6fd>
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  676385:       48 83 e8 01             sub    $0x1,%rax
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676389:       48 81 c2 40 42 0f 00    add    $0xf4240,%rdx
    0.00 :	  676390:       78 f3                   js     676385 <ReadBuffer_common+0x6e5>
    0.00 :	  676392:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676396:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67639a:       48 89 c1                mov    %rax,%rcx
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  67639d:       48 69 c1 40 42 0f 00    imul   $0xf4240,%rcx,%rax
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763a4:       48 01 0d 05 94 54 00    add    %rcx,0x549405(%rip)        # bbf7b0 <pgBufferUsage+0x50>
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  6763ab:       48 8d 04 02             lea    (%rdx,%rax,1),%rax
    0.00 :	  6763af:       48 01 05 0a 58 50 00    add    %rax,0x50580a(%rip)        # b7bbc0 <pgStatBlockReadTime>
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763b6:       48 8b 05 fb 93 54 00    mov    0x5493fb(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763bd:       48 03 45 b8             add    -0x48(%rbp),%rax
    0.00 :	  6763c1:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763c7:       48 89 05 ea 93 54 00    mov    %rax,0x5493ea(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ce:       0f 8e ca fa ff ff       jle    675e9e <ReadBuffer_common+0x1fe>
    0.00 :	  6763d4:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  6763da:       48 83 05 ce 93 54 00    addq   $0x1,0x5493ce(%rip)        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  6763e1:       01 
    0.00 :	  6763e2:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763e8:       48 89 05 c9 93 54 00    mov    %rax,0x5493c9(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ef:       7f e3                   jg     6763d4 <ReadBuffer_common+0x734>
    0.00 :	  6763f1:       e9 a8 fa ff ff          jmpq   675e9e <ReadBuffer_common+0x1fe>
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
    0.00 :	  6763f6:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6763fb:       66 0d 04 01             or     $0x104,%ax
    0.00 :	  6763ff:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  676404:       e9 87 fd ff ff          jmpq   676190 <ReadBuffer_common+0x4f0>
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
         :	                BufTableDelete(&oldTag);
    0.00 :	  676409:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67640d:       e8 3e d9 ff ff          callq  673d50 <BufTableDelete>
    0.00 :	  676412:       e9 8e fd ff ff          jmpq   6761a5 <ReadBuffer_common+0x505>
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
         :	                                }
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  676417:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  67641a:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67641f:       ba f8 02 00 00          mov    $0x2f8,%edx
    0.00 :	  676424:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676429:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67642e:       e8 8d 46 10 00          callq  77aac0 <errstart>
    0.00 :	  676433:       84 c0                   test   %al,%al
    0.00 :	  676435:       74 4a                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  676437:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  67643b:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676442:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676445:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  676448:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67644b:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  67644e:       8b 30                   mov    (%rax),%esi
    0.00 :	  676450:       e8 7b 81 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676455:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67645b:       48 89 c2                mov    %rax,%rdx
    0.00 :	  67645e:       bf 48 28 88 00          mov    $0x882848,%edi
    0.00 :	  676463:       31 c0                   xor    %eax,%eax
    0.00 :	  676465:       e8 36 64 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67646a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  67646f:       89 c3                   mov    %eax,%ebx
    0.00 :	  676471:       e8 da 68 10 00          callq  77cd50 <errcode>
    0.00 :	  676476:       89 de                   mov    %ebx,%esi
    0.00 :	  676478:       89 c7                   mov    %eax,%edi
    0.00 :	  67647a:       31 c0                   xor    %eax,%eax
    0.00 :	  67647c:       e8 5f 41 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676481:       e8 4a 30 df ff          callq  4694d0 <abort@plt>
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
         :	                if (!PageIsNew((Page) bufBlock))
         :	                        ereport(ERROR,
    0.00 :	  676486:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676489:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67648e:       ba 97 02 00 00          mov    $0x297,%edx
    0.00 :	  676493:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676498:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67649d:       e8 1e 46 10 00          callq  77aac0 <errstart>
    0.00 :	  6764a2:       84 c0                   test   %al,%al
    0.00 :	  6764a4:       74 db                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  6764a6:       bf 40 9e 8a 00          mov    $0x8a9e40,%edi
    0.00 :	  6764ab:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ad:       e8 ee 57 10 00          callq  77bca0 <errhint>
    0.00 :	  6764b2:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6764b6:       89 c3                   mov    %eax,%ebx
    0.00 :	  6764b8:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  6764bf:       48 89 d0                mov    %rdx,%rax
    0.00 :	  6764c2:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  6764c5:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  6764c8:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  6764cb:       8b 30                   mov    (%rax),%esi
    0.00 :	  6764cd:       e8 fe 80 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  6764d2:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  6764d8:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6764db:       bf 90 9e 8a 00          mov    $0x8a9e90,%edi
    0.00 :	  6764e0:       31 c0                   xor    %eax,%eax
    0.00 :	  6764e2:       e8 b9 63 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6764e7:       89 de                   mov    %ebx,%esi
    0.00 :	  6764e9:       89 c7                   mov    %eax,%edi
    0.00 :	  6764eb:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ed:       e8 ee 40 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6764f2:       eb 8d                   jmp    676481 <ReadBuffer_common+0x7e1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:551
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:936
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782f20 <CHashInsert>:
         :	 * degrading performance; or CHashAllocate may enter a tight loop until such
         :	 * time as an element is deleted).
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
    0.00 :	  782f20:       55                      push   %rbp
    0.00 :	  782f21:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782f24:       41 57                   push   %r15
    0.00 :	  782f26:       41 56                   push   %r14
    0.00 :	  782f28:       41 55                   push   %r13
    0.00 :	  782f2a:       41 54                   push   %r12
    0.00 :	  782f2c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  782f2f:       53                      push   %rbx
    0.00 :	  782f30:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  782f34:       48 89 75 a0             mov    %rsi,-0x60(%rbp)
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782f38:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782f3c:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  782f40:       e8 0b d4 d0 ff          callq  490350 <hash_any>
    0.00 :	  782f45:       89 45 a8                mov    %eax,-0x58(%rbp)
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f48:       41 23 44 24 10          and    0x10(%r12),%eax
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f4d:       8b 35 b5 5b 3e 00       mov    0x3e5bb5(%rip),%esi        # b68b08 <MyBackendId>
    0.00 :	  782f53:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f59:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f5c:       89 c0                   mov    %eax,%eax
    0.00 :	  782f5e:       4c 8d 3c 85 00 00 00    lea    0x0(,%rax,4),%r15
    0.00 :	  782f65:       00 
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f66:       8b 05 78 cd 43 00       mov    0x43cd78(%rip),%eax        # bbfce4 <MyProcPid>
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f6c:       4d 03 7c 24 20          add    0x20(%r12),%r15
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f71:       41 39 44 24 38          cmp    %eax,0x38(%r12)
    0.00 :	  782f76:       74 26                   je     782f9e <CHashInsert+0x7e>
         :	        {
         :	                table->gc_pid = MyProcPid;
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f78:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  782f7e:       41 8b 54 24 10          mov    0x10(%r12),%edx
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
         :	        {
         :	                table->gc_pid = MyProcPid;
    0.00 :	  782f83:       41 89 44 24 38          mov    %eax,0x38(%r12)
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f88:       8b 05 56 cd 43 00       mov    0x43cd56(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  782f8e:       83 c2 01                add    $0x1,%edx
    0.00 :	  782f91:       d3 ea                   shr    %cl,%edx
    0.00 :	  782f93:       89 d1                   mov    %edx,%ecx
    0.00 :	  782f95:       31 d2                   xor    %edx,%edx
    0.00 :	  782f97:       f7 f1                   div    %ecx
    0.00 :	  782f99:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f9e:       0f b7 cf                movzwl %di,%ecx
    0.00 :	  782fa1:       89 f0                   mov    %esi,%eax
    0.00 :	  782fa3:       31 d2                   xor    %edx,%edx
    0.00 :	  782fa5:       f7 f1                   div    %ecx
    0.00 :	  782fa7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  782fad:       49 8b 74 24 28          mov    0x28(%r12),%rsi
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  782fb2:       41 bb fe ff ff ff       mov    $0xfffffffe,%r11d
         :	                 * If we attempt to pop the free-list and fail, we retry immediately
         :	                 * with the same free-list.  This reduces the frequency with which
         :	                 * we're obliged to update our hazard pointers, which is a material
         :	                 * savings due to the associated memory barrier.
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
    0.00 :	  782fb8:       44 8d 42 01             lea    0x1(%rdx),%r8d
    0.00 :	  782fbc:       44 89 c0                mov    %r8d,%eax
    0.00 :	  782fbf:       d3 e0                   shl    %cl,%eax
    0.00 :	  782fc1:       01 d0                   add    %edx,%eax
    0.00 :	  782fc3:       48 8d 0c 86             lea    (%rsi,%rax,4),%rcx
         :	                MyProc->hazard[0] = b;
    0.00 :	  782fc7:       48 8b 05 7a a9 3f 00    mov    0x3fa97a(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782fce:       48 89 88 e8 02 00 00    mov    %rcx,0x2e8(%rax)
         :	                pg_memory_barrier();
    0.00 :	  782fd5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                new = *b;
    0.00 :	  782fda:       8b 19                   mov    (%rcx),%ebx
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782fdc:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782fdf:       76 23                   jbe    783004 <CHashInsert+0xe4>
    0.00 :	  782fe1:       e9 52 01 00 00          jmpq   783138 <CHashInsert+0x218>
    0.00 :	  782fe6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  782fed:       00 00 00 
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
         :	                                return new;
         :	                        CHashTableIncrementStatistic(table, CHS_Allocate_Fail);
    0.00 :	  782ff0:       49 83 84 24 a0 00 00    addq   $0x1,0xa0(%r12)
    0.00 :	  782ff7:       00 01 
         :	                        new = *b;
    0.00 :	  782ff9:       8b 19                   mov    (%rcx),%ebx
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782ffb:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782ffe:       0f 87 34 01 00 00       ja     783138 <CHashInsert+0x218>
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  783004:       89 de                   mov    %ebx,%esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  783006:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  78300b:       d1 ee                   shr    %esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  78300d:       89 f2                   mov    %esi,%edx
    0.00 :	  78300f:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783015:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
    0.00 :	  783019:       89 d8                   mov    %ebx,%eax
    0.00 :	  78301b:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
    0.00 :	  78301f:       75 cf                   jne    782ff0 <CHashInsert+0xd0>
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783021:       41 89 f5                mov    %esi,%r13d
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783024:       8b 4d a8                mov    -0x58(%rbp),%ecx
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783027:       45 0f af 6c 24 1c       imul   0x1c(%r12),%r13d
    0.00 :	  78302d:       4d 03 6c 24 30          add    0x30(%r12),%r13
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783032:       41 89 4d 04             mov    %ecx,0x4(%r13)
         :	        memcpy(CHashNodeGetItem(nnew), entry, table->desc.element_size);
    0.00 :	  783036:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  78303c:       49 8d 7d 08             lea    0x8(%r13),%rdi
    0.00 :	  783040:       48 8b 75 a0             mov    -0x60(%rbp),%rsi
    0.00 :	  783044:       e8 a7 6b ce ff          callq  469bf0 <memcpy@plt>
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783049:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  78304f:       8b 55 ac                mov    -0x54(%rbp),%edx
    0.00 :	  783052:       d3 ea                   shr    %cl,%edx
    0.00 :	  783054:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78305a:       89 d0                   mov    %edx,%eax
    0.00 :	  78305c:       d3 e8                   shr    %cl,%eax
    0.00 :	  78305e:       01 d0                   add    %edx,%eax
    0.00 :	  783060:       48 8b 15 e1 a8 3f 00    mov    0x3fa8e1(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  783067:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  78306b:       49 03 44 24 28          add    0x28(%r12),%rax
    0.00 :	  783070:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  783077:       f0 83 04 24 00          lock addl $0x0,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
   10.00 :	  78307c:       4c 8d 75 b0             lea    -0x50(%rbp),%r14
    0.00 :	  783080:       eb 20                   jmp    7830a2 <CHashInsert+0x182>
    0.00 :	  783082:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * where N is the number of buckets and M is the number of elements
         :	                 * in the table.  Even for a quite modestly size table this is likely
         :	                 * to exceed the number of CPU cores.
         :	                 */
         :	                Assert(!CHashPtrIsMarked(scan.target));
         :	                nnew->next = scan.target;
    0.00 :	  783088:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  78308b:       41 89 45 00             mov    %eax,0x0(%r13)
         :	                if (!__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  78308f:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  783093:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  783096:       f0 0f b1 1a             lock cmpxchg %ebx,(%rdx)
    0.00 :	  78309a:       74 49                   je     7830e5 <CHashInsert+0x1c5>
         :	                                                                                  scan.target, new))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Insert_Retry);
    0.00 :	  78309c:       49 83 44 24 60 01       addq   $0x1,0x60(%r12)
         :	         * Scan the bucket.  If we don't find a match, use compare-and-swap to
         :	         * insert the new node at the insert position.  If we do find a match,
         :	         * return the data to the caller.
         :	         */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  7830a2:       48 8b 4d a0             mov    -0x60(%rbp),%rcx
    0.00 :	  7830a6:       8b 55 a8                mov    -0x58(%rbp),%edx
    0.00 :	  7830a9:       4d 89 f0                mov    %r14,%r8
    0.00 :	  7830ac:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  7830af:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  7830b2:       e8 e9 fb ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  7830b7:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  7830bb:       74 cb                   je     783088 <CHashInsert+0x168>
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  7830bd:       41 0f b7 44 24 0e       movzwl 0xe(%r12),%eax
    0.00 :	  7830c3:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  7830c7:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  7830cd:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  7830d0:       48 01 f7                add    %rsi,%rdi
    0.00 :	  7830d3:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7830d7:       48 03 75 c0             add    -0x40(%rbp),%rsi
    0.00 :	  7830db:       29 c2                   sub    %eax,%edx
    0.00 :	  7830dd:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7830e0:       e8 0b 6b ce ff          callq  469bf0 <memcpy@plt>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  7830e5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:551
   10.00 :	  7830ea:       48 8b 05 57 a8 3f 00    mov    0x3fa857(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7830f1:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7830f8:       00 00 00 00 
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
         :	        if (scan.found)
    0.00 :	  7830fc:       31 c0                   xor    %eax,%eax
         :	         * progress at the time we popped the freelist has completed.  This
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
    0.00 :	  7830fe:       49 83 44 24 50 01       addq   $0x1,0x50(%r12)
         :	        if (scan.found)
    0.00 :	  783104:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  783108:       74 17                   je     783121 <CHashInsert+0x201>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Insert_Failed);
    0.00 :	  78310a:       49 83 44 24 58 01       addq   $0x1,0x58(%r12)
         :	                CHashAddToGarbage(table, bucket, new);
    0.00 :	  783110:       8b 75 ac                mov    -0x54(%rbp),%esi
    0.00 :	  783113:       89 da                   mov    %ebx,%edx
    0.00 :	  783115:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783118:       e8 33 fb ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  78311d:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
    0.00 :	  783121:       84 c0                   test   %al,%al
    0.00 :	  783123:       0f 94 c0                sete   %al
         :	        }
         :
         :	        /* The insert succeeded if and only if no duplicate was found. */
         :	        return !scan.found;
         :	}
    0.00 :	  783126:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  78312a:       5b                      pop    %rbx
    0.00 :	  78312b:       41 5c                   pop    %r12
    0.00 :	  78312d:       41 5d                   pop    %r13
    0.00 :	  78312f:       41 5e                   pop    %r14
    0.00 :	  783131:       41 5f                   pop    %r15
    0.00 :	  783133:       c9                      leaveq 
    0.00 :	  783134:       c3                      retq   
    0.00 :	  783135:       0f 1f 00                nopl   (%rax)
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783138:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  78313e:       8b 05 c4 59 3e 00       mov    0x3e59c4(%rip),%eax        # b68b08 <MyBackendId>
    0.00 :	  783144:       31 d2                   xor    %edx,%edx
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783146:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78314c:       4d 8b 4c 24 28          mov    0x28(%r12),%r9
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783151:       f7 f7                   div    %edi
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783153:       8d 42 01                lea    0x1(%rdx),%eax
    0.00 :	  783156:       d3 e0                   shl    %cl,%eax
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783158:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  78315e:       01 d0                   add    %edx,%eax
    0.00 :	  783160:       4c 8d 14 85 00 00 00    lea    0x0(,%rax,4),%r10
    0.00 :	  783167:       00 
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783168:       41 8b 44 24 3c          mov    0x3c(%r12),%eax
    0.00 :	  78316d:       8d 50 01                lea    0x1(%rax),%edx
    0.00 :	  783170:       41 8b 44 24 10          mov    0x10(%r12),%eax
    0.00 :	  783175:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  783178:       89 d0                   mov    %edx,%eax
    0.00 :	  78317a:       31 d2                   xor    %edx,%edx
    0.00 :	  78317c:       d3 ee                   shr    %cl,%esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  78317e:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783184:       f7 f6                   div    %esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:936
   10.00 :	  783186:       4c 89 ce                mov    %r9,%rsi
    0.00 :	  783189:       89 d0                   mov    %edx,%eax
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  78318b:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783190:       d3 e8                   shr    %cl,%eax
    0.00 :	  783192:       01 d0                   add    %edx,%eax
    0.00 :	  783194:       49 8d 14 81             lea    (%r9,%rax,4),%rdx
         :	        garbage = *b;
    0.00 :	  783198:       8b 1a                   mov    (%rdx),%ebx
         :
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
    0.00 :	  78319a:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  78319d:       76 11                   jbe    7831b0 <CHashInsert+0x290>
         :	                new = CHashAllocateViaGC(table);
         :	                if (!CHashPtrIsInvalid(new))
         :	                        return new;
         :
         :	                /* Advance to next freelist. */
         :	                f_current = (f_current + 1) % CHashTableNFreeLists(table);
    0.00 :	  78319f:       44 89 c0                mov    %r8d,%eax
    0.00 :	  7831a2:       31 d2                   xor    %edx,%edx
    0.00 :	  7831a4:       f7 f7                   div    %edi
    0.00 :	  7831a6:       e9 0d fe ff ff          jmpq   782fb8 <CHashInsert+0x98>
    0.00 :	  7831ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
   10.00 :	  7831b0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7831b2:       f0 44 0f b1 1a          lock cmpxchg %r11d,(%rdx)
    0.00 :	  7831b7:       74 1c                   je     7831d5 <CHashInsert+0x2b5>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Dequeue_Fail);
    0.00 :	  7831b9:       49 83 84 24 b0 00 00    addq   $0x1,0xb0(%r12)
    0.00 :	  7831c0:       00 01 
    0.00 :	  7831c2:       49 8b 74 24 28          mov    0x28(%r12),%rsi
    0.00 :	  7831c7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  7831cd:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  7831d3:       eb ca                   jmp    78319f <CHashInsert+0x27f>
         :	         * requeues the garbage if it's not immediately recycleable, but
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
    0.00 :	  7831d5:       49 83 84 24 b8 00 00    addq   $0x1,0xb8(%r12)
    0.00 :	  7831dc:       00 01 
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  7831de:       4f 8d 04 11             lea    (%r9,%r10,1),%r8
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7831e2:       48 8b 05 5f a7 3f 00    mov    0x3fa75f(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7831e9:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7831f0:       00 00 00 00 
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  7831f4:       48 8b 35 5d a7 3f 00    mov    0x3fa75d(%rip),%rsi        # b7d958 <ProcGlobal>
    0.00 :	  7831fb:       8b 46 10                mov    0x10(%rsi),%eax
    0.00 :	  7831fe:       85 c0                   test   %eax,%eax
    0.00 :	  783200:       74 5f                   je     783261 <CHashInsert+0x341>
    0.00 :	  783202:       31 ff                   xor    %edi,%edi
    0.00 :	  783204:       eb 1a                   jmp    783220 <CHashInsert+0x300>
    0.00 :	  783206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78320d:       00 00 00 
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
         :	                if (hazard == b || hazard == fh)
    0.00 :	  783210:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783213:       74 23                   je     783238 <CHashInsert+0x318>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783215:       83 c7 01                add    $0x1,%edi
    0.00 :	  783218:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78321b:       73 44                   jae    783261 <CHashInsert+0x341>
    0.00 :	  78321d:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
    0.00 :	  783220:       89 f8                   mov    %edi,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
   20.00 :	  783222:       48 69 c0 f0 02 00 00    imul   $0x2f0,%rax,%rax
    0.00 :	  783229:       48 03 06                add    (%rsi),%rax
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
    0.00 :	  78322c:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
   20.00 :	  783233:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  783236:       75 d8                   jne    783210 <CHashInsert+0x2f0>
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Spin);
    0.00 :	  783238:       49 83 84 24 c0 00 00    addq   $0x1,0xc0(%r12)
    0.00 :	  78323f:       00 01 
         :	                        do
         :	                        {
         :	                                hazard = proc->hazard[0];
    0.00 :	  783241:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                        } while (hazard == b || hazard == fh);
    0.00 :	  783248:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  78324b:       74 f4                   je     783241 <CHashInsert+0x321>
    0.00 :	  78324d:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783250:       74 ef                   je     783241 <CHashInsert+0x321>
    0.00 :	  783252:       48 8b 35 ff a6 3f 00    mov    0x3fa6ff(%rip),%rsi        # b7d958 <ProcGlobal>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783259:       83 c7 01                add    $0x1,%edi
    0.00 :	  78325c:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78325f:       72 bf                   jb     783220 <CHashInsert+0x300>
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783261:       89 de                   mov    %ebx,%esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  783263:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783268:       d1 ee                   shr    %esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  78326a:       89 f2                   mov    %esi,%edx
    0.00 :	  78326c:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783272:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
         :
         :	        if (CHashPtrIsInvalid(fhead))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   20.00 :	  783276:       83 fa fd                cmp    $0xfffffffd,%edx
    0.00 :	  783279:       76 13                   jbe    78328e <CHashInsert+0x36e>
         :	                 * before we overwrite n->un.gcnext with a new hashcode.
         :	                 * (This is only needed when we reclaim exactly one node,
         :	                 * because in any other case we'll do a compare-and-swap
         :	                 * before returning, which implies a full barrier.)
         :	                 */
         :	                pg_memory_barrier();
    0.00 :	  78327b:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Skipped);
    0.00 :	  783280:       49 83 84 24 c8 00 00    addq   $0x1,0xc8(%r12)
    0.00 :	  783287:       00 01 
    0.00 :	  783289:       e9 93 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        }
         :	        else if (__sync_bool_compare_and_swap(fh, InvalidCHashPtr, fhead))
    0.00 :	  78328e:       b8 fe ff ff ff          mov    $0xfffffffe,%eax
    0.00 :	  783293:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  783298:       74 41                   je     7832db <CHashInsert+0x3bb>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  78329a:       4d 8b 4c 24 30          mov    0x30(%r12),%r9
    0.00 :	  78329f:       41 8b 7c 24 1c          mov    0x1c(%r12),%edi
    0.00 :	  7832a4:       89 d0                   mov    %edx,%eax
         :
         :	                /* Walk list of reclaimed elements to end. */
         :	                fcurrent = fhead;
         :	                for (;;)
         :	                {
         :	                        n = CHashTableGetNode(table, fcurrent);
    0.00 :	  7832a6:       d1 e8                   shr    %eax
    0.00 :	  7832a8:       0f af c7                imul   %edi,%eax
    0.00 :	  7832ab:       49 8d 0c 01             lea    (%r9,%rax,1),%rcx
         :	                        fnext = n->un.gcnext;
    0.00 :	  7832af:       8b 41 04                mov    0x4(%rcx),%eax
         :	                        if (CHashPtrIsInvalid(fnext))
    0.00 :	  7832b2:       83 f8 fd                cmp    $0xfffffffd,%eax
    0.00 :	  7832b5:       76 ef                   jbe    7832a6 <CHashInsert+0x386>
    0.00 :	  7832b7:       eb 10                   jmp    7832c9 <CHashInsert+0x3a9>
    0.00 :	  7832b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        oldhead = *fh;
         :	                        n->un.gcnext = oldhead;
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
         :	                                break;
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Retry);
    0.00 :	  7832c0:       49 83 84 24 d8 00 00    addq   $0x1,0xd8(%r12)
    0.00 :	  7832c7:       00 01 
         :	                }
         :
         :	                /* Push reclaimed elements onto home free list. */
         :	                for (;;)
         :	                {
         :	                        oldhead = *fh;
    0.00 :	  7832c9:       41 8b 00                mov    (%r8),%eax
         :	                        n->un.gcnext = oldhead;
    0.00 :	  7832cc:       89 41 04                mov    %eax,0x4(%rcx)
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
    0.00 :	  7832cf:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  7832d4:       75 ea                   jne    7832c0 <CHashInsert+0x3a0>
    0.00 :	  7832d6:       e9 46 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  7832db:       49 83 84 24 d0 00 00    addq   $0x1,0xd0(%r12)
    0.00 :	  7832e2:       00 01 
    0.00 :	  7832e4:       e9 38 fd ff ff          jmpq   783021 <CHashInsert+0x101>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   42.86 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:452
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:447
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:462
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:484
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:485
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a5630 <index_getnext_tid>:
         :	 * or NULL if no more matching tuples exist.
         :	 * ----------------
         :	 */
         :	ItemPointer
         :	index_getnext_tid(IndexScanDesc scan, ScanDirection direction)
         :	{
    0.00 :	  4a5630:       55                      push   %rbp
    0.00 :	  4a5631:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4a5634:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  4a5638:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  4a563c:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  4a563f:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:447
   14.29 :	  4a5643:       48 83 ec 20             sub    $0x20,%rsp
         :	        FmgrInfo   *procedure;
         :	        bool            found;
         :
         :	        SCAN_CHECKS;
         :	        GET_SCAN_PROCEDURE(amgettuple);
    0.00 :	  4a5647:       48 8b 57 08             mov    0x8(%rdi),%rdx
         :	 * or NULL if no more matching tuples exist.
         :	 * ----------------
         :	 */
         :	ItemPointer
         :	index_getnext_tid(IndexScanDesc scan, ScanDirection direction)
         :	{
    0.00 :	  4a564b:       41 89 f5                mov    %esi,%r13d
         :	        FmgrInfo   *procedure;
         :	        bool            found;
         :
         :	        SCAN_CHECKS;
         :	        GET_SCAN_PROCEDURE(amgettuple);
    0.00 :	  4a564e:       48 8b 82 c0 00 00 00    mov    0xc0(%rdx),%rax
    0.00 :	  4a5655:       44 8b 40 68             mov    0x68(%rax),%r8d
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:452
   42.86 :	  4a5659:       4c 8d 60 60             lea    0x60(%rax),%r12
    0.00 :	  4a565d:       45 85 c0                test   %r8d,%r8d
    0.00 :	  4a5660:       75 1d                   jne    4a567f <index_getnext_tid+0x4f>
    0.00 :	  4a5662:       48 8b 82 b0 00 00 00    mov    0xb0(%rdx),%rax
    0.00 :	  4a5669:       8b 78 5c                mov    0x5c(%rax),%edi
    0.00 :	  4a566c:       85 ff                   test   %edi,%edi
    0.00 :	  4a566e:       74 69                   je     4a56d9 <index_getnext_tid+0xa9>
    0.00 :	  4a5670:       48 8b 92 b8 00 00 00    mov    0xb8(%rdx),%rdx
    0.00 :	  4a5677:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  4a567a:       e8 d1 a9 2d 00          callq  780050 <fmgr_info_cxt>
         :	         * The AM's amgettuple proc finds the next index entry matching the scan
         :	         * keys, and puts the TID into scan->xs_ctup.t_self.  It should also set
         :	         * scan->xs_recheck and possibly scan->xs_itup, though we pay no attention
         :	         * to those fields here.
         :	         */
         :	        found = DatumGetBool(FunctionCall2(procedure,
    0.00 :	  4a567f:       31 f6                   xor    %esi,%esi
    0.00 :	  4a5681:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  4a5684:       48 89 da                mov    %rbx,%rdx
    0.00 :	  4a5687:       4c 89 e7                mov    %r12,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:462
   14.29 :	  4a568a:       e8 a1 89 2d 00          callq  77e030 <FunctionCall2Coll>
         :
         :	        /* Reset kill flag immediately for safety */
         :	        scan->kill_prior_tuple = false;
         :
         :	        /* If we're out of index entries, we're done */
         :	        if (!found)
    0.00 :	  4a568f:       84 c0                   test   %al,%al
         :	        found = DatumGetBool(FunctionCall2(procedure,
         :	                                                                           PointerGetDatum(scan),
         :	                                                                           Int32GetDatum(direction)));
         :
         :	        /* Reset kill flag immediately for safety */
         :	        scan->kill_prior_tuple = false;
    0.00 :	  4a5691:       c6 43 31 00             movb   $0x0,0x31(%rbx)
         :
         :	        /* If we're out of index entries, we're done */
         :	        if (!found)
    0.00 :	  4a5695:       74 29                   je     4a56c0 <index_getnext_tid+0x90>
         :	                        scan->xs_cbuf = InvalidBuffer;
         :	                }
         :	                return NULL;
         :	        }
         :
         :	        pgstat_count_index_tuples(scan->indexRelation, 1);
    0.00 :	  4a5697:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  4a569b:       48 8b 80 38 01 00 00    mov    0x138(%rax),%rax
    0.00 :	  4a56a2:       48 85 c0                test   %rax,%rax
    0.00 :	  4a56a5:       74 05                   je     4a56ac <index_getnext_tid+0x7c>
    0.00 :	  4a56a7:       48 83 40 18 01          addq   $0x1,0x18(%rax)
         :
         :	        /* Return the TID of the tuple we found. */
         :	        return &scan->xs_ctup.t_self;
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:484
   14.29 :	  4a56ac:       48 8d 43 54             lea    0x54(%rbx),%rax
         :	}
    0.00 :	  4a56b0:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  4a56b4:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  4a56b8:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  4a56bc:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:485
   14.29 :	  4a56bd:       c3                      retq   
    0.00 :	  4a56be:       66 90                   xchg   %ax,%ax
         :
         :	        /* If we're out of index entries, we're done */
         :	        if (!found)
         :	        {
         :	                /* ... but first, release any held pin on a heap page */
         :	                if (BufferIsValid(scan->xs_cbuf))
    0.00 :	  4a56c0:       8b 7b 68                mov    0x68(%rbx),%edi
    0.00 :	  4a56c3:       31 c0                   xor    %eax,%eax
    0.00 :	  4a56c5:       85 ff                   test   %edi,%edi
    0.00 :	  4a56c7:       74 e7                   je     4a56b0 <index_getnext_tid+0x80>
         :	                {
         :	                        ReleaseBuffer(scan->xs_cbuf);
    0.00 :	  4a56c9:       e8 92 f7 1c 00          callq  674e60 <ReleaseBuffer>
         :	                        scan->xs_cbuf = InvalidBuffer;
    0.00 :	  4a56ce:       c7 43 68 00 00 00 00    movl   $0x0,0x68(%rbx)
    0.00 :	  4a56d5:       31 c0                   xor    %eax,%eax
    0.00 :	  4a56d7:       eb d7                   jmp    4a56b0 <index_getnext_tid+0x80>
         :	{
         :	        FmgrInfo   *procedure;
         :	        bool            found;
         :
         :	        SCAN_CHECKS;
         :	        GET_SCAN_PROCEDURE(amgettuple);
    0.00 :	  4a56d9:       ba 50 3c 7b 00          mov    $0x7b3c50,%edx
    0.00 :	  4a56de:       be c4 01 00 00          mov    $0x1c4,%esi
    0.00 :	  4a56e3:       bf 33 3b 7b 00          mov    $0x7b3b33,%edi
    0.00 :	  4a56e8:       e8 33 5d 2d 00          callq  77b420 <elog_start>
    0.00 :	  4a56ed:       ba 8e 3b 7b 00          mov    $0x7b3b8e,%edx
    0.00 :	  4a56f2:       be 48 3b 7b 00          mov    $0x7b3b48,%esi
    0.00 :	  4a56f7:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4a56fc:       31 c0                   xor    %eax,%eax
    0.00 :	  4a56fe:       e8 2d 5b 2d 00          callq  77b230 <elog_finish>
    0.00 :	  4a5703:       e8 c8 3d fc ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3750 <ExecScan>:
         :	 */
         :	TupleTableSlot *
         :	ExecScan(ScanState *node,
         :	                 ExecScanAccessMtd accessMtd,   /* function returning a tuple */
         :	                 ExecScanRecheckMtd recheckMtd)
         :	{
    0.00 :	  5b3750:       55                      push   %rbp
    0.00 :	  5b3751:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b3754:       41 57                   push   %r15
    0.00 :	  5b3756:       41 56                   push   %r14
    0.00 :	  5b3758:       41 55                   push   %r13
    0.00 :	  5b375a:       41 54                   push   %r12
    0.00 :	  5b375c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b375f:       53                      push   %rbx
    0.00 :	  5b3760:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	  5b3764:       48 89 75 b8             mov    %rsi,-0x48(%rbp)
    0.00 :	  5b3768:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b376c:       48 8b 47 28             mov    0x28(%rdi),%rax
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b3770:       48 85 c0                test   %rax,%rax
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b3773:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        projInfo = node->ps.ps_ProjInfo;
    0.00 :	  5b3777:       4c 8b 77 68             mov    0x68(%rdi),%r14
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5b377b:       4c 8b 6f 60             mov    0x60(%rdi),%r13
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b377f:       41 0f 94 c7             sete   %r15b
    0.00 :	  5b3783:       75 09                   jne    5b378e <ExecScan+0x3e>
    0.00 :	  5b3785:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3788:       0f 84 d6 01 00 00       je     5b3964 <ExecScan+0x214>
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous scan
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
    0.00 :	  5b378e:       41 80 7c 24 70 00       cmpb   $0x0,0x70(%r12)
    0.00 :	  5b3794:       0f 85 a6 01 00 00       jne    5b3940 <ExecScan+0x1f0>
    0.00 :	  5b379a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a scan tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5b37a0:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b37a4:       e8 07 52 1e 00          callq  7989b0 <MemoryContextReset>
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b37a9:       0f b6 05 e0 68 60 00    movzbl 0x6068e0(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5b37b0:       84 c0                   test   %al,%al
    0.00 :	  5b37b2:       0f 85 50 01 00 00       jne    5b3908 <ExecScan+0x1b8>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b37b8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b37bd:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b37c4:       00 
    0.00 :	  5b37c5:       0f 84 0d 01 00 00       je     5b38d8 <ExecScan+0x188>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b37cb:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b37d0:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b37d3:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b37d6:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b37dd:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b37e1:       0f 84 f1 00 00 00       je     5b38d8 <ExecScan+0x188>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37e7:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b37ea:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b37f1:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b37f8:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37f9:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b37fc:       0f 85 16 01 00 00       jne    5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b3802:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b3805:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b380c:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b3810:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3813:       0f 84 ff 00 00 00       je     5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b3819:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b381b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b381d:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3820:       e8 5b 0c 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b3825:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3828:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b382b:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b382e:       84 c0                   test   %al,%al
    0.00 :	  5b3830:       0f 84 fa 00 00 00       je     5b3930 <ExecScan+0x1e0>
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b3836:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b3839:       0f 84 ab 00 00 00       je     5b38ea <ExecScan+0x19a>
    0.00 :	  5b383f:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5b3843:       0f 85 a1 00 00 00       jne    5b38ea <ExecScan+0x19a>
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3849:       45 84 ff                test   %r15b,%r15b
         :	                }
         :
         :	                /*
         :	                 * place the current tuple into the expr context
         :	                 */
         :	                econtext->ecxt_scantuple = slot;
    0.00 :	  5b384c:       49 89 5d 08             mov    %rbx,0x8(%r13)
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3850:       75 3e                   jne    5b3890 <ExecScan+0x140>
    0.00 :	  5b3852:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
   14.29 :	  5b3856:       31 d2                   xor    %edx,%edx
    0.00 :	  5b3858:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  5b385b:       e8 b0 96 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b3860:       84 c0                   test   %al,%al
    0.00 :	  5b3862:       75 2c                   jne    5b3890 <ExecScan+0x140>
         :	                                 */
         :	                                return slot;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(node, 1);
    0.00 :	  5b3864:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  5b3869:       48 85 c0                test   %rax,%rax
    0.00 :	  5b386c:       0f 84 2e ff ff ff       je     5b37a0 <ExecScan+0x50>
    0.00 :	  5b3872:       f2 0f 10 05 de b8 1f    movsd  0x1fb8de(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b3879:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
   14.29 :	  5b387a:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b3881:       00 
   14.29 :	  5b3882:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b3889:       00 
    0.00 :	  5b388a:       e9 11 ff ff ff          jmpq   5b37a0 <ExecScan+0x50>
    0.00 :	  5b388f:       90                      nop
         :	                if (!qual || ExecQual(qual, econtext, false))
         :	                {
         :	                        /*
         :	                         * Found a satisfactory scan tuple.
         :	                         */
         :	                        if (projInfo)
    0.00 :	  5b3890:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3893:       74 2b                   je     5b38c0 <ExecScan+0x170>
         :	                                /*
         :	                                 * Form a projection tuple, store it in the result tuple slot
         :	                                 * and return it --- unless we find we can project no tuples
         :	                                 * from this scan tuple, in which case continue scan.
         :	                                 */
         :	                                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3895:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3899:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b389c:       e8 5f 97 ff ff          callq  5ad000 <ExecProject>
    0.00 :	  5b38a1:       48 89 c3                mov    %rax,%rbx
         :	                                if (isDone != ExprEndResult)
    0.00 :	  5b38a4:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  5b38a7:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5b38aa:       0f 84 f0 fe ff ff       je     5b37a0 <ExecScan+0x50>
         :	                                {
         :	                                        node->ps.ps_TupFromTlist = (isDone == ExprMultipleResult);
    0.00 :	  5b38b0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5b38b3:       41 0f 94 44 24 70       sete   0x70(%r12)
    0.00 :	  5b38b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b38c0:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  5b38c4:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b38c7:       5b                      pop    %rbx
    0.00 :	  5b38c8:       41 5c                   pop    %r12
    0.00 :	  5b38ca:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
   14.29 :	  5b38cc:       41 5e                   pop    %r14
    0.00 :	  5b38ce:       41 5f                   pop    %r15
    0.00 :	  5b38d0:       c9                      leaveq 
    0.00 :	  5b38d1:       c3                      retq   
    0.00 :	  5b38d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b38d8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b38db:       ff 55 b8                callq  *-0x48(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
   28.57 :	  5b38de:       48 89 c3                mov    %rax,%rbx
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
   14.29 :	  5b38e1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b38e4:       0f 85 55 ff ff ff       jne    5b383f <ExecScan+0xef>
         :	                {
         :	                        if (projInfo)
    0.00 :	  5b38ea:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b38ed:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b38f0:       74 ce                   je     5b38c0 <ExecScan+0x170>
         :	                                return ExecClearTuple(projInfo->pi_slot);
    0.00 :	  5b38f2:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5b38f6:       e8 15 08 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b38fb:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b38fe:       66 90                   xchg   %ax,%ax
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b3900:       eb be                   jmp    5b38c0 <ExecScan+0x170>
    0.00 :	  5b3902:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b3908:       e8 93 89 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5b390d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b3910:       e9 a3 fe ff ff          jmpq   5b37b8 <ExecScan+0x68>
    0.00 :	  5b3915:       0f 1f 00                nopl   (%rax)
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3918:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b391b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5b3920:       e8 eb 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3925:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3928:       e9 09 ff ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b392d:       0f 1f 00                nopl   (%rax)
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b3930:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3933:       e8 d8 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3938:       e9 f9 fe ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b393d:       0f 1f 00                nopl   (%rax)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3940:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3944:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b3947:       e8 b4 96 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b394c:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3950:       48 89 c3                mov    %rax,%rbx
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b3953:       0f 84 67 ff ff ff       je     5b38c0 <ExecScan+0x170>
         :	                        return resultSlot;
         :	                /* Done with that source tuple... */
         :	                node->ps.ps_TupFromTlist = false;
    0.00 :	  5b3959:       41 c6 44 24 70 00       movb   $0x0,0x70(%r12)
    0.00 :	  5b395f:       e9 3c fe ff ff          jmpq   5b37a0 <ExecScan+0x50>
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
         :	        {
         :	                ResetExprContext(econtext);
    0.00 :	  5b3964:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b3968:       e8 43 50 1e 00          callq  7989b0 <MemoryContextReset>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b396d:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b3972:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b3979:       00 
    0.00 :	  5b397a:       74 74                   je     5b39f0 <ExecScan+0x2a0>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b397c:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b3981:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b3984:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b3987:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b398e:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b3992:       74 5c                   je     5b39f0 <ExecScan+0x2a0>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b3994:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b3997:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b399e:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b39a5:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b39a6:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b39a9:       75 5a                   jne    5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b39ab:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b39ae:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b39b5:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b39b9:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b39bc:       74 47                   je     5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b39be:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b39c0:       31 d2                   xor    %edx,%edx
    0.00 :	  5b39c2:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39c5:       e8 b6 0a 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b39ca:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39cd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39d0:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b39d3:       84 c0                   test   %al,%al
    0.00 :	  5b39d5:       0f 85 e5 fe ff ff       jne    5b38c0 <ExecScan+0x170>
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b39db:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b39de:       e8 2d 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b39e3:       e9 d8 fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
    0.00 :	  5b39e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b39ef:       00 
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b39f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39f3:       ff 55 b8                callq  *-0x48(%rbp)
    0.00 :	  5b39f6:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b39f9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b3a00:       e9 bb fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3a05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3a08:       e8 03 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3a0d:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3a10:       e9 ab fe ff ff          jmpq   5b38c0 <ExecScan+0x170>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   57.14 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:85
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:50
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:85
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:114
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bf570 <IndexNext>:
         :	 *              using the index specified in the IndexScanState information.
         :	 * ----------------------------------------------------------------
         :	 */
         :	static TupleTableSlot *
         :	IndexNext(IndexScanState *node)
         :	{
    0.00 :	  5bf570:       55                      push   %rbp
    0.00 :	  5bf571:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bf574:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:50
   14.29 :	  5bf576:       41 56                   push   %r14
    0.00 :	  5bf578:       41 55                   push   %r13
    0.00 :	  5bf57a:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5bf57d:       41 54                   push   %r12
    0.00 :	  5bf57f:       53                      push   %rbx
    0.00 :	  5bf580:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        estate = node->ss.ps.state;
         :	        direction = estate->es_direction;
    0.00 :	  5bf584:       48 8b 47 10             mov    0x10(%rdi),%rax
    0.00 :	  5bf588:       44 8b 78 04             mov    0x4(%rax),%r15d
         :	        /* flip direction if this is an overall backward scan */
         :	        if (ScanDirectionIsBackward(((IndexScan *) node->ss.ps.plan)->indexorderdir))
    0.00 :	  5bf58c:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  5bf590:       83 b8 90 00 00 00 ff    cmpl   $0xffffffff,0x90(%rax)
    0.00 :	  5bf597:       0f 84 b3 00 00 00       je     5bf650 <IndexNext+0xe0>
         :	                if (ScanDirectionIsForward(direction))
         :	                        direction = BackwardScanDirection;
         :	                else if (ScanDirectionIsBackward(direction))
         :	                        direction = ForwardScanDirection;
         :	        }
         :	        scandesc = node->iss_ScanDesc;
    0.00 :	  5bf59d:       49 8b 9d d8 00 00 00    mov    0xd8(%r13),%rbx
         :	        econtext = node->ss.ps.ps_ExprContext;
    0.00 :	  5bf5a4:       4d 8b 65 60             mov    0x60(%r13),%r12
         :	        slot = node->ss.ss_ScanTupleSlot;
    0.00 :	  5bf5a8:       4d 8b b5 88 00 00 00    mov    0x88(%r13),%r14
    0.00 :	  5bf5af:       90                      nop
         :
         :	        /*
         :	         * ok, now that we have what we need, fetch the next tuple.
         :	         */
         :	        while ((tuple = index_getnext(scandesc, direction)) != NULL)
    0.00 :	  5bf5b0:       44 89 fe                mov    %r15d,%esi
    0.00 :	  5bf5b3:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bf5b6:       e8 55 61 ee ff          callq  4a5710 <index_getnext>
    0.00 :	  5bf5bb:       48 85 c0                test   %rax,%rax
    0.00 :	  5bf5be:       74 78                   je     5bf638 <IndexNext+0xc8>
         :	                /*
         :	                 * Store the scanned tuple in the scan tuple slot of the scan state.
         :	                 * Note: we pass 'false' because tuples returned by amgetnext are
         :	                 * pointers onto disk pages and must not be pfree()'d.
         :	                 */
         :	                ExecStoreTuple(tuple,   /* tuple to store */
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:85
   57.14 :	  5bf5c0:       8b 53 68                mov    0x68(%rbx),%edx
    0.00 :	  5bf5c3:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bf5c5:       4c 89 f6                mov    %r14,%rsi
   14.29 :	  5bf5c8:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bf5cb:       e8 b0 4e ff ff          callq  5b4480 <ExecStoreTuple>
         :
         :	                /*
         :	                 * If the index was lossy, we have to recheck the index quals using
         :	                 * the fetched tuple.
         :	                 */
         :	                if (scandesc->xs_recheck)
    0.00 :	  5bf5d0:       80 7b 6c 00             cmpb   $0x0,0x6c(%rbx)
    0.00 :	  5bf5d4:       74 4a                   je     5bf620 <IndexNext+0xb0>
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
         :	                        ResetExprContext(econtext);
    0.00 :	  5bf5d6:       49 8b 7c 24 28          mov    0x28(%r12),%rdi
         :	                 * If the index was lossy, we have to recheck the index quals using
         :	                 * the fetched tuple.
         :	                 */
         :	                if (scandesc->xs_recheck)
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    0.00 :	  5bf5db:       4d 89 74 24 08          mov    %r14,0x8(%r12)
         :	                        ResetExprContext(econtext);
    0.00 :	  5bf5e0:       e8 cb 93 1d 00          callq  7989b0 <MemoryContextReset>
         :	                        if (!ExecQual(node->indexqualorig, econtext, false))
    0.00 :	  5bf5e5:       49 8b bd 90 00 00 00    mov    0x90(%r13),%rdi
    0.00 :	  5bf5ec:       31 d2                   xor    %edx,%edx
    0.00 :	  5bf5ee:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5bf5f1:       e8 1a d9 fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bf5f6:       84 c0                   test   %al,%al
    0.00 :	  5bf5f8:       75 26                   jne    5bf620 <IndexNext+0xb0>
         :	                        {
         :	                                /* Fails recheck, so drop it and loop back for another */
         :	                                InstrCountFiltered2(node, 1);
    0.00 :	  5bf5fa:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bf5fe:       48 85 c0                test   %rax,%rax
    0.00 :	  5bf601:       74 ad                   je     5bf5b0 <IndexNext+0x40>
    0.00 :	  5bf603:       f2 0f 10 05 4d fb 1e    movsd  0x1efb4d(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bf60a:       00 
    0.00 :	  5bf60b:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bf612:       00 
    0.00 :	  5bf613:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bf61a:       00 
    0.00 :	  5bf61b:       eb 93                   jmp    5bf5b0 <IndexNext+0x40>
    0.00 :	  5bf61d:       0f 1f 00                nopl   (%rax)
         :	        /*
         :	         * if we get here it means the index scan failed so we are at the end of
         :	         * the scan..
         :	         */
         :	        return ExecClearTuple(slot);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeIndexscan.c:114
   14.29 :	  5bf620:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5bf624:       4c 89 f0                mov    %r14,%rax
    0.00 :	  5bf627:       5b                      pop    %rbx
    0.00 :	  5bf628:       41 5c                   pop    %r12
    0.00 :	  5bf62a:       41 5d                   pop    %r13
    0.00 :	  5bf62c:       41 5e                   pop    %r14
    0.00 :	  5bf62e:       41 5f                   pop    %r15
    0.00 :	  5bf630:       c9                      leaveq 
    0.00 :	  5bf631:       c3                      retq   
    0.00 :	  5bf632:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5bf638:       48 83 c4 08             add    $0x8,%rsp
         :
         :	        /*
         :	         * if we get here it means the index scan failed so we are at the end of
         :	         * the scan..
         :	         */
         :	        return ExecClearTuple(slot);
    0.00 :	  5bf63c:       4c 89 f7                mov    %r14,%rdi
         :	}
    0.00 :	  5bf63f:       5b                      pop    %rbx
    0.00 :	  5bf640:       41 5c                   pop    %r12
    0.00 :	  5bf642:       41 5d                   pop    %r13
    0.00 :	  5bf644:       41 5e                   pop    %r14
    0.00 :	  5bf646:       41 5f                   pop    %r15
    0.00 :	  5bf648:       c9                      leaveq 
         :
         :	        /*
         :	         * if we get here it means the index scan failed so we are at the end of
         :	         * the scan..
         :	         */
         :	        return ExecClearTuple(slot);
    0.00 :	  5bf649:       e9 c2 4a ff ff          jmpq   5b4110 <ExecClearTuple>
    0.00 :	  5bf64e:       66 90                   xchg   %ax,%ax
         :	        estate = node->ss.ps.state;
         :	        direction = estate->es_direction;
         :	        /* flip direction if this is an overall backward scan */
         :	        if (ScanDirectionIsBackward(((IndexScan *) node->ss.ps.plan)->indexorderdir))
         :	        {
         :	                if (ScanDirectionIsForward(direction))
    0.00 :	  5bf650:       41 83 ff 01             cmp    $0x1,%r15d
    0.00 :	  5bf654:       74 12                   je     5bf668 <IndexNext+0xf8>
         :	                        direction = BackwardScanDirection;
         :	                else if (ScanDirectionIsBackward(direction))
    0.00 :	  5bf656:       41 83 ff ff             cmp    $0xffffffff,%r15d
    0.00 :	  5bf65a:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  5bf65f:       44 0f 44 f8             cmove  %eax,%r15d
    0.00 :	  5bf663:       e9 35 ff ff ff          jmpq   5bf59d <IndexNext+0x2d>
         :	        estate = node->ss.ps.state;
         :	        direction = estate->es_direction;
         :	        /* flip direction if this is an overall backward scan */
         :	        if (ScanDirectionIsBackward(((IndexScan *) node->ss.ps.plan)->indexorderdir))
         :	        {
         :	                if (ScanDirectionIsForward(direction))
    0.00 :	  5bf668:       41 bf ff ff ff ff       mov    $0xffffffff,%r15d
    0.00 :	  5bf66e:       e9 2a ff ff ff          jmpq   5bf59d <IndexNext+0x2d>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1202
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1114
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1138
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1139
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1202
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ac3e0 <_bt_readpage>:
         :	 *
         :	 * Returns true if any matching items found on the page, false if none.
         :	 */
         :	static bool
         :	_bt_readpage(IndexScanDesc scan, ScanDirection dir, OffsetNumber offnum)
         :	{
    0.00 :	  4ac3e0:       55                      push   %rbp
    0.00 :	  4ac3e1:       89 d1                   mov    %edx,%ecx
    0.00 :	  4ac3e3:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ac3e6:       41 57                   push   %r15
    0.00 :	  4ac3e8:       41 56                   push   %r14
    0.00 :	  4ac3ea:       41 55                   push   %r13
    0.00 :	  4ac3ec:       41 54                   push   %r12
    0.00 :	  4ac3ee:       53                      push   %rbx
    0.00 :	  4ac3ef:       48 83 ec 58             sub    $0x58,%rsp
    0.00 :	  4ac3f3:       48 89 7d 98             mov    %rdi,-0x68(%rbp)
    0.00 :	  4ac3f7:       89 75 94                mov    %esi,-0x6c(%rbp)
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4ac3fa:       4c 8b 67 38             mov    0x38(%rdi),%r12
         :	        bool            continuescan;
         :
         :	        /* we must have the buffer pinned and locked */
         :	        Assert(BufferIsValid(so->currPos.buf));
         :
         :	        page = BufferGetPage(so->currPos.buf);
    0.00 :	  4ac3fe:       41 8b 44 24 54          mov    0x54(%r12),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1114
   16.67 :	  4ac403:       85 c0                   test   %eax,%eax
    0.00 :	  4ac405:       0f 88 55 02 00 00       js     4ac660 <_bt_readpage+0x280>
    0.00 :	  4ac40b:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4ac40e:       4c 63 f8                movslq %eax,%r15
    0.00 :	  4ac411:       49 c1 e7 0d             shl    $0xd,%r15
    0.00 :	  4ac415:       4c 03 3d dc 36 71 00    add    0x7136dc(%rip),%r15        # bbfaf8 <BufferBlocks>
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :	        minoff = P_FIRSTDATAKEY(opaque);
    0.00 :	  4ac41c:       41 0f b7 47 10          movzwl 0x10(%r15),%eax
    0.00 :	  4ac421:       41 8b 54 07 04          mov    0x4(%r15,%rax,1),%edx
    0.00 :	  4ac426:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  4ac429:       19 c0                   sbb    %eax,%eax
    0.00 :	  4ac42b:       83 c0 02                add    $0x2,%eax
    0.00 :	  4ac42e:       66 89 45 a0             mov    %ax,-0x60(%rbp)
         :	        maxoff = PageGetMaxOffsetNumber(page);
    0.00 :	  4ac432:       41 0f b7 47 0c          movzwl 0xc(%r15),%eax
    0.00 :	  4ac437:       66 c7 45 b0 00 00       movw   $0x0,-0x50(%rbp)
    0.00 :	  4ac43d:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  4ac441:       76 0f                   jbe    4ac452 <_bt_readpage+0x72>
    0.00 :	  4ac443:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4ac446:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4ac44a:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  4ac44e:       66 89 45 b0             mov    %ax,-0x50(%rbp)
         :	        /*
         :	         * we must save the page's right-link while scanning it; this tells us
         :	         * where to step right to after we're done with these items.  There is no
         :	         * corresponding need for the left-link, since splits always go right.
         :	         */
         :	        so->currPos.nextPage = opaque->btpo_next;
    0.00 :	  4ac452:       41 89 54 24 58          mov    %edx,0x58(%r12)
         :
         :	        /* initialize tuple workspace to empty */
         :	        so->currPos.nextTupleOffset = 0;
    0.00 :	  4ac457:       41 c7 44 24 60 00 00    movl   $0x0,0x60(%r12)
    0.00 :	  4ac45e:       00 00 
         :
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4ac460:       83 7d 94 01             cmpl   $0x1,-0x6c(%rbp)
    0.00 :	  4ac464:       0f 84 06 01 00 00       je     4ac570 <_bt_readpage+0x190>
         :	        else
         :	        {
         :	                /* load items[] in descending order */
         :	                itemIndex = MaxIndexTuplesPerPage;
         :
         :	                offnum = Min(offnum, maxoff);
    0.00 :	  4ac46a:       66 39 4d b0             cmp    %cx,-0x50(%rbp)
    0.00 :	  4ac46e:       44 0f b7 6d b0          movzwl -0x50(%rbp),%r13d
    0.00 :	  4ac473:       48 8d 45 cf             lea    -0x31(%rbp),%rax
         :
         :	                while (offnum >= minoff)
    0.00 :	  4ac477:       41 be 98 01 00 00       mov    $0x198,%r14d
    0.00 :	  4ac47d:       48 89 45 88             mov    %rax,-0x78(%rbp)
         :	        else
         :	        {
         :	                /* load items[] in descending order */
         :	                itemIndex = MaxIndexTuplesPerPage;
         :
         :	                offnum = Min(offnum, maxoff);
    0.00 :	  4ac481:       44 0f 47 e9             cmova  %ecx,%r13d
         :
         :	                while (offnum >= minoff)
    0.00 :	  4ac485:       66 44 39 6d a0          cmp    %r13w,-0x60(%rbp)
    0.00 :	  4ac48a:       76 1b                   jbe    4ac4a7 <_bt_readpage+0xc7>
    0.00 :	  4ac48c:       e9 a2 00 00 00          jmpq   4ac533 <_bt_readpage+0x153>
    0.00 :	  4ac491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        }
         :	                        if (!continuescan)
         :	                        {
         :	                                /* there can't be any more matches, so stop */
         :	                                so->currPos.moreLeft = false;
         :	                                break;
    0.00 :	  4ac498:       41 83 ed 01             sub    $0x1,%r13d
         :	                /* load items[] in descending order */
         :	                itemIndex = MaxIndexTuplesPerPage;
         :
         :	                offnum = Min(offnum, maxoff);
         :
         :	                while (offnum >= minoff)
    0.00 :	  4ac49c:       66 44 39 6d a0          cmp    %r13w,-0x60(%rbp)
    0.00 :	  4ac4a1:       0f 87 8c 00 00 00       ja     4ac533 <_bt_readpage+0x153>
         :	                {
         :	                        itup = _bt_checkkeys(scan, page, offnum, dir, &continuescan);
    0.00 :	  4ac4a7:       8b 4d 94                mov    -0x6c(%rbp),%ecx
    0.00 :	  4ac4aa:       4c 8b 45 88             mov    -0x78(%rbp),%r8
    0.00 :	  4ac4ae:       41 0f b7 d5             movzwl %r13w,%edx
    0.00 :	  4ac4b2:       48 8b 7d 98             mov    -0x68(%rbp),%rdi
    0.00 :	  4ac4b6:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  4ac4b9:       e8 62 1f 00 00          callq  4ae420 <_bt_checkkeys>
         :	                        if (itup != NULL)
    0.00 :	  4ac4be:       48 85 c0                test   %rax,%rax
         :
         :	                offnum = Min(offnum, maxoff);
         :
         :	                while (offnum >= minoff)
         :	                {
         :	                        itup = _bt_checkkeys(scan, page, offnum, dir, &continuescan);
    0.00 :	  4ac4c1:       48 89 c1                mov    %rax,%rcx
         :	                        if (itup != NULL)
    0.00 :	  4ac4c4:       74 5d                   je     4ac523 <_bt_readpage+0x143>
         :	                        {
         :	                                /* tuple passes all scan key conditions, so remember it */
         :	                                itemIndex--;
    0.00 :	  4ac4c6:       41 83 ee 01             sub    $0x1,%r14d
         :	/* Save an index item into so->currPos.items[itemIndex] */
         :	static void
         :	_bt_saveitem(BTScanOpaque so, int itemIndex,
         :	                         OffsetNumber offnum, IndexTuple itup)
         :	{
         :	        BTScanPosItem *currItem = &so->currPos.items[itemIndex];
    0.00 :	  4ac4ca:       49 63 c6                movslq %r14d,%rax
         :
         :	        currItem->heapTid = itup->t_tid;
    0.00 :	  4ac4cd:       48 8d 04 80             lea    (%rax,%rax,4),%rax
    0.00 :	  4ac4d1:       49 8d 54 44 60          lea    0x60(%r12,%rax,2),%rdx
    0.00 :	  4ac4d6:       8b 01                   mov    (%rcx),%eax
    0.00 :	  4ac4d8:       89 42 10                mov    %eax,0x10(%rdx)
    0.00 :	  4ac4db:       0f b7 41 04             movzwl 0x4(%rcx),%eax
         :	        currItem->indexOffset = offnum;
    0.00 :	  4ac4df:       66 44 89 6a 16          mov    %r13w,0x16(%rdx)
         :	_bt_saveitem(BTScanOpaque so, int itemIndex,
         :	                         OffsetNumber offnum, IndexTuple itup)
         :	{
         :	        BTScanPosItem *currItem = &so->currPos.items[itemIndex];
         :
         :	        currItem->heapTid = itup->t_tid;
    0.00 :	  4ac4e4:       66 89 42 14             mov    %ax,0x14(%rdx)
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
    0.00 :	  4ac4e8:       49 83 7c 24 40 00       cmpq   $0x0,0x40(%r12)
    0.00 :	  4ac4ee:       74 33                   je     4ac523 <_bt_readpage+0x143>
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
    0.00 :	  4ac4f0:       41 8b 44 24 60          mov    0x60(%r12),%eax
         :
         :	        currItem->heapTid = itup->t_tid;
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
    0.00 :	  4ac4f5:       0f b7 59 06             movzwl 0x6(%rcx),%ebx
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac4f9:       48 89 ce                mov    %rcx,%rsi
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
    0.00 :	  4ac4fc:       66 89 42 18             mov    %ax,0x18(%rdx)
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac500:       49 63 7c 24 60          movslq 0x60(%r12),%rdi
    0.00 :	  4ac505:       49 03 7c 24 40          add    0x40(%r12),%rdi
         :
         :	        currItem->heapTid = itup->t_tid;
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
    0.00 :	  4ac50a:       81 e3 ff 1f 00 00       and    $0x1fff,%ebx
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac510:       48 89 da                mov    %rbx,%rdx
         :	                so->currPos.nextTupleOffset += MAXALIGN(itupsz);
    0.00 :	  4ac513:       83 c3 07                add    $0x7,%ebx
    0.00 :	  4ac516:       83 e3 f8                and    $0xfffffff8,%ebx
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac519:       e8 d2 d6 fb ff          callq  469bf0 <memcpy@plt>
         :	                so->currPos.nextTupleOffset += MAXALIGN(itupsz);
    0.00 :	  4ac51e:       41 01 5c 24 60          add    %ebx,0x60(%r12)
         :	                        {
         :	                                /* tuple passes all scan key conditions, so remember it */
         :	                                itemIndex--;
         :	                                _bt_saveitem(so, itemIndex, offnum, itup);
         :	                        }
         :	                        if (!continuescan)
    0.00 :	  4ac523:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  4ac527:       0f 85 6b ff ff ff       jne    4ac498 <_bt_readpage+0xb8>
         :	                        {
         :	                                /* there can't be any more matches, so stop */
         :	                                so->currPos.moreLeft = false;
    0.00 :	  4ac52d:       41 c6 44 24 5c 00       movb   $0x0,0x5c(%r12)
         :
         :	                        offnum = OffsetNumberPrev(offnum);
         :	                }
         :
         :	                Assert(itemIndex >= 0);
         :	                so->currPos.firstItem = itemIndex;
    0.00 :	  4ac533:       45 89 74 24 64          mov    %r14d,0x64(%r12)
         :	                so->currPos.lastItem = MaxIndexTuplesPerPage - 1;
    0.00 :	  4ac538:       41 c7 44 24 68 97 01    movl   $0x197,0x68(%r12)
    0.00 :	  4ac53f:       00 00 
         :	                so->currPos.itemIndex = MaxIndexTuplesPerPage - 1;
    0.00 :	  4ac541:       41 c7 44 24 6c 97 01    movl   $0x197,0x6c(%r12)
    0.00 :	  4ac548:       00 00 
    0.00 :	  4ac54a:       41 8b 44 24 64          mov    0x64(%r12),%eax
    0.00 :	  4ac54f:       41 3b 44 24 68          cmp    0x68(%r12),%eax
    0.00 :	  4ac554:       0f 9e c0                setle  %al
         :	        }
         :
         :	        return (so->currPos.firstItem <= so->currPos.lastItem);
         :	}
    0.00 :	  4ac557:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  4ac55b:       5b                      pop    %rbx
    0.00 :	  4ac55c:       41 5c                   pop    %r12
    0.00 :	  4ac55e:       41 5d                   pop    %r13
    0.00 :	  4ac560:       41 5e                   pop    %r14
    0.00 :	  4ac562:       41 5f                   pop    %r15
    0.00 :	  4ac564:       c9                      leaveq 
    0.00 :	  4ac565:       c3                      retq   
    0.00 :	  4ac566:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ac56d:       00 00 00 
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                /* load items[] in ascending order */
         :	                itemIndex = 0;
         :
         :	                offnum = Max(offnum, minoff);
    0.00 :	  4ac570:       66 39 4d a0             cmp    %cx,-0x60(%rbp)
    0.00 :	  4ac574:       44 0f b7 6d a0          movzwl -0x60(%rbp),%r13d
    0.00 :	  4ac579:       48 8d 45 cf             lea    -0x31(%rbp),%rax
    0.00 :	  4ac57d:       48 89 45 88             mov    %rax,-0x78(%rbp)
         :
         :	                while (offnum <= maxoff)
    0.00 :	  4ac581:       b8 ff ff ff ff          mov    $0xffffffff,%eax
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                /* load items[] in ascending order */
         :	                itemIndex = 0;
         :
         :	                offnum = Max(offnum, minoff);
    0.00 :	  4ac586:       44 0f 42 e9             cmovb  %ecx,%r13d
         :
         :	                while (offnum <= maxoff)
    0.00 :	  4ac58a:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  4ac58d:       66 44 39 6d b0          cmp    %r13w,-0x50(%rbp)
    0.00 :	  4ac592:       73 1b                   jae    4ac5af <_bt_readpage+0x1cf>
    0.00 :	  4ac594:       e9 a8 00 00 00          jmpq   4ac641 <_bt_readpage+0x261>
    0.00 :	  4ac599:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        }
         :	                        if (!continuescan)
         :	                        {
         :	                                /* there can't be any more matches, so stop */
         :	                                so->currPos.moreRight = false;
         :	                                break;
    0.00 :	  4ac5a0:       41 83 c5 01             add    $0x1,%r13d
         :	                /* load items[] in ascending order */
         :	                itemIndex = 0;
         :
         :	                offnum = Max(offnum, minoff);
         :
         :	                while (offnum <= maxoff)
    0.00 :	  4ac5a4:       66 44 3b 6d b0          cmp    -0x50(%rbp),%r13w
    0.00 :	  4ac5a9:       0f 87 c9 00 00 00       ja     4ac678 <_bt_readpage+0x298>
         :	                {
         :	                        itup = _bt_checkkeys(scan, page, offnum, dir, &continuescan);
    0.00 :	  4ac5af:       4c 8b 45 88             mov    -0x78(%rbp),%r8
    0.00 :	  4ac5b3:       48 8b 7d 98             mov    -0x68(%rbp),%rdi
    0.00 :	  4ac5b7:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4ac5bc:       41 0f b7 d5             movzwl %r13w,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1138
   16.67 :	  4ac5c0:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  4ac5c3:       e8 58 1e 00 00          callq  4ae420 <_bt_checkkeys>
         :	                        if (itup != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1139
   16.67 :	  4ac5c8:       48 85 c0                test   %rax,%rax
         :
         :	                offnum = Max(offnum, minoff);
         :
         :	                while (offnum <= maxoff)
         :	                {
         :	                        itup = _bt_checkkeys(scan, page, offnum, dir, &continuescan);
    0.00 :	  4ac5cb:       48 89 c1                mov    %rax,%rcx
         :	                        if (itup != NULL)
    0.00 :	  4ac5ce:       74 5d                   je     4ac62d <_bt_readpage+0x24d>
         :	/* Save an index item into so->currPos.items[itemIndex] */
         :	static void
         :	_bt_saveitem(BTScanOpaque so, int itemIndex,
         :	                         OffsetNumber offnum, IndexTuple itup)
         :	{
         :	        BTScanPosItem *currItem = &so->currPos.items[itemIndex];
    0.00 :	  4ac5d0:       49 63 c6                movslq %r14d,%rax
         :
         :	        currItem->heapTid = itup->t_tid;
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1202
   16.67 :	  4ac5d3:       48 8d 04 80             lea    (%rax,%rax,4),%rax
    0.00 :	  4ac5d7:       49 8d 54 44 60          lea    0x60(%r12,%rax,2),%rdx
    0.00 :	  4ac5dc:       8b 01                   mov    (%rcx),%eax
    0.00 :	  4ac5de:       89 42 10                mov    %eax,0x10(%rdx)
   33.33 :	  4ac5e1:       0f b7 41 04             movzwl 0x4(%rcx),%eax
         :	        currItem->indexOffset = offnum;
    0.00 :	  4ac5e5:       66 44 89 6a 16          mov    %r13w,0x16(%rdx)
         :	_bt_saveitem(BTScanOpaque so, int itemIndex,
         :	                         OffsetNumber offnum, IndexTuple itup)
         :	{
         :	        BTScanPosItem *currItem = &so->currPos.items[itemIndex];
         :
         :	        currItem->heapTid = itup->t_tid;
    0.00 :	  4ac5ea:       66 89 42 14             mov    %ax,0x14(%rdx)
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
    0.00 :	  4ac5ee:       49 83 7c 24 40 00       cmpq   $0x0,0x40(%r12)
    0.00 :	  4ac5f4:       74 33                   je     4ac629 <_bt_readpage+0x249>
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
    0.00 :	  4ac5f6:       41 8b 44 24 60          mov    0x60(%r12),%eax
         :
         :	        currItem->heapTid = itup->t_tid;
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
    0.00 :	  4ac5fb:       0f b7 59 06             movzwl 0x6(%rcx),%ebx
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac5ff:       48 89 ce                mov    %rcx,%rsi
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
    0.00 :	  4ac602:       66 89 42 18             mov    %ax,0x18(%rdx)
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac606:       49 63 7c 24 60          movslq 0x60(%r12),%rdi
    0.00 :	  4ac60b:       49 03 7c 24 40          add    0x40(%r12),%rdi
         :
         :	        currItem->heapTid = itup->t_tid;
         :	        currItem->indexOffset = offnum;
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
    0.00 :	  4ac610:       81 e3 ff 1f 00 00       and    $0x1fff,%ebx
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac616:       48 89 da                mov    %rbx,%rdx
         :	                so->currPos.nextTupleOffset += MAXALIGN(itupsz);
    0.00 :	  4ac619:       83 c3 07                add    $0x7,%ebx
    0.00 :	  4ac61c:       83 e3 f8                and    $0xfffffff8,%ebx
         :	        if (so->currTuples)
         :	        {
         :	                Size            itupsz = IndexTupleSize(itup);
         :
         :	                currItem->tupleOffset = so->currPos.nextTupleOffset;
         :	                memcpy(so->currTuples + so->currPos.nextTupleOffset, itup, itupsz);
    0.00 :	  4ac61f:       e8 cc d5 fb ff          callq  469bf0 <memcpy@plt>
         :	                so->currPos.nextTupleOffset += MAXALIGN(itupsz);
    0.00 :	  4ac624:       41 01 5c 24 60          add    %ebx,0x60(%r12)
         :	                        itup = _bt_checkkeys(scan, page, offnum, dir, &continuescan);
         :	                        if (itup != NULL)
         :	                        {
         :	                                /* tuple passes all scan key conditions, so remember it */
         :	                                _bt_saveitem(so, itemIndex, offnum, itup);
         :	                                itemIndex++;
    0.00 :	  4ac629:       41 83 c6 01             add    $0x1,%r14d
         :	                        }
         :	                        if (!continuescan)
    0.00 :	  4ac62d:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  4ac631:       0f 85 69 ff ff ff       jne    4ac5a0 <_bt_readpage+0x1c0>
         :	                        {
         :	                                /* there can't be any more matches, so stop */
         :	                                so->currPos.moreRight = false;
    0.00 :	  4ac637:       41 8d 46 ff             lea    -0x1(%r14),%eax
    0.00 :	  4ac63b:       41 c6 44 24 5d 00       movb   $0x0,0x5d(%r12)
         :
         :	                        offnum = OffsetNumberNext(offnum);
         :	                }
         :
         :	                Assert(itemIndex <= MaxIndexTuplesPerPage);
         :	                so->currPos.firstItem = 0;
    0.00 :	  4ac641:       41 c7 44 24 64 00 00    movl   $0x0,0x64(%r12)
    0.00 :	  4ac648:       00 00 
         :	                so->currPos.lastItem = itemIndex - 1;
    0.00 :	  4ac64a:       41 89 44 24 68          mov    %eax,0x68(%r12)
         :	                so->currPos.itemIndex = 0;
    0.00 :	  4ac64f:       41 c7 44 24 6c 00 00    movl   $0x0,0x6c(%r12)
    0.00 :	  4ac656:       00 00 
    0.00 :	  4ac658:       e9 ed fe ff ff          jmpq   4ac54a <_bt_readpage+0x16a>
    0.00 :	  4ac65d:       0f 1f 00                nopl   (%rax)
         :	        bool            continuescan;
         :
         :	        /* we must have the buffer pinned and locked */
         :	        Assert(BufferIsValid(so->currPos.buf));
         :
         :	        page = BufferGetPage(so->currPos.buf);
    0.00 :	  4ac660:       f7 d0                   not    %eax
    0.00 :	  4ac662:       48 63 d0                movslq %eax,%rdx
    0.00 :	  4ac665:       48 8b 05 ac 0a 6d 00    mov    0x6d0aac(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4ac66c:       4c 8b 3c d0             mov    (%rax,%rdx,8),%r15
    0.00 :	  4ac670:       e9 a7 fd ff ff          jmpq   4ac41c <_bt_readpage+0x3c>
    0.00 :	  4ac675:       0f 1f 00                nopl   (%rax)
         :	                /* load items[] in ascending order */
         :	                itemIndex = 0;
         :
         :	                offnum = Max(offnum, minoff);
         :
         :	                while (offnum <= maxoff)
    0.00 :	  4ac678:       41 8d 46 ff             lea    -0x1(%r14),%eax
    0.00 :	  4ac67c:       eb c3                   jmp    4ac641 <_bt_readpage+0x261>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:401
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:398
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:421
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:468
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004acc50 <_bt_compare>:
         :	_bt_compare(Relation rel,
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        Page page,
         :	                        OffsetNumber offnum)
         :	{
    0.00 :	  4acc50:       55                      push   %rbp
    0.00 :	  4acc51:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4acc54:       41 57                   push   %r15
    0.00 :	  4acc56:       41 89 f7                mov    %esi,%r15d
    0.00 :	  4acc59:       41 56                   push   %r14
    0.00 :	  4acc5b:       41 55                   push   %r13
    0.00 :	  4acc5d:       41 54                   push   %r12
    0.00 :	  4acc5f:       53                      push   %rbx
    0.00 :	  4acc60:       48 89 d3                mov    %rdx,%rbx
    0.00 :	  4acc63:       48 83 ec 08             sub    $0x8,%rsp
         :	        TupleDesc       itupdesc = RelationGetDescr(rel);
         :	        BTPageOpaque opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4acc67:       0f b7 41 10             movzwl 0x10(%rcx),%eax
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        Page page,
         :	                        OffsetNumber offnum)
         :	{
         :	        TupleDesc       itupdesc = RelationGetDescr(rel);
    0.00 :	  4acc6b:       4c 8b 77 38             mov    0x38(%rdi),%r14
         :	        BTPageOpaque opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4acc6f:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
         :
         :	        /*
         :	         * Force result ">" if target item is first data item on an internal page
         :	         * --- see NOTE above.
         :	         */
         :	        if (!P_ISLEAF(opaque) && offnum == P_FIRSTDATAKEY(opaque))
    0.00 :	  4acc73:       f6 40 0c 01             testb  $0x1,0xc(%rax)
    0.00 :	  4acc77:       75 1a                   jne    4acc93 <_bt_compare+0x43>
    0.00 :	  4acc79:       83 78 04 01             cmpl   $0x1,0x4(%rax)
   16.67 :	  4acc7d:       41 0f b7 d0             movzwl %r8w,%edx
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
         :	                        return result;
         :
         :	                scankey++;
    0.00 :	  4acc81:       be 01 00 00 00          mov    $0x1,%esi
         :
         :	        /*
         :	         * Force result ">" if target item is first data item on an internal page
         :	         * --- see NOTE above.
         :	         */
         :	        if (!P_ISLEAF(opaque) && offnum == P_FIRSTDATAKEY(opaque))
    0.00 :	  4acc86:       19 c0                   sbb    %eax,%eax
    0.00 :	  4acc88:       83 c0 02                add    $0x2,%eax
    0.00 :	  4acc8b:       39 c2                   cmp    %eax,%edx
    0.00 :	  4acc8d:       0f 84 ab 00 00 00       je     4acd3e <_bt_compare+0xee>
         :	                return 1;
         :
         :	        itup = (IndexTuple) PageGetItem(page, PageGetItemId(page, offnum));
    0.00 :	  4acc93:       41 0f b7 c0             movzwl %r8w,%eax
    0.00 :	  4acc97:       0f b7 44 81 14          movzwl 0x14(%rcx,%rax,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:401
   50.00 :	  4acc9c:       25 ff 7f 00 00          and    $0x7fff,%eax
         :	         * We don't test for violation of this condition here, however.  The
         :	         * initial setup for the index scan had better have gotten it right (see
         :	         * _bt_first).
         :	         */
         :
         :	        for (i = 1; i <= keysz; i++)
    0.00 :	  4acca1:       45 85 ff                test   %r15d,%r15d
         :	         * --- see NOTE above.
         :	         */
         :	        if (!P_ISLEAF(opaque) && offnum == P_FIRSTDATAKEY(opaque))
         :	                return 1;
         :
         :	        itup = (IndexTuple) PageGetItem(page, PageGetItemId(page, offnum));
    0.00 :	  4acca4:       4c 8d 24 01             lea    (%rcx,%rax,1),%r12
         :	         * We don't test for violation of this condition here, however.  The
         :	         * initial setup for the index scan had better have gotten it right (see
         :	         * _bt_first).
         :	         */
         :
         :	        for (i = 1; i <= keysz; i++)
    0.00 :	  4acca8:       0f 8e a2 01 00 00       jle    4ace50 <_bt_compare+0x200>
         :	        {
         :	                Datum           datum;
         :	                bool            isNull;
         :	                int32           result;
         :
         :	                datum = index_getattr(itup, scankey->sk_attno, itupdesc, &isNull);
    0.00 :	  4accae:       66 41 83 7c 24 06 00    cmpw   $0x0,0x6(%r12)
         :	         * We don't test for violation of this condition here, however.  The
         :	         * initial setup for the index scan had better have gotten it right (see
         :	         * _bt_first).
         :	         */
         :
         :	        for (i = 1; i <= keysz; i++)
    0.00 :	  4accb5:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	        {
         :	                Datum           datum;
         :	                bool            isNull;
         :	                int32           result;
         :
         :	                datum = index_getattr(itup, scankey->sk_attno, itupdesc, &isNull);
    0.00 :	  4accbb:       0f 88 d4 00 00 00       js     4acd95 <_bt_compare+0x145>
    0.00 :	  4accc1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  4accc8:       0f b7 4b 04             movzwl 0x4(%rbx),%ecx
    0.00 :	  4acccc:       49 8b 46 08             mov    0x8(%r14),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:421
   16.67 :	  4accd0:       48 0f bf d1             movswq %cx,%rdx
    0.00 :	  4accd4:       48 8b 54 d0 f8          mov    -0x8(%rax,%rdx,8),%rdx
    0.00 :	  4accd9:       8b 42 54                mov    0x54(%rdx),%eax
    0.00 :	  4accdc:       85 c0                   test   %eax,%eax
    0.00 :	  4accde:       0f 88 2c 01 00 00       js     4ace10 <_bt_compare+0x1c0>
    0.00 :	  4acce4:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.00 :	  4acce8:       0f 84 0a 01 00 00       je     4acdf8 <_bt_compare+0x1a8>
    0.00 :	  4accee:       0f b7 52 4c             movzwl 0x4c(%rdx),%edx
    0.00 :	  4accf2:       66 83 fa 08             cmp    $0x8,%dx
    0.00 :	  4accf6:       0f 84 1c 01 00 00       je     4ace18 <_bt_compare+0x1c8>
    0.00 :	  4accfc:       66 83 fa 04             cmp    $0x4,%dx
    0.00 :	  4acd00:       0f 84 2a 01 00 00       je     4ace30 <_bt_compare+0x1e0>
    0.00 :	  4acd06:       66 83 fa 02             cmp    $0x2,%dx
    0.00 :	  4acd0a:       0f 84 30 01 00 00       je     4ace40 <_bt_compare+0x1f0>
    0.00 :	  4acd10:       48 98                   cltq   
    0.00 :	  4acd12:       31 d2                   xor    %edx,%edx
    0.00 :	  4acd14:       45 0f b6 44 04 08       movzbl 0x8(%r12,%rax,1),%r8d
    0.00 :	  4acd1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /* see comments about NULLs handling in btbuild */
         :	                if (scankey->sk_flags & SK_ISNULL)              /* key is NULL */
    0.00 :	  4acd20:       8b 03                   mov    (%rbx),%eax
    0.00 :	  4acd22:       a8 01                   test   $0x1,%al
    0.00 :	  4acd24:       0f 84 ae 00 00 00       je     4acdd8 <_bt_compare+0x188>
         :	                {
         :	                        if (isNull)
    0.00 :	  4acd2a:       84 d2                   test   %dl,%dl
    0.00 :	  4acd2c:       75 49                   jne    4acd77 <_bt_compare+0x127>
         :	                                result = 0;             /* NULL "=" NULL */
         :	                        else if (scankey->sk_flags & SK_BT_NULLS_FIRST)
    0.00 :	  4acd2e:       a9 00 00 00 02          test   $0x2000000,%eax
    0.00 :	  4acd33:       0f 84 b2 00 00 00       je     4acdeb <_bt_compare+0x19b>
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
         :	                        return result;
         :
         :	                scankey++;
    0.00 :	  4acd39:       be ff ff ff ff          mov    $0xffffffff,%esi
         :	        }
         :
         :	        /* if we get here, the keys are equal */
         :	        return 0;
         :	}
    0.00 :	  4acd3e:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  4acd42:       89 f0                   mov    %esi,%eax
    0.00 :	  4acd44:       5b                      pop    %rbx
    0.00 :	  4acd45:       41 5c                   pop    %r12
    0.00 :	  4acd47:       41 5d                   pop    %r13
    0.00 :	  4acd49:       41 5e                   pop    %r14
    0.00 :	  4acd4b:       41 5f                   pop    %r15
    0.00 :	  4acd4d:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:468
   16.67 :	  4acd4e:       c3                      retq   
    0.00 :	  4acd4f:       90                      nop
         :	                         * types).  Since it is convenient for callers to think of
         :	                         * _bt_compare as comparing the scankey to the index item, we have
         :	                         * to flip the sign of the comparison result.  (Unless it's a DESC
         :	                         * column, in which case we *don't* flip the sign.)
         :	                         */
         :	                        result = DatumGetInt32(FunctionCall2Coll(&scankey->sk_func,
    0.00 :	  4acd50:       8b 73 0c                mov    0xc(%rbx),%esi
    0.00 :	  4acd53:       48 8b 4b 40             mov    0x40(%rbx),%rcx
    0.00 :	  4acd57:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  4acd5b:       4c 89 c2                mov    %r8,%rdx
    0.00 :	  4acd5e:       e8 cd 12 2d 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  4acd63:       89 c6                   mov    %eax,%esi
         :	                                                                                                         scankey->sk_collation,
         :	                                                                                                         datum,
         :	                                                                                                         scankey->sk_argument));
         :
         :	                        if (!(scankey->sk_flags & SK_BT_DESC))
    0.00 :	  4acd65:       8b 03                   mov    (%rbx),%eax
         :	                                result = -result;
    0.00 :	  4acd67:       89 f2                   mov    %esi,%edx
    0.00 :	  4acd69:       f7 da                   neg    %edx
    0.00 :	  4acd6b:       a9 00 00 00 01          test   $0x1000000,%eax
    0.00 :	  4acd70:       0f 44 f2                cmove  %edx,%esi
         :	                }
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
    0.00 :	  4acd73:       85 f6                   test   %esi,%esi
    0.00 :	  4acd75:       75 c7                   jne    4acd3e <_bt_compare+0xee>
         :	         * We don't test for violation of this condition here, however.  The
         :	         * initial setup for the index scan had better have gotten it right (see
         :	         * _bt_first).
         :	         */
         :
         :	        for (i = 1; i <= keysz; i++)
    0.00 :	  4acd77:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  4acd7b:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  4acd7e:       0f 8c cc 00 00 00       jl     4ace50 <_bt_compare+0x200>
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
         :	                        return result;
         :
         :	                scankey++;
    0.00 :	  4acd84:       48 83 c3 48             add    $0x48,%rbx
         :	        {
         :	                Datum           datum;
         :	                bool            isNull;
         :	                int32           result;
         :
         :	                datum = index_getattr(itup, scankey->sk_attno, itupdesc, &isNull);
    0.00 :	  4acd88:       66 41 83 7c 24 06 00    cmpw   $0x0,0x6(%r12)
    0.00 :	  4acd8f:       0f 89 33 ff ff ff       jns    4accc8 <_bt_compare+0x78>
    0.00 :	  4acd95:       0f bf 73 04             movswl 0x4(%rbx),%esi
    0.00 :	  4acd99:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  4acd9c:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4acda1:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  4acda4:       89 c8                   mov    %ecx,%eax
    0.00 :	  4acda6:       83 e1 07                and    $0x7,%ecx
    0.00 :	  4acda9:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4acdac:       48 98                   cltq   
    0.00 :	  4acdae:       41 0f be 44 04 08       movsbl 0x8(%r12,%rax,1),%eax
    0.00 :	  4acdb4:       d3 f8                   sar    %cl,%eax
    0.00 :	  4acdb6:       a8 01                   test   $0x1,%al
    0.00 :	  4acdb8:       0f 84 62 ff ff ff       je     4acd20 <_bt_compare+0xd0>
    0.00 :	  4acdbe:       4c 89 f2                mov    %r14,%rdx
    0.00 :	  4acdc1:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4acdc4:       e8 97 3d fc ff          callq  470b60 <nocache_index_getattr>
    0.00 :	  4acdc9:       49 89 c0                mov    %rax,%r8
         :
         :	                /* see comments about NULLs handling in btbuild */
         :	                if (scankey->sk_flags & SK_ISNULL)              /* key is NULL */
    0.00 :	  4acdcc:       8b 03                   mov    (%rbx),%eax
         :	        {
         :	                Datum           datum;
         :	                bool            isNull;
         :	                int32           result;
         :
         :	                datum = index_getattr(itup, scankey->sk_attno, itupdesc, &isNull);
    0.00 :	  4acdce:       31 d2                   xor    %edx,%edx
         :
         :	                /* see comments about NULLs handling in btbuild */
         :	                if (scankey->sk_flags & SK_ISNULL)              /* key is NULL */
    0.00 :	  4acdd0:       a8 01                   test   $0x1,%al
    0.00 :	  4acdd2:       0f 85 52 ff ff ff       jne    4acd2a <_bt_compare+0xda>
         :	                        else if (scankey->sk_flags & SK_BT_NULLS_FIRST)
         :	                                result = -1;    /* NULL "<" NOT_NULL */
         :	                        else
         :	                                result = 1;             /* NULL ">" NOT_NULL */
         :	                }
         :	                else if (isNull)                /* key is NOT_NULL and item is NULL */
    0.00 :	  4acdd8:       84 d2                   test   %dl,%dl
    0.00 :	  4acdda:       0f 84 70 ff ff ff       je     4acd50 <_bt_compare+0x100>
         :	                {
         :	                        if (scankey->sk_flags & SK_BT_NULLS_FIRST)
    0.00 :	  4acde0:       a9 00 00 00 02          test   $0x2000000,%eax
    0.00 :	  4acde5:       0f 84 4e ff ff ff       je     4acd39 <_bt_compare+0xe9>
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
         :	                        return result;
         :
         :	                scankey++;
    0.00 :	  4acdeb:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  4acdf0:       e9 49 ff ff ff          jmpq   4acd3e <_bt_compare+0xee>
    0.00 :	  4acdf5:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                Datum           datum;
         :	                bool            isNull;
         :	                int32           result;
         :
         :	                datum = index_getattr(itup, scankey->sk_attno, itupdesc, &isNull);
    0.00 :	  4acdf8:       48 98                   cltq   
    0.00 :	  4acdfa:       31 d2                   xor    %edx,%edx
    0.00 :	  4acdfc:       4d 8d 44 04 08          lea    0x8(%r12,%rax,1),%r8
    0.00 :	  4ace01:       e9 1a ff ff ff          jmpq   4acd20 <_bt_compare+0xd0>
    0.00 :	  4ace06:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ace0d:       00 00 00 
    0.00 :	  4ace10:       0f bf f1                movswl %cx,%esi
    0.00 :	  4ace13:       eb a9                   jmp    4acdbe <_bt_compare+0x16e>
    0.00 :	  4ace15:       0f 1f 00                nopl   (%rax)
    0.00 :	  4ace18:       48 98                   cltq   
    0.00 :	  4ace1a:       31 d2                   xor    %edx,%edx
    0.00 :	  4ace1c:       4d 8b 44 04 08          mov    0x8(%r12,%rax,1),%r8
    0.00 :	  4ace21:       e9 fa fe ff ff          jmpq   4acd20 <_bt_compare+0xd0>
    0.00 :	  4ace26:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ace2d:       00 00 00 
    0.00 :	  4ace30:       48 98                   cltq   
    0.00 :	  4ace32:       31 d2                   xor    %edx,%edx
    0.00 :	  4ace34:       45 8b 44 04 08          mov    0x8(%r12,%rax,1),%r8d
    0.00 :	  4ace39:       e9 e2 fe ff ff          jmpq   4acd20 <_bt_compare+0xd0>
    0.00 :	  4ace3e:       66 90                   xchg   %ax,%ax
    0.00 :	  4ace40:       48 98                   cltq   
    0.00 :	  4ace42:       31 d2                   xor    %edx,%edx
    0.00 :	  4ace44:       45 0f b7 44 04 08       movzwl 0x8(%r12,%rax,1),%r8d
    0.00 :	  4ace4a:       e9 d1 fe ff ff          jmpq   4acd20 <_bt_compare+0xd0>
    0.00 :	  4ace4f:       90                      nop
         :
         :	                /* if the keys are unequal, return the difference */
         :	                if (result != 0)
         :	                        return result;
         :
         :	                scankey++;
    0.00 :	  4ace50:       31 f6                   xor    %esi,%esi
    0.00 :	  4ace52:       e9 e7 fe ff ff          jmpq   4acd3e <_bt_compare+0xee>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:87
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:91
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673de0 <BufTableLookup>:
         :	 * BufTableLookup
         :	 *              Lookup the given BufferTag; return buffer ID, or -1 if not found
         :	 */
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   16.67 :	  673de0:       55                      push   %rbp
    0.00 :	  673de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  673de4:       48 83 ec 20             sub    $0x20,%rsp
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673de8:       48 8b 07                mov    (%rdi),%rax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673deb:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673def:       48 89 45 e0             mov    %rax,-0x20(%rbp)
    0.00 :	  673df3:       48 8b 47 08             mov    0x8(%rdi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   50.00 :	  673df7:       48 89 45 e8             mov    %rax,-0x18(%rbp)
    0.00 :	  673dfb:       8b 47 10                mov    0x10(%rdi),%eax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673dfe:       48 8b 3d 53 92 50 00    mov    0x509253(%rip),%rdi        # b7d058 <SharedBufHash>
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673e05:       89 45 f0                mov    %eax,-0x10(%rbp)
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673e08:       e8 e3 f4 10 00          callq  7832f0 <CHashSearch>
    0.00 :	  673e0d:       89 c2                   mov    %eax,%edx
    0.00 :	  673e0f:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  673e14:       84 d2                   test   %dl,%dl
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:87
   16.67 :	  673e16:       0f 45 45 f4             cmovne -0xc(%rbp),%eax
         :	                return -1;
         :
         :	        return ent.id;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:91
   16.67 :	  673e1a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:848
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:773
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784050 <hash_search_with_hash_value>:
         :	hash_search_with_hash_value(HTAB *hashp,
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
    0.00 :	  784050:       55                      push   %rbp
    0.00 :	  784051:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  784054:       41 57                   push   %r15
    0.00 :	  784056:       41 89 d7                mov    %edx,%r15d
    0.00 :	  784059:       41 56                   push   %r14
    0.00 :	  78405b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  78405e:       41 55                   push   %r13
    0.00 :	  784060:       41 54                   push   %r12
    0.00 :	  784062:       53                      push   %rbx
    0.00 :	  784063:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  784067:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  78406d:       48 89 75 80             mov    %rsi,-0x80(%rbp)
    0.00 :	  784071:       4c 89 85 70 ff ff ff    mov    %r8,-0x90(%rbp)
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784078:       48 8b 07                mov    (%rdi),%rax
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  78407b:       83 f9 03                cmp    $0x3,%ecx
    0.00 :	  78407e:       0f 94 45 8f             sete   -0x71(%rbp)
    0.00 :	  784082:       83 e9 01                sub    $0x1,%ecx
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784085:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  784089:       0f 84 d9 00 00 00       je     784168 <hash_search_with_hash_value+0x118>
    0.00 :	  78408f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:848
   16.67 :	  784093:       0f 85 cf 00 00 00       jne    784168 <hash_search_with_hash_value+0x118>
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
         :	        *newlink = NULL;
    0.00 :	  784099:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78409c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  7840a0:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7840a4:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
   16.67 :	  7840a8:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  7840ac:       44 89 fb                mov    %r15d,%ebx
    0.00 :	  7840af:       23 5a 2c                and    0x2c(%rdx),%ebx
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7840b2:       39 f3                   cmp    %esi,%ebx
    0.00 :	  7840b4:       76 03                   jbe    7840b9 <hash_search_with_hash_value+0x69>
         :	                bucket = bucket & hctl->low_mask;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:773
   16.67 :	  7840b6:       23 5a 30                and    0x30(%rdx),%ebx
         :	        bucket = calc_bucket(hctl, hashvalue);
         :
         :	        segment_num = bucket >> hashp->sshift;
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
    0.00 :	  7840b9:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840bb:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	  7840bf:       d3 e8                   shr    %cl,%eax
    0.00 :	  7840c1:       89 c0                   mov    %eax,%eax
    0.00 :	  7840c3:       4c 8b 24 c2             mov    (%rdx,%rax,8),%r12
         :
         :	        if (segp == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
   16.67 :	  7840c7:       4d 85 e4                test   %r12,%r12
    0.00 :	  7840ca:       0f 84 b7 02 00 00       je     784387 <hash_search_with_hash_value+0x337>
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840d2:       44 21 e8                and    %r13d,%eax
         :	        currBucket = *prevBucketPtr;
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
    0.00 :	  7840d5:       4d 8b 6e 18             mov    0x18(%r14),%r13
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d9:       4d 8d 24 c4             lea    (%r12,%rax,8),%r12
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
    0.00 :	  7840dd:       49 8b 46 48             mov    0x48(%r14),%rax
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
         :	        currBucket = *prevBucketPtr;
    0.00 :	  7840e1:       49 8b 1c 24             mov    (%r12),%rbx
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
   16.67 :	  7840e5:       48 89 45 98             mov    %rax,-0x68(%rbp)
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840e9:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840ec:       75 0d                   jne    7840fb <hash_search_with_hash_value+0xab>
    0.00 :	  7840ee:       eb 28                   jmp    784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
         :	                        match(ELEMENTKEY(currBucket), keyPtr, keysize) == 0)
         :	                        break;
         :	                prevBucketPtr = &(currBucket->link);
    0.00 :	  7840f0:       49 89 dc                mov    %rbx,%r12
         :	                currBucket = *prevBucketPtr;
    0.00 :	  7840f3:       48 8b 1b                mov    (%rbx),%rbx
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840f6:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840f9:       74 1d                   je     784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
    0.00 :	  7840fb:       44 39 7b 08             cmp    %r15d,0x8(%rbx)
    0.00 :	  7840ff:       90                      nop
    0.00 :	  784100:       75 ee                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784102:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  784106:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  78410a:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78410e:       41 ff d5                callq  *%r13
    0.00 :	  784111:       85 c0                   test   %eax,%eax
    0.00 :	  784113:       75 db                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784115:       0f 1f 00                nopl   (%rax)
         :	                hash_collisions++;
         :	                hctl->collisions++;
         :	#endif
         :	        }
         :
         :	        if (foundPtr)
    0.00 :	  784118:       48 83 bd 70 ff ff ff    cmpq   $0x0,-0x90(%rbp)
    0.00 :	  78411f:       00 
    0.00 :	  784120:       74 0d                   je     78412f <hash_search_with_hash_value+0xdf>
         :	                *foundPtr = (bool) (currBucket != NULL);
    0.00 :	  784122:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  784129:       48 85 db                test   %rbx,%rbx
    0.00 :	  78412c:       0f 95 02                setne  (%rdx)
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  78412f:       83 bd 7c ff ff ff 01    cmpl   $0x1,-0x84(%rbp)
    0.00 :	  784136:       0f 84 5c 01 00 00       je     784298 <hash_search_with_hash_value+0x248>
    0.00 :	  78413c:       0f 83 ee 00 00 00       jae    784230 <hash_search_with_hash_value+0x1e0>
         :	        {
         :	                case HASH_FIND:
         :	                        if (currBucket != NULL)
    0.00 :	  784142:       48 85 db                test   %rbx,%rbx
    0.00 :	  784145:       0f 84 35 02 00 00       je     784380 <hash_search_with_hash_value+0x330>
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
    0.00 :	  78414b:       48 83 c3 10             add    $0x10,%rbx
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  78414f:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  784153:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784156:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
   16.67 :	  784157:       41 5c                   pop    %r12
    0.00 :	  784159:       41 5d                   pop    %r13
    0.00 :	  78415b:       41 5e                   pop    %r14
    0.00 :	  78415d:       41 5f                   pop    %r15
    0.00 :	  78415f:       c9                      leaveq 
    0.00 :	  784160:       c3                      retq   
    0.00 :	  784161:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784168:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78416c:       48 83 7a 48 00          cmpq   $0x0,0x48(%rdx)
    0.00 :	  784171:       0f 85 09 01 00 00       jne    784280 <hash_search_with_hash_value+0x230>
    0.00 :	  784177:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  78417c:       0f 85 e6 01 00 00       jne    784368 <hash_search_with_hash_value+0x318>
    0.00 :	  784182:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784186:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78418a:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78418d:       8d 56 01                lea    0x1(%rsi),%edx
    0.00 :	  784190:       41 89 f0                mov    %esi,%r8d
    0.00 :	  784193:       89 55 d4                mov    %edx,-0x2c(%rbp)
    0.00 :	  784196:       41 89 d4                mov    %edx,%r12d
    0.00 :	  784199:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	  78419d:       48 89 d0                mov    %rdx,%rax
    0.00 :	  7841a0:       48 c1 fa 3f             sar    $0x3f,%rdx
    0.00 :	  7841a4:       49 f7 fc                idiv   %r12
    0.00 :	  7841a7:       48 3b 43 50             cmp    0x50(%rbx),%rax
    0.00 :	  7841ab:       0f 8c eb fe ff ff       jl     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841b1:       8b 3d 09 5a 43 00       mov    0x435a09(%rip),%edi        # bb9bc0 <num_seq_scans>
    0.00 :	  7841b7:       85 ff                   test   %edi,%edi
    0.00 :	  7841b9:       7e 2c                   jle    7841e7 <hash_search_with_hash_value+0x197>
         :	        {
         :	                if (seq_scan_tables[i] == hashp)
    0.00 :	  7841bb:       31 d2                   xor    %edx,%edx
    0.00 :	  7841bd:       4c 3b 35 1c 5a 43 00    cmp    0x435a1c(%rip),%r14        # bb9be0 <seq_scan_tables>
    0.00 :	  7841c4:       b9 e8 9b bb 00          mov    $0xbb9be8,%ecx
    0.00 :	  7841c9:       75 15                   jne    7841e0 <hash_search_with_hash_value+0x190>
    0.00 :	  7841cb:       e9 cc fe ff ff          jmpq   78409c <hash_search_with_hash_value+0x4c>
    0.00 :	  7841d0:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  7841d3:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  7841d7:       49 39 c6                cmp    %rax,%r14
    0.00 :	  7841da:       0f 84 bc fe ff ff       je     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841e0:       83 c2 01                add    $0x1,%edx
    0.00 :	  7841e3:       39 fa                   cmp    %edi,%edx
    0.00 :	  7841e5:       7c e9                   jl     7841d0 <hash_search_with_hash_value+0x180>
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841e7:       49 8b 46 50             mov    0x50(%r14),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841eb:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7841ef:       4c 89 e3                mov    %r12,%rbx
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841f2:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  7841f6:       48 8b 45 90             mov    -0x70(%rbp),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841fa:       48 d3 fb                sar    %cl,%rbx
    0.00 :	  7841fd:       48 89 5d c0             mov    %rbx,-0x40(%rbp)
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784201:       48 3b 58 20             cmp    0x20(%rax),%rbx
    0.00 :	  784205:       0f 8c 05 02 00 00       jl     784410 <hash_search_with_hash_value+0x3c0>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
    0.00 :	  78420b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  78420f:       48 8b 58 18             mov    0x18(%rax),%rbx
    0.00 :	  784213:       48 39 5d c0             cmp    %rbx,-0x40(%rbp)
    0.00 :	  784217:       0f 8c 1d 03 00 00       jl     78453a <hash_search_with_hash_value+0x4ea>
         :	        HASHSEGMENT *old_p;
         :	        long            new_dsize;
         :	        long            old_dirsize;
         :	        long            new_dirsize;
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
    0.00 :	  78421d:       48 83 78 58 ff          cmpq   $0xffffffffffffffff,0x58(%rax)
    0.00 :	  784222:       0f 84 4a 03 00 00       je     784572 <hash_search_with_hash_value+0x522>
         :	                hashp->dir = p;
         :	                hashp->hctl->dsize = new_dsize;
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784228:       44 89 c6                mov    %r8d,%esi
    0.00 :	  78422b:       e9 78 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                *foundPtr = (bool) (currBucket != NULL);
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  784230:       83 bd 7c ff ff ff 02    cmpl   $0x2,-0x84(%rbp)
    0.00 :	  784237:       0f 84 d6 00 00 00       je     784313 <hash_search_with_hash_value+0x2c3>
    0.00 :	  78423d:       83 bd 7c ff ff ff 03    cmpl   $0x3,-0x84(%rbp)
    0.00 :	  784244:       74 52                   je     784298 <hash_search_with_hash_value+0x248>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784246:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  78424b:       be df 03 00 00          mov    $0x3df,%esi
    0.00 :	  784250:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  784255:       e8 c6 71 ff ff          callq  77b420 <elog_start>
    0.00 :	  78425a:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  784260:       be f0 5a 8d 00          mov    $0x8d5af0,%esi
    0.00 :	  784265:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78426a:       31 c0                   xor    %eax,%eax
    0.00 :	  78426c:       e8 bf 6f ff ff          callq  77b230 <elog_finish>
    0.00 :	  784271:       e8 5a 52 ce ff          callq  4694d0 <abort@plt>
    0.00 :	  784276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78427d:       00 00 00 
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784280:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784284:       8b 72 28                mov    0x28(%rdx),%esi
    0.00 :	  784287:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  78428b:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78428f:       e9 14 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
    0.00 :	  784294:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        Assert(hashp->alloc != DynaHashAlloc);
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
    0.00 :	  784298:       48 85 db                test   %rbx,%rbx
    0.00 :	  78429b:       0f 85 aa fe ff ff       jne    78414b <hash_search_with_hash_value+0xfb>
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
    0.00 :	  7842a1:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  7842a6:       0f 85 a3 03 00 00       jne    78464f <hash_search_with_hash_value+0x5ff>
         :	 */
         :	static HASHBUCKET
         :	get_hash_entry(HTAB *hashp)
         :	{
         :	        /* use volatile pointer to prevent code rearrangement */
         :	        volatile HASHHDR *hctlv = hashp->hctl;
    0.00 :	  7842ac:       49 8b 1e                mov    (%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  7842af:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  7842b5:       eb 35                   jmp    7842ec <hash_search_with_hash_value+0x29c>
    0.00 :	  7842b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7842be:       00 00 
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
         :	                        SpinLockAcquire(&hctlv->mutex);
         :
         :	                /* try to get an entry from the freelist */
         :	                newElement = hctlv->freeList;
    0.00 :	  7842c0:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                if (newElement != NULL)
    0.00 :	  7842c4:       48 85 d2                test   %rdx,%rdx
    0.00 :	  7842c7:       0f 85 04 02 00 00       jne    7844d1 <hash_search_with_hash_value+0x481>
         :	                        break;
         :
         :	                /* no free elements.  allocate another chunk of buckets */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842cd:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842d1:       48 85 c0                test   %rax,%rax
    0.00 :	  7842d4:       74 03                   je     7842d9 <hash_search_with_hash_value+0x289>
         :	                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  7842d6:       c6 03 00                movb   $0x0,(%rbx)
         :
         :	                if (!element_alloc(hashp, hctlv->nelem_alloc))
    0.00 :	  7842d9:       8b 73 6c                mov    0x6c(%rbx),%esi
    0.00 :	  7842dc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  7842df:       e8 dc fb ff ff          callq  783ec0 <element_alloc>
    0.00 :	  7842e4:       84 c0                   test   %al,%al
    0.00 :	  7842e6:       0f 84 be 00 00 00       je     7843aa <hash_search_with_hash_value+0x35a>
         :	        HASHBUCKET      newElement;
         :
         :	        for (;;)
         :	        {
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842ec:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842f0:       48 85 c0                test   %rax,%rax
    0.00 :	  7842f3:       74 cb                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842f5:       44 89 e8                mov    %r13d,%eax
    0.00 :	  7842f8:       f0 86 03                lock xchg %al,(%rbx)
         :	                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  7842fb:       84 c0                   test   %al,%al
    0.00 :	  7842fd:       74 c1                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842ff:       ba 87 04 00 00          mov    $0x487,%edx
    0.00 :	  784304:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  784309:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78430c:       e8 2f bd f0 ff          callq  690040 <s_lock>
    0.00 :	  784311:       eb ad                   jmp    7842c0 <hash_search_with_hash_value+0x270>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :	                        return NULL;
         :
         :	                case HASH_REMOVE:
         :	                        if (currBucket != NULL)
    0.00 :	  784313:       48 85 db                test   %rbx,%rbx
    0.00 :	  784316:       74 68                   je     784380 <hash_search_with_hash_value+0x330>
         :	                        {
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784318:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78431c:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784320:       48 85 c0                test   %rax,%rax
    0.00 :	  784323:       74 0c                   je     784331 <hash_search_with_hash_value+0x2e1>
    0.00 :	  784325:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  78432a:       f0 86 02                lock xchg %al,(%rdx)
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  78432d:       84 c0                   test   %al,%al
    0.00 :	  78432f:       75 64                   jne    784395 <hash_search_with_hash_value+0x345>
         :
         :	                                Assert(hctlv->nentries > 0);
         :	                                hctlv->nentries--;
    0.00 :	  784331:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784335:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  784339:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78433d:       48 89 42 08             mov    %rax,0x8(%rdx)
         :
         :	                                /* remove record from hash bucket's chain. */
         :	                                *prevBucketPtr = currBucket->link;
    0.00 :	  784341:       48 8b 03                mov    (%rbx),%rax
    0.00 :	  784344:       49 89 04 24             mov    %rax,(%r12)
         :
         :	                                /* add the record to the freelist for this table.  */
         :	                                currBucket->link = hctlv->freeList;
    0.00 :	  784348:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	  78434c:       48 89 03                mov    %rax,(%rbx)
         :	                                hctlv->freeList = currBucket;
    0.00 :	  78434f:       48 89 5a 10             mov    %rbx,0x10(%rdx)
         :
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784353:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784357:       48 85 c0                test   %rax,%rax
    0.00 :	  78435a:       0f 84 eb fd ff ff       je     78414b <hash_search_with_hash_value+0xfb>
         :	                                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  784360:       c6 02 00                movb   $0x0,(%rdx)
    0.00 :	  784363:       e9 e3 fd ff ff          jmpq   78414b <hash_search_with_hash_value+0xfb>
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784368:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78436c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784370:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784374:       8b 73 28                mov    0x28(%rbx),%esi
    0.00 :	  784377:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78437b:       e9 28 fd ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784380:       31 db                   xor    %ebx,%ebx
    0.00 :	  784382:       e9 c8 fd ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
    0.00 :	  784387:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  78438a:       e8 01 f8 ff ff          callq  783b90 <hash_corrupted>
    0.00 :	  78438f:       90                      nop
    0.00 :	  784390:       e9 3b fd ff ff          jmpq   7840d0 <hash_search_with_hash_value+0x80>
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  784395:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  784399:       ba 95 03 00 00          mov    $0x395,%edx
    0.00 :	  78439e:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843a3:       e8 98 bc f0 ff          callq  690040 <s_lock>
    0.00 :	  7843a8:       eb 87                   jmp    784331 <hash_search_with_hash_value+0x2e1>
         :
         :	                        currBucket = get_hash_entry(hashp);
         :	                        if (currBucket == NULL)
         :	                        {
         :	                                /* out of memory */
         :	                                if (action == HASH_ENTER_NULL)
    0.00 :	  7843aa:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  7843ae:       75 d0                   jne    784380 <hash_search_with_hash_value+0x330>
         :	                                        return NULL;
         :	                                /* report a generic message */
         :	                                if (hashp->isshared)
    0.00 :	  7843b0:       41 80 7e 40 00          cmpb   $0x0,0x40(%r14)
    0.00 :	  7843b5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7843b8:       0f 84 4a 02 00 00       je     784608 <hash_search_with_hash_value+0x5b8>
         :	                                        ereport(ERROR,
    0.00 :	  7843be:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  7843c1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  7843c6:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  7843cb:       ba c6 03 00 00          mov    $0x3c6,%edx
    0.00 :	  7843d0:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843d5:       e8 e6 66 ff ff          callq  77aac0 <errstart>
    0.00 :	  7843da:       84 c0                   test   %al,%al
    0.00 :	  7843dc:       bf 47 ba 8a 00          mov    $0x8aba47,%edi
    0.00 :	  7843e1:       0f 84 8a fe ff ff       je     784271 <hash_search_with_hash_value+0x221>
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  7843e7:       31 c0                   xor    %eax,%eax
    0.00 :	  7843e9:       e8 b2 84 ff ff          callq  77c8a0 <errmsg>
    0.00 :	  7843ee:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  7843f3:       89 c3                   mov    %eax,%ebx
    0.00 :	  7843f5:       e8 56 89 ff ff          callq  77cd50 <errcode>
    0.00 :	  7843fa:       89 de                   mov    %ebx,%esi
    0.00 :	  7843fc:       89 c7                   mov    %eax,%edi
    0.00 :	  7843fe:       31 c0                   xor    %eax,%eax
    0.00 :	  784400:       e8 db 61 ff ff          callq  77a5e0 <errfinish>
    0.00 :	  784405:       e9 67 fe ff ff          jmpq   784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78440a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784410:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  784413:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784417:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  78441b:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  78441f:       4d 89 e1                mov    %r12,%r9
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  784422:       89 43 28                mov    %eax,0x28(%rbx)
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  784425:       8b 43 30                mov    0x30(%rbx),%eax
    0.00 :	  784428:       49 21 c1                and    %rax,%r9
         :
         :	        /*
         :	         * If we crossed a power of 2, readjust masks.
         :	         */
         :	        if ((uint32) new_bucket > hctl->high_mask)
    0.00 :	  78442b:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  78442e:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  784431:       76 0c                   jbe    78443f <hash_search_with_hash_value+0x3ef>
         :	        {
         :	                hctl->low_mask = hctl->high_mask;
    0.00 :	  784433:       89 43 30                mov    %eax,0x30(%rbx)
         :	                hctl->high_mask = (uint32) new_bucket | hctl->low_mask;
    0.00 :	  784436:       09 45 d4                or     %eax,-0x2c(%rbp)
    0.00 :	  784439:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  78443c:       89 43 2c                mov    %eax,0x2c(%rbx)
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  78443f:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784443:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784447:       4c 89 ca                mov    %r9,%rdx
         :	         * that might not be true!
         :	         */
         :	        old_segnum = old_bucket >> hashp->sshift;
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
    0.00 :	  78444a:       49 8b 76 08             mov    0x8(%r14),%rsi
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78444e:       4d 21 ec                and    %r13,%r12
    0.00 :	  784451:       4a 8d 3c e5 00 00 00    lea    0x0(,%r12,8),%rdi
    0.00 :	  784458:       00 
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  784459:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78445d:       48 d3 fa                sar    %cl,%rdx
    0.00 :	  784460:       4c 21 c8                and    %r9,%rax
    0.00 :	  784463:       4c 8d 04 c5 00 00 00    lea    0x0(,%rax,8),%r8
    0.00 :	  78446a:       00 
    0.00 :	  78446b:       4c 03 04 d6             add    (%rsi,%rdx,8),%r8
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78446f:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  784473:       48 03 3c 16             add    (%rsi,%rdx,1),%rdi
         :
         :	        for (currElement = *oldlink;
    0.00 :	  784477:       49 8b 10                mov    (%r8),%rdx
         :	                 currElement != NULL;
    0.00 :	  78447a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  78447d:       75 17                   jne    784496 <hash_search_with_hash_value+0x446>
    0.00 :	  78447f:       eb 39                   jmp    7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784481:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        *oldlink = currElement;
         :	                        oldlink = &currElement->link;
         :	                }
         :	                else
         :	                {
         :	                        *newlink = currElement;
    0.00 :	  784488:       48 89 17                mov    %rdx,(%rdi)
         :	                        newlink = &currElement->link;
    0.00 :	  78448b:       48 89 d7                mov    %rdx,%rdi
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
    0.00 :	  78448e:       48 85 c9                test   %rcx,%rcx
    0.00 :	  784491:       74 27                   je     7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784493:       48 89 ca                mov    %rcx,%rdx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  784496:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
    0.00 :	  78449a:       48 8b 0a                mov    (%rdx),%rcx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  78449d:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  7844a0:       23 42 08                and    0x8(%rdx),%eax
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7844a3:       3b 43 28                cmp    0x28(%rbx),%eax
    0.00 :	  7844a6:       76 03                   jbe    7844ab <hash_search_with_hash_value+0x45b>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7844a8:       23 43 30                and    0x30(%rbx),%eax
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
         :	                if ((long) calc_bucket(hctl, currElement->hashvalue) == old_bucket)
    0.00 :	  7844ab:       89 c0                   mov    %eax,%eax
    0.00 :	  7844ad:       49 39 c1                cmp    %rax,%r9
    0.00 :	  7844b0:       75 d6                   jne    784488 <hash_search_with_hash_value+0x438>
         :	                {
         :	                        *oldlink = currElement;
    0.00 :	  7844b2:       49 89 10                mov    %rdx,(%r8)
         :	                        oldlink = &currElement->link;
    0.00 :	  7844b5:       49 89 d0                mov    %rdx,%r8
    0.00 :	  7844b8:       eb d4                   jmp    78448e <hash_search_with_hash_value+0x43e>
         :	                        *newlink = currElement;
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
    0.00 :	  7844ba:       49 c7 00 00 00 00 00    movq   $0x0,(%r8)
         :	        *newlink = NULL;
    0.00 :	  7844c1:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7844c8:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  7844cc:       e9 c8 fb ff ff          jmpq   784099 <hash_search_with_hash_value+0x49>
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* remove entry from freelist, bump nentries */
         :	        hctlv->freeList = newElement->link;
    0.00 :	  7844d1:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  7844d4:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        hctlv->nentries++;
    0.00 :	  7844d8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7844dc:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  7844e0:       48 89 43 08             mov    %rax,0x8(%rbx)
         :
         :	        if (IS_PARTITIONED(hctlv))
    0.00 :	  7844e4:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7844e8:       48 85 c0                test   %rax,%rax
    0.00 :	  7844eb:       74 03                   je     7844f0 <hash_search_with_hash_value+0x4a0>
         :	                SpinLockRelease(&hctlv->mutex);
    0.00 :	  7844ed:       c6 03 00                movb   $0x0,(%rbx)
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  7844f0:       48 8d 5a 10             lea    0x10(%rdx),%rbx
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
    0.00 :	  7844f4:       49 89 14 24             mov    %rdx,(%r12)
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
    0.00 :	  7844f8:       44 89 7a 08             mov    %r15d,0x8(%rdx)
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
    0.00 :	  7844fc:       48 c7 02 00 00 00 00    movq   $0x0,(%rdx)
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  784503:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  784507:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78450b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78450e:       41 ff 56 20             callq  *0x20(%r14)
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  784512:       e9 38 fc ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  784517:       31 f6                   xor    %esi,%esi
    0.00 :	  784519:       e8 02 4f ce ff          callq  469420 <memset@plt>
         :	                hashp->dir = p;
    0.00 :	  78451e:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  784522:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
         :	                hashp->dir = p;
    0.00 :	  784526:       49 89 46 08             mov    %rax,0x8(%r14)
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  78452a:       49 8b 06                mov    (%r14),%rax
    0.00 :	  78452d:       48 89 50 18             mov    %rdx,0x18(%rax)
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784531:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  784535:       e8 46 46 01 00          callq  798b80 <pfree>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78453a:       48 8b 5d c0             mov    -0x40(%rbp),%rbx
    0.00 :	  78453e:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  784541:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784545:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
    0.00 :	  784549:       49 03 5e 08             add    0x8(%r14),%rbx
    0.00 :	  78454d:       e8 7e fa ff ff          callq  783fd0 <seg_alloc>
    0.00 :	  784552:       48 85 c0                test   %rax,%rax
    0.00 :	  784555:       48 89 03                mov    %rax,(%rbx)
    0.00 :	  784558:       0f 84 1f 01 00 00       je     78467d <hash_search_with_hash_value+0x62d>
         :	                        return false;
         :	                hctl->nsegs++;
    0.00 :	  78455e:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784562:       8b 42 28                mov    0x28(%rdx),%eax
    0.00 :	  784565:       48 83 42 20 01          addq   $0x1,0x20(%rdx)
    0.00 :	  78456a:       83 c0 01                add    $0x1,%eax
    0.00 :	  78456d:       e9 a9 fe ff ff          jmpq   78441b <hash_search_with_hash_value+0x3cb>
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784572:       48 8d 14 1b             lea    (%rbx,%rbx,1),%rdx
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
    0.00 :	  784576:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784579:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  78457d:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784581:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784585:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784589:       49 8b 56 08             mov    0x8(%r14),%rdx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78458d:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784591:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784595:       48 89 05 2c 56 43 00    mov    %rax,0x43562c(%rip)        # bb9bc8 <CurrentDynaHashCxt>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78459c:       41 ff 56 28             callq  *0x28(%r14)
         :
         :	        if (p != NULL)
    0.00 :	  7845a0:       48 85 c0                test   %rax,%rax
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  7845a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        if (p != NULL)
    0.00 :	  7845a7:       0f 84 89 00 00 00       je     784636 <hash_search_with_hash_value+0x5e6>
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845ad:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845b1:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
    0.00 :	  7845b5:       48 c1 e3 03             shl    $0x3,%rbx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845b9:       48 89 da                mov    %rbx,%rdx
    0.00 :	  7845bc:       e8 2f 56 ce ff          callq  469bf0 <memcpy@plt>
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  7845c1:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845c5:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  7845c9:       48 01 df                add    %rbx,%rdi
    0.00 :	  7845cc:       48 29 da                sub    %rbx,%rdx
    0.00 :	  7845cf:       40 f6 c7 07             test   $0x7,%dil
    0.00 :	  7845d3:       0f 85 3e ff ff ff       jne    784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845d9:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  7845e0:       0f 87 31 ff ff ff       ja     784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845e6:       48 8d 04 17             lea    (%rdi,%rdx,1),%rax
    0.00 :	  7845ea:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  7845ed:       0f 83 2b ff ff ff       jae    78451e <hash_search_with_hash_value+0x4ce>
    0.00 :	  7845f3:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7845fa:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	  7845fe:       48 39 f8                cmp    %rdi,%rax
    0.00 :	  784601:       77 f0                   ja     7845f3 <hash_search_with_hash_value+0x5a3>
    0.00 :	  784603:       e9 16 ff ff ff          jmpq   78451e <hash_search_with_hash_value+0x4ce>
         :	                                if (hashp->isshared)
         :	                                        ereport(ERROR,
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  784608:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  78460b:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  784610:       ba ca 03 00 00          mov    $0x3ca,%edx
    0.00 :	  784615:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  78461a:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78461f:       e8 9c 64 ff ff          callq  77aac0 <errstart>
    0.00 :	  784624:       84 c0                   test   %al,%al
    0.00 :	  784626:       0f 84 45 fc ff ff       je     784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78462c:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  784631:       e9 b1 fd ff ff          jmpq   7843e7 <hash_search_with_hash_value+0x397>
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
    0.00 :	  784636:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78463a:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78463e:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784642:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784646:       44 8b 43 28             mov    0x28(%rbx),%r8d
    0.00 :	  78464a:       e9 d9 fb ff ff          jmpq   784228 <hash_search_with_hash_value+0x1d8>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
         :	                                elog(ERROR, "cannot insert into frozen hashtable \"%s\"",
    0.00 :	  78464f:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  784654:       be ba 03 00 00          mov    $0x3ba,%esi
    0.00 :	  784659:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  78465e:       e8 bd 6d ff ff          callq  77b420 <elog_start>
    0.00 :	  784663:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  784667:       be c0 5a 8d 00          mov    $0x8d5ac0,%esi
    0.00 :	  78466c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  784671:       31 c0                   xor    %eax,%eax
    0.00 :	  784673:       e8 b8 6b ff ff          callq  77b230 <elog_finish>
    0.00 :	  784678:       e8 53 4e ce ff          callq  4694d0 <abort@plt>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78467d:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784681:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784685:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  784688:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78468c:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784690:       e9 13 fa ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   60.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b16a0 <ExecEvalScalarVarFast>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5b16a0:       55                      push   %rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16a1:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Var                *variable = (Var *) exprstate->expr;
    0.00 :	  5b16a4:       4c 8b 47 08             mov    0x8(%rdi),%r8
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5b16a8:       48 89 e5                mov    %rsp,%rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16ab:       74 06                   je     5b16b3 <ExecEvalScalarVarFast+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b16ad:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
    0.00 :	  5b16b3:       41 8b 40 04             mov    0x4(%r8),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   60.00 :	  5b16b7:       3d e8 fd 00 00          cmp    $0xfde8,%eax
    0.00 :	  5b16bc:       74 1a                   je     5b16d8 <ExecEvalScalarVarFast+0x38>
    0.00 :	  5b16be:       3d e9 fd 00 00          cmp    $0xfde9,%eax
    0.00 :	  5b16c3:       74 2b                   je     5b16f0 <ExecEvalScalarVarFast+0x50>
         :
         :	                        /* INDEX_VAR is handled by default case */
         :
         :	                default:                                /* get the tuple from the relation being
         :	                                                                 * scanned */
         :	                        slot = econtext->ecxt_scantuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
   40.00 :	  5b16c5:       48 8b 7e 08             mov    0x8(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16c9:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16ce:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16cf:       e9 2c dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16d4:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
         :	        {
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
    0.00 :	  5b16d8:       48 8b 7e 10             mov    0x10(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16dc:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16e1:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16e2:       e9 19 dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b16ee:       00 00 
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
         :	                        break;
         :
         :	                case OUTER_VAR: /* get the tuple from the outer node */
         :	                        slot = econtext->ecxt_outertuple;
    0.00 :	  5b16f0:       48 8b 7e 18             mov    0x18(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16f4:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16f9:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16fa:       e9 01 dd eb ff          jmpq   46f400 <slot_getattr>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004bffe0 <TransactionIdPrecedes>:
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
    0.00 :	  4bffe0:       55                      push   %rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   75.00 :	  4bffe1:       83 ff 02                cmp    $0x2,%edi
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
    0.00 :	  4bffe4:       48 89 e5                mov    %rsp,%rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
   25.00 :	  4bffe7:       76 17                   jbe    4c0000 <TransactionIdPrecedes+0x20>
    0.00 :	  4bffe9:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  4bffec:       76 12                   jbe    4c0000 <TransactionIdPrecedes+0x20>
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
    0.00 :	  4bffee:       29 f7                   sub    %esi,%edi
         :	}
    0.00 :	  4bfff0:       c9                      leaveq 
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
    0.00 :	  4bfff1:       89 f8                   mov    %edi,%eax
    0.00 :	  4bfff3:       c1 e8 1f                shr    $0x1f,%eax
         :	}
    0.00 :	  4bfff6:       c3                      retq   
    0.00 :	  4bfff7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4bfffe:       00 00 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0000:       39 f7                   cmp    %esi,%edi
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
         :	}
    0.00 :	  4c0002:       c9                      leaveq 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0003:       0f 92 c0                setb   %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005aca20 <ExecEvalConst>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   50.00 :	  5aca20:       55                      push   %rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
    0.00 :	  5aca21:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Const      *con = (Const *) exprstate->expr;
    0.00 :	  5aca24:       48 8b 77 08             mov    0x8(%rdi),%rsi
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5aca28:       48 89 e5                mov    %rsp,%rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
    0.00 :	  5aca2b:       74 06                   je     5aca33 <ExecEvalConst+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5aca2d:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        *isNull = con->constisnull;
    0.00 :	  5aca33:       0f b6 46 20             movzbl 0x20(%rsi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   25.00 :	  5aca37:       88 02                   mov    %al,(%rdx)
    0.00 :	  5aca39:       48 8b 46 18             mov    0x18(%rsi),%rax
         :	        return con->constvalue;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
   25.00 :	  5aca3d:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:140
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7bd0 <InstrStopNode>:
         :	}
         :
         :	/* Exit from a plan node */
         :	void
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
    0.00 :	  5b7bd0:       55                      push   %rbp
    0.00 :	  5b7bd1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7bd4:       53                      push   %rbx
    0.00 :	  5b7bd5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7bd8:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
    0.00 :	  5b7bdc:       80 3f 00                cmpb   $0x0,(%rdi)
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
         :	        instr_time      endtime;
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
   50.00 :	  5b7bdf:       f2 0f 58 47 30          addsd  0x30(%rdi),%xmm0
    0.00 :	  5b7be4:       f2 0f 11 47 30          movsd  %xmm0,0x30(%rdi)
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
    0.00 :	  5b7be9:       0f 84 90 00 00 00       je     5b7c7f <InstrStopNode+0xaf>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7bef:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7bf4:       75 0b                   jne    5b7c01 <InstrStopNode+0x31>
    0.00 :	  5b7bf6:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7bfb:       0f 84 d1 02 00 00       je     5b7ed2 <InstrStopNode+0x302>
         :	                        elog(ERROR, "InstrStopNode called without start");
         :
         :	                INSTR_TIME_SET_CURRENT(endtime);
    0.00 :	  5b7c01:       48 8d 7d e0             lea    -0x20(%rbp),%rdi
    0.00 :	  5b7c05:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7c07:       e8 b4 19 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                INSTR_TIME_ACCUM_DIFF(instr->counter, endtime, instr->starttime);
    0.00 :	  5b7c0c:       48 8b 45 e0             mov    -0x20(%rbp),%rax
    0.00 :	  5b7c10:       48 03 43 18             add    0x18(%rbx),%rax
    0.00 :	  5b7c14:       48 2b 43 08             sub    0x8(%rbx),%rax
    0.00 :	  5b7c18:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  5b7c1c:       48 8b 45 e8             mov    -0x18(%rbp),%rax
    0.00 :	  5b7c20:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	  5b7c24:       48 2b 43 10             sub    0x10(%rbx),%rax
    0.00 :	  5b7c28:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7c2b:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c2f:       79 36                   jns    5b7c67 <InstrStopNode+0x97>
    0.00 :	  5b7c31:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b7c38:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7c3e:       48 83 6b 18 01          subq   $0x1,0x18(%rbx)
    0.00 :	  5b7c43:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7c46:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c4a:       78 ec                   js     5b7c38 <InstrStopNode+0x68>
    0.00 :	  5b7c4c:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c52:       7e 1b                   jle    5b7c6f <InstrStopNode+0x9f>
    0.00 :	  5b7c54:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b7c58:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  5b7c5d:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7c63:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c67:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c6d:       7f e9                   jg     5b7c58 <InstrStopNode+0x88>
         :
         :	                INSTR_TIME_SET_ZERO(instr->starttime);
    0.00 :	  5b7c6f:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b7c76:       00 
    0.00 :	  5b7c77:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	  5b7c7e:       00 
         :	        }
         :
         :	        /* Add delta of buffer usage since entry to node's totals */
         :	        if (instr->need_bufusage)
    0.00 :	  5b7c7f:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
    0.00 :	  5b7c83:       75 33                   jne    5b7cb8 <InstrStopNode+0xe8>
         :	                BufferUsageAccumDiff(&instr->bufusage,
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
    0.00 :	  5b7c85:       80 7b 02 00             cmpb   $0x0,0x2(%rbx)
    0.00 :	  5b7c89:       75 21                   jne    5b7cac <InstrStopNode+0xdc>
         :	        {
         :	                instr->running = true;
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7c8b:       f2 48 0f 2a 43 20       cvtsi2sdq 0x20(%rbx),%xmm0
    0.00 :	  5b7c91:       f2 0f 5e 05 47 49 2c    divsd  0x2c4947(%rip),%xmm0        # 87c5e0 <__func__.18742+0x1b>
    0.00 :	  5b7c98:       00 
    0.00 :	  5b7c99:       f2 48 0f 2a 4b 18       cvtsi2sdq 0x18(%rbx),%xmm1
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
         :	        {
         :	                instr->running = true;
    0.00 :	  5b7c9f:       c6 43 02 01             movb   $0x1,0x2(%rbx)
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7ca3:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  5b7ca7:       f2 0f 11 4b 28          movsd  %xmm1,0x28(%rbx)
         :	        }
         :	}
    0.00 :	  5b7cac:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b7cb0:       5b                      pop    %rbx
    0.00 :	  5b7cb1:       c9                      leaveq 
    0.00 :	  5b7cb2:       c3                      retq   
    0.00 :	  5b7cb3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	static void
         :	BufferUsageAccumDiff(BufferUsage *dst,
         :	                                         const BufferUsage *add,
         :	                                         const BufferUsage *sub)
         :	{
         :	        dst->shared_blks_hit += add->shared_blks_hit - sub->shared_blks_hit;
    0.00 :	  5b7cb8:       48 8b 05 a1 7a 60 00    mov    0x607aa1(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7cbf:       48 03 83 d8 00 00 00    add    0xd8(%rbx),%rax
    0.00 :	  5b7cc6:       48 2b 43 38             sub    0x38(%rbx),%rax
    0.00 :	  5b7cca:       48 89 83 d8 00 00 00    mov    %rax,0xd8(%rbx)
         :	        dst->shared_blks_read += add->shared_blks_read - sub->shared_blks_read;
    0.00 :	  5b7cd1:       48 8b 05 90 7a 60 00    mov    0x607a90(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7cd8:       48 03 83 e0 00 00 00    add    0xe0(%rbx),%rax
    0.00 :	  5b7cdf:       48 2b 43 40             sub    0x40(%rbx),%rax
    0.00 :	  5b7ce3:       48 89 83 e0 00 00 00    mov    %rax,0xe0(%rbx)
         :	        dst->shared_blks_dirtied += add->shared_blks_dirtied - sub->shared_blks_dirtied;
    0.00 :	  5b7cea:       48 8b 05 7f 7a 60 00    mov    0x607a7f(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7cf1:       48 03 83 e8 00 00 00    add    0xe8(%rbx),%rax
    0.00 :	  5b7cf8:       48 2b 43 48             sub    0x48(%rbx),%rax
    0.00 :	  5b7cfc:       48 89 83 e8 00 00 00    mov    %rax,0xe8(%rbx)
         :	        dst->shared_blks_written += add->shared_blks_written - sub->shared_blks_written;
    0.00 :	  5b7d03:       48 8b 05 6e 7a 60 00    mov    0x607a6e(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7d0a:       48 03 83 f0 00 00 00    add    0xf0(%rbx),%rax
    0.00 :	  5b7d11:       48 2b 43 50             sub    0x50(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
   25.00 :	  5b7d15:       48 89 83 f0 00 00 00    mov    %rax,0xf0(%rbx)
         :	        dst->local_blks_hit += add->local_blks_hit - sub->local_blks_hit;
    0.00 :	  5b7d1c:       48 8b 05 5d 7a 60 00    mov    0x607a5d(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:140
   25.00 :	  5b7d23:       48 03 83 f8 00 00 00    add    0xf8(%rbx),%rax
    0.00 :	  5b7d2a:       48 2b 43 58             sub    0x58(%rbx),%rax
    0.00 :	  5b7d2e:       48 89 83 f8 00 00 00    mov    %rax,0xf8(%rbx)
         :	        dst->local_blks_read += add->local_blks_read - sub->local_blks_read;
    0.00 :	  5b7d35:       48 8b 05 4c 7a 60 00    mov    0x607a4c(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7d3c:       48 03 83 00 01 00 00    add    0x100(%rbx),%rax
    0.00 :	  5b7d43:       48 2b 43 60             sub    0x60(%rbx),%rax
    0.00 :	  5b7d47:       48 89 83 00 01 00 00    mov    %rax,0x100(%rbx)
         :	        dst->local_blks_dirtied += add->local_blks_dirtied - sub->local_blks_dirtied;
    0.00 :	  5b7d4e:       48 8b 05 3b 7a 60 00    mov    0x607a3b(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7d55:       48 03 83 08 01 00 00    add    0x108(%rbx),%rax
    0.00 :	  5b7d5c:       48 2b 43 68             sub    0x68(%rbx),%rax
    0.00 :	  5b7d60:       48 89 83 08 01 00 00    mov    %rax,0x108(%rbx)
         :	        dst->local_blks_written += add->local_blks_written - sub->local_blks_written;
    0.00 :	  5b7d67:       48 8b 05 2a 7a 60 00    mov    0x607a2a(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7d6e:       48 03 83 10 01 00 00    add    0x110(%rbx),%rax
    0.00 :	  5b7d75:       48 2b 43 70             sub    0x70(%rbx),%rax
    0.00 :	  5b7d79:       48 89 83 10 01 00 00    mov    %rax,0x110(%rbx)
         :	        dst->temp_blks_read += add->temp_blks_read - sub->temp_blks_read;
    0.00 :	  5b7d80:       48 8b 05 19 7a 60 00    mov    0x607a19(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7d87:       48 03 83 18 01 00 00    add    0x118(%rbx),%rax
    0.00 :	  5b7d8e:       48 2b 43 78             sub    0x78(%rbx),%rax
    0.00 :	  5b7d92:       48 89 83 18 01 00 00    mov    %rax,0x118(%rbx)
         :	        dst->temp_blks_written += add->temp_blks_written - sub->temp_blks_written;
    0.00 :	  5b7d99:       48 8b 05 08 7a 60 00    mov    0x607a08(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7da0:       48 03 83 20 01 00 00    add    0x120(%rbx),%rax
    0.00 :	  5b7da7:       48 2b 83 80 00 00 00    sub    0x80(%rbx),%rax
    0.00 :	  5b7dae:       48 89 83 20 01 00 00    mov    %rax,0x120(%rbx)
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_read_time,
    0.00 :	  5b7db5:       48 8b 05 f4 79 60 00    mov    0x6079f4(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7dbc:       48 03 83 28 01 00 00    add    0x128(%rbx),%rax
    0.00 :	  5b7dc3:       48 2b 83 88 00 00 00    sub    0x88(%rbx),%rax
    0.00 :	  5b7dca:       48 89 83 28 01 00 00    mov    %rax,0x128(%rbx)
    0.00 :	  5b7dd1:       48 8b 05 e0 79 60 00    mov    0x6079e0(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7dd8:       48 03 83 30 01 00 00    add    0x130(%rbx),%rax
    0.00 :	  5b7ddf:       48 2b 83 90 00 00 00    sub    0x90(%rbx),%rax
    0.00 :	  5b7de6:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7de9:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7df0:       79 43                   jns    5b7e35 <InstrStopNode+0x265>
    0.00 :	  5b7df2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7df8:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7dfe:       48 83 ab 28 01 00 00    subq   $0x1,0x128(%rbx)
    0.00 :	  5b7e05:       01 
    0.00 :	  5b7e06:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e09:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e10:       78 e6                   js     5b7df8 <InstrStopNode+0x228>
    0.00 :	  5b7e12:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e18:       7e 23                   jle    5b7e3d <InstrStopNode+0x26d>
    0.00 :	  5b7e1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e20:       48 83 83 28 01 00 00    addq   $0x1,0x128(%rbx)
    0.00 :	  5b7e27:       01 
    0.00 :	  5b7e28:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7e2e:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e35:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e3b:       7f e3                   jg     5b7e20 <InstrStopNode+0x250>
         :	                                                  add->blk_read_time, sub->blk_read_time);
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_write_time,
    0.00 :	  5b7e3d:       48 8b 05 7c 79 60 00    mov    0x60797c(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7e44:       48 03 83 38 01 00 00    add    0x138(%rbx),%rax
    0.00 :	  5b7e4b:       48 2b 83 98 00 00 00    sub    0x98(%rbx),%rax
    0.00 :	  5b7e52:       48 89 83 38 01 00 00    mov    %rax,0x138(%rbx)
    0.00 :	  5b7e59:       48 8b 05 68 79 60 00    mov    0x607968(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b7e60:       48 03 83 40 01 00 00    add    0x140(%rbx),%rax
    0.00 :	  5b7e67:       48 2b 83 a0 00 00 00    sub    0xa0(%rbx),%rax
    0.00 :	  5b7e6e:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e71:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e78:       79 4b                   jns    5b7ec5 <InstrStopNode+0x2f5>
    0.00 :	  5b7e7a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e80:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7e86:       48 83 ab 38 01 00 00    subq   $0x1,0x138(%rbx)
    0.00 :	  5b7e8d:       01 
    0.00 :	  5b7e8e:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e91:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e98:       78 e6                   js     5b7e80 <InstrStopNode+0x2b0>
    0.00 :	  5b7e9a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ea0:       0f 8e df fd ff ff       jle    5b7c85 <InstrStopNode+0xb5>
    0.00 :	  5b7ea6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b7ead:       00 00 00 
    0.00 :	  5b7eb0:       48 83 83 38 01 00 00    addq   $0x1,0x138(%rbx)
    0.00 :	  5b7eb7:       01 
    0.00 :	  5b7eb8:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7ebe:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7ec5:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ecb:       7f e3                   jg     5b7eb0 <InstrStopNode+0x2e0>
    0.00 :	  5b7ecd:       e9 b3 fd ff ff          jmpq   5b7c85 <InstrStopNode+0xb5>
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        elog(ERROR, "InstrStopNode called without start");
    0.00 :	  5b7ed2:       ba 8a b6 88 00          mov    $0x88b68a,%edx
    0.00 :	  5b7ed7:       be 50 00 00 00          mov    $0x50,%esi
    0.00 :	  5b7edc:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7ee1:       e8 3a 35 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7ee6:       be 30 b6 88 00          mov    $0x88b630,%esi
    0.00 :	  5b7eeb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7ef0:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7ef2:       e8 39 33 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7ef7:       e8 d4 15 eb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000069b9e0 <check_stack_depth>:
         :	 * overflow as an unrecoverable SIGSEGV, so we want to error out ourselves
         :	 * before hitting the hardware limit.
         :	 */
         :	void
         :	check_stack_depth(void)
         :	{
    0.00 :	  69b9e0:       55                      push   %rbp
    0.00 :	  69b9e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  69b9e4:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  69b9e8:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  69b9ec:       48 83 ec 20             sub    $0x20,%rsp
         :	        long            stack_depth;
         :
         :	        /*
         :	         * Compute distance from reference point to my local variables
         :	         */
         :	        stack_depth = (long) (stack_base_ptr - &stack_top_loc);
    0.00 :	  69b9f0:       48 8b 0d f9 2d 4e 00    mov    0x4e2df9(%rip),%rcx        # b7e7f0 <stack_base_ptr>
    0.00 :	  69b9f7:       48 8d 45 ef             lea    -0x11(%rbp),%rax
    0.00 :	  69b9fb:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  69b9fe:       48 29 c2                sub    %rax,%rdx
    0.00 :	  69ba01:       48 89 d0                mov    %rdx,%rax
         :	         * The test on stack_base_ptr prevents us from erroring out if called
         :	         * during process setup or in a non-backend process.  Logically it should
         :	         * be done first, but putting it here avoids wasting cycles during normal
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
    0.00 :	  69ba04:       48 c1 fa 3f             sar    $0x3f,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
   50.00 :	  69ba08:       48 31 d0                xor    %rdx,%rax
   25.00 :	  69ba0b:       48 29 d0                sub    %rdx,%rax
    0.00 :	  69ba0e:       48 39 05 a3 cd 4c 00    cmp    %rax,0x4ccda3(%rip)        # b687b8 <max_stack_depth_bytes>
    0.00 :	  69ba15:       7d 05                   jge    69ba1c <check_stack_depth+0x3c>
    0.00 :	  69ba17:       48 85 c9                test   %rcx,%rcx
    0.00 :	  69ba1a:       75 0a                   jne    69ba26 <check_stack_depth+0x46>
         :	                                 errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), "
         :	                          "after ensuring the platform's stack depth limit is adequate.",
         :	                                                 max_stack_depth)));
         :	        }
         :	#endif   /* IA64 */
         :	}
    0.00 :	  69ba1c:       48 8b 5d f0             mov    -0x10(%rbp),%rbx
    0.00 :	  69ba20:       4c 8b 65 f8             mov    -0x8(%rbp),%r12
    0.00 :	  69ba24:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
   25.00 :	  69ba25:       c3                      retq   
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
         :	                stack_base_ptr != NULL)
         :	        {
         :	                ereport(ERROR,
    0.00 :	  69ba26:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  69ba29:       b9 e0 00 8b 00          mov    $0x8b00e0,%ecx
    0.00 :	  69ba2e:       ba 19 0c 00 00          mov    $0xc19,%edx
    0.00 :	  69ba33:       be d0 e8 8a 00          mov    $0x8ae8d0,%esi
    0.00 :	  69ba38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  69ba3d:       e8 7e f0 0d 00          callq  77aac0 <errstart>
    0.00 :	  69ba42:       84 c0                   test   %al,%al
    0.00 :	  69ba44:       75 05                   jne    69ba4b <check_stack_depth+0x6b>
    0.00 :	  69ba46:       e8 85 da dc ff          callq  4694d0 <abort@plt>
    0.00 :	  69ba4b:       8b 35 5b cd 4c 00       mov    0x4ccd5b(%rip),%esi        # b687ac <max_stack_depth>
    0.00 :	  69ba51:       bf 60 f0 8a 00          mov    $0x8af060,%edi
    0.00 :	  69ba56:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba58:       e8 43 02 0e 00          callq  77bca0 <errhint>
    0.00 :	  69ba5d:       bf 00 ea 8a 00          mov    $0x8aea00,%edi
    0.00 :	  69ba62:       41 89 c4                mov    %eax,%r12d
    0.00 :	  69ba65:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba67:       e8 34 0e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69ba6c:       bf 05 01 00 01          mov    $0x1000105,%edi
    0.00 :	  69ba71:       89 c3                   mov    %eax,%ebx
    0.00 :	  69ba73:       e8 d8 12 0e 00          callq  77cd50 <errcode>
    0.00 :	  69ba78:       44 89 e2                mov    %r12d,%edx
    0.00 :	  69ba7b:       89 c7                   mov    %eax,%edi
    0.00 :	  69ba7d:       89 de                   mov    %ebx,%esi
    0.00 :	  69ba7f:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba81:       e8 5a eb 0d 00          callq  77a5e0 <errfinish>
    0.00 :	  69ba86:       eb be                   jmp    69ba46 <check_stack_depth+0x66>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6b50 <date_ge>:
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   75.00 :	  6c6b50:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  6c6b54:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6c6b57:       55                      push   %rbp
    0.00 :	  6c6b58:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 >= dateVal2);
         :	}
    0.00 :	  6c6b5b:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
   25.00 :	  6c6b5c:       0f 9d c0                setge  %al
    0.00 :	  6c6b5f:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007846a0 <hash_search>:
         :	void *
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
    0.00 :	  7846a0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:810
   25.00 :	  7846a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7846a4:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  7846a8:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7846ac:       48 89 fb                mov    %rdi,%rbx
   25.00 :	  7846af:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7846b3:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7846b7:       49 89 f5                mov    %rsi,%r13
    0.00 :	  7846ba:       48 83 ec 20             sub    $0x20,%rsp
   25.00 :	  7846be:       41 89 d6                mov    %edx,%r14d
    0.00 :	  7846c1:       49 89 cc                mov    %rcx,%r12
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846c4:       48 8b 77 48             mov    0x48(%rdi),%rsi
    0.00 :	  7846c8:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7846cb:       ff 53 10                callq  *0x10(%rbx)
    0.00 :	  7846ce:       4d 89 e0                mov    %r12,%r8
    0.00 :	  7846d1:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  7846d4:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7846d7:       48 89 df                mov    %rbx,%rdi
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
    0.00 :	  7846da:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7846df:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7846e3:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  7846e8:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846ed:       89 c2                   mov    %eax,%edx
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
    0.00 :	  7846ef:       c9                      leaveq 
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   25.00 :	  7846f0:       e9 5b f9 ff ff          jmpq   784050 <hash_search_with_hash_value>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:643
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a900 <ResourceOwnerForgetBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a900:       55                      push   %rbp
         :	        if (owner != NULL)
    0.00 :	  79a901:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
   25.00 :	  79a904:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  79a907:       41 54                   push   %r12
    0.00 :	  79a909:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79a90c:       53                      push   %rbx
    0.00 :	  79a90d:       89 f3                   mov    %esi,%ebx
         :	        if (owner != NULL)
    0.00 :	  79a90f:       74 4d                   je     79a95e <ResourceOwnerForgetBuffer+0x5e>
         :	        {
         :	                Buffer     *buffers = owner->buffers;
         :	                int                     nb1 = owner->nbuffers - 1;
    0.00 :	  79a911:       8b 47 20                mov    0x20(%rdi),%eax
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
         :	        if (owner != NULL)
         :	        {
         :	                Buffer     *buffers = owner->buffers;
    0.00 :	  79a914:       48 8b 77 28             mov    0x28(%rdi),%rsi
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
    0.00 :	  79a918:       89 c7                   mov    %eax,%edi
    0.00 :	  79a91a:       83 ef 01                sub    $0x1,%edi
    0.00 :	  79a91d:       78 49                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a91f:       48 63 c7                movslq %edi,%rax
         :	                                while (i < nb1)
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   25.00 :	  79a922:       89 fa                   mov    %edi,%edx
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a924:       39 1c 86                cmp    %ebx,(%rsi,%rax,4)
    0.00 :	  79a927:       74 30                   je     79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a929:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
    0.00 :	  79a930:       83 ea 01                sub    $0x1,%edx
    0.00 :	  79a933:       78 33                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a935:       48 63 ca                movslq %edx,%rcx
    0.00 :	  79a938:       39 1c 8e                cmp    %ebx,(%rsi,%rcx,4)
    0.00 :	  79a93b:       75 f3                   jne    79a930 <ResourceOwnerForgetBuffer+0x30>
         :	                        {
         :	                                while (i < nb1)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:643
   25.00 :	  79a93d:       39 d7                   cmp    %edx,%edi
    0.00 :	  79a93f:       90                      nop
    0.00 :	  79a940:       7f 09                   jg     79a94b <ResourceOwnerForgetBuffer+0x4b>
    0.00 :	  79a942:       eb 15                   jmp    79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a944:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  79a948:       48 63 ca                movslq %edx,%rcx
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a94b:       8b 44 8e 04             mov    0x4(%rsi,%rcx,4),%eax
         :	                                        i++;
    0.00 :	  79a94f:       83 c2 01                add    $0x1,%edx
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a952:       39 d7                   cmp    %edx,%edi
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a954:       89 04 8e                mov    %eax,(%rsi,%rcx,4)
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a957:       7f ef                   jg     79a948 <ResourceOwnerForgetBuffer+0x48>
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   25.00 :	  79a959:       41 89 7c 24 20          mov    %edi,0x20(%r12)
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
         :	                         buffer, owner->name);
         :	        }
         :	}
    0.00 :	  79a95e:       5b                      pop    %rbx
    0.00 :	  79a95f:       41 5c                   pop    %r12
    0.00 :	  79a961:       c9                      leaveq 
    0.00 :	  79a962:       c3                      retq   
    0.00 :	  79a963:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                }
         :	                                owner->nbuffers = nb1;
         :	                                return;
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
    0.00 :	  79a968:       ba 70 27 8e 00          mov    $0x8e2770,%edx
    0.00 :	  79a96d:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  79a972:       bf 90 22 8e 00          mov    $0x8e2290,%edi
    0.00 :	  79a977:       e8 a4 0a fe ff          callq  77b420 <elog_start>
    0.00 :	  79a97c:       49 8b 4c 24 18          mov    0x18(%r12),%rcx
    0.00 :	  79a981:       89 da                   mov    %ebx,%edx
    0.00 :	  79a983:       be b8 24 8e 00          mov    $0x8e24b8,%esi
    0.00 :	  79a988:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  79a98d:       31 c0                   xor    %eax,%eax
    0.00 :	  79a98f:       e8 9c 08 fe ff          callq  77b230 <elog_finish>
    0.00 :	  79a994:       e8 37 eb cc ff          callq  4694d0 <abort@plt>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490350 <hash_any>:
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  490350:       55                      push   %rbp
    0.00 :	  490351:       41 89 f2                mov    %esi,%r10d
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490354:       40 f6 c7 03             test   $0x3,%dil
         :	                                c,
         :	                                len;
         :
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
    0.00 :	  490358:       45 8d 82 50 56 73 9e    lea    -0x618ca9b0(%r10),%r8d
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  49035f:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  490362:       53                      push   %rbx
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490363:       0f 84 f7 00 00 00       je     490460 <hash_any+0x110>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490369:       83 fe 0b                cmp    $0xb,%esi
         :	                                /* fall through */
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
         :	                                /* fall through */
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49036c:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  49036f:       44 89 c2                mov    %r8d,%edx
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490372:       0f 86 7e 02 00 00       jbe    4905f6 <hash_any+0x2a6>
    0.00 :	  490378:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49037f:       00 
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  490380:       0f b6 4f 05             movzbl 0x5(%rdi),%ecx
    0.00 :	  490384:       0f b6 47 06             movzbl 0x6(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490388:       0f b6 77 09             movzbl 0x9(%rdi),%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49038c:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49038f:       c1 e1 08                shl    $0x8,%ecx
    0.00 :	  490392:       01 c1                   add    %eax,%ecx
    0.00 :	  490394:       0f b6 47 04             movzbl 0x4(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490398:       c1 e6 08                shl    $0x8,%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49039b:       01 c1                   add    %eax,%ecx
    0.00 :	  49039d:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  4903a1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903a4:       01 c1                   add    %eax,%ecx
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903a6:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  4903aa:       01 d1                   add    %edx,%ecx
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ac:       0f b6 57 01             movzbl 0x1(%rdi),%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903b0:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903b3:       01 c6                   add    %eax,%esi
    0.00 :	  4903b5:       0f b6 47 08             movzbl 0x8(%rdi),%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903b9:       c1 e2 08                shl    $0x8,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903bc:       01 c6                   add    %eax,%esi
    0.00 :	  4903be:       0f b6 47 0b             movzbl 0xb(%rdi),%eax
    0.00 :	  4903c2:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903c5:       01 c6                   add    %eax,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903c7:       0f b6 47 02             movzbl 0x2(%rdi),%eax
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903cb:       44 01 c6                add    %r8d,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ce:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903d1:       01 c2                   add    %eax,%edx
    0.00 :	  4903d3:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  4903d6:       01 c2                   add    %eax,%edx
    0.00 :	  4903d8:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  4903dc:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903df:       01 c2                   add    %eax,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e1:       89 f0                   mov    %esi,%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903e3:       44 01 ca                add    %r9d,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e6:       c1 c8 1c                ror    $0x1c,%eax
    0.00 :	  4903e9:       29 f2                   sub    %esi,%edx
    0.00 :	  4903eb:       01 ce                   add    %ecx,%esi
    0.00 :	  4903ed:       31 c2                   xor    %eax,%edx
    0.00 :	  4903ef:       89 d0                   mov    %edx,%eax
    0.00 :	  4903f1:       29 d1                   sub    %edx,%ecx
    0.00 :	  4903f3:       01 f2                   add    %esi,%edx
    0.00 :	  4903f5:       c1 c8 1a                ror    $0x1a,%eax
    0.00 :	  4903f8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4903fa:       89 c1                   mov    %eax,%ecx
    0.00 :	  4903fc:       29 c6                   sub    %eax,%esi
    0.00 :	  4903fe:       01 d0                   add    %edx,%eax
    0.00 :	  490400:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  490403:       31 f1                   xor    %esi,%ecx
    0.00 :	  490405:       89 ce                   mov    %ecx,%esi
    0.00 :	  490407:       29 ca                   sub    %ecx,%edx
    0.00 :	  490409:       01 c1                   add    %eax,%ecx
    0.00 :	  49040b:       c1 ce 10                ror    $0x10,%esi
         :	                        k += 12;
         :	                        len -= 12;
    0.00 :	  49040e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
         :	                        k += 12;
    0.00 :	  490412:       48 83 c7 0c             add    $0xc,%rdi
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  490416:       31 d6                   xor    %edx,%esi
    0.00 :	  490418:       89 f2                   mov    %esi,%edx
    0.00 :	  49041a:       29 f0                   sub    %esi,%eax
    0.00 :	  49041c:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  490420:       c1 ca 0d                ror    $0xd,%edx
    0.00 :	  490423:       31 c2                   xor    %eax,%edx
    0.00 :	  490425:       41 89 d0                mov    %edx,%r8d
    0.00 :	  490428:       29 d1                   sub    %edx,%ecx
    0.00 :	  49042a:       44 01 ca                add    %r9d,%edx
    0.00 :	  49042d:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  490431:       41 31 c8                xor    %ecx,%r8d
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490434:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  490438:       0f 87 42 ff ff ff       ja     490380 <hash_any+0x30>
    0.00 :	  49043e:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  490441:       89 d6                   mov    %edx,%esi
    0.00 :	  490443:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
    0.00 :	  490446:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  49044a:       0f 87 01 01 00 00       ja     490551 <hash_any+0x201>
    0.00 :	  490450:       44 89 d0                mov    %r10d,%eax
    0.00 :	  490453:       ff 24 c5 18 22 7b 00    jmpq   *0x7b2218(,%rax,8)
    0.00 :	  49045a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490460:       83 fe 0b                cmp    $0xb,%esi
    0.00 :	  490463:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  490466:       44 89 c1                mov    %r8d,%ecx
    0.00 :	  490469:       0f 86 79 01 00 00       jbe    4905e8 <hash_any+0x298>
    0.00 :	  49046f:       90                      nop
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
    0.00 :	  490470:       44 89 c6                mov    %r8d,%esi
    0.00 :	  490473:       03 77 08                add    0x8(%rdi),%esi
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
    0.00 :	  490476:       44 89 c8                mov    %r9d,%eax
    0.00 :	  490479:       03 07                   add    (%rdi),%eax
         :	                        b += ka[1];
    0.00 :	  49047b:       03 4f 04                add    0x4(%rdi),%ecx
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
         :	                        len -= 12;
    0.00 :	  49047e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
    0.00 :	  490482:       48 83 c7 0c             add    $0xc,%rdi
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  490486:       89 f2                   mov    %esi,%edx
    0.00 :	  490488:       29 f0                   sub    %esi,%eax
    0.00 :	  49048a:       c1 ca 1c                ror    $0x1c,%edx
    0.00 :	  49048d:       01 ce                   add    %ecx,%esi
    0.00 :	  49048f:       31 d0                   xor    %edx,%eax
    0.00 :	  490491:       89 c2                   mov    %eax,%edx
    0.00 :	  490493:       29 c1                   sub    %eax,%ecx
    0.00 :	  490495:       01 f0                   add    %esi,%eax
    0.00 :	  490497:       c1 ca 1a                ror    $0x1a,%edx
    0.00 :	  49049a:       31 ca                   xor    %ecx,%edx
    0.00 :	  49049c:       89 d1                   mov    %edx,%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
   66.67 :	  49049e:       29 d6                   sub    %edx,%esi
    0.00 :	  4904a0:       01 c2                   add    %eax,%edx
    0.00 :	  4904a2:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  4904a5:       31 f1                   xor    %esi,%ecx
    0.00 :	  4904a7:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904a9:       29 c8                   sub    %ecx,%eax
    0.00 :	  4904ab:       01 d1                   add    %edx,%ecx
    0.00 :	  4904ad:       c1 ce 10                ror    $0x10,%esi
    0.00 :	  4904b0:       31 c6                   xor    %eax,%esi
    0.00 :	  4904b2:       89 f0                   mov    %esi,%eax
    0.00 :	  4904b4:       29 f2                   sub    %esi,%edx
    0.00 :	  4904b6:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  4904ba:       c1 c8 0d                ror    $0xd,%eax
    0.00 :	  4904bd:       31 d0                   xor    %edx,%eax
    0.00 :	  4904bf:       41 89 c0                mov    %eax,%r8d
    0.00 :	  4904c2:       29 c1                   sub    %eax,%ecx
    0.00 :	  4904c4:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  4904c8:       41 31 c8                xor    %ecx,%r8d
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904cb:       41 83 fa 0b             cmp    $0xb,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  4904cf:       42 8d 0c 08             lea    (%rax,%r9,1),%ecx
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904d3:       77 9b                   ja     490470 <hash_any+0x120>
    0.00 :	  4904d5:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4904d8:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904da:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
    0.00 :	  4904dd:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  4904e1:       77 6e                   ja     490551 <hash_any+0x201>
    0.00 :	  4904e3:       44 89 d0                mov    %r10d,%eax
    0.00 :	  4904e6:       ff 24 c5 78 22 7b 00    jmpq   *0x7b2278(,%rax,8)
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4904ed:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4904f1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4904f4:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4904f8:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4904fc:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4904ff:       01 c3                   add    %eax,%ebx
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  490501:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  490505:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490508:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                        case 8:
         :	                                b += ((uint32) k[7] << 24);
    0.00 :	  49050a:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  49050e:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490511:       8d 34 10                lea    (%rax,%rdx,1),%esi
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  490514:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  490518:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49051b:       01 c6                   add    %eax,%esi
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  49051d:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  490521:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490524:       01 c6                   add    %eax,%esi
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  490526:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  49052a:       01 c6                   add    %eax,%esi
         :	                        case 4:
         :	                                a += ((uint32) k[3] << 24);
    0.00 :	  49052c:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  490530:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490533:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490537:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  49053b:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49053e:       41 01 c3                add    %eax,%r11d
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
    0.00 :	  490541:       0f b6 47 01             movzbl 0x1(%rdi),%eax
    0.00 :	  490545:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490548:       41 01 c3                add    %eax,%r11d
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49054b:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  49054e:       41 01 c3                add    %eax,%r11d
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#endif   /* WORDS_BIGENDIAN */
         :	        }
         :
         :	        final(a, b, c);
    0.00 :	  490551:       89 da                   mov    %ebx,%edx
    0.00 :	  490553:       89 f0                   mov    %esi,%eax
    0.00 :	  490555:       31 f2                   xor    %esi,%edx
    0.00 :	  490557:       c1 c8 12                ror    $0x12,%eax
    0.00 :	  49055a:       29 c2                   sub    %eax,%edx
    0.00 :	  49055c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49055e:       89 d0                   mov    %edx,%eax
    0.00 :	  490560:       c1 c8 15                ror    $0x15,%eax
    0.00 :	  490563:       44 31 d9                xor    %r11d,%ecx
    0.00 :	  490566:       29 c1                   sub    %eax,%ecx
    0.00 :	  490568:       89 c8                   mov    %ecx,%eax
    0.00 :	  49056a:       31 ce                   xor    %ecx,%esi
    0.00 :	  49056c:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49056f:       29 c6                   sub    %eax,%esi
    0.00 :	  490571:       89 f0                   mov    %esi,%eax
    0.00 :	  490573:       31 d0                   xor    %edx,%eax
    0.00 :	  490575:       89 f2                   mov    %esi,%edx
    0.00 :	  490577:       c1 ca 10                ror    $0x10,%edx
    0.00 :	  49057a:       29 d0                   sub    %edx,%eax
    0.00 :	  49057c:       89 c2                   mov    %eax,%edx
    0.00 :	  49057e:       31 ca                   xor    %ecx,%edx
    0.00 :	  490580:       89 c1                   mov    %eax,%ecx
    0.00 :	  490582:       c1 c9 1c                ror    $0x1c,%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
   33.33 :	  490585:       29 ca                   sub    %ecx,%edx
    0.00 :	  490587:       89 d1                   mov    %edx,%ecx
    0.00 :	  490589:       c1 ca 12                ror    $0x12,%edx
    0.00 :	  49058c:       31 f1                   xor    %esi,%ecx
    0.00 :	  49058e:       29 d1                   sub    %edx,%ecx
    0.00 :	  490590:       31 c8                   xor    %ecx,%eax
    0.00 :	  490592:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  490595:       29 c8                   sub    %ecx,%eax
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490597:       5b                      pop    %rbx
    0.00 :	  490598:       c9                      leaveq 
    0.00 :	  490599:       c3                      retq   
         :	                        case 8:
         :	                                b += ka[1];
         :	                                a += ka[0];
         :	                                break;
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  49059a:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  49059e:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905a1:       8d 34 08                lea    (%rax,%rcx,1),%esi
         :	                                /* fall through */
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  4905a4:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  4905a8:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905ab:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  4905ad:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  4905b1:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
    0.00 :	  4905b3:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4905b6:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905b9:       eb 96                   jmp    490551 <hash_any+0x201>
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4905bb:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4905bf:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4905c2:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                                /* fall through */
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4905c6:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4905ca:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905cd:       01 c3                   add    %eax,%ebx
         :	                                /* fall through */
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  4905cf:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  4905d3:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905d6:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
    0.00 :	  4905d8:       89 ce                   mov    %ecx,%esi
         :	                                a += ka[0];
    0.00 :	  4905da:       45 89 cb                mov    %r9d,%r11d
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
    0.00 :	  4905dd:       03 77 04                add    0x4(%rdi),%esi
         :	                                a += ka[0];
    0.00 :	  4905e0:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905e3:       e9 69 ff ff ff          jmpq   490551 <hash_any+0x201>
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905e8:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905eb:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905ee:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905f1:       e9 e7 fe ff ff          jmpq   4904dd <hash_any+0x18d>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905f6:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905f9:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905fc:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905ff:       e9 42 fe ff ff          jmpq   490446 <hash_any+0xf6>
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
         :	                                break;
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490604:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  490608:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49060b:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
    0.00 :	  49060f:       e9 2d ff ff ff          jmpq   490541 <hash_any+0x1f1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490660 <hash_uint32>:
         :	        register uint32 a,
         :	                                b,
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
    0.00 :	  490660:       81 ef ac a9 8c 61       sub    $0x618ca9ac,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490666:       55                      push   %rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490667:       81 f7 64 d8 6a 2a       xor    $0x2a6ad864,%edi
    0.00 :	  49066d:       81 ef 53 21 c3 56       sub    $0x56c32153,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490673:       48 89 e5                mov    %rsp,%rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490676:       89 fe                   mov    %edi,%esi
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   33.33 :	  490678:       89 f8                   mov    %edi,%eax
    0.00 :	  49067a:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49067d:       81 f6 54 56 73 9e       xor    $0x9e735654,%esi
    0.00 :	  490683:       29 c6                   sub    %eax,%esi
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490685:       c9                      leaveq 
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490686:       89 f0                   mov    %esi,%eax
    0.00 :	  490688:       89 f2                   mov    %esi,%edx
    0.00 :	  49068a:       c1 ca 10                ror    $0x10,%edx
   33.33 :	  49068d:       35 64 d8 6a 2a          xor    $0x2a6ad864,%eax
    0.00 :	  490692:       29 d0                   sub    %edx,%eax
    0.00 :	  490694:       89 c2                   mov    %eax,%edx
   33.33 :	  490696:       89 c1                   mov    %eax,%ecx
    0.00 :	  490698:       c1 c9 1c                ror    $0x1c,%ecx
    0.00 :	  49069b:       31 fa                   xor    %edi,%edx
    0.00 :	  49069d:       29 ca                   sub    %ecx,%edx
    0.00 :	  49069f:       89 d1                   mov    %edx,%ecx
    0.00 :	  4906a1:       c1 ca 12                ror    $0x12,%edx
    0.00 :	  4906a4:       31 f1                   xor    %esi,%ecx
    0.00 :	  4906a6:       29 d1                   sub    %edx,%ecx
    0.00 :	  4906a8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4906aa:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  4906ad:       29 c8                   sub    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:531
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:525
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:526
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a5520 <index_fetch_heap>:
         :	 * enough information to do it efficiently in the general case.
         :	 * ----------------
         :	 */
         :	HeapTuple
         :	index_fetch_heap(IndexScanDesc scan)
         :	{
    0.00 :	  4a5520:       55                      push   %rbp
    0.00 :	  4a5521:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4a5524:       41 55                   push   %r13
    0.00 :	  4a5526:       41 54                   push   %r12
    0.00 :	  4a5528:       49 89 fc                mov    %rdi,%r12
    0.00 :	  4a552b:       53                      push   %rbx
    0.00 :	  4a552c:       48 83 ec 18             sub    $0x18,%rsp
         :	        ItemPointer tid = &scan->xs_ctup.t_self;
         :	        bool            all_dead = false;
    0.00 :	  4a5530:       c6 45 e7 00             movb   $0x0,-0x19(%rbp)
         :	        bool            got_heap_tuple;
         :
         :	        /* We can skip the buffer-switching logic if we're in mid-HOT chain. */
         :	        if (!scan->xs_continue_hot)
    0.00 :	  4a5534:       80 7f 6d 00             cmpb   $0x0,0x6d(%rdi)
    0.00 :	  4a5538:       0f 84 9a 00 00 00       je     4a55d8 <index_fetch_heap+0xb8>
         :	                if (prev_buf != scan->xs_cbuf)
         :	                        heap_page_prune_opt(scan->heapRelation, scan->xs_cbuf);
         :	        }
         :
         :	        /* Obtain share-lock on the buffer so we can examine visibility */
         :	        LockBuffer(scan->xs_cbuf, BUFFER_LOCK_SHARE);
    0.00 :	  4a553e:       41 8b 7c 24 68          mov    0x68(%r12),%edi
    0.00 :	  4a5543:       be 01 00 00 00          mov    $0x1,%esi
         :	        got_heap_tuple = heap_hot_search_buffer(tid, scan->heapRelation,
    0.00 :	  4a5548:       4d 8d 6c 24 50          lea    0x50(%r12),%r13
         :	                if (prev_buf != scan->xs_cbuf)
         :	                        heap_page_prune_opt(scan->heapRelation, scan->xs_cbuf);
         :	        }
         :
         :	        /* Obtain share-lock on the buffer so we can examine visibility */
         :	        LockBuffer(scan->xs_cbuf, BUFFER_LOCK_SHARE);
    0.00 :	  4a554d:       e8 be f1 1c 00          callq  674710 <LockBuffer>
         :	        got_heap_tuple = heap_hot_search_buffer(tid, scan->heapRelation,
    0.00 :	  4a5552:       31 c0                   xor    %eax,%eax
    0.00 :	  4a5554:       41 80 7c 24 6d 00       cmpb   $0x0,0x6d(%r12)
    0.00 :	  4a555a:       49 8b 4c 24 10          mov    0x10(%r12),%rcx
    0.00 :	  4a555f:       41 8b 54 24 68          mov    0x68(%r12),%edx
    0.00 :	  4a5564:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  4a5568:       49 8d 7c 24 54          lea    0x54(%r12),%rdi
    0.00 :	  4a556d:       4c 8d 4d e7             lea    -0x19(%rbp),%r9
    0.00 :	  4a5571:       4d 89 e8                mov    %r13,%r8
    0.00 :	  4a5574:       0f 94 c0                sete   %al
    0.00 :	  4a5577:       89 04 24                mov    %eax,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:531
   33.33 :	  4a557a:       e8 a1 7c ff ff          callq  49d220 <heap_hot_search_buffer>
         :	                                                                                        scan->xs_cbuf,
         :	                                                                                        scan->xs_snapshot,
         :	                                                                                        &scan->xs_ctup,
         :	                                                                                        &all_dead,
         :	                                                                                        !scan->xs_continue_hot);
         :	        LockBuffer(scan->xs_cbuf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4a557f:       41 8b 7c 24 68          mov    0x68(%r12),%edi
         :	                        heap_page_prune_opt(scan->heapRelation, scan->xs_cbuf);
         :	        }
         :
         :	        /* Obtain share-lock on the buffer so we can examine visibility */
         :	        LockBuffer(scan->xs_cbuf, BUFFER_LOCK_SHARE);
         :	        got_heap_tuple = heap_hot_search_buffer(tid, scan->heapRelation,
    0.00 :	  4a5584:       89 c3                   mov    %eax,%ebx
         :	                                                                                        scan->xs_cbuf,
         :	                                                                                        scan->xs_snapshot,
         :	                                                                                        &scan->xs_ctup,
         :	                                                                                        &all_dead,
         :	                                                                                        !scan->xs_continue_hot);
         :	        LockBuffer(scan->xs_cbuf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4a5586:       31 f6                   xor    %esi,%esi
    0.00 :	  4a5588:       e8 83 f1 1c 00          callq  674710 <LockBuffer>
         :
         :	        if (got_heap_tuple)
    0.00 :	  4a558d:       84 db                   test   %bl,%bl
    0.00 :	  4a558f:       74 7f                   je     4a5610 <index_fetch_heap+0xf0>
         :	        {
         :	                /*
         :	                 * Only in a non-MVCC snapshot can more than one member of the HOT
         :	                 * chain be visible.
         :	                 */
         :	                scan->xs_continue_hot = !IsMVCCSnapshot(scan->xs_snapshot);
    0.00 :	  4a5591:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  4a5596:       31 d2                   xor    %edx,%edx
    0.00 :	  4a5598:       48 8b 00                mov    (%rax),%rax
    0.00 :	  4a559b:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  4a55a1:       74 09                   je     4a55ac <index_fetch_heap+0x8c>
    0.00 :	  4a55a3:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  4a55a9:       0f 95 c2                setne  %dl
         :	                pgstat_count_heap_fetch(scan->indexRelation);
    0.00 :	  4a55ac:       49 8b 44 24 08          mov    0x8(%r12),%rax
         :	        {
         :	                /*
         :	                 * Only in a non-MVCC snapshot can more than one member of the HOT
         :	                 * chain be visible.
         :	                 */
         :	                scan->xs_continue_hot = !IsMVCCSnapshot(scan->xs_snapshot);
    0.00 :	  4a55b1:       41 88 54 24 6d          mov    %dl,0x6d(%r12)
         :	                pgstat_count_heap_fetch(scan->indexRelation);
    0.00 :	  4a55b6:       48 8b 80 38 01 00 00    mov    0x138(%rax),%rax
    0.00 :	  4a55bd:       48 85 c0                test   %rax,%rax
    0.00 :	  4a55c0:       74 05                   je     4a55c7 <index_fetch_heap+0xa7>
    0.00 :	  4a55c2:       48 83 40 20 01          addq   $0x1,0x20(%rax)
         :	         */
         :	        if (!scan->xactStartedInRecovery)
         :	                scan->kill_prior_tuple = all_dead;
         :
         :	        return NULL;
         :	}
    0.00 :	  4a55c7:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  4a55cb:       4c 89 e8                mov    %r13,%rax
    0.00 :	  4a55ce:       5b                      pop    %rbx
    0.00 :	  4a55cf:       41 5c                   pop    %r12
    0.00 :	  4a55d1:       41 5d                   pop    %r13
    0.00 :	  4a55d3:       c9                      leaveq 
    0.00 :	  4a55d4:       c3                      retq   
    0.00 :	  4a55d5:       0f 1f 00                nopl   (%rax)
         :	        if (!scan->xs_continue_hot)
         :	        {
         :	                /* Switch to correct buffer if we don't have it already */
         :	                Buffer          prev_buf = scan->xs_cbuf;
         :
         :	                scan->xs_cbuf = ReleaseAndReadBuffer(scan->xs_cbuf,
    0.00 :	  4a55d8:       0f b7 57 54             movzwl 0x54(%rdi),%edx
    0.00 :	  4a55dc:       0f b7 47 56             movzwl 0x56(%rdi),%eax
         :
         :	        /* We can skip the buffer-switching logic if we're in mid-HOT chain. */
         :	        if (!scan->xs_continue_hot)
         :	        {
         :	                /* Switch to correct buffer if we don't have it already */
         :	                Buffer          prev_buf = scan->xs_cbuf;
    0.00 :	  4a55e0:       8b 5f 68                mov    0x68(%rdi),%ebx
         :
         :	                scan->xs_cbuf = ReleaseAndReadBuffer(scan->xs_cbuf,
    0.00 :	  4a55e3:       48 8b 37                mov    (%rdi),%rsi
    0.00 :	  4a55e6:       c1 e2 10                shl    $0x10,%edx
    0.00 :	  4a55e9:       89 df                   mov    %ebx,%edi
    0.00 :	  4a55eb:       09 c2                   or     %eax,%edx
    0.00 :	  4a55ed:       e8 ce 10 1d 00          callq  6766c0 <ReleaseAndReadBuffer>
         :	                                                                                         ItemPointerGetBlockNumber(tid));
         :
         :	                /*
         :	                 * Prune page, but only if we weren't already on this page
         :	                 */
         :	                if (prev_buf != scan->xs_cbuf)
    0.00 :	  4a55f2:       39 c3                   cmp    %eax,%ebx
         :	        if (!scan->xs_continue_hot)
         :	        {
         :	                /* Switch to correct buffer if we don't have it already */
         :	                Buffer          prev_buf = scan->xs_cbuf;
         :
         :	                scan->xs_cbuf = ReleaseAndReadBuffer(scan->xs_cbuf,
    0.00 :	  4a55f4:       41 89 44 24 68          mov    %eax,0x68(%r12)
         :	                                                                                         ItemPointerGetBlockNumber(tid));
         :
         :	                /*
         :	                 * Prune page, but only if we weren't already on this page
         :	                 */
         :	                if (prev_buf != scan->xs_cbuf)
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:525
   33.33 :	  4a55f9:       0f 84 3f ff ff ff       je     4a553e <index_fetch_heap+0x1e>
         :	                        heap_page_prune_opt(scan->heapRelation, scan->xs_cbuf);
    0.00 :	  4a55ff:       49 8b 3c 24             mov    (%r12),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:526
   33.33 :	  4a5603:       89 c6                   mov    %eax,%esi
    0.00 :	  4a5605:       e8 46 a0 ff ff          callq  49f650 <heap_page_prune_opt>
    0.00 :	  4a560a:       e9 2f ff ff ff          jmpq   4a553e <index_fetch_heap+0x1e>
    0.00 :	  4a560f:       90                      nop
         :	         * AM to kill its entry for that TID (this will take effect in the next
         :	         * amgettuple call, in index_getnext_tid).  We do not do this when in
         :	         * recovery because it may violate MVCC to do so.  See comments in
         :	         * RelationGetIndexScan().
         :	         */
         :	        if (!scan->xactStartedInRecovery)
    0.00 :	  4a5610:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4a5613:       41 80 7c 24 33 00       cmpb   $0x0,0x33(%r12)
         :	                pgstat_count_heap_fetch(scan->indexRelation);
         :	                return &scan->xs_ctup;
         :	        }
         :
         :	        /* We've reached the end of the HOT chain. */
         :	        scan->xs_continue_hot = false;
    0.00 :	  4a5619:       41 c6 44 24 6d 00       movb   $0x0,0x6d(%r12)
         :	         * AM to kill its entry for that TID (this will take effect in the next
         :	         * amgettuple call, in index_getnext_tid).  We do not do this when in
         :	         * recovery because it may violate MVCC to do so.  See comments in
         :	         * RelationGetIndexScan().
         :	         */
         :	        if (!scan->xactStartedInRecovery)
    0.00 :	  4a561f:       75 a6                   jne    4a55c7 <index_fetch_heap+0xa7>
         :	                scan->kill_prior_tuple = all_dead;
    0.00 :	  4a5621:       0f b6 45 e7             movzbl -0x19(%rbp),%eax
    0.00 :	  4a5625:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4a5628:       41 88 44 24 31          mov    %al,0x31(%r12)
    0.00 :	  4a562d:       eb 98                   jmp    4a55c7 <index_fetch_heap+0xa7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:314
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:286
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:324
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004abe70 <btgettuple>:
         :	/*
         :	 *      btgettuple() -- Get the next tuple in the scan.
         :	 */
         :	Datum
         :	btgettuple(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4abe70:       55                      push   %rbp
    0.00 :	  4abe71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4abe74:       41 55                   push   %r13
    0.00 :	  4abe76:       41 54                   push   %r12
    0.00 :	  4abe78:       53                      push   %rbx
    0.00 :	  4abe79:       48 83 ec 08             sub    $0x8,%rsp
         :	        IndexScanDesc scan = (IndexScanDesc) PG_GETARG_POINTER(0);
    0.00 :	  4abe7d:       4c 8b 67 20             mov    0x20(%rdi),%r12
         :	        ScanDirection dir = (ScanDirection) PG_GETARG_INT32(1);
    0.00 :	  4abe81:       48 8b 4f 28             mov    0x28(%rdi),%rcx
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4abe85:       49 8b 5c 24 38          mov    0x38(%r12),%rbx
         :	        bool            res;
         :
         :	        /* btree indexes are never lossy */
         :	        scan->xs_recheck = false;
    0.00 :	  4abe8a:       41 c6 44 24 6c 00       movb   $0x0,0x6c(%r12)
         :	 */
         :	Datum
         :	btgettuple(PG_FUNCTION_ARGS)
         :	{
         :	        IndexScanDesc scan = (IndexScanDesc) PG_GETARG_POINTER(0);
         :	        ScanDirection dir = (ScanDirection) PG_GETARG_INT32(1);
    0.00 :	  4abe90:       41 89 cd                mov    %ecx,%r13d
         :	        /*
         :	         * If we have any array keys, initialize them during first call for a
         :	         * scan.  We can't do this in btrescan because we don't know the scan
         :	         * direction at that time.
         :	         */
         :	        if (so->numArrayKeys && !BTScanPosIsValid(so->currPos))
    0.00 :	  4abe93:       8b 53 18                mov    0x18(%rbx),%edx
    0.00 :	  4abe96:       85 d2                   test   %edx,%edx
    0.00 :	  4abe98:       74 7b                   je     4abf15 <btgettuple+0xa5>
    0.00 :	  4abe9a:       8b 43 54                mov    0x54(%rbx),%eax
    0.00 :	  4abe9d:       85 c0                   test   %eax,%eax
    0.00 :	  4abe9f:       75 74                   jne    4abf15 <btgettuple+0xa5>
         :	        {
         :	                /* punt if we have any unsatisfiable array keys */
         :	                if (so->numArrayKeys < 0)
    0.00 :	  4abea1:       31 c0                   xor    %eax,%eax
    0.00 :	  4abea3:       85 d2                   test   %edx,%edx
    0.00 :	  4abea5:       0f 88 97 00 00 00       js     4abf42 <btgettuple+0xd2>
         :	                        PG_RETURN_BOOL(false);
         :
         :	                _bt_start_array_keys(scan, dir);
    0.00 :	  4abeab:       89 ce                   mov    %ecx,%esi
    0.00 :	  4abead:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4abeb0:       e8 3b 1d 00 00          callq  4adbf0 <_bt_start_array_keys>
         :	                /*
         :	                 * If we've already initialized this scan, we can just advance it in
         :	                 * the appropriate direction.  If we haven't done so yet, we call
         :	                 * _bt_first() to get the first item in the scan.
         :	                 */
         :	                if (!BTScanPosIsValid(so->currPos))
    0.00 :	  4abeb5:       8b 43 54                mov    0x54(%rbx),%eax
    0.00 :	  4abeb8:       85 c0                   test   %eax,%eax
    0.00 :	  4abeba:       74 60                   je     4abf1c <btgettuple+0xac>
    0.00 :	  4abebc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                else
         :	                {
         :	                        /*
         :	                         * Check to see if we should kill the previously-fetched tuple.
         :	                         */
         :	                        if (scan->kill_prior_tuple)
    0.00 :	  4abec0:       41 80 7c 24 31 00       cmpb   $0x0,0x31(%r12)
    0.00 :	  4abec6:       74 28                   je     4abef0 <btgettuple+0x80>
         :	                                 * caller reverses direction in the indexscan then the same
         :	                                 * item might get entered multiple times. It's not worth
         :	                                 * trying to optimize that, so we don't detect it, but instead
         :	                                 * just forget any excess entries.
         :	                                 */
         :	                                if (so->killedItems == NULL)
    0.00 :	  4abec8:       48 83 7b 30 00          cmpq   $0x0,0x30(%rbx)
    0.00 :	  4abecd:       0f 1f 00                nopl   (%rax)
    0.00 :	  4abed0:       74 7e                   je     4abf50 <btgettuple+0xe0>
         :	                                        so->killedItems = (int *)
         :	                                                palloc(MaxIndexTuplesPerPage * sizeof(int));
         :	                                if (so->numKilled < MaxIndexTuplesPerPage)
    0.00 :	  4abed2:       8b 73 38                mov    0x38(%rbx),%esi
    0.00 :	  4abed5:       81 fe 97 01 00 00       cmp    $0x197,%esi
    0.00 :	  4abedb:       7f 13                   jg     4abef0 <btgettuple+0x80>
         :	                                        so->killedItems[so->numKilled++] = so->currPos.itemIndex;
    0.00 :	  4abedd:       8b 43 6c                mov    0x6c(%rbx),%eax
    0.00 :	  4abee0:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  4abee4:       48 63 ce                movslq %esi,%rcx
    0.00 :	  4abee7:       89 04 8a                mov    %eax,(%rdx,%rcx,4)
    0.00 :	  4abeea:       8d 46 01                lea    0x1(%rsi),%eax
    0.00 :	  4abeed:       89 43 38                mov    %eax,0x38(%rbx)
         :	                        }
         :
         :	                        /*
         :	                         * Now continue the scan.
         :	                         */
         :	                        res = _bt_next(scan, dir);
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:314
   33.33 :	  4abef0:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4abef3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4abef6:       e8 75 0c 00 00          callq  4acb70 <_bt_next>
         :	                }
         :
         :	                /* If we have a tuple, return it ... */
         :	                if (res)
    0.00 :	  4abefb:       84 c0                   test   %al,%al
    0.00 :	  4abefd:       75 2c                   jne    4abf2b <btgettuple+0xbb>
         :	                        break;
         :	                /* ... otherwise see if we have more array keys to deal with */
         :	        } while (so->numArrayKeys && _bt_advance_array_keys(scan, dir));
    0.00 :	  4abeff:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  4abf02:       85 c0                   test   %eax,%eax
    0.00 :	  4abf04:       74 3a                   je     4abf40 <btgettuple+0xd0>
    0.00 :	  4abf06:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4abf09:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4abf0c:       e8 5f 1d 00 00          callq  4adc70 <_bt_advance_array_keys>
    0.00 :	  4abf11:       84 c0                   test   %al,%al
    0.00 :	  4abf13:       74 2b                   je     4abf40 <btgettuple+0xd0>
         :	                /*
         :	                 * If we've already initialized this scan, we can just advance it in
         :	                 * the appropriate direction.  If we haven't done so yet, we call
         :	                 * _bt_first() to get the first item in the scan.
         :	                 */
         :	                if (!BTScanPosIsValid(so->currPos))
    0.00 :	  4abf15:       8b 43 54                mov    0x54(%rbx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:286
   33.33 :	  4abf18:       85 c0                   test   %eax,%eax
    0.00 :	  4abf1a:       75 a4                   jne    4abec0 <btgettuple+0x50>
         :	                        res = _bt_first(scan, dir);
    0.00 :	  4abf1c:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4abf1f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4abf22:       e8 69 13 00 00          callq  4ad290 <_bt_first>
         :	                         */
         :	                        res = _bt_next(scan, dir);
         :	                }
         :
         :	                /* If we have a tuple, return it ... */
         :	                if (res)
    0.00 :	  4abf27:       84 c0                   test   %al,%al
    0.00 :	  4abf29:       74 d4                   je     4abeff <btgettuple+0x8f>
         :	                        break;
         :	                /* ... otherwise see if we have more array keys to deal with */
         :	        } while (so->numArrayKeys && _bt_advance_array_keys(scan, dir));
         :
         :	        PG_RETURN_BOOL(res);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtree.c:324
   33.33 :	  4abf2b:       48 83 c4 08             add    $0x8,%rsp
         :	                        res = _bt_next(scan, dir);
         :	                }
         :
         :	                /* If we have a tuple, return it ... */
         :	                if (res)
         :	                        break;
    0.00 :	  4abf2f:       b8 01 00 00 00          mov    $0x1,%eax
         :	                /* ... otherwise see if we have more array keys to deal with */
         :	        } while (so->numArrayKeys && _bt_advance_array_keys(scan, dir));
         :
         :	        PG_RETURN_BOOL(res);
         :	}
    0.00 :	  4abf34:       5b                      pop    %rbx
    0.00 :	  4abf35:       41 5c                   pop    %r12
    0.00 :	  4abf37:       41 5d                   pop    %r13
    0.00 :	  4abf39:       c9                      leaveq 
    0.00 :	  4abf3a:       c3                      retq   
    0.00 :	  4abf3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                /* If we have a tuple, return it ... */
         :	                if (res)
         :	                        break;
         :	                /* ... otherwise see if we have more array keys to deal with */
         :	        } while (so->numArrayKeys && _bt_advance_array_keys(scan, dir));
    0.00 :	  4abf40:       31 c0                   xor    %eax,%eax
         :
         :	        PG_RETURN_BOOL(res);
         :	}
    0.00 :	  4abf42:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  4abf46:       5b                      pop    %rbx
    0.00 :	  4abf47:       41 5c                   pop    %r12
    0.00 :	  4abf49:       41 5d                   pop    %r13
    0.00 :	  4abf4b:       c9                      leaveq 
    0.00 :	  4abf4c:       c3                      retq   
    0.00 :	  4abf4d:       0f 1f 00                nopl   (%rax)
         :	                                 * item might get entered multiple times. It's not worth
         :	                                 * trying to optimize that, so we don't detect it, but instead
         :	                                 * just forget any excess entries.
         :	                                 */
         :	                                if (so->killedItems == NULL)
         :	                                        so->killedItems = (int *)
    0.00 :	  4abf50:       bf 60 06 00 00          mov    $0x660,%edi
    0.00 :	  4abf55:       e8 f6 cd 2e 00          callq  798d50 <palloc>
    0.00 :	  4abf5a:       48 89 43 30             mov    %rax,0x30(%rbx)
    0.00 :	  4abf5e:       e9 6f ff ff ff          jmpq   4abed2 <btgettuple+0x62>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:60
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:101
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:111
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ad100 <_bt_search>:
         :	 * any incomplete splits encountered during the search will be finished.
         :	 */
         :	BTStack
         :	_bt_search(Relation rel, int keysz, ScanKey scankey, bool nextkey,
         :	                   Buffer *bufP, int access)
         :	{
    0.00 :	  4ad100:       55                      push   %rbp
    0.00 :	  4ad101:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ad104:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:60
   33.33 :	  4ad106:       41 56                   push   %r14
    0.00 :	  4ad108:       41 55                   push   %r13
    0.00 :	  4ad10a:       41 54                   push   %r12
    0.00 :	  4ad10c:       41 89 cc                mov    %ecx,%r12d
    0.00 :	  4ad10f:       53                      push   %rbx
    0.00 :	  4ad110:       44 89 cb                mov    %r9d,%ebx
    0.00 :	  4ad113:       48 83 ec 48             sub    $0x48,%rsp
    0.00 :	  4ad117:       89 75 bc                mov    %esi,-0x44(%rbp)
         :	        BTStack         stack_in = NULL;
         :
         :	        /* Get the root page to start with */
         :	        *bufP = _bt_getroot(rel, access);
    0.00 :	  4ad11a:       44 89 ce                mov    %r9d,%esi
         :	 * any incomplete splits encountered during the search will be finished.
         :	 */
         :	BTStack
         :	_bt_search(Relation rel, int keysz, ScanKey scankey, bool nextkey,
         :	                   Buffer *bufP, int access)
         :	{
    0.00 :	  4ad11d:       48 89 7d c0             mov    %rdi,-0x40(%rbp)
    0.00 :	  4ad121:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
    0.00 :	  4ad125:       4c 89 45 a8             mov    %r8,-0x58(%rbp)
         :	        BTStack         stack_in = NULL;
         :
         :	        /* Get the root page to start with */
         :	        *bufP = _bt_getroot(rel, access);
    0.00 :	  4ad129:       e8 f2 da ff ff          callq  4aac20 <_bt_getroot>
    0.00 :	  4ad12e:       89 c6                   mov    %eax,%esi
    0.00 :	  4ad130:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :
         :	        /* If index is empty and access = BT_READ, no root page is created. */
         :	        if (!BufferIsValid(*bufP))
    0.00 :	  4ad134:       85 f6                   test   %esi,%esi
         :	                   Buffer *bufP, int access)
         :	{
         :	        BTStack         stack_in = NULL;
         :
         :	        /* Get the root page to start with */
         :	        *bufP = _bt_getroot(rel, access);
    0.00 :	  4ad136:       89 30                   mov    %esi,(%rax)
         :	                /* drop the read lock on the parent page, acquire one on the child */
         :	                *bufP = _bt_relandgetbuf(rel, *bufP, blkno, BT_READ);
         :
         :	                /* okay, all set to move down a level */
         :	                stack_in = new_stack;
         :	        }
    0.00 :	  4ad138:       48 c7 45 c8 00 00 00    movq   $0x0,-0x38(%rbp)
    0.00 :	  4ad13f:       00 
         :
         :	        /* Get the root page to start with */
         :	        *bufP = _bt_getroot(rel, access);
         :
         :	        /* If index is empty and access = BT_READ, no root page is created. */
         :	        if (!BufferIsValid(*bufP))
    0.00 :	  4ad140:       0f 84 2a 01 00 00       je     4ad270 <_bt_search+0x170>
    0.00 :	  4ad146:       31 c0                   xor    %eax,%eax
    0.00 :	  4ad148:       83 fb 02                cmp    $0x2,%ebx
    0.00 :	  4ad14b:       45 0f be e4             movsbl %r12b,%r12d
    0.00 :	  4ad14f:       0f 94 c0                sete   %al
    0.00 :	  4ad152:       44 89 65 d0             mov    %r12d,-0x30(%rbp)
    0.00 :	  4ad156:       89 45 d4                mov    %eax,-0x2c(%rbp)
    0.00 :	  4ad159:       e9 b5 00 00 00          jmpq   4ad213 <_bt_search+0x113>
    0.00 :	  4ad15e:       66 90                   xchg   %ax,%ax
         :	                *bufP = _bt_moveright(rel, *bufP, keysz, scankey, nextkey,
         :	                                                          (access == BT_WRITE), stack_in,
         :	                                                          BT_READ);
         :
         :	                /* if this is a leaf page, we're done */
         :	                page = BufferGetPage(*bufP);
    0.00 :	  4ad160:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  4ad163:       4c 63 e0                movslq %eax,%r12
    0.00 :	  4ad166:       49 c1 e4 0d             shl    $0xd,%r12
    0.00 :	  4ad16a:       4c 03 25 87 29 71 00    add    0x712987(%rip),%r12        # bbfaf8 <BufferBlocks>
         :	                opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :	                if (P_ISLEAF(opaque))
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:101
   33.33 :	  4ad171:       41 0f b7 44 24 10       movzwl 0x10(%r12),%eax
    0.00 :	  4ad177:       41 f6 44 04 0c 01       testb  $0x1,0xc(%r12,%rax,1)
    0.00 :	  4ad17d:       0f 85 ed 00 00 00       jne    4ad270 <_bt_search+0x170>
         :
         :	                /*
         :	                 * Find the appropriate item on the internal page, and get the child
         :	                 * page that it points to.
         :	                 */
         :	                offnum = _bt_binsrch(rel, *bufP, keysz, scankey, nextkey);
    0.00 :	  4ad183:       44 8b 45 d0             mov    -0x30(%rbp),%r8d
    0.00 :	  4ad187:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
    0.00 :	  4ad18b:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  4ad18e:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  4ad192:       e8 c9 fc ff ff          callq  4ace60 <_bt_binsrch>
    0.00 :	  4ad197:       41 89 c7                mov    %eax,%r15d
         :	                itemid = PageGetItemId(page, offnum);
         :	                itup = (IndexTuple) PageGetItem(page, itemid);
    0.00 :	  4ad19a:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4ad19d:       41 0f b7 5c 84 14       movzwl 0x14(%r12,%rax,4),%ebx
    0.00 :	  4ad1a3:       81 e3 ff 7f 00 00       and    $0x7fff,%ebx
    0.00 :	  4ad1a9:       49 8d 1c 1c             lea    (%r12,%rbx,1),%rbx
         :	                blkno = ItemPointerGetBlockNumber(&(itup->t_tid));
    0.00 :	  4ad1ad:       44 0f b7 2b             movzwl (%rbx),%r13d
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:111
   33.33 :	  4ad1b1:       0f b7 43 02             movzwl 0x2(%rbx),%eax
    0.00 :	  4ad1b5:       41 c1 e5 10             shl    $0x10,%r13d
    0.00 :	  4ad1b9:       41 09 c5                or     %eax,%r13d
         :	                par_blkno = BufferGetBlockNumber(*bufP);
    0.00 :	  4ad1bc:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  4ad1c0:       8b 38                   mov    (%rax),%edi
    0.00 :	  4ad1c2:       e8 69 6e 1c 00          callq  674030 <BufferGetBlockNumber>
         :	                 * moves right while we're working lower in the tree.  See the paper
         :	                 * by Lehman and Yao for how this is detected and handled. (We use the
         :	                 * child link to disambiguate duplicate keys in the index -- Lehman
         :	                 * and Yao disallow duplicate keys.)
         :	                 */
         :	                new_stack = (BTStack) palloc(sizeof(BTStackData));
    0.00 :	  4ad1c7:       bf 18 00 00 00          mov    $0x18,%edi
         :	                 */
         :	                offnum = _bt_binsrch(rel, *bufP, keysz, scankey, nextkey);
         :	                itemid = PageGetItemId(page, offnum);
         :	                itup = (IndexTuple) PageGetItem(page, itemid);
         :	                blkno = ItemPointerGetBlockNumber(&(itup->t_tid));
         :	                par_blkno = BufferGetBlockNumber(*bufP);
    0.00 :	  4ad1cc:       41 89 c6                mov    %eax,%r14d
         :	                 * moves right while we're working lower in the tree.  See the paper
         :	                 * by Lehman and Yao for how this is detected and handled. (We use the
         :	                 * child link to disambiguate duplicate keys in the index -- Lehman
         :	                 * and Yao disallow duplicate keys.)
         :	                 */
         :	                new_stack = (BTStack) palloc(sizeof(BTStackData));
    0.00 :	  4ad1cf:       e8 7c bb 2e 00          callq  798d50 <palloc>
         :	                new_stack->bts_blkno = par_blkno;
    0.00 :	  4ad1d4:       44 89 30                mov    %r14d,(%rax)
         :	                new_stack->bts_offset = offnum;
    0.00 :	  4ad1d7:       66 44 89 78 04          mov    %r15w,0x4(%rax)
         :	                 * moves right while we're working lower in the tree.  See the paper
         :	                 * by Lehman and Yao for how this is detected and handled. (We use the
         :	                 * child link to disambiguate duplicate keys in the index -- Lehman
         :	                 * and Yao disallow duplicate keys.)
         :	                 */
         :	                new_stack = (BTStack) palloc(sizeof(BTStackData));
    0.00 :	  4ad1dc:       49 89 c4                mov    %rax,%r12
         :	                new_stack->bts_blkno = par_blkno;
         :	                new_stack->bts_offset = offnum;
         :	                memcpy(&new_stack->bts_btentry, itup, sizeof(IndexTupleData));
    0.00 :	  4ad1df:       48 8b 03                mov    (%rbx),%rax
         :	                new_stack->bts_parent = stack_in;
         :
         :	                /* drop the read lock on the parent page, acquire one on the child */
         :	                *bufP = _bt_relandgetbuf(rel, *bufP, blkno, BT_READ);
    0.00 :	  4ad1e2:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4ad1e7:       44 89 ea                mov    %r13d,%edx
         :	                 * and Yao disallow duplicate keys.)
         :	                 */
         :	                new_stack = (BTStack) palloc(sizeof(BTStackData));
         :	                new_stack->bts_blkno = par_blkno;
         :	                new_stack->bts_offset = offnum;
         :	                memcpy(&new_stack->bts_btentry, itup, sizeof(IndexTupleData));
    0.00 :	  4ad1ea:       49 89 44 24 06          mov    %rax,0x6(%r12)
         :	                new_stack->bts_parent = stack_in;
    0.00 :	  4ad1ef:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  4ad1f3:       49 89 44 24 10          mov    %rax,0x10(%r12)
         :
         :	                /* drop the read lock on the parent page, acquire one on the child */
         :	                *bufP = _bt_relandgetbuf(rel, *bufP, blkno, BT_READ);
    0.00 :	  4ad1f8:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  4ad1fc:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  4ad200:       8b 30                   mov    (%rax),%esi
    0.00 :	  4ad202:       e8 d9 bd ff ff          callq  4a8fe0 <_bt_relandgetbuf>
    0.00 :	  4ad207:       89 c6                   mov    %eax,%esi
    0.00 :	  4ad209:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  4ad20d:       89 30                   mov    %esi,(%rax)
    0.00 :	  4ad20f:       4c 89 65 c8             mov    %r12,-0x38(%rbp)
         :	                 * incomplete split on the leaf page we're about to insert to, not on
         :	                 * any of the upper levels (they is taken care of in _bt_getstackbuf,
         :	                 * if the leaf page is split and we insert to the parent page).  But
         :	                 * this is a good opportunity to finish splits of internal pages too.
         :	                 */
         :	                *bufP = _bt_moveright(rel, *bufP, keysz, scankey, nextkey,
    0.00 :	  4ad213:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  4ad217:       44 8b 4d d4             mov    -0x2c(%rbp),%r9d
    0.00 :	  4ad21b:       44 8b 45 d0             mov    -0x30(%rbp),%r8d
    0.00 :	  4ad21f:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
    0.00 :	  4ad223:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  4ad226:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  4ad22a:       c7 44 24 08 01 00 00    movl   $0x1,0x8(%rsp)
    0.00 :	  4ad231:       00 
    0.00 :	  4ad232:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  4ad236:       e8 35 fd ff ff          callq  4acf70 <_bt_moveright>
    0.00 :	  4ad23b:       89 c6                   mov    %eax,%esi
    0.00 :	  4ad23d:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	                                                          (access == BT_WRITE), stack_in,
         :	                                                          BT_READ);
         :
         :	                /* if this is a leaf page, we're done */
         :	                page = BufferGetPage(*bufP);
    0.00 :	  4ad241:       85 f6                   test   %esi,%esi
         :	                 * incomplete split on the leaf page we're about to insert to, not on
         :	                 * any of the upper levels (they is taken care of in _bt_getstackbuf,
         :	                 * if the leaf page is split and we insert to the parent page).  But
         :	                 * this is a good opportunity to finish splits of internal pages too.
         :	                 */
         :	                *bufP = _bt_moveright(rel, *bufP, keysz, scankey, nextkey,
    0.00 :	  4ad243:       89 30                   mov    %esi,(%rax)
         :	                                                          (access == BT_WRITE), stack_in,
         :	                                                          BT_READ);
         :
         :	                /* if this is a leaf page, we're done */
         :	                page = BufferGetPage(*bufP);
    0.00 :	  4ad245:       0f 89 15 ff ff ff       jns    4ad160 <_bt_search+0x60>
    0.00 :	  4ad24b:       89 f0                   mov    %esi,%eax
    0.00 :	  4ad24d:       48 8b 15 c4 fe 6c 00    mov    0x6cfec4(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4ad254:       f7 d0                   not    %eax
    0.00 :	  4ad256:       48 98                   cltq   
    0.00 :	  4ad258:       4c 8b 24 c2             mov    (%rdx,%rax,8),%r12
         :	                opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :	                if (P_ISLEAF(opaque))
    0.00 :	  4ad25c:       41 0f b7 44 24 10       movzwl 0x10(%r12),%eax
    0.00 :	  4ad262:       41 f6 44 04 0c 01       testb  $0x1,0xc(%r12,%rax,1)
    0.00 :	  4ad268:       0f 84 15 ff ff ff       je     4ad183 <_bt_search+0x83>
    0.00 :	  4ad26e:       66 90                   xchg   %ax,%ax
         :	                /* okay, all set to move down a level */
         :	                stack_in = new_stack;
         :	        }
         :
         :	        return stack_in;
         :	}
    0.00 :	  4ad270:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  4ad274:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  4ad278:       5b                      pop    %rbx
    0.00 :	  4ad279:       41 5c                   pop    %r12
    0.00 :	  4ad27b:       41 5d                   pop    %r13
    0.00 :	  4ad27d:       41 5e                   pop    %r14
    0.00 :	  4ad27f:       41 5f                   pop    %r15
    0.00 :	  4ad281:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:628
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:806
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:940
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ad290 <_bt_first>:
         :	 * Within this routine, we build a temporary insertion-type scankey to use
         :	 * in locating the scan start position.
         :	 */
         :	bool
         :	_bt_first(IndexScanDesc scan, ScanDirection dir)
         :	{
    0.00 :	  4ad290:       55                      push   %rbp
    0.00 :	  4ad291:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ad294:       41 57                   push   %r15
    0.00 :	  4ad296:       41 56                   push   %r14
    0.00 :	  4ad298:       41 55                   push   %r13
    0.00 :	  4ad29a:       41 54                   push   %r12
    0.00 :	  4ad29c:       53                      push   %rbx
    0.00 :	  4ad29d:       48 81 ec 68 13 00 00    sub    $0x1368,%rsp
    0.00 :	  4ad2a4:       48 89 bd a0 ec ff ff    mov    %rdi,-0x1360(%rbp)
    0.00 :	  4ad2ab:       89 b5 9c ec ff ff       mov    %esi,-0x1364(%rbp)
         :	        Relation        rel = scan->indexRelation;
    0.00 :	  4ad2b1:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  4ad2b5:       48 89 85 a8 ec ff ff    mov    %rax,-0x1358(%rbp)
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4ad2bc:       48 8b 57 38             mov    0x38(%rdi),%rdx
    0.00 :	  4ad2c0:       48 89 95 b0 ec ff ff    mov    %rdx,-0x1350(%rbp)
         :	        int                     keysCount = 0;
         :	        int                     i;
         :	        StrategyNumber strat_total;
         :	        BTScanPosItem *currItem;
         :
         :	        pgstat_count_index_scan(rel);
    0.00 :	  4ad2c7:       48 8b 80 38 01 00 00    mov    0x138(%rax),%rax
    0.00 :	  4ad2ce:       48 85 c0                test   %rax,%rax
    0.00 :	  4ad2d1:       74 05                   je     4ad2d8 <_bt_first+0x48>
    0.00 :	  4ad2d3:       48 83 40 10 01          addq   $0x1,0x10(%rax)
         :
         :	        /*
         :	         * Examine the scan keys and eliminate any redundant keys; also mark the
         :	         * keys that must be matched to continue the scan.
         :	         */
         :	        _bt_preprocess_keys(scan);
    0.00 :	  4ad2d8:       48 8b bd a0 ec ff ff    mov    -0x1360(%rbp),%rdi
    0.00 :	  4ad2df:       e8 ec 18 00 00          callq  4aebd0 <_bt_preprocess_keys>
         :
         :	        /*
         :	         * Quit now if _bt_preprocess_keys() discovered that the scan keys can
         :	         * never be satisfied (eg, x == 1 AND x > 2).
         :	         */
         :	        if (!so->qual_ok)
    0.00 :	  4ad2e4:       48 8b 85 b0 ec ff ff    mov    -0x1350(%rbp),%rax
    0.00 :	  4ad2eb:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  4ad2ee:       0f 84 cc 00 00 00       je     4ad3c0 <_bt_first+0x130>
         :	         * The selected scan keys (at most one per index column) are remembered by
         :	         * storing their addresses into the local startKeys[] array.
         :	         *----------
         :	         */
         :	        strat_total = BTEqualStrategyNumber;
         :	        if (so->numberOfKeys > 0)
    0.00 :	  4ad2f4:       8b 50 04                mov    0x4(%rax),%edx
    0.00 :	  4ad2f7:       85 d2                   test   %edx,%edx
    0.00 :	  4ad2f9:       0f 8e 31 04 00 00       jle    4ad730 <_bt_first+0x4a0>
         :	                /*
         :	                 * Loop iterates from 0 to numberOfKeys inclusive; we use the last
         :	                 * pass to handle after-last-key processing.  Actual exit from the
         :	                 * loop is at one of the "break" statements below.
         :	                 */
         :	                for (cur = so->keyData, i = 0;; cur++, i++)
    0.00 :	  4ad2ff:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  4ad303:       45 31 ff                xor    %r15d,%r15d
    0.00 :	  4ad306:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ad309:       66 c7 85 be ec ff ff    movw   $0x3,-0x1342(%rbp)
    0.00 :	  4ad310:       03 00 
    0.00 :	  4ad312:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  4ad318:       31 db                   xor    %ebx,%ebx
    0.00 :	  4ad31a:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad31c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                {
         :	                        if (i >= so->numberOfKeys || cur->sk_attno != curattr)
    0.00 :	  4ad320:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  4ad323:       7d 0c                   jge    4ad331 <_bt_first+0xa1>
    0.00 :	  4ad325:       41 0f b7 4c 24 04       movzwl 0x4(%r12),%ecx
    0.00 :	  4ad32b:       66 44 39 f1             cmp    %r14w,%cx
    0.00 :	  4ad32f:       74 74                   je     4ad3a5 <_bt_first+0x115>
         :	                        {
         :	                                /*
         :	                                 * Done looking at keys for curattr.  If we didn't find a
         :	                                 * usable boundary key, see if we can deduce a NOT NULL key.
         :	                                 */
         :	                                if (chosen == NULL && impliesNN != NULL &&
    0.00 :	  4ad331:       48 85 db                test   %rbx,%rbx
    0.00 :	  4ad334:       0f 84 fe 00 00 00       je     4ad438 <_bt_first+0x1a8>
         :	                                 * If we still didn't find a usable boundary key, quit; else
         :	                                 * save the boundary key pointer in startKeys.
         :	                                 */
         :	                                if (chosen == NULL)
         :	                                        break;
         :	                                startKeys[keysCount++] = chosen;
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:628
   33.33 :	  4ad33a:       49 63 c7                movslq %r15d,%rax
    0.00 :	  4ad33d:       41 83 c7 01             add    $0x1,%r15d
    0.00 :	  4ad341:       48 89 9c c5 c0 fe ff    mov    %rbx,-0x140(%rbp,%rax,8)
    0.00 :	  4ad348:       ff 
         :
         :	                                /*
         :	                                 * Adjust strat_total, and quit if we have stored a > or <
         :	                                 * key.
         :	                                 */
         :	                                strat = chosen->sk_strategy;
    0.00 :	  4ad349:       0f b7 43 06             movzwl 0x6(%rbx),%eax
         :	                                if (strat != BTEqualStrategyNumber)
    0.00 :	  4ad34d:       66 83 f8 03             cmp    $0x3,%ax
    0.00 :	  4ad351:       74 1b                   je     4ad36e <_bt_first+0xde>
         :	                                {
         :	                                        strat_total = strat;
         :	                                        if (strat == BTGreaterStrategyNumber ||
    0.00 :	  4ad353:       66 83 f8 05             cmp    $0x5,%ax
    0.00 :	  4ad357:       0f 84 33 05 00 00       je     4ad890 <_bt_first+0x600>
    0.00 :	  4ad35d:       66 83 f8 01             cmp    $0x1,%ax
    0.00 :	  4ad361:       0f 84 29 05 00 00       je     4ad890 <_bt_first+0x600>
         :	                                                strat == BTLessStrategyNumber)
         :	                                                break;
    0.00 :	  4ad367:       66 89 85 be ec ff ff    mov    %ax,-0x1342(%rbp)
         :	                                /*
         :	                                 * Done if that was the last attribute, or if next key is not
         :	                                 * in sequence (implying no boundary key is available for the
         :	                                 * next attribute).
         :	                                 */
         :	                                if (i >= so->numberOfKeys ||
    0.00 :	  4ad36e:       48 8b 95 b0 ec ff ff    mov    -0x1350(%rbp),%rdx
    0.00 :	  4ad375:       44 3b 6a 04             cmp    0x4(%rdx),%r13d
    0.00 :	  4ad379:       0f 8d e0 00 00 00       jge    4ad45f <_bt_first+0x1cf>
    0.00 :	  4ad37f:       41 0f b7 4c 24 04       movzwl 0x4(%r12),%ecx
    0.00 :	  4ad385:       41 0f bf c6             movswl %r14w,%eax
    0.00 :	  4ad389:       83 c0 01                add    $0x1,%eax
    0.00 :	  4ad38c:       0f bf d1                movswl %cx,%edx
    0.00 :	  4ad38f:       39 c2                   cmp    %eax,%edx
    0.00 :	  4ad391:       0f 85 c8 00 00 00       jne    4ad45f <_bt_first+0x1cf>
    0.00 :	  4ad397:       48 8b 85 b0 ec ff ff    mov    -0x1350(%rbp),%rax
    0.00 :	  4ad39e:       31 db                   xor    %ebx,%ebx
    0.00 :	  4ad3a0:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad3a2:       8b 50 04                mov    0x4(%rax),%edx
         :	                         *
         :	                         * If not, does it imply a NOT NULL constraint?  (Because
         :	                         * SK_SEARCHNULL keys are always assigned BTEqualStrategyNumber,
         :	                         * *any* inequality key works for that; we need not test.)
         :	                         */
         :	                        switch (cur->sk_strategy)
    0.00 :	  4ad3a5:       66 41 83 7c 24 06 05    cmpw   $0x5,0x6(%r12)
    0.00 :	  4ad3ac:       77 4a                   ja     4ad3f8 <_bt_first+0x168>
    0.00 :	  4ad3ae:       41 0f b7 44 24 06       movzwl 0x6(%r12),%eax
    0.00 :	  4ad3b4:       ff 24 c5 60 48 7b 00    jmpq   *0x7b4860(,%rax,8)
    0.00 :	  4ad3bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ad3c0:       31 d2                   xor    %edx,%edx
         :
         :	        return true;
         :	}
    0.00 :	  4ad3c2:       48 81 c4 68 13 00 00    add    $0x1368,%rsp
    0.00 :	  4ad3c9:       89 d0                   mov    %edx,%eax
    0.00 :	  4ad3cb:       5b                      pop    %rbx
    0.00 :	  4ad3cc:       41 5c                   pop    %r12
    0.00 :	  4ad3ce:       41 5d                   pop    %r13
    0.00 :	  4ad3d0:       41 5e                   pop    %r14
    0.00 :	  4ad3d2:       41 5f                   pop    %r15
    0.00 :	  4ad3d4:       c9                      leaveq 
    0.00 :	  4ad3d5:       c3                      retq   
    0.00 :	  4ad3d6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ad3dd:       00 00 00 
         :	                                        /* override any non-equality choice */
         :	                                        chosen = cur;
         :	                                        break;
         :	                                case BTGreaterEqualStrategyNumber:
         :	                                case BTGreaterStrategyNumber:
         :	                                        if (chosen == NULL)
    0.00 :	  4ad3e0:       48 85 db                test   %rbx,%rbx
    0.00 :	  4ad3e3:       75 13                   jne    4ad3f8 <_bt_first+0x168>
         :	                                        {
         :	                                                if (ScanDirectionIsForward(dir))
    0.00 :	  4ad3e5:       83 bd 9c ec ff ff 01    cmpl   $0x1,-0x1364(%rbp)
    0.00 :	  4ad3ec:       74 32                   je     4ad420 <_bt_first+0x190>
    0.00 :	  4ad3ee:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  4ad3f1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Loop iterates from 0 to numberOfKeys inclusive; we use the last
         :	                 * pass to handle after-last-key processing.  Actual exit from the
         :	                 * loop is at one of the "break" statements below.
         :	                 */
         :	                for (cur = so->keyData, i = 0;; cur++, i++)
    0.00 :	  4ad3f8:       49 83 c4 48             add    $0x48,%r12
    0.00 :	  4ad3fc:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  4ad400:       41 89 ce                mov    %ecx,%r14d
         :	                                                else
         :	                                                        impliesNN = cur;
         :	                                        }
         :	                                        break;
         :	                        }
         :	                }
    0.00 :	  4ad403:       e9 18 ff ff ff          jmpq   4ad320 <_bt_first+0x90>
    0.00 :	  4ad408:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4ad40f:       00 
         :	                         */
         :	                        switch (cur->sk_strategy)
         :	                        {
         :	                                case BTLessStrategyNumber:
         :	                                case BTLessEqualStrategyNumber:
         :	                                        if (chosen == NULL)
    0.00 :	  4ad410:       48 85 db                test   %rbx,%rbx
    0.00 :	  4ad413:       75 e3                   jne    4ad3f8 <_bt_first+0x168>
         :	                                        {
         :	                                                if (ScanDirectionIsBackward(dir))
    0.00 :	  4ad415:       83 bd 9c ec ff ff ff    cmpl   $0xffffffff,-0x1364(%rbp)
    0.00 :	  4ad41c:       75 d0                   jne    4ad3ee <_bt_first+0x15e>
    0.00 :	  4ad41e:       66 90                   xchg   %ax,%ax
         :	                                        break;
         :	                                case BTGreaterEqualStrategyNumber:
         :	                                case BTGreaterStrategyNumber:
         :	                                        if (chosen == NULL)
         :	                                        {
         :	                                                if (ScanDirectionIsForward(dir))
    0.00 :	  4ad420:       4c 89 e3                mov    %r12,%rbx
         :	                /*
         :	                 * Loop iterates from 0 to numberOfKeys inclusive; we use the last
         :	                 * pass to handle after-last-key processing.  Actual exit from the
         :	                 * loop is at one of the "break" statements below.
         :	                 */
         :	                for (cur = so->keyData, i = 0;; cur++, i++)
    0.00 :	  4ad423:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  4ad427:       49 83 c4 48             add    $0x48,%r12
    0.00 :	  4ad42b:       41 89 ce                mov    %ecx,%r14d
    0.00 :	  4ad42e:       e9 ed fe ff ff          jmpq   4ad320 <_bt_first+0x90>
    0.00 :	  4ad433:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        {
         :	                                /*
         :	                                 * Done looking at keys for curattr.  If we didn't find a
         :	                                 * usable boundary key, see if we can deduce a NOT NULL key.
         :	                                 */
         :	                                if (chosen == NULL && impliesNN != NULL &&
    0.00 :	  4ad438:       48 85 f6                test   %rsi,%rsi
    0.00 :	  4ad43b:       74 22                   je     4ad45f <_bt_first+0x1cf>
    0.00 :	  4ad43d:       8b 36                   mov    (%rsi),%esi
    0.00 :	  4ad43f:       89 f2                   mov    %esi,%edx
    0.00 :	  4ad441:       81 e2 00 00 00 02       and    $0x2000000,%edx
    0.00 :	  4ad447:       0f 84 73 02 00 00       je     4ad6c0 <_bt_first+0x430>
    0.00 :	  4ad44d:       83 bd 9c ec ff ff 01    cmpl   $0x1,-0x1364(%rbp)
    0.00 :	  4ad454:       0f 94 c0                sete   %al
    0.00 :	  4ad457:       84 c0                   test   %al,%al
    0.00 :	  4ad459:       0f 85 09 02 00 00       jne    4ad668 <_bt_first+0x3d8>
         :	        /*
         :	         * If we found no usable boundary keys, we have to start from one end of
         :	         * the tree.  Walk down that edge to the first or last key, and scan from
         :	         * there.
         :	         */
         :	        if (keysCount == 0)
    0.00 :	  4ad45f:       41 83 ff 00             cmp    $0x0,%r15d
    0.00 :	  4ad463:       0f 84 c7 02 00 00       je     4ad730 <_bt_first+0x4a0>
         :	         * insertion scankey we can use to search for the boundary point we
         :	         * identified above.  The insertion scankey is built in the local
         :	         * scankeys[] array, using the keys identified by startKeys[].
         :	         */
         :	        Assert(keysCount <= INDEX_MAX_KEYS);
         :	        for (i = 0; i < keysCount; i++)
    0.00 :	  4ad469:       0f 8e b5 01 00 00       jle    4ad624 <_bt_first+0x394>
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ad46f:       48 8d 8d c0 f5 ff ff    lea    -0xa40(%rbp),%rcx
         :	                         * scheme.  But, by the same token, if we aren't able to use all
         :	                         * the row members, then the part of the row comparison that we
         :	                         * did use has to be treated as just a ">=" or "<=" condition, and
         :	                         * so we'd better adjust strat_total accordingly.
         :	                         */
         :	                        if (i == keysCount - 1)
    0.00 :	  4ad476:       41 8d 47 ff             lea    -0x1(%r15),%eax
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ad47a:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ad47d:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  4ad480:       48 89 8d 90 ec ff ff    mov    %rcx,-0x1370(%rbp)
    0.00 :	  4ad487:       48 89 cb                mov    %rcx,%rbx
         :	                         * scheme.  But, by the same token, if we aren't able to use all
         :	                         * the row members, then the part of the row comparison that we
         :	                         * did use has to be treated as just a ">=" or "<=" condition, and
         :	                         * so we'd better adjust strat_total accordingly.
         :	                         */
         :	                        if (i == keysCount - 1)
    0.00 :	  4ad48a:       89 85 8c ec ff ff       mov    %eax,-0x1374(%rbp)
    0.00 :	  4ad490:       eb 7c                   jmp    4ad50e <_bt_first+0x27e>
    0.00 :	  4ad492:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * have sk_func = 3-way-comparison function), but we have to watch
         :	                         * out for nulls, which _bt_preprocess_keys didn't check. A null
         :	                         * in the first row member makes the condition unmatchable, just
         :	                         * like qual_ok = false.
         :	                         */
         :	                        ScanKey         subkey = (ScanKey) DatumGetPointer(cur->sk_argument);
    0.00 :	  4ad498:       49 8b 4c 24 40          mov    0x40(%r12),%rcx
         :
         :	                        Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :	                        if (subkey->sk_flags & SK_ISNULL)
    0.00 :	  4ad49d:       f6 01 01                testb  $0x1,(%rcx)
    0.00 :	  4ad4a0:       0f 85 1a ff ff ff       jne    4ad3c0 <_bt_first+0x130>
         :	                                return false;
         :	                        memcpy(scankeys + i, subkey, sizeof(ScanKeyData));
    0.00 :	  4ad4a6:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  4ad4a9:       48 89 03                mov    %rax,(%rbx)
    0.00 :	  4ad4ac:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  4ad4b0:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  4ad4b4:       48 8b 41 10             mov    0x10(%rcx),%rax
    0.00 :	  4ad4b8:       48 89 43 10             mov    %rax,0x10(%rbx)
    0.00 :	  4ad4bc:       48 8b 41 18             mov    0x18(%rcx),%rax
    0.00 :	  4ad4c0:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  4ad4c4:       48 8b 41 20             mov    0x20(%rcx),%rax
    0.00 :	  4ad4c8:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  4ad4cc:       48 8b 41 28             mov    0x28(%rcx),%rax
    0.00 :	  4ad4d0:       48 89 43 28             mov    %rax,0x28(%rbx)
    0.00 :	  4ad4d4:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  4ad4d8:       48 89 43 30             mov    %rax,0x30(%rbx)
    0.00 :	  4ad4dc:       48 8b 41 38             mov    0x38(%rcx),%rax
    0.00 :	  4ad4e0:       48 89 43 38             mov    %rax,0x38(%rbx)
    0.00 :	  4ad4e4:       48 8b 41 40             mov    0x40(%rcx),%rax
    0.00 :	  4ad4e8:       48 89 43 40             mov    %rax,0x40(%rbx)
         :	                         * scheme.  But, by the same token, if we aren't able to use all
         :	                         * the row members, then the part of the row comparison that we
         :	                         * did use has to be treated as just a ">=" or "<=" condition, and
         :	                         * so we'd better adjust strat_total accordingly.
         :	                         */
         :	                        if (i == keysCount - 1)
    0.00 :	  4ad4ec:       44 39 ad 8c ec ff ff    cmp    %r13d,-0x1374(%rbp)
    0.00 :	  4ad4f3:       0f 84 9a 00 00 00       je     4ad593 <_bt_first+0x303>
         :	         * insertion scankey we can use to search for the boundary point we
         :	         * identified above.  The insertion scankey is built in the local
         :	         * scankeys[] array, using the keys identified by startKeys[].
         :	         */
         :	        Assert(keysCount <= INDEX_MAX_KEYS);
         :	        for (i = 0; i < keysCount; i++)
    0.00 :	  4ad4f9:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  4ad4fd:       48 83 c3 48             add    $0x48,%rbx
    0.00 :	  4ad501:       49 83 c6 04             add    $0x4,%r14
    0.00 :	  4ad505:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  4ad508:       0f 8e 16 01 00 00       jle    4ad624 <_bt_first+0x394>
         :	        {
         :	                ScanKey         cur = startKeys[i];
    0.00 :	  4ad50e:       4e 8b a4 75 c0 fe ff    mov    -0x140(%rbp,%r14,2),%r12
    0.00 :	  4ad515:       ff 
         :
         :	                Assert(cur->sk_attno == i + 1);
         :
         :	                if (cur->sk_flags & SK_ROW_HEADER)
    0.00 :	  4ad516:       41 f6 04 24 04          testb  $0x4,(%r12)
    0.00 :	  4ad51b:       0f 85 77 ff ff ff       jne    4ad498 <_bt_first+0x208>
         :	                         *
         :	                         * We support the convention that sk_subtype == InvalidOid means
         :	                         * the opclass input type; this is a hack to simplify life for
         :	                         * ScanKeyInit().
         :	                         */
         :	                        if (cur->sk_subtype == rel->rd_opcintype[i] ||
    0.00 :	  4ad521:       48 8b 8d a8 ec ff ff    mov    -0x1358(%rbp),%rcx
    0.00 :	  4ad528:       41 8b 54 24 08          mov    0x8(%r12),%edx
    0.00 :	  4ad52d:       48 8b 81 d0 00 00 00    mov    0xd0(%rcx),%rax
    0.00 :	  4ad534:       42 8b 34 30             mov    (%rax,%r14,1),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:806
   33.33 :	  4ad538:       39 f2                   cmp    %esi,%edx
    0.00 :	  4ad53a:       74 08                   je     4ad544 <_bt_first+0x2b4>
    0.00 :	  4ad53c:       85 d2                   test   %edx,%edx
    0.00 :	  4ad53e:       0f 85 8c 01 00 00       jne    4ad6d0 <_bt_first+0x440>
         :	                                cur->sk_subtype == InvalidOid)
         :	                        {
         :	                                FmgrInfo   *procinfo;
         :
         :	                                procinfo = index_getprocinfo(rel, cur->sk_attno, BTORDER_PROC);
    0.00 :	  4ad544:       41 0f bf 74 24 04       movswl 0x4(%r12),%esi
    0.00 :	  4ad54a:       48 8b bd a8 ec ff ff    mov    -0x1358(%rbp),%rdi
    0.00 :	  4ad551:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4ad556:       e8 65 7b ff ff          callq  4a50c0 <index_getprocinfo>
         :	                                ScanKeyEntryInitializeWithInfo(scankeys + i,
    0.00 :	  4ad55b:       49 8b 4c 24 40          mov    0x40(%r12),%rcx
    0.00 :	  4ad560:       41 0f bf 54 24 04       movswl 0x4(%r12),%edx
    0.00 :	  4ad566:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4ad569:       45 8b 4c 24 0c          mov    0xc(%r12),%r9d
    0.00 :	  4ad56e:       45 8b 44 24 08          mov    0x8(%r12),%r8d
    0.00 :	  4ad573:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  4ad577:       48 89 4c 24 08          mov    %rcx,0x8(%rsp)
    0.00 :	  4ad57c:       41 8b 34 24             mov    (%r12),%esi
    0.00 :	  4ad580:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ad582:       e8 b9 65 fc ff          callq  473b40 <ScanKeyEntryInitializeWithInfo>
         :	                         *
         :	                         * We support the convention that sk_subtype == InvalidOid means
         :	                         * the opclass input type; this is a hack to simplify life for
         :	                         * ScanKeyInit().
         :	                         */
         :	                        if (cur->sk_subtype == rel->rd_opcintype[i] ||
    0.00 :	  4ad587:       e9 6d ff ff ff          jmpq   4ad4f9 <_bt_first+0x269>
    0.00 :	  4ad58c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                        if (subkey->sk_flags & SK_ISNULL)
         :	                                                break;  /* can't use null keys */
         :	                                        Assert(keysCount < INDEX_MAX_KEYS);
         :	                                        memcpy(scankeys + keysCount, subkey, sizeof(ScanKeyData));
         :	                                        keysCount++;
         :	                                        if (subkey->sk_flags & SK_ROW_END)
    0.00 :	  4ad590:       41 89 f7                mov    %esi,%r15d
         :	                                bool            used_all_subkeys = false;
         :
         :	                                Assert(!(subkey->sk_flags & SK_ROW_END));
         :	                                for (;;)
         :	                                {
         :	                                        subkey++;
    0.00 :	  4ad593:       48 83 c1 48             add    $0x48,%rcx
         :	                                        Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :	                                        if (subkey->sk_attno != keysCount + 1)
    0.00 :	  4ad597:       41 8d 47 01             lea    0x1(%r15),%eax
    0.00 :	  4ad59b:       0f bf 71 04             movswl 0x4(%rcx),%esi
    0.00 :	  4ad59f:       39 c6                   cmp    %eax,%esi
    0.00 :	  4ad5a1:       0f 85 f1 05 00 00       jne    4adb98 <_bt_first+0x908>
         :	                                                break;  /* out-of-sequence, can't use it */
         :	                                        if (subkey->sk_strategy != cur->sk_strategy)
    0.00 :	  4ad5a7:       0f b7 41 06             movzwl 0x6(%rcx),%eax
    0.00 :	  4ad5ab:       66 41 3b 44 24 06       cmp    0x6(%r12),%ax
    0.00 :	  4ad5b1:       0f 85 e1 05 00 00       jne    4adb98 <_bt_first+0x908>
         :	                                                break;  /* wrong direction, can't use it */
         :	                                        if (subkey->sk_flags & SK_ISNULL)
    0.00 :	  4ad5b7:       f6 01 01                testb  $0x1,(%rcx)
    0.00 :	  4ad5ba:       0f 85 d8 05 00 00       jne    4adb98 <_bt_first+0x908>
         :	                                                break;  /* can't use null keys */
         :	                                        Assert(keysCount < INDEX_MAX_KEYS);
         :	                                        memcpy(scankeys + keysCount, subkey, sizeof(ScanKeyData));
    0.00 :	  4ad5c0:       48 8b 95 90 ec ff ff    mov    -0x1370(%rbp),%rdx
    0.00 :	  4ad5c7:       49 63 c7                movslq %r15d,%rax
    0.00 :	  4ad5ca:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	  4ad5ce:       48 8d 04 c2             lea    (%rdx,%rax,8),%rax
    0.00 :	  4ad5d2:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	  4ad5d5:       48 89 10                mov    %rdx,(%rax)
    0.00 :	  4ad5d8:       48 8b 51 08             mov    0x8(%rcx),%rdx
    0.00 :	  4ad5dc:       48 89 50 08             mov    %rdx,0x8(%rax)
    0.00 :	  4ad5e0:       48 8b 51 10             mov    0x10(%rcx),%rdx
    0.00 :	  4ad5e4:       48 89 50 10             mov    %rdx,0x10(%rax)
    0.00 :	  4ad5e8:       48 8b 51 18             mov    0x18(%rcx),%rdx
    0.00 :	  4ad5ec:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	  4ad5f0:       48 8b 51 20             mov    0x20(%rcx),%rdx
    0.00 :	  4ad5f4:       48 89 50 20             mov    %rdx,0x20(%rax)
    0.00 :	  4ad5f8:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  4ad5fc:       48 89 50 28             mov    %rdx,0x28(%rax)
    0.00 :	  4ad600:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  4ad604:       48 89 50 30             mov    %rdx,0x30(%rax)
    0.00 :	  4ad608:       48 8b 51 38             mov    0x38(%rcx),%rdx
    0.00 :	  4ad60c:       48 89 50 38             mov    %rdx,0x38(%rax)
    0.00 :	  4ad610:       48 8b 51 40             mov    0x40(%rcx),%rdx
    0.00 :	  4ad614:       48 89 50 40             mov    %rdx,0x40(%rax)
         :	                                        keysCount++;
         :	                                        if (subkey->sk_flags & SK_ROW_END)
    0.00 :	  4ad618:       f6 01 10                testb  $0x10,(%rcx)
    0.00 :	  4ad61b:       0f 84 6f ff ff ff       je     4ad590 <_bt_first+0x300>
    0.00 :	  4ad621:       41 89 f7                mov    %esi,%r15d
         :	         *
         :	         * If goback = true, we will then step back one item, while if
         :	         * goback = false, we will start the scan on the located item.
         :	         *----------
         :	         */
         :	        switch (strat_total)
    0.00 :	  4ad624:       66 83 bd be ec ff ff    cmpw   $0x5,-0x1342(%rbp)
    0.00 :	  4ad62b:       05 
    0.00 :	  4ad62c:       0f 86 4e 02 00 00       jbe    4ad880 <_bt_first+0x5f0>
         :	                        goback = false;
         :	                        break;
         :
         :	                default:
         :	                        /* can't get here, but keep compiler quiet */
         :	                        elog(ERROR, "unrecognized strat_total: %d", (int) strat_total);
    0.00 :	  4ad632:       ba df 48 7b 00          mov    $0x7b48df,%edx
    0.00 :	  4ad637:       be a4 03 00 00          mov    $0x3a4,%esi
    0.00 :	  4ad63c:       bf 70 47 7b 00          mov    $0x7b4770,%edi
    0.00 :	  4ad641:       e8 da dd 2c 00          callq  77b420 <elog_start>
    0.00 :	  4ad646:       0f b7 95 be ec ff ff    movzwl -0x1342(%rbp),%edx
    0.00 :	  4ad64d:       be 97 47 7b 00          mov    $0x7b4797,%esi
    0.00 :	  4ad652:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4ad657:       31 c0                   xor    %eax,%eax
    0.00 :	  4ad659:       e8 d2 db 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4ad65e:       e8 6d be fb ff          callq  4694d0 <abort@plt>
    0.00 :	  4ad663:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                        ((impliesNN->sk_flags & SK_BT_NULLS_FIRST) ?
         :	                                         ScanDirectionIsForward(dir) :
         :	                                         ScanDirectionIsBackward(dir)))
         :	                                {
         :	                                        /* Yes, so build the key in notnullkeys[keysCount] */
         :	                                        chosen = &notnullkeys[keysCount];
    0.00 :	  4ad668:       49 63 c7                movslq %r15d,%rax
         :	                                        ScanKeyEntryInitialize(chosen,
    0.00 :	  4ad66b:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  4ad66e:       41 0f bf d6             movswl %r14w,%edx
         :	                                        ((impliesNN->sk_flags & SK_BT_NULLS_FIRST) ?
         :	                                         ScanDirectionIsForward(dir) :
         :	                                         ScanDirectionIsBackward(dir)))
         :	                                {
         :	                                        /* Yes, so build the key in notnullkeys[keysCount] */
         :	                                        chosen = &notnullkeys[keysCount];
    0.00 :	  4ad672:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
         :	                                        ScanKeyEntryInitialize(chosen,
    0.00 :	  4ad676:       19 c9                   sbb    %ecx,%ecx
    0.00 :	  4ad678:       81 e6 00 00 00 03       and    $0x3000000,%esi
    0.00 :	  4ad67e:       83 e1 fc                and    $0xfffffffc,%ecx
    0.00 :	  4ad681:       40 80 ce 81             or     $0x81,%sil
    0.00 :	  4ad685:       45 31 c9                xor    %r9d,%r9d
         :	                                        ((impliesNN->sk_flags & SK_BT_NULLS_FIRST) ?
         :	                                         ScanDirectionIsForward(dir) :
         :	                                         ScanDirectionIsBackward(dir)))
         :	                                {
         :	                                        /* Yes, so build the key in notnullkeys[keysCount] */
         :	                                        chosen = &notnullkeys[keysCount];
    0.00 :	  4ad688:       48 8d 9c c5 c0 ec ff    lea    -0x1340(%rbp,%rax,8),%rbx
    0.00 :	  4ad68f:       ff 
         :	                                        ScanKeyEntryInitialize(chosen,
    0.00 :	  4ad690:       83 c1 05                add    $0x5,%ecx
    0.00 :	  4ad693:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  4ad696:       48 c7 44 24 08 00 00    movq   $0x0,0x8(%rsp)
    0.00 :	  4ad69d:       00 00 
    0.00 :	  4ad69f:       c7 04 24 00 00 00 00    movl   $0x0,(%rsp)
    0.00 :	  4ad6a6:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4ad6a9:       e8 02 65 fc ff          callq  473bb0 <ScanKeyEntryInitialize>
         :
         :	                                /*
         :	                                 * If we still didn't find a usable boundary key, quit; else
         :	                                 * save the boundary key pointer in startKeys.
         :	                                 */
         :	                                if (chosen == NULL)
    0.00 :	  4ad6ae:       48 85 db                test   %rbx,%rbx
    0.00 :	  4ad6b1:       0f 85 83 fc ff ff       jne    4ad33a <_bt_first+0xaa>
    0.00 :	  4ad6b7:       e9 a3 fd ff ff          jmpq   4ad45f <_bt_first+0x1cf>
    0.00 :	  4ad6bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        {
         :	                                /*
         :	                                 * Done looking at keys for curattr.  If we didn't find a
         :	                                 * usable boundary key, see if we can deduce a NOT NULL key.
         :	                                 */
         :	                                if (chosen == NULL && impliesNN != NULL &&
    0.00 :	  4ad6c0:       83 bd 9c ec ff ff ff    cmpl   $0xffffffff,-0x1364(%rbp)
    0.00 :	  4ad6c7:       0f 94 c0                sete   %al
    0.00 :	  4ad6ca:       e9 88 fd ff ff          jmpq   4ad457 <_bt_first+0x1c7>
    0.00 :	  4ad6cf:       90                      nop
         :	                        }
         :	                        else
         :	                        {
         :	                                RegProcedure cmp_proc;
         :
         :	                                cmp_proc = get_opfamily_proc(rel->rd_opfamily[i],
    0.00 :	  4ad6d0:       48 8b 8d a8 ec ff ff    mov    -0x1358(%rbp),%rcx
    0.00 :	  4ad6d7:       48 8b 81 c8 00 00 00    mov    0xc8(%rcx),%rax
    0.00 :	  4ad6de:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4ad6e3:       42 8b 3c 30             mov    (%rax,%r14,1),%edi
    0.00 :	  4ad6e7:       e8 c4 51 2c 00          callq  7728b0 <get_opfamily_proc>
         :	                                                                                         rel->rd_opcintype[i],
         :	                                                                                         cur->sk_subtype,
         :	                                                                                         BTORDER_PROC);
         :	                                if (!RegProcedureIsValid(cmp_proc))
    0.00 :	  4ad6ec:       85 c0                   test   %eax,%eax
         :	                        }
         :	                        else
         :	                        {
         :	                                RegProcedure cmp_proc;
         :
         :	                                cmp_proc = get_opfamily_proc(rel->rd_opfamily[i],
    0.00 :	  4ad6ee:       89 c1                   mov    %eax,%ecx
         :	                                                                                         rel->rd_opcintype[i],
         :	                                                                                         cur->sk_subtype,
         :	                                                                                         BTORDER_PROC);
         :	                                if (!RegProcedureIsValid(cmp_proc))
    0.00 :	  4ad6f0:       0f 84 4e 04 00 00       je     4adb44 <_bt_first+0x8b4>
         :	                                        elog(ERROR, "missing support function %d(%u,%u) for attribute %d of index \"%s\"",
         :	                                                 BTORDER_PROC, rel->rd_opcintype[i], cur->sk_subtype,
         :	                                                 cur->sk_attno, RelationGetRelationName(rel));
         :	                                ScanKeyEntryInitialize(scankeys + i,
    0.00 :	  4ad6f6:       49 8b 44 24 40          mov    0x40(%r12),%rax
    0.00 :	  4ad6fb:       41 0f bf 54 24 04       movswl 0x4(%r12),%edx
    0.00 :	  4ad701:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4ad704:       45 8b 4c 24 0c          mov    0xc(%r12),%r9d
    0.00 :	  4ad709:       45 8b 44 24 08          mov    0x8(%r12),%r8d
    0.00 :	  4ad70e:       89 0c 24                mov    %ecx,(%rsp)
    0.00 :	  4ad711:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ad713:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	  4ad718:       41 8b 34 24             mov    (%r12),%esi
    0.00 :	  4ad71c:       e8 8f 64 fc ff          callq  473bb0 <ScanKeyEntryInitialize>
    0.00 :	  4ad721:       e9 d3 fd ff ff          jmpq   4ad4f9 <_bt_first+0x269>
    0.00 :	  4ad726:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ad72d:       00 00 00 
         :	 * same as for _bt_first().
         :	 */
         :	static bool
         :	_bt_endpoint(IndexScanDesc scan, ScanDirection dir)
         :	{
         :	        Relation        rel = scan->indexRelation;
    0.00 :	  4ad730:       48 8b 95 a0 ec ff ff    mov    -0x1360(%rbp),%rdx
    0.00 :	  4ad737:       4c 8b 6a 08             mov    0x8(%rdx),%r13
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4ad73b:       4c 8b 72 38             mov    0x38(%rdx),%r14
         :	        /*
         :	         * Scan down to the leftmost or rightmost leaf page.  This is a simplified
         :	         * version of _bt_search().  We don't maintain a stack since we know we
         :	         * won't need it.
         :	         */
         :	        buf = _bt_get_endpoint(rel, 0, ScanDirectionIsBackward(dir));
    0.00 :	  4ad73f:       31 d2                   xor    %edx,%edx
    0.00 :	  4ad741:       83 bd 9c ec ff ff ff    cmpl   $0xffffffff,-0x1364(%rbp)
    0.00 :	  4ad748:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad74b:       0f 94 c2                sete   %dl
    0.00 :	  4ad74e:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad750:       e8 eb ea ff ff          callq  4ac240 <_bt_get_endpoint>
         :
         :	        if (!BufferIsValid(buf))
    0.00 :	  4ad755:       85 c0                   test   %eax,%eax
         :	        /*
         :	         * Scan down to the leftmost or rightmost leaf page.  This is a simplified
         :	         * version of _bt_search().  We don't maintain a stack since we know we
         :	         * won't need it.
         :	         */
         :	        buf = _bt_get_endpoint(rel, 0, ScanDirectionIsBackward(dir));
    0.00 :	  4ad757:       41 89 c4                mov    %eax,%r12d
         :
         :	        if (!BufferIsValid(buf))
    0.00 :	  4ad75a:       0f 84 3c 01 00 00       je     4ad89c <_bt_first+0x60c>
         :	                PredicateLockRelation(rel, scan->xs_snapshot);
         :	                so->currPos.buf = InvalidBuffer;
         :	                return false;
         :	        }
         :
         :	        PredicateLockPage(rel, BufferGetBlockNumber(buf), scan->xs_snapshot);
    0.00 :	  4ad760:       48 8b 85 a0 ec ff ff    mov    -0x1360(%rbp),%rax
    0.00 :	  4ad767:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4ad76a:       48 8b 58 10             mov    0x10(%rax),%rbx
    0.00 :	  4ad76e:       e8 bd 68 1c 00          callq  674030 <BufferGetBlockNumber>
    0.00 :	  4ad773:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad776:       89 c6                   mov    %eax,%esi
    0.00 :	  4ad778:       48 89 da                mov    %rbx,%rdx
    0.00 :	  4ad77b:       e8 e0 5a 1e 00          callq  693260 <PredicateLockPage>
         :	        page = BufferGetPage(buf);
    0.00 :	  4ad780:       45 85 e4                test   %r12d,%r12d
    0.00 :	  4ad783:       0f 88 91 03 00 00       js     4adb1a <_bt_first+0x88a>
    0.00 :	  4ad789:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  4ad78e:       48 63 d0                movslq %eax,%rdx
    0.00 :	  4ad791:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  4ad795:       48 03 15 5c 23 71 00    add    0x71235c(%rip),%rdx        # bbfaf8 <BufferBlocks>
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :	        Assert(P_ISLEAF(opaque));
         :
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4ad79c:       83 bd 9c ec ff ff 01    cmpl   $0x1,-0x1364(%rbp)
         :	                return false;
         :	        }
         :
         :	        PredicateLockPage(rel, BufferGetBlockNumber(buf), scan->xs_snapshot);
         :	        page = BufferGetPage(buf);
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4ad7a3:       0f b7 42 10             movzwl 0x10(%rdx),%eax
         :	        Assert(P_ISLEAF(opaque));
         :
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4ad7a7:       0f 84 4d 03 00 00       je     4adafa <_bt_first+0x86a>
         :	                /* There could be dead pages to the left, so not this: */
         :	                /* Assert(P_LEFTMOST(opaque)); */
         :
         :	                start = P_FIRSTDATAKEY(opaque);
         :	        }
         :	        else if (ScanDirectionIsBackward(dir))
    0.00 :	  4ad7ad:       83 bd 9c ec ff ff ff    cmpl   $0xffffffff,-0x1364(%rbp)
    0.00 :	  4ad7b4:       0f 85 ff 03 00 00       jne    4adbb9 <_bt_first+0x929>
         :	        {
         :	                Assert(P_RIGHTMOST(opaque));
         :
         :	                start = PageGetMaxOffsetNumber(page);
    0.00 :	  4ad7ba:       0f b7 42 0c             movzwl 0xc(%rdx),%eax
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ad7be:       31 d2                   xor    %edx,%edx
         :	        }
         :	        else if (ScanDirectionIsBackward(dir))
         :	        {
         :	                Assert(P_RIGHTMOST(opaque));
         :
         :	                start = PageGetMaxOffsetNumber(page);
    0.00 :	  4ad7c0:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  4ad7c4:       0f 87 f4 00 00 00       ja     4ad8be <_bt_first+0x62e>
         :	                elog(ERROR, "invalid scan direction: %d", (int) dir);
         :	                start = 0;                              /* keep compiler quiet */
         :	        }
         :
         :	        /* remember which buffer we have pinned */
         :	        so->currPos.buf = buf;
    0.00 :	  4ad7ca:       45 89 66 54             mov    %r12d,0x54(%r14)
         :	                so->currPos.moreLeft = false;
         :	                so->currPos.moreRight = true;
         :	        }
         :	        else
         :	        {
         :	                so->currPos.moreLeft = true;
    0.00 :	  4ad7ce:       41 c6 46 5c 01          movb   $0x1,0x5c(%r14)
         :	                so->currPos.moreRight = false;
    0.00 :	  4ad7d3:       41 c6 46 5d 00          movb   $0x0,0x5d(%r14)
         :	        }
         :	        so->numKilled = 0;                      /* just paranoia */
    0.00 :	  4ad7d8:       41 c7 46 38 00 00 00    movl   $0x0,0x38(%r14)
    0.00 :	  4ad7df:       00 
         :	        so->markItemIndex = -1;         /* ditto */
    0.00 :	  4ad7e0:       41 c7 46 50 ff ff ff    movl   $0xffffffff,0x50(%r14)
    0.00 :	  4ad7e7:       ff 
         :
         :	        /*
         :	         * Now load data from the first page of the scan.
         :	         */
         :	        if (!_bt_readpage(scan, dir, start))
    0.00 :	  4ad7e8:       8b b5 9c ec ff ff       mov    -0x1364(%rbp),%esi
    0.00 :	  4ad7ee:       48 8b bd a0 ec ff ff    mov    -0x1360(%rbp),%rdi
    0.00 :	  4ad7f5:       e8 e6 eb ff ff          callq  4ac3e0 <_bt_readpage>
    0.00 :	  4ad7fa:       84 c0                   test   %al,%al
    0.00 :	  4ad7fc:       75 1c                   jne    4ad81a <_bt_first+0x58a>
         :	        {
         :	                /*
         :	                 * There's no actually-matching data on this page.  Try to advance to
         :	                 * the next page.  Return false if there's no matching data at all.
         :	                 */
         :	                if (!_bt_steppage(scan, dir))
    0.00 :	  4ad7fe:       8b b5 9c ec ff ff       mov    -0x1364(%rbp),%esi
    0.00 :	  4ad804:       48 8b bd a0 ec ff ff    mov    -0x1360(%rbp),%rdi
    0.00 :	  4ad80b:       e8 70 ee ff ff          callq  4ac680 <_bt_steppage>
    0.00 :	  4ad810:       31 d2                   xor    %edx,%edx
    0.00 :	  4ad812:       84 c0                   test   %al,%al
    0.00 :	  4ad814:       0f 84 a8 fb ff ff       je     4ad3c2 <_bt_first+0x132>
         :	                        return false;
         :	        }
         :
         :	        /* Drop the lock, but not pin, on the current page */
         :	        LockBuffer(so->currPos.buf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4ad81a:       41 8b 7e 54             mov    0x54(%r14),%edi
    0.00 :	  4ad81e:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad820:       e8 eb 6e 1c 00          callq  674710 <LockBuffer>
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
    0.00 :	  4ad825:       49 63 46 6c             movslq 0x6c(%r14),%rax
         :	        scan->xs_ctup.t_self = currItem->heapTid;
    0.00 :	  4ad829:       48 8b 95 a0 ec ff ff    mov    -0x1360(%rbp),%rdx
    0.00 :	  4ad830:       48 8d 04 80             lea    (%rax,%rax,4),%rax
    0.00 :	  4ad834:       49 8d 4c 46 60          lea    0x60(%r14,%rax,2),%rcx
    0.00 :	  4ad839:       8b 41 10                mov    0x10(%rcx),%eax
    0.00 :	  4ad83c:       89 42 54                mov    %eax,0x54(%rdx)
    0.00 :	  4ad83f:       0f b7 41 14             movzwl 0x14(%rcx),%eax
    0.00 :	  4ad843:       66 89 42 58             mov    %ax,0x58(%rdx)
         :	        if (scan->xs_want_itup)
    0.00 :	  4ad847:       48 8b 85 a0 ec ff ff    mov    -0x1360(%rbp),%rax
    0.00 :	  4ad84e:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4ad853:       80 78 30 00             cmpb   $0x0,0x30(%rax)
    0.00 :	  4ad857:       0f 84 65 fb ff ff       je     4ad3c2 <_bt_first+0x132>
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ad85d:       0f b7 41 18             movzwl 0x18(%rcx),%eax
    0.00 :	  4ad861:       48 8b 95 a0 ec ff ff    mov    -0x1360(%rbp),%rdx
    0.00 :	  4ad868:       49 03 46 40             add    0x40(%r14),%rax
    0.00 :	  4ad86c:       48 89 42 40             mov    %rax,0x40(%rdx)
    0.00 :	  4ad870:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4ad875:       e9 48 fb ff ff          jmpq   4ad3c2 <_bt_first+0x132>
    0.00 :	  4ad87a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         *
         :	         * If goback = true, we will then step back one item, while if
         :	         * goback = false, we will start the scan on the located item.
         :	         *----------
         :	         */
         :	        switch (strat_total)
    0.00 :	  4ad880:       0f b7 85 be ec ff ff    movzwl -0x1342(%rbp),%eax
    0.00 :	  4ad887:       ff 24 c5 90 48 7b 00    jmpq   *0x7b4890(,%rax,8)
    0.00 :	  4ad88e:       66 90                   xchg   %ax,%ax
         :	                                                else
         :	                                                        impliesNN = cur;
         :	                                        }
         :	                                        break;
         :	                        }
         :	                }
    0.00 :	  4ad890:       66 89 85 be ec ff ff    mov    %ax,-0x1342(%rbp)
    0.00 :	  4ad897:       e9 c3 fb ff ff          jmpq   4ad45f <_bt_first+0x1cf>
         :	        {
         :	                /*
         :	                 * Empty index. Lock the whole relation, as nothing finer to lock
         :	                 * exists.
         :	                 */
         :	                PredicateLockRelation(rel, scan->xs_snapshot);
    0.00 :	  4ad89c:       48 8b 8d a0 ec ff ff    mov    -0x1360(%rbp),%rcx
    0.00 :	  4ad8a3:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad8a6:       48 8b 71 10             mov    0x10(%rcx),%rsi
    0.00 :	  4ad8aa:       e8 21 6d 1e 00          callq  6945d0 <PredicateLockRelation>
         :	                so->currPos.buf = InvalidBuffer;
    0.00 :	  4ad8af:       41 c7 46 54 00 00 00    movl   $0x0,0x54(%r14)
    0.00 :	  4ad8b6:       00 
    0.00 :	  4ad8b7:       31 d2                   xor    %edx,%edx
    0.00 :	  4ad8b9:       e9 04 fb ff ff          jmpq   4ad3c2 <_bt_first+0x132>
         :	        }
         :	        else if (ScanDirectionIsBackward(dir))
         :	        {
         :	                Assert(P_RIGHTMOST(opaque));
         :
         :	                start = PageGetMaxOffsetNumber(page);
    0.00 :	  4ad8be:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4ad8c1:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4ad8c5:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  4ad8c9:       0f b7 d0                movzwl %ax,%edx
    0.00 :	  4ad8cc:       e9 f9 fe ff ff          jmpq   4ad7ca <_bt_first+0x53a>
    0.00 :	  4ad8d1:       48 8d 95 c0 f5 ff ff    lea    -0xa40(%rbp),%rdx
         :	         *
         :	         * If goback = true, we will then step back one item, while if
         :	         * goback = false, we will start the scan on the located item.
         :	         *----------
         :	         */
         :	        switch (strat_total)
    0.00 :	  4ad8d8:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ad8db:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  4ad8e1:       48 89 95 90 ec ff ff    mov    %rdx,-0x1370(%rbp)
    0.00 :	  4ad8e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4ad8ef:       00 
         :
         :	        /*
         :	         * Use the manufactured insertion scan key to descend the tree and
         :	         * position ourselves on the target leaf page.
         :	         */
         :	        stack = _bt_search(rel, keysCount, scankeys, nextkey, &buf, BT_READ);
    0.00 :	  4ad8f0:       48 8b 95 90 ec ff ff    mov    -0x1370(%rbp),%rdx
    0.00 :	  4ad8f7:       48 8b bd a8 ec ff ff    mov    -0x1358(%rbp),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:940
   33.33 :	  4ad8fe:       4c 8d 45 cc             lea    -0x34(%rbp),%r8
    0.00 :	  4ad902:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  4ad905:       41 b9 01 00 00 00       mov    $0x1,%r9d
    0.00 :	  4ad90b:       44 89 fe                mov    %r15d,%esi
    0.00 :	  4ad90e:       e8 ed f7 ff ff          callq  4ad100 <_bt_search>
    0.00 :	  4ad913:       48 89 c7                mov    %rax,%rdi
         :
         :	        /* don't need to keep the stack around... */
         :	        _bt_freestack(stack);
    0.00 :	  4ad916:       e8 55 1f 00 00          callq  4af870 <_bt_freestack>
         :
         :	        /* remember which buffer we have pinned, if any */
         :	        so->currPos.buf = buf;
    0.00 :	  4ad91b:       8b 45 cc                mov    -0x34(%rbp),%eax
    0.00 :	  4ad91e:       48 8b 8d b0 ec ff ff    mov    -0x1350(%rbp),%rcx
    0.00 :	  4ad925:       89 41 54                mov    %eax,0x54(%rcx)
         :
         :	        if (!BufferIsValid(buf))
    0.00 :	  4ad928:       8b 7d cc                mov    -0x34(%rbp),%edi
    0.00 :	  4ad92b:       85 ff                   test   %edi,%edi
    0.00 :	  4ad92d:       0f 84 95 01 00 00       je     4adac8 <_bt_first+0x838>
         :	                 */
         :	                PredicateLockRelation(rel, scan->xs_snapshot);
         :	                return false;
         :	        }
         :	        else
         :	                PredicateLockPage(rel, BufferGetBlockNumber(buf),
    0.00 :	  4ad933:       48 8b 95 a0 ec ff ff    mov    -0x1360(%rbp),%rdx
    0.00 :	  4ad93a:       48 8b 5a 10             mov    0x10(%rdx),%rbx
    0.00 :	  4ad93e:       e8 ed 66 1c 00          callq  674030 <BufferGetBlockNumber>
    0.00 :	  4ad943:       48 8b bd a8 ec ff ff    mov    -0x1358(%rbp),%rdi
    0.00 :	  4ad94a:       89 c6                   mov    %eax,%esi
    0.00 :	  4ad94c:       48 89 da                mov    %rbx,%rdx
    0.00 :	  4ad94f:       e8 0c 59 1e 00          callq  693260 <PredicateLockPage>
         :	                                                  scan->xs_snapshot);
         :
         :	        /* initialize moreLeft/moreRight appropriately for scan direction */
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4ad954:       83 bd 9c ec ff ff 01    cmpl   $0x1,-0x1364(%rbp)
    0.00 :	  4ad95b:       0f 84 85 01 00 00       je     4adae6 <_bt_first+0x856>
         :	                so->currPos.moreLeft = false;
         :	                so->currPos.moreRight = true;
         :	        }
         :	        else
         :	        {
         :	                so->currPos.moreLeft = true;
    0.00 :	  4ad961:       48 8b 85 b0 ec ff ff    mov    -0x1350(%rbp),%rax
    0.00 :	  4ad968:       c6 40 5c 01             movb   $0x1,0x5c(%rax)
         :	                so->currPos.moreRight = false;
    0.00 :	  4ad96c:       c6 40 5d 00             movb   $0x0,0x5d(%rax)
         :	        }
         :	        so->numKilled = 0;                      /* just paranoia */
    0.00 :	  4ad970:       48 8b 95 b0 ec ff ff    mov    -0x1350(%rbp),%rdx
         :	        so->markItemIndex = -1;         /* ditto */
         :
         :	        /* position to the precise item on the page */
         :	        offnum = _bt_binsrch(rel, buf, keysCount, scankeys, nextkey);
    0.00 :	  4ad977:       45 89 e0                mov    %r12d,%r8d
         :	        else
         :	        {
         :	                so->currPos.moreLeft = true;
         :	                so->currPos.moreRight = false;
         :	        }
         :	        so->numKilled = 0;                      /* just paranoia */
    0.00 :	  4ad97a:       c7 42 38 00 00 00 00    movl   $0x0,0x38(%rdx)
         :	        so->markItemIndex = -1;         /* ditto */
    0.00 :	  4ad981:       c7 42 50 ff ff ff ff    movl   $0xffffffff,0x50(%rdx)
         :
         :	        /* position to the precise item on the page */
         :	        offnum = _bt_binsrch(rel, buf, keysCount, scankeys, nextkey);
    0.00 :	  4ad988:       44 89 fa                mov    %r15d,%edx
    0.00 :	  4ad98b:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  4ad98e:       48 8b 8d 90 ec ff ff    mov    -0x1370(%rbp),%rcx
    0.00 :	  4ad995:       48 8b bd a8 ec ff ff    mov    -0x1358(%rbp),%rdi
    0.00 :	  4ad99c:       e8 bf f4 ff ff          callq  4ace60 <_bt_binsrch>
         :	         * this results in an offset before the first item or after the last one,
         :	         * _bt_readpage will report no items found, and then we'll step to the
         :	         * next page as needed.)
         :	         */
         :	        if (goback)
         :	                offnum = OffsetNumberPrev(offnum);
    0.00 :	  4ad9a1:       41 80 fd 01             cmp    $0x1,%r13b
         :
         :	        /*
         :	         * Now load data from the first page of the scan.
         :	         */
         :	        if (!_bt_readpage(scan, dir, offnum))
    0.00 :	  4ad9a5:       8b b5 9c ec ff ff       mov    -0x1364(%rbp),%esi
    0.00 :	  4ad9ab:       48 8b bd a0 ec ff ff    mov    -0x1360(%rbp),%rdi
         :	         * this results in an offset before the first item or after the last one,
         :	         * _bt_readpage will report no items found, and then we'll step to the
         :	         * next page as needed.)
         :	         */
         :	        if (goback)
         :	                offnum = OffsetNumberPrev(offnum);
    0.00 :	  4ad9b2:       66 83 d0 ff             adc    $0xffff,%ax
         :
         :	        /*
         :	         * Now load data from the first page of the scan.
         :	         */
         :	        if (!_bt_readpage(scan, dir, offnum))
    0.00 :	  4ad9b6:       0f b7 d0                movzwl %ax,%edx
    0.00 :	  4ad9b9:       e8 22 ea ff ff          callq  4ac3e0 <_bt_readpage>
    0.00 :	  4ad9be:       84 c0                   test   %al,%al
    0.00 :	  4ad9c0:       75 1a                   jne    4ad9dc <_bt_first+0x74c>
         :	        {
         :	                /*
         :	                 * There's no actually-matching data on this page.  Try to advance to
         :	                 * the next page.  Return false if there's no matching data at all.
         :	                 */
         :	                if (!_bt_steppage(scan, dir))
    0.00 :	  4ad9c2:       8b b5 9c ec ff ff       mov    -0x1364(%rbp),%esi
    0.00 :	  4ad9c8:       48 8b bd a0 ec ff ff    mov    -0x1360(%rbp),%rdi
    0.00 :	  4ad9cf:       e8 ac ec ff ff          callq  4ac680 <_bt_steppage>
    0.00 :	  4ad9d4:       84 c0                   test   %al,%al
    0.00 :	  4ad9d6:       0f 84 e4 f9 ff ff       je     4ad3c0 <_bt_first+0x130>
         :	                        return false;
         :	        }
         :
         :	        /* Drop the lock, but not pin, on the current page */
         :	        LockBuffer(so->currPos.buf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4ad9dc:       48 8b 8d b0 ec ff ff    mov    -0x1350(%rbp),%rcx
    0.00 :	  4ad9e3:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad9e5:       8b 79 54                mov    0x54(%rcx),%edi
    0.00 :	  4ad9e8:       e8 23 6d 1c 00          callq  674710 <LockBuffer>
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
    0.00 :	  4ad9ed:       48 8b 95 b0 ec ff ff    mov    -0x1350(%rbp),%rdx
    0.00 :	  4ad9f4:       48 63 42 6c             movslq 0x6c(%rdx),%rax
         :	        scan->xs_ctup.t_self = currItem->heapTid;
    0.00 :	  4ad9f8:       48 8d 04 80             lea    (%rax,%rax,4),%rax
    0.00 :	  4ad9fc:       48 8d 4c 42 60          lea    0x60(%rdx,%rax,2),%rcx
    0.00 :	  4ada01:       48 8b 95 a0 ec ff ff    mov    -0x1360(%rbp),%rdx
    0.00 :	  4ada08:       8b 41 10                mov    0x10(%rcx),%eax
    0.00 :	  4ada0b:       89 42 54                mov    %eax,0x54(%rdx)
    0.00 :	  4ada0e:       0f b7 41 14             movzwl 0x14(%rcx),%eax
    0.00 :	  4ada12:       66 89 42 58             mov    %ax,0x58(%rdx)
         :	        if (scan->xs_want_itup)
    0.00 :	  4ada16:       48 8b 85 a0 ec ff ff    mov    -0x1360(%rbp),%rax
    0.00 :	  4ada1d:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4ada22:       80 78 30 00             cmpb   $0x0,0x30(%rax)
    0.00 :	  4ada26:       0f 84 96 f9 ff ff       je     4ad3c2 <_bt_first+0x132>
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4ada2c:       48 8b 95 b0 ec ff ff    mov    -0x1350(%rbp),%rdx
    0.00 :	  4ada33:       0f b7 41 18             movzwl 0x18(%rcx),%eax
    0.00 :	  4ada37:       48 8b 8d a0 ec ff ff    mov    -0x1360(%rbp),%rcx
    0.00 :	  4ada3e:       48 03 42 40             add    0x40(%rdx),%rax
    0.00 :	  4ada42:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4ada47:       48 89 41 40             mov    %rax,0x40(%rcx)
    0.00 :	  4ada4b:       e9 72 f9 ff ff          jmpq   4ad3c2 <_bt_first+0x132>
         :
         :	                        /*
         :	                         * If a backward scan was specified, need to start with last equal
         :	                         * item not first one.
         :	                         */
         :	                        if (ScanDirectionIsBackward(dir))
    0.00 :	  4ada50:       83 bd 9c ec ff ff ff    cmpl   $0xffffffff,-0x1364(%rbp)
    0.00 :	  4ada57:       48 8d 85 c0 f5 ff ff    lea    -0xa40(%rbp),%rax
    0.00 :	  4ada5e:       48 89 85 90 ec ff ff    mov    %rax,-0x1370(%rbp)
    0.00 :	  4ada65:       0f 84 c6 00 00 00       je     4adb31 <_bt_first+0x8a1>
         :	                        goback = false;
         :	                        break;
         :
         :	                default:
         :	                        /* can't get here, but keep compiler quiet */
         :	                        elog(ERROR, "unrecognized strat_total: %d", (int) strat_total);
    0.00 :	  4ada6b:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ada6e:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  4ada71:       e9 7a fe ff ff          jmpq   4ad8f0 <_bt_first+0x660>
    0.00 :	  4ada76:       48 8d 8d c0 f5 ff ff    lea    -0xa40(%rbp),%rcx
         :	         *
         :	         * If goback = true, we will then step back one item, while if
         :	         * goback = false, we will start the scan on the located item.
         :	         *----------
         :	         */
         :	        switch (strat_total)
    0.00 :	  4ada7d:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  4ada83:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  4ada86:       48 89 8d 90 ec ff ff    mov    %rcx,-0x1370(%rbp)
    0.00 :	  4ada8d:       e9 5e fe ff ff          jmpq   4ad8f0 <_bt_first+0x660>
    0.00 :	  4ada92:       48 8d 8d c0 f5 ff ff    lea    -0xa40(%rbp),%rcx
    0.00 :	  4ada99:       48 89 8d 90 ec ff ff    mov    %rcx,-0x1370(%rbp)
    0.00 :	  4adaa0:       eb c9                   jmp    4ada6b <_bt_first+0x7db>
    0.00 :	  4adaa2:       48 8d 85 c0 f5 ff ff    lea    -0xa40(%rbp),%rax
    0.00 :	  4adaa9:       48 89 85 90 ec ff ff    mov    %rax,-0x1370(%rbp)
         :	                        goback = false;
         :	                        break;
         :
         :	                default:
         :	                        /* can't get here, but keep compiler quiet */
         :	                        elog(ERROR, "unrecognized strat_total: %d", (int) strat_total);
    0.00 :	  4adab0:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  4adab6:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  4adabc:       e9 2f fe ff ff          jmpq   4ad8f0 <_bt_first+0x660>
    0.00 :	  4adac1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                /*
         :	                 * We only get here if the index is completely empty. Lock relation
         :	                 * because nothing finer to lock exists.
         :	                 */
         :	                PredicateLockRelation(rel, scan->xs_snapshot);
    0.00 :	  4adac8:       48 8b 85 a0 ec ff ff    mov    -0x1360(%rbp),%rax
    0.00 :	  4adacf:       48 8b bd a8 ec ff ff    mov    -0x1358(%rbp),%rdi
    0.00 :	  4adad6:       48 8b 70 10             mov    0x10(%rax),%rsi
    0.00 :	  4adada:       e8 f1 6a 1e 00          callq  6945d0 <PredicateLockRelation>
    0.00 :	  4adadf:       31 d2                   xor    %edx,%edx
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
         :
         :	        return true;
         :	}
    0.00 :	  4adae1:       e9 dc f8 ff ff          jmpq   4ad3c2 <_bt_first+0x132>
         :	                                                  scan->xs_snapshot);
         :
         :	        /* initialize moreLeft/moreRight appropriately for scan direction */
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                so->currPos.moreLeft = false;
    0.00 :	  4adae6:       48 8b 8d b0 ec ff ff    mov    -0x1350(%rbp),%rcx
    0.00 :	  4adaed:       c6 41 5c 00             movb   $0x0,0x5c(%rcx)
         :	                so->currPos.moreRight = true;
    0.00 :	  4adaf1:       c6 41 5d 01             movb   $0x1,0x5d(%rcx)
    0.00 :	  4adaf5:       e9 76 fe ff ff          jmpq   4ad970 <_bt_first+0x6e0>
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                /* There could be dead pages to the left, so not this: */
         :	                /* Assert(P_LEFTMOST(opaque)); */
         :
         :	                start = P_FIRSTDATAKEY(opaque);
    0.00 :	  4adafa:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4adafd:       83 7c 02 04 01          cmpl   $0x1,0x4(%rdx,%rax,1)
         :	                elog(ERROR, "invalid scan direction: %d", (int) dir);
         :	                start = 0;                              /* keep compiler quiet */
         :	        }
         :
         :	        /* remember which buffer we have pinned */
         :	        so->currPos.buf = buf;
    0.00 :	  4adb02:       45 89 66 54             mov    %r12d,0x54(%r14)
         :
         :	        /* initialize moreLeft/moreRight appropriately for scan direction */
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                so->currPos.moreLeft = false;
    0.00 :	  4adb06:       41 c6 46 5c 00          movb   $0x0,0x5c(%r14)
         :	                so->currPos.moreRight = true;
    0.00 :	  4adb0b:       41 c6 46 5d 01          movb   $0x1,0x5d(%r14)
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                /* There could be dead pages to the left, so not this: */
         :	                /* Assert(P_LEFTMOST(opaque)); */
         :
         :	                start = P_FIRSTDATAKEY(opaque);
    0.00 :	  4adb10:       19 d2                   sbb    %edx,%edx
    0.00 :	  4adb12:       83 c2 02                add    $0x2,%edx
    0.00 :	  4adb15:       e9 be fc ff ff          jmpq   4ad7d8 <_bt_first+0x548>
         :	                so->currPos.buf = InvalidBuffer;
         :	                return false;
         :	        }
         :
         :	        PredicateLockPage(rel, BufferGetBlockNumber(buf), scan->xs_snapshot);
         :	        page = BufferGetPage(buf);
    0.00 :	  4adb1a:       44 89 e0                mov    %r12d,%eax
    0.00 :	  4adb1d:       48 8b 15 f4 f5 6c 00    mov    0x6cf5f4(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4adb24:       f7 d0                   not    %eax
    0.00 :	  4adb26:       48 98                   cltq   
    0.00 :	  4adb28:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  4adb2c:       e9 6b fc ff ff          jmpq   4ad79c <_bt_first+0x50c>
    0.00 :	  4adb31:       48 8d 95 c0 f5 ff ff    lea    -0xa40(%rbp),%rdx
    0.00 :	  4adb38:       48 89 95 90 ec ff ff    mov    %rdx,-0x1370(%rbp)
    0.00 :	  4adb3f:       e9 6c ff ff ff          jmpq   4adab0 <_bt_first+0x820>
         :	                                cmp_proc = get_opfamily_proc(rel->rd_opfamily[i],
         :	                                                                                         rel->rd_opcintype[i],
         :	                                                                                         cur->sk_subtype,
         :	                                                                                         BTORDER_PROC);
         :	                                if (!RegProcedureIsValid(cmp_proc))
         :	                                        elog(ERROR, "missing support function %d(%u,%u) for attribute %d of index \"%s\"",
    0.00 :	  4adb44:       ba df 48 7b 00          mov    $0x7b48df,%edx
    0.00 :	  4adb49:       be 40 03 00 00          mov    $0x340,%esi
    0.00 :	  4adb4e:       bf 70 47 7b 00          mov    $0x7b4770,%edi
    0.00 :	  4adb53:       e8 c8 d8 2c 00          callq  77b420 <elog_start>
    0.00 :	  4adb58:       48 8b 95 a8 ec ff ff    mov    -0x1358(%rbp),%rdx
    0.00 :	  4adb5f:       45 0f bf 4c 24 04       movswl 0x4(%r12),%r9d
    0.00 :	  4adb65:       be 18 48 7b 00          mov    $0x7b4818,%esi
    0.00 :	  4adb6a:       45 8b 44 24 08          mov    0x8(%r12),%r8d
    0.00 :	  4adb6f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4adb74:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  4adb7b:       42 8b 0c 30             mov    (%rax,%r14,1),%ecx
    0.00 :	  4adb7f:       48 8b 42 30             mov    0x30(%rdx),%rax
    0.00 :	  4adb83:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4adb88:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  4adb8c:       31 c0                   xor    %eax,%eax
    0.00 :	  4adb8e:       e8 9d d6 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4adb93:       e8 38 b9 fb ff          callq  4694d0 <abort@plt>
         :	                                                break;
         :	                                        }
         :	                                }
         :	                                if (!used_all_subkeys)
         :	                                {
         :	                                        switch (strat_total)
    0.00 :	  4adb98:       66 83 bd be ec ff ff    cmpw   $0x1,-0x1342(%rbp)
    0.00 :	  4adb9f:       01 
    0.00 :	  4adba0:       0f 84 0a ff ff ff       je     4adab0 <_bt_first+0x820>
    0.00 :	  4adba6:       66 83 bd be ec ff ff    cmpw   $0x5,-0x1342(%rbp)
    0.00 :	  4adbad:       05 
    0.00 :	  4adbae:       0f 85 70 fa ff ff       jne    4ad624 <_bt_first+0x394>
    0.00 :	  4adbb4:       e9 b2 fe ff ff          jmpq   4ada6b <_bt_first+0x7db>
         :
         :	                start = PageGetMaxOffsetNumber(page);
         :	        }
         :	        else
         :	        {
         :	                elog(ERROR, "invalid scan direction: %d", (int) dir);
    0.00 :	  4adbb9:       ba e9 48 7b 00          mov    $0x7b48e9,%edx
    0.00 :	  4adbbe:       be 44 06 00 00          mov    $0x644,%esi
    0.00 :	  4adbc3:       bf 70 47 7b 00          mov    $0x7b4770,%edi
    0.00 :	  4adbc8:       e8 53 d8 2c 00          callq  77b420 <elog_start>
    0.00 :	  4adbcd:       8b 95 9c ec ff ff       mov    -0x1364(%rbp),%edx
    0.00 :	  4adbd3:       be 7c 47 7b 00          mov    $0x7b477c,%esi
    0.00 :	  4adbd8:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4adbdd:       31 c0                   xor    %eax,%eax
    0.00 :	  4adbdf:       e8 4c d6 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4adbe4:       e8 e7 b8 fb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1426
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1522
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1549
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ae420 <_bt_checkkeys>:
         :	 */
         :	IndexTuple
         :	_bt_checkkeys(IndexScanDesc scan,
         :	                          Page page, OffsetNumber offnum,
         :	                          ScanDirection dir, bool *continuescan)
         :	{
    0.00 :	  4ae420:       55                      push   %rbp
    0.00 :	  4ae421:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ae424:       41 57                   push   %r15
    0.00 :	  4ae426:       41 56                   push   %r14
    0.00 :	  4ae428:       41 55                   push   %r13
    0.00 :	  4ae42a:       41 54                   push   %r12
    0.00 :	  4ae42c:       53                      push   %rbx
    0.00 :	  4ae42d:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  4ae431:       4c 89 45 c0             mov    %r8,-0x40(%rbp)
         :	        BTScanOpaque so;
         :	        int                     keysz;
         :	        int                     ikey;
         :	        ScanKey         key;
         :
         :	        *continuescan = true;           /* default assumption */
    0.00 :	  4ae435:       48 8b 45 c0             mov    -0x40(%rbp),%rax
         :	 */
         :	IndexTuple
         :	_bt_checkkeys(IndexScanDesc scan,
         :	                          Page page, OffsetNumber offnum,
         :	                          ScanDirection dir, bool *continuescan)
         :	{
    0.00 :	  4ae439:       89 4d cc                mov    %ecx,-0x34(%rbp)
         :	        ItemId          iid = PageGetItemId(page, offnum);
    0.00 :	  4ae43c:       0f b7 ca                movzwl %dx,%ecx
    0.00 :	  4ae43f:       4c 8d 41 ff             lea    -0x1(%rcx),%r8
         :	        BTScanOpaque so;
         :	        int                     keysz;
         :	        int                     ikey;
         :	        ScanKey         key;
         :
         :	        *continuescan = true;           /* default assumption */
    0.00 :	  4ae443:       c6 00 01                movb   $0x1,(%rax)
         :	         * not bother examining the tuple's index keys, but just return
         :	         * immediately with continuescan = true to proceed to the next tuple.
         :	         * However, if this is the last tuple on the page, we should check the
         :	         * index keys to prevent uselessly advancing to the next page.
         :	         */
         :	        if (scan->ignore_killed_tuples && ItemIdIsDead(iid))
    0.00 :	  4ae446:       80 7f 32 00             cmpb   $0x0,0x32(%rdi)
    0.00 :	  4ae44a:       74 14                   je     4ae460 <_bt_checkkeys+0x40>
    0.00 :	  4ae44c:       8b 44 8e 14             mov    0x14(%rsi,%rcx,4),%eax
    0.00 :	  4ae450:       25 00 80 01 00          and    $0x18000,%eax
    0.00 :	  4ae455:       3d 00 80 01 00          cmp    $0x18000,%eax
    0.00 :	  4ae45a:       0f 84 85 03 00 00       je     4ae7e5 <_bt_checkkeys+0x3c5>
         :	                }
         :	                else
         :	                {
         :	                        BTPageOpaque opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :
         :	                        if (offnum > P_FIRSTDATAKEY(opaque))
    0.00 :	  4ae460:       c6 45 d3 01             movb   $0x1,-0x2d(%rbp)
         :	                tuple_alive = false;
         :	        }
         :	        else
         :	                tuple_alive = true;
         :
         :	        tuple = (IndexTuple) PageGetItem(page, iid);
    0.00 :	  4ae464:       42 0f b7 44 86 18       movzwl 0x18(%rsi,%r8,4),%eax
    0.00 :	  4ae46a:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  4ae46f:       4c 8d 2c 06             lea    (%rsi,%rax,1),%r13
         :
         :	        tupdesc = RelationGetDescr(scan->indexRelation);
    0.00 :	  4ae473:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  4ae477:       4c 8b 78 38             mov    0x38(%rax),%r15
         :	        so = (BTScanOpaque) scan->opaque;
    0.00 :	  4ae47b:       48 8b 47 38             mov    0x38(%rdi),%rax
         :	        keysz = so->numberOfKeys;
    0.00 :	  4ae47f:       8b 50 04                mov    0x4(%rax),%edx
         :
         :	        for (key = so->keyData, ikey = 0; ikey < keysz; key++, ikey++)
    0.00 :	  4ae482:       85 d2                   test   %edx,%edx
         :
         :	        tuple = (IndexTuple) PageGetItem(page, iid);
         :
         :	        tupdesc = RelationGetDescr(scan->indexRelation);
         :	        so = (BTScanOpaque) scan->opaque;
         :	        keysz = so->numberOfKeys;
    0.00 :	  4ae484:       89 55 d4                mov    %edx,-0x2c(%rbp)
         :
         :	        for (key = so->keyData, ikey = 0; ikey < keysz; key++, ikey++)
    0.00 :	  4ae487:       48 8b 58 08             mov    0x8(%rax),%rbx
    0.00 :	  4ae48b:       0f 8e df 01 00 00       jle    4ae670 <_bt_checkkeys+0x250>
    0.00 :	  4ae491:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  4ae494:       eb 34                   jmp    4ae4ca <_bt_checkkeys+0xaa>
    0.00 :	  4ae496:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ae49d:       00 00 00 
         :	                                                          &isNull);
         :
         :	                if (key->sk_flags & SK_ISNULL)
         :	                {
         :	                        /* Handle IS NULL/NOT NULL tests */
         :	                        if (key->sk_flags & SK_SEARCHNULL)
    0.00 :	  4ae4a0:       40 f6 c7 40             test   $0x40,%dil
    0.00 :	  4ae4a4:       0f 84 56 01 00 00       je     4ae600 <_bt_checkkeys+0x1e0>
         :	                        {
         :	                                if (isNull)
    0.00 :	  4ae4aa:       84 c9                   test   %cl,%cl
    0.00 :	  4ae4ac:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  4ae4b0:       0f 84 52 01 00 00       je     4ae608 <_bt_checkkeys+0x1e8>
         :
         :	        tupdesc = RelationGetDescr(scan->indexRelation);
         :	        so = (BTScanOpaque) scan->opaque;
         :	        keysz = so->numberOfKeys;
         :
         :	        for (key = so->keyData, ikey = 0; ikey < keysz; key++, ikey++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1426
   33.33 :	  4ae4b6:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  4ae4ba:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  4ae4be:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae4c0:       0f 8e aa 01 00 00       jle    4ae670 <_bt_checkkeys+0x250>
    0.00 :	  4ae4c6:       48 83 c3 48             add    $0x48,%rbx
         :	                Datum           datum;
         :	                bool            isNull;
         :	                Datum           test;
         :
         :	                /* row-comparison keys need special processing */
         :	                if (key->sk_flags & SK_ROW_HEADER)
    0.00 :	  4ae4ca:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  4ae4cc:       40 f6 c7 04             test   $0x4,%dil
    0.00 :	  4ae4d0:       0f 85 aa 01 00 00       jne    4ae680 <_bt_checkkeys+0x260>
         :	                        if (_bt_check_rowcompare(key, tuple, tupdesc, dir, continuescan))
         :	                                continue;
         :	                        return NULL;
         :	                }
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae4d6:       66 41 83 7d 06 00       cmpw   $0x0,0x6(%r13)
    0.00 :	  4ae4dc:       0f 88 c6 00 00 00       js     4ae5a8 <_bt_checkkeys+0x188>
    0.00 :	  4ae4e2:       0f b7 4b 04             movzwl 0x4(%rbx),%ecx
    0.00 :	  4ae4e6:       49 8b 47 08             mov    0x8(%r15),%rax
    0.00 :	  4ae4ea:       48 0f bf d1             movswq %cx,%rdx
    0.00 :	  4ae4ee:       48 8b 54 d0 f8          mov    -0x8(%rax,%rdx,8),%rdx
    0.00 :	  4ae4f3:       8b 42 54                mov    0x54(%rdx),%eax
    0.00 :	  4ae4f6:       85 c0                   test   %eax,%eax
    0.00 :	  4ae4f8:       0f 88 32 01 00 00       js     4ae630 <_bt_checkkeys+0x210>
    0.00 :	  4ae4fe:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.00 :	  4ae502:       0f 84 e8 00 00 00       je     4ae5f0 <_bt_checkkeys+0x1d0>
    0.00 :	  4ae508:       0f b7 52 4c             movzwl 0x4c(%rdx),%edx
    0.00 :	  4ae50c:       66 83 fa 08             cmp    $0x8,%dx
    0.00 :	  4ae510:       0f 84 2a 01 00 00       je     4ae640 <_bt_checkkeys+0x220>
    0.00 :	  4ae516:       66 83 fa 04             cmp    $0x4,%dx
    0.00 :	  4ae51a:       0f 84 30 01 00 00       je     4ae650 <_bt_checkkeys+0x230>
    0.00 :	  4ae520:       66 83 fa 02             cmp    $0x2,%dx
    0.00 :	  4ae524:       0f 84 36 01 00 00       je     4ae660 <_bt_checkkeys+0x240>
    0.00 :	  4ae52a:       48 98                   cltq   
    0.00 :	  4ae52c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae52e:       41 0f b6 54 05 08       movzbl 0x8(%r13,%rax,1),%edx
    0.00 :	  4ae534:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                                          key->sk_attno,
         :	                                                          tupdesc,
         :	                                                          &isNull);
         :
         :	                if (key->sk_flags & SK_ISNULL)
    0.00 :	  4ae538:       40 f6 c7 01             test   $0x1,%dil
    0.00 :	  4ae53c:       0f 85 5e ff ff ff       jne    4ae4a0 <_bt_checkkeys+0x80>
         :	                         * In any case, this indextuple doesn't match the qual.
         :	                         */
         :	                        return NULL;
         :	                }
         :
         :	                if (isNull)
    0.00 :	  4ae542:       84 c9                   test   %cl,%cl
    0.00 :	  4ae544:       0f 85 ec 02 00 00       jne    4ae836 <_bt_checkkeys+0x416>
         :	                         * In any case, this indextuple doesn't match the qual.
         :	                         */
         :	                        return NULL;
         :	                }
         :
         :	                test = FunctionCall2Coll(&key->sk_func, key->sk_collation,
    0.00 :	  4ae54a:       48 8b 4b 40             mov    0x40(%rbx),%rcx
    0.00 :	  4ae54e:       8b 73 0c                mov    0xc(%rbx),%esi
    0.00 :	  4ae551:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  4ae555:       e8 d6 fa 2c 00          callq  77e030 <FunctionCall2Coll>
         :	                                                                 datum, key->sk_argument);
         :
         :	                if (!DatumGetBool(test))
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1522
   33.33 :	  4ae55a:       84 c0                   test   %al,%al
    0.00 :	  4ae55c:       0f 85 54 ff ff ff       jne    4ae4b6 <_bt_checkkeys+0x96>
         :	                         * Note: because we stop the scan as soon as any required equality
         :	                         * qual fails, it is critical that equality quals be used for the
         :	                         * initial positioning in _bt_first() when they are available. See
         :	                         * comments in _bt_first().
         :	                         */
         :	                        if ((key->sk_flags & SK_BT_REQFWD) &&
    0.00 :	  4ae562:       8b 03                   mov    (%rbx),%eax
    0.00 :	  4ae564:       a9 00 00 01 00          test   $0x10000,%eax
    0.00 :	  4ae569:       74 0b                   je     4ae576 <_bt_checkkeys+0x156>
    0.00 :	  4ae56b:       83 7d cc 01             cmpl   $0x1,-0x34(%rbp)
    0.00 :	  4ae56f:       90                      nop
    0.00 :	  4ae570:       0f 84 e0 01 00 00       je     4ae756 <_bt_checkkeys+0x336>
         :	                                ScanDirectionIsForward(dir))
         :	                                *continuescan = false;
         :	                        else if ((key->sk_flags & SK_BT_REQBKWD) &&
    0.00 :	  4ae576:       a9 00 00 02 00          test   $0x20000,%eax
    0.00 :	  4ae57b:       74 13                   je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae57d:       83 7d cc ff             cmpl   $0xffffffff,-0x34(%rbp)
    0.00 :	  4ae581:       0f 84 a0 02 00 00       je     4ae827 <_bt_checkkeys+0x407>
    0.00 :	  4ae587:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4ae58e:       00 00 
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* Check for failure due to it being a killed tuple. */
         :	        if (!tuple_alive)
    0.00 :	  4ae590:       45 31 ed                xor    %r13d,%r13d
         :	                return NULL;
         :
         :	        /* If we get here, the tuple passes all index quals. */
         :	        return tuple;
         :	}
    0.00 :	  4ae593:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  4ae597:       4c 89 e8                mov    %r13,%rax
    0.00 :	  4ae59a:       5b                      pop    %rbx
    0.00 :	  4ae59b:       41 5c                   pop    %r12
    0.00 :	  4ae59d:       41 5d                   pop    %r13
    0.00 :	  4ae59f:       41 5e                   pop    %r14
    0.00 :	  4ae5a1:       41 5f                   pop    %r15
    0.00 :	  4ae5a3:       c9                      leaveq 
    0.00 :	  4ae5a4:       c3                      retq   
    0.00 :	  4ae5a5:       0f 1f 00                nopl   (%rax)
         :	                        if (_bt_check_rowcompare(key, tuple, tupdesc, dir, continuescan))
         :	                                continue;
         :	                        return NULL;
         :	                }
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae5a8:       0f bf 73 04             movswl 0x4(%rbx),%esi
    0.00 :	  4ae5ac:       31 d2                   xor    %edx,%edx
    0.00 :	  4ae5ae:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  4ae5b1:       89 c8                   mov    %ecx,%eax
    0.00 :	  4ae5b3:       83 e1 07                and    $0x7,%ecx
    0.00 :	  4ae5b6:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4ae5b9:       48 98                   cltq   
    0.00 :	  4ae5bb:       41 0f be 44 05 08       movsbl 0x8(%r13,%rax,1),%eax
    0.00 :	  4ae5c1:       d3 f8                   sar    %cl,%eax
    0.00 :	  4ae5c3:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4ae5c8:       a8 01                   test   $0x1,%al
    0.00 :	  4ae5ca:       0f 84 68 ff ff ff       je     4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae5d0:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4ae5d3:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ae5d6:       e8 85 25 fc ff          callq  470b60 <nocache_index_getattr>
    0.00 :	  4ae5db:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  4ae5dd:       48 89 c2                mov    %rax,%rdx
    0.00 :	  4ae5e0:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae5e2:       e9 51 ff ff ff          jmpq   4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae5e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4ae5ee:       00 00 
    0.00 :	  4ae5f0:       48 98                   cltq   
    0.00 :	  4ae5f2:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae5f4:       49 8d 54 05 08          lea    0x8(%r13,%rax,1),%rdx
    0.00 :	  4ae5f9:       e9 3a ff ff ff          jmpq   4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae5fe:       66 90                   xchg   %ax,%ax
         :	                                        continue;       /* tuple satisfies this qual */
         :	                        }
         :	                        else
         :	                        {
         :	                                Assert(key->sk_flags & SK_SEARCHNOTNULL);
         :	                                if (!isNull)
    0.00 :	  4ae600:       84 c9                   test   %cl,%cl
    0.00 :	  4ae602:       0f 84 ae fe ff ff       je     4ae4b6 <_bt_checkkeys+0x96>
         :	                        /*
         :	                         * Tuple fails this qual.  If it's a required qual for the current
         :	                         * scan direction, then we can conclude no further tuples will
         :	                         * pass, either.
         :	                         */
         :	                        if ((key->sk_flags & SK_BT_REQFWD) &&
    0.00 :	  4ae608:       f7 c7 00 00 01 00       test   $0x10000,%edi
    0.00 :	  4ae60e:       74 0a                   je     4ae61a <_bt_checkkeys+0x1fa>
    0.00 :	  4ae610:       83 7d cc 01             cmpl   $0x1,-0x34(%rbp)
    0.00 :	  4ae614:       0f 84 3c 01 00 00       je     4ae756 <_bt_checkkeys+0x336>
         :	                                ScanDirectionIsForward(dir))
         :	                                *continuescan = false;
         :	                        else if ((key->sk_flags & SK_BT_REQBKWD) &&
    0.00 :	  4ae61a:       81 e7 00 00 02 00       and    $0x20000,%edi
    0.00 :	  4ae620:       0f 84 6a ff ff ff       je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae626:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae628:       e9 50 ff ff ff          jmpq   4ae57d <_bt_checkkeys+0x15d>
    0.00 :	  4ae62d:       0f 1f 00                nopl   (%rax)
         :	                        if (_bt_check_rowcompare(key, tuple, tupdesc, dir, continuescan))
         :	                                continue;
         :	                        return NULL;
         :	                }
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae630:       0f bf f1                movswl %cx,%esi
    0.00 :	  4ae633:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  4ae638:       eb 96                   jmp    4ae5d0 <_bt_checkkeys+0x1b0>
    0.00 :	  4ae63a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  4ae640:       48 98                   cltq   
    0.00 :	  4ae642:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae644:       49 8b 54 05 08          mov    0x8(%r13,%rax,1),%rdx
    0.00 :	  4ae649:       e9 ea fe ff ff          jmpq   4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae64e:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae650:       48 98                   cltq   
    0.00 :	  4ae652:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae654:       41 8b 54 05 08          mov    0x8(%r13,%rax,1),%edx
    0.00 :	  4ae659:       e9 da fe ff ff          jmpq   4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae65e:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae660:       48 98                   cltq   
    0.00 :	  4ae662:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4ae664:       41 0f b7 54 05 08       movzwl 0x8(%r13,%rax,1),%edx
    0.00 :	  4ae66a:       e9 c9 fe ff ff          jmpq   4ae538 <_bt_checkkeys+0x118>
    0.00 :	  4ae66f:       90                      nop
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* Check for failure due to it being a killed tuple. */
         :	        if (!tuple_alive)
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:1549
   33.33 :	  4ae670:       80 7d d3 00             cmpb   $0x0,-0x2d(%rbp)
    0.00 :	  4ae674:       0f 85 19 ff ff ff       jne    4ae593 <_bt_checkkeys+0x173>
    0.00 :	  4ae67a:       e9 11 ff ff ff          jmpq   4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae67f:       90                      nop
         :	 */
         :	static bool
         :	_bt_check_rowcompare(ScanKey skey, IndexTuple tuple, TupleDesc tupdesc,
         :	                                         ScanDirection dir, bool *continuescan)
         :	{
         :	        ScanKey         subkey = (ScanKey) DatumGetPointer(skey->sk_argument);
    0.00 :	  4ae680:       4c 8b 63 40             mov    0x40(%rbx),%r12
    0.00 :	  4ae684:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  4ae688:       eb 7b                   jmp    4ae705 <_bt_checkkeys+0x2e5>
    0.00 :	  4ae68a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                Datum           datum;
         :	                bool            isNull;
         :
         :	                Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae690:       41 0f b7 74 24 04       movzwl 0x4(%r12),%esi
    0.00 :	  4ae696:       49 8b 47 08             mov    0x8(%r15),%rax
    0.00 :	  4ae69a:       48 0f bf d6             movswq %si,%rdx
    0.00 :	  4ae69e:       48 8b 4c d0 f8          mov    -0x8(%rax,%rdx,8),%rcx
    0.00 :	  4ae6a3:       8b 79 54                mov    0x54(%rcx),%edi
    0.00 :	  4ae6a6:       85 ff                   test   %edi,%edi
    0.00 :	  4ae6a8:       0f 88 e2 00 00 00       js     4ae790 <_bt_checkkeys+0x370>
    0.00 :	  4ae6ae:       80 79 5c 00             cmpb   $0x0,0x5c(%rcx)
    0.00 :	  4ae6b2:       48 63 c7                movslq %edi,%rax
    0.00 :	  4ae6b5:       49 8d 54 05 08          lea    0x8(%r13,%rax,1),%rdx
    0.00 :	  4ae6ba:       0f 85 a8 00 00 00       jne    4ae768 <_bt_checkkeys+0x348>
         :	                         * In any case, this indextuple doesn't match the qual.
         :	                         */
         :	                        return false;
         :	                }
         :
         :	                if (subkey->sk_flags & SK_ISNULL)
    0.00 :	  4ae6c0:       41 f6 04 24 01          testb  $0x1,(%r12)
    0.00 :	  4ae6c5:       0f 85 e2 01 00 00       jne    4ae8ad <_bt_checkkeys+0x48d>
         :	                                *continuescan = false;
         :	                        return false;
         :	                }
         :
         :	                /* Perform the test --- three-way comparison not bool operator */
         :	                cmpresult = DatumGetInt32(FunctionCall2Coll(&subkey->sk_func,
    0.00 :	  4ae6cb:       49 8b 4c 24 40          mov    0x40(%r12),%rcx
    0.00 :	  4ae6d0:       41 8b 74 24 0c          mov    0xc(%r12),%esi
    0.00 :	  4ae6d5:       49 8d 7c 24 10          lea    0x10(%r12),%rdi
    0.00 :	  4ae6da:       e8 51 f9 2c 00          callq  77e030 <FunctionCall2Coll>
         :	                                                                                                        subkey->sk_collation,
         :	                                                                                                        datum,
         :	                                                                                                        subkey->sk_argument));
         :
         :	                if (subkey->sk_flags & SK_BT_DESC)
    0.00 :	  4ae6df:       41 8b 0c 24             mov    (%r12),%ecx
         :	                                *continuescan = false;
         :	                        return false;
         :	                }
         :
         :	                /* Perform the test --- three-way comparison not bool operator */
         :	                cmpresult = DatumGetInt32(FunctionCall2Coll(&subkey->sk_func,
    0.00 :	  4ae6e3:       89 c2                   mov    %eax,%edx
         :	                                                                                                        subkey->sk_collation,
         :	                                                                                                        datum,
         :	                                                                                                        subkey->sk_argument));
         :
         :	                if (subkey->sk_flags & SK_BT_DESC)
         :	                        cmpresult = -cmpresult;
    0.00 :	  4ae6e5:       f7 d8                   neg    %eax
    0.00 :	  4ae6e7:       f7 c1 00 00 00 01       test   $0x1000000,%ecx
    0.00 :	  4ae6ed:       0f 45 d0                cmovne %eax,%edx
         :
         :	                /* Done comparing if unequal, else advance to next column */
         :	                if (cmpresult != 0)
    0.00 :	  4ae6f0:       85 d2                   test   %edx,%edx
    0.00 :	  4ae6f2:       0f 85 6d 01 00 00       jne    4ae865 <_bt_checkkeys+0x445>
         :	                        break;
         :
         :	                if (subkey->sk_flags & SK_ROW_END)
    0.00 :	  4ae6f8:       f6 c1 10                test   $0x10,%cl
    0.00 :	  4ae6fb:       0f 85 64 01 00 00       jne    4ae865 <_bt_checkkeys+0x445>
         :	                        break;
         :	                subkey++;
    0.00 :	  4ae701:       49 83 c4 48             add    $0x48,%r12
         :	                Datum           datum;
         :	                bool            isNull;
         :
         :	                Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae705:       66 41 83 7d 06 00       cmpw   $0x0,0x6(%r13)
    0.00 :	  4ae70b:       79 83                   jns    4ae690 <_bt_checkkeys+0x270>
    0.00 :	  4ae70d:       41 0f bf 74 24 04       movswl 0x4(%r12),%esi
    0.00 :	  4ae713:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  4ae716:       89 c8                   mov    %ecx,%eax
    0.00 :	  4ae718:       83 e1 07                and    $0x7,%ecx
    0.00 :	  4ae71b:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4ae71e:       48 98                   cltq   
    0.00 :	  4ae720:       41 0f be 44 05 08       movsbl 0x8(%r13,%rax,1),%eax
    0.00 :	  4ae726:       d3 f8                   sar    %cl,%eax
    0.00 :	  4ae728:       a8 01                   test   $0x1,%al
    0.00 :	  4ae72a:       0f 85 80 00 00 00       jne    4ae7b0 <_bt_checkkeys+0x390>
         :	                                                          tupdesc,
         :	                                                          &isNull);
         :
         :	                if (isNull)
         :	                {
         :	                        if (subkey->sk_flags & SK_BT_NULLS_FIRST)
    0.00 :	  4ae730:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  4ae734:       a9 00 00 00 02          test   $0x2000000,%eax
    0.00 :	  4ae739:       0f 84 11 02 00 00       je     4ae950 <_bt_checkkeys+0x530>
         :	                                 * of whether the qual is > or <, so long as it's required,
         :	                                 * because it's not possible for any future tuples to pass. On
         :	                                 * a forward scan, however, we must keep going, because we may
         :	                                 * have initially positioned to the start of the index.
         :	                                 */
         :	                                if ((subkey->sk_flags & (SK_BT_REQFWD | SK_BT_REQBKWD)) &&
    0.00 :	  4ae73f:       a9 00 00 03 00          test   $0x30000,%eax
    0.00 :	  4ae744:       0f 84 46 fe ff ff       je     4ae590 <_bt_checkkeys+0x170>
         :	                                 * of whether the qual is > or <, so long as it's required,
         :	                                 * because it's not possible for any future tuples to pass. On
         :	                                 * a forward scan, however, we must keep going, because we may
         :	                                 * have initially positioned to the start of the index.
         :	                                 */
         :	                                if ((key->sk_flags & (SK_BT_REQFWD | SK_BT_REQBKWD)) &&
    0.00 :	  4ae74a:       83 7d cc ff             cmpl   $0xffffffff,-0x34(%rbp)
    0.00 :	  4ae74e:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae750:       0f 85 3a fe ff ff       jne    4ae590 <_bt_checkkeys+0x170>
         :	                         * initial positioning in _bt_first() when they are available. See
         :	                         * comments in _bt_first().
         :	                         */
         :	                        if ((key->sk_flags & SK_BT_REQFWD) &&
         :	                                ScanDirectionIsForward(dir))
         :	                                *continuescan = false;
    0.00 :	  4ae756:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  4ae75a:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ae75d:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  4ae760:       e9 2e fe ff ff          jmpq   4ae593 <_bt_checkkeys+0x173>
    0.00 :	  4ae765:       0f 1f 00                nopl   (%rax)
         :	                Datum           datum;
         :	                bool            isNull;
         :
         :	                Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae768:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  4ae76c:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  4ae770:       74 56                   je     4ae7c8 <_bt_checkkeys+0x3a8>
    0.00 :	  4ae772:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  4ae776:       74 60                   je     4ae7d8 <_bt_checkkeys+0x3b8>
    0.00 :	  4ae778:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  4ae77c:       0f 84 d3 00 00 00       je     4ae855 <_bt_checkkeys+0x435>
    0.00 :	  4ae782:       48 63 c7                movslq %edi,%rax
    0.00 :	  4ae785:       41 0f b6 54 05 08       movzbl 0x8(%r13,%rax,1),%edx
    0.00 :	  4ae78b:       e9 30 ff ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
    0.00 :	  4ae790:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4ae793:       0f bf f6                movswl %si,%esi
    0.00 :	  4ae796:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ae799:       e8 c2 23 fc ff          callq  470b60 <nocache_index_getattr>
    0.00 :	  4ae79e:       48 89 c2                mov    %rax,%rdx
    0.00 :	  4ae7a1:       e9 1a ff ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
    0.00 :	  4ae7a6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4ae7ad:       00 00 00 
    0.00 :	  4ae7b0:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4ae7b3:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ae7b6:       e8 a5 23 fc ff          callq  470b60 <nocache_index_getattr>
    0.00 :	  4ae7bb:       48 89 c2                mov    %rax,%rdx
    0.00 :	  4ae7be:       e9 fd fe ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
    0.00 :	  4ae7c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  4ae7c8:       48 63 c7                movslq %edi,%rax
    0.00 :	  4ae7cb:       49 8b 54 05 08          mov    0x8(%r13,%rax,1),%rdx
    0.00 :	  4ae7d0:       e9 eb fe ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
    0.00 :	  4ae7d5:       0f 1f 00                nopl   (%rax)
    0.00 :	  4ae7d8:       48 63 c7                movslq %edi,%rax
    0.00 :	  4ae7db:       41 8b 54 05 08          mov    0x8(%r13,%rax,1),%edx
    0.00 :	  4ae7e0:       e9 db fe ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
         :	         * index keys to prevent uselessly advancing to the next page.
         :	         */
         :	        if (scan->ignore_killed_tuples && ItemIdIsDead(iid))
         :	        {
         :	                /* return immediately if there are more tuples on the page */
         :	                if (ScanDirectionIsForward(dir))
    0.00 :	  4ae7e5:       83 7d cc 01             cmpl   $0x1,-0x34(%rbp)
    0.00 :	  4ae7e9:       0f 84 36 01 00 00       je     4ae925 <_bt_checkkeys+0x505>
         :	                }
         :	                else
         :	                {
         :	                        BTPageOpaque opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :
         :	                        if (offnum > P_FIRSTDATAKEY(opaque))
    0.00 :	  4ae7ef:       0f b7 46 10             movzwl 0x10(%rsi),%eax
    0.00 :	  4ae7f3:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  4ae7f6:       83 7c 06 04 01          cmpl   $0x1,0x4(%rsi,%rax,1)
    0.00 :	  4ae7fb:       19 c0                   sbb    %eax,%eax
    0.00 :	  4ae7fd:       83 c0 02                add    $0x2,%eax
    0.00 :	  4ae800:       39 d0                   cmp    %edx,%eax
    0.00 :	  4ae802:       0f 8c 88 fd ff ff       jl     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae808:       c6 45 d3 00             movb   $0x0,-0x2d(%rbp)
    0.00 :	  4ae80c:       e9 53 fc ff ff          jmpq   4ae464 <_bt_checkkeys+0x44>
         :	                                 * whether the qual is > or <, so long as it's required,
         :	                                 * because it's not possible for any future tuples to pass. On
         :	                                 * a backward scan, however, we must keep going, because we
         :	                                 * may have initially positioned to the end of the index.
         :	                                 */
         :	                                if ((key->sk_flags & (SK_BT_REQFWD | SK_BT_REQBKWD)) &&
    0.00 :	  4ae811:       81 e7 00 00 03 00       and    $0x30000,%edi
    0.00 :	  4ae817:       0f 84 73 fd ff ff       je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae81d:       83 7d cc 01             cmpl   $0x1,-0x34(%rbp)
    0.00 :	  4ae821:       0f 85 69 fd ff ff       jne    4ae590 <_bt_checkkeys+0x170>
         :	                        if ((key->sk_flags & SK_BT_REQFWD) &&
         :	                                ScanDirectionIsForward(dir))
         :	                                *continuescan = false;
         :	                        else if ((key->sk_flags & SK_BT_REQBKWD) &&
         :	                                         ScanDirectionIsBackward(dir))
         :	                                *continuescan = false;
    0.00 :	  4ae827:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  4ae82b:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  4ae82e:       c6 02 00                movb   $0x0,(%rdx)
    0.00 :	  4ae831:       e9 5d fd ff ff          jmpq   4ae593 <_bt_checkkeys+0x173>
         :	                        return NULL;
         :	                }
         :
         :	                if (isNull)
         :	                {
         :	                        if (key->sk_flags & SK_BT_NULLS_FIRST)
    0.00 :	  4ae836:       f7 c7 00 00 00 02       test   $0x2000000,%edi
    0.00 :	  4ae83c:       74 d3                   je     4ae811 <_bt_checkkeys+0x3f1>
         :	                                 * of whether the qual is > or <, so long as it's required,
         :	                                 * because it's not possible for any future tuples to pass. On
         :	                                 * a forward scan, however, we must keep going, because we may
         :	                                 * have initially positioned to the start of the index.
         :	                                 */
         :	                                if ((key->sk_flags & (SK_BT_REQFWD | SK_BT_REQBKWD)) &&
    0.00 :	  4ae83e:       81 e7 00 00 03 00       and    $0x30000,%edi
    0.00 :	  4ae844:       0f 84 46 fd ff ff       je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae84a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  4ae850:       e9 f5 fe ff ff          jmpq   4ae74a <_bt_checkkeys+0x32a>
         :	                Datum           datum;
         :	                bool            isNull;
         :
         :	                Assert(subkey->sk_flags & SK_ROW_MEMBER);
         :
         :	                datum = index_getattr(tuple,
    0.00 :	  4ae855:       48 63 c7                movslq %edi,%rax
    0.00 :	  4ae858:       41 0f b7 54 05 08       movzwl 0x8(%r13,%rax,1),%edx
    0.00 :	  4ae85e:       66 90                   xchg   %ax,%ax
    0.00 :	  4ae860:       e9 5b fe ff ff          jmpq   4ae6c0 <_bt_checkkeys+0x2a0>
         :	        /*
         :	         * At this point cmpresult indicates the overall result of the row
         :	         * comparison, and subkey points to the deciding column (or the last
         :	         * column if the result is "=").
         :	         */
         :	        switch (subkey->sk_strategy)
    0.00 :	  4ae865:       41 0f b7 44 24 06       movzwl 0x6(%r12),%eax
    0.00 :	  4ae86b:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  4ae86f:       90                      nop
    0.00 :	  4ae870:       0f 84 ef 00 00 00       je     4ae965 <_bt_checkkeys+0x545>
    0.00 :	  4ae876:       77 56                   ja     4ae8ce <_bt_checkkeys+0x4ae>
    0.00 :	  4ae878:       66 83 e8 01             sub    $0x1,%ax
    0.00 :	  4ae87c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  4ae880:       75 5c                   jne    4ae8de <_bt_checkkeys+0x4be>
         :	                        break;
         :	                case BTLessEqualStrategyNumber:
         :	                        result = (cmpresult <= 0);
         :	                        break;
         :	                case BTGreaterEqualStrategyNumber:
         :	                        result = (cmpresult >= 0);
    0.00 :	  4ae882:       89 d0                   mov    %edx,%eax
    0.00 :	  4ae884:       c1 e8 1f                shr    $0x1f,%eax
         :	                                 (int) subkey->sk_strategy);
         :	                        result = 0;                     /* keep compiler quiet */
         :	                        break;
         :	        }
         :
         :	        if (!result)
    0.00 :	  4ae887:       84 c0                   test   %al,%al
    0.00 :	  4ae889:       0f 85 27 fc ff ff       jne    4ae4b6 <_bt_checkkeys+0x96>
         :	                 * Tuple fails this qual.  If it's a required qual for the current
         :	                 * scan direction, then we can conclude no further tuples will pass,
         :	                 * either.  Note we have to look at the deciding column, not
         :	                 * necessarily the first or last column of the row condition.
         :	                 */
         :	                if ((subkey->sk_flags & SK_BT_REQFWD) &&
    0.00 :	  4ae88f:       f7 c1 00 00 01 00       test   $0x10000,%ecx
    0.00 :	  4ae895:       75 77                   jne    4ae90e <_bt_checkkeys+0x4ee>
         :	                        ScanDirectionIsForward(dir))
         :	                        *continuescan = false;
         :	                else if ((subkey->sk_flags & SK_BT_REQBKWD) &&
    0.00 :	  4ae897:       81 e1 00 00 02 00       and    $0x20000,%ecx
    0.00 :	  4ae89d:       0f 84 ed fc ff ff       je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae8a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  4ae8a8:       e9 d0 fc ff ff          jmpq   4ae57d <_bt_checkkeys+0x15d>
         :	                         * But it can never match.  If all the earlier row comparison
         :	                         * columns are required for the scan direction, we can stop the
         :	                         * scan, because there can't be another tuple that will succeed.
         :	                         */
         :	                        if (subkey != (ScanKey) DatumGetPointer(skey->sk_argument))
         :	                                subkey--;
    0.00 :	  4ae8ad:       4c 3b 63 40             cmp    0x40(%rbx),%r12
    0.00 :	  4ae8b1:       49 8d 44 24 b8          lea    -0x48(%r12),%rax
    0.00 :	  4ae8b6:       4c 0f 45 e0             cmovne %rax,%r12
         :	                        if ((subkey->sk_flags & SK_BT_REQFWD) &&
    0.00 :	  4ae8ba:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  4ae8be:       a9 00 00 01 00          test   $0x10000,%eax
    0.00 :	  4ae8c3:       0f 84 ad fc ff ff       je     4ae576 <_bt_checkkeys+0x156>
    0.00 :	  4ae8c9:       e9 9d fc ff ff          jmpq   4ae56b <_bt_checkkeys+0x14b>
         :	        /*
         :	         * At this point cmpresult indicates the overall result of the row
         :	         * comparison, and subkey points to the deciding column (or the last
         :	         * column if the result is "=").
         :	         */
         :	        switch (subkey->sk_strategy)
    0.00 :	  4ae8ce:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  4ae8d2:       74 45                   je     4ae919 <_bt_checkkeys+0x4f9>
    0.00 :	  4ae8d4:       66 83 f8 05             cmp    $0x5,%ax
    0.00 :	  4ae8d8:       0f 84 91 00 00 00       je     4ae96f <_bt_checkkeys+0x54f>
         :	                        break;
         :	                case BTGreaterStrategyNumber:
         :	                        result = (cmpresult > 0);
         :	                        break;
         :	                default:
         :	                        elog(ERROR, "unrecognized RowCompareType: %d",
    0.00 :	  4ae8de:       ba 20 4b 7b 00          mov    $0x7b4b20,%edx
    0.00 :	  4ae8e3:       be 99 06 00 00          mov    $0x699,%esi
    0.00 :	  4ae8e8:       bf 17 49 7b 00          mov    $0x7b4917,%edi
    0.00 :	  4ae8ed:       e8 2e cb 2c 00          callq  77b420 <elog_start>
    0.00 :	  4ae8f2:       41 0f b7 54 24 06       movzwl 0x6(%r12),%edx
    0.00 :	  4ae8f8:       be 98 49 7b 00          mov    $0x7b4998,%esi
    0.00 :	  4ae8fd:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4ae902:       31 c0                   xor    %eax,%eax
    0.00 :	  4ae904:       e8 27 c9 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4ae909:       e8 c2 ab fb ff          callq  4694d0 <abort@plt>
         :	                 * Tuple fails this qual.  If it's a required qual for the current
         :	                 * scan direction, then we can conclude no further tuples will pass,
         :	                 * either.  Note we have to look at the deciding column, not
         :	                 * necessarily the first or last column of the row condition.
         :	                 */
         :	                if ((subkey->sk_flags & SK_BT_REQFWD) &&
    0.00 :	  4ae90e:       83 7d cc 01             cmpl   $0x1,-0x34(%rbp)
    0.00 :	  4ae912:       75 83                   jne    4ae897 <_bt_checkkeys+0x477>
    0.00 :	  4ae914:       e9 3d fe ff ff          jmpq   4ae756 <_bt_checkkeys+0x336>
         :	                        break;
         :	                case BTLessEqualStrategyNumber:
         :	                        result = (cmpresult <= 0);
         :	                        break;
         :	                case BTGreaterEqualStrategyNumber:
         :	                        result = (cmpresult >= 0);
    0.00 :	  4ae919:       f7 d2                   not    %edx
    0.00 :	  4ae91b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  4ae920:       e9 5d ff ff ff          jmpq   4ae882 <_bt_checkkeys+0x462>
         :	        if (scan->ignore_killed_tuples && ItemIdIsDead(iid))
         :	        {
         :	                /* return immediately if there are more tuples on the page */
         :	                if (ScanDirectionIsForward(dir))
         :	                {
         :	                        if (offnum < PageGetMaxOffsetNumber(page))
    0.00 :	  4ae925:       0f b7 46 0c             movzwl 0xc(%rsi),%eax
    0.00 :	  4ae929:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  4ae92d:       0f 1f 00                nopl   (%rax)
    0.00 :	  4ae930:       0f 86 d2 fe ff ff       jbe    4ae808 <_bt_checkkeys+0x3e8>
    0.00 :	  4ae936:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4ae939:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4ae93d:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  4ae941:       48 39 c1                cmp    %rax,%rcx
    0.00 :	  4ae944:       0f 82 46 fc ff ff       jb     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae94a:       e9 b9 fe ff ff          jmpq   4ae808 <_bt_checkkeys+0x3e8>
    0.00 :	  4ae94f:       90                      nop
         :	                                 * whether the qual is > or <, so long as it's required,
         :	                                 * because it's not possible for any future tuples to pass. On
         :	                                 * a backward scan, however, we must keep going, because we
         :	                                 * may have initially positioned to the end of the index.
         :	                                 */
         :	                                if ((subkey->sk_flags & (SK_BT_REQFWD | SK_BT_REQBKWD)) &&
    0.00 :	  4ae950:       a9 00 00 03 00          test   $0x30000,%eax
    0.00 :	  4ae955:       0f 84 35 fc ff ff       je     4ae590 <_bt_checkkeys+0x170>
    0.00 :	  4ae95b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  4ae960:       e9 b8 fe ff ff          jmpq   4ae81d <_bt_checkkeys+0x3fd>
         :	                        /* EQ and NE cases aren't allowed here */
         :	                case BTLessStrategyNumber:
         :	                        result = (cmpresult < 0);
         :	                        break;
         :	                case BTLessEqualStrategyNumber:
         :	                        result = (cmpresult <= 0);
    0.00 :	  4ae965:       85 d2                   test   %edx,%edx
    0.00 :	  4ae967:       0f 9e c0                setle  %al
    0.00 :	  4ae96a:       e9 18 ff ff ff          jmpq   4ae887 <_bt_checkkeys+0x467>
         :	                        break;
         :	                case BTGreaterEqualStrategyNumber:
         :	                        result = (cmpresult >= 0);
         :	                        break;
         :	                case BTGreaterStrategyNumber:
         :	                        result = (cmpresult > 0);
    0.00 :	  4ae96f:       85 d2                   test   %edx,%edx
    0.00 :	  4ae971:       0f 9f c0                setg   %al
    0.00 :	  4ae974:       e9 0e ff ff ff          jmpq   4ae887 <_bt_checkkeys+0x467>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ccfc0 <DataChecksumsEnabled>:
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfc0:       48 8b 05 d9 c1 6a 00    mov    0x6ac1d9(%rip),%rax        # b791a0 <ControlFile>
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
   66.67 :	  4ccfc7:       55                      push   %rbp
    0.00 :	  4ccfc8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ccfcb:       8b 80 ec 00 00 00       mov    0xec(%rax),%eax
         :	        Assert(ControlFile != NULL);
         :	        return (ControlFile->data_checksum_version > 0);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
   33.33 :	  4ccfd1:       c9                      leaveq 
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfd2:       85 c0                   test   %eax,%eax
    0.00 :	  4ccfd4:       0f 95 c0                setne  %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006425d0 <pgstat_end_function_usage>:
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6425d0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   33.33 :	  6425d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6425d4:       41 55                   push   %r13
   33.33 :	  6425d6:       41 89 f5                mov    %esi,%r13d
    0.00 :	  6425d9:       41 54                   push   %r12
    0.00 :	  6425db:       49 89 fc                mov    %rdi,%r12
    0.00 :	  6425de:       53                      push   %rbx
    0.00 :	  6425df:       48 83 ec 18             sub    $0x18,%rsp
         :	        PgStat_FunctionCounts *fs = fcu->fs;
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
   33.33 :	  6425e3:       48 8b 1f                mov    (%rdi),%rbx
         :	        instr_time      f_total;
         :	        instr_time      f_others;
         :	        instr_time      f_self;
         :
         :	        /* stats not wanted? */
         :	        if (fs == NULL)
    0.00 :	  6425e6:       48 85 db                test   %rbx,%rbx
    0.00 :	  6425e9:       0f 84 6f 01 00 00       je     64275e <pgstat_end_function_usage+0x18e>
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
    0.00 :	  6425ef:       48 8d 7d d0             lea    -0x30(%rbp),%rdi
    0.00 :	  6425f3:       31 f6                   xor    %esi,%esi
    0.00 :	  6425f5:       e8 c6 6f e2 ff          callq  4695c0 <gettimeofday@plt>
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  6425fa:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
    0.00 :	  6425fe:       49 2b 4c 24 30          sub    0x30(%r12),%rcx
    0.00 :	  642603:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642607:       49 2b 44 24 28          sub    0x28(%r12),%rax
    0.00 :	  64260c:       48 85 c9                test   %rcx,%rcx
    0.00 :	  64260f:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642613:       49 89 c1                mov    %rax,%r9
    0.00 :	  642616:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  64261a:       79 1c                   jns    642638 <pgstat_end_function_usage+0x68>
    0.00 :	  64261c:       0f 1f 40 00             nopl   0x0(%rax)
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  642620:       48 83 e8 01             sub    $0x1,%rax
         :	        if (fs == NULL)
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  642624:       48 81 c1 40 42 0f 00    add    $0xf4240,%rcx
    0.00 :	  64262b:       78 f3                   js     642620 <pgstat_end_function_usage+0x50>
    0.00 :	  64262d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  642631:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642635:       49 89 c1                mov    %rax,%r9
         :
         :	        /* self usage: elapsed minus anything already charged to other calls */
         :	        f_others = total_func_time;
    0.00 :	  642638:       4c 8b 05 e9 98 53 00    mov    0x5398e9(%rip),%r8        # b7bf28 <total_func_time+0x8>
    0.00 :	  64263f:       4c 8b 15 da 98 53 00    mov    0x5398da(%rip),%r10        # b7bf20 <total_func_time>
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
    0.00 :	  642646:       4c 89 c0                mov    %r8,%rax
    0.00 :	  642649:       4c 89 d2                mov    %r10,%rdx
    0.00 :	  64264c:       49 2b 54 24 18          sub    0x18(%r12),%rdx
    0.00 :	  642651:       49 2b 44 24 20          sub    0x20(%r12),%rax
    0.00 :	  642656:       79 14                   jns    64266c <pgstat_end_function_usage+0x9c>
    0.00 :	  642658:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  64265f:       00 
    0.00 :	  642660:       48 83 ea 01             sub    $0x1,%rdx
    0.00 :	  642664:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  64266a:       78 f4                   js     642660 <pgstat_end_function_usage+0x90>
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
    0.00 :	  64266c:       4c 89 cf                mov    %r9,%rdi
    0.00 :	  64266f:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  642672:       48 29 d7                sub    %rdx,%rdi
    0.00 :	  642675:       48 29 c6                sub    %rax,%rsi
    0.00 :	  642678:       79 13                   jns    64268d <pgstat_end_function_usage+0xbd>
    0.00 :	  64267a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  642680:       48 83 ef 01             sub    $0x1,%rdi
    0.00 :	  642684:       48 81 c6 40 42 0f 00    add    $0xf4240,%rsi
    0.00 :	  64268b:       78 f3                   js     642680 <pgstat_end_function_usage+0xb0>
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  64268d:       4a 8d 04 06             lea    (%rsi,%r8,1),%rax
    0.00 :	  642691:       4a 8d 14 17             lea    (%rdi,%r10,1),%rdx
    0.00 :	  642695:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  64269b:       48 89 15 7e 98 53 00    mov    %rdx,0x53987e(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426a2:       48 89 05 7f 98 53 00    mov    %rax,0x53987f(%rip)        # b7bf28 <total_func_time+0x8>
    0.00 :	  6426a9:       7e 25                   jle    6426d0 <pgstat_end_function_usage+0x100>
    0.00 :	  6426ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6426b0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426b6:       48 83 c2 01             add    $0x1,%rdx
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  6426ba:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426c0:       7f ee                   jg     6426b0 <pgstat_end_function_usage+0xe0>
    0.00 :	  6426c2:       48 89 15 57 98 53 00    mov    %rdx,0x539857(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426c9:       48 89 05 58 98 53 00    mov    %rax,0x539858(%rip)        # b7bf28 <total_func_time+0x8>
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426d0:       48 89 c8                mov    %rcx,%rax
    0.00 :	  6426d3:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	  6426d8:       4c 89 ca                mov    %r9,%rdx
    0.00 :	  6426db:       49 03 54 24 08          add    0x8(%r12),%rdx
    0.00 :	  6426e0:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426e6:       48 89 45 d8             mov    %rax,-0x28(%rbp)
    0.00 :	  6426ea:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  6426ee:       7e 1a                   jle    64270a <pgstat_end_function_usage+0x13a>
    0.00 :	  6426f0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426f6:       48 83 c2 01             add    $0x1,%rdx
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426fa:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642700:       7f ee                   jg     6426f0 <pgstat_end_function_usage+0x120>
    0.00 :	  642702:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  642706:       48 89 45 d8             mov    %rax,-0x28(%rbp)
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
    0.00 :	  64270a:       45 84 ed                test   %r13b,%r13b
    0.00 :	  64270d:       75 61                   jne    642770 <pgstat_end_function_usage+0x1a0>
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64270f:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642713:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  642717:       48 8b 45 d8             mov    -0x28(%rbp),%rax
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  64271b:       48 01 7b 18             add    %rdi,0x18(%rbx)
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64271f:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  642723:       48 89 f0                mov    %rsi,%rax
    0.00 :	  642726:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	  64272a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642730:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642734:       7e 21                   jle    642757 <pgstat_end_function_usage+0x187>
    0.00 :	  642736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64273d:       00 00 00 
    0.00 :	  642740:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  642746:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  64274b:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642751:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642755:       7f e9                   jg     642740 <pgstat_end_function_usage+0x170>
         :
         :	        /* indicate that we have something to send */
         :	        have_function_stats = true;
    0.00 :	  642757:       c6 05 4a 95 53 00 01    movb   $0x1,0x53954a(%rip)        # b7bca8 <have_function_stats>
         :	}
    0.00 :	  64275e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  642762:       5b                      pop    %rbx
    0.00 :	  642763:       41 5c                   pop    %r12
    0.00 :	  642765:       41 5d                   pop    %r13
    0.00 :	  642767:       c9                      leaveq 
    0.00 :	  642768:       c3                      retq   
    0.00 :	  642769:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
    0.00 :	  642770:       48 83 03 01             addq   $0x1,(%rbx)
    0.00 :	  642774:       eb 99                   jmp    64270f <pgstat_end_function_usage+0x13f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1261
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1260
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006766c0 <ReleaseAndReadBuffer>:
         :	 */
         :	Buffer
         :	ReleaseAndReadBuffer(Buffer buffer,
         :	                                         Relation relation,
         :	                                         BlockNumber blockNum)
         :	{
    0.00 :	  6766c0:       55                      push   %rbp
    0.00 :	  6766c1:       89 f9                   mov    %edi,%ecx
    0.00 :	  6766c3:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6766c6:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6766ca:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6766ce:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  6766d1:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6766d5:       48 83 ec 20             sub    $0x20,%rsp
         :	        ForkNumber      forkNum = MAIN_FORKNUM;
         :	        volatile BufferDesc *bufHdr;
         :
         :	        if (BufferIsValid(buffer))
    0.00 :	  6766d9:       83 ff 00                cmp    $0x0,%edi
         :	 */
         :	Buffer
         :	ReleaseAndReadBuffer(Buffer buffer,
         :	                                         Relation relation,
         :	                                         BlockNumber blockNum)
         :	{
    0.00 :	  6766dc:       41 89 d4                mov    %edx,%r12d
         :	        ForkNumber      forkNum = MAIN_FORKNUM;
         :	        volatile BufferDesc *bufHdr;
         :
         :	        if (BufferIsValid(buffer))
    0.00 :	  6766df:       74 2d                   je     67670e <ReleaseAndReadBuffer+0x4e>
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
    0.00 :	  6766e1:       7c 4d                   jl     676730 <ReleaseAndReadBuffer+0x70>
         :	                        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
         :	                        LocalRefCount[-buffer - 1]--;
         :	                }
         :	                else
         :	                {
         :	                        bufHdr = &BufferDescriptors[buffer - 1];
    0.00 :	  6766e3:       48 63 c7                movslq %edi,%rax
    0.00 :	  6766e6:       48 8d 78 ff             lea    -0x1(%rax),%rdi
    0.00 :	  6766ea:       48 c1 e7 06             shl    $0x6,%rdi
    0.00 :	  6766ee:       48 03 3d 0b 94 54 00    add    0x54940b(%rip),%rdi        # bbfb00 <BufferDescriptors>
         :	                        /* we have pin, so it's ok to examine tag without spinlock */
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  6766f5:       8b 47 10                mov    0x10(%rdi),%eax
    0.00 :	  6766f8:       39 d0                   cmp    %edx,%eax
    0.00 :	  6766fa:       75 08                   jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  6766fc:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  6766ff:       3b 46 08                cmp    0x8(%rsi),%eax
    0.00 :	  676702:       74 7c                   je     676780 <ReleaseAndReadBuffer+0xc0>
         :	                                RelFileNodeEquals(bufHdr->tag.rnode, relation->rd_node) &&
         :	                                bufHdr->tag.forkNum == forkNum)
         :	                                return buffer;
         :	                        UnpinBuffer(bufHdr, true);
    0.00 :	  676704:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676709:       e8 22 e6 ff ff          callq  674d30 <UnpinBuffer>
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1260
   33.33 :	  67670e:       44 89 e6                mov    %r12d,%esi
    0.00 :	  676711:       48 89 df                mov    %rbx,%rdi
         :	}
    0.00 :	  676714:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1261
   66.67 :	  676718:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  67671c:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  676720:       c9                      leaveq 
         :	                                return buffer;
         :	                        UnpinBuffer(bufHdr, true);
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
    0.00 :	  676721:       e9 7a ff ff ff          jmpq   6766a0 <ReadBuffer>
    0.00 :	  676726:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67672d:       00 00 00 
         :	        if (BufferIsValid(buffer))
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
         :	                {
         :	                        bufHdr = &LocalBufferDescriptors[-buffer - 1];
    0.00 :	  676730:       89 f8                   mov    %edi,%eax
    0.00 :	  676732:       f7 d0                   not    %eax
    0.00 :	  676734:       4c 63 e8                movslq %eax,%r13
    0.00 :	  676737:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  67673a:       48 c1 e2 06             shl    $0x6,%rdx
    0.00 :	  67673e:       48 03 15 cb 69 50 00    add    0x5069cb(%rip),%rdx        # b7d110 <LocalBufferDescriptors>
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  676745:       8b 42 10                mov    0x10(%rdx),%eax
    0.00 :	  676748:       44 39 e0                cmp    %r12d,%eax
    0.00 :	  67674b:       75 08                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  67674d:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  676750:       3b 46 08                cmp    0x8(%rsi),%eax
    0.00 :	  676753:       74 53                   je     6767a8 <ReleaseAndReadBuffer+0xe8>
         :	                                RelFileNodeEquals(bufHdr->tag.rnode, relation->rd_node) &&
         :	                                bufHdr->tag.forkNum == forkNum)
         :	                                return buffer;
         :	                        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
    0.00 :	  676755:       48 8b 3d 64 41 54 00    mov    0x544164(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  67675c:       89 ce                   mov    %ecx,%esi
    0.00 :	  67675e:       e8 9d 41 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
         :	                        LocalRefCount[-buffer - 1]--;
    0.00 :	  676763:       4a 8d 04 ad 00 00 00    lea    0x0(,%r13,4),%rax
    0.00 :	  67676a:       00 
    0.00 :	  67676b:       48 03 05 ae 69 50 00    add    0x5069ae(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  676772:       83 28 01                subl   $0x1,(%rax)
    0.00 :	  676775:       eb 97                   jmp    67670e <ReleaseAndReadBuffer+0x4e>
    0.00 :	  676777:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  67677e:       00 00 
         :	                }
         :	                else
         :	                {
         :	                        bufHdr = &BufferDescriptors[buffer - 1];
         :	                        /* we have pin, so it's ok to examine tag without spinlock */
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  676780:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  676783:       3b 46 04                cmp    0x4(%rsi),%eax
    0.00 :	  676786:       0f 85 78 ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  67678c:       8b 07                   mov    (%rdi),%eax
    0.00 :	  67678e:       3b 06                   cmp    (%rsi),%eax
    0.00 :	  676790:       0f 85 6e ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  676796:       8b 47 0c                mov    0xc(%rdi),%eax
    0.00 :	  676799:       85 c0                   test   %eax,%eax
    0.00 :	  67679b:       0f 85 63 ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  6767a1:       eb 1c                   jmp    6767bf <ReleaseAndReadBuffer+0xff>
    0.00 :	  6767a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
         :	                {
         :	                        bufHdr = &LocalBufferDescriptors[-buffer - 1];
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  6767a8:       8b 42 04                mov    0x4(%rdx),%eax
    0.00 :	  6767ab:       3b 46 04                cmp    0x4(%rsi),%eax
    0.00 :	  6767ae:       66 90                   xchg   %ax,%ax
    0.00 :	  6767b0:       75 a3                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  6767b2:       8b 02                   mov    (%rdx),%eax
    0.00 :	  6767b4:       3b 06                   cmp    (%rsi),%eax
    0.00 :	  6767b6:       75 9d                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  6767b8:       8b 42 0c                mov    0xc(%rdx),%eax
    0.00 :	  6767bb:       85 c0                   test   %eax,%eax
    0.00 :	  6767bd:       75 96                   jne    676755 <ReleaseAndReadBuffer+0x95>
         :	                        UnpinBuffer(bufHdr, true);
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
         :	}
    0.00 :	  6767bf:       89 c8                   mov    %ecx,%eax
    0.00 :	  6767c1:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6767c5:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6767c9:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6767cd:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782c50 <CHashAddToGarbage>:
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c50:       0f b6 4f 14             movzbl 0x14(%rdi),%ecx
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c54:       89 d0                   mov    %edx,%eax
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c56:       55                      push   %rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c57:       d1 e8                   shr    %eax
    0.00 :	  782c59:       41 89 c0                mov    %eax,%r8d
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c5c:       48 89 e5                mov    %rsp,%rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c5f:       44 0f af 47 1c          imul   0x1c(%rdi),%r8d
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c64:       d3 ee                   shr    %cl,%esi
    0.00 :	  782c66:       0f b6 4f 15             movzbl 0x15(%rdi),%ecx
    0.00 :	  782c6a:       89 f0                   mov    %esi,%eax
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c6c:       4c 03 47 30             add    0x30(%rdi),%r8
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c70:       d3 e8                   shr    %cl,%eax
    0.00 :	  782c72:       01 f0                   add    %esi,%eax
    0.00 :	  782c74:       48 8d 0c 85 00 00 00    lea    0x0(,%rax,4),%rcx
    0.00 :	  782c7b:       00 
    0.00 :	  782c7c:       48 03 4f 28             add    0x28(%rdi),%rcx
    0.00 :	  782c80:       eb 0e                   jmp    782c90 <CHashAddToGarbage+0x40>
    0.00 :	  782c82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                g = *garbage;
         :	                n->un.gcnext = g;
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
    0.00 :	  782c88:       48 83 87 a8 00 00 00    addq   $0x1,0xa8(%rdi)
    0.00 :	  782c8f:       01 
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
         :
         :	        while (1)
         :	        {
         :	                g = *garbage;
    0.00 :	  782c90:       8b 01                   mov    (%rcx),%eax
         :	                n->un.gcnext = g;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
   33.33 :	  782c92:       41 89 40 04             mov    %eax,0x4(%r8)
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
    0.00 :	  782c96:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
   66.67 :	  782c9a:       75 ec                   jne    782c88 <CHashAddToGarbage+0x38>
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
         :	        }
         :	}
    0.00 :	  782c9c:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f400 <slot_getattr>:
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    0.00 :	  46f400:       55                      push   %rbp
    0.00 :	  46f401:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46f404:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  46f408:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  46f40c:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  46f40f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  46f413:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  46f417:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f41b:       85 f6                   test   %esi,%esi
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    0.00 :	  46f41d:       49 89 d4                mov    %rdx,%r12
         :	        HeapTuple       tuple = slot->tts_tuple;
    0.00 :	  46f420:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
    0.00 :	  46f424:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f428:       0f 8e a2 00 00 00       jle    46f4d0 <slot_getattr+0xd0>
         :	        }
         :
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
    0.00 :	  46f42e:       3b 73 24                cmp    0x24(%rbx),%esi
    0.00 :	  46f431:       7e 65                   jle    46f498 <slot_getattr+0x98>
         :	        }
         :
         :	        /*
         :	         * return NULL if attnum is out of range according to the tupdesc
         :	         */
         :	        if (attnum > tupleDesc->natts)
    0.00 :	  46f433:       3b 32                   cmp    (%rdx),%esi
    0.00 :	  46f435:       7f 51                   jg     46f488 <slot_getattr+0x88>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
    0.00 :	  46f437:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f43a:       0f 84 34 01 00 00       je     46f574 <slot_getattr+0x174>
         :	         *
         :	         * (We have to check this separately because of various inheritance and
         :	         * table-alteration scenarios: the tuple could be either longer or shorter
         :	         * than the tupdesc.)
         :	         */
         :	        tup = tuple->t_data;
    0.00 :	  46f440:       48 8b 7f 10             mov    0x10(%rdi),%rdi
         :	        if (attnum > HeapTupleHeaderGetNatts(tup))
    0.00 :	  46f444:       0f b7 47 12             movzwl 0x12(%rdi),%eax
    0.00 :	  46f448:       25 ff 07 00 00          and    $0x7ff,%eax
    0.00 :	  46f44d:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f44f:       7f 37                   jg     46f488 <slot_getattr+0x88>
         :	        }
         :
         :	        /*
         :	         * check if target attribute is null: no point in groveling through tuple
         :	         */
         :	        if (HeapTupleHasNulls(tuple) && att_isnull(attnum - 1, tup->t_bits))
    0.00 :	  46f451:       f6 47 14 01             testb  $0x1,0x14(%rdi)
    0.00 :	  46f455:       74 18                   je     46f46f <slot_getattr+0x6f>
    0.00 :	  46f457:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  46f45a:       89 c8                   mov    %ecx,%eax
    0.00 :	  46f45c:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46f45f:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46f462:       48 98                   cltq   
    0.00 :	  46f464:       0f b6 44 07 17          movzbl 0x17(%rdi,%rax,1),%eax
    0.00 :	  46f469:       d3 f8                   sar    %cl,%eax
    0.00 :	  46f46b:       a8 01                   test   $0x1,%al
    0.00 :	  46f46d:       74 19                   je     46f488 <slot_getattr+0x88>
         :	        /*
         :	         * If the attribute's column has been dropped, we force a NULL result.
         :	         * This case should not happen in normal use, but it could happen if we
         :	         * are executing a plan cached before the column was dropped.
         :	         */
         :	        if (tupleDesc->attrs[attnum - 1]->attisdropped)
    0.00 :	  46f46f:       4c 63 ee                movslq %esi,%r13
    0.00 :	  46f472:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  46f476:       4d 8d 75 ff             lea    -0x1(%r13),%r14
    0.00 :	  46f47a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
    0.00 :	  46f47e:       80 78 61 00             cmpb   $0x0,0x61(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
   50.00 :	  46f482:       74 7c                   je     46f500 <slot_getattr+0x100>
    0.00 :	  46f484:       0f 1f 40 00             nopl   0x0(%rax)
         :	        {
         :	                *isnull = true;
    0.00 :	  46f488:       41 c6 04 24 01          movb   $0x1,(%r12)
    0.00 :	  46f48d:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f48f:       eb 20                   jmp    46f4b1 <slot_getattr+0xb1>
    0.00 :	  46f491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
         :	        {
         :	                *isnull = slot->tts_isnull[attnum - 1];
    0.00 :	  46f498:       48 8b 43 30             mov    0x30(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
   50.00 :	  46f49c:       48 63 d6                movslq %esi,%rdx
    0.00 :	  46f49f:       0f b6 44 10 ff          movzbl -0x1(%rax,%rdx,1),%eax
    0.00 :	  46f4a4:       41 88 04 24             mov    %al,(%r12)
         :	                return slot->tts_values[attnum - 1];
    0.00 :	  46f4a8:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f4ac:       48 8b 44 d0 f8          mov    -0x8(%rax,%rdx,8),%rax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4b1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4b5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  46f4ba:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4bf:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  46f4c4:       c9                      leaveq 
    0.00 :	  46f4c5:       c3                      retq   
    0.00 :	  46f4c6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46f4cd:       00 00 00 
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
    0.00 :	  46f4d0:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f4d3:       74 4b                   je     46f520 <slot_getattr+0x120>
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
    0.00 :	  46f4d5:       48 8d 43 40             lea    0x40(%rbx),%rax
    0.00 :	  46f4d9:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  46f4dc:       74 6c                   je     46f54a <slot_getattr+0x14a>
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4de:       4c 89 e1                mov    %r12,%rcx
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4e1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4e5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  46f4ea:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4ef:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  46f4f4:       c9                      leaveq 
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4f5:       e9 d6 f7 ff ff          jmpq   46ecd0 <heap_getsysattr>
    0.00 :	  46f4fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Extract the attribute, along with any preceding attributes.
         :	         */
         :	        slot_deform_tuple(slot, attnum);
    0.00 :	  46f500:       48 89 df                mov    %rbx,%rdi
    0.00 :	  46f503:       e8 08 fa ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
    0.00 :	  46f508:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  46f50c:       42 0f b6 44 28 ff       movzbl -0x1(%rax,%r13,1),%eax
    0.00 :	  46f512:       41 88 04 24             mov    %al,(%r12)
         :	        return slot->tts_values[attnum - 1];
    0.00 :	  46f516:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f51a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
         :	}
    0.00 :	  46f51e:       eb 91                   jmp    46f4b1 <slot_getattr+0xb1>
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
    0.00 :	  46f520:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f525:       be 8f 04 00 00          mov    $0x48f,%esi
    0.00 :	  46f52a:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f52f:       e8 ec be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f534:       be 40 f7 7a 00          mov    $0x7af740,%esi
    0.00 :	  46f539:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f53e:       31 c0                   xor    %eax,%eax
    0.00 :	  46f540:       e8 eb bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f545:       e8 86 9f ff ff          callq  4694d0 <abort@plt>
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
    0.00 :	  46f54a:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f54f:       be 91 04 00 00          mov    $0x491,%esi
    0.00 :	  46f554:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f559:       e8 c2 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f55e:       be 78 f7 7a 00          mov    $0x7af778,%esi
    0.00 :	  46f563:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f568:       31 c0                   xor    %eax,%eax
    0.00 :	  46f56a:       e8 c1 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f56f:       e8 5c 9f ff ff          callq  4694d0 <abort@plt>
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f574:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f579:       be ac 04 00 00          mov    $0x4ac,%esi
    0.00 :	  46f57e:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f583:       e8 98 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f588:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f58d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f592:       31 c0                   xor    %eax,%eax
    0.00 :	  46f594:       e8 97 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f599:       e8 32 9f ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtcompare.c:97
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtcompare.c:103
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a5c40 <btint4cmp>:
         :
         :	Datum
         :	btint4cmp(PG_FUNCTION_ARGS)
         :	{
         :	        int32           a = PG_GETARG_INT32(0);
         :	        int32           b = PG_GETARG_INT32(1);
    0.00 :	  4a5c40:       8b 47 28                mov    0x28(%rdi),%eax
         :
         :	        if (a > b)
    0.00 :	  4a5c43:       39 47 20                cmp    %eax,0x20(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtcompare.c:97
   50.00 :	  4a5c46:       ba 01 00 00 00          mov    $0x1,%edx
         :	        PG_RETURN_VOID();
         :	}
         :
         :	Datum
         :	btint4cmp(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4a5c4b:       55                      push   %rbp
    0.00 :	  4a5c4c:       48 89 e5                mov    %rsp,%rbp
         :	        int32           a = PG_GETARG_INT32(0);
         :	        int32           b = PG_GETARG_INT32(1);
         :
         :	        if (a > b)
    0.00 :	  4a5c4f:       7f 0e                   jg     4a5c5f <btint4cmp+0x1f>
         :	                PG_RETURN_INT32(1);
         :	        else if (a == b)
    0.00 :	  4a5c51:       ba ff ff ff ff          mov    $0xffffffff,%edx
    0.00 :	  4a5c56:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  4a5c5b:       48 0f 44 d0             cmove  %rax,%rdx
         :	                PG_RETURN_INT32(0);
         :	        else
         :	                PG_RETURN_INT32(-1);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtcompare.c:103
   50.00 :	  4a5c5f:       48 89 d0                mov    %rdx,%rax
    0.00 :	  4a5c62:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:204
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:225
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004af350 <_bt_preprocess_array_keys>:
         :	 * on scan->keyData, is that callers are permitted to call btrescan without
         :	 * supplying a new set of scankey data.
         :	 */
         :	void
         :	_bt_preprocess_array_keys(IndexScanDesc scan)
         :	{
    0.00 :	  4af350:       55                      push   %rbp
    0.00 :	  4af351:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4af354:       41 57                   push   %r15
    0.00 :	  4af356:       41 56                   push   %r14
    0.00 :	  4af358:       41 55                   push   %r13
    0.00 :	  4af35a:       41 54                   push   %r12
    0.00 :	  4af35c:       53                      push   %rbx
    0.00 :	  4af35d:       48 81 ec b8 00 00 00    sub    $0xb8,%rsp
    0.00 :	  4af364:       48 89 bd 38 ff ff ff    mov    %rdi,-0xc8(%rbp)
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4af36b:       48 8b 47 38             mov    0x38(%rdi),%rax
    0.00 :	  4af36f:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
         :	        int                     numberOfKeys = scan->numberOfKeys;
    0.00 :	  4af376:       8b 57 18                mov    0x18(%rdi),%edx
    0.00 :	  4af379:       89 95 4c ff ff ff       mov    %edx,-0xb4(%rbp)
         :	        int16      *indoption = scan->indexRelation->rd_indoption;
    0.00 :	  4af37f:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        int                     i;
         :	        MemoryContext oldContext;
         :
         :	        /* Quick check to see if there are any array keys */
         :	        numArrayKeys = 0;
         :	        for (i = 0; i < numberOfKeys; i++)
    0.00 :	  4af383:       85 d2                   test   %edx,%edx
         :	void
         :	_bt_preprocess_array_keys(IndexScanDesc scan)
         :	{
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
         :	        int                     numberOfKeys = scan->numberOfKeys;
         :	        int16      *indoption = scan->indexRelation->rd_indoption;
    0.00 :	  4af385:       48 8b 80 e8 00 00 00    mov    0xe8(%rax),%rax
    0.00 :	  4af38c:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
         :	        int                     i;
         :	        MemoryContext oldContext;
         :
         :	        /* Quick check to see if there are any array keys */
         :	        numArrayKeys = 0;
         :	        for (i = 0; i < numberOfKeys; i++)
    0.00 :	  4af393:       0f 8e 07 02 00 00       jle    4af5a0 <_bt_preprocess_array_keys+0x250>
    0.00 :	  4af399:       48 8b 77 20             mov    0x20(%rdi),%rsi
    0.00 :	  4af39d:       31 db                   xor    %ebx,%ebx
    0.00 :	  4af39f:       31 c9                   xor    %ecx,%ecx
    0.00 :	  4af3a1:       31 d2                   xor    %edx,%edx
    0.00 :	  4af3a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                cur = &scan->keyData[i];
         :	                if (cur->sk_flags & SK_SEARCHARRAY)
    0.00 :	  4af3a8:       8b 04 16                mov    (%rsi,%rdx,1),%eax
    0.00 :	  4af3ab:       a8 20                   test   $0x20,%al
    0.00 :	  4af3ad:       74 0b                   je     4af3ba <_bt_preprocess_array_keys+0x6a>
         :	                {
         :	                        numArrayKeys++;
         :	                        Assert(!(cur->sk_flags & (SK_ROW_HEADER | SK_SEARCHNULL | SK_SEARCHNOTNULL)));
         :	                        /* If any arrays are null as a whole, we can quit right now. */
         :	                        if (cur->sk_flags & SK_ISNULL)
    0.00 :	  4af3af:       a8 01                   test   $0x1,%al
    0.00 :	  4af3b1:       0f 85 d9 03 00 00       jne    4af790 <_bt_preprocess_array_keys+0x440>
         :	        for (i = 0; i < numberOfKeys; i++)
         :	        {
         :	                cur = &scan->keyData[i];
         :	                if (cur->sk_flags & SK_SEARCHARRAY)
         :	                {
         :	                        numArrayKeys++;
    0.00 :	  4af3b7:       83 c3 01                add    $0x1,%ebx
         :	        int                     i;
         :	        MemoryContext oldContext;
         :
         :	        /* Quick check to see if there are any array keys */
         :	        numArrayKeys = 0;
         :	        for (i = 0; i < numberOfKeys; i++)
    0.00 :	  4af3ba:       83 c1 01                add    $0x1,%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:204
   50.00 :	  4af3bd:       48 83 c2 48             add    $0x48,%rdx
    0.00 :	  4af3c1:       39 8d 4c ff ff ff       cmp    %ecx,-0xb4(%rbp)
    0.00 :	  4af3c7:       7f df                   jg     4af3a8 <_bt_preprocess_array_keys+0x58>
         :	                        }
         :	                }
         :	        }
         :
         :	        /* Quit if nothing to do. */
         :	        if (numArrayKeys == 0)
    0.00 :	  4af3c9:       85 db                   test   %ebx,%ebx
    0.00 :	  4af3cb:       0f 84 cf 01 00 00       je     4af5a0 <_bt_preprocess_array_keys+0x250>
         :
         :	        /*
         :	         * Make a scan-lifespan context to hold array-associated data, or reset it
         :	         * if we already have one from a previous rescan cycle.
         :	         */
         :	        if (so->arrayContext == NULL)
    0.00 :	  4af3d1:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	  4af3d8:       48 8b 7a 28             mov    0x28(%rdx),%rdi
    0.00 :	  4af3dc:       48 85 ff                test   %rdi,%rdi
    0.00 :	  4af3df:       0f 84 0b 04 00 00       je     4af7f0 <_bt_preprocess_array_keys+0x4a0>
         :	                                                                                                 "BTree Array Context",
         :	                                                                                                 ALLOCSET_SMALL_MINSIZE,
         :	                                                                                                 ALLOCSET_SMALL_INITSIZE,
         :	                                                                                                 ALLOCSET_SMALL_MAXSIZE);
         :	        else
         :	                MemoryContextReset(so->arrayContext);
    0.00 :	  4af3e5:       e8 c6 95 2e 00          callq  7989b0 <MemoryContextReset>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  4af3ea:       48 8b 05 6f b4 70 00    mov    0x70b46f(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  4af3f1:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  4af3f8:       48 89 85 58 ff ff ff    mov    %rax,-0xa8(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  4af3ff:       48 8b 42 28             mov    0x28(%rdx),%rax
    0.00 :	  4af403:       48 89 05 56 b4 70 00    mov    %rax,0x70b456(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        oldContext = MemoryContextSwitchTo(so->arrayContext);
         :
         :	        /* Create modifiable copy of scan->keyData in the workspace context */
         :	        so->arrayKeyData = (ScanKey) palloc(scan->numberOfKeys * sizeof(ScanKeyData));
    0.00 :	  4af40a:       48 8b 85 38 ff ff ff    mov    -0xc8(%rbp),%rax
    0.00 :	  4af411:       48 63 78 18             movslq 0x18(%rax),%rdi
    0.00 :	  4af415:       48 8d 3c ff             lea    (%rdi,%rdi,8),%rdi
    0.00 :	  4af419:       48 c1 e7 03             shl    $0x3,%rdi
    0.00 :	  4af41d:       e8 2e 99 2e 00          callq  798d50 <palloc>
    0.00 :	  4af422:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	  4af429:       48 89 c7                mov    %rax,%rdi
    0.00 :	  4af42c:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	        memcpy(so->arrayKeyData,
    0.00 :	  4af430:       48 8b 85 38 ff ff ff    mov    -0xc8(%rbp),%rax
    0.00 :	  4af437:       48 63 50 18             movslq 0x18(%rax),%rdx
    0.00 :	  4af43b:       48 8b 70 20             mov    0x20(%rax),%rsi
    0.00 :	  4af43f:       48 8d 14 d2             lea    (%rdx,%rdx,8),%rdx
    0.00 :	  4af443:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  4af447:       e8 a4 a7 fb ff          callq  469bf0 <memcpy@plt>
         :	                   scan->keyData,
         :	                   scan->numberOfKeys * sizeof(ScanKeyData));
         :
         :	        /* Allocate space for per-array data in the workspace context */
         :	        so->arrayKeys = (BTArrayKeyInfo *) palloc0(numArrayKeys * sizeof(BTArrayKeyInfo));
    0.00 :	  4af44c:       48 63 fb                movslq %ebx,%rdi
    0.00 :	  4af44f:       48 8d 3c 7f             lea    (%rdi,%rdi,2),%rdi
    0.00 :	  4af453:       48 c1 e7 03             shl    $0x3,%rdi
    0.00 :	  4af457:       e8 14 9b 2e 00          callq  798f70 <palloc0>
    0.00 :	  4af45c:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	  4af463:       48 89 42 20             mov    %rax,0x20(%rdx)
    0.00 :	  4af467:       c7 85 6c ff ff ff 00    movl   $0x0,-0x94(%rbp)
    0.00 :	  4af46e:       00 00 00 
    0.00 :	  4af471:       c7 85 7c ff ff ff 00    movl   $0x0,-0x84(%rbp)
    0.00 :	  4af478:       00 00 00 
    0.00 :	  4af47b:       48 c7 85 60 ff ff ff    movq   $0x0,-0xa0(%rbp)
    0.00 :	  4af482:       00 00 00 00 
    0.00 :	  4af486:       eb 29                   jmp    4af4b1 <_bt_preprocess_array_keys+0x161>
    0.00 :	  4af488:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4af48f:       00 
         :
         :	        /* Now process each array key */
         :	        numArrayKeys = 0;
         :	        for (i = 0; i < numberOfKeys; i++)
    0.00 :	  4af490:       83 85 7c ff ff ff 01    addl   $0x1,-0x84(%rbp)
    0.00 :	  4af497:       48 83 85 60 ff ff ff    addq   $0x48,-0xa0(%rbp)
    0.00 :	  4af49e:       48 
    0.00 :	  4af49f:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  4af4a5:       39 85 4c ff ff ff       cmp    %eax,-0xb4(%rbp)
    0.00 :	  4af4ab:       0f 8e 04 03 00 00       jle    4af7b5 <_bt_preprocess_array_keys+0x465>
         :	                Datum      *elem_values;
         :	                bool       *elem_nulls;
         :	                int                     num_nonnulls;
         :	                int                     j;
         :
         :	                cur = &so->arrayKeyData[i];
    0.00 :	  4af4b1:       48 8b 9d 40 ff ff ff    mov    -0xc0(%rbp),%rbx
    0.00 :	  4af4b8:       4c 8b a5 60 ff ff ff    mov    -0xa0(%rbp),%r12
    0.00 :	  4af4bf:       4c 03 63 10             add    0x10(%rbx),%r12
         :	                if (!(cur->sk_flags & SK_SEARCHARRAY))
    0.00 :	  4af4c3:       41 f6 04 24 20          testb  $0x20,(%r12)
    0.00 :	  4af4c8:       74 c6                   je     4af490 <_bt_preprocess_array_keys+0x140>
         :	                /*
         :	                 * First, deconstruct the array into elements.  Anything allocated
         :	                 * here (including a possibly detoasted array value) is in the
         :	                 * workspace context.
         :	                 */
         :	                arrayval = DatumGetArrayTypeP(cur->sk_argument);
    0.00 :	  4af4ca:       49 8b 7c 24 40          mov    0x40(%r12),%rdi
    0.00 :	  4af4cf:       e8 3c f8 2c 00          callq  77ed10 <pg_detoast_datum>
         :	                /* We could cache this data, but not clear it's worth it */
         :	                get_typlenbyvalalign(ARR_ELEMTYPE(arrayval),
    0.00 :	  4af4d4:       8b 78 0c                mov    0xc(%rax),%edi
    0.00 :	  4af4d7:       48 8d 4d ce             lea    -0x32(%rbp),%rcx
    0.00 :	  4af4db:       48 8d 55 cf             lea    -0x31(%rbp),%rdx
    0.00 :	  4af4df:       48 8d 75 cc             lea    -0x34(%rbp),%rsi
         :	                /*
         :	                 * First, deconstruct the array into elements.  Anything allocated
         :	                 * here (including a possibly detoasted array value) is in the
         :	                 * workspace context.
         :	                 */
         :	                arrayval = DatumGetArrayTypeP(cur->sk_argument);
    0.00 :	  4af4e3:       48 89 c3                mov    %rax,%rbx
         :	                /* We could cache this data, but not clear it's worth it */
         :	                get_typlenbyvalalign(ARR_ELEMTYPE(arrayval),
    0.00 :	  4af4e6:       e8 85 39 2c 00          callq  772e70 <get_typlenbyvalalign>
         :	                                                         &elmlen, &elmbyval, &elmalign);
         :	                deconstruct_array(arrayval,
    0.00 :	  4af4eb:       48 8d 45 c8             lea    -0x38(%rbp),%rax
    0.00 :	  4af4ef:       44 0f be 45 ce          movsbl -0x32(%rbp),%r8d
    0.00 :	  4af4f4:       0f be 4d cf             movsbl -0x31(%rbp),%ecx
    0.00 :	  4af4f8:       0f bf 55 cc             movswl -0x34(%rbp),%edx
    0.00 :	  4af4fc:       8b 73 0c                mov    0xc(%rbx),%esi
    0.00 :	  4af4ff:       4c 8d 4d c0             lea    -0x40(%rbp),%r9
    0.00 :	  4af503:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	  4af508:       48 8d 45 b8             lea    -0x48(%rbp),%rax
    0.00 :	  4af50c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4af50f:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  4af513:       e8 48 97 20 00          callq  6b8c60 <deconstruct_array>
         :	                /*
         :	                 * Compress out any null elements.  We can ignore them since we assume
         :	                 * all btree operators are strict.
         :	                 */
         :	                num_nonnulls = 0;
         :	                for (j = 0; j < num_elems; j++)
    0.00 :	  4af518:       8b 7d c8                mov    -0x38(%rbp),%edi
    0.00 :	  4af51b:       85 ff                   test   %edi,%edi
    0.00 :	  4af51d:       0f 8e 88 02 00 00       jle    4af7ab <_bt_preprocess_array_keys+0x45b>
    0.00 :	  4af523:       31 db                   xor    %ebx,%ebx
    0.00 :	  4af525:       31 f6                   xor    %esi,%esi
    0.00 :	  4af527:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4af52e:       00 00 
         :	                {
         :	                        if (!elem_nulls[j])
    0.00 :	  4af530:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  4af534:       48 63 d6                movslq %esi,%rdx
    0.00 :	  4af537:       80 3c 10 00             cmpb   $0x0,(%rax,%rdx,1)
    0.00 :	  4af53b:       75 12                   jne    4af54f <_bt_preprocess_array_keys+0x1ff>
         :	                                elem_values[num_nonnulls++] = elem_values[j];
    0.00 :	  4af53d:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  4af541:       48 63 cb                movslq %ebx,%rcx
    0.00 :	  4af544:       83 c3 01                add    $0x1,%ebx
    0.00 :	  4af547:       48 8b 14 d0             mov    (%rax,%rdx,8),%rdx
    0.00 :	  4af54b:       48 89 14 c8             mov    %rdx,(%rax,%rcx,8)
         :	                /*
         :	                 * Compress out any null elements.  We can ignore them since we assume
         :	                 * all btree operators are strict.
         :	                 */
         :	                num_nonnulls = 0;
         :	                for (j = 0; j < num_elems; j++)
    0.00 :	  4af54f:       83 c6 01                add    $0x1,%esi
    0.00 :	  4af552:       39 75 c8                cmp    %esi,-0x38(%rbp)
    0.00 :	  4af555:       7f d9                   jg     4af530 <_bt_preprocess_array_keys+0x1e0>
         :	                }
         :
         :	                /* We could pfree(elem_nulls) now, but not worth the cycles */
         :
         :	                /* If there's no non-nulls, the scan qual is unsatisfiable */
         :	                if (num_nonnulls == 0)
    0.00 :	  4af557:       85 db                   test   %ebx,%ebx
    0.00 :	  4af559:       0f 84 4c 02 00 00       je     4af7ab <_bt_preprocess_array_keys+0x45b>
         :	                /*
         :	                 * If the comparison operator is not equality, then the array qual
         :	                 * degenerates to a simple comparison against the smallest or largest
         :	                 * non-null array element, as appropriate.
         :	                 */
         :	                switch (cur->sk_strategy)
    0.00 :	  4af55f:       66 41 83 7c 24 06 05    cmpw   $0x5,0x6(%r12)
    0.00 :	  4af566:       76 68                   jbe    4af5d0 <_bt_preprocess_array_keys+0x280>
         :	                                        _bt_find_extreme_element(scan, cur,
         :	                                                                                         BTLessStrategyNumber,
         :	                                                                                         elem_values, num_nonnulls);
         :	                                continue;
         :	                        default:
         :	                                elog(ERROR, "unrecognized StrategyNumber: %d",
    0.00 :	  4af568:       ba a0 4b 7b 00          mov    $0x7b4ba0,%edx
    0.00 :	  4af56d:       be 4b 01 00 00          mov    $0x14b,%esi
    0.00 :	  4af572:       bf 17 49 7b 00          mov    $0x7b4917,%edi
    0.00 :	  4af577:       e8 a4 be 2c 00          callq  77b420 <elog_start>
    0.00 :	  4af57c:       41 0f b7 54 24 06       movzwl 0x6(%r12),%edx
    0.00 :	  4af582:       be 78 49 7b 00          mov    $0x7b4978,%esi
    0.00 :	  4af587:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4af58c:       31 c0                   xor    %eax,%eax
    0.00 :	  4af58e:       e8 9d bc 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4af593:       e8 38 9f fb ff          callq  4694d0 <abort@plt>
    0.00 :	  4af598:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4af59f:       00 
         :	        }
         :
         :	        /* Quit if nothing to do. */
         :	        if (numArrayKeys == 0)
         :	        {
         :	                so->numArrayKeys = 0;
    0.00 :	  4af5a0:       48 8b 85 40 ff ff ff    mov    -0xc0(%rbp),%rax
    0.00 :	  4af5a7:       c7 40 18 00 00 00 00    movl   $0x0,0x18(%rax)
         :	                so->arrayKeyData = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtutils.c:225
   50.00 :	  4af5ae:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  4af5b5:       00 
         :	        }
         :
         :	        so->numArrayKeys = numArrayKeys;
         :
         :	        MemoryContextSwitchTo(oldContext);
         :	}
    0.00 :	  4af5b6:       48 81 c4 b8 00 00 00    add    $0xb8,%rsp
    0.00 :	  4af5bd:       5b                      pop    %rbx
    0.00 :	  4af5be:       41 5c                   pop    %r12
    0.00 :	  4af5c0:       41 5d                   pop    %r13
    0.00 :	  4af5c2:       41 5e                   pop    %r14
    0.00 :	  4af5c4:       41 5f                   pop    %r15
    0.00 :	  4af5c6:       c9                      leaveq 
    0.00 :	  4af5c7:       c3                      retq   
    0.00 :	  4af5c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4af5cf:       00 
         :	                /*
         :	                 * If the comparison operator is not equality, then the array qual
         :	                 * degenerates to a simple comparison against the smallest or largest
         :	                 * non-null array element, as appropriate.
         :	                 */
         :	                switch (cur->sk_strategy)
    0.00 :	  4af5d0:       41 0f b7 44 24 06       movzwl 0x6(%r12),%eax
    0.00 :	  4af5d6:       ff 24 c5 d0 4a 7b 00    jmpq   *0x7b4ad0(,%rax,8)
         :	                        case BTEqualStrategyNumber:
         :	                                /* proceed with rest of loop */
         :	                                break;
         :	                        case BTGreaterEqualStrategyNumber:
         :	                        case BTGreaterStrategyNumber:
         :	                                cur->sk_argument =
    0.00 :	  4af5dd:       48 8b 4d c0             mov    -0x40(%rbp),%rcx
    0.00 :	  4af5e1:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  4af5e8:       41 89 d8                mov    %ebx,%r8d
    0.00 :	  4af5eb:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4af5f0:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  4af5f3:       e8 e8 fb ff ff          callq  4af1e0 <_bt_find_extreme_element>
    0.00 :	  4af5f8:       49 89 44 24 40          mov    %rax,0x40(%r12)
         :	                                        _bt_find_extreme_element(scan, cur,
         :	                                                                                         BTLessStrategyNumber,
         :	                                                                                         elem_values, num_nonnulls);
         :	                                continue;
    0.00 :	  4af5fd:       e9 8e fe ff ff          jmpq   4af490 <_bt_preprocess_array_keys+0x140>
         :	                /*
         :	                 * Sort the non-null elements and eliminate any duplicates.  We must
         :	                 * sort in the same ordering used by the index column, so that the
         :	                 * successive primitive indexscans produce data in index order.
         :	                 */
         :	                num_elems = _bt_sort_array_elements(scan, cur,
    0.00 :	  4af602:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
         :	        RegProcedure cmp_proc;
         :	        BTSortArrayContext cxt;
         :	        int                     last_non_dup;
         :	        int                     i;
         :
         :	        if (nelems <= 1)
    0.00 :	  4af606:       83 fb 01                cmp    $0x1,%ebx
         :	                /*
         :	                 * Sort the non-null elements and eliminate any duplicates.  We must
         :	                 * sort in the same ordering used by the index column, so that the
         :	                 * successive primitive indexscans produce data in index order.
         :	                 */
         :	                num_elems = _bt_sort_array_elements(scan, cur,
    0.00 :	  4af609:       48 89 95 70 ff ff ff    mov    %rdx,-0x90(%rbp)
    0.00 :	  4af610:       49 0f bf 44 24 04       movswq 0x4(%r12),%rax
         :	static int
         :	_bt_sort_array_elements(IndexScanDesc scan, ScanKey skey,
         :	                                                bool reverse,
         :	                                                Datum *elems, int nelems)
         :	{
         :	        Relation        rel = scan->indexRelation;
    0.00 :	  4af616:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
         :	                /*
         :	                 * Sort the non-null elements and eliminate any duplicates.  We must
         :	                 * sort in the same ordering used by the index column, so that the
         :	                 * successive primitive indexscans produce data in index order.
         :	                 */
         :	                num_elems = _bt_sort_array_elements(scan, cur,
    0.00 :	  4af61d:       48 8d 78 ff             lea    -0x1(%rax),%rdi
    0.00 :	  4af621:       48 8b 85 50 ff ff ff    mov    -0xb0(%rbp),%rax
         :	static int
         :	_bt_sort_array_elements(IndexScanDesc scan, ScanKey skey,
         :	                                                bool reverse,
         :	                                                Datum *elems, int nelems)
         :	{
         :	        Relation        rel = scan->indexRelation;
    0.00 :	  4af628:       4c 8b 72 08             mov    0x8(%rdx),%r14
         :	                /*
         :	                 * Sort the non-null elements and eliminate any duplicates.  We must
         :	                 * sort in the same ordering used by the index column, so that the
         :	                 * successive primitive indexscans produce data in index order.
         :	                 */
         :	                num_elems = _bt_sort_array_elements(scan, cur,
    0.00 :	  4af62c:       44 0f b7 3c 78          movzwl (%rax,%rdi,2),%r15d
         :	        RegProcedure cmp_proc;
         :	        BTSortArrayContext cxt;
         :	        int                     last_non_dup;
         :	        int                     i;
         :
         :	        if (nelems <= 1)
    0.00 :	  4af631:       0f 8e d1 00 00 00       jle    4af708 <_bt_preprocess_array_keys+0x3b8>
         :	        /*
         :	         * Determine the nominal datatype of the array elements.  We have to
         :	         * support the convention that sk_subtype == InvalidOid means the opclass
         :	         * input type; this is a hack to simplify life for ScanKeyInit().
         :	         */
         :	        elemtype = skey->sk_subtype;
    0.00 :	  4af637:       45 8b 6c 24 08          mov    0x8(%r12),%r13d
         :	        if (elemtype == InvalidOid)
    0.00 :	  4af63c:       45 85 ed                test   %r13d,%r13d
    0.00 :	  4af63f:       0f 84 93 01 00 00       je     4af7d8 <_bt_preprocess_array_keys+0x488>
    0.00 :	  4af645:       4c 8d 0c bd 00 00 00    lea    0x0(,%rdi,4),%r9
    0.00 :	  4af64c:       00 
         :	         * Note: it's possible that this would fail, if the opfamily is
         :	         * incomplete, but it seems quite unlikely that an opfamily would omit
         :	         * non-cross-type support functions for any datatype that it supports at
         :	         * all.
         :	         */
         :	        cmp_proc = get_opfamily_proc(rel->rd_opfamily[skey->sk_attno - 1],
    0.00 :	  4af64d:       49 8b 86 c8 00 00 00    mov    0xc8(%r14),%rax
    0.00 :	  4af654:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4af659:       44 89 ea                mov    %r13d,%edx
    0.00 :	  4af65c:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4af65f:       42 8b 3c 08             mov    (%rax,%r9,1),%edi
    0.00 :	  4af663:       e8 48 32 2c 00          callq  7728b0 <get_opfamily_proc>
         :	                                                                 elemtype,
         :	                                                                 elemtype,
         :	                                                                 BTORDER_PROC);
         :	        if (!RegProcedureIsValid(cmp_proc))
    0.00 :	  4af668:       85 c0                   test   %eax,%eax
         :	         * Note: it's possible that this would fail, if the opfamily is
         :	         * incomplete, but it seems quite unlikely that an opfamily would omit
         :	         * non-cross-type support functions for any datatype that it supports at
         :	         * all.
         :	         */
         :	        cmp_proc = get_opfamily_proc(rel->rd_opfamily[skey->sk_attno - 1],
    0.00 :	  4af66a:       89 c7                   mov    %eax,%edi
         :	                                                                 elemtype,
         :	                                                                 elemtype,
         :	                                                                 BTORDER_PROC);
         :	        if (!RegProcedureIsValid(cmp_proc))
    0.00 :	  4af66c:       0f 84 ac 01 00 00       je     4af81e <_bt_preprocess_array_keys+0x4ce>
         :	                elog(ERROR, "missing support function %d(%u,%u) in opfamily %u",
         :	                         BTORDER_PROC, elemtype, elemtype,
         :	                         rel->rd_opfamily[skey->sk_attno - 1]);
         :
         :	        /* Sort the array elements */
         :	        fmgr_info(cmp_proc, &cxt.flinfo);
    0.00 :	  4af672:       48 8d 75 80             lea    -0x80(%rbp),%rsi
         :	        cxt.collation = skey->sk_collation;
         :	        cxt.reverse = reverse;
         :	        qsort_arg((void *) elems, nelems, sizeof(Datum),
    0.00 :	  4af676:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  4af67c:       45 31 f6                xor    %r14d,%r14d
         :	                elog(ERROR, "missing support function %d(%u,%u) in opfamily %u",
         :	                         BTORDER_PROC, elemtype, elemtype,
         :	                         rel->rd_opfamily[skey->sk_attno - 1]);
         :
         :	        /* Sort the array elements */
         :	        fmgr_info(cmp_proc, &cxt.flinfo);
    0.00 :	  4af67f:       e8 dc 09 2d 00          callq  780060 <fmgr_info>
         :	        cxt.collation = skey->sk_collation;
    0.00 :	  4af684:       41 8b 44 24 0c          mov    0xc(%r12),%eax
         :	        cxt.reverse = reverse;
         :	        qsort_arg((void *) elems, nelems, sizeof(Datum),
    0.00 :	  4af689:       48 8b bd 70 ff ff ff    mov    -0x90(%rbp),%rdi
    0.00 :	  4af690:       4c 8d 45 80             lea    -0x80(%rbp),%r8
    0.00 :	  4af694:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  4af697:       b9 80 e9 4a 00          mov    $0x4ae980,%ecx
    0.00 :	  4af69c:       ba 08 00 00 00          mov    $0x8,%edx
         :	                         BTORDER_PROC, elemtype, elemtype,
         :	                         rel->rd_opfamily[skey->sk_attno - 1]);
         :
         :	        /* Sort the array elements */
         :	        fmgr_info(cmp_proc, &cxt.flinfo);
         :	        cxt.collation = skey->sk_collation;
    0.00 :	  4af6a1:       89 45 b0                mov    %eax,-0x50(%rbp)
         :	        cxt.reverse = reverse;
    0.00 :	  4af6a4:       44 89 f8                mov    %r15d,%eax
         :	        qsort_arg((void *) elems, nelems, sizeof(Datum),
    0.00 :	  4af6a7:       45 31 ff                xor    %r15d,%r15d
         :	                         rel->rd_opfamily[skey->sk_attno - 1]);
         :
         :	        /* Sort the array elements */
         :	        fmgr_info(cmp_proc, &cxt.flinfo);
         :	        cxt.collation = skey->sk_collation;
         :	        cxt.reverse = reverse;
    0.00 :	  4af6aa:       83 e0 01                and    $0x1,%eax
    0.00 :	  4af6ad:       88 45 b4                mov    %al,-0x4c(%rbp)
         :	        qsort_arg((void *) elems, nelems, sizeof(Datum),
    0.00 :	  4af6b0:       e8 7b db 2f 00          callq  7ad230 <qsort_arg>
    0.00 :	  4af6b5:       4c 8b a5 70 ff ff ff    mov    -0x90(%rbp),%r12
    0.00 :	  4af6bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	        last_non_dup = 0;
         :	        for (i = 1; i < nelems; i++)
         :	        {
         :	                int32           compare;
         :
         :	                compare = DatumGetInt32(FunctionCall2Coll(&cxt.flinfo,
    0.00 :	  4af6c0:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  4af6c7:       49 8b 4c 24 08          mov    0x8(%r12),%rcx
    0.00 :	  4af6cc:       48 8d 7d 80             lea    -0x80(%rbp),%rdi
    0.00 :	  4af6d0:       8b 75 b0                mov    -0x50(%rbp),%esi
    0.00 :	  4af6d3:       4a 8b 14 f0             mov    (%rax,%r14,8),%rdx
    0.00 :	  4af6d7:       e8 54 e9 2c 00          callq  77e030 <FunctionCall2Coll>
         :	                                                                                                  cxt.collation,
         :	                                                                                                  elems[last_non_dup],
         :	                                                                                                  elems[i]));
         :	                if (compare != 0)
    0.00 :	  4af6dc:       85 c0                   test   %eax,%eax
    0.00 :	  4af6de:       74 17                   je     4af6f7 <_bt_preprocess_array_keys+0x3a7>
         :	                        elems[++last_non_dup] = elems[i];
    0.00 :	  4af6e0:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  4af6e5:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  4af6ec:       41 83 c7 01             add    $0x1,%r15d
    0.00 :	  4af6f0:       4d 63 f7                movslq %r15d,%r14
    0.00 :	  4af6f3:       4a 89 04 f2             mov    %rax,(%rdx,%r14,8)
         :	        qsort_arg((void *) elems, nelems, sizeof(Datum),
         :	                          _bt_compare_array_elements, (void *) &cxt);
         :
         :	        /* Now scan the sorted elements and remove duplicates */
         :	        last_non_dup = 0;
         :	        for (i = 1; i < nelems; i++)
    0.00 :	  4af6f7:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  4af6fb:       49 83 c4 08             add    $0x8,%r12
    0.00 :	  4af6ff:       44 39 eb                cmp    %r13d,%ebx
    0.00 :	  4af702:       7f bc                   jg     4af6c0 <_bt_preprocess_array_keys+0x370>
         :	                                                                                                  elems[i]));
         :	                if (compare != 0)
         :	                        elems[++last_non_dup] = elems[i];
         :	        }
         :
         :	        return last_non_dup + 1;
    0.00 :	  4af704:       41 8d 5f 01             lea    0x1(%r15),%ebx
         :	                /*
         :	                 * Sort the non-null elements and eliminate any duplicates.  We must
         :	                 * sort in the same ordering used by the index column, so that the
         :	                 * successive primitive indexscans produce data in index order.
         :	                 */
         :	                num_elems = _bt_sort_array_elements(scan, cur,
    0.00 :	  4af708:       89 5d c8                mov    %ebx,-0x38(%rbp)
         :	                                                                                        elem_values, num_nonnulls);
         :
         :	                /*
         :	                 * And set up the BTArrayKeyInfo data.
         :	                 */
         :	                so->arrayKeys[numArrayKeys].scan_key = i;
    0.00 :	  4af70b:       48 63 85 6c ff ff ff    movslq -0x94(%rbp),%rax
    0.00 :	  4af712:       48 8b 9d 40 ff ff ff    mov    -0xc0(%rbp),%rbx
    0.00 :	  4af719:       48 8b 53 20             mov    0x20(%rbx),%rdx
    0.00 :	  4af71d:       8b 9d 7c ff ff ff       mov    -0x84(%rbp),%ebx
    0.00 :	  4af723:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	  4af727:       48 8d 0c c5 00 00 00    lea    0x0(,%rax,8),%rcx
    0.00 :	  4af72e:       00 
    0.00 :	  4af72f:       89 1c c2                mov    %ebx,(%rdx,%rax,8)
         :	                so->arrayKeys[numArrayKeys].num_elems = num_elems;
    0.00 :	  4af732:       48 8b 85 40 ff ff ff    mov    -0xc0(%rbp),%rax
    0.00 :	  4af739:       48 8b 50 20             mov    0x20(%rax),%rdx
    0.00 :	  4af73d:       8b 45 c8                mov    -0x38(%rbp),%eax
    0.00 :	  4af740:       89 44 0a 0c             mov    %eax,0xc(%rdx,%rcx,1)
         :	                so->arrayKeys[numArrayKeys].elem_values = elem_values;
    0.00 :	  4af744:       48 8b 9d 40 ff ff ff    mov    -0xc0(%rbp),%rbx
    0.00 :	  4af74b:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  4af74f:       48 8b 53 20             mov    0x20(%rbx),%rdx
    0.00 :	  4af753:       48 89 44 0a 10          mov    %rax,0x10(%rdx,%rcx,1)
         :	                numArrayKeys++;
    0.00 :	  4af758:       83 85 6c ff ff ff 01    addl   $0x1,-0x94(%rbp)
    0.00 :	  4af75f:       e9 2c fd ff ff          jmpq   4af490 <_bt_preprocess_array_keys+0x140>
         :	                 */
         :	                switch (cur->sk_strategy)
         :	                {
         :	                        case BTLessStrategyNumber:
         :	                        case BTLessEqualStrategyNumber:
         :	                                cur->sk_argument =
    0.00 :	  4af764:       48 8b 4d c0             mov    -0x40(%rbp),%rcx
    0.00 :	  4af768:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  4af76f:       41 89 d8                mov    %ebx,%r8d
    0.00 :	  4af772:       ba 05 00 00 00          mov    $0x5,%edx
    0.00 :	  4af777:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  4af77a:       e8 61 fa ff ff          callq  4af1e0 <_bt_find_extreme_element>
    0.00 :	  4af77f:       49 89 44 24 40          mov    %rax,0x40(%r12)
         :	                                        _bt_find_extreme_element(scan, cur,
         :	                                                                                         BTGreaterStrategyNumber,
         :	                                                                                         elem_values, num_nonnulls);
         :	                                continue;
    0.00 :	  4af784:       e9 07 fd ff ff          jmpq   4af490 <_bt_preprocess_array_keys+0x140>
    0.00 :	  4af789:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        numArrayKeys++;
         :	                        Assert(!(cur->sk_flags & (SK_ROW_HEADER | SK_SEARCHNULL | SK_SEARCHNOTNULL)));
         :	                        /* If any arrays are null as a whole, we can quit right now. */
         :	                        if (cur->sk_flags & SK_ISNULL)
         :	                        {
         :	                                so->numArrayKeys = -1;
    0.00 :	  4af790:       48 8b 9d 40 ff ff ff    mov    -0xc0(%rbp),%rbx
    0.00 :	  4af797:       c7 43 18 ff ff ff ff    movl   $0xffffffff,0x18(%rbx)
         :	                                so->arrayKeyData = NULL;
    0.00 :	  4af79e:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	  4af7a5:       00 
         :	        }
         :
         :	        so->numArrayKeys = numArrayKeys;
         :
         :	        MemoryContextSwitchTo(oldContext);
         :	}
    0.00 :	  4af7a6:       e9 0b fe ff ff          jmpq   4af5b6 <_bt_preprocess_array_keys+0x266>
         :	        /* Allocate space for per-array data in the workspace context */
         :	        so->arrayKeys = (BTArrayKeyInfo *) palloc0(numArrayKeys * sizeof(BTArrayKeyInfo));
         :
         :	        /* Now process each array key */
         :	        numArrayKeys = 0;
         :	        for (i = 0; i < numberOfKeys; i++)
    0.00 :	  4af7ab:       c7 85 6c ff ff ff ff    movl   $0xffffffff,-0x94(%rbp)
    0.00 :	  4af7b2:       ff ff ff 
         :	                so->arrayKeys[numArrayKeys].num_elems = num_elems;
         :	                so->arrayKeys[numArrayKeys].elem_values = elem_values;
         :	                numArrayKeys++;
         :	        }
         :
         :	        so->numArrayKeys = numArrayKeys;
    0.00 :	  4af7b5:       8b 9d 6c ff ff ff       mov    -0x94(%rbp),%ebx
    0.00 :	  4af7bb:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	  4af7c2:       89 5a 18                mov    %ebx,0x18(%rdx)
    0.00 :	  4af7c5:       48 8b 85 58 ff ff ff    mov    -0xa8(%rbp),%rax
    0.00 :	  4af7cc:       48 89 05 8d b0 70 00    mov    %rax,0x70b08d(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  4af7d3:       e9 de fd ff ff          jmpq   4af5b6 <_bt_preprocess_array_keys+0x266>
         :	         * support the convention that sk_subtype == InvalidOid means the opclass
         :	         * input type; this is a hack to simplify life for ScanKeyInit().
         :	         */
         :	        elemtype = skey->sk_subtype;
         :	        if (elemtype == InvalidOid)
         :	                elemtype = rel->rd_opcintype[skey->sk_attno - 1];
    0.00 :	  4af7d8:       49 8b 86 d0 00 00 00    mov    0xd0(%r14),%rax
    0.00 :	  4af7df:       4c 8d 0c bd 00 00 00    lea    0x0(,%rdi,4),%r9
    0.00 :	  4af7e6:       00 
    0.00 :	  4af7e7:       44 8b 2c b8             mov    (%rax,%rdi,4),%r13d
    0.00 :	  4af7eb:       e9 5d fe ff ff          jmpq   4af64d <_bt_preprocess_array_keys+0x2fd>
         :	        /*
         :	         * Make a scan-lifespan context to hold array-associated data, or reset it
         :	         * if we already have one from a previous rescan cycle.
         :	         */
         :	        if (so->arrayContext == NULL)
         :	                so->arrayContext = AllocSetContextCreate(CurrentMemoryContext,
    0.00 :	  4af7f0:       48 8b 3d 69 b0 70 00    mov    0x70b069(%rip),%rdi        # bba860 <CurrentMemoryContext>
    0.00 :	  4af7f7:       31 d2                   xor    %edx,%edx
    0.00 :	  4af7f9:       41 b8 00 20 00 00       mov    $0x2000,%r8d
    0.00 :	  4af7ff:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  4af804:       be 39 49 7b 00          mov    $0x7b4939,%esi
    0.00 :	  4af809:       e8 82 87 2e 00          callq  797f90 <AllocSetContextCreate>
    0.00 :	  4af80e:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	  4af815:       48 89 42 28             mov    %rax,0x28(%rdx)
    0.00 :	  4af819:       e9 cc fb ff ff          jmpq   4af3ea <_bt_preprocess_array_keys+0x9a>
         :	        cmp_proc = get_opfamily_proc(rel->rd_opfamily[skey->sk_attno - 1],
         :	                                                                 elemtype,
         :	                                                                 elemtype,
         :	                                                                 BTORDER_PROC);
         :	        if (!RegProcedureIsValid(cmp_proc))
         :	                elog(ERROR, "missing support function %d(%u,%u) in opfamily %u",
    0.00 :	  4af81e:       ba e0 4b 7b 00          mov    $0x7b4be0,%edx
    0.00 :	  4af823:       be d7 01 00 00          mov    $0x1d7,%esi
    0.00 :	  4af828:       bf 17 49 7b 00          mov    $0x7b4917,%edi
    0.00 :	  4af82d:       e8 ee bb 2c 00          callq  77b420 <elog_start>
    0.00 :	  4af832:       49 0f bf 54 24 04       movswq 0x4(%r12),%rdx
    0.00 :	  4af838:       49 8b 86 c8 00 00 00    mov    0xc8(%r14),%rax
    0.00 :	  4af83f:       45 89 e8                mov    %r13d,%r8d
    0.00 :	  4af842:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  4af845:       be 38 4a 7b 00          mov    $0x7b4a38,%esi
    0.00 :	  4af84a:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4af84f:       44 8b 4c 90 fc          mov    -0x4(%rax,%rdx,4),%r9d
    0.00 :	  4af854:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4af859:       31 c0                   xor    %eax,%eax
    0.00 :	  4af85b:       e8 d0 b9 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4af860:       e8 6b 9c fb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005acf10 <ExecQual>:
         :	 *
         :	 * ----------------------------------------------------------------
         :	 */
         :	bool
         :	ExecQual(List *qual, ExprContext *econtext, bool resultForNull)
         :	{
    0.00 :	  5acf10:       55                      push   %rbp
    0.00 :	  5acf11:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5acf14:       41 57                   push   %r15
    0.00 :	  5acf16:       41 56                   push   %r14
    0.00 :	  5acf18:       41 89 d6                mov    %edx,%r14d
    0.00 :	  5acf1b:       41 55                   push   %r13
    0.00 :	  5acf1d:       41 54                   push   %r12
    0.00 :	  5acf1f:       49 89 f4                mov    %rsi,%r12
    0.00 :	  5acf22:       53                      push   %rbx
    0.00 :	  5acf23:       48 83 ec 18             sub    $0x18,%rsp
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf27:       48 8b 46 28             mov    0x28(%rsi),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5acf2b:       48 85 ff                test   %rdi,%rdi
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5acf2e:       4c 8b 3d 2b d9 60 00    mov    0x60d92b(%rip),%r15        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf35:       48 89 05 24 d9 60 00    mov    %rax,0x60d924(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5acf3c:       74 4a                   je     5acf88 <ExecQual+0x78>
    0.00 :	  5acf3e:       48 8b 5f 08             mov    0x8(%rdi),%rbx
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
   50.00 :	  5acf42:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf45:       74 41                   je     5acf88 <ExecQual+0x78>
    0.00 :	  5acf47:       4c 8d 6d d7             lea    -0x29(%rbp),%r13
    0.00 :	  5acf4b:       eb 11                   jmp    5acf5e <ExecQual+0x4e>
    0.00 :	  5acf4d:       0f 1f 00                nopl   (%rax)
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
         :
         :	                if (isNull)
         :	                {
         :	                        if (resultForNull == false)
    0.00 :	  5acf50:       45 84 f6                test   %r14b,%r14b
    0.00 :	  5acf53:       74 24                   je     5acf79 <ExecQual+0x69>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf55:       48 8b 5b 08             mov    0x8(%rbx),%rbx
   50.00 :	  5acf59:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf5c:       74 2a                   je     5acf88 <ExecQual+0x78>
         :	        {
         :	                ExprState  *clause = (ExprState *) lfirst(l);
    0.00 :	  5acf5e:       48 8b 03                mov    (%rbx),%rax
         :	                Datum           expr_value;
         :	                bool            isNull;
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
    0.00 :	  5acf61:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5acf63:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  5acf66:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5acf69:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5acf6c:       ff 50 10                callq  *0x10(%rax)
         :
         :	                if (isNull)
    0.00 :	  5acf6f:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5acf73:       75 db                   jne    5acf50 <ExecQual+0x40>
         :	                                break;
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        if (!DatumGetBool(expr_value))
    0.00 :	  5acf75:       84 c0                   test   %al,%al
    0.00 :	  5acf77:       75 dc                   jne    5acf55 <ExecQual+0x45>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf79:       31 c0                   xor    %eax,%eax
    0.00 :	  5acf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5acf80:       eb 0b                   jmp    5acf8d <ExecQual+0x7d>
    0.00 :	  5acf82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5acf88:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  5acf8d:       4c 89 3d cc d8 60 00    mov    %r15,0x60d8cc(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return result;
         :	}
    0.00 :	  5acf94:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5acf98:       5b                      pop    %rbx
    0.00 :	  5acf99:       41 5c                   pop    %r12
    0.00 :	  5acf9b:       41 5d                   pop    %r13
    0.00 :	  5acf9d:       41 5e                   pop    %r14
    0.00 :	  5acf9f:       41 5f                   pop    %r15
    0.00 :	  5acfa1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad000 <ExecProject>:
         :	 *              data will be valid, he must call ExecMaterializeSlot on the
         :	 *              result slot.
         :	 */
         :	TupleTableSlot *
         :	ExecProject(ProjectionInfo *projInfo, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
   50.00 :	  5ad000:       55                      push   %rbp
    0.00 :	  5ad001:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ad004:       41 57                   push   %r15
    0.00 :	  5ad006:       41 56                   push   %r14
    0.00 :	  5ad008:       41 55                   push   %r13
    0.00 :	  5ad00a:       41 54                   push   %r12
    0.00 :	  5ad00c:       53                      push   %rbx
    0.00 :	  5ad00d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5ad010:       48 83 ec 48             sub    $0x48,%rsp
    0.00 :	  5ad014:       48 89 75 90             mov    %rsi,-0x70(%rbp)
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad018:       48 8b 47 18             mov    0x18(%rdi),%rax
         :	        econtext = projInfo->pi_exprContext;
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad01c:       48 85 f6                test   %rsi,%rsi
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad01f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	        econtext = projInfo->pi_exprContext;
    0.00 :	  5ad023:       4c 8b 77 10             mov    0x10(%rdi),%r14
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad027:       74 06                   je     5ad02f <ExecProject+0x2f>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5ad029:       c7 06 00 00 00 00       movl   $0x0,(%rsi)
         :	        /*
         :	         * Clear any former contents of the result slot.  This makes it safe for
         :	         * us to use the slot's Datum/isnull arrays as workspace. (Also, we can
         :	         * return the slot as-is if we decide no rows can be projected.)
         :	         */
         :	        ExecClearTuple(slot);
    0.00 :	  5ad02f:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  5ad033:       e8 d8 70 00 00          callq  5b4110 <ExecClearTuple>
         :	        /*
         :	         * Force extraction of all input values that we'll need.  The
         :	         * Var-extraction loops below depend on this, and we are also prefetching
         :	         * all attributes that will be referenced in the generic expressions.
         :	         */
         :	        if (projInfo->pi_lastInnerVar > 0)
    0.00 :	  5ad038:       8b 73 48                mov    0x48(%rbx),%esi
    0.00 :	  5ad03b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad03d:       7e 09                   jle    5ad048 <ExecProject+0x48>
         :	                slot_getsomeattrs(econtext->ecxt_innertuple,
    0.00 :	  5ad03f:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  5ad043:       e8 18 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastInnerVar);
         :	        if (projInfo->pi_lastOuterVar > 0)
    0.00 :	  5ad048:       8b 73 4c                mov    0x4c(%rbx),%esi
    0.00 :	  5ad04b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad04d:       7e 09                   jle    5ad058 <ExecProject+0x58>
         :	                slot_getsomeattrs(econtext->ecxt_outertuple,
    0.00 :	  5ad04f:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5ad053:       e8 08 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastOuterVar);
         :	        if (projInfo->pi_lastScanVar > 0)
    0.00 :	  5ad058:       8b 73 50                mov    0x50(%rbx),%esi
    0.00 :	  5ad05b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad05d:       7e 09                   jle    5ad068 <ExecProject+0x68>
         :	                slot_getsomeattrs(econtext->ecxt_scantuple,
    0.00 :	  5ad05f:       49 8b 7e 08             mov    0x8(%r14),%rdi
    0.00 :	  5ad063:       e8 f8 21 ec ff          callq  46f260 <slot_getsomeattrs>
         :
         :	        /*
         :	         * Assign simple Vars to result by direct extraction of fields from source
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
    0.00 :	  5ad068:       44 8b 43 2c             mov    0x2c(%rbx),%r8d
         :	        if (numSimpleVars > 0)
    0.00 :	  5ad06c:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5ad06f:       7e 5d                   jle    5ad0ce <ExecProject+0xce>
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad071:       80 7b 28 00             cmpb   $0x0,0x28(%rbx)
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad075:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
    0.00 :	  5ad079:       4c 8b 5b 30             mov    0x30(%rbx),%r11
         :	                int                *varNumbers = projInfo->pi_varNumbers;
    0.00 :	  5ad07d:       4c 8b 53 38             mov    0x38(%rbx),%r10
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad081:       4c 8b 6a 28             mov    0x28(%rdx),%r13
         :	                bool       *isnull = slot->tts_isnull;
    0.00 :	  5ad085:       4c 8b 62 30             mov    0x30(%rdx),%r12
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad089:       0f 84 e1 01 00 00       je     5ad270 <ExecProject+0x270>
    0.00 :	  5ad08f:       4c 89 df                mov    %r11,%rdi
    0.00 :	  5ad092:       31 f6                   xor    %esi,%esi
    0.00 :	  5ad094:       0f 1f 40 00             nopl   0x0(%rax)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad098:       48 63 07                movslq (%rdi),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad09b:       48 83 c7 04             add    $0x4,%rdi
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad09f:       49 8b 0c 06             mov    (%r14,%rax,1),%rcx
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
    0.00 :	  5ad0a3:       41 8b 04 b2             mov    (%r10,%rsi,4),%eax
    0.00 :	  5ad0a7:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  5ad0ab:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad0ae:       48 98                   cltq   
    0.00 :	  5ad0b0:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad0b4:       49 89 54 f5 00          mov    %rdx,0x0(%r13,%rsi,8)
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad0b9:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  5ad0bd:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad0c1:       41 88 04 34             mov    %al,(%r12,%rsi,1)
    0.00 :	  5ad0c5:       48 83 c6 01             add    $0x1,%rsi
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad0c9:       41 39 f0                cmp    %esi,%r8d
    0.00 :	  5ad0cc:       7f ca                   jg     5ad098 <ExecProject+0x98>
         :	         * If there are any generic expressions, evaluate them.  It's possible
         :	         * that there are set-returning functions in such expressions; if so and
         :	         * we have reached the end of the set, we return the result slot, which we
         :	         * already marked empty.
         :	         */
         :	        if (projInfo->pi_targetlist)
    0.00 :	  5ad0ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  5ad0d2:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad0d5:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5ad0d9:       0f 84 fc 00 00 00       je     5ad1db <ExecProject+0x1db>
         :	        {
         :	                if (!ExecTargetList(projInfo->pi_targetlist,
    0.00 :	  5ad0df:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5ad0e3:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad0e7:       4c 8b 7b 20             mov    0x20(%rbx),%r15
    0.00 :	  5ad0eb:       48 8b 52 30             mov    0x30(%rdx),%rdx
    0.00 :	  5ad0ef:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ad0f3:       48 8b 15 66 d7 60 00    mov    0x60d766(%rip),%rdx        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad0fa:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ad0fe:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
    0.00 :	  5ad102:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ad106:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5ad10a:       48 89 05 4f d7 60 00    mov    %rax,0x60d74f(%rip)        # bba860 <CurrentMemoryContext>
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ad111:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad115:       4c 8b 68 08             mov    0x8(%rax),%r13
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad119:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad11c:       0f 84 ae 00 00 00       je     5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad122:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  5ad126:       eb 15                   jmp    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad128:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad12f:       00 
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad130:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad134:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad138:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad13b:       74 63                   je     5ad1a0 <ExecProject+0x1a0>
         :	        {
         :	                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad13d:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                AttrNumber      resind = tle->resno - 1;
         :
         :	                values[resind] = ExecEvalExpr(gstate->arg,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
   50.00 :	  5ad141:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad144:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad148:       0f b7 58 10             movzwl 0x10(%rax),%ebx
    0.00 :	  5ad14c:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad150:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad154:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad157:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  5ad15a:       48 0f bf db             movswq %bx,%rbx
    0.00 :	  5ad15e:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad162:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad165:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad168:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad16b:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad16f:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                          econtext,
         :	                                                                          &isnull[resind],
         :	                                                                          &itemIsDone[resind]);
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
    0.00 :	  5ad173:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ad177:       85 c0                   test   %eax,%eax
    0.00 :	  5ad179:       74 b9                   je     5ad134 <ExecProject+0x134>
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
    0.00 :	  5ad17b:       48 83 7d 90 00          cmpq   $0x0,-0x70(%rbp)
    0.00 :	  5ad180:       0f 84 fd 01 00 00       je     5ad383 <ExecProject+0x383>
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad186:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad189:       75 a5                   jne    5ad130 <ExecProject+0x130>
         :	                        {
         :	                                /* we have undone sets in the tlist, set flag */
         :	                                *isDone = ExprMultipleResult;
    0.00 :	  5ad18b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad18f:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad195:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad199:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad19c:       75 9f                   jne    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad19e:       66 90                   xchg   %ax,%ax
         :	                                haveDoneSets = true;
         :	                        }
         :	                }
         :	        }
         :
         :	        if (haveDoneSets)
    0.00 :	  5ad1a0:       80 7d c7 00             cmpb   $0x0,-0x39(%rbp)
    0.00 :	  5ad1a4:       74 2a                   je     5ad1d0 <ExecProject+0x1d0>
         :	        {
         :	                /*
         :	                 * note: can't get here unless we verified isDone != NULL
         :	                 */
         :	                if (*isDone == ExprSingleResult)
    0.00 :	  5ad1a6:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad1aa:       8b 02                   mov    (%rdx),%eax
    0.00 :	  5ad1ac:       85 c0                   test   %eax,%eax
    0.00 :	  5ad1ae:       0f 84 bc 01 00 00       je     5ad370 <ExecProject+0x370>
    0.00 :	  5ad1b4:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ad1b8:       4c 8b 6a 08             mov    0x8(%rdx),%r13
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad1bc:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad1bf:       75 6f                   jne    5ad230 <ExecProject+0x230>
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad1c1:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad1c4:       0f 84 02 01 00 00       je     5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad1ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad1d0:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad1d4:       48 89 05 85 d6 60 00    mov    %rax,0x60d685(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1db:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
         :	}
    0.00 :	  5ad1df:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad1e3:       5b                      pop    %rbx
    0.00 :	  5ad1e4:       41 5c                   pop    %r12
    0.00 :	  5ad1e6:       41 5d                   pop    %r13
    0.00 :	  5ad1e8:       41 5e                   pop    %r14
    0.00 :	  5ad1ea:       41 5f                   pop    %r15
    0.00 :	  5ad1ec:       c9                      leaveq 
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1ed:       e9 2e 68 00 00          jmpq   5b3a20 <ExecStoreVirtualTuple>
    0.00 :	  5ad1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
         :	                                {
         :	                                        values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad1f8:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad1fc:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad200:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad203:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad206:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad209:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad20c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad20f:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad213:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                                                  econtext,
         :	                                                                                                  &isnull[resind],
         :	                                                                                                  &itemIsDone[resind]);
         :
         :	                                        if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad217:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad21c:       0f 84 a0 00 00 00       je     5ad2c2 <ExecProject+0x2c2>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad222:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad226:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad229:       74 2c                   je     5ad257 <ExecProject+0x257>
    0.00 :	  5ad22b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        {
         :	                                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad230:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad234:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad238:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad23c:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad23f:       48 0f bf d8             movswq %ax,%rbx
    0.00 :	  5ad243:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad247:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad24c:       74 aa                   je     5ad1f8 <ExecProject+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad24e:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad252:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad255:       75 d9                   jne    5ad230 <ExecProject+0x230>
    0.00 :	  5ad257:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad25b:       8b 02                   mov    (%rdx),%eax
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad25d:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad260:       0f 85 6a ff ff ff       jne    5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad266:       eb 64                   jmp    5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad268:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad26f:       00 
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
    0.00 :	  5ad270:       4c 8b 4b 40             mov    0x40(%rbx),%r9
    0.00 :	  5ad274:       31 ff                   xor    %edi,%edi
    0.00 :	  5ad276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5ad27d:       00 00 00 
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad280:       49 63 04 bb             movslq (%r11,%rdi,4),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad284:       41 8b 0c b9             mov    (%r9,%rdi,4),%ecx
    0.00 :	  5ad288:       83 e9 01                sub    $0x1,%ecx
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad28b:       49 8b 34 06             mov    (%r14,%rax,1),%rsi
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad28f:       41 8b 04 ba             mov    (%r10,%rdi,4),%eax
    0.00 :	  5ad293:       48 63 c9                movslq %ecx,%rcx
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad296:       48 83 c7 01             add    $0x1,%rdi
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad29a:       48 8b 56 28             mov    0x28(%rsi),%rdx
    0.00 :	  5ad29e:       83 e8 01                sub    $0x1,%eax
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2a1:       41 39 f8                cmp    %edi,%r8d
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad2a4:       48 98                   cltq   
    0.00 :	  5ad2a6:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad2aa:       49 89 54 cd 00          mov    %rdx,0x0(%r13,%rcx,8)
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad2af:       48 8b 56 30             mov    0x30(%rsi),%rdx
    0.00 :	  5ad2b3:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad2b7:       41 88 04 0c             mov    %al,(%r12,%rcx,1)
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2bb:       7f c3                   jg     5ad280 <ExecProject+0x280>
    0.00 :	  5ad2bd:       e9 0c fe ff ff          jmpq   5ad0ce <ExecProject+0xce>
         :	                                        {
         :	                                                /*
         :	                                                 * Oh dear, this item is returning an empty set. Guess
         :	                                                 * we can't make a tuple after all.
         :	                                                 */
         :	                                                *isDone = ExprEndResult;
    0.00 :	  5ad2c2:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad2c6:       c7 00 02 00 00 00       movl   $0x2,(%rax)
    0.00 :	  5ad2cc:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad2d0:       48 8b 40 08             mov    0x8(%rax),%rax
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad2d4:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad2d7:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad2db:       74 6c                   je     5ad349 <ExecProject+0x349>
    0.00 :	  5ad2dd:       0f 1f 00                nopl   (%rax)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad2e0:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  5ad2e4:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	  5ad2e7:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad2eb:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad2ef:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad2f3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad2f6:       48 0f bf c0             movswq %ax,%rax
    0.00 :	  5ad2fa:       49 8d 1c 87             lea    (%r15,%rax,4),%rbx
    0.00 :	  5ad2fe:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad301:       75 35                   jne    5ad338 <ExecProject+0x338>
    0.00 :	  5ad303:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad307:       4c 8b 65 a0             mov    -0x60(%rbp),%r12
    0.00 :	  5ad30b:       4c 8d 2c c2             lea    (%rdx,%rax,8),%r13
    0.00 :	  5ad30f:       49 01 c4                add    %rax,%r12
    0.00 :	  5ad312:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        {
         :	                                                values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad318:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5ad31c:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  5ad31f:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad322:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad326:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  5ad329:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad32c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad32f:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad333:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad336:       74 e0                   je     5ad318 <ExecProject+0x318>
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad338:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5ad33c:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5ad340:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad343:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad347:       75 97                   jne    5ad2e0 <ExecProject+0x2e0>
    0.00 :	  5ad349:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  5ad34d:       48 89 15 0c d5 60 00    mov    %rdx,0x60d50c(%rip)        # bba860 <CurrentMemoryContext>
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
         :	}
    0.00 :	  5ad354:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad358:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad35c:       5b                      pop    %rbx
    0.00 :	  5ad35d:       41 5c                   pop    %r12
    0.00 :	  5ad35f:       41 5d                   pop    %r13
    0.00 :	  5ad361:       41 5e                   pop    %r14
    0.00 :	  5ad363:       41 5f                   pop    %r15
    0.00 :	  5ad365:       c9                      leaveq 
    0.00 :	  5ad366:       c3                      retq   
    0.00 :	  5ad367:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad36e:       00 00 
         :	                if (*isDone == ExprSingleResult)
         :	                {
         :	                        /*
         :	                         * all sets are done, so report that tlist expansion is complete.
         :	                         */
         :	                        *isDone = ExprEndResult;
    0.00 :	  5ad370:       c7 02 02 00 00 00       movl   $0x2,(%rdx)
    0.00 :	  5ad376:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad37a:       48 89 05 df d4 60 00    mov    %rax,0x60d4df(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad381:       eb d1                   jmp    5ad354 <ExecProject+0x354>
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
    0.00 :	  5ad383:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5ad386:       b9 f0 ad 88 00          mov    $0x88adf0,%ecx
    0.00 :	  5ad38b:       ba 9c 14 00 00          mov    $0x149c,%edx
    0.00 :	  5ad390:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5ad395:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad39a:       e8 21 d7 1c 00          callq  77aac0 <errstart>
    0.00 :	  5ad39f:       84 c0                   test   %al,%al
    0.00 :	  5ad3a1:       75 05                   jne    5ad3a8 <ExecProject+0x3a8>
    0.00 :	  5ad3a3:       e8 28 c1 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5ad3a8:       bf 30 b3 87 00          mov    $0x87b330,%edi
    0.00 :	  5ad3ad:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3af:       e8 ec f4 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5ad3b4:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  5ad3b9:       89 c3                   mov    %eax,%ebx
    0.00 :	  5ad3bb:       e8 90 f9 1c 00          callq  77cd50 <errcode>
    0.00 :	  5ad3c0:       89 de                   mov    %ebx,%esi
    0.00 :	  5ad3c2:       89 c7                   mov    %eax,%edi
    0.00 :	  5ad3c4:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3c6:       e8 15 d2 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5ad3cb:       eb d6                   jmp    5ad3a3 <ExecProject+0x3a3>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4480 <ExecStoreTuple>:
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b4480:       55                      push   %rbp
    0.00 :	  5b4481:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4484:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  5b4488:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  5b448c:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b448f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  5b4493:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  5b4497:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b449b:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b449f:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b44a2:       41 89 d4                mov    %edx,%r12d
    0.00 :	  5b44a5:       41 89 cd                mov    %ecx,%r13d
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b44a8:       0f 85 92 00 00 00       jne    5b4540 <ExecStoreTuple+0xc0>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b44ae:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b44b2:       75 74                   jne    5b4528 <ExecStoreTuple+0xa8>
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44b4:       8b 7b 20                mov    0x20(%rbx),%edi
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
   50.00 :	  5b44b7:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = shouldFree;
    0.00 :	  5b44bb:       44 88 6b 05             mov    %r13b,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b44bf:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :	        slot->tts_tuple = tuple;
    0.00 :	  5b44c3:       4c 89 73 08             mov    %r14,0x8(%rbx)
         :	        slot->tts_mintuple = NULL;
    0.00 :	  5b44c7:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b44ce:       00 
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44cf:       44 39 e7                cmp    %r12d,%edi
         :	        slot->tts_shouldFreeMin = false;
         :	        slot->tts_tuple = tuple;
         :	        slot->tts_mintuple = NULL;
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b44d2:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44d9:       74 0d                   je     5b44e8 <ExecStoreTuple+0x68>
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b44db:       85 ff                   test   %edi,%edi
    0.00 :	  5b44dd:       75 31                   jne    5b4510 <ExecStoreTuple+0x90>
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44df:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b44e2:       44 89 63 20             mov    %r12d,0x20(%rbx)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44e6:       75 18                   jne    5b4500 <ExecStoreTuple+0x80>
         :	                        IncrBufferRefCount(buffer);
         :	        }
         :
         :	        return slot;
         :	}
    0.00 :	  5b44e8:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b44eb:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  5b44f0:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  5b44f4:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  5b44f9:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  5b44fe:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   50.00 :	  5b44ff:       c3                      retq   
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
         :	                        IncrBufferRefCount(buffer);
    0.00 :	  5b4500:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5b4503:       e8 58 06 0c 00          callq  674b60 <IncrBufferRefCount>
    0.00 :	  5b4508:       eb de                   jmp    5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b450a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4510:       e8 4b 09 0c 00          callq  674e60 <ReleaseBuffer>
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4515:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b4518:       44 89 63 20             mov    %r12d,0x20(%rbx)
    0.00 :	  5b451c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4520:       74 c6                   je     5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b4522:       eb dc                   jmp    5b4500 <ExecStoreTuple+0x80>
    0.00 :	  5b4524:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4528:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b452c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b4530:       e8 7b a7 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4535:       e9 7a ff ff ff          jmpq   5b44b4 <ExecStoreTuple+0x34>
    0.00 :	  5b453a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4540:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4544:       e8 77 a7 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4549:       e9 60 ff ff ff          jmpq   5b44ae <ExecStoreTuple+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bc410 <ExecHashTableInsert>:
         :	 */
         :	void
         :	ExecHashTableInsert(HashJoinTable hashtable,
         :	                                        TupleTableSlot *slot,
         :	                                        uint32 hashvalue)
         :	{
    0.00 :	  5bc410:       55                      push   %rbp
    0.00 :	  5bc411:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bc414:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5bc418:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  5bc41c:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5bc41f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  5bc423:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5bc427:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5bc42a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  5bc42e:       48 83 ec 40             sub    $0x40,%rsp
    0.00 :	  5bc432:       89 d3                   mov    %edx,%ebx
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bc434:       e8 17 7b ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
    0.00 :	  5bc439:       49 89 c7                mov    %rax,%r15
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
    0.00 :	  5bc43c:       41 8b 45 40             mov    0x40(%r13),%eax
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bc440:       41 8b 55 00             mov    0x0(%r13),%edx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
    0.00 :	  5bc444:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5bc447:       0f 86 0b 01 00 00       jbe    5bc558 <ExecHashTableInsert+0x148>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc44d:       41 8b 4d 04             mov    0x4(%r13),%ecx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc451:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc455:       89 da                   mov    %ebx,%edx
    0.00 :	  5bc457:       83 e8 01                sub    $0x1,%eax
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc45a:       41 21 de                and    %ebx,%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc45d:       d3 ea                   shr    %cl,%edx
    0.00 :	  5bc45f:       21 c2                   and    %eax,%edx
         :	                                                          &bucketno, &batchno);
         :
         :	        /*
         :	         * decide whether to put the tuple in the hash table or a temp file
         :	         */
         :	        if (batchno == hashtable->curbatch)
    0.00 :	  5bc461:       41 39 55 44             cmp    %edx,0x44(%r13)
    0.00 :	  5bc465:       74 31                   je     5bc498 <ExecHashTableInsert+0x88>
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc467:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5bc46a:       89 de                   mov    %ebx,%esi
    0.00 :	  5bc46c:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bc46f:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  5bc473:       49 03 55 68             add    0x68(%r13),%rdx
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc477:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc47b:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc47f:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc483:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc487:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc48b:       c9                      leaveq 
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc48c:       e9 cf 10 00 00          jmpq   5bd560 <ExecHashJoinSaveTuple>
    0.00 :	  5bc491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc498:       f2 41 0f 10 45 58       movsd  0x58(%r13),%xmm0
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc49e:       4c 89 ef                mov    %r13,%rdi
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc4a1:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc4a6:       f2 41 0f 10 4d 60       movsd  0x60(%r13),%xmm1
    0.00 :	  5bc4ac:       f2 0f 11 4d c8          movsd  %xmm1,-0x38(%rbp)
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc4b1:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bc4b4:       83 c0 10                add    $0x10,%eax
    0.00 :	  5bc4b7:       48 98                   cltq   
    0.00 :	  5bc4b9:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5bc4bc:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5bc4c0:       e8 fb fa ff ff          callq  5bbfc0 <dense_alloc>
         :
         :	                hashTuple->hashvalue = hashvalue;
    0.00 :	  5bc4c5:       89 58 08                mov    %ebx,0x8(%rax)
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bc4c8:       41 8b 17                mov    (%r15),%edx
    0.00 :	  5bc4cb:       48 8d 58 10             lea    0x10(%rax),%rbx
    0.00 :	  5bc4cf:       4c 89 fe                mov    %r15,%rsi
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc4d2:       49 89 c4                mov    %rax,%r12
         :
         :	                hashTuple->hashvalue = hashvalue;
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bc4d5:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bc4d8:       e8 13 d7 ea ff          callq  469bf0 <memcpy@plt>
         :	                 * We always reset the tuple-matched flag on insertion.  This is okay
         :	                 * even when reloading a tuple from a batch file, since the tuple
         :	                 * could not possibly have been matched to an outer tuple before it
         :	                 * went into the batch file.
         :	                 */
         :	                HeapTupleHeaderClearMatch(HJTUPLE_MINTUPLE(hashTuple));
    0.00 :	  5bc4dd:       66 81 63 0a ff 7f       andw   $0x7fff,0xa(%rbx)
         :
         :	                /* Push it onto the front of the bucket's list */
         :	                hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bc4e3:       49 63 d6                movslq %r14d,%rdx
    0.00 :	  5bc4e6:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bc4ea:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
  100.00 :	  5bc4ee:       49 89 04 24             mov    %rax,(%r12)
         :	                hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bc4f2:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bc4f6:       4c 89 24 d0             mov    %r12,(%rax,%rdx,8)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc4fa:       41 83 7d 40 01          cmpl   $0x1,0x40(%r13)
    0.00 :	  5bc4ff:       74 7f                   je     5bc580 <ExecHashTableInsert+0x170>
    0.00 :	  5bc501:       41 8b 55 0c             mov    0xc(%r13),%edx
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bc505:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5bc509:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bc510:       49 3b 85 a0 00 00 00    cmp    0xa0(%r13),%rax
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bc517:       49 89 85 90 00 00 00    mov    %rax,0x90(%r13)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bc51e:       77 50                   ja     5bc570 <ExecHashTableInsert+0x160>
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
    0.00 :	  5bc520:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bc523:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bc527:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
    0.00 :	  5bc52e:       49 3b 85 98 00 00 00    cmp    0x98(%r13),%rax
    0.00 :	  5bc535:       0f 87 8d 00 00 00       ja     5bc5c8 <ExecHashTableInsert+0x1b8>
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc53b:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc53f:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc543:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc547:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc54b:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc54f:       c9                      leaveq 
    0.00 :	  5bc550:       c3                      retq   
    0.00 :	  5bc551:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc558:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
    0.00 :	  5bc55c:       31 d2                   xor    %edx,%edx
    0.00 :	  5bc55e:       41 21 de                and    %ebx,%r14d
    0.00 :	  5bc561:       e9 fb fe ff ff          jmpq   5bc461 <ExecHashTableInsert+0x51>
    0.00 :	  5bc566:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bc56d:       00 00 00 
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bc570:       49 89 85 a0 00 00 00    mov    %rax,0xa0(%r13)
    0.00 :	  5bc577:       eb a7                   jmp    5bc520 <ExecHashTableInsert+0x110>
    0.00 :	  5bc579:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc580:       41 8b 55 0c             mov    0xc(%r13),%edx
    0.00 :	  5bc584:       81 fa ff ff ff 3f       cmp    $0x3fffffff,%edx
    0.00 :	  5bc58a:       0f 8f 75 ff ff ff       jg     5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc590:       f2 0f 10 45 c0          movsd  -0x40(%rbp),%xmm0
    0.00 :	  5bc595:       f2 0f 5c 45 c8          subsd  -0x38(%rbp),%xmm0
    0.00 :	  5bc59a:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc59f:       f2 0f 2a c2             cvtsi2sd %edx,%xmm0
    0.00 :	  5bc5a3:       f2 0f 10 4d c0          movsd  -0x40(%rbp),%xmm1
    0.00 :	  5bc5a8:       66 0f 2e c8             ucomisd %xmm0,%xmm1
    0.00 :	  5bc5ac:       0f 82 53 ff ff ff       jb     5bc505 <ExecHashTableInsert+0xf5>
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5b2:       8d 04 12                lea    (%rdx,%rdx,1),%eax
         :	                        hashtable->log2_nbuckets_optimal += 1;
    0.00 :	  5bc5b5:       41 83 45 10 01          addl   $0x1,0x10(%r13)
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5ba:       41 89 45 0c             mov    %eax,0xc(%r13)
    0.00 :	  5bc5be:       89 c2                   mov    %eax,%edx
    0.00 :	  5bc5c0:       e9 40 ff ff ff          jmpq   5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc5c5:       0f 1f 00                nopl   (%rax)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5c8:       4c 89 ef                mov    %r13,%rdi
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc5cb:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc5cf:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc5d3:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc5d7:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc5db:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc5df:       c9                      leaveq 
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5e0:       e9 fb fa ff ff          jmpq   5bc0e0 <ExecHashIncreaseNumBatches>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeNestloop.c:177
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeNestloop.c:143
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005c4240 <ExecNestLoop>:
         :	 *                         are prepared to return the first tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecNestLoop(NestLoopState *node)
         :	{
    0.00 :	  5c4240:       55                      push   %rbp
    0.00 :	  5c4241:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5c4244:       41 57                   push   %r15
    0.00 :	  5c4246:       41 56                   push   %r14
    0.00 :	  5c4248:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5c424b:       41 55                   push   %r13
    0.00 :	  5c424d:       41 54                   push   %r12
    0.00 :	  5c424f:       53                      push   %rbx
    0.00 :	  5c4250:       48 83 ec 48             sub    $0x48,%rsp
         :	        /*
         :	         * get information from the node
         :	         */
         :	        ENL1_printf("getting info from node");
         :
         :	        nl = (NestLoop *) node->js.ps.plan;
    0.00 :	  5c4254:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  5c4258:       48 89 45 98             mov    %rax,-0x68(%rbp)
         :	        joinqual = node->js.joinqual;
    0.00 :	  5c425c:       48 8b 97 80 00 00 00    mov    0x80(%rdi),%rdx
    0.00 :	  5c4263:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        otherqual = node->js.ps.qual;
    0.00 :	  5c4267:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  5c426b:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        outerPlan = outerPlanState(node);
    0.00 :	  5c426f:       48 8b 57 30             mov    0x30(%rdi),%rdx
    0.00 :	  5c4273:       48 89 55 a8             mov    %rdx,-0x58(%rbp)
         :	        innerPlan = innerPlanState(node);
    0.00 :	  5c4277:       48 8b 47 38             mov    0x38(%rdi),%rax
    0.00 :	  5c427b:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous join
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->js.ps.ps_TupFromTlist)
    0.00 :	  5c427f:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
         :	        nl = (NestLoop *) node->js.ps.plan;
         :	        joinqual = node->js.joinqual;
         :	        otherqual = node->js.ps.qual;
         :	        outerPlan = outerPlanState(node);
         :	        innerPlan = innerPlanState(node);
         :	        econtext = node->js.ps.ps_ExprContext;
    0.00 :	  5c4283:       4c 8b 7f 60             mov    0x60(%rdi),%r15
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous join
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->js.ps.ps_TupFromTlist)
    0.00 :	  5c4287:       74 1f                   je     5c42a8 <ExecNestLoop+0x68>
         :	        {
         :	                TupleTableSlot *result;
         :	                ExprDoneCond isDone;
         :
         :	                result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5c4289:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5c428d:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5c4291:       e8 6a 8d fe ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5c4296:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5c429a:       0f 84 71 01 00 00       je     5c4411 <ExecNestLoop+0x1d1>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->js.ps.ps_TupFromTlist = false;
    0.00 :	  5c42a0:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
    0.00 :	  5c42a5:       0f 1f 00                nopl   (%rax)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a join tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5c42a8:       49 8b 7f 28             mov    0x28(%r15),%rdi
    0.00 :	  5c42ac:       e8 ff 46 1d 00          callq  7989b0 <MemoryContextReset>
         :	        {
         :	                /*
         :	                 * If we don't have an outer tuple, get the next one and reset the
         :	                 * inner scan.
         :	                 */
         :	                if (node->nl_NeedNewOuter)
    0.00 :	  5c42b1:       41 80 be 88 00 00 00    cmpb   $0x0,0x88(%r14)
    0.00 :	  5c42b8:       00 
    0.00 :	  5c42b9:       0f 85 a1 00 00 00       jne    5c4360 <ExecNestLoop+0x120>
         :	                /*
         :	                 * we have an outerTuple, try to get the next inner tuple.
         :	                 */
         :	                ENL1_printf("getting new inner tuple");
         :
         :	                innerTupleSlot = ExecProcNode(innerPlan);
    0.00 :	  5c42bf:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  5c42c3:       e8 d8 81 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                econtext->ecxt_innertuple = innerTupleSlot;
         :
         :	                if (TupIsNull(innerTupleSlot))
    0.00 :	  5c42c8:       48 85 c0                test   %rax,%rax
         :	                 * we have an outerTuple, try to get the next inner tuple.
         :	                 */
         :	                ENL1_printf("getting new inner tuple");
         :
         :	                innerTupleSlot = ExecProcNode(innerPlan);
         :	                econtext->ecxt_innertuple = innerTupleSlot;
    0.00 :	  5c42cb:       49 89 47 10             mov    %rax,0x10(%r15)
         :
         :	                if (TupIsNull(innerTupleSlot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeNestloop.c:177
   50.00 :	  5c42cf:       74 0a                   je     5c42db <ExecNestLoop+0x9b>
    0.00 :	  5c42d1:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5c42d5:       0f 84 45 01 00 00       je     5c4420 <ExecNestLoop+0x1e0>
         :	                {
         :	                        ENL1_printf("no inner tuple, need new outer tuple");
         :
         :	                        node->nl_NeedNewOuter = true;
         :
         :	                        if (!node->nl_MatchedOuter &&
    0.00 :	  5c42db:       41 80 be 89 00 00 00    cmpb   $0x0,0x89(%r14)
    0.00 :	  5c42e2:       00 
         :
         :	                if (TupIsNull(innerTupleSlot))
         :	                {
         :	                        ENL1_printf("no inner tuple, need new outer tuple");
         :
         :	                        node->nl_NeedNewOuter = true;
    0.00 :	  5c42e3:       41 c6 86 88 00 00 00    movb   $0x1,0x88(%r14)
    0.00 :	  5c42ea:       01 
         :
         :	                        if (!node->nl_MatchedOuter &&
    0.00 :	  5c42eb:       75 c4                   jne    5c42b1 <ExecNestLoop+0x71>
    0.00 :	  5c42ed:       41 8b 46 78             mov    0x78(%r14),%eax
    0.00 :	  5c42f1:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5c42f4:       74 05                   je     5c42fb <ExecNestLoop+0xbb>
    0.00 :	  5c42f6:       83 f8 05                cmp    $0x5,%eax
    0.00 :	  5c42f9:       75 b6                   jne    5c42b1 <ExecNestLoop+0x71>
         :	                                 * We are doing an outer join and there were no join matches
         :	                                 * for this outer tuple.  Generate a fake join tuple with
         :	                                 * nulls for the inner tuple, and return it if it passes the
         :	                                 * non-join quals.
         :	                                 */
         :	                                econtext->ecxt_innertuple = node->nl_NullInnerTupleSlot;
    0.00 :	  5c42fb:       49 8b 86 90 00 00 00    mov    0x90(%r14),%rax
    0.00 :	  5c4302:       49 89 47 10             mov    %rax,0x10(%r15)
         :
         :	                                ENL1_printf("testing qualification for outer-join tuple");
         :
         :	                                if (otherqual == NIL || ExecQual(otherqual, econtext, false))
    0.00 :	  5c4306:       48 83 7d c0 00          cmpq   $0x0,-0x40(%rbp)
    0.00 :	  5c430b:       0f 84 bf 01 00 00       je     5c44d0 <ExecNestLoop+0x290>
    0.00 :	  5c4311:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5c4315:       31 d2                   xor    %edx,%edx
    0.00 :	  5c4317:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5c431a:       e8 f1 8b fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5c431f:       84 c0                   test   %al,%al
    0.00 :	  5c4321:       0f 85 a9 01 00 00       jne    5c44d0 <ExecNestLoop+0x290>
         :	                                                        (isDone == ExprMultipleResult);
         :	                                                return result;
         :	                                        }
         :	                                }
         :	                                else
         :	                                        InstrCountFiltered2(node, 1);
    0.00 :	  5c4327:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5c432b:       48 85 c0                test   %rax,%rax
    0.00 :	  5c432e:       74 81                   je     5c42b1 <ExecNestLoop+0x71>
    0.00 :	  5c4330:       f2 0f 10 05 20 ae 1e    movsd  0x1eae20(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5c4337:       00 
    0.00 :	  5c4338:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5c433f:       00 
    0.00 :	  5c4340:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5c4347:       00 
         :	        {
         :	                /*
         :	                 * If we don't have an outer tuple, get the next one and reset the
         :	                 * inner scan.
         :	                 */
         :	                if (node->nl_NeedNewOuter)
    0.00 :	  5c4348:       41 80 be 88 00 00 00    cmpb   $0x0,0x88(%r14)
    0.00 :	  5c434f:       00 
    0.00 :	  5c4350:       0f 84 69 ff ff ff       je     5c42bf <ExecNestLoop+0x7f>
    0.00 :	  5c4356:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5c435d:       00 00 00 
         :	                {
         :	                        ENL1_printf("getting new outer tuple");
         :	                        outerTupleSlot = ExecProcNode(outerPlan);
    0.00 :	  5c4360:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5c4364:       e8 37 81 fe ff          callq  5ac4a0 <ExecProcNode>
         :
         :	                        /*
         :	                         * if there are no more outer tuples, then the join is complete..
         :	                         */
         :	                        if (TupIsNull(outerTupleSlot))
    0.00 :	  5c4369:       48 85 c0                test   %rax,%rax
         :	                 * inner scan.
         :	                 */
         :	                if (node->nl_NeedNewOuter)
         :	                {
         :	                        ENL1_printf("getting new outer tuple");
         :	                        outerTupleSlot = ExecProcNode(outerPlan);
    0.00 :	  5c436c:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :
         :	                        /*
         :	                         * if there are no more outer tuples, then the join is complete..
         :	                         */
         :	                        if (TupIsNull(outerTupleSlot))
    0.00 :	  5c4370:       0f 84 99 00 00 00       je     5c440f <ExecNestLoop+0x1cf>
    0.00 :	  5c4376:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5c437a:       0f 85 8f 00 00 00       jne    5c440f <ExecNestLoop+0x1cf>
         :	                                ENL1_printf("no outer tuple, ending join");
         :	                                return NULL;
         :	                        }
         :
         :	                        ENL1_printf("saving new outer tuple information");
         :	                        econtext->ecxt_outertuple = outerTupleSlot;
    0.00 :	  5c4380:       49 89 47 18             mov    %rax,0x18(%r15)
         :	                        node->nl_NeedNewOuter = false;
    0.00 :	  5c4384:       41 c6 86 88 00 00 00    movb   $0x0,0x88(%r14)
    0.00 :	  5c438b:       00 
         :	                        node->nl_MatchedOuter = false;
    0.00 :	  5c438c:       41 c6 86 89 00 00 00    movb   $0x0,0x89(%r14)
    0.00 :	  5c4393:       00 
         :
         :	                        /*
         :	                         * fetch the values of any outer Vars that must be passed to the
         :	                         * inner scan, and store them in the appropriate PARAM_EXEC slots.
         :	                         */
         :	                        foreach(lc, nl->nestParams)
    0.00 :	  5c4394:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5c4398:       48 8b 42 70             mov    0x70(%rdx),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5c439c:       48 85 c0                test   %rax,%rax
    0.00 :	  5c439f:       74 60                   je     5c4401 <ExecNestLoop+0x1c1>
    0.00 :	  5c43a1:       4c 8b 68 08             mov    0x8(%rax),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeNestloop.c:143
   50.00 :	  5c43a5:       4d 85 ed                test   %r13,%r13
    0.00 :	  5c43a8:       74 57                   je     5c4401 <ExecNestLoop+0x1c1>
    0.00 :	  5c43aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        {
         :	                                NestLoopParam *nlp = (NestLoopParam *) lfirst(lc);
    0.00 :	  5c43b0:       49 8b 45 00             mov    0x0(%r13),%rax
         :	                                prm = &(econtext->ecxt_param_exec_vals[paramno]);
         :	                                /* Param value should be an OUTER_VAR var */
         :	                                Assert(IsA(nlp->paramval, Var));
         :	                                Assert(nlp->paramval->varno == OUTER_VAR);
         :	                                Assert(nlp->paramval->varattno > 0);
         :	                                prm->value = slot_getattr(outerTupleSlot,
    0.00 :	  5c43b4:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
         :	                         * inner scan, and store them in the appropriate PARAM_EXEC slots.
         :	                         */
         :	                        foreach(lc, nl->nestParams)
         :	                        {
         :	                                NestLoopParam *nlp = (NestLoopParam *) lfirst(lc);
         :	                                int                     paramno = nlp->paramno;
    0.00 :	  5c43b8:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	                                prm = &(econtext->ecxt_param_exec_vals[paramno]);
         :	                                /* Param value should be an OUTER_VAR var */
         :	                                Assert(IsA(nlp->paramval, Var));
         :	                                Assert(nlp->paramval->varno == OUTER_VAR);
         :	                                Assert(nlp->paramval->varattno > 0);
         :	                                prm->value = slot_getattr(outerTupleSlot,
    0.00 :	  5c43bc:       48 8b 40 08             mov    0x8(%rax),%rax
         :	                        {
         :	                                NestLoopParam *nlp = (NestLoopParam *) lfirst(lc);
         :	                                int                     paramno = nlp->paramno;
         :	                                ParamExecData *prm;
         :
         :	                                prm = &(econtext->ecxt_param_exec_vals[paramno]);
    0.00 :	  5c43c0:       49 63 dc                movslq %r12d,%rbx
         :	                                /* Param value should be an OUTER_VAR var */
         :	                                Assert(IsA(nlp->paramval, Var));
         :	                                Assert(nlp->paramval->varno == OUTER_VAR);
         :	                                Assert(nlp->paramval->varattno > 0);
         :	                                prm->value = slot_getattr(outerTupleSlot,
    0.00 :	  5c43c3:       0f bf 70 08             movswl 0x8(%rax),%esi
         :	                        {
         :	                                NestLoopParam *nlp = (NestLoopParam *) lfirst(lc);
         :	                                int                     paramno = nlp->paramno;
         :	                                ParamExecData *prm;
         :
         :	                                prm = &(econtext->ecxt_param_exec_vals[paramno]);
    0.00 :	  5c43c7:       48 8d 1c 5b             lea    (%rbx,%rbx,2),%rbx
    0.00 :	  5c43cb:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  5c43cf:       49 03 5f 30             add    0x30(%r15),%rbx
         :	                                /* Param value should be an OUTER_VAR var */
         :	                                Assert(IsA(nlp->paramval, Var));
         :	                                Assert(nlp->paramval->varno == OUTER_VAR);
         :	                                Assert(nlp->paramval->varattno > 0);
         :	                                prm->value = slot_getattr(outerTupleSlot,
    0.00 :	  5c43d3:       48 8d 53 10             lea    0x10(%rbx),%rdx
    0.00 :	  5c43d7:       e8 24 b0 ea ff          callq  46f400 <slot_getattr>
    0.00 :	  5c43dc:       48 89 43 08             mov    %rax,0x8(%rbx)
         :	                                                                                  nlp->paramval->varattno,
         :	                                                                                  &(prm->isnull));
         :	                                /* Flag parameter value as changed */
         :	                                innerPlan->chgParam = bms_add_member(innerPlan->chgParam,
    0.00 :	  5c43e0:       48 8b 45 a0             mov    -0x60(%rbp),%rax
    0.00 :	  5c43e4:       44 89 e6                mov    %r12d,%esi
    0.00 :	  5c43e7:       48 8b 78 50             mov    0x50(%rax),%rdi
    0.00 :	  5c43eb:       e8 10 ec 01 00          callq  5e3000 <bms_add_member>
    0.00 :	  5c43f0:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5c43f4:       48 89 42 50             mov    %rax,0x50(%rdx)
         :
         :	                        /*
         :	                         * fetch the values of any outer Vars that must be passed to the
         :	                         * inner scan, and store them in the appropriate PARAM_EXEC slots.
         :	                         */
         :	                        foreach(lc, nl->nestParams)
    0.00 :	  5c43f8:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5c43fc:       4d 85 ed                test   %r13,%r13
    0.00 :	  5c43ff:       75 af                   jne    5c43b0 <ExecNestLoop+0x170>
         :
         :	                        /*
         :	                         * now rescan the inner plan
         :	                         */
         :	                        ENL1_printf("rescanning inner plan");
         :	                        ExecReScan(innerPlan);
    0.00 :	  5c4401:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  5c4405:       e8 96 40 fe ff          callq  5a84a0 <ExecReScan>
    0.00 :	  5c440a:       e9 b0 fe ff ff          jmpq   5c42bf <ExecNestLoop+0x7f>
         :	                        InstrCountFiltered1(node, 1);
         :
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
    0.00 :	  5c440f:       31 c0                   xor    %eax,%eax
         :
         :	                ENL1_printf("qualification failed, looping");
         :	        }
         :	}
    0.00 :	  5c4411:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5c4415:       5b                      pop    %rbx
    0.00 :	  5c4416:       41 5c                   pop    %r12
    0.00 :	  5c4418:       41 5d                   pop    %r13
    0.00 :	  5c441a:       41 5e                   pop    %r14
    0.00 :	  5c441c:       41 5f                   pop    %r15
    0.00 :	  5c441e:       c9                      leaveq 
    0.00 :	  5c441f:       c3                      retq   
         :	                 * Only the joinquals determine MatchedOuter status, but all quals
         :	                 * must pass to actually return the tuple.
         :	                 */
         :	                ENL1_printf("testing qualification");
         :
         :	                if (ExecQual(joinqual, econtext, false))
    0.00 :	  5c4420:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5c4424:       31 d2                   xor    %edx,%edx
    0.00 :	  5c4426:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5c4429:       e8 e2 8a fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5c442e:       84 c0                   test   %al,%al
    0.00 :	  5c4430:       74 6e                   je     5c44a0 <ExecNestLoop+0x260>
         :	                {
         :	                        node->nl_MatchedOuter = true;
         :
         :	                        /* In an antijoin, we never return a matched tuple */
         :	                        if (node->js.jointype == JOIN_ANTI)
    0.00 :	  5c4432:       41 8b 46 78             mov    0x78(%r14),%eax
         :	                 */
         :	                ENL1_printf("testing qualification");
         :
         :	                if (ExecQual(joinqual, econtext, false))
         :	                {
         :	                        node->nl_MatchedOuter = true;
    0.00 :	  5c4436:       41 c6 86 89 00 00 00    movb   $0x1,0x89(%r14)
    0.00 :	  5c443d:       01 
         :
         :	                        /* In an antijoin, we never return a matched tuple */
         :	                        if (node->js.jointype == JOIN_ANTI)
    0.00 :	  5c443e:       83 f8 05                cmp    $0x5,%eax
    0.00 :	  5c4441:       0f 84 e1 00 00 00       je     5c4528 <ExecNestLoop+0x2e8>
         :
         :	                        /*
         :	                         * In a semijoin, we'll consider returning the first match, but
         :	                         * after that we're done with this outer tuple.
         :	                         */
         :	                        if (node->js.jointype == JOIN_SEMI)
    0.00 :	  5c4447:       83 f8 04                cmp    $0x4,%eax
    0.00 :	  5c444a:       0f 84 e8 00 00 00       je     5c4538 <ExecNestLoop+0x2f8>
         :	                                node->nl_NeedNewOuter = true;
         :
         :	                        if (otherqual == NIL || ExecQual(otherqual, econtext, false))
    0.00 :	  5c4450:       48 83 7d c0 00          cmpq   $0x0,-0x40(%rbp)
    0.00 :	  5c4455:       0f 84 a5 00 00 00       je     5c4500 <ExecNestLoop+0x2c0>
    0.00 :	  5c445b:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5c445f:       31 d2                   xor    %edx,%edx
    0.00 :	  5c4461:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5c4464:       e8 a7 8a fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5c4469:       84 c0                   test   %al,%al
    0.00 :	  5c446b:       0f 85 8f 00 00 00       jne    5c4500 <ExecNestLoop+0x2c0>
         :	                                                (isDone == ExprMultipleResult);
         :	                                        return result;
         :	                                }
         :	                        }
         :	                        else
         :	                                InstrCountFiltered2(node, 1);
    0.00 :	  5c4471:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5c4475:       48 85 c0                test   %rax,%rax
    0.00 :	  5c4478:       0f 84 2a fe ff ff       je     5c42a8 <ExecNestLoop+0x68>
    0.00 :	  5c447e:       f2 0f 10 05 d2 ac 1e    movsd  0x1eacd2(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5c4485:       00 
    0.00 :	  5c4486:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5c448d:       00 
    0.00 :	  5c448e:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5c4495:       00 
    0.00 :	  5c4496:       e9 0d fe ff ff          jmpq   5c42a8 <ExecNestLoop+0x68>
    0.00 :	  5c449b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                }
         :	                else
         :	                        InstrCountFiltered1(node, 1);
    0.00 :	  5c44a0:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5c44a4:       48 85 c0                test   %rax,%rax
    0.00 :	  5c44a7:       0f 84 fb fd ff ff       je     5c42a8 <ExecNestLoop+0x68>
    0.00 :	  5c44ad:       f2 0f 10 05 a3 ac 1e    movsd  0x1eaca3(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5c44b4:       00 
    0.00 :	  5c44b5:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5c44bc:       00 
    0.00 :	  5c44bd:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5c44c4:       00 
    0.00 :	  5c44c5:       e9 de fd ff ff          jmpq   5c42a8 <ExecNestLoop+0x68>
    0.00 :	  5c44ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        TupleTableSlot *result;
         :	                                        ExprDoneCond isDone;
         :
         :	                                        ENL1_printf("qualification succeeded, projecting tuple");
         :
         :	                                        result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5c44d0:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5c44d4:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5c44d8:       e8 23 8b fe ff          callq  5ad000 <ExecProject>
         :
         :	                                        if (isDone != ExprEndResult)
    0.00 :	  5c44dd:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5c44e0:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5c44e3:       0f 84 c8 fd ff ff       je     5c42b1 <ExecNestLoop+0x71>
         :
         :	                                result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
         :
         :	                                if (isDone != ExprEndResult)
         :	                                {
         :	                                        node->js.ps.ps_TupFromTlist =
    0.00 :	  5c44e9:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5c44ec:       41 0f 94 46 70          sete   0x70(%r14)
         :	                 */
         :	                ResetExprContext(econtext);
         :
         :	                ENL1_printf("qualification failed, looping");
         :	        }
         :	}
    0.00 :	  5c44f1:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5c44f5:       5b                      pop    %rbx
    0.00 :	  5c44f6:       41 5c                   pop    %r12
    0.00 :	  5c44f8:       41 5d                   pop    %r13
    0.00 :	  5c44fa:       41 5e                   pop    %r14
    0.00 :	  5c44fc:       41 5f                   pop    %r15
    0.00 :	  5c44fe:       c9                      leaveq 
    0.00 :	  5c44ff:       c3                      retq   
         :	                                TupleTableSlot *result;
         :	                                ExprDoneCond isDone;
         :
         :	                                ENL1_printf("qualification succeeded, projecting tuple");
         :
         :	                                result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5c4500:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5c4504:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5c4508:       e8 f3 8a fe ff          callq  5ad000 <ExecProject>
         :
         :	                                if (isDone != ExprEndResult)
    0.00 :	  5c450d:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5c4510:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5c4513:       0f 84 8f fd ff ff       je     5c42a8 <ExecNestLoop+0x68>
         :	                                {
         :	                                        node->js.ps.ps_TupFromTlist =
    0.00 :	  5c4519:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5c451c:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5c4521:       eb ce                   jmp    5c44f1 <ExecNestLoop+0x2b1>
    0.00 :	  5c4523:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        node->nl_MatchedOuter = true;
         :
         :	                        /* In an antijoin, we never return a matched tuple */
         :	                        if (node->js.jointype == JOIN_ANTI)
         :	                        {
         :	                                node->nl_NeedNewOuter = true;
    0.00 :	  5c4528:       41 c6 86 88 00 00 00    movb   $0x1,0x88(%r14)
    0.00 :	  5c452f:       01 
         :	                                continue;               /* return to top of loop */
    0.00 :	  5c4530:       e9 7c fd ff ff          jmpq   5c42b1 <ExecNestLoop+0x71>
    0.00 :	  5c4535:       0f 1f 00                nopl   (%rax)
         :	                        /*
         :	                         * In a semijoin, we'll consider returning the first match, but
         :	                         * after that we're done with this outer tuple.
         :	                         */
         :	                        if (node->js.jointype == JOIN_SEMI)
         :	                                node->nl_NeedNewOuter = true;
    0.00 :	  5c4538:       41 c6 86 88 00 00 00    movb   $0x1,0x88(%r14)
    0.00 :	  5c453f:       01 
    0.00 :	  5c4540:       e9 0b ff ff ff          jmpq   5c4450 <ExecNestLoop+0x210>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:708
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:719
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e3350 <tbm_iterate>:
         :	 * be examined, but the condition must be rechecked anyway.  (For ease of
         :	 * testing, recheck is always set true when ntuples < 0.)
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
    0.00 :	  5e3350:       55                      push   %rbp
    0.00 :	  5e3351:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5e3354:       53                      push   %rbx
         :	        TIDBitmap  *tbm = iterator->tbm;
    0.00 :	  5e3355:       4c 8b 1f                mov    (%rdi),%r11
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3358:       44 8b 57 0c             mov    0xc(%rdi),%r10d
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
         :	        TIDBitmap  *tbm = iterator->tbm;
         :	        TBMIterateResult *output = &(iterator->output);
    0.00 :	  5e335c:       48 8d 5f 14             lea    0x14(%rdi),%rbx
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3360:       45 3b 53 2c             cmp    0x2c(%r11),%r10d
    0.00 :	  5e3364:       0f 8d 9f 00 00 00       jge    5e3409 <tbm_iterate+0xb9>
         :	                while (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
    0.00 :	  5e336a:       41 b9 01 00 00 00       mov    $0x1,%r9d
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
    0.00 :	  5e3370:       8b 77 10                mov    0x10(%rdi),%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3373:       49 8b 43 70             mov    0x70(%r11),%rax
    0.00 :	  5e3377:       49 63 d2                movslq %r10d,%rdx
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e337a:       81 fe ff 00 00 00       cmp    $0xff,%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3380:       4c 8b 04 d0             mov    (%rax,%rdx,8),%r8
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e3384:       7f 68                   jg     5e33ee <tbm_iterate+0x9e>
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
    0.00 :	  5e3386:       8d 56 1f                lea    0x1f(%rsi),%edx
    0.00 :	  5e3389:       85 f6                   test   %esi,%esi
    0.00 :	  5e338b:       89 f0                   mov    %esi,%eax
    0.00 :	  5e338d:       0f 49 d6                cmovns %esi,%edx
    0.00 :	  5e3390:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e3393:       c1 e8 1b                shr    $0x1b,%eax
    0.00 :	  5e3396:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  5e3399:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e339c:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5e339f:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33a2:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33a4:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33a7:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33a9:       41 85 44 90 08          test   %eax,0x8(%r8,%rdx,4)
    0.00 :	  5e33ae:       74 33                   je     5e33e3 <tbm_iterate+0x93>
    0.00 :	  5e33b0:       eb 6e                   jmp    5e3420 <tbm_iterate+0xd0>
    0.00 :	  5e33b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5e33b8:       89 f0                   mov    %esi,%eax
    0.00 :	  5e33ba:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e33bd:       c1 e8 1b                shr    $0x1b,%eax
    0.00 :	  5e33c0:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e33c3:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33c6:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33c8:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33cb:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33cd:       85 f6                   test   %esi,%esi
    0.00 :	  5e33cf:       89 c1                   mov    %eax,%ecx
    0.00 :	  5e33d1:       8d 46 1f                lea    0x1f(%rsi),%eax
    0.00 :	  5e33d4:       0f 49 c6                cmovns %esi,%eax
    0.00 :	  5e33d7:       c1 f8 05                sar    $0x5,%eax
    0.00 :	  5e33da:       48 98                   cltq   
    0.00 :	  5e33dc:       41 85 4c 80 08          test   %ecx,0x8(%r8,%rax,4)
    0.00 :	  5e33e1:       75 3d                   jne    5e3420 <tbm_iterate+0xd0>
         :	                                break;
         :	                        schunkbit++;
    0.00 :	  5e33e3:       83 c6 01                add    $0x1,%esi
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e33e6:       81 fe 00 01 00 00       cmp    $0x100,%esi
    0.00 :	  5e33ec:       75 ca                   jne    5e33b8 <tbm_iterate+0x68>
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33ee:       41 8d 42 01             lea    0x1(%r10),%eax
         :	                iterator->schunkbit = 0;
    0.00 :	  5e33f2:       c7 47 10 00 00 00 00    movl   $0x0,0x10(%rdi)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33f9:       89 47 0c                mov    %eax,0xc(%rdi)
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e33fc:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e3400:       41 89 c2                mov    %eax,%r10d
    0.00 :	  5e3403:       0f 8c 67 ff ff ff       jl     5e3370 <tbm_iterate+0x20>
         :	                        iterator->schunkbit++;
         :	                        return output;
         :	                }
         :	        }
         :
         :	        if (iterator->spageptr < tbm->npages)
    0.00 :	  5e3409:       8b 77 08                mov    0x8(%rdi),%esi
    0.00 :	  5e340c:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3410:       7c 44                   jl     5e3456 <tbm_iterate+0x106>
    0.00 :	  5e3412:       31 db                   xor    %ebx,%ebx
    0.00 :	  5e3414:       e9 c9 00 00 00          jmpq   5e34e2 <tbm_iterate+0x192>
    0.00 :	  5e3419:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                break;
         :	                        schunkbit++;
         :	                }
         :	                if (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
    0.00 :	  5e3420:       89 77 10                mov    %esi,0x10(%rdi)
         :
         :	        /*
         :	         * If both chunk and per-page data remain, must output the numerically
         :	         * earlier page.
         :	         */
         :	        if (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3423:       8b 47 0c                mov    0xc(%rdi),%eax
    0.00 :	  5e3426:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e342a:       7d dd                   jge    5e3409 <tbm_iterate+0xb9>
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
    0.00 :	  5e342c:       49 8b 53 70             mov    0x70(%r11),%rdx
    0.00 :	  5e3430:       48 98                   cltq   
    0.00 :	  5e3432:       89 f1                   mov    %esi,%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e3434:       8b 77 08                mov    0x8(%rdi),%esi
         :	        if (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
    0.00 :	  5e3437:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e343b:       03 08                   add    (%rax),%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e343d:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3441:       0f 8d 89 00 00 00       jge    5e34d0 <tbm_iterate+0x180>
    0.00 :	  5e3447:       49 8b 53 68             mov    0x68(%r11),%rdx
    0.00 :	  5e344b:       48 63 c6                movslq %esi,%rax
    0.00 :	  5e344e:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e3452:       3b 08                   cmp    (%rax),%ecx
    0.00 :	  5e3454:       72 7a                   jb     5e34d0 <tbm_iterate+0x180>
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:708
   50.00 :	  5e3456:       41 83 7b 10 01          cmpl   $0x1,0x10(%r11)
         :	                        page = &tbm->entry1;
    0.00 :	  5e345b:       49 8d 53 34             lea    0x34(%r11),%rdx
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
    0.00 :	  5e345f:       74 0b                   je     5e346c <tbm_iterate+0x11c>
         :	                        page = &tbm->entry1;
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
    0.00 :	  5e3461:       49 8b 43 68             mov    0x68(%r11),%rax
    0.00 :	  5e3465:       48 63 d6                movslq %esi,%rdx
    0.00 :	  5e3468:       48 8b 14 d0             mov    (%rax,%rdx,8),%rdx
    0.00 :	  5e346c:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5e346f:       45 31 c9                xor    %r9d,%r9d
    0.00 :	  5e3472:       41 ba 01 00 00 00       mov    $0x1,%r10d
    0.00 :	  5e3478:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5e347f:       00 
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
         :	                {
         :	                        bitmapword      w = page->words[wordnum];
    0.00 :	  5e3480:       42 8b 4c 0a 08          mov    0x8(%rdx,%r9,1),%ecx
         :
         :	                        if (w != 0)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:719
   50.00 :	  5e3485:       85 c9                   test   %ecx,%ecx
    0.00 :	  5e3487:       74 1f                   je     5e34a8 <tbm_iterate+0x158>
    0.00 :	  5e3489:       44 89 d6                mov    %r10d,%esi
    0.00 :	  5e348c:       eb 05                   jmp    5e3493 <tbm_iterate+0x143>
    0.00 :	  5e348e:       66 90                   xchg   %ax,%ax
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
    0.00 :	  5e3490:       83 c6 01                add    $0x1,%esi
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
    0.00 :	  5e3493:       f6 c1 01                test   $0x1,%cl
    0.00 :	  5e3496:       74 0c                   je     5e34a4 <tbm_iterate+0x154>
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
    0.00 :	  5e3498:       49 63 c0                movslq %r8d,%rax
    0.00 :	  5e349b:       41 83 c0 01             add    $0x1,%r8d
    0.00 :	  5e349f:       66 89 74 47 1e          mov    %si,0x1e(%rdi,%rax,2)
         :
         :	                        if (w != 0)
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
    0.00 :	  5e34a4:       d1 e9                   shr    %ecx
    0.00 :	  5e34a6:       75 e8                   jne    5e3490 <tbm_iterate+0x140>
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
    0.00 :	  5e34a8:       49 83 c1 04             add    $0x4,%r9
    0.00 :	  5e34ac:       41 83 c2 20             add    $0x20,%r10d
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
    0.00 :	  5e34b0:       49 83 f9 28             cmp    $0x28,%r9
    0.00 :	  5e34b4:       75 ca                   jne    5e3480 <tbm_iterate+0x130>
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34b6:       8b 02                   mov    (%rdx),%eax
         :	                output->ntuples = ntuples;
    0.00 :	  5e34b8:       44 89 47 18             mov    %r8d,0x18(%rdi)
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34bc:       89 47 14                mov    %eax,0x14(%rdi)
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34bf:       0f b6 42 05             movzbl 0x5(%rdx),%eax
         :	                iterator->spageptr++;
    0.00 :	  5e34c3:       83 47 08 01             addl   $0x1,0x8(%rdi)
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34c7:       88 47 1c                mov    %al,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34ca:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34cd:       5b                      pop    %rbx
    0.00 :	  5e34ce:       c9                      leaveq 
    0.00 :	  5e34cf:       c3                      retq   
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
         :	                        output->ntuples = -1;
         :	                        output->recheck = true;
         :	                        iterator->schunkbit++;
    0.00 :	  5e34d0:       83 47 10 01             addl   $0x1,0x10(%rdi)
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
         :	                if (iterator->spageptr >= tbm->npages ||
         :	                        chunk_blockno < tbm->spages[iterator->spageptr]->blockno)
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
    0.00 :	  5e34d4:       89 4f 14                mov    %ecx,0x14(%rdi)
         :	                        output->ntuples = -1;
    0.00 :	  5e34d7:       c7 47 18 ff ff ff ff    movl   $0xffffffff,0x18(%rdi)
         :	                        output->recheck = true;
    0.00 :	  5e34de:       c6 47 1c 01             movb   $0x1,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34e2:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34e5:       5b                      pop    %rbx
    0.00 :	  5e34e6:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2823
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674b60 <IncrBufferRefCount>:
         :	 *              This function cannot be used on a buffer we do not have pinned,
         :	 *              because it doesn't change the shared buffer state.
         :	 */
         :	void
         :	IncrBufferRefCount(Buffer buffer)
         :	{
    0.00 :	  674b60:       55                      push   %rbp
    0.00 :	  674b61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674b64:       53                      push   %rbx
    0.00 :	  674b65:       89 fb                   mov    %edi,%ebx
    0.00 :	  674b67:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  674b6b:       48 8b 3d 4e 5d 54 00    mov    0x545d4e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674b72:       e8 f9 62 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
    0.00 :	  674b77:       48 8b 3d 42 5d 54 00    mov    0x545d42(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674b7e:       89 de                   mov    %ebx,%esi
    0.00 :	  674b80:       e8 1b 56 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674b85:       85 db                   test   %ebx,%ebx
    0.00 :	  674b87:       78 1f                   js     674ba8 <IncrBufferRefCount+0x48>
         :	                LocalRefCount[-buffer - 1]++;
         :	        else
         :	        {
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
    0.00 :	  674b89:       89 df                   mov    %ebx,%edi
    0.00 :	  674b8b:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  674b90:       31 f6                   xor    %esi,%esi
    0.00 :	  674b92:       e8 89 f9 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2823
   50.00 :	  674b97:       83 40 04 01             addl   $0x1,0x4(%rax)
         :	        }
         :	}
    0.00 :	  674b9b:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674b9f:       5b                      pop    %rbx
    0.00 :	  674ba0:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
   50.00 :	  674ba1:       c3                      retq   
    0.00 :	  674ba2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	{
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
         :	        if (BufferIsLocal(buffer))
         :	                LocalRefCount[-buffer - 1]++;
    0.00 :	  674ba8:       f7 d3                   not    %ebx
    0.00 :	  674baa:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674bad:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674bb1:       48 03 05 68 85 50 00    add    0x508568(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674bb8:       83 00 01                addl   $0x1,(%rax)
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
         :	        }
         :	}
    0.00 :	  674bbb:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674bbf:       5b                      pop    %rbx
    0.00 :	  674bc0:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1781
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006756f0 <BgBufferSync>:
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756f0:       55                      push   %rbp
    0.00 :	  6756f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6756f4:       41 57                   push   %r15
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  6756f6:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6756fa:       48 8d 7d d4             lea    -0x2c(%rbp),%rdi
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756fe:       41 56                   push   %r14
    0.00 :	  675700:       41 55                   push   %r13
    0.00 :	  675702:       41 54                   push   %r12
    0.00 :	  675704:       53                      push   %rbx
    0.00 :	  675705:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675709:       e8 22 1d 00 00          callq  677430 <StrategySyncStart>
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67570e:       44 8b 55 d0             mov    -0x30(%rbp),%r10d
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675712:       44 8b 1d 77 2f 4f 00    mov    0x4f2f77(%rip),%r11d        # b68690 <bgwriter_lru_maxpages>
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675719:       89 c6                   mov    %eax,%esi
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67571b:       45 89 d1                mov    %r10d,%r9d
    0.00 :	  67571e:       4c 01 0d 5b a3 54 00    add    %r9,0x54a35b(%rip)        # bbfa80 <BgWriterStats+0x40>
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675725:       45 85 db                test   %r11d,%r11d
    0.00 :	  675728:       0f 8e a2 02 00 00       jle    6759d0 <BgBufferSync+0x2e0>
         :	         * see if we are still ahead of the clock sweep, and if so, how many
         :	         * buffers we could scan before we'd catch up with it and "lap" it. Note:
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
    0.00 :	  67572e:       80 3d 6f 79 50 00 00    cmpb   $0x0,0x50796f(%rip)        # b7d0a4 <saved_info_valid.17628>
    0.00 :	  675735:       0f 85 4d 01 00 00       jne    675888 <BgBufferSync+0x198>
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  67573b:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	#ifdef BGW_DEBUG
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
    0.00 :	  675740:       89 05 52 79 50 00       mov    %eax,0x507952(%rip)        # b7d098 <next_to_clean.17631>
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  675746:       8b 3d d4 33 4f 00       mov    0x4f33d4(%rip),%edi        # b68b20 <NBuffers>
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67574c:       8b 45 d4                mov    -0x2c(%rbp),%eax
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  67574f:       89 35 4b 79 50 00       mov    %esi,0x50794b(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  675755:       c6 05 48 79 50 00 01    movb   $0x1,0x507948(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  67575c:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67575f:       89 05 2f 79 50 00       mov    %eax,0x50792f(%rip)        # b7d094 <next_passes.17632>
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  675765:       89 05 31 79 50 00       mov    %eax,0x507931(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	         * Estimate how many reusable buffers there are between the current
         :	         * strategy point and where we've scanned ahead to, based on the smoothed
         :	         * density estimate.
         :	         */
         :	        bufs_ahead = NBuffers - bufs_to_lap;
         :	        reusable_buffers_est = (float) bufs_ahead / smoothed_density;
    0.00 :	  67576b:       89 f8                   mov    %edi,%eax
    0.00 :	  67576d:       2b 45 c4                sub    -0x3c(%rbp),%eax
    0.00 :	  675770:       f3 0f 2a c0             cvtsi2ss %eax,%xmm0
    0.00 :	  675774:       f3 0f 5e 05 24 2f 4f    divss  0x4f2f24(%rip),%xmm0        # b686a0 <smoothed_density.17634>
    0.00 :	  67577b:       00 
    0.00 :	  67577c:       f3 44 0f 2c f8          cvttss2si %xmm0,%r15d
         :	        /*
         :	         * Track a moving average of recent buffer allocations.  Here, rather than
         :	         * a true average we want a fast-attack, slow-decline behavior: we
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
    0.00 :	  675781:       f3 0f 10 05 07 79 50    movss  0x507907(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675788:       00 
    0.00 :	  675789:       0f 2e d0                ucomiss %xmm0,%xmm2
    0.00 :	  67578c:       0f 82 1e 02 00 00       jb     6759b0 <BgBufferSync+0x2c0>
         :	                smoothed_alloc = recent_alloc;
    0.00 :	  675792:       f3 0f 11 15 f6 78 50    movss  %xmm2,0x5078f6(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675799:       00 
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
         :	                        smoothing_samples;
         :
         :	        /* Scale the estimate by a GUC to allow more aggressive tuning. */
         :	        upcoming_alloc_est = (int) (smoothed_alloc * bgwriter_lru_multiplier);
    0.00 :	  67579a:       f3 0f 10 05 ee 78 50    movss  0x5078ee(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757a1:       00 
    0.00 :	  6757a2:       0f 5a c0                cvtps2pd %xmm0,%xmm0
    0.00 :	  6757a5:       f2 0f 59 05 eb 2e 4f    mulsd  0x4f2eeb(%rip),%xmm0        # b68698 <bgwriter_lru_multiplier>
    0.00 :	  6757ac:       00 
    0.00 :	  6757ad:       f2 0f 2c d0             cvttsd2si %xmm0,%edx
         :	         * kernel warnings on some platforms.  Once upcoming_alloc_est has gone to
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
    0.00 :	  6757b1:       85 d2                   test   %edx,%edx
    0.00 :	  6757b3:       75 0a                   jne    6757bf <BgBufferSync+0xcf>
         :	                smoothed_alloc = 0;
    0.00 :	  6757b5:       c7 05 d1 78 50 00 00    movl   $0x0,0x5078d1(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757bc:       00 00 00 
    0.00 :	  6757bf:       f3 0f 2a 15 29 2e 4f    cvtsi2ssl 0x4f2e29(%rip),%xmm2        # b685f0 <BgWriterDelay>
    0.00 :	  6757c6:       00 
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757c7:       45 89 fc                mov    %r15d,%r12d
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757ca:       f3 0f 10 05 16 49 23    movss  0x234916(%rip),%xmm0        # 8aa0e8 <__func__.17063+0x15>
    0.00 :	  6757d1:       00 
    0.00 :	  6757d2:       f3 0f 2a cf             cvtsi2ss %edi,%xmm1
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757d6:       48 8b 3d e3 50 54 00    mov    0x5450e3(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757dd:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  6757e1:       f3 0f 5e c8             divss  %xmm0,%xmm1
    0.00 :	  6757e5:       f3 0f 2c c1             cvttss2si %xmm1,%eax
    0.00 :	  6757e9:       45 8d 34 07             lea    (%r15,%rax,1),%r14d
    0.00 :	  6757ed:       41 39 d6                cmp    %edx,%r14d
    0.00 :	  6757f0:       44 0f 4c f2             cmovl  %edx,%r14d
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757f4:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  6757f7:       e8 74 56 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
    0.00 :	  6757fc:       8b 5d c4                mov    -0x3c(%rbp),%ebx
    0.00 :	  6757ff:       90                      nop
         :	        num_to_scan = bufs_to_lap;
         :	        num_written = 0;
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
    0.00 :	  675800:       85 db                   test   %ebx,%ebx
    0.00 :	  675802:       7e 09                   jle    67580d <BgBufferSync+0x11d>
    0.00 :	  675804:       45 39 e6                cmp    %r12d,%r14d
    0.00 :	  675807:       0f 8f 23 01 00 00       jg     675930 <BgBufferSync+0x240>
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
         :	                        reusable_buffers++;
         :	        }
         :
         :	        BgWriterStats.m_buf_written_clean += num_written;
    0.00 :	  67580d:       49 63 c5                movslq %r13d,%rax
    0.00 :	  675810:       48 01 05 49 a2 54 00    add    %rax,0x54a249(%rip)        # bbfa60 <BgWriterStats+0x20>
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675817:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
    0.00 :	  67581a:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67581d:       44 29 fa                sub    %r15d,%edx
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675820:       29 d8                   sub    %ebx,%eax
    0.00 :	  675822:       48 98                   cltq   
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
         :	        if (new_strategy_delta > 0 && new_recent_alloc > 0)
    0.00 :	  675824:       48 85 c0                test   %rax,%rax
    0.00 :	  675827:       7e 34                   jle    67585d <BgBufferSync+0x16d>
    0.00 :	  675829:       85 d2                   test   %edx,%edx
    0.00 :	  67582b:       74 30                   je     67585d <BgBufferSync+0x16d>
         :	        {
         :	                scans_per_alloc = (float) new_strategy_delta / (float) new_recent_alloc;
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  67582d:       f3 48 0f 2a c0          cvtsi2ss %rax,%xmm0
    0.00 :	  675832:       89 d0                   mov    %edx,%eax
    0.00 :	  675834:       f3 48 0f 2a c8          cvtsi2ss %rax,%xmm1
    0.00 :	  675839:       f3 0f 10 15 5f 2e 4f    movss  0x4f2e5f(%rip),%xmm2        # b686a0 <smoothed_density.17634>
    0.00 :	  675840:       00 
    0.00 :	  675841:       f3 0f 5e c1             divss  %xmm1,%xmm0
    0.00 :	  675845:       f3 0f 5c c2             subss  %xmm2,%xmm0
    0.00 :	  675849:       f3 0f 59 05 93 48 23    mulss  0x234893(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  675850:       00 
    0.00 :	  675851:       f3 0f 58 d0             addss  %xmm0,%xmm2
    0.00 :	  675855:       f3 0f 11 15 43 2e 4f    movss  %xmm2,0x4f2e43(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  67585c:       00 
         :	                         scans_per_alloc, smoothed_density);
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
    0.00 :	  67585d:       44 8b 55 c4             mov    -0x3c(%rbp),%r10d
    0.00 :	  675861:       31 c0                   xor    %eax,%eax
    0.00 :	  675863:       45 85 d2                test   %r10d,%r10d
    0.00 :	  675866:       75 0a                   jne    675872 <BgBufferSync+0x182>
    0.00 :	  675868:       44 8b 4d d0             mov    -0x30(%rbp),%r9d
    0.00 :	  67586c:       45 85 c9                test   %r9d,%r9d
    0.00 :	  67586f:       0f 94 c0                sete   %al
         :	}
    0.00 :	  675872:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  675876:       5b                      pop    %rbx
    0.00 :	  675877:       41 5c                   pop    %r12
    0.00 :	  675879:       41 5d                   pop    %r13
    0.00 :	  67587b:       41 5e                   pop    %r14
    0.00 :	  67587d:       41 5f                   pop    %r15
    0.00 :	  67587f:       c9                      leaveq 
    0.00 :	  675880:       c3                      retq   
    0.00 :	  675881:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
    0.00 :	  675888:       44 8b 45 d4             mov    -0x2c(%rbp),%r8d
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  67588c:       89 c1                   mov    %eax,%ecx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67588e:       8b 3d 8c 32 4f 00       mov    0x4f328c(%rip),%edi        # b68b20 <NBuffers>
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  675894:       2b 0d 06 78 50 00       sub    0x507806(%rip),%ecx        # b7d0a0 <prev_strategy_buf_id.17629>
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67589a:       44 89 c0                mov    %r8d,%eax
    0.00 :	  67589d:       2b 05 f9 77 50 00       sub    0x5077f9(%rip),%eax        # b7d09c <prev_strategy_passes.17630>
    0.00 :	  6758a3:       48 63 d7                movslq %edi,%rdx
    0.00 :	  6758a6:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  6758a9:       48 63 c9                movslq %ecx,%rcx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758ac:       48 98                   cltq   
    0.00 :	  6758ae:       48 0f af c2             imul   %rdx,%rax
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758b2:       8b 15 dc 77 50 00       mov    0x5077dc(%rip),%edx        # b7d094 <next_passes.17632>
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758b8:       48 01 c1                add    %rax,%rcx
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758bb:       89 d0                   mov    %edx,%eax
    0.00 :	  6758bd:       44 29 c0                sub    %r8d,%eax
    0.00 :	  6758c0:       85 c0                   test   %eax,%eax
    0.00 :	  6758c2:       0f 8e 23 01 00 00       jle    6759eb <BgBufferSync+0x2fb>
         :	                {
         :	                        /* we're one pass ahead of the strategy point */
         :	                        bufs_to_lap = strategy_buf_id - next_to_clean;
    0.00 :	  6758c8:       89 f0                   mov    %esi,%eax
    0.00 :	  6758ca:       2b 05 c8 77 50 00       sub    0x5077c8(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  6758d0:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758d3:       48 85 c9                test   %rcx,%rcx
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  6758d6:       89 35 c4 77 50 00       mov    %esi,0x5077c4(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  6758dc:       44 89 05 b9 77 50 00    mov    %r8d,0x5077b9(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	        saved_info_valid = true;
    0.00 :	  6758e3:       c6 05 ba 77 50 00 01    movb   $0x1,0x5077ba(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758ea:       0f 8e 2c 01 00 00       jle    675a1c <BgBufferSync+0x32c>
    0.00 :	  6758f0:       45 85 d2                test   %r10d,%r10d
    0.00 :	  6758f3:       0f 57 d2                xorps  %xmm2,%xmm2
    0.00 :	  6758f6:       0f 84 6f fe ff ff       je     67576b <BgBufferSync+0x7b>
         :	        {
         :	                scans_per_alloc = (float) strategy_delta / (float) recent_alloc;
    0.00 :	  6758fc:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  675901:       f3 48 0f 2a c1          cvtsi2ss %rcx,%xmm0
    0.00 :	  675906:       f3 0f 10 0d 92 2d 4f    movss  0x4f2d92(%rip),%xmm1        # b686a0 <smoothed_density.17634>
    0.00 :	  67590d:       00 
    0.00 :	  67590e:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  675912:       f3 0f 5c c1             subss  %xmm1,%xmm0
    0.00 :	  675916:       f3 0f 59 05 c6 47 23    mulss  0x2347c6(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  67591d:       00 
    0.00 :	  67591e:       f3 0f 58 c8             addss  %xmm0,%xmm1
    0.00 :	  675922:       f3 0f 11 0d 76 2d 4f    movss  %xmm1,0x4f2d76(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  675929:       00 
    0.00 :	  67592a:       e9 3c fe ff ff          jmpq   67576b <BgBufferSync+0x7b>
    0.00 :	  67592f:       90                      nop
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
    0.00 :	  675930:       8b 3d 62 77 50 00       mov    0x507762(%rip),%edi        # b7d098 <next_to_clean.17631>
    0.00 :	  675936:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67593b:       e8 20 f9 ff ff          callq  675260 <SyncOneBuffer>
    0.00 :	  675940:       89 c2                   mov    %eax,%edx
         :
         :	                if (++next_to_clean >= NBuffers)
    0.00 :	  675942:       8b 05 50 77 50 00       mov    0x507750(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675948:       83 c0 01                add    $0x1,%eax
    0.00 :	  67594b:       3b 05 cf 31 4f 00       cmp    0x4f31cf(%rip),%eax        # b68b20 <NBuffers>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1781
   50.00 :	  675951:       89 05 41 77 50 00       mov    %eax,0x507741(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675957:       7c 11                   jl     67596a <BgBufferSync+0x27a>
         :	                {
         :	                        next_to_clean = 0;
         :	                        next_passes++;
    0.00 :	  675959:       83 05 34 77 50 00 01    addl   $0x1,0x507734(%rip)        # b7d094 <next_passes.17632>
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
         :
         :	                if (++next_to_clean >= NBuffers)
         :	                {
         :	                        next_to_clean = 0;
    0.00 :	  675960:       c7 05 2e 77 50 00 00    movl   $0x0,0x50772e(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675967:       00 00 00 
         :	                        next_passes++;
         :	                }
         :	                num_to_scan--;
    0.00 :	  67596a:       83 eb 01                sub    $0x1,%ebx
         :
         :	                if (buffer_state & BUF_WRITTEN)
    0.00 :	  67596d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675970:       74 26                   je     675998 <BgBufferSync+0x2a8>
         :	                {
         :	                        reusable_buffers++;
    0.00 :	  675972:       41 83 c4 01             add    $0x1,%r12d
         :	                        if (++num_written >= bgwriter_lru_maxpages)
    0.00 :	  675976:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  67597a:       44 3b 2d 0f 2d 4f 00    cmp    0x4f2d0f(%rip),%r13d        # b68690 <bgwriter_lru_maxpages>
    0.00 :	  675981:       0f 8c 79 fe ff ff       jl     675800 <BgBufferSync+0x110>
         :	                        {
         :	                                BgWriterStats.m_maxwritten_clean++;
    0.00 :	  675987:       48 83 05 d9 a0 54 00    addq   $0x1,0x54a0d9(%rip)        # bbfa68 <BgWriterStats+0x28>
    0.00 :	  67598e:       01 
         :	                                break;
    0.00 :	  67598f:       e9 79 fe ff ff          jmpq   67580d <BgBufferSync+0x11d>
    0.00 :	  675994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        }
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
    0.00 :	  675998:       83 e2 02                and    $0x2,%edx
         :	                        reusable_buffers++;
    0.00 :	  67599b:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  67599e:       41 83 dc ff             sbb    $0xffffffff,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
   50.00 :	  6759a2:       e9 59 fe ff ff          jmpq   675800 <BgBufferSync+0x110>
    0.00 :	  6759a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6759ae:       00 00 
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
         :	                smoothed_alloc = recent_alloc;
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
    0.00 :	  6759b0:       f3 0f 5c d0             subss  %xmm0,%xmm2
    0.00 :	  6759b4:       f3 0f 59 15 28 47 23    mulss  0x234728(%rip),%xmm2        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  6759bb:       00 
    0.00 :	  6759bc:       f3 0f 58 c2             addss  %xmm2,%xmm0
    0.00 :	  6759c0:       f3 0f 11 05 c8 76 50    movss  %xmm0,0x5076c8(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6759c7:       00 
    0.00 :	  6759c8:       e9 cd fd ff ff          jmpq   67579a <BgBufferSync+0xaa>
    0.00 :	  6759cd:       0f 1f 00                nopl   (%rax)
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759d0:       c6 05 cd 76 50 00 00    movb   $0x0,0x5076cd(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759d7:       48 83 c4 18             add    $0x18,%rsp
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759db:       b8 01 00 00 00          mov    $0x1,%eax
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759e0:       5b                      pop    %rbx
    0.00 :	  6759e1:       41 5c                   pop    %r12
    0.00 :	  6759e3:       41 5d                   pop    %r13
    0.00 :	  6759e5:       41 5e                   pop    %r14
    0.00 :	  6759e7:       41 5f                   pop    %r15
    0.00 :	  6759e9:       c9                      leaveq 
    0.00 :	  6759ea:       c3                      retq   
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  6759eb:       41 39 d0                cmp    %edx,%r8d
    0.00 :	  6759ee:       74 12                   je     675a02 <BgBufferSync+0x312>
         :	                        elog(DEBUG2, "bgwriter behind: bgw %u-%u strategy %u-%u delta=%ld",
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta);
         :	#endif
         :	                        next_to_clean = strategy_buf_id;
    0.00 :	  6759f0:       89 35 a2 76 50 00       mov    %esi,0x5076a2(%rip)        # b7d098 <next_to_clean.17631>
         :	                        next_passes = strategy_passes;
    0.00 :	  6759f6:       44 89 05 97 76 50 00    mov    %r8d,0x507697(%rip)        # b7d094 <next_passes.17632>
    0.00 :	  6759fd:       e9 d1 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a02:       8b 05 90 76 50 00       mov    0x507690(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675a08:       39 c6                   cmp    %eax,%esi
    0.00 :	  675a0a:       7f e4                   jg     6759f0 <BgBufferSync+0x300>
         :	                                 next_to_clean >= strategy_buf_id)
         :	                {
         :	                        /* on same pass, but ahead or at least not behind */
         :	                        bufs_to_lap = NBuffers - (next_to_clean - strategy_buf_id);
    0.00 :	  675a0c:       89 fa                   mov    %edi,%edx
    0.00 :	  675a0e:       29 c2                   sub    %eax,%edx
    0.00 :	  675a10:       89 d0                   mov    %edx,%eax
    0.00 :	  675a12:       01 f0                   add    %esi,%eax
    0.00 :	  675a14:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a17:       e9 b7 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  675a1c:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
    0.00 :	  675a21:       e9 45 fd ff ff          jmpq   67576b <BgBufferSync+0x7b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:530
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:536
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000676570 <ReadBufferExtended>:
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676570:       55                      push   %rbp
    0.00 :	  676571:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  676574:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  676578:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  67657c:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67657f:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  676583:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  676587:       41 89 cd                mov    %ecx,%r13d
    0.00 :	  67658a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  67658e:       48 83 ec 40             sub    $0x40,%rsp
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676592:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676597:       41 89 f7                mov    %esi,%r15d
    0.00 :	  67659a:       41 89 d6                mov    %edx,%r14d
    0.00 :	  67659d:       4d 89 c4                mov    %r8,%r12
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6765a0:       0f 84 aa 00 00 00       je     676650 <ReadBufferExtended+0xe0>
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6765a6:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765aa:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
    0.00 :	  6765ae:       80 fa 74                cmp    $0x74,%dl
    0.00 :	  6765b1:       74 6d                   je     676620 <ReadBufferExtended+0xb0>
         :
         :	        /*
         :	         * Read the buffer, and update pgstat counters to reflect a cache hit or
         :	         * miss.
         :	         */
         :	        pgstat_count_buffer_read(reln);
    0.00 :	  6765b3:       48 8b 83 38 01 00 00    mov    0x138(%rbx),%rax
    0.00 :	  6765ba:       48 85 c0                test   %rax,%rax
    0.00 :	  6765bd:       74 0d                   je     6765cc <ReadBufferExtended+0x5c>
    0.00 :	  6765bf:       48 83 40 60 01          addq   $0x1,0x60(%rax)
    0.00 :	  6765c4:       48 8b 43 30             mov    0x30(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:530
   50.00 :	  6765c8:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
         :	        buf = ReadBuffer_common(reln->rd_smgr, reln->rd_rel->relpersistence,
    0.00 :	  6765cc:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  6765d0:       48 8d 45 d7             lea    -0x29(%rbp),%rax
    0.00 :	  6765d4:       0f be f2                movsbl %dl,%esi
    0.00 :	  6765d7:       4d 89 e1                mov    %r12,%r9
    0.00 :	  6765da:       45 89 e8                mov    %r13d,%r8d
    0.00 :	  6765dd:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  6765e0:       44 89 fa                mov    %r15d,%edx
    0.00 :	  6765e3:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  6765e7:       e8 b4 f6 ff ff          callq  675ca0 <ReadBuffer_common>
         :	                                                        forkNum, blockNum, mode, strategy, &hit);
         :	        if (hit)
    0.00 :	  6765ec:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  6765f0:       74 11                   je     676603 <ReadBufferExtended+0x93>
         :	                pgstat_count_buffer_hit(reln);
    0.00 :	  6765f2:       48 8b 93 38 01 00 00    mov    0x138(%rbx),%rdx
    0.00 :	  6765f9:       48 85 d2                test   %rdx,%rdx
    0.00 :	  6765fc:       74 05                   je     676603 <ReadBufferExtended+0x93>
    0.00 :	  6765fe:       48 83 42 68 01          addq   $0x1,0x68(%rdx)
         :	        return buf;
         :	}
    0.00 :	  676603:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:536
   50.00 :	  676607:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  67660b:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  67660f:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  676613:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  676617:       c9                      leaveq 
    0.00 :	  676618:       c3                      retq   
    0.00 :	  676619:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  676620:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676624:       75 8d                   jne    6765b3 <ReadBufferExtended+0x43>
         :	                ereport(ERROR,
    0.00 :	  676626:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676629:       b9 c0 a0 8a 00          mov    $0x8aa0c0,%ecx
    0.00 :	  67662e:       ba 0c 02 00 00          mov    $0x20c,%edx
    0.00 :	  676633:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676638:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67663d:       e8 7e 44 10 00          callq  77aac0 <errstart>
    0.00 :	  676642:       84 c0                   test   %al,%al
    0.00 :	  676644:       75 29                   jne    67666f <ReadBufferExtended+0xff>
    0.00 :	  676646:       e8 85 2e df ff          callq  4694d0 <abort@plt>
    0.00 :	  67664b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	{
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676650:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676653:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676656:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676659:       e8 d2 33 02 00          callq  699a30 <smgropen>
    0.00 :	  67665e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676662:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676665:       e8 96 2c 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67666a:       e9 37 ff ff ff          jmpq   6765a6 <ReadBufferExtended+0x36>
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
         :	                ereport(ERROR,
    0.00 :	  67666f:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  676674:       31 c0                   xor    %eax,%eax
    0.00 :	  676676:       e8 25 62 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67667b:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  676680:       89 c3                   mov    %eax,%ebx
    0.00 :	  676682:       e8 c9 66 10 00          callq  77cd50 <errcode>
    0.00 :	  676687:       89 de                   mov    %ebx,%esi
    0.00 :	  676689:       89 c7                   mov    %eax,%edi
    0.00 :	  67668b:       31 c0                   xor    %eax,%eax
    0.00 :	  67668d:       e8 4e 3f 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676692:       eb b2                   jmp    676646 <ReadBufferExtended+0xd6>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1578
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068f3a0 <LWLockRelease>:
         :	/*
         :	 * LWLockRelease - release a previously acquired lock
         :	 */
         :	void
         :	LWLockRelease(LWLock *lock)
         :	{
    0.00 :	  68f3a0:       55                      push   %rbp
    0.00 :	  68f3a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68f3a4:       41 55                   push   %r13
    0.00 :	  68f3a6:       41 54                   push   %r12
    0.00 :	  68f3a8:       49 89 fc                mov    %rdi,%r12
    0.00 :	  68f3ab:       53                      push   %rbx
    0.00 :	  68f3ac:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f3b0:       8b 35 52 e6 4e 00       mov    0x4ee652(%rip),%esi        # b7da08 <num_held_lwlocks>
    0.00 :	  68f3b6:       89 f0                   mov    %esi,%eax
    0.00 :	  68f3b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68f3bf:       00 
    0.00 :	  68f3c0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f3c3:       0f 88 1f 02 00 00       js     68f5e8 <LWLockRelease+0x248>
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
    0.00 :	  68f3c9:       48 63 d0                movslq %eax,%rdx
    0.00 :	  68f3cc:       41 b9 40 da b7 00       mov    $0xb7da40,%r9d
    0.00 :	  68f3d2:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f3d5:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f3d9:       48 8b 99 40 da b7 00    mov    0xb7da40(%rcx),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1578
   50.00 :	  68f3e0:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	  68f3e3:       75 db                   jne    68f3c0 <LWLockRelease+0x20>
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3e5:       44 8d 46 ff             lea    -0x1(%rsi),%r8d
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
         :	                {
         :	                        mode = held_lwlocks[i].mode;
    0.00 :	  68f3e9:       44 8b 91 48 da b7 00    mov    0xb7da48(%rcx),%r10d
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3f0:       41 39 c0                cmp    %eax,%r8d
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3f3:       44 89 05 0e e6 4e 00    mov    %r8d,0x4ee60e(%rip)        # b7da08 <num_held_lwlocks>
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3fa:       7f 09                   jg     68f405 <LWLockRelease+0x65>
    0.00 :	  68f3fc:       eb 3a                   jmp    68f438 <LWLockRelease+0x98>
    0.00 :	  68f3fe:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f400:       89 f0                   mov    %esi,%eax
    0.00 :	  68f402:       48 89 fa                mov    %rdi,%rdx
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f405:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  68f408:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f40b:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f40f:       48 63 fe                movslq %esi,%rdi
    0.00 :	  68f412:       48 89 fa                mov    %rdi,%rdx
    0.00 :	  68f415:       48 c1 e2 04             shl    $0x4,%rdx
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f419:       41 39 f0                cmp    %esi,%r8d
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f41c:       48 8b 82 40 da b7 00    mov    0xb7da40(%rdx),%rax
    0.00 :	  68f423:       48 89 81 40 da b7 00    mov    %rax,0xb7da40(%rcx)
    0.00 :	  68f42a:       48 8b 82 48 da b7 00    mov    0xb7da48(%rdx),%rax
    0.00 :	  68f431:       49 89 44 09 08          mov    %rax,0x8(%r9,%rcx,1)
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f436:       7f c8                   jg     68f400 <LWLockRelease+0x60>
         :
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68f438:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f43b:       0f 84 77 01 00 00       je     68f5b8 <LWLockRelease+0x218>
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
         :	        else
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, 1);
    0.00 :	  68f441:       49 8d 54 24 04          lea    0x4(%r12),%rdx
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68f446:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68f44b:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   50.00 :	  68f44f:       8d 50 ff                lea    -0x1(%rax),%edx
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68f452:       8b 43 08                mov    0x8(%rbx),%eax
         :	        /*
         :	         * Anybody we need to wakeup needs to have started queueing before we
         :	         * removed ourselves from the queue and the atomic operations above are
         :	         * full barriers. So we can just do plain read.
         :	         */
         :	        if (pg_atomic_read_u32(&lock->nwaiters) > 0)
    0.00 :	  68f455:       85 c0                   test   %eax,%eax
    0.00 :	  68f457:       0f 84 3a 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	        /*
         :	         * If we just released an exclusive lock always wakeup waiters, even if
         :	         * lockcount is still > 0. A shared acquisition temporarily (and
         :	         * spuriously) might have increased the value.
         :	         */
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
    0.00 :	  68f45d:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f460:       0f 85 fc 01 00 00       jne    68f662 <LWLockRelease+0x2c2>
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f466:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  68f46a:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f46e:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
         :	        /*
         :	         * We're still waiting for backends to get scheduled, don't wake them up
         :	         * again.
         :	         */
         :	        pg_read_barrier(); /* pairs with nwaiters-- */
         :	        if (!BOOL_ACCESS_ONCE(lock->releaseOK))
    0.00 :	  68f472:       0f b6 43 01             movzbl 0x1(%rbx),%eax
    0.00 :	  68f476:       84 c0                   test   %al,%al
    0.00 :	  68f478:       0f 84 19 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  68f47e:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68f483:       f0 86 03                lock xchg %al,(%rbx)
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f486:       84 c0                   test   %al,%al
    0.00 :	  68f488:       0f 85 b2 01 00 00       jne    68f640 <LWLockRelease+0x2a0>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f48e:       48 8b 53 18             mov    0x18(%rbx),%rdx
    0.00 :	  68f492:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68f495:       0f 84 bc 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f49b:       4d 8d 4c 24 10          lea    0x10(%r12),%r9
    0.00 :	  68f4a0:       48 8b 72 08             mov    0x8(%rdx),%rsi
    0.00 :	  68f4a4:       49 39 d1                cmp    %rdx,%r9
    0.00 :	  68f4a7:       0f 84 aa 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f4ad:       31 ff                   xor    %edi,%edi
    0.00 :	  68f4af:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f4b5:       eb 23                   jmp    68f4da <LWLockRelease+0x13a>
    0.00 :	  68f4b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  68f4be:       00 00 
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4c0:       80 7a fa 00             cmpb   $0x0,-0x6(%rdx)
    0.00 :	  68f4c4:       75 1d                   jne    68f4e3 <LWLockRelease+0x143>
    0.00 :	  68f4c6:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f4cb:       49 39 f1                cmp    %rsi,%r9
    0.00 :	  68f4ce:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f4d2:       74 6a                   je     68f53e <LWLockRelease+0x19e>
    0.00 :	  68f4d4:       48 89 f2                mov    %rsi,%rdx
    0.00 :	  68f4d7:       48 89 c6                mov    %rax,%rsi
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4da:       40 84 ff                test   %dil,%dil
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f4dd:       48 8d 4a b8             lea    -0x48(%rdx),%rcx
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4e1:       75 dd                   jne    68f4c0 <LWLockRelease+0x120>
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f4e3:       48 8b 51 48             mov    0x48(%rcx),%rdx
    0.00 :	  68f4e7:       48 8b 41 50             mov    0x50(%rcx),%rax
    0.00 :	  68f4eb:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f4ef:       48 8b 51 50             mov    0x50(%rcx),%rdx
    0.00 :	  68f4f3:       48 8b 41 48             mov    0x48(%rcx),%rax
    0.00 :	  68f4f7:       48 89 02                mov    %rax,(%rdx)
         :	 * Insert a node at the end of the list.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_push_tail(dlist_head *head, dlist_node *node)
         :	{
         :	        if (head->head.next == NULL)    /* convert NULL header to circular */
    0.00 :	  68f4fa:       48 83 7d d8 00          cmpq   $0x0,-0x28(%rbp)
         :	                        continue;
         :
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                dlist_push_tail(&wakeup, &waiter->lwWaitLink);
    0.00 :	  68f4ff:       48 8d 51 48             lea    0x48(%rcx),%rdx
    0.00 :	  68f503:       0f 84 cf 00 00 00       je     68f5d8 <LWLockRelease+0x238>
         :	                dlist_init(head);
         :
         :	        node->next = &head->head;
    0.00 :	  68f509:       4c 89 69 50             mov    %r13,0x50(%rcx)
         :	        node->prev = head->head.prev;
    0.00 :	  68f50d:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68f511:       48 89 41 48             mov    %rax,0x48(%rcx)
         :	        node->prev->next = node;
    0.00 :	  68f515:       48 89 50 08             mov    %rdx,0x8(%rax)
         :	        head->head.prev = node;
    0.00 :	  68f519:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
         :
         :	                if (waiter->lwWaitMode != LW_WAIT_UNTIL_FREE)
    0.00 :	  68f51d:       0f b6 41 42             movzbl 0x42(%rcx),%eax
    0.00 :	  68f521:       3c 02                   cmp    $0x2,%al
    0.00 :	  68f523:       74 a6                   je     68f4cb <LWLockRelease+0x12b>
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f525:       84 c0                   test   %al,%al
    0.00 :	  68f527:       0f 84 0b 01 00 00       je     68f638 <LWLockRelease+0x298>
    0.00 :	  68f52d:       45 31 c0                xor    %r8d,%r8d
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f530:       49 39 f1                cmp    %rsi,%r9
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f533:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f538:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f53c:       75 96                   jne    68f4d4 <LWLockRelease+0x134>
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
         :	                        break;
         :	        }
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
    0.00 :	  68f53e:       44 88 43 01             mov    %r8b,0x1(%rbx)
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f542:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
         :
         :	        /* We are done updating shared state of the lock queue. */
         :	        SpinLockRelease(&lock->mutex);
    0.00 :	  68f546:       41 c6 04 24 00          movb   $0x0,(%r12)
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f54b:       48 85 c9                test   %rcx,%rcx
    0.00 :	  68f54e:       74 47                   je     68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f550:       4c 39 e9                cmp    %r13,%rcx
    0.00 :	  68f553:       48 8b 59 08             mov    0x8(%rcx),%rbx
    0.00 :	  68f557:       75 0d                   jne    68f566 <LWLockRelease+0x1c6>
    0.00 :	  68f559:       eb 3c                   jmp    68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f55b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  68f560:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  68f563:       48 89 c3                mov    %rax,%rbx
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f566:       48 8d 79 b8             lea    -0x48(%rcx),%rdi
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f56a:       48 8b 57 48             mov    0x48(%rdi),%rdx
    0.00 :	  68f56e:       48 8b 47 50             mov    0x50(%rdi),%rax
    0.00 :	  68f572:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f576:       48 8b 57 50             mov    0x50(%rdi),%rdx
    0.00 :	  68f57a:       48 8b 47 48             mov    0x48(%rdi),%rax
    0.00 :	  68f57e:       48 89 02                mov    %rax,(%rdx)
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f581:       48 83 c7 10             add    $0x10,%rdi
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
    0.00 :	  68f585:       c6 41 f9 00             movb   $0x0,-0x7(%rcx)
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f589:       e8 02 8b fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f58e:       4c 39 eb                cmp    %r13,%rbx
    0.00 :	  68f591:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  68f595:       75 c9                   jne    68f560 <LWLockRelease+0x1c0>
         :	        TRACE_POSTGRESQL_LWLOCK_RELEASE(T_NAME(lock), T_ID(lock));
         :
         :	        /*
         :	         * Now okay to allow cancel/die interrupts.
         :	         */
         :	        RESUME_INTERRUPTS();
    0.00 :	  68f597:       8b 05 fb aa 52 00       mov    0x52aafb(%rip),%eax        # bba098 <InterruptHoldoffCount>
    0.00 :	  68f59d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f5a0:       89 05 f2 aa 52 00       mov    %eax,0x52aaf2(%rip)        # bba098 <InterruptHoldoffCount>
         :	}
    0.00 :	  68f5a6:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68f5aa:       5b                      pop    %rbx
    0.00 :	  68f5ab:       41 5c                   pop    %r12
    0.00 :	  68f5ad:       41 5d                   pop    %r13
    0.00 :	  68f5af:       c9                      leaveq 
    0.00 :	  68f5b0:       c3                      retq   
    0.00 :	  68f5b1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
    0.00 :	  68f5b8:       49 8d 54 24 04          lea    0x4(%r12),%rdx
    0.00 :	  68f5bd:       b8 00 00 00 c0          mov    $0xc0000000,%eax
    0.00 :	  68f5c2:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
    0.00 :	  68f5c6:       8d 90 00 00 00 c0       lea    -0x40000000(%rax),%edx
    0.00 :	  68f5cc:       e9 81 fe ff ff          jmpq   68f452 <LWLockRelease+0xb2>
    0.00 :	  68f5d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f5d8:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f5dc:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
    0.00 :	  68f5e0:       e9 24 ff ff ff          jmpq   68f509 <LWLockRelease+0x169>
    0.00 :	  68f5e5:       0f 1f 00                nopl   (%rax)
         :	                        mode = held_lwlocks[i].mode;
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
    0.00 :	  68f5e8:       ba 10 d1 8a 00          mov    $0x8ad110,%edx
    0.00 :	  68f5ed:       be 31 06 00 00          mov    $0x631,%esi
    0.00 :	  68f5f2:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68f5f7:       e8 24 be 0e 00          callq  77b420 <elog_start>
    0.00 :	  68f5fc:       49 63 54 24 0c          movslq 0xc(%r12),%rdx
    0.00 :	  68f601:       48 8b 05 08 e4 4e 00    mov    0x4ee408(%rip),%rax        # b7da10 <LWLockTrancheArray>
    0.00 :	  68f608:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68f60d:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
    0.00 :	  68f611:       31 d2                   xor    %edx,%edx
    0.00 :	  68f613:       4c 2b 66 08             sub    0x8(%rsi),%r12
    0.00 :	  68f617:       4c 89 e0                mov    %r12,%rax
    0.00 :	  68f61a:       48 f7 76 10             divq   0x10(%rsi)
    0.00 :	  68f61e:       48 8b 16                mov    (%rsi),%rdx
    0.00 :	  68f621:       be bf d0 8a 00          mov    $0x8ad0bf,%esi
    0.00 :	  68f626:       89 c1                   mov    %eax,%ecx
    0.00 :	  68f628:       31 c0                   xor    %eax,%eax
    0.00 :	  68f62a:       e8 01 bc 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68f62f:       e8 9c 9e dd ff          callq  4694d0 <abort@plt>
    0.00 :	  68f634:       0f 1f 40 00             nopl   0x0(%rax)
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f638:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  68f63b:       e9 fe fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f640:       ba e1 02 00 00          mov    $0x2e1,%edx
    0.00 :	  68f645:       be 85 d0 8a 00          mov    $0x8ad085,%esi
    0.00 :	  68f64a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  68f64d:       e8 ee 09 00 00          callq  690040 <s_lock>
    0.00 :	  68f652:       e9 37 fe ff ff          jmpq   68f48e <LWLockRelease+0xee>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f657:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f65d:       e9 dc fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
         :	                check_waiters = true;
         :	        /*
         :	         * nobody has this locked anymore, potential exclusive lockers get a chance
         :	         */
         :	        else if (lockcount == 0 && have_waiters)
    0.00 :	  68f662:       85 d2                   test   %edx,%edx
    0.00 :	  68f664:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  68f668:       0f 84 f8 fd ff ff       je     68f466 <LWLockRelease+0xc6>
    0.00 :	  68f66e:       66 90                   xchg   %ax,%ax
    0.00 :	  68f670:       e9 22 ff ff ff          jmpq   68f597 <LWLockRelease+0x1f7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:897
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:897
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068faf0 <LWLockAcquire>:
         :	 *
         :	 * Side effect: cancel/die interrupts are held off until lock release.
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
    0.00 :	  68faf0:       55                      push   %rbp
    0.00 :	  68faf1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68faf4:       41 57                   push   %r15
    0.00 :	  68faf6:       41 89 f7                mov    %esi,%r15d
    0.00 :	  68faf9:       41 56                   push   %r14
    0.00 :	  68fafb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  68fafe:       41 55                   push   %r13
    0.00 :	  68fb00:       41 54                   push   %r12
    0.00 :	  68fb02:       53                      push   %rbx
    0.00 :	  68fb03:       48 83 ec 18             sub    $0x18,%rsp
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb07:       81 3d f7 de 4e 00 c7    cmpl   $0xc7,0x4edef7(%rip)        # b7da08 <num_held_lwlocks>
    0.00 :	  68fb0e:       00 00 00 
         :
         :	/* internal function to implement LWLockAcquire and LWLockAcquireWithVar */
         :	static inline bool
         :	LWLockAcquireCommon(LWLock *lock, LWLockMode mode, uint64 *valptr, uint64 val)
         :	{
         :	        PGPROC     *proc = MyProc;
    0.00 :	  68fb11:       4c 8b 25 30 de 4e 00    mov    0x4ede30(%rip),%r12        # b7d948 <MyProc>
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb18:       0f 8f 0c 01 00 00       jg     68fc2a <LWLockAcquire+0x13a>
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb1e:       8b 05 74 a5 52 00       mov    0x52a574(%rip),%eax        # bba098 <InterruptHoldoffCount>
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb24:       48 8d 57 08             lea    0x8(%rdi),%rdx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb28:       4d 8d 6c 24 10          lea    0x10(%r12),%r13
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb2d:       31 db                   xor    %ebx,%ebx
    0.00 :	  68fb2f:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
    0.00 :	  68fb33:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb37:       83 c0 01                add    $0x1,%eax
    0.00 :	  68fb3a:       89 05 58 a5 52 00       mov    %eax,0x52a558(%rip)        # bba098 <InterruptHoldoffCount>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb40:       48 8d 47 01             lea    0x1(%rdi),%rax
    0.00 :	  68fb44:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  68fb48:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68fb4f:       00 
         :	                bool            mustwait;
         :
         :	                /*
         :	                 * try to grab the lock the first time, we're not in the waitqueue yet.
         :	                 */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb50:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb52:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb55:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb58:       e8 63 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                if (!mustwait)
    0.00 :	  68fb5d:       84 c0                   test   %al,%al
    0.00 :	  68fb5f:       74 79                   je     68fbda <LWLockAcquire+0xea>
         :	                 * other lock will see our queue entries when releasing since they
         :	                 * existed before we checked for the lock.
         :	                 */
         :
         :	                /* add to the queue */
         :	                LWLockQueueSelf(lock, mode);
    0.00 :	  68fb61:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb64:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb67:       e8 14 f5 ff ff          callq  68f080 <LWLockQueueSelf>
         :
         :	                /* we're now guaranteed to be woken up if necessary */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb6c:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb6e:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb71:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb74:       e8 47 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                /* ok, grabbed the lock the second time round, need to undo queueing */
         :	                if (!mustwait)
    0.00 :	  68fb79:       84 c0                   test   %al,%al
    0.00 :	  68fb7b:       75 06                   jne    68fb83 <LWLockAcquire+0x93>
    0.00 :	  68fb7d:       eb 30                   jmp    68fbaf <LWLockAcquire+0xbf>
    0.00 :	  68fb7f:       90                      nop
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
         :	                        if (!proc->lwWaiting)
         :	                                break;
         :	                        extraWaits++;
    0.00 :	  68fb80:       83 c3 01                add    $0x1,%ebx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb83:       31 f6                   xor    %esi,%esi
    0.00 :	  68fb85:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fb88:       e8 93 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                        if (!proc->lwWaiting)
    0.00 :	  68fb8d:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fb93:       75 eb                   jne    68fb80 <LWLockAcquire+0x90>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb95:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68fb99:       c6 00 01                movb   $0x1,(%rax)
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68fb9c:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68fba1:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  68fba5:       f0 0f c1 02             lock xadd %eax,(%rdx)
    0.00 :	  68fba9:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  68fbad:       eb a1                   jmp    68fb50 <LWLockAcquire+0x60>
         :	                        LOG_LWDEBUG("LWLockAcquire", lock, "acquired, undoing queue");
         :
         :	#ifdef LWLOCK_STATS
         :	                        lwstats->dequeue_self_count++;
         :	#endif
         :	                        if (!LWLockDequeueSelf(lock))
    0.00 :	  68fbaf:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fbb2:       e8 19 f6 ff ff          callq  68f1d0 <LWLockDequeueSelf>
    0.00 :	  68fbb7:       84 c0                   test   %al,%al
    0.00 :	  68fbb9:       75 1f                   jne    68fbda <LWLockAcquire+0xea>
    0.00 :	  68fbbb:       eb 06                   jmp    68fbc3 <LWLockAcquire+0xd3>
    0.00 :	  68fbbd:       0f 1f 00                nopl   (%rax)
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
         :	                                        if (!proc->lwWaiting)
         :	                                                break;
         :	                                        extraWaits++;
    0.00 :	  68fbc0:       83 c3 01                add    $0x1,%ebx
         :	                                 * reset at some inconvenient point later, and releaseOk
         :	                                 * wouldn't be managed correctly.
         :	                                 */
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fbc3:       31 f6                   xor    %esi,%esi
    0.00 :	  68fbc5:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fbc8:       e8 53 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                                        if (!proc->lwWaiting)
    0.00 :	  68fbcd:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fbd3:       75 eb                   jne    68fbc0 <LWLockAcquire+0xd0>
         :	                                /*
         :	                                 * Reset releaseOk - if somebody woke us they'll have set it
         :	                                 * to false. No need for a barrier here - we got the lock and
         :	                                 * will perform wakeup if necessary.
         :	                                 */
         :	                                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fbd5:       41 c6 46 01 01          movb   $0x1,0x1(%r14)
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbda:       8b 15 28 de 4e 00       mov    0x4ede28(%rip),%edx        # b7da08 <num_held_lwlocks>
    0.00 :	  68fbe0:       48 63 c2                movslq %edx,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbe3:       83 c2 01                add    $0x1,%edx
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbe6:       48 c1 e0 04             shl    $0x4,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fbea:       85 db                   test   %ebx,%ebx
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbec:       89 15 16 de 4e 00       mov    %edx,0x4ede16(%rip)        # b7da08 <num_held_lwlocks>
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbf2:       4c 89 b0 40 da b7 00    mov    %r14,0xb7da40(%rax)
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbf9:       44 89 b8 48 da b7 00    mov    %r15d,0xb7da48(%rax)
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc00:       7e 15                   jle    68fc17 <LWLockAcquire+0x127>
    0.00 :	  68fc02:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                PGSemaphoreUnlock(&proc->sem);
    0.00 :	  68fc08:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fc0b:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  68fc0e:       e8 7d 84 fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc13:       85 db                   test   %ebx,%ebx
    0.00 :	  68fc15:       7f f1                   jg     68fc08 <LWLockAcquire+0x118>
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
         :	        return LWLockAcquireCommon(l, mode, NULL, 0);
         :	}
    0.00 :	  68fc17:       0f b6 45 c7             movzbl -0x39(%rbp),%eax
    0.00 :	  68fc1b:       48 83 c4 18             add    $0x18,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:897
   50.00 :	  68fc1f:       5b                      pop    %rbx
    0.00 :	  68fc20:       41 5c                   pop    %r12
    0.00 :	  68fc22:       41 5d                   pop    %r13
    0.00 :	  68fc24:       41 5e                   pop    %r14
    0.00 :	  68fc26:       41 5f                   pop    %r15
    0.00 :	  68fc28:       c9                      leaveq 
   50.00 :	  68fc29:       c3                      retq   
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
         :	                elog(ERROR, "too many LWLocks taken");
    0.00 :	  68fc2a:       ba 70 d1 8a 00          mov    $0x8ad170,%edx
    0.00 :	  68fc2f:       be b0 03 00 00          mov    $0x3b0,%esi
    0.00 :	  68fc34:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68fc39:       e8 e2 b7 0e 00          callq  77b420 <elog_start>
    0.00 :	  68fc3e:       be 8e d0 8a 00          mov    $0x8ad08e,%esi
    0.00 :	  68fc43:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68fc48:       31 c0                   xor    %eax,%eax
    0.00 :	  68fc4a:       e8 e1 b5 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68fc4f:       e8 7c 98 dd ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6af0 <date_lt>:
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
   50.00 :	  6c6af0:       48 8b 47 28             mov    0x28(%rdi),%rax
   50.00 :	  6c6af4:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6c6af7:       55                      push   %rbp
    0.00 :	  6c6af8:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 < dateVal2);
         :	}
    0.00 :	  6c6afb:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6c6afc:       0f 9c c0                setl   %al
    0.00 :	  6c6aff:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:587
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:588
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077f740 <fmgr_info_copy>:
         :	 * instead, meaning that subsidiary info will have to be recomputed.
         :	 */
         :	void
         :	fmgr_info_copy(FmgrInfo *dstinfo, FmgrInfo *srcinfo,
         :	                           MemoryContext destcxt)
         :	{
    0.00 :	  77f740:       55                      push   %rbp
    0.00 :	  77f741:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  77f744:       41 54                   push   %r12
   50.00 :	  77f746:       49 89 fc                mov    %rdi,%r12
    0.00 :	  77f749:       53                      push   %rbx
         :	        memcpy(dstinfo, srcinfo, sizeof(FmgrInfo));
    0.00 :	  77f74a:       48 8b 06                mov    (%rsi),%rax
         :	 * instead, meaning that subsidiary info will have to be recomputed.
         :	 */
         :	void
         :	fmgr_info_copy(FmgrInfo *dstinfo, FmgrInfo *srcinfo,
         :	                           MemoryContext destcxt)
         :	{
    0.00 :	  77f74d:       48 89 f3                mov    %rsi,%rbx
         :	        memcpy(dstinfo, srcinfo, sizeof(FmgrInfo));
    0.00 :	  77f750:       48 89 07                mov    %rax,(%rdi)
    0.00 :	  77f753:       48 8b 46 08             mov    0x8(%rsi),%rax
         :	        dstinfo->fn_mcxt = destcxt;
         :	        if (dstinfo->fn_addr == fmgr_oldstyle)
    0.00 :	  77f757:       48 81 3f 30 ed 77 00    cmpq   $0x77ed30,(%rdi)
         :	 */
         :	void
         :	fmgr_info_copy(FmgrInfo *dstinfo, FmgrInfo *srcinfo,
         :	                           MemoryContext destcxt)
         :	{
         :	        memcpy(dstinfo, srcinfo, sizeof(FmgrInfo));
    0.00 :	  77f75e:       48 89 47 08             mov    %rax,0x8(%rdi)
    0.00 :	  77f762:       48 8b 46 10             mov    0x10(%rsi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:588
   50.00 :	  77f766:       48 89 47 10             mov    %rax,0x10(%rdi)
    0.00 :	  77f76a:       48 8b 46 18             mov    0x18(%rsi),%rax
    0.00 :	  77f76e:       48 89 47 18             mov    %rax,0x18(%rdi)
    0.00 :	  77f772:       48 8b 46 20             mov    0x20(%rsi),%rax
    0.00 :	  77f776:       48 89 47 20             mov    %rax,0x20(%rdi)
    0.00 :	  77f77a:       48 8b 46 28             mov    0x28(%rsi),%rax
         :	        dstinfo->fn_mcxt = destcxt;
    0.00 :	  77f77e:       48 89 57 20             mov    %rdx,0x20(%rdi)
         :	 */
         :	void
         :	fmgr_info_copy(FmgrInfo *dstinfo, FmgrInfo *srcinfo,
         :	                           MemoryContext destcxt)
         :	{
         :	        memcpy(dstinfo, srcinfo, sizeof(FmgrInfo));
    0.00 :	  77f782:       48 89 47 28             mov    %rax,0x28(%rdi)
         :	        dstinfo->fn_mcxt = destcxt;
         :	        if (dstinfo->fn_addr == fmgr_oldstyle)
    0.00 :	  77f786:       74 10                   je     77f798 <fmgr_info_copy+0x58>
         :	                        MemoryContextAlloc(destcxt, sizeof(Oldstyle_fnextra));
         :	                memcpy(fnextra, srcinfo->fn_extra, sizeof(Oldstyle_fnextra));
         :	                dstinfo->fn_extra = (void *) fnextra;
         :	        }
         :	        else
         :	                dstinfo->fn_extra = NULL;
    0.00 :	  77f788:       48 c7 47 18 00 00 00    movq   $0x0,0x18(%rdi)
    0.00 :	  77f78f:       00 
         :	}
    0.00 :	  77f790:       5b                      pop    %rbx
    0.00 :	  77f791:       41 5c                   pop    %r12
    0.00 :	  77f793:       c9                      leaveq 
    0.00 :	  77f794:       c3                      retq   
    0.00 :	  77f795:       0f 1f 00                nopl   (%rax)
         :	        if (dstinfo->fn_addr == fmgr_oldstyle)
         :	        {
         :	                /* For oldstyle functions we must copy fn_extra */
         :	                Oldstyle_fnextra *fnextra;
         :
         :	                fnextra = (Oldstyle_fnextra *)
    0.00 :	  77f798:       48 89 d7                mov    %rdx,%rdi
    0.00 :	  77f79b:       be 70 00 00 00          mov    $0x70,%esi
    0.00 :	  77f7a0:       e8 eb 96 01 00          callq  798e90 <MemoryContextAlloc>
         :	                        MemoryContextAlloc(destcxt, sizeof(Oldstyle_fnextra));
         :	                memcpy(fnextra, srcinfo->fn_extra, sizeof(Oldstyle_fnextra));
    0.00 :	  77f7a5:       48 8b 4b 18             mov    0x18(%rbx),%rcx
    0.00 :	  77f7a9:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	  77f7ac:       48 89 10                mov    %rdx,(%rax)
    0.00 :	  77f7af:       48 8b 51 08             mov    0x8(%rcx),%rdx
    0.00 :	  77f7b3:       48 89 50 08             mov    %rdx,0x8(%rax)
    0.00 :	  77f7b7:       48 8b 51 10             mov    0x10(%rcx),%rdx
    0.00 :	  77f7bb:       48 89 50 10             mov    %rdx,0x10(%rax)
    0.00 :	  77f7bf:       48 8b 51 18             mov    0x18(%rcx),%rdx
    0.00 :	  77f7c3:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	  77f7c7:       48 8b 51 20             mov    0x20(%rcx),%rdx
    0.00 :	  77f7cb:       48 89 50 20             mov    %rdx,0x20(%rax)
    0.00 :	  77f7cf:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  77f7d3:       48 89 50 28             mov    %rdx,0x28(%rax)
    0.00 :	  77f7d7:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  77f7db:       48 89 50 30             mov    %rdx,0x30(%rax)
    0.00 :	  77f7df:       48 8b 51 38             mov    0x38(%rcx),%rdx
    0.00 :	  77f7e3:       48 89 50 38             mov    %rdx,0x38(%rax)
    0.00 :	  77f7e7:       48 8b 51 40             mov    0x40(%rcx),%rdx
    0.00 :	  77f7eb:       48 89 50 40             mov    %rdx,0x40(%rax)
    0.00 :	  77f7ef:       48 8b 51 48             mov    0x48(%rcx),%rdx
    0.00 :	  77f7f3:       48 89 50 48             mov    %rdx,0x48(%rax)
    0.00 :	  77f7f7:       48 8b 51 50             mov    0x50(%rcx),%rdx
    0.00 :	  77f7fb:       48 89 50 50             mov    %rdx,0x50(%rax)
    0.00 :	  77f7ff:       48 8b 51 58             mov    0x58(%rcx),%rdx
    0.00 :	  77f803:       48 89 50 58             mov    %rdx,0x58(%rax)
    0.00 :	  77f807:       48 8b 51 60             mov    0x60(%rcx),%rdx
    0.00 :	  77f80b:       48 89 50 60             mov    %rdx,0x60(%rax)
    0.00 :	  77f80f:       48 8b 51 68             mov    0x68(%rcx),%rdx
    0.00 :	  77f813:       48 89 50 68             mov    %rdx,0x68(%rax)
         :	                dstinfo->fn_extra = (void *) fnextra;
    0.00 :	  77f817:       49 89 44 24 18          mov    %rax,0x18(%r12)
    0.00 :	  77f81c:       e9 6f ff ff ff          jmpq   77f790 <fmgr_info_copy+0x50>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a1a0 <ResourceOwnerRememberBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a1a0:       55                      push   %rbp
         :	        if (owner != NULL)
    0.00 :	  79a1a1:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a1a4:       48 89 e5                mov    %rsp,%rbp
         :	        if (owner != NULL)
    0.00 :	  79a1a7:       74 0f                   je     79a1b8 <ResourceOwnerRememberBuffer+0x18>
         :	        {
         :	                Assert(owner->nbuffers < owner->maxbuffers);
         :	                owner->buffers[owner->nbuffers] = buffer;
    0.00 :	  79a1a9:       48 63 57 20             movslq 0x20(%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
   50.00 :	  79a1ad:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  79a1b1:       89 34 90                mov    %esi,(%rax,%rdx,4)
         :	                owner->nbuffers++;
    0.00 :	  79a1b4:       83 47 20 01             addl   $0x1,0x20(%rdi)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
   50.00 :	  79a1b8:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079ae70 <ResourceOwnerEnlargeBuffers>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae70:       55                      push   %rbp
    0.00 :	  79ae71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  79ae74:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   50.00 :	  79ae78:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
   50.00 :	  79ae7c:       48 83 ec 10             sub    $0x10,%rsp
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae80:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae83:       49 89 fc                mov    %rdi,%r12
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae86:       74 2a                   je     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
    0.00 :	  79ae88:       8b 47 30                mov    0x30(%rdi),%eax
    0.00 :	  79ae8b:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  79ae8e:       7c 22                   jl     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
         :	                owner->nbuffers < owner->maxbuffers)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
    0.00 :	  79ae90:       48 8b 7f 28             mov    0x28(%rdi),%rdi
    0.00 :	  79ae94:       48 85 ff                test   %rdi,%rdi
    0.00 :	  79ae97:       74 27                   je     79aec0 <ResourceOwnerEnlargeBuffers+0x50>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
    0.00 :	  79ae99:       8d 1c 00                lea    (%rax,%rax,1),%ebx
         :	                owner->buffers = (Buffer *)
    0.00 :	  79ae9c:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  79ae9f:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  79aea3:       e8 48 de ff ff          callq  798cf0 <repalloc>
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aea8:       41 89 5c 24 30          mov    %ebx,0x30(%r12)
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aead:       49 89 44 24 28          mov    %rax,0x28(%r12)
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	}
    0.00 :	  79aeb2:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  79aeb6:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  79aebb:       c9                      leaveq 
    0.00 :	  79aebc:       c3                      retq   
    0.00 :	  79aebd:       0f 1f 00                nopl   (%rax)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aec0:       48 8b 3d a1 f9 41 00    mov    0x41f9a1(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  79aec7:       be 40 00 00 00          mov    $0x40,%esi
    0.00 :	  79aecc:       e8 bf df ff ff          callq  798e90 <MemoryContextAlloc>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aed1:       41 c7 44 24 30 10 00    movl   $0x10,0x30(%r12)
    0.00 :	  79aed8:       00 00 
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aeda:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	  79aedf:       eb d1                   jmp    79aeb2 <ResourceOwnerEnlargeBuffers+0x42>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000031dc0 <__isinf>:
   50.00 :	   31dc0:       f2 0f 11 44 24 f8       movsd  %xmm0,-0x8(%rsp)
    0.00 :	   31dc6:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   31dcb:       48 89 c1                mov    %rax,%rcx
    0.00 :	   31dce:       48 c1 e9 20             shr    $0x20,%rcx
    0.00 :	   31dd2:       89 ca                   mov    %ecx,%edx
    0.00 :	   31dd4:       c1 f9 1e                sar    $0x1e,%ecx
    0.00 :	   31dd7:       81 e2 ff ff ff 7f       and    $0x7fffffff,%edx
    0.00 :	   31ddd:       81 f2 00 00 f0 7f       xor    $0x7ff00000,%edx
    0.00 :	   31de3:       09 c2                   or     %eax,%edx
    0.00 :	   31de5:       89 d0                   mov    %edx,%eax
    0.00 :	   31de7:       f7 d8                   neg    %eax
    0.00 :	   31de9:       09 d0                   or     %edx,%eax
    0.00 :	   31deb:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	   31dee:       f7 d0                   not    %eax
   50.00 :	   31df0:       21 c8                   and    %ecx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000006a40 <tcp_in_window>:
    0.00 :	    6a40:       41 57                   push   %r15
    0.00 :	    6a72:       49 89 fa 41             mov    %ecx,0x2c(%rsp)
    0.00 :	    6a76:       56 41 55 41 54 55 48    mov    0xe0(%rsp),%rcx
    0.00 :	    6a7d:       89 
    0.00 :	    6a7e:       f5 53 48 81             mov    %al,0x2b(%rsp)
    0.00 :	    6a82:       ec a8 00 00 00 89 54    mov    0xe8(%rdi),%rdx
    0.00 :	    6a89:       24 40 0f                sbb    %rax,%rax
    0.00 :	    6a8c:       b6 84 24                and    $0x14,%eax
    0.00 :	    6a8f:       e8 00 00 00             lea    (%rsi,%rax,1),%r13
    0.00 :	    6a93:       83 7c 24 40 01 89 4c    mov    0xe0(%rsp),%rax
    0.00 :	    6a9a:       24 
    0.00 :	    6a9b:       3c 4c 89 44 24          mov    %rdx,0x48(%rsp)
    0.00 :	    6aa0:       30 44 89                mov    0x4(%rcx),%ecx
    0.00 :	    6aa3:       4c 24                   bswap  %ecx
    0.00 :	    6aa5:       2c 48 8b                mov    %rax,%rdx
    0.00 :	    6aa8:       8c 24 e0 00             mov    %ecx,0x50(%rsp)
    0.00 :	    6aac:       00 00 88 44             mov    0x8(%rax),%r12d
    0.00 :	    6ab0:       24 2b 48 8b             movzwl 0xe(%rax),%eax
    0.00 :	    6ab4:       97 e8 00                bswap  %r12d
    0.00 :	    6ab7:       00 00 48 19             rol    $0x8,%ax
    0.00 :	    6abb:       c0 83 e0                movzwl %ax,%eax
    0.00 :	    6abe:       14 4c 8d 2c             mov    %eax,0x58(%rsp)
    0.00 :	    6ac2:       06 48 8b 84             mov    0x68(%r8),%ecx
    0.00 :	    6ac6:       24 e0 00 00             mov    %ecx,0x44(%rsp)
    0.00 :	    6aca:       00 48 89 54 24          movzbl 0xc(%rdx),%r14d
    0.00 :	    6acf:       48 8b 49 04             movzbl 0xd(%rdx),%eax
    0.00 :	    6ad3:       0f c9 48 89             shr    $0x4,%r14b
    0.00 :	    6ad7:       c2 89 4c 24             mov    %al,0x60(%rsp)
    0.00 :	    6adb:       50 44 8b 60 08          testb  $0x2,0x11(%r13)
    0.00 :	    6ae0:       0f b7                   je     6af5 <nf_conntrack_hash_insert+0x69e5>
    0.00 :	    6ae2:       40 0e 41 0f             movzbl %r14b,%eax
    0.00 :	    6ae6:       cc 66 c1 c0 08 0f b7    lea    -0x14(,%rax,4),%ebx
    0.00 :	    6aed:       c0 89                   test   %ebx,%ebx
    0.00 :	    6aef:       44 24 58 41 8b 48       jne    6d60 <nf_conntrack_hash_insert+0x6c50>
    0.00 :	    6af5:       68 89 4c                mov    %r12d,%ebx
    0.00 :	    6af8:       24 44 44 0f b6          cmpb   $0x2,0x2b(%rsp)
    0.00 :	    6afd:       72 0c 0f b6 42 0d       je     6e80 <nf_conntrack_hash_insert+0x6d70>
    0.00 :	    6b03:       41 c0 ee 04 88 44 24    movw   $0x0,0x5e(%rsp)
    0.00 :	    6b0a:       60 41                   xor    %eax,%eax
    0.00 :	    6b0c:       f6 45 11                mov    %ebx,%r15d
    0.00 :	    6b0f:       02 74 13                sub    %eax,%r12d
    0.00 :	    6b12:       41 0f b6                sub    %eax,%r15d
    0.00 :	    6b15:       c6 8d 1c 85 ec ff ff    cmpb   $0x0,0x0(%rip)        # 6b1c <nf_conntrack_hash_insert+0x6a0c>
    0.00 :	    6b1c:       ff 85 db 0f 85          mov    %r12d,0x54(%rsp)
    0.00 :	    6b21:       6b 02 00 00 44 89       jne    73ce <nf_conntrack_hash_insert+0x72be>
    0.00 :	    6b27:       e3 80 7c 24 2b 02 0f    cmpb   $0x0,0x0(%rip)        # 6b2e <nf_conntrack_hash_insert+0x6a1e>
    0.00 :	    6b2e:       84 7d 03 00 00 66       jne    72a0 <nf_conntrack_hash_insert+0x7190>
    0.00 :	    6b34:       c7 44 24 5e 00          movzbl 0x60(%rsp),%eax
    0.00 :	    6b39:       00 31 c0 41 89          movzbl 0x60(%rsp),%edx
    0.00 :	    6b3e:       df 41                   shr    %al
    0.00 :	    6b40:       29 c4 41                and    $0x1,%edx
    0.00 :	    6b43:       29 c7 80                and    $0x1,%eax
    0.00 :	    6b46:       3d 00                   add    %edx,%eax
    0.00 :	    6b48:       00 00 00 00             add    0x44(%rsp),%eax
    0.00 :	    6b4c:       44 89 64 24             movzbl %r14b,%edx
    0.00 :	    6b50:       54 0f 85                shl    $0x2,%edx
    0.00 :	    6b53:       a7 08 00 00 80          mov    0x50(%rsp),%r14d
    0.00 :	    6b58:       3d 00                   sub    %edx,%eax
    0.00 :	    6b5a:       00 00 00 00             sub    0x2c(%rsp),%eax
    0.00 :	    6b5e:       0f 85 6c                add    %eax,%r14d
    0.00 :	    6b61:       07 00 00 0f b6 44 24    cmpb   $0x0,0x0(%rip)        # 6b68 <nf_conntrack_hash_insert+0x6a58>
    0.00 :	    6b68:       60 0f b6 54 24 60       jne    7264 <nf_conntrack_hash_insert+0x7154>
    0.00 :	    6b6e:       d0 e8 83 e2 01 83 e0    cmpb   $0x0,0x0(%rip)        # 6b75 <nf_conntrack_hash_insert+0x6a65>
    0.00 :	    6b75:       01 01 d0 03 44          mov    0x40(%rsp),%r12d
    0.00 :	    6b7a:       24 44 41 0f b6 d6       jne    72ba <nf_conntrack_hash_insert+0x71aa>
   50.00 :	    6b80:       c1 e2 02 44             lea    (%r12,%r12,4),%rax
    0.00 :	    6b84:       8b 74 24 50 29          lea    0x0(%rbp,%rax,4),%rbx
    0.00 :	    6b89:       d0 2b 44                mov    0x8(%rbx),%esi
    0.00 :	    6b8c:       24 2c                   test   %esi,%esi
    0.00 :	    6b8e:       41 01 c6 80 3d 00       jne    6cf0 <nf_conntrack_hash_insert+0x6be0>
    0.00 :	    6b94:       00 00 00 00 0f 85 f6    mov    0xe0(%rsp),%rcx
    0.00 :	    6b9b:       06 
    0.00 :	    6b9c:       00 00 80 3d             testb  $0x2,0xd(%rcx)
    0.00 :	    6ba0:       00 00 00 00 00 44       je     6de0 <nf_conntrack_hash_insert+0x6cd0>
    0.00 :	    6ba6:       8b 64 24 40             mov    %r14d,0x4(%rbx)
    0.00 :	    6baa:       0f 85 3a 07 00          mov    %r14d,0x0(%rbp,%rax,4)
    0.00 :	    6baf:       00 4b 8d 04 a4          mov    $0x1,%eax
    0.00 :	    6bb4:       48 8d 5c 85             mov    0x58(%rsp),%ecx
    0.00 :	    6bb8:       00 8b                   test   %ecx,%ecx
    0.00 :	    6bba:       73 08 85 f6 0f          cmovne 0x58(%rsp),%eax
    0.00 :	    6bbf:       85 5c 01                mov    %rbx,%rcx
    0.00 :	    6bc2:       00 00 48                mov    %eax,0x8(%rbx)
    0.00 :	    6bc5:       8b 8c 24 e0 00 00 00    mov    0xe0(%rsp),%rdx
    0.00 :	    6bcc:       f6 
    0.00 :	    6bcd:       41 0d 02 0f             mov    0x2c(%rsp),%esi
    0.00 :	    6bd1:       84 3a 02 00 00          mov    0x30(%rsp),%rdi
    0.00 :	    6bd6:       44 89 73 04 44          callq  68c0 <nf_conntrack_hash_insert+0x67b0>
    0.00 :	    6bdb:       89 74 85 00             testb  $0x1,0x11(%rbx)
    0.00 :	    6bdf:       b8 01 00 00 00 8b       jne    7080 <nf_conntrack_hash_insert+0x6f70>
    0.00 :	    6be5:       4c 24 58 85             lea    (%r12,%r12,4),%rax
    0.00 :	    6be9:       c9 0f 45 44 24          movb   $0x0,0x10(%r13)
    0.00 :	    6bee:       58 48 89 d9 89          movb   $0x0,0x10(%rbp,%rax,4)
    0.00 :	    6bf3:       43 08 48 8b 94 24 e0    mov    0xe0(%rsp),%rax
    0.00 :	    6bfa:       00 
    0.00 :	    6bfb:       00 00 8b 74 24          mov    $0x1,%ebx
    0.00 :	    6c00:       2c 48 8b 7c             movzbl 0xd(%rax),%edx
    0.00 :	    6c04:       24 30 e8                test   $0x10,%dl
    0.00 :	    6c07:       e5 fc ff ff f6 43       je     6cda <nf_conntrack_hash_insert+0x6bca>
    0.00 :	    6c0d:       11 01 0f 85 9b 04 00    mov    0xe0(%rsp),%rcx
    0.00 :	    6c14:       00 
    0.00 :	    6c15:       4b 8d 04                mov    0xc(%rcx),%eax
    0.00 :	    6c18:       a4 41 c6 45 10          and    $0x1400,%eax
    0.00 :	    6c1d:       00 c6 44 85 10          cmp    $0x1400,%eax
    0.00 :	    6c22:       00 48 8b 84 24 e0       jne    6d26 <nf_conntrack_hash_insert+0x6c16>
    0.00 :	    6c28:       00 00 00 bb 01          mov    0x54(%rsp),%r8d
    0.00 :	    6c2d:       00 00 00                test   %r8d,%r8d
    0.00 :	    6c30:       0f b6 50 0d f6 c2       je     6d1d <nf_conntrack_hash_insert+0x6c0d>
    0.00 :	    6c36:       10 0f 84                and    $0x4,%edx
    0.00 :	    6c39:       cd 00 00 00 48 8b       jne    6d2f <nf_conntrack_hash_insert+0x6c1f>
    0.00 :	    6c3f:       8c                      nop
    0.00 :	    6c40:       24 e0 00 00 00 8b 41    cmpb   $0x0,0x0(%rip)        # 6c47 <nf_conntrack_hash_insert+0x6b37>
    0.00 :	    6c47:       0c 25 00 14 00 00       jne    7325 <nf_conntrack_hash_insert+0x7215>
    0.00 :	    6c4d:       3d 00 14 00 00 0f 85    cmpb   $0x0,0x0(%rip)        # 6c54 <nf_conntrack_hash_insert+0x6b44>
    0.00 :	    6c54:       fe 00 00 00 44 8b       jne    733f <nf_conntrack_hash_insert+0x722f>
    0.00 :	    6c5a:       44 24 54 45 85 c0 0f    cmpb   $0x0,0x0(%rip)        # 6c61 <nf_conntrack_hash_insert+0x6b51>
    0.00 :	    6c61:       84 e7 00 00 00 83       jne    737b <nf_conntrack_hash_insert+0x726b>
    0.00 :	    6c67:       e2 04 0f 85 f0 00 00    cmpb   $0x0,0x0(%rip)        # 6c6e <nf_conntrack_hash_insert+0x6b5e>
    0.00 :	    6c6e:       00 90 80 3d 00 00       jne    73e8 <nf_conntrack_hash_insert+0x72d8>
    0.00 :	    6c74:       00 00 00 0f             lea    (%r12,%r12,4),%rdx
    0.00 :	    6c78:       85 d8 06 00 00          mov    $0xffffffff,%eax
    0.00 :	    6c7d:       80 3d 00 00 00          lea    0x0(%rbp,%rdx,4),%rcx
    0.00 :	    6c82:       00 00 0f                sub    0x4(%rcx),%eax
    0.00 :	    6c85:       85 e5 06 00             add    0x50(%rsp),%eax
    0.00 :	    6c89:       00 80 3d 00 00 00       js     6eb0 <nf_conntrack_hash_insert+0x6da0>
    0.00 :	    6c8f:       00 00 0f 85             lea    (%r12,%r12,4),%rax
    0.00 :	    6c93:       14 07 00 00 80          testb  $0x8,0x11(%rbp,%rax,4)
    0.00 :	    6c98:       3d 00 00 00 00 00       jne    6e20 <nf_conntrack_hash_insert+0x6d10>
    0.00 :	    6c9e:       0f 85 74 07 00 00       mov    0x0(%rip),%ecx        # 6ca4 <nf_conntrack_hash_insert+0x6b94>
    0.00 :	    6ca4:       4b 8d                   test   %ecx,%ecx
    0.00 :	    6ca6:       14 a4 b8 ff ff ff       jne    6e20 <nf_conntrack_hash_insert+0x6d10>
    0.00 :	    6cac:       ff 48 8d 4c 95          mov    0x48(%rsp),%rcx
    0.00 :	    6cb1:       00 2b 41 04 03 44       mov    0x75c(%rcx),%eax
    0.00 :	    6cb7:       24 50 0f                cmp    $0x6,%eax
    0.00 :	    6cba:       88 21 02 00 00 4b       je     7098 <nf_conntrack_hash_insert+0x6f88>
    0.00 :	    6cc0:       8d 04 a4 f6 44          cmp    $0xff,%eax
    0.00 :	    6cc5:       85 11 08 0f 85 82       je     7098 <nf_conntrack_hash_insert+0x6f88>
    0.00 :	    6ccb:       01 00                   xor    %ebx,%ebx
    0.00 :	    6ccd:       00 8b 0d 00 00 00 00    cmpb   $0x0,0x0(%rip)        # 6cd4 <nf_conntrack_hash_insert+0x6bc4>
    0.00 :	    6cd4:       85 c9 0f 85 74 01       jne    6e32 <nf_conntrack_hash_insert+0x6d22>
    0.00 :	    6cda:       00 00 48 8b 4c 24 48    add    $0xa8,%rsp
    0.00 :	    6ce1:       8b 81                   mov    %ebx,%eax
    0.00 :	    6ce3:       5c                      pop    %rbx
    0.00 :	    6ce4:       07                      pop    %rbp
    0.00 :	    6ce5:       00 00                   pop    %r12
    0.00 :	    6ce7:       83 f8                   pop    %r13
    0.00 :	    6ce9:       06 0f                   pop    %r14
    0.00 :	    6ceb:       84 d8                   pop    %r15
    0.00 :	    6ced:       03                      retq   
    0.00 :	    6cee:       00 00                   xchg   %ax,%ax
    0.00 :	    6cf0:       3d ff 00 00             movzbl 0x28(%rbp),%eax
    0.00 :	    6cf4:       00 0f                   cmp    $0x1,%al
    0.00 :	    6cf6:       84 cd 03 00 00 31       je     7010 <nf_conntrack_hash_insert+0x6f00>
    0.00 :	    6cfc:       db 80                   cmp    $0x2,%al
    0.00 :	    6cfe:       3d 00 00 00 00 00       je     7118 <nf_conntrack_hash_insert+0x7008>
   50.00 :	    6d04:       0f 85 58 01             nopl   0x0(%rax)
    0.00 :	    6d08:       00 00 48 81 c4 a8 00    mov    0xe0(%rsp),%rcx
    0.00 :	    6d0f:       00 
    0.00 :	    6d10:       00 89 d8 5b             movzbl 0xd(%rcx),%edx
    0.00 :	    6d14:       5d 41 5c                test   $0x10,%dl
    0.00 :	    6d17:       41 5d 41 5e 41 5f       jne    6c0d <nf_conntrack_hash_insert+0x6afd>
    0.00 :	    6d1d:       c3 66 90 0f             mov    0x0(%r13),%r15d
    0.00 :	    6d21:       b6 45 28 3c 01          mov    %r15d,0x54(%rsp)
    0.00 :	    6d26:       0f 84 14                and    $0x4,%edx
    0.00 :	    6d29:       03 00 00 3c 02 0f       je     6c40 <nf_conntrack_hash_insert+0x6b30>
    0.00 :	    6d2f:       84 14 04 00             mov    0x50(%rsp),%edi
    0.00 :	    6d33:       00 0f                   test   %edi,%edi
    0.00 :	    6d35:       1f 40 00 48 8b 8c       jne    6c40 <nf_conntrack_hash_insert+0x6b30>
    0.00 :	    6d3b:       24 e0 00 00             cmpb   $0x1,0x28(%rbp)
    0.00 :	    6d3f:       00 0f b6 51 0d f6       jne    6c40 <nf_conntrack_hash_insert+0x6b30>
    0.00 :	    6d45:       c2 10 0f 85             lea    (%r12,%r12,4),%rax
    0.00 :	    6d49:       f0 fe ff ff 45          mov    0x0(%rbp,%rax,4),%r14d
    0.00 :	    6d4e:       8b 7d 00 44 89          mov    %r14d,0x50(%rsp)
    0.00 :	    6d53:       7c 24 54 83 e2          jmpq   6c40 <nf_conntrack_hash_insert+0x6b30>
    0.00 :	    6d58:       04 0f 84 11 ff ff ff    nopl   0x0(%rax,%rax,1)
    0.00 :	    6d5f:       8b 
    0.00 :	    6d60:       7c 24                   mov    %ecx,%eax
    0.00 :	    6d62:       50 85 ff 0f             sub    0x6c(%r8),%eax
    0.00 :	    6d66:       85 05 ff                mov    %r9d,%esi
    0.00 :	    6d69:       ff ff 80                add    $0x14,%esi
    0.00 :	    6d6c:       7d 28                   sub    %esi,%eax
    0.00 :	    6d6e:       01 0f                   cmp    %eax,%ebx
    0.00 :	    6d70:       85 fb fe ff ff 4b       jg     7130 <nf_conntrack_hash_insert+0x7020>
    0.00 :	    6d76:       8d 04 a4                movslq %esi,%rax
    0.00 :	    6d79:       44 8b 74 85 00 44 89    add    0xe0(%r8),%rax
    0.00 :	    6d80:       74 24 50                test   %rax,%rax
    0.00 :	    6d83:       e9 e8 fe                mov    %rax,%rdx
    0.00 :	    6d86:       ff ff 0f 1f 84 00       je     7160 <nf_conntrack_hash_insert+0x7050>
    0.00 :	    6d8c:       00 00 00                cmp    $0x30,%ebx
    0.00 :	    6d8f:       00 89 c8 41 2b 40       je     7100 <nf_conntrack_hash_insert+0x6ff0>
    0.00 :	    6d95:       6c 44                   test   %ebx,%ebx
    0.00 :	    6d97:       89 ce 83 c6 14 29       jle    6af5 <nf_conntrack_hash_insert+0x69e5>
    0.00 :	    6d9d:       f0 39 c3                movzbl (%rdx),%eax
    0.00 :	    6da0:       0f 8f ba 03             add    $0x1,%rdx
    0.00 :	    6da4:       00 00                   test   %al,%al
    0.00 :	    6da6:       48 63 c6 49 03 80       je     6af5 <nf_conntrack_hash_insert+0x69e5>
    0.00 :	    6dac:       e0 00                   cmp    $0x1,%al
    0.00 :	    6dae:       00 00 48 85 c0 48       je     7000 <nf_conntrack_hash_insert+0x6ef0>
    0.00 :	    6db4:       89 c2 0f                movzbl (%rdx),%ecx
    0.00 :	    6db7:       84 d4 03                cmp    $0x1,%ecx
    0.00 :	    6dba:       00 00 83 fb 30 0f       jle    6af5 <nf_conntrack_hash_insert+0x69e5>
    0.00 :	    6dc0:       84 6b 03 00             add    $0x1,%rdx
    0.00 :	    6dc4:       00 85                   cmp    %ecx,%ebx
    0.00 :	    6dc6:       db 0f                   jl     6d95 <nf_conntrack_hash_insert+0x6c85>
    0.00 :	    6dc8:       8e 58                   cmp    $0x5,%al
    0.00 :	    6dca:       fd ff ff 0f b6 02       je     71d0 <nf_conntrack_hash_insert+0x70c0>
    0.00 :	    6dd0:       48 83 c2                movslq %ecx,%rax
    0.00 :	    6dd3:       01 84                   sub    %ecx,%ebx
    0.00 :	    6dd5:       c0 0f 84 49 fd          lea    -0x2(%rdx,%rax,1),%rdx
    0.00 :	    6dda:       ff ff                   jmp    6d95 <nf_conntrack_hash_insert+0x6c85>
    0.00 :	    6ddc:       3c 01 0f 84             nopl   0x0(%rax)
    0.00 :	    6de0:       4c 02 00 00 0f          mov    %r14d,0x0(%rbp,%rax,4)
    0.00 :	    6de5:       b6 0a 83 f9             movzbl 0x10(%rbx),%ecx
    0.00 :	    6de9:       01 0f 8e 35 fd          mov    $0x1,%eax
    0.00 :	    6dee:       ff ff 48 83             shll   %cl,0x58(%rsp)
    0.00 :	    6df2:       c2 01 39 cb             mov    0x58(%rsp),%edx
    0.00 :	    6df6:       7c cd                   test   %edx,%edx
    0.00 :	    6df8:       3c 05 0f 84 00          cmovne 0x58(%rsp),%eax
    0.00 :	    6dfd:       04 00 00                mov    %eax,0x8(%rbx)
    0.00 :	    6e00:       48 63 c1                add    %r14d,%eax
    0.00 :	    6e03:       29 cb 48                mov    %eax,0x4(%rbx)
    0.00 :	    6e06:       8d 54 02 fe             mov    0x8(%r13),%r11d
    0.00 :	    6e0a:       eb b9 0f                test   %r11d,%r11d
    0.00 :	    6e0d:       1f 40 00 44 89 74       jne    6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    6e13:       85 00 0f b6             mov    %r15d,0x4(%r13)
    0.00 :	    6e17:       4b 10 b8 01             mov    %r15d,0x0(%r13)
    0.00 :	    6e1b:       00 00 00 d3 64          jmpq   6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    6e20:       24 58 8b 54 24          mov    $0x1,%ebx
    0.00 :	    6e25:       58 85 d2 0f 45 44 24    cmpb   $0x0,0x0(%rip)        # 6e2c <nf_conntrack_hash_insert+0x6d1c>
    0.00 :	    6e2c:       58 89 43 08 44 01       je     6cda <nf_conntrack_hash_insert+0x6bca>
    0.00 :	    6e32:       f0 89 43 04             lea    (%r12,%r12,4),%rax
    0.00 :	    6e36:       45 8b 5d                movzbl %bl,%edx
    0.00 :	    6e39:       08 45 85 db 0f 85 f5    mov    $0x0,%rdi
    0.00 :	    6e40:       fe ff ff 45 89          lea    0x0(%rbp,%rax,4),%rsi
    0.00 :	    6e45:       7d 04 45 89             mov    0x0(%rbp,%rax,4),%ecx
    0.00 :	    6e49:       7d 00 e9 e8             mov    0x8(%r13),%eax
    0.00 :	    6e4d:       fe ff ff bb             mov    %eax,0x10(%rsp)
    0.00 :	    6e51:       01 00 00 00             mov    0x4(%r13),%eax
    0.00 :	    6e55:       80 3d 00 00             mov    %eax,0x8(%rsp)
    0.00 :	    6e59:       00 00 00 0f             mov    0x0(%r13),%eax
    0.00 :	    6e5d:       84 a8 fe                mov    %eax,(%rsp)
    0.00 :	    6e60:       ff ff 4b 8d             mov    0x8(%rsi),%r9d
    0.00 :	    6e64:       04 a4                   xor    %eax,%eax
    0.00 :	    6e66:       0f b6 d3 48             mov    0x4(%rsi),%r8d
    0.00 :	    6e6a:       c7 c7 00 00 00 00 48    mov    $0x0,%rsi
    0.00 :	    6e71:       8d 74 85 00 8b          callq  6e76 <nf_conntrack_hash_insert+0x6d66>
    0.00 :	    6e76:       4c 85 00 41 8b          jmpq   6cda <nf_conntrack_hash_insert+0x6bca>
    0.00 :	    6e7b:       45 08 89 44 24          nopl   0x0(%rax,%rax,1)
    0.00 :	    6e80:       10 41 8b 45 04 89 44    mov    0x0(%rip),%rax        # 6e87 <nf_conntrack_hash_insert+0x6d77>
    0.00 :	    6e87:       24 08 41                test   %rax,%rax
    0.00 :	    6e8a:       8b 45 00 89 04 24       je     6b03 <nf_conntrack_hash_insert+0x69f3>
    0.00 :	    6e90:       44 8b                   xor    %esi,%esi
    0.00 :	    6e92:       4e 08 31 c0 44          cmpl   $0x0,0x40(%rsp)
    0.00 :	    6e97:       8b 46 04 48 c7          lea    -0x1(%r12),%edx
    0.00 :	    6e9c:       c6 00 00                mov    %r10,%rdi
    0.00 :	    6e9f:       00 00 e8 00             sete   %sil
    0.00 :	    6ea3:       00 00                   callq  *%rax
    0.00 :	    6ea5:       00 e9 5f fe ff          mov    %ax,0x5e(%rsp)
    0.00 :	    6eaa:       ff                      cwtl   
    0.00 :	    6eab:       0f 1f 44 00 00          jmpq   6b0c <nf_conntrack_hash_insert+0x69fc>
    0.00 :	    6eb0:       48 8b 05 00             mov    0x0(%rbp,%rdx,4),%edi
    0.00 :	    6eb4:       00 00 00                lea    -0x1(%rdi),%eax
    0.00 :	    6eb7:       48 85 c0 0f             sub    0x8(%r13),%eax
    0.00 :	    6ebb:       84 73 fc                cmp    %r14d,%eax
    0.00 :	    6ebe:       ff ff 31 f6 83 7c       jns    6c8f <nf_conntrack_hash_insert+0x6b7f>
    0.00 :	    6ec4:       24 40 00 41             mov    0x0(%r13),%edx
    0.00 :	    6ec8:       8d 54                   mov    %edx,%eax
    0.00 :	    6eca:       24 ff                   not    %eax
    0.00 :	    6ecc:       4c 89 d7                add    %r15d,%eax
    0.00 :	    6ecf:       40 0f 94 c6 ff d0       jns    6c8f <nf_conntrack_hash_insert+0x6b7f>
    0.00 :	    6ed5:       66 89 44                mov    0x8(%rcx),%esi
    0.00 :	    6ed8:       24 5e 98                sub    $0x1,%edx
    0.00 :	    6edb:       e9 5c fc ff ff          mov    $0x101d0,%eax
    0.00 :	    6ee0:       8b 7c 95 00 8d 47       cmp    $0x101d0,%esi
    0.00 :	    6ee6:       ff 41 2b                cmovae %esi,%eax
    0.00 :	    6ee9:       45 08                   sub    %eax,%edx
    0.00 :	    6eeb:       44 39 f0                cmp    %r15d,%edx
    0.00 :	    6eee:       0f 89 cb fd ff ff       jns    6c8f <nf_conntrack_hash_insert+0x6b7f>
    0.00 :	    6ef4:       41 8b 55 00 89 d0 f7    mov    0xe0(%rsp),%rdx
    0.00 :	    6efb:       d0 
    0.00 :	    6efc:       44 01 f8 0f             testb  $0x2,0xd(%rdx)
    0.00 :	    6f00:       89 ba                   jne    6f0a <nf_conntrack_hash_insert+0x6dfa>
    0.00 :	    6f02:       fd ff ff 8b             movzbl 0x10(%rcx),%ecx
    0.00 :	    6f06:       71 08 83 ea             shll   %cl,0x58(%rsp)
    0.00 :	    6f0a:       01 b8 d0                mov    %r15d,%eax
    0.00 :	    6f0d:       01 01 00 81             sub    0x54(%rsp),%eax
    0.00 :	    6f11:       fe d0 01 01             mov    0x58(%rsp),%ecx
    0.00 :	    6f15:       00 0f 43                lea    (%rax,%rcx,1),%edx
    0.00 :	    6f18:       c6 29                   cmp    %edx,%esi
    0.00 :	    6f1a:       c2 44                   jae    6f28 <nf_conntrack_hash_insert+0x6e18>
    0.00 :	    6f1c:       39 fa 0f 89             lea    (%r12,%r12,4),%rax
    0.00 :	    6f20:       9b fd ff ff             mov    0x0(%rbp,%rax,4),%edi
    0.00 :	    6f24:       48 8b 94 24             mov    %edx,0x8(%rbp,%rax,4)
    0.00 :	    6f28:       e0 00 00                cmp    %r14d,%edi
    0.00 :	    6f2b:       00 f6                   jns    6f3b <nf_conntrack_hash_insert+0x6e2b>
    0.00 :	    6f2d:       42 0d 02 75             lea    (%r12,%r12,4),%rax
    0.00 :	    6f31:       08 0f b6 49 10          orb    $0x10,0x11(%rbp,%rax,4)
    0.00 :	    6f36:       d3 64 24 58 44          mov    %r14d,0x0(%rbp,%rax,4)
    0.00 :	    6f3b:       89 f8 2b 44 24 54 8b    mov    0xe0(%rsp),%rax
    0.00 :	    6f42:       4c 
    0.00 :	    6f43:       24 58 8d 14             testb  $0x10,0xd(%rax)
    0.00 :	    6f47:       08 39                   je     6f6b <nf_conntrack_hash_insert+0x6e5b>
    0.00 :	    6f49:       d6 73 0c 4b             lea    (%r12,%r12,4),%rax
    0.00 :	    6f4d:       8d 04 a4 8b 7c          lea    0x0(%rbp,%rax,4),%rdx
    0.00 :	    6f52:       85 00 89 54             lea    0x10(%rdx),%rax
    0.00 :	    6f56:       85 08 44 39             testb  $0x20,0x1(%rax)
    0.00 :	    6f5a:       f7 79 0e 4b 8d 04       jne    730d <nf_conntrack_hash_insert+0x71fd>
    0.00 :	    6f60:       a4 80 4c 85             mov    0x54(%rsp),%ecx
    0.00 :	    6f64:       11 10 44                mov    %ecx,0xc(%rdx)
    0.00 :	    6f67:       89 74 85 00             orb    $0x20,0x1(%rax)
    0.00 :	    6f6b:       48 8b 84 24             mov    0x8(%r13),%edx
    0.00 :	    6f6f:       e0 00                   test   %edx,%edx
    0.00 :	    6f71:       00 00                   je     6f8a <nf_conntrack_hash_insert+0x6e7a>
    0.00 :	    6f73:       f6 40 0d 10             lea    (%r12,%r12,4),%rax
    0.00 :	    6f77:       74 22 4b 8d             mov    0x4(%rbp,%rax,4),%eax
    0.00 :	    6f7b:       04 a4 48                cmp    %r14d,%eax
    0.00 :	    6f7e:       8d 54                   jns    6f8a <nf_conntrack_hash_insert+0x6e7a>
    0.00 :	    6f80:       85 00                   sub    %eax,%edx
    0.00 :	    6f82:       48 8d 42 10             lea    (%rdx,%r14,1),%eax
    0.00 :	    6f86:       f6 40 01 20             mov    %eax,0x8(%r13)
    0.00 :	    6f8a:       0f 85 ad 03             mov    0x58(%rsp),%edx
    0.00 :	    6f8e:       00 00 8b                add    %r15d,%edx
    0.00 :	    6f91:       4c 24                   mov    %edx,%eax
    0.00 :	    6f93:       54 89                   not    %eax
    0.00 :	    6f95:       4a 0c 80 48             add    0x4(%r13),%eax
    0.00 :	    6f99:       01 20 41 8b 55 08       js     7208 <nf_conntrack_hash_insert+0x70f8>
    0.00 :	    6f9f:       85 d2 74 17             mov    0x54(%rsp),%edx
    0.00 :	    6fa3:       4b 8d 04 a4             cmp    %edx,0x0(%r13)
    0.00 :	    6fa7:       8b 44                   jne    6fae <nf_conntrack_hash_insert+0x6e9e>
    0.00 :	    6fa9:       85 04 44 39 f0          andb   $0xef,0x11(%r13)
    0.00 :	    6fae:       79 0a 29 c2 42          cmpl   $0x3,0x3c(%rsp)
    0.00 :	    6fb3:       8d 04 32 41 89 45       jne    6e20 <nf_conntrack_hash_insert+0x6d10>
    0.00 :	    6fb9:       08 8b 54 24             movzbl 0x29(%rbp),%eax
    0.00 :	    6fbd:       58 44 01 fa             cmp    0x40(%rsp),%eax
    0.00 :	    6fc1:       89 d0 f7 d0 41 03       je     7224 <nf_conntrack_hash_insert+0x7114>
    0.00 :	    6fc7:       45 04 0f 88 69          movzbl 0x40(%rsp),%edx
    0.00 :	    6fcc:       02 00 00 8b 54          mov    $0x1,%ebx
    0.00 :	    6fd1:       24 54 41                mov    %dl,0x29(%rbp)
    0.00 :	    6fd4:       39 55 00 75             mov    0x50(%rsp),%ecx
    0.00 :	    6fd8:       05 41 80                mov    %ecx,0x2c(%rbp)
    0.00 :	    6fdb:       65 11 ef 83             mov    0x54(%rsp),%eax
    0.00 :	    6fdf:       7c 24 3c 03             mov    %r14d,0x34(%rbp)
    0.00 :	    6fe3:       0f 85 67                mov    %eax,0x30(%rbp)
    0.00 :	    6fe6:       fe ff ff 0f b6          movzwl 0x58(%rsp),%edx
    0.00 :	    6feb:       45 29 3b 44             movb   $0x0,0x2a(%rbp)
    0.00 :	    6fef:       24 40 0f 84             mov    %dx,0x38(%rbp)
    0.00 :	    6ff3:       5d 02 00 00 0f          jmpq   6e25 <nf_conntrack_hash_insert+0x6d15>
    0.00 :	    6ff8:       b6 54 24 40 bb 01 00    nopl   0x0(%rax,%rax,1)
    0.00 :	    6fff:       00 
    0.00 :	    7000:       00 88 55                sub    $0x1,%ebx
    0.00 :	    7003:       29 8b 4c 24 50          jmpq   6d95 <nf_conntrack_hash_insert+0x6c85>
    0.00 :	    7008:       89 4d 2c 8b 44 24 54    nopl   0x0(%rax,%rax,1)
    0.00 :	    700f:       44 
    0.00 :	    7010:       89 75 34 89 45          mov    0x40(%rsp),%r10d
    0.00 :	    7015:       30 0f b7                test   %r10d,%r10d
    0.00 :	    7018:       54 24 58 c6 45 2a       jne    6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    701e:       00 66 89 55             lea    (%r12,%r12,4),%rax
    0.00 :	    7022:       38 e9 2d fe ff          cmp    %r14d,0x0(%rbp,%rax,4)
    0.00 :	    7027:       ff 0f 1f 84 00 00 00    lea    0x0(,%rax,4),%rdx
    0.00 :	    702e:       00 
    0.00 :	    702f:       00 83 eb 01 e9 8d       jns    6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    7035:       fd ff ff 0f 1f          lea    0x0(%rbp,%rdx,1),%rdx
    0.00 :	    703a:       84 00 00                mov    %rbx,%rcx
    0.00 :	    703d:       00 00 00 44             mov    %r14d,0x4(%rdx)
    0.00 :	    7041:       8b 54 24 40 45          mov    %r14d,0x0(%rbp,%rax,4)
    0.00 :	    7046:       85 d2 0f 85 ea          mov    $0x1,%eax
    0.00 :	    704b:       fc ff ff 4b 8d          mov    0x58(%rsp),%r9d
    0.00 :	    7050:       04 a4 44                test   %r9d,%r9d
    0.00 :	    7053:       39 74 85 00 48          cmovne 0x58(%rsp),%eax
    0.00 :	    7058:       8d 14 85                mov    %eax,0x8(%rdx)
    0.00 :	    705b:       00 00 00 00 0f 89 d3    mov    0xe0(%rsp),%rdx
    0.00 :	    7062:       fc 
    0.00 :	    7063:       ff ff 48 8d             mov    0x2c(%rsp),%esi
    0.00 :	    7067:       54 15 00 48 89          mov    0x30(%rsp),%rdi
    0.00 :	    706c:       d9 44 89 72 04          callq  68c0 <nf_conntrack_hash_insert+0x67b0>
    0.00 :	    7071:       44 89 74 85 00          jmpq   6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    7076:       b8 01 00 00 00 44 8b    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    707d:       4c 24 58 
    0.00 :	    7080:       45 85 c9 0f 45          testb  $0x1,0x11(%r13)
    0.00 :	    7085:       44 24 58 89 42 08       jne    6bf3 <nf_conntrack_hash_insert+0x6ae3>
    0.00 :	    708b:       48 8b 94 24 e0          nopl   0x0(%rax,%rax,1)
    0.00 :	    7090:       00 00 00 8b 74          jmpq   6be5 <nf_conntrack_hash_insert+0x6ad5>
    0.00 :	    7095:       24 2c 48                nopl   (%rax)
    0.00 :	    7098:       8b 7c 24 30 e8 4f f8    nopl   0x0(%rax,%rax,1)
    0.00 :	    709f:       ff 
    0.00 :	    70a0:       ff e9 92 fc ff          callq  70a5 <nf_conntrack_hash_insert+0x6f95>
    0.00 :	    70a5:       ff 66                   test   %eax,%eax
    0.00 :	    70a7:       2e 0f 1f 84 00 00       je     6ccb <nf_conntrack_hash_insert+0x6bbb>
    0.00 :	    70ad:       00 00 00 41             lea    (%r12,%r12,4),%rcx
    0.00 :	    70b1:       f6 45 11 01 0f          mov    $0xffffffff,%eax
    0.00 :	    70b6:       85 68 fb ff ff 0f 1f    mov    $0x0,%rdx
    0.00 :	    70bd:       44 00 00 e9 50          lea    0x0(%rbp,%rcx,4),%rsi
    0.00 :	    70c2:       fb ff ff                sub    0x4(%rsi),%eax
    0.00 :	    70c5:       0f 1f 00 0f             add    0x50(%rsp),%eax
    0.00 :	    70c9:       1f 84 00 00 00 00       js     7168 <nf_conntrack_hash_insert+0x7058>
    0.00 :	    70cf:       00 e8 00 00 00          movzbl 0x2b(%rsp),%edi
    0.00 :	    70d4:       00 85 c0 0f 84          mov    %rdx,0x8(%rsp)
    0.00 :	    70d9:       1e fc ff                xor    %r9d,%r9d
    0.00 :	    70dc:       ff 4b 8d 0c a4          mov    0x30(%rsp),%rdx
    0.00 :	    70e1:       b8 ff ff                xor    %r8d,%r8d
    0.00 :	    70e4:       ff ff                   xor    %ecx,%ecx
    0.00 :	    70e6:       48 c7                   xor    %esi,%esi
    0.00 :	    70e8:       c2 00                   xor    %eax,%eax
    0.00 :	    70ea:       00 00 00 48 8d 74 8d    movq   $0x0,(%rsp)
    0.00 :	    70f1:       00 
    0.00 :	    70f2:       2b 46                   xor    %ebx,%ebx
    0.00 :	    70f4:       04 03 44 24 50          callq  70f9 <nf_conntrack_hash_insert+0x6fe9>
    0.00 :	    70f9:       0f 88 99 00 00          jmpq   6e25 <nf_conntrack_hash_insert+0x6d15>
    0.00 :	    70fe:       00 0f                   xchg   %ax,%ax
    0.00 :	    7100:       b6 7c 24 2b 48 89       cmpl   $0xa080101,(%rax)
    0.00 :	    7106:       54 24 08 45 31 c9       jne    6d9d <nf_conntrack_hash_insert+0x6c8d>
    0.00 :	    710c:       48 8b 54 24             nopl   0x0(%rax)
    0.00 :	    7110:       30 45 31 c0 31          jmpq   6af5 <nf_conntrack_hash_insert+0x69e5>
    0.00 :	    7115:       c9 31 f6                nopl   (%rax)
    0.00 :	    7118:       31 c0 48 c7 04          cmpl   $0x1,0x40(%rsp)
    0.00 :	    711d:       24 00 00                nopl   (%rax)
    0.00 :	    7120:       00 00 31 db e8 00       jne    6d08 <nf_conntrack_hash_insert+0x6bf8>
    0.00 :	    7126:       00 00                   xchg   %ax,%ax
    0.00 :	    7128:       00 e9 27 fd ff          jmpq   701e <nf_conntrack_hash_insert+0x6f0e>
    0.00 :	    712d:       ff 66 90                nopl   (%rax)
    0.00 :	    7130:       81 38 01 01 08          lea    0x70(%rsp),%r15
    0.00 :	    7135:       0a 0f 85 91 fc          mov    0x30(%rsp),%rdi
    0.00 :	    713a:       ff ff                   mov    %ebx,%ecx
    0.00 :	    713c:       0f 1f 40 00 e9          mov    %r10,0x20(%rsp)
    0.00 :	    7141:       e0 f9 ff                mov    %r15,%rdx
    0.00 :	    7144:       ff 0f 1f 00 83          callq  7149 <nf_conntrack_hash_insert+0x7039>
    0.00 :	    7149:       7c 24                   test   %eax,%eax
    0.00 :	    714b:       40 01 0f 1f 00          mov    0x20(%rsp),%r10
    0.00 :	    7150:       0f 85                   js     7160 <nf_conntrack_hash_insert+0x7050>
    0.00 :	    7152:       e2 fb ff                mov    %r15,%rax
    0.00 :	    7155:       ff 66 90 e9 f1          jmpq   6d80 <nf_conntrack_hash_insert+0x6c70>
    0.00 :	    715a:       fe ff ff 0f 1f 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    7160:       4c 8d                   ud2    
    0.00 :	    7162:       7c 24                   jmp    7162 <nf_conntrack_hash_insert+0x7052>
    0.00 :	    7164:       70 48 8b 7c             nopl   0x0(%rax)
    0.00 :	    7168:       24 30 89 d9             mov    0x0(%rbp,%rcx,4),%eax
    0.00 :	    716c:       4c 89 54 24 20 4c 89    mov    $0x0,%rdx
    0.00 :	    7173:       fa e8 00                sub    $0x1,%eax
    0.00 :	    7176:       00 00 00 85             sub    0x8(%r13),%eax
    0.00 :	    717a:       c0 4c 8b                cmp    %r14d,%eax
    0.00 :	    717d:       54 24 20 78 0e 4c       jns    70cf <nf_conntrack_hash_insert+0x6fbf>
    0.00 :	    7183:       89 f8 e9 26             mov    0x0(%r13),%ecx
    0.00 :	    7187:       fc ff ff 66 0f 1f 44    mov    $0x0,%rdx
    0.00 :	    718e:       00 00                   mov    %ecx,%eax
    0.00 :	    7190:       0f 0b                   not    %eax
    0.00 :	    7192:       eb fe 0f                add    %r15d,%eax
    0.00 :	    7195:       1f 40 00 8b 44 8d       jns    70cf <nf_conntrack_hash_insert+0x6fbf>
    0.00 :	    719b:       00 48 c7 c2 00 00 00    cmpl   $0x101d0,0x8(%rsi)
    0.00 :	    71a2:       00 83 e8 01 41          mov    $0x101d0,%edx
    0.00 :	    71a7:       2b 45 08                lea    -0x1(%rcx),%eax
    0.00 :	    71aa:       44 39 f0 0f             cmovae 0x8(%rsi),%edx
    0.00 :	    71ae:       89 4c                   sub    %edx,%eax
    0.00 :	    71b0:       ff ff ff 41 8b 4d 00    mov    $0x0,%rdx
    0.00 :	    71b7:       48 c7 c2                cmp    %r15d,%eax
    0.00 :	    71ba:       00 00 00 00 89 c8 f7    mov    $0x0,%rax
    0.00 :	    71c1:       d0 44 01 f8             cmovs  %rax,%rdx
    0.00 :	    71c5:       0f 89 34 ff ff          jmpq   70cf <nf_conntrack_hash_insert+0x6fbf>
    0.00 :	    71ca:       ff 81 7e 08 d0 01       nopw   0x0(%rax,%rax,1)
    0.00 :	    71d0:       01 00 ba                cmp    $0x9,%ecx
    0.00 :	    71d3:       d0 01 01 00 8d 41       jle    6dd0 <nf_conntrack_hash_insert+0x6cc0>
    0.00 :	    71d9:       ff 0f 43                lea    -0x2(%rcx),%esi
    0.00 :	    71dc:       56 08 29 d0             test   $0x7,%sil
    0.00 :	    71e0:       48 c7 c2 00 00 00       jne    6dd0 <nf_conntrack_hash_insert+0x6cc0>
    0.00 :	    71e6:       00 44 39                mov    %r12d,%ecx
    0.00 :	    71e9:       f8 48                   xor    %edi,%edi
    0.00 :	    71eb:       c7 c0 00                movslq %edi,%rax
    0.00 :	    71ee:       00 00 00 48             mov    0x4(%rdx,%rax,1),%ebx
    0.00 :	    71f2:       0f 48                   bswap  %ebx
    0.00 :	    71f4:       d0 e9                   cmp    %ebx,%ecx
    0.00 :	    71f6:       05 ff ff                cmovns %ecx,%ebx
    0.00 :	    71f9:       ff 66 0f                add    $0x8,%edi
    0.00 :	    71fc:       1f 44                   cmp    %edi,%esi
    0.00 :	    71fe:       00 00 83 f9 09 0f       jle    6af8 <nf_conntrack_hash_insert+0x69e8>
    0.00 :	    7204:       8e f7                   mov    %ebx,%ecx
    0.00 :	    7206:       fb ff                   jmp    71eb <nf_conntrack_hash_insert+0x70db>
    0.00 :	    7208:       ff 8d 71 fe             mov    %edx,0x4(%r13)
    0.00 :	    720c:       40 f6 c6 07             mov    0x58(%rsp),%esi
    0.00 :	    7210:       0f 85                   test   %esi,%esi
    0.00 :	    7212:       ea fb ff ff 44 89       jne    6f9f <nf_conntrack_hash_insert+0x6e8f>
    0.00 :	    7218:       e1 31 ff                lea    0x1(%rdx),%eax
    0.00 :	    721b:       48 63 c7 8b             mov    %eax,0x4(%r13)
    0.00 :	    721f:       5c 02 04 0f cb          jmpq   6f9f <nf_conntrack_hash_insert+0x6e8f>
    0.00 :	    7224:       39 d9 0f 49             mov    0x50(%rsp),%ecx
    0.00 :	    7228:       d9 83 c7                cmp    %ecx,0x2c(%rbp)
    0.00 :	    722b:       08 39 fe 0f 8e f4       jne    6fc7 <nf_conntrack_hash_insert+0x6eb7>
    0.00 :	    7231:       f8 ff ff 89             mov    0x54(%rsp),%eax
    0.00 :	    7235:       d9 eb e3                cmp    %eax,0x30(%rbp)
    0.00 :	    7238:       41 89 55 04 8b 74       jne    6fc7 <nf_conntrack_hash_insert+0x6eb7>
    0.00 :	    723e:       24 58 85 f6             cmp    %r14d,0x34(%rbp)
    0.00 :	    7242:       0f 85 87 fd ff ff       jne    6fc7 <nf_conntrack_hash_insert+0x6eb7>
    0.00 :	    7248:       8d 42 01 41             movzwl 0x38(%rbp),%eax
    0.00 :	    724c:       89 45 04 e9             cmp    0x58(%rsp),%eax
    0.00 :	    7250:       7b fd ff ff 8b 4c       jne    6fc7 <nf_conntrack_hash_insert+0x6eb7>
    0.00 :	    7256:       24 50 39 4d             addb   $0x1,0x2a(%rbp)
    0.00 :	    725a:       2c 0f 85 96 fd          mov    $0x1,%ebx
    0.00 :	    725f:       ff ff 8b 44 24          jmpq   6e25 <nf_conntrack_hash_insert+0x6d15>
    0.00 :	    7264:       54 39 45 30             mov    0x58(%rsp),%edx
    0.00 :	    7268:       0f 85 89 fd ff ff       movswl 0x5e(%rsp),%r8d
    0.00 :	    726e:       44 39 75                mov    %r15d,%r9d
    0.00 :	    7271:       34 0f 85 7f             mov    0x54(%rsp),%ecx
    0.00 :	    7275:       fd ff ff 0f b7 45 38    mov    $0x0,%rsi
    0.00 :	    727c:       3b 44 24 58 0f 85 71    mov    $0x0,%rdi
    0.00 :	    7283:       fd ff                   xor    %eax,%eax
    0.00 :	    7285:       ff 80 45 2a 01          mov    %r14d,0x10(%rsp)
    0.00 :	    728a:       bb 01 00 00             mov    %edx,0x8(%rsp)
    0.00 :	    728e:       00 e9 c1 fb             mov    0x50(%rsp),%edx
    0.00 :	    7292:       ff ff 8b 54             mov    %r8d,(%rsp)
    0.00 :	    7296:       24 58 44 0f bf          callq  729b <nf_conntrack_hash_insert+0x718b>
    0.00 :	    729b:       44 24 5e 45 89          jmpq   6b6e <nf_conntrack_hash_insert+0x6a5e>
    0.00 :	    72a0:       f9 8b 4c 24 54 48 c7    mov    $0x0,%rsi
    0.00 :	    72a7:       c6 00 00 00 00 48 c7    mov    $0x0,%rdi
    0.00 :	    72ae:       c7 00                   xor    %eax,%eax
    0.00 :	    72b0:       00 00 00 31 c0          callq  72b5 <nf_conntrack_hash_insert+0x71a5>
    0.00 :	    72b5:       44 89 74 24 10          jmpq   6b34 <nf_conntrack_hash_insert+0x6a24>
    0.00 :	    72ba:       89 54 24 08             lea    (%r12,%r12,4),%rax
    0.00 :	    72be:       8b 54 24 50 44 89 04    mov    $0x0,%rsi
    0.00 :	    72c5:       24 e8 00 00 00 00 e9    mov    $0x0,%rdi
    0.00 :	    72cc:       ce f8 ff ff             mov    0x0(%rbp,%rax,4),%edx
    0.00 :	    72d0:       48 c7 c6 00 00          lea    0x0(%rbp,%rax,4),%rcx
    0.00 :	    72d5:       00 00 48 c7 c7          movzbl 0x10(%r13),%eax
    0.00 :	    72da:       00 00 00 00 31          movzbl 0x10(%rcx),%r9d
    0.00 :	    72df:       c0 e8 00 00             mov    %eax,0x18(%rsp)
    0.00 :	    72e3:       00 00 e9 7a             mov    0x8(%r13),%eax
    0.00 :	    72e7:       f8 ff ff 4b             mov    %eax,0x10(%rsp)
    0.00 :	    72eb:       8d 04 a4 48             mov    0x4(%r13),%eax
    0.00 :	    72ef:       c7 c6 00 00             mov    %eax,0x8(%rsp)
    0.00 :	    72f3:       00 00 48 c7             mov    0x0(%r13),%eax
    0.00 :	    72f7:       c7 00 00                mov    %eax,(%rsp)
    0.00 :	    72fa:       00 00 8b 54             mov    0x8(%rcx),%r8d
    0.00 :	    72fe:       85 00                   xor    %eax,%eax
    0.00 :	    7300:       48 8d 4c                mov    0x4(%rcx),%ecx
    0.00 :	    7303:       85 00 41 0f b6          callq  7308 <nf_conntrack_hash_insert+0x71f8>
    0.00 :	    7308:       45 10 44 0f b6          jmpq   6b80 <nf_conntrack_hash_insert+0x6a70>
    0.00 :	    730d:       49 10 89 44             mov    0x54(%rsp),%eax
    0.00 :	    7311:       24 18 41                cmp    %eax,0xc(%rdx)
    0.00 :	    7314:       8b 45 08 89 44 24       jns    6f6b <nf_conntrack_hash_insert+0x6e5b>
    0.00 :	    731a:       10 41 8b                mov    %eax,0xc(%rdx)
    0.00 :	    731d:       45 04 89                nopl   (%rax)
    0.00 :	    7320:       44 24 08 41 8b          jmpq   6f6b <nf_conntrack_hash_insert+0x6e5b>
    0.00 :	    7325:       45 00 89 04 24 44 8b    mov    $0x0,%rsi
    0.00 :	    732c:       41 08 31 c0 8b 49 04    mov    $0x0,%rdi
    0.00 :	    7333:       e8 00                   xor    %eax,%eax
    0.00 :	    7335:       00 00 00 e9 73          callq  733a <nf_conntrack_hash_insert+0x722a>
    0.00 :	    733a:       f8 ff ff 8b 44          jmpq   6c4d <nf_conntrack_hash_insert+0x6b3d>
    0.00 :	    733f:       24 54 39 42             mov    0x58(%rsp),%eax
    0.00 :	    7343:       0c 0f 89 51 fc ff       movswl 0x5e(%rsp),%r8d
    0.00 :	    7349:       ff 89 42                mov    %r15d,%r9d
    0.00 :	    734c:       0c 0f 1f 00             mov    0x54(%rsp),%ecx
    0.00 :	    7350:       e9 46 fc ff             mov    0x50(%rsp),%edx
    0.00 :	    7354:       ff 48 c7 c6 00 00 00    mov    $0x0,%rsi
    0.00 :	    735b:       00 48 c7 c7 00 00 00    mov    $0x0,%rdi
    0.00 :	    7362:       00 31 c0 e8 00          mov    %r14d,0x10(%rsp)
    0.00 :	    7367:       00 00 00 e9             mov    %eax,0x8(%rsp)
    0.00 :	    736b:       0e f9                   xor    %eax,%eax
    0.00 :	    736d:       ff ff 8b 44             mov    %r8d,(%rsp)
    0.00 :	    7371:       24 58 44 0f bf          callq  7376 <nf_conntrack_hash_insert+0x7266>
    0.00 :	    7376:       44 24 5e 45 89          jmpq   6c5a <nf_conntrack_hash_insert+0x6b4a>
    0.00 :	    737b:       f9 8b 4c 24             lea    (%r12,%r12,4),%rax
    0.00 :	    737f:       54 8b 54 24 50 48 c7    mov    $0x0,%rsi
    0.00 :	    7386:       c6 00 00 00 00 48 c7    mov    $0x0,%rdi
    0.00 :	    738d:       c7 00 00 00             mov    0x0(%rbp,%rax,4),%edx
    0.00 :	    7391:       00 44 89 74 24          lea    0x0(%rbp,%rax,4),%rcx
    0.00 :	    7396:       10 89 44 24 08          movzbl 0x10(%r13),%eax
    0.00 :	    739b:       31 c0 44 89 04          movzbl 0x10(%rcx),%r9d
    0.00 :	    73a0:       24 e8 00 00             mov    %eax,0x18(%rsp)
    0.00 :	    73a4:       00 00 e9 df             mov    0x8(%r13),%eax
    0.00 :	    73a8:       f8 ff ff 4b             mov    %eax,0x10(%rsp)
    0.00 :	    73ac:       8d 04 a4 48             mov    0x4(%r13),%eax
    0.00 :	    73b0:       c7 c6 00 00             mov    %eax,0x8(%rsp)
    0.00 :	    73b4:       00 00 48 c7             mov    0x0(%r13),%eax
    0.00 :	    73b8:       c7 00 00                mov    %eax,(%rsp)
    0.00 :	    73bb:       00 00 8b 54             mov    0x8(%rcx),%r8d
    0.00 :	    73bf:       85 00                   xor    %eax,%eax
    0.00 :	    73c1:       48 8d 4c                mov    0x4(%rcx),%ecx
    0.00 :	    73c4:       85 00 41 0f b6          callq  73c9 <nf_conntrack_hash_insert+0x72b9>
    0.00 :	    73c9:       45 10 44 0f b6          jmpq   6c67 <nf_conntrack_hash_insert+0x6b57>
    0.00 :	    73ce:       49 10 89 44 24 18 41    mov    $0x0,%rsi
    0.00 :	    73d5:       8b 45 08 89 44 24 10    mov    $0x0,%rdi
    0.00 :	    73dc:       41 8b                   xor    %eax,%eax
    0.00 :	    73de:       45 04 89 44 24          callq  73e3 <nf_conntrack_hash_insert+0x72d3>
    0.00 :	    73e3:       08 41 8b 45 00          jmpq   6b27 <nf_conntrack_hash_insert+0x6a17>
    0.00 :	    73e8:       89 04 24 44             lea    (%r12,%r12,4),%rcx
    0.00 :	    73ec:       8b 41 08 31             mov    0x0(%r13),%r8d
    0.00 :	    73f0:       c0 8b 49 04 e8          mov    $0xffffffff,%edx
    0.00 :	    73f5:       00 00 00 00 e9          mov    $0x101d0,%eax
    0.00 :	    73fa:       99 f8 ff ff 48 c7 c6    mov    $0x0,%rdi
    0.00 :	    7401:       00 00 00 00 48          lea    0x0(%rbp,%rcx,4),%rsi
    0.00 :	    7406:       c7 c7 00 00             mov    0x0(%rbp,%rcx,4),%ecx
    0.00 :	    740a:       00 00 31 c0             lea    -0x1(%r8),%r9d
    0.00 :	    740e:       e8 00 00                not    %r8d
    0.00 :	    7411:       00 00 e9 3f f7 ff ff    cmpl   $0x101d0,0x8(%rsi)
    0.00 :	    7418:       4b 8d 0c a4             cmovae 0x8(%rsi),%eax
    0.00 :	    741c:       45 8b                   add    %edx,%ecx
    0.00 :	    741e:       45 00 ba                sub    0x4(%rsi),%edx
    0.00 :	    7421:       ff ff ff ff             sub    0x8(%r13),%ecx
    0.00 :	    7425:       b8 d0 01 01             add    0x50(%rsp),%edx
    0.00 :	    7429:       00 48 c7                add    %r15d,%r8d
    0.00 :	    742c:       c7 00 00 00             shr    $0x1f,%r8d
    0.00 :	    7430:       00 48 8d 74 8d 00 8b    mov    $0x0,%rsi
    0.00 :	    7437:       4c 8d 00                sub    %eax,%r9d
    0.00 :	    743a:       45 8d                   xor    %eax,%eax
    0.00 :	    743c:       48 ff 41                sub    %r15d,%r9d
    0.00 :	    743f:       f7 d0 81                sub    %r14d,%ecx
    0.00 :	    7442:       7e 08 d0                shr    $0x1f,%edx
    0.00 :	    7445:       01 01 00                shr    $0x1f,%ecx
    0.00 :	    7448:       0f 43 46 08             shr    $0x1f,%r9d
    0.00 :	    744c:       01 d1 2b 56 04          callq  7451 <nf_conntrack_hash_insert+0x7341>
    0.00 :	    7451:       41 2b 4d 08 03          jmpq   6c74 <nf_conntrack_hash_insert+0x6b64>
         :	    7456:       54 24 50 45 01 f8 41    nopw   %cs:0x0(%rax,%rax,1)
         :	    745d:       c1 e8 1f 
         :	    7460:       48 c7                   push   %r13
         :	    7462:       c6 00                   push   %r12
         :	    7464:       00 00 00                mov    %edx,%r12d
         :	    7467:       41                      push   %rbp
         :	    7468:       29 c1 31                mov    %rdi,%rbp
         :	    746b:       c0                      push   %rbx
         :	    746c:       45 29 f9                mov    %rsi,%rbx
         :	    746f:       44 29 f1 c1             sub    $0x48,%rsp
         :	    7473:       ea 1f c1                mov    0x68(%rsi),%eax
         :	    7476:       e9 1f 41                sub    0x6c(%rsi),%eax
         :	    7479:       c1 e9                   sub    %edx,%eax
         :	    747b:       1f e8 00                cmp    $0x13,%eax
         :	    747e:       00 00 00 e9 1e f8       jle    7610 <nf_conntrack_hash_insert+0x7500>
         :	    7484:       ff ff 66                movslq %edx,%r8

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:605
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a5710 <index_getnext>:
         :	 * enough information to do it efficiently in the general case.
         :	 * ----------------
         :	 */
         :	HeapTuple
         :	index_getnext(IndexScanDesc scan, ScanDirection direction)
         :	{
    0.00 :	  4a5710:       55                      push   %rbp
    0.00 :	  4a5711:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4a5714:       41 54                   push   %r12
    0.00 :	  4a5716:       41 89 f4                mov    %esi,%r12d
    0.00 :	  4a5719:       53                      push   %rbx
    0.00 :	  4a571a:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  4a571d:       0f 1f 00                nopl   (%rax)
         :	        HeapTuple       heapTuple;
         :	        ItemPointer tid;
         :
         :	        for (;;)
         :	        {
         :	                if (scan->xs_continue_hot)
    0.00 :	  4a5720:       80 7b 6d 00             cmpb   $0x0,0x6d(%rbx)
    0.00 :	  4a5724:       74 1a                   je     4a5740 <index_getnext+0x30>
         :	                /*
         :	                 * Fetch the next (or only) visible heap tuple for this index entry.
         :	                 * If we don't find anything, loop around and grab the next TID from
         :	                 * the index.
         :	                 */
         :	                heapTuple = index_fetch_heap(scan);
    0.00 :	  4a5726:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4a5729:       e8 f2 fd ff ff          callq  4a5520 <index_fetch_heap>
         :	                if (heapTuple != NULL)
    0.00 :	  4a572e:       48 85 c0                test   %rax,%rax
    0.00 :	  4a5731:       74 ed                   je     4a5720 <index_getnext+0x10>
         :	                        return heapTuple;
         :	        }
         :
         :	        return NULL;                            /* failure exit */
         :	}
    0.00 :	  4a5733:       5b                      pop    %rbx
    0.00 :	  4a5734:       41 5c                   pop    %r12
    0.00 :	  4a5736:       c9                      leaveq 
    0.00 :	  4a5737:       c3                      retq   
    0.00 :	  4a5738:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4a573f:       00 
         :	                                   BufferGetBlockNumber(scan->xs_cbuf));
         :	                }
         :	                else
         :	                {
         :	                        /* Time to fetch the next TID from the index */
         :	                        tid = index_getnext_tid(scan, direction);
    0.00 :	  4a5740:       44 89 e6                mov    %r12d,%esi
    0.00 :	  4a5743:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4a5746:       e8 e5 fe ff ff          callq  4a5630 <index_getnext_tid>
         :
         :	                        /* If we're out of index entries, we're done */
         :	                        if (tid == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/access/index/indexam.c:605
  100.00 :	  4a574b:       48 85 c0                test   %rax,%rax
    0.00 :	  4a574e:       75 d6                   jne    4a5726 <index_getnext+0x16>
    0.00 :	  4a5750:       eb e1                   jmp    4a5733 <index_getnext+0x23>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtpage.c:141
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004aac20 <_bt_getroot>:
         :	 *              On successful return, the root page is pinned and read-locked.
         :	 *              The metadata page is not locked or pinned on exit.
         :	 */
         :	Buffer
         :	_bt_getroot(Relation rel, int access)
         :	{
    0.00 :	  4aac20:       55                      push   %rbp
    0.00 :	  4aac21:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4aac24:       41 57                   push   %r15
    0.00 :	  4aac26:       41 56                   push   %r14
    0.00 :	  4aac28:       49 89 fe                mov    %rdi,%r14
    0.00 :	  4aac2b:       41 55                   push   %r13
    0.00 :	  4aac2d:       41 89 f5                mov    %esi,%r13d
    0.00 :	  4aac30:       41 54                   push   %r12
    0.00 :	  4aac32:       53                      push   %rbx
    0.00 :	  4aac33:       48 83 ec 58             sub    $0x58,%rsp
         :	        /*
         :	         * Try to use previously-cached metapage data to find the root.  This
         :	         * normally saves one buffer access per index search, which is a very
         :	         * helpful savings in bufmgr traffic and hence contention.
         :	         */
         :	        if (rel->rd_amcache != NULL)
    0.00 :	  4aac37:       48 8b 87 18 01 00 00    mov    0x118(%rdi),%rax
    0.00 :	  4aac3e:       48 85 c0                test   %rax,%rax
    0.00 :	  4aac41:       74 6a                   je     4aacad <_bt_getroot+0x8d>
         :
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
         :
         :	                rootbuf = _bt_getbuf(rel, rootblkno, BT_READ);
    0.00 :	  4aac43:       8b 70 10                mov    0x10(%rax),%esi
    0.00 :	  4aac46:       ba 01 00 00 00          mov    $0x1,%edx
         :	                Assert(metad->btm_version == BTREE_VERSION);
         :	                Assert(metad->btm_root != P_NONE);
         :
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
    0.00 :	  4aac4b:       8b 58 14                mov    0x14(%rax),%ebx
         :
         :	                rootbuf = _bt_getbuf(rel, rootblkno, BT_READ);
    0.00 :	  4aac4e:       e8 fd e3 ff ff          callq  4a9050 <_bt_getbuf>
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aac53:       85 c0                   test   %eax,%eax
         :
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
         :
         :	                rootbuf = _bt_getbuf(rel, rootblkno, BT_READ);
    0.00 :	  4aac55:       41 89 c4                mov    %eax,%r12d
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aac58:       0f 88 6a 02 00 00       js     4aaec8 <_bt_getroot+0x2a8>
    0.00 :	  4aac5e:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  4aac63:       48 63 d0                movslq %eax,%rdx
    0.00 :	  4aac66:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  4aac6a:       48 03 15 87 4e 71 00    add    0x714e87(%rip),%rdx        # bbfaf8 <BufferBlocks>
         :	                rootopaque = (BTPageOpaque) PageGetSpecialPointer(rootpage);
    0.00 :	  4aac71:       0f b7 42 10             movzwl 0x10(%rdx),%eax
    0.00 :	  4aac75:       48 01 c2                add    %rax,%rdx
         :	                 * here than normal.  We *must* check that it's not deleted. If it's
         :	                 * not alone on its level, then we reject too --- this may be overly
         :	                 * paranoid but better safe than sorry.  Note we don't check P_ISROOT,
         :	                 * because that's not set in a "fast root".
         :	                 */
         :	                if (!P_IGNORE(rootopaque) &&
    0.00 :	  4aac78:       0f b7 42 0c             movzwl 0xc(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtpage.c:141
  100.00 :	  4aac7c:       a8 14                   test   $0x14,%al
    0.00 :	  4aac7e:       75 09                   jne    4aac89 <_bt_getroot+0x69>
    0.00 :	  4aac80:       39 5a 08                cmp    %ebx,0x8(%rdx)
    0.00 :	  4aac83:       0f 84 57 02 00 00       je     4aaee0 <_bt_getroot+0x2c0>
         :	 * Lock and pin (refcount) are both dropped.
         :	 */
         :	void
         :	_bt_relbuf(Relation rel, Buffer buf)
         :	{
         :	        UnlockReleaseBuffer(buf);
    0.00 :	  4aac89:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4aac8c:       e8 9f a2 1c 00          callq  674f30 <UnlockReleaseBuffer>
         :	                        /* OK, accept cached page as the root */
         :	                        return rootbuf;
         :	                }
         :	                _bt_relbuf(rel, rootbuf);
         :	                /* Cache is stale, throw it away */
         :	                if (rel->rd_amcache)
    0.00 :	  4aac91:       49 8b be 18 01 00 00    mov    0x118(%r14),%rdi
    0.00 :	  4aac98:       48 85 ff                test   %rdi,%rdi
    0.00 :	  4aac9b:       74 05                   je     4aaca2 <_bt_getroot+0x82>
         :	                        pfree(rel->rd_amcache);
    0.00 :	  4aac9d:       e8 de de 2e 00          callq  798b80 <pfree>
         :	                rel->rd_amcache = NULL;
    0.00 :	  4aaca2:       49 c7 86 18 01 00 00    movq   $0x0,0x118(%r14)
    0.00 :	  4aaca9:       00 00 00 00 
         :	        }
         :
         :	        metabuf = _bt_getbuf(rel, BTREE_METAPAGE, BT_READ);
    0.00 :	  4aacad:       31 f6                   xor    %esi,%esi
    0.00 :	  4aacaf:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  4aacb4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4aacb7:       e8 94 e3 ff ff          callq  4a9050 <_bt_getbuf>
         :	        metapg = BufferGetPage(metabuf);
    0.00 :	  4aacbc:       85 c0                   test   %eax,%eax
         :	                if (rel->rd_amcache)
         :	                        pfree(rel->rd_amcache);
         :	                rel->rd_amcache = NULL;
         :	        }
         :
         :	        metabuf = _bt_getbuf(rel, BTREE_METAPAGE, BT_READ);
    0.00 :	  4aacbe:       41 89 c0                mov    %eax,%r8d
         :	        metapg = BufferGetPage(metabuf);
    0.00 :	  4aacc1:       0f 88 e9 01 00 00       js     4aaeb0 <_bt_getroot+0x290>
    0.00 :	  4aacc7:       41 8d 40 ff             lea    -0x1(%r8),%eax
    0.00 :	  4aaccb:       48 63 d8                movslq %eax,%rbx
    0.00 :	  4aacce:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  4aacd2:       48 03 1d 1f 4e 71 00    add    0x714e1f(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        metaopaque = (BTPageOpaque) PageGetSpecialPointer(metapg);
         :	        metad = BTPageGetMeta(metapg);
         :
         :	        /* sanity-check the metapage */
         :	        if (!(metaopaque->btpo_flags & BTP_META) ||
    0.00 :	  4aacd9:       0f b7 43 10             movzwl 0x10(%rbx),%eax
    0.00 :	  4aacdd:       f6 44 03 0c 08          testb  $0x8,0xc(%rbx,%rax,1)
    0.00 :	  4aace2:       74 0d                   je     4aacf1 <_bt_getroot+0xd1>
    0.00 :	  4aace4:       81 7b 18 62 31 05 00    cmpl   $0x53162,0x18(%rbx)
         :	        }
         :
         :	        metabuf = _bt_getbuf(rel, BTREE_METAPAGE, BT_READ);
         :	        metapg = BufferGetPage(metabuf);
         :	        metaopaque = (BTPageOpaque) PageGetSpecialPointer(metapg);
         :	        metad = BTPageGetMeta(metapg);
    0.00 :	  4aaceb:       4c 8d 7b 18             lea    0x18(%rbx),%r15
         :
         :	        /* sanity-check the metapage */
         :	        if (!(metaopaque->btpo_flags & BTP_META) ||
    0.00 :	  4aacef:       74 5f                   je     4aad50 <_bt_getroot+0x130>
         :	                metad->btm_magic != BTREE_MAGIC)
         :	                ereport(ERROR,
    0.00 :	  4aacf1:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  4aacf4:       b9 50 47 7b 00          mov    $0x7b4750,%ecx
    0.00 :	  4aacf9:       ba a7 00 00 00          mov    $0xa7,%edx
    0.00 :	  4aacfe:       be 22 43 7b 00          mov    $0x7b4322,%esi
    0.00 :	  4aad03:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4aad08:       e8 b3 fd 2c 00          callq  77aac0 <errstart>
    0.00 :	  4aad0d:       84 c0                   test   %al,%al
    0.00 :	  4aad0f:       75 0f                   jne    4aad20 <_bt_getroot+0x100>
         :	                        rootblkno = rootopaque->btpo_next;
         :	                }
         :
         :	                /* Note: can't check btpo.level on deleted pages */
         :	                if (rootopaque->btpo.level != rootlevel)
         :	                        elog(ERROR, "root page %u of index \"%s\" has level %u, expected %u",
    0.00 :	  4aad11:       e8 ba e7 fb ff          callq  4694d0 <abort@plt>
    0.00 :	  4aad16:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4aad1d:       00 00 00 
         :	        metad = BTPageGetMeta(metapg);
         :
         :	        /* sanity-check the metapage */
         :	        if (!(metaopaque->btpo_flags & BTP_META) ||
         :	                metad->btm_magic != BTREE_MAGIC)
         :	                ereport(ERROR,
    0.00 :	  4aad20:       49 8b 76 30             mov    0x30(%r14),%rsi
    0.00 :	  4aad24:       bf 4a 43 7b 00          mov    $0x7b434a,%edi
    0.00 :	  4aad29:       31 c0                   xor    %eax,%eax
    0.00 :	  4aad2b:       e8 70 1b 2d 00          callq  77c8a0 <errmsg>
         :	                                (errcode(ERRCODE_INDEX_CORRUPTED),
         :	                                 errmsg("index \"%s\" is not a btree",
         :	                                                RelationGetRelationName(rel))));
         :
         :	        if (metad->btm_version != BTREE_VERSION)
         :	                ereport(ERROR,
    0.00 :	  4aad30:       89 c3                   mov    %eax,%ebx
    0.00 :	  4aad32:       bf 28 0a 00 02          mov    $0x2000a28,%edi
    0.00 :	  4aad37:       e8 14 20 2d 00          callq  77cd50 <errcode>
    0.00 :	  4aad3c:       89 de                   mov    %ebx,%esi
    0.00 :	  4aad3e:       89 c7                   mov    %eax,%edi
    0.00 :	  4aad40:       31 c0                   xor    %eax,%eax
    0.00 :	  4aad42:       e8 99 f8 2c 00          callq  77a5e0 <errfinish>
         :	                        rootblkno = rootopaque->btpo_next;
         :	                }
         :
         :	                /* Note: can't check btpo.level on deleted pages */
         :	                if (rootopaque->btpo.level != rootlevel)
         :	                        elog(ERROR, "root page %u of index \"%s\" has level %u, expected %u",
    0.00 :	  4aad47:       e8 84 e7 fb ff          callq  4694d0 <abort@plt>
    0.00 :	  4aad4c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                ereport(ERROR,
         :	                                (errcode(ERRCODE_INDEX_CORRUPTED),
         :	                                 errmsg("index \"%s\" is not a btree",
         :	                                                RelationGetRelationName(rel))));
         :
         :	        if (metad->btm_version != BTREE_VERSION)
    0.00 :	  4aad50:       41 83 7f 04 02          cmpl   $0x2,0x4(%r15)
    0.00 :	  4aad55:       0f 85 7b 03 00 00       jne    4ab0d6 <_bt_getroot+0x4b6>
         :	                                 errmsg("version mismatch in index \"%s\": file version %d, code version %d",
         :	                                                RelationGetRelationName(rel),
         :	                                                metad->btm_version, BTREE_VERSION)));
         :
         :	        /* if no root page initialized yet, do it */
         :	        if (metad->btm_root == P_NONE)
    0.00 :	  4aad5b:       45 8b 57 08             mov    0x8(%r15),%r10d
    0.00 :	  4aad5f:       45 85 d2                test   %r10d,%r10d
    0.00 :	  4aad62:       0f 85 a8 01 00 00       jne    4aaf10 <_bt_getroot+0x2f0>
         :	        {
         :	                /* If access = BT_READ, caller doesn't want us to create root yet */
         :	                if (access == BT_READ)
    0.00 :	  4aad68:       41 83 fd 01             cmp    $0x1,%r13d
    0.00 :	  4aad6c:       0f 84 8e 01 00 00       je     4aaf00 <_bt_getroot+0x2e0>
         :	                        _bt_relbuf(rel, metabuf);
         :	                        return InvalidBuffer;
         :	                }
         :
         :	                /* trade in our read lock for a write lock */
         :	                LockBuffer(metabuf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4aad72:       31 f6                   xor    %esi,%esi
    0.00 :	  4aad74:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4aad77:       44 89 45 80             mov    %r8d,-0x80(%rbp)
    0.00 :	  4aad7b:       e8 90 99 1c 00          callq  674710 <LockBuffer>
         :	                LockBuffer(metabuf, BT_WRITE);
    0.00 :	  4aad80:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aad84:       be 02 00 00 00          mov    $0x2,%esi
    0.00 :	  4aad89:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4aad8c:       e8 7f 99 1c 00          callq  674710 <LockBuffer>
         :	                /*
         :	                 * Race condition:      if someone else initialized the metadata between
         :	                 * the time we released the read lock and acquired the write lock, we
         :	                 * must avoid doing it again.
         :	                 */
         :	                if (metad->btm_root != P_NONE)
    0.00 :	  4aad91:       45 8b 4f 08             mov    0x8(%r15),%r9d
    0.00 :	  4aad95:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aad99:       45 85 c9                test   %r9d,%r9d
    0.00 :	  4aad9c:       0f 85 66 02 00 00       jne    4ab008 <_bt_getroot+0x3e8>
         :	                /*
         :	                 * Get, initialize, write, and leave a lock of the appropriate type on
         :	                 * the new root page.  Since this is the first page in the tree, it's
         :	                 * a leaf as well as the root.
         :	                 */
         :	                rootbuf = _bt_getbuf(rel, P_NEW, BT_WRITE);
    0.00 :	  4aada2:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  4aada7:       be ff ff ff ff          mov    $0xffffffff,%esi
    0.00 :	  4aadac:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4aadaf:       44 89 45 80             mov    %r8d,-0x80(%rbp)
    0.00 :	  4aadb3:       e8 98 e2 ff ff          callq  4a9050 <_bt_getbuf>
    0.00 :	  4aadb8:       41 89 c4                mov    %eax,%r12d
         :	                rootblkno = BufferGetBlockNumber(rootbuf);
    0.00 :	  4aadbb:       89 c7                   mov    %eax,%edi
    0.00 :	  4aadbd:       e8 6e 92 1c 00          callq  674030 <BufferGetBlockNumber>
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aadc2:       45 85 e4                test   %r12d,%r12d
         :	                 * Get, initialize, write, and leave a lock of the appropriate type on
         :	                 * the new root page.  Since this is the first page in the tree, it's
         :	                 * a leaf as well as the root.
         :	                 */
         :	                rootbuf = _bt_getbuf(rel, P_NEW, BT_WRITE);
         :	                rootblkno = BufferGetBlockNumber(rootbuf);
    0.00 :	  4aadc5:       89 45 88                mov    %eax,-0x78(%rbp)
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aadc8:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aadcc:       0f 88 56 02 00 00       js     4ab028 <_bt_getroot+0x408>
    0.00 :	  4aadd2:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  4aadd7:       4c 63 e8                movslq %eax,%r13
    0.00 :	  4aadda:       49 c1 e5 0d             shl    $0xd,%r13
    0.00 :	  4aadde:       4c 03 2d 13 4d 71 00    add    0x714d13(%rip),%r13        # bbfaf8 <BufferBlocks>
         :	                rootopaque = (BTPageOpaque) PageGetSpecialPointer(rootpage);
    0.00 :	  4aade5:       41 0f b7 45 10          movzwl 0x10(%r13),%eax
         :	                metad->btm_root = rootblkno;
         :	                metad->btm_level = 0;
         :	                metad->btm_fastroot = rootblkno;
         :	                metad->btm_fastlevel = 0;
         :
         :	                MarkBufferDirty(rootbuf);
    0.00 :	  4aadea:       44 89 e7                mov    %r12d,%edi
         :	                 * a leaf as well as the root.
         :	                 */
         :	                rootbuf = _bt_getbuf(rel, P_NEW, BT_WRITE);
         :	                rootblkno = BufferGetBlockNumber(rootbuf);
         :	                rootpage = BufferGetPage(rootbuf);
         :	                rootopaque = (BTPageOpaque) PageGetSpecialPointer(rootpage);
    0.00 :	  4aaded:       49 8d 44 05 00          lea    0x0(%r13,%rax,1),%rax
         :	                rootopaque->btpo_prev = rootopaque->btpo_next = P_NONE;
    0.00 :	  4aadf2:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%rax)
    0.00 :	  4aadf9:       c7 00 00 00 00 00       movl   $0x0,(%rax)
         :	                rootopaque->btpo_flags = (BTP_LEAF | BTP_ROOT);
    0.00 :	  4aadff:       66 c7 40 0c 03 00       movw   $0x3,0xc(%rax)
         :	                rootopaque->btpo.level = 0;
    0.00 :	  4aae05:       c7 40 08 00 00 00 00    movl   $0x0,0x8(%rax)
         :	                rootopaque->btpo_cycleid = 0;
    0.00 :	  4aae0c:       66 c7 40 0e 00 00       movw   $0x0,0xe(%rax)
         :
         :	                /* NO ELOG(ERROR) till meta is updated */
         :	                START_CRIT_SECTION();
    0.00 :	  4aae12:       8b 05 84 f2 70 00       mov    0x70f284(%rip),%eax        # bba09c <CritSectionCount>
    0.00 :	  4aae18:       83 c0 01                add    $0x1,%eax
    0.00 :	  4aae1b:       89 05 7b f2 70 00       mov    %eax,0x70f27b(%rip)        # bba09c <CritSectionCount>
         :
         :	                metad->btm_root = rootblkno;
    0.00 :	  4aae21:       8b 45 88                mov    -0x78(%rbp),%eax
         :	                metad->btm_level = 0;
    0.00 :	  4aae24:       41 c7 47 0c 00 00 00    movl   $0x0,0xc(%r15)
    0.00 :	  4aae2b:       00 
         :	                metad->btm_fastroot = rootblkno;
         :	                metad->btm_fastlevel = 0;
    0.00 :	  4aae2c:       41 c7 47 14 00 00 00    movl   $0x0,0x14(%r15)
    0.00 :	  4aae33:       00 
         :	                rootopaque->btpo_cycleid = 0;
         :
         :	                /* NO ELOG(ERROR) till meta is updated */
         :	                START_CRIT_SECTION();
         :
         :	                metad->btm_root = rootblkno;
    0.00 :	  4aae34:       41 89 47 08             mov    %eax,0x8(%r15)
         :	                metad->btm_level = 0;
         :	                metad->btm_fastroot = rootblkno;
    0.00 :	  4aae38:       41 89 47 10             mov    %eax,0x10(%r15)
         :	                metad->btm_fastlevel = 0;
         :
         :	                MarkBufferDirty(rootbuf);
    0.00 :	  4aae3c:       44 89 45 80             mov    %r8d,-0x80(%rbp)
    0.00 :	  4aae40:       e8 ab 99 1c 00          callq  6747f0 <MarkBufferDirty>
         :	                MarkBufferDirty(metabuf);
    0.00 :	  4aae45:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aae49:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4aae4c:       e8 9f 99 1c 00          callq  6747f0 <MarkBufferDirty>
         :
         :	                /* XLOG stuff */
         :	                if (RelationNeedsWAL(rel))
    0.00 :	  4aae51:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  4aae55:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aae59:       80 78 6e 70             cmpb   $0x70,0x6e(%rax)
    0.00 :	  4aae5d:       0f 84 0a 02 00 00       je     4ab06d <_bt_getroot+0x44d>
         :
         :	                        PageSetLSN(rootpage, recptr);
         :	                        PageSetLSN(metapg, recptr);
         :	                }
         :
         :	                END_CRIT_SECTION();
    0.00 :	  4aae63:       8b 05 33 f2 70 00       mov    0x70f233(%rip),%eax        # bba09c <CritSectionCount>
         :	                /*
         :	                 * swap root write lock for read lock.  There is no danger of anyone
         :	                 * else accessing the new root page while it's unlocked, since no one
         :	                 * else knows where it is yet.
         :	                 */
         :	                LockBuffer(rootbuf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4aae69:       31 f6                   xor    %esi,%esi
    0.00 :	  4aae6b:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4aae6e:       44 89 45 80             mov    %r8d,-0x80(%rbp)
         :
         :	                        PageSetLSN(rootpage, recptr);
         :	                        PageSetLSN(metapg, recptr);
         :	                }
         :
         :	                END_CRIT_SECTION();
    0.00 :	  4aae72:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4aae75:       89 05 21 f2 70 00       mov    %eax,0x70f221(%rip)        # bba09c <CritSectionCount>
         :	                /*
         :	                 * swap root write lock for read lock.  There is no danger of anyone
         :	                 * else accessing the new root page while it's unlocked, since no one
         :	                 * else knows where it is yet.
         :	                 */
         :	                LockBuffer(rootbuf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4aae7b:       e8 90 98 1c 00          callq  674710 <LockBuffer>
         :	                LockBuffer(rootbuf, BT_READ);
    0.00 :	  4aae80:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4aae83:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  4aae88:       e8 83 98 1c 00          callq  674710 <LockBuffer>
         :	 * Lock and pin (refcount) are both dropped.
         :	 */
         :	void
         :	_bt_relbuf(Relation rel, Buffer buf)
         :	{
         :	        UnlockReleaseBuffer(buf);
    0.00 :	  4aae8d:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aae91:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4aae94:       e8 97 a0 1c 00          callq  674f30 <UnlockReleaseBuffer>
         :	        /*
         :	         * By here, we have a pin and read lock on the root page, and no lock set
         :	         * on the metadata page.  Return the root page's buffer.
         :	         */
         :	        return rootbuf;
         :	}
    0.00 :	  4aae99:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  4aae9d:       44 89 e0                mov    %r12d,%eax
    0.00 :	  4aaea0:       5b                      pop    %rbx
    0.00 :	  4aaea1:       41 5c                   pop    %r12
    0.00 :	  4aaea3:       41 5d                   pop    %r13
    0.00 :	  4aaea5:       41 5e                   pop    %r14
    0.00 :	  4aaea7:       41 5f                   pop    %r15
    0.00 :	  4aaea9:       c9                      leaveq 
    0.00 :	  4aaeaa:       c3                      retq   
    0.00 :	  4aaeab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        pfree(rel->rd_amcache);
         :	                rel->rd_amcache = NULL;
         :	        }
         :
         :	        metabuf = _bt_getbuf(rel, BTREE_METAPAGE, BT_READ);
         :	        metapg = BufferGetPage(metabuf);
    0.00 :	  4aaeb0:       48 8b 15 61 22 6d 00    mov    0x6d2261(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4aaeb7:       f7 d0                   not    %eax
    0.00 :	  4aaeb9:       48 98                   cltq   
    0.00 :	  4aaebb:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  4aaebf:       e9 15 fe ff ff          jmpq   4aacd9 <_bt_getroot+0xb9>
    0.00 :	  4aaec4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
         :
         :	                rootbuf = _bt_getbuf(rel, rootblkno, BT_READ);
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aaec8:       48 8b 15 49 22 6d 00    mov    0x6d2249(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4aaecf:       f7 d0                   not    %eax
    0.00 :	  4aaed1:       48 98                   cltq   
    0.00 :	  4aaed3:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  4aaed7:       e9 95 fd ff ff          jmpq   4aac71 <_bt_getroot+0x51>
    0.00 :	  4aaedc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                 * here than normal.  We *must* check that it's not deleted. If it's
         :	                 * not alone on its level, then we reject too --- this may be overly
         :	                 * paranoid but better safe than sorry.  Note we don't check P_ISROOT,
         :	                 * because that's not set in a "fast root".
         :	                 */
         :	                if (!P_IGNORE(rootopaque) &&
    0.00 :	  4aaee0:       8b 1a                   mov    (%rdx),%ebx
    0.00 :	  4aaee2:       85 db                   test   %ebx,%ebx
    0.00 :	  4aaee4:       0f 85 9f fd ff ff       jne    4aac89 <_bt_getroot+0x69>
    0.00 :	  4aaeea:       44 8b 5a 04             mov    0x4(%rdx),%r11d
    0.00 :	  4aaeee:       45 85 db                test   %r11d,%r11d
    0.00 :	  4aaef1:       0f 85 92 fd ff ff       jne    4aac89 <_bt_getroot+0x69>
    0.00 :	  4aaef7:       eb a0                   jmp    4aae99 <_bt_getroot+0x279>
    0.00 :	  4aaef9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * Lock and pin (refcount) are both dropped.
         :	 */
         :	void
         :	_bt_relbuf(Relation rel, Buffer buf)
         :	{
         :	        UnlockReleaseBuffer(buf);
    0.00 :	  4aaf00:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4aaf03:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  4aaf06:       e8 25 a0 1c 00          callq  674f30 <UnlockReleaseBuffer>
         :	        /*
         :	         * By here, we have a pin and read lock on the root page, and no lock set
         :	         * on the metadata page.  Return the root page's buffer.
         :	         */
         :	        return rootbuf;
         :	}
    0.00 :	  4aaf0b:       eb 8c                   jmp    4aae99 <_bt_getroot+0x279>
    0.00 :	  4aaf0d:       0f 1f 00                nopl   (%rax)
         :	        }
         :	        else
         :	        {
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
    0.00 :	  4aaf10:       41 8b 47 14             mov    0x14(%r15),%eax
         :
         :	                /*
         :	                 * Cache the metapage data for next time
         :	                 */
         :	                rel->rd_amcache = MemoryContextAlloc(rel->rd_indexcxt,
    0.00 :	  4aaf14:       49 8b be b8 00 00 00    mov    0xb8(%r14),%rdi
    0.00 :	  4aaf1b:       be 18 00 00 00          mov    $0x18,%esi
         :	                /* okay, metadata is correct, release lock on it */
         :	                _bt_relbuf(rel, metabuf);
         :	        }
         :	        else
         :	        {
         :	                rootblkno = metad->btm_fastroot;
    0.00 :	  4aaf20:       45 8b 6f 10             mov    0x10(%r15),%r13d
         :	                rootlevel = metad->btm_fastlevel;
         :
         :	                /*
         :	                 * Cache the metapage data for next time
         :	                 */
         :	                rel->rd_amcache = MemoryContextAlloc(rel->rd_indexcxt,
    0.00 :	  4aaf24:       44 89 45 80             mov    %r8d,-0x80(%rbp)
         :	        }
         :	        else
         :	        {
         :	                rootblkno = metad->btm_fastroot;
         :	                Assert(rootblkno != P_NONE);
         :	                rootlevel = metad->btm_fastlevel;
    0.00 :	  4aaf28:       89 45 8c                mov    %eax,-0x74(%rbp)
         :
         :	                /*
         :	                 * Cache the metapage data for next time
         :	                 */
         :	                rel->rd_amcache = MemoryContextAlloc(rel->rd_indexcxt,
    0.00 :	  4aaf2b:       e8 60 df 2e 00          callq  798e90 <MemoryContextAlloc>
    0.00 :	  4aaf30:       49 89 86 18 01 00 00    mov    %rax,0x118(%r14)
         :	                                                                                         sizeof(BTMetaPageData));
         :	                memcpy(rel->rd_amcache, metad, sizeof(BTMetaPageData));
    0.00 :	  4aaf37:       49 8b 17                mov    (%r15),%rdx
    0.00 :	  4aaf3a:       48 89 10                mov    %rdx,(%rax)
    0.00 :	  4aaf3d:       49 8b 57 08             mov    0x8(%r15),%rdx
    0.00 :	  4aaf41:       48 89 50 08             mov    %rdx,0x8(%rax)
    0.00 :	  4aaf45:       49 8b 57 10             mov    0x10(%r15),%rdx
    0.00 :	  4aaf49:       48 89 50 10             mov    %rdx,0x10(%rax)
    0.00 :	  4aaf4d:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4aaf51:       45 89 c4                mov    %r8d,%r12d
    0.00 :	  4aaf54:       eb 3a                   jmp    4aaf90 <_bt_getroot+0x370>
    0.00 :	  4aaf56:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4aaf5d:       00 00 00 
         :	                rootbuf = metabuf;
         :
         :	                for (;;)
         :	                {
         :	                        rootbuf = _bt_relandgetbuf(rel, rootbuf, rootblkno, BT_READ);
         :	                        rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aaf60:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  4aaf65:       48 63 d0                movslq %eax,%rdx
    0.00 :	  4aaf68:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  4aaf6c:       48 03 15 85 4b 71 00    add    0x714b85(%rip),%rdx        # bbfaf8 <BufferBlocks>
         :	                        rootopaque = (BTPageOpaque) PageGetSpecialPointer(rootpage);
    0.00 :	  4aaf73:       0f b7 42 10             movzwl 0x10(%rdx),%eax
    0.00 :	  4aaf77:       48 8d 1c 02             lea    (%rdx,%rax,1),%rbx
         :
         :	                        if (!P_IGNORE(rootopaque))
    0.00 :	  4aaf7b:       0f b7 43 0c             movzwl 0xc(%rbx),%eax
    0.00 :	  4aaf7f:       a8 14                   test   $0x14,%al
    0.00 :	  4aaf81:       74 3d                   je     4aafc0 <_bt_getroot+0x3a0>
         :	                                break;
         :
         :	                        /* it's dead, Jim.  step right one page */
         :	                        if (P_RIGHTMOST(rootopaque))
    0.00 :	  4aaf83:       44 8b 6b 04             mov    0x4(%rbx),%r13d
    0.00 :	  4aaf87:       45 85 ed                test   %r13d,%r13d
    0.00 :	  4aaf8a:       0f 84 af 00 00 00       je     4ab03f <_bt_getroot+0x41f>
         :	                 */
         :	                rootbuf = metabuf;
         :
         :	                for (;;)
         :	                {
         :	                        rootbuf = _bt_relandgetbuf(rel, rootbuf, rootblkno, BT_READ);
    0.00 :	  4aaf90:       44 89 e6                mov    %r12d,%esi
    0.00 :	  4aaf93:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  4aaf98:       44 89 ea                mov    %r13d,%edx
    0.00 :	  4aaf9b:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4aaf9e:       e8 3d e0 ff ff          callq  4a8fe0 <_bt_relandgetbuf>
         :	                        rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aafa3:       85 c0                   test   %eax,%eax
         :	                 */
         :	                rootbuf = metabuf;
         :
         :	                for (;;)
         :	                {
         :	                        rootbuf = _bt_relandgetbuf(rel, rootbuf, rootblkno, BT_READ);
    0.00 :	  4aafa5:       41 89 c4                mov    %eax,%r12d
         :	                        rootpage = BufferGetPage(rootbuf);
    0.00 :	  4aafa8:       79 b6                   jns    4aaf60 <_bt_getroot+0x340>
    0.00 :	  4aafaa:       48 8b 15 67 21 6d 00    mov    0x6d2167(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4aafb1:       f7 d0                   not    %eax
    0.00 :	  4aafb3:       48 98                   cltq   
    0.00 :	  4aafb5:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  4aafb9:       eb b8                   jmp    4aaf73 <_bt_getroot+0x353>
    0.00 :	  4aafbb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                         RelationGetRelationName(rel));
         :	                        rootblkno = rootopaque->btpo_next;
         :	                }
         :
         :	                /* Note: can't check btpo.level on deleted pages */
         :	                if (rootopaque->btpo.level != rootlevel)
    0.00 :	  4aafc0:       8b 45 8c                mov    -0x74(%rbp),%eax
    0.00 :	  4aafc3:       39 43 08                cmp    %eax,0x8(%rbx)
    0.00 :	  4aafc6:       0f 84 cd fe ff ff       je     4aae99 <_bt_getroot+0x279>
         :	                        elog(ERROR, "root page %u of index \"%s\" has level %u, expected %u",
    0.00 :	  4aafcc:       ba 50 47 7b 00          mov    $0x7b4750,%edx
    0.00 :	  4aafd1:       be 32 01 00 00          mov    $0x132,%esi
    0.00 :	  4aafd6:       bf 22 43 7b 00          mov    $0x7b4322,%edi
    0.00 :	  4aafdb:       e8 40 04 2d 00          callq  77b420 <elog_start>
    0.00 :	  4aafe0:       49 8b 4e 30             mov    0x30(%r14),%rcx
    0.00 :	  4aafe4:       44 8b 4d 8c             mov    -0x74(%rbp),%r9d
    0.00 :	  4aafe8:       44 89 ea                mov    %r13d,%edx
    0.00 :	  4aafeb:       44 8b 43 08             mov    0x8(%rbx),%r8d
    0.00 :	  4aafef:       be 58 46 7b 00          mov    $0x7b4658,%esi
    0.00 :	  4aaff4:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4aaff9:       31 c0                   xor    %eax,%eax
    0.00 :	  4aaffb:       e8 30 02 2d 00          callq  77b230 <elog_finish>
    0.00 :	  4ab000:       e9 0c fd ff ff          jmpq   4aad11 <_bt_getroot+0xf1>
    0.00 :	  4ab005:       0f 1f 00                nopl   (%rax)
         :	 * Lock and pin (refcount) are both dropped.
         :	 */
         :	void
         :	_bt_relbuf(Relation rel, Buffer buf)
         :	{
         :	        UnlockReleaseBuffer(buf);
    0.00 :	  4ab008:       44 89 c7                mov    %r8d,%edi
    0.00 :	  4ab00b:       e8 20 9f 1c 00          callq  674f30 <UnlockReleaseBuffer>
         :	                         * deadlocks, we have to release the metadata page and start all
         :	                         * over again.  (Is that really true? But it's hardly worth trying
         :	                         * to optimize this case.)
         :	                         */
         :	                        _bt_relbuf(rel, metabuf);
         :	                        return _bt_getroot(rel, access);
    0.00 :	  4ab010:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4ab013:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4ab016:       e8 05 fc ff ff          callq  4aac20 <_bt_getroot>
    0.00 :	  4ab01b:       41 89 c4                mov    %eax,%r12d
         :	        /*
         :	         * By here, we have a pin and read lock on the root page, and no lock set
         :	         * on the metadata page.  Return the root page's buffer.
         :	         */
         :	        return rootbuf;
         :	}
    0.00 :	  4ab01e:       e9 76 fe ff ff          jmpq   4aae99 <_bt_getroot+0x279>
    0.00 :	  4ab023:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * the new root page.  Since this is the first page in the tree, it's
         :	                 * a leaf as well as the root.
         :	                 */
         :	                rootbuf = _bt_getbuf(rel, P_NEW, BT_WRITE);
         :	                rootblkno = BufferGetBlockNumber(rootbuf);
         :	                rootpage = BufferGetPage(rootbuf);
    0.00 :	  4ab028:       44 89 e0                mov    %r12d,%eax
    0.00 :	  4ab02b:       48 8b 15 e6 20 6d 00    mov    0x6d20e6(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4ab032:       f7 d0                   not    %eax
    0.00 :	  4ab034:       48 98                   cltq   
    0.00 :	  4ab036:       4c 8b 2c c2             mov    (%rdx,%rax,8),%r13
    0.00 :	  4ab03a:       e9 a6 fd ff ff          jmpq   4aade5 <_bt_getroot+0x1c5>
         :	                        if (!P_IGNORE(rootopaque))
         :	                                break;
         :
         :	                        /* it's dead, Jim.  step right one page */
         :	                        if (P_RIGHTMOST(rootopaque))
         :	                                elog(ERROR, "no live root page found in index \"%s\"",
    0.00 :	  4ab03f:       ba 50 47 7b 00          mov    $0x7b4750,%edx
    0.00 :	  4ab044:       be 2a 01 00 00          mov    $0x12a,%esi
    0.00 :	  4ab049:       bf 22 43 7b 00          mov    $0x7b4322,%edi
    0.00 :	  4ab04e:       e8 cd 03 2d 00          callq  77b420 <elog_start>
    0.00 :	  4ab053:       49 8b 56 30             mov    0x30(%r14),%rdx
    0.00 :	  4ab057:       be 30 46 7b 00          mov    $0x7b4630,%esi
    0.00 :	  4ab05c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4ab061:       31 c0                   xor    %eax,%eax
    0.00 :	  4ab063:       e8 c8 01 2d 00          callq  77b230 <elog_finish>
    0.00 :	  4ab068:       e8 63 e4 fb ff          callq  4694d0 <abort@plt>
         :	                {
         :	                        xl_btree_newroot xlrec;
         :	                        XLogRecPtr      recptr;
         :	                        XLogRecData rdata;
         :
         :	                        xlrec.node = rel->rd_node;
    0.00 :	  4ab06d:       49 8b 06                mov    (%r14),%rax
         :	                        rdata.data = (char *) &xlrec;
         :	                        rdata.len = SizeOfBtreeNewroot;
         :	                        rdata.buffer = InvalidBuffer;
         :	                        rdata.next = NULL;
         :
         :	                        recptr = XLogInsert(RM_BTREE_ID, XLOG_BTREE_NEWROOT, &rdata);
    0.00 :	  4ab070:       48 8d 55 90             lea    -0x70(%rbp),%rdx
    0.00 :	  4ab074:       be a0 00 00 00          mov    $0xa0,%esi
    0.00 :	  4ab079:       bf 0b 00 00 00          mov    $0xb,%edi
         :	                        XLogRecPtr      recptr;
         :	                        XLogRecData rdata;
         :
         :	                        xlrec.node = rel->rd_node;
         :	                        xlrec.rootblk = rootblkno;
         :	                        xlrec.level = 0;
    0.00 :	  4ab07e:       c7 45 c0 00 00 00 00    movl   $0x0,-0x40(%rbp)
         :
         :	                        rdata.data = (char *) &xlrec;
         :	                        rdata.len = SizeOfBtreeNewroot;
    0.00 :	  4ab085:       c7 45 98 14 00 00 00    movl   $0x14,-0x68(%rbp)
         :	                        rdata.buffer = InvalidBuffer;
    0.00 :	  4ab08c:       c7 45 9c 00 00 00 00    movl   $0x0,-0x64(%rbp)
         :	                        rdata.next = NULL;
    0.00 :	  4ab093:       48 c7 45 a8 00 00 00    movq   $0x0,-0x58(%rbp)
    0.00 :	  4ab09a:       00 
         :	                {
         :	                        xl_btree_newroot xlrec;
         :	                        XLogRecPtr      recptr;
         :	                        XLogRecData rdata;
         :
         :	                        xlrec.node = rel->rd_node;
    0.00 :	  4ab09b:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  4ab09f:       41 8b 46 08             mov    0x8(%r14),%eax
    0.00 :	  4ab0a3:       89 45 b8                mov    %eax,-0x48(%rbp)
         :	                        xlrec.rootblk = rootblkno;
    0.00 :	  4ab0a6:       8b 45 88                mov    -0x78(%rbp),%eax
    0.00 :	  4ab0a9:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	                        xlrec.level = 0;
         :
         :	                        rdata.data = (char *) &xlrec;
    0.00 :	  4ab0ac:       48 8d 45 b0             lea    -0x50(%rbp),%rax
    0.00 :	  4ab0b0:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	                        rdata.len = SizeOfBtreeNewroot;
         :	                        rdata.buffer = InvalidBuffer;
         :	                        rdata.next = NULL;
         :
         :	                        recptr = XLogInsert(RM_BTREE_ID, XLOG_BTREE_NEWROOT, &rdata);
    0.00 :	  4ab0b4:       e8 67 9e 02 00          callq  4d4f20 <XLogInsert>
         :
         :	                        PageSetLSN(rootpage, recptr);
    0.00 :	  4ab0b9:       48 89 c2                mov    %rax,%rdx
    0.00 :	  4ab0bc:       41 89 45 04             mov    %eax,0x4(%r13)
    0.00 :	  4ab0c0:       48 c1 ea 20             shr    $0x20,%rdx
    0.00 :	  4ab0c4:       41 89 55 00             mov    %edx,0x0(%r13)
         :	                        PageSetLSN(metapg, recptr);
    0.00 :	  4ab0c8:       89 13                   mov    %edx,(%rbx)
    0.00 :	  4ab0ca:       89 43 04                mov    %eax,0x4(%rbx)
    0.00 :	  4ab0cd:       44 8b 45 80             mov    -0x80(%rbp),%r8d
    0.00 :	  4ab0d1:       e9 8d fd ff ff          jmpq   4aae63 <_bt_getroot+0x243>
         :	                                (errcode(ERRCODE_INDEX_CORRUPTED),
         :	                                 errmsg("index \"%s\" is not a btree",
         :	                                                RelationGetRelationName(rel))));
         :
         :	        if (metad->btm_version != BTREE_VERSION)
         :	                ereport(ERROR,
    0.00 :	  4ab0d6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  4ab0d9:       b9 50 47 7b 00          mov    $0x7b4750,%ecx
    0.00 :	  4ab0de:       ba ae 00 00 00          mov    $0xae,%edx
    0.00 :	  4ab0e3:       be 22 43 7b 00          mov    $0x7b4322,%esi
    0.00 :	  4ab0e8:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4ab0ed:       e8 ce f9 2c 00          callq  77aac0 <errstart>
    0.00 :	  4ab0f2:       84 c0                   test   %al,%al
    0.00 :	  4ab0f4:       0f 84 17 fc ff ff       je     4aad11 <_bt_getroot+0xf1>
    0.00 :	  4ab0fa:       41 8b 57 04             mov    0x4(%r15),%edx
    0.00 :	  4ab0fe:       49 8b 76 30             mov    0x30(%r14),%rsi
    0.00 :	  4ab102:       b9 02 00 00 00          mov    $0x2,%ecx
    0.00 :	  4ab107:       bf e8 45 7b 00          mov    $0x7b45e8,%edi
    0.00 :	  4ab10c:       31 c0                   xor    %eax,%eax
    0.00 :	  4ab10e:       e8 8d 17 2d 00          callq  77c8a0 <errmsg>
    0.00 :	  4ab113:       e9 18 fc ff ff          jmpq   4aad30 <_bt_getroot+0x110>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1040
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004acb70 <_bt_next>:
         :	 *              On failure exit (no more tuples), we release pin and set
         :	 *              so->currPos.buf to InvalidBuffer.
         :	 */
         :	bool
         :	_bt_next(IndexScanDesc scan, ScanDirection dir)
         :	{
    0.00 :	  4acb70:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:1040
  100.00 :	  4acb71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4acb74:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  4acb78:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  4acb7c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  4acb7f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  4acb83:       48 83 ec 20             sub    $0x20,%rsp
         :
         :	        /*
         :	         * Advance to next tuple on current page; or if there's no more, try to
         :	         * step to the next page with data.
         :	         */
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4acb87:       83 fe 01                cmp    $0x1,%esi
         :	 *              On failure exit (no more tuples), we release pin and set
         :	 *              so->currPos.buf to InvalidBuffer.
         :	 */
         :	bool
         :	_bt_next(IndexScanDesc scan, ScanDirection dir)
         :	{
    0.00 :	  4acb8a:       41 89 f5                mov    %esi,%r13d
         :	        BTScanOpaque so = (BTScanOpaque) scan->opaque;
    0.00 :	  4acb8d:       48 8b 5f 38             mov    0x38(%rdi),%rbx
         :
         :	        /*
         :	         * Advance to next tuple on current page; or if there's no more, try to
         :	         * step to the next page with data.
         :	         */
         :	        if (ScanDirectionIsForward(dir))
    0.00 :	  4acb91:       74 7d                   je     4acc10 <_bt_next+0xa0>
         :	                        LockBuffer(so->currPos.buf, BUFFER_LOCK_UNLOCK);
         :	                }
         :	        }
         :	        else
         :	        {
         :	                if (--so->currPos.itemIndex < so->currPos.firstItem)
    0.00 :	  4acb93:       8b 43 6c                mov    0x6c(%rbx),%eax
    0.00 :	  4acb96:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4acb99:       3b 43 64                cmp    0x64(%rbx),%eax
    0.00 :	  4acb9c:       89 43 6c                mov    %eax,0x6c(%rbx)
    0.00 :	  4acb9f:       7c 4f                   jl     4acbf0 <_bt_next+0x80>
         :	                        LockBuffer(so->currPos.buf, BUFFER_LOCK_UNLOCK);
         :	                }
         :	        }
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
    0.00 :	  4acba1:       48 98                   cltq   
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
    0.00 :	  4acba3:       41 80 7c 24 30 00       cmpb   $0x0,0x30(%r12)
         :	                }
         :	        }
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
    0.00 :	  4acba9:       48 8d 04 80             lea    (%rax,%rax,4),%rax
    0.00 :	  4acbad:       48 8d 54 43 60          lea    0x60(%rbx,%rax,2),%rdx
    0.00 :	  4acbb2:       8b 42 10                mov    0x10(%rdx),%eax
    0.00 :	  4acbb5:       41 89 44 24 54          mov    %eax,0x54(%r12)
    0.00 :	  4acbba:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  4acbbe:       66 41 89 44 24 58       mov    %ax,0x58(%r12)
         :	        if (scan->xs_want_itup)
    0.00 :	  4acbc4:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  4acbc9:       74 12                   je     4acbdd <_bt_next+0x6d>
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4acbcb:       0f b7 42 18             movzwl 0x18(%rdx),%eax
    0.00 :	  4acbcf:       48 03 43 40             add    0x40(%rbx),%rax
    0.00 :	  4acbd3:       49 89 44 24 40          mov    %rax,0x40(%r12)
    0.00 :	  4acbd8:       b8 01 00 00 00          mov    $0x1,%eax
         :
         :	        return true;
         :	}
    0.00 :	  4acbdd:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  4acbe1:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  4acbe5:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  4acbe9:       c9                      leaveq 
    0.00 :	  4acbea:       c3                      retq   
    0.00 :	  4acbeb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                if (--so->currPos.itemIndex < so->currPos.firstItem)
         :	                {
         :	                        /* We must acquire lock before applying _bt_steppage */
         :	                        Assert(BufferIsValid(so->currPos.buf));
         :	                        LockBuffer(so->currPos.buf, BT_READ);
    0.00 :	  4acbf0:       8b 7b 54                mov    0x54(%rbx),%edi
    0.00 :	  4acbf3:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  4acbf8:       e8 13 7b 1c 00          callq  674710 <LockBuffer>
         :	                        if (!_bt_steppage(scan, dir))
    0.00 :	  4acbfd:       44 89 ee                mov    %r13d,%esi
    0.00 :	  4acc00:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4acc03:       e8 78 fa ff ff          callq  4ac680 <_bt_steppage>
    0.00 :	  4acc08:       84 c0                   test   %al,%al
    0.00 :	  4acc0a:       75 30                   jne    4acc3c <_bt_next+0xcc>
         :
         :	        /* OK, itemIndex says what to return */
         :	        currItem = &so->currPos.items[so->currPos.itemIndex];
         :	        scan->xs_ctup.t_self = currItem->heapTid;
         :	        if (scan->xs_want_itup)
         :	                scan->xs_itup = (IndexTuple) (so->currTuples + currItem->tupleOffset);
    0.00 :	  4acc0c:       31 c0                   xor    %eax,%eax
    0.00 :	  4acc0e:       eb cd                   jmp    4acbdd <_bt_next+0x6d>
         :	         * Advance to next tuple on current page; or if there's no more, try to
         :	         * step to the next page with data.
         :	         */
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                if (++so->currPos.itemIndex > so->currPos.lastItem)
    0.00 :	  4acc10:       8b 43 6c                mov    0x6c(%rbx),%eax
    0.00 :	  4acc13:       83 c0 01                add    $0x1,%eax
    0.00 :	  4acc16:       3b 43 68                cmp    0x68(%rbx),%eax
    0.00 :	  4acc19:       89 43 6c                mov    %eax,0x6c(%rbx)
    0.00 :	  4acc1c:       7e 83                   jle    4acba1 <_bt_next+0x31>
         :	                {
         :	                        /* We must acquire lock before applying _bt_steppage */
         :	                        Assert(BufferIsValid(so->currPos.buf));
         :	                        LockBuffer(so->currPos.buf, BT_READ);
    0.00 :	  4acc1e:       8b 7b 54                mov    0x54(%rbx),%edi
    0.00 :	  4acc21:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  4acc26:       e8 e5 7a 1c 00          callq  674710 <LockBuffer>
         :	                        if (!_bt_steppage(scan, dir))
    0.00 :	  4acc2b:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  4acc30:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  4acc33:       e8 48 fa ff ff          callq  4ac680 <_bt_steppage>
    0.00 :	  4acc38:       84 c0                   test   %al,%al
    0.00 :	  4acc3a:       74 d0                   je     4acc0c <_bt_next+0x9c>
         :	                        Assert(BufferIsValid(so->currPos.buf));
         :	                        LockBuffer(so->currPos.buf, BT_READ);
         :	                        if (!_bt_steppage(scan, dir))
         :	                                return false;
         :	                        /* Drop the lock, but not pin, on the new page */
         :	                        LockBuffer(so->currPos.buf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4acc3c:       8b 7b 54                mov    0x54(%rbx),%edi
    0.00 :	  4acc3f:       31 f6                   xor    %esi,%esi
    0.00 :	  4acc41:       e8 ca 7a 1c 00          callq  674710 <LockBuffer>
    0.00 :	  4acc46:       8b 43 6c                mov    0x6c(%rbx),%eax
    0.00 :	  4acc49:       e9 53 ff ff ff          jmpq   4acba1 <_bt_next+0x31>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:292
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ace60 <_bt_binsrch>:
         :	_bt_binsrch(Relation rel,
         :	                        Buffer buf,
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        bool nextkey)
         :	{
    0.00 :	  4ace60:       55                      push   %rbp
    0.00 :	  4ace61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ace64:       41 57                   push   %r15
    0.00 :	  4ace66:       41 56                   push   %r14
    0.00 :	  4ace68:       41 55                   push   %r13
    0.00 :	  4ace6a:       41 54                   push   %r12
    0.00 :	  4ace6c:       53                      push   %rbx
    0.00 :	  4ace6d:       48 83 ec 28             sub    $0x28,%rsp
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4ace71:       85 f6                   test   %esi,%esi
         :	_bt_binsrch(Relation rel,
         :	                        Buffer buf,
         :	                        int keysz,
         :	                        ScanKey scankey,
         :	                        bool nextkey)
         :	{
    0.00 :	  4ace73:       48 89 4d b0             mov    %rcx,-0x50(%rbp)
    0.00 :	  4ace77:       48 89 7d c0             mov    %rdi,-0x40(%rbp)
    0.00 :	  4ace7b:       89 55 bc                mov    %edx,-0x44(%rbp)
    0.00 :	  4ace7e:       44 89 c1                mov    %r8d,%ecx
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4ace81:       0f 88 c9 00 00 00       js     4acf50 <_bt_binsrch+0xf0>
    0.00 :	  4ace87:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  4ace8a:       4c 63 f0                movslq %eax,%r14
    0.00 :	  4ace8d:       49 c1 e6 0d             shl    $0xd,%r14
    0.00 :	  4ace91:       4c 03 35 60 2c 71 00    add    0x712c60(%rip),%r14        # bbfaf8 <BufferBlocks>
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:292
  100.00 :	  4ace98:       41 0f b7 46 10          movzwl 0x10(%r14),%eax
    0.00 :	  4ace9d:       49 8d 04 06             lea    (%r14,%rax,1),%rax
    0.00 :	  4acea1:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :
         :	        low = P_FIRSTDATAKEY(opaque);
    0.00 :	  4acea5:       83 78 04 01             cmpl   $0x1,0x4(%rax)
         :	        high = PageGetMaxOffsetNumber(page);
    0.00 :	  4acea9:       41 0f b7 46 0c          movzwl 0xc(%r14),%eax
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
         :	        opaque = (BTPageOpaque) PageGetSpecialPointer(page);
         :
         :	        low = P_FIRSTDATAKEY(opaque);
    0.00 :	  4aceae:       45 19 ed                sbb    %r13d,%r13d
    0.00 :	  4aceb1:       41 83 c5 02             add    $0x2,%r13d
         :	        high = PageGetMaxOffsetNumber(page);
    0.00 :	  4aceb5:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  4aceb9:       0f 86 7f 00 00 00       jbe    4acf3e <_bt_binsrch+0xde>
    0.00 :	  4acebf:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4acec2:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4acec6:       48 c1 e8 02             shr    $0x2,%rax
         :	         * this covers two cases: the page is really empty (no keys), or it
         :	         * contains only a high key.  The latter case is possible after vacuuming.
         :	         * This can never happen on an internal page, however, since they are
         :	         * never empty (an internal page must have children).
         :	         */
         :	        if (high < low)
    0.00 :	  4aceca:       66 41 39 c5             cmp    %ax,%r13w
    0.00 :	  4acece:       77 6e                   ja     4acf3e <_bt_binsrch+0xde>
         :	         * For nextkey=true (cmpval=0), the loop invariant is: all slots before
         :	         * 'low' are <= scan key, all slots at or after 'high' are > scan key.
         :	         *
         :	         * We can fall out when high == low.
         :	         */
         :	        high++;                                         /* establish the loop invariant for high */
    0.00 :	  4aced0:       44 8d 60 01             lea    0x1(%rax),%r12d
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
    0.00 :	  4aced4:       31 c0                   xor    %eax,%eax
    0.00 :	  4aced6:       84 c9                   test   %cl,%cl
    0.00 :	  4aced8:       0f 94 c0                sete   %al
    0.00 :	  4acedb:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :
         :	        while (high > low)
    0.00 :	  4acede:       66 45 39 e5             cmp    %r12w,%r13w
    0.00 :	  4acee2:       73 4c                   jae    4acf30 <_bt_binsrch+0xd0>
    0.00 :	  4acee4:       45 0f b7 fd             movzwl %r13w,%r15d
    0.00 :	  4acee8:       eb 0f                   jmp    4acef9 <_bt_binsrch+0x99>
    0.00 :	  4aceea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  4acef0:       66 44 39 eb             cmp    %r13w,%bx
    0.00 :	  4acef4:       41 89 dc                mov    %ebx,%r12d
    0.00 :	  4acef7:       76 37                   jbe    4acf30 <_bt_binsrch+0xd0>
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acef9:       41 0f b7 c4             movzwl %r12w,%eax
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acefd:       8b 75 bc                mov    -0x44(%rbp),%esi
    0.00 :	  4acf00:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
         :
         :	        while (high > low)
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acf04:       44 29 f8                sub    %r15d,%eax
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acf07:       4c 89 f1                mov    %r14,%rcx
         :
         :	        cmpval = nextkey ? 0 : 1;       /* select comparison value */
         :
         :	        while (high > low)
         :	        {
         :	                OffsetNumber mid = low + ((high - low) / 2);
    0.00 :	  4acf0a:       89 c2                   mov    %eax,%edx
    0.00 :	  4acf0c:       c1 ea 1f                shr    $0x1f,%edx
    0.00 :	  4acf0f:       01 c2                   add    %eax,%edx
    0.00 :	  4acf11:       d1 fa                   sar    %edx
    0.00 :	  4acf13:       41 8d 5c 15 00          lea    0x0(%r13,%rdx,1),%ebx
         :
         :	                /* We have low <= mid < high, so mid points at a real slot */
         :
         :	                result = _bt_compare(rel, keysz, scankey, page, mid);
    0.00 :	  4acf18:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  4acf1c:       44 0f b7 c3             movzwl %bx,%r8d
    0.00 :	  4acf20:       e8 2b fd ff ff          callq  4acc50 <_bt_compare>
         :
         :	                if (result >= cmpval)
    0.00 :	  4acf25:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  4acf28:       7f c6                   jg     4acef0 <_bt_binsrch+0x90>
         :	                        low = mid + 1;
    0.00 :	  4acf2a:       44 8d 6b 01             lea    0x1(%rbx),%r13d
    0.00 :	  4acf2e:       eb ae                   jmp    4acede <_bt_binsrch+0x7e>
         :	         * past the last slot on the page.
         :	         *
         :	         * On a leaf page, we always return the first key >= scan key (resp. >
         :	         * scan key), which could be the last slot + 1.
         :	         */
         :	        if (P_ISLEAF(opaque))
    0.00 :	  4acf30:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  4acf34:       f6 40 0c 01             testb  $0x1,0xc(%rax)
    0.00 :	  4acf38:       75 04                   jne    4acf3e <_bt_binsrch+0xde>
         :	         * On a non-leaf page, return the last key < scan key (resp. <= scan key).
         :	         * There must be one if _bt_compare() is playing by the rules.
         :	         */
         :	        Assert(low > P_FIRSTDATAKEY(opaque));
         :
         :	        return OffsetNumberPrev(low);
    0.00 :	  4acf3a:       41 83 ed 01             sub    $0x1,%r13d
         :	}
    0.00 :	  4acf3e:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  4acf42:       44 89 e8                mov    %r13d,%eax
    0.00 :	  4acf45:       5b                      pop    %rbx
    0.00 :	  4acf46:       41 5c                   pop    %r12
    0.00 :	  4acf48:       41 5d                   pop    %r13
    0.00 :	  4acf4a:       41 5e                   pop    %r14
    0.00 :	  4acf4c:       41 5f                   pop    %r15
    0.00 :	  4acf4e:       c9                      leaveq 
    0.00 :	  4acf4f:       c3                      retq   
         :	        OffsetNumber low,
         :	                                high;
         :	        int32           result,
         :	                                cmpval;
         :
         :	        page = BufferGetPage(buf);
    0.00 :	  4acf50:       48 8b 05 c1 01 6d 00    mov    0x6d01c1(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4acf57:       f7 d6                   not    %esi
    0.00 :	  4acf59:       48 63 d6                movslq %esi,%rdx
    0.00 :	  4acf5c:       4c 8b 34 d0             mov    (%rax,%rdx,8),%r14
    0.00 :	  4acf60:       e9 33 ff ff ff          jmpq   4ace98 <_bt_binsrch+0x38>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:476
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ac4a0 <ExecProcNode>:
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4a0:       0f b6 05 e9 db 60 00    movzbl 0x60dbe9(%rip),%eax        # bba090 <InterruptPending>
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4a7:       55                      push   %rbp
    0.00 :	  5ac4a8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ac4ab:       41 54                   push   %r12
    0.00 :	  5ac4ad:       49 89 fc                mov    %rdi,%r12
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b0:       84 c0                   test   %al,%al
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4b2:       53                      push   %rbx
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b3:       75 6b                   jne    5ac520 <ExecProcNode+0x80>
         :
         :	        if (node->chgParam != NULL) /* something changed */
    0.00 :	  5ac4b5:       49 83 7c 24 50 00       cmpq   $0x0,0x50(%r12)
    0.00 :	  5ac4bb:       74 08                   je     5ac4c5 <ExecProcNode+0x25>
         :	                ExecReScan(node);               /* let ReScan handle this */
    0.00 :	  5ac4bd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac4c0:       e8 db bf ff ff          callq  5a84a0 <ExecReScan>
         :
         :	        if (node->instrument)
    0.00 :	  5ac4c5:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac4ca:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac4cd:       74 05                   je     5ac4d4 <ExecProcNode+0x34>
         :	                InstrStartNode(node->instrument);
    0.00 :	  5ac4cf:       e8 2c ba 00 00          callq  5b7f00 <InstrStartNode>
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac4d4:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ac4d8:       2d c9 00 00 00          sub    $0xc9,%eax
    0.00 :	  5ac4dd:       83 f8 21                cmp    $0x21,%eax
    0.00 :	  5ac4e0:       76 2e                   jbe    5ac510 <ExecProcNode+0x70>
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
         :	                        break;
         :
         :	                default:
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
    0.00 :	  5ac4e2:       ba e2 a3 88 00          mov    $0x88a3e2,%edx
    0.00 :	  5ac4e7:       be f8 01 00 00          mov    $0x1f8,%esi
    0.00 :	  5ac4ec:       bf 75 a0 88 00          mov    $0x88a075,%edi
    0.00 :	  5ac4f1:       e8 2a ef 1c 00          callq  77b420 <elog_start>
    0.00 :	  5ac4f6:       41 8b 14 24             mov    (%r12),%edx
    0.00 :	  5ac4fa:       be 5c 17 87 00          mov    $0x87175c,%esi
    0.00 :	  5ac4ff:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ac504:       31 c0                   xor    %eax,%eax
    0.00 :	  5ac506:       e8 25 ed 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5ac50b:       e8 c0 cf eb ff          callq  4694d0 <abort@plt>
         :	                ExecReScan(node);               /* let ReScan handle this */
         :
         :	        if (node->instrument)
         :	                InstrStartNode(node->instrument);
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac510:       89 c0                   mov    %eax,%eax
    0.00 :	  5ac512:       ff 24 c5 a0 a1 88 00    jmpq   *0x88a1a0(,%rax,8)
    0.00 :	  5ac519:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac520:       e8 7b fd 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5ac525:       eb 8e                   jmp    5ac4b5 <ExecProcNode+0x15>
    0.00 :	  5ac527:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ac52e:       00 00 
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
         :	                        break;
         :
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
    0.00 :	  5ac530:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac533:       e8 a8 3c 01 00          callq  5c01e0 <ExecLimit>
    0.00 :	  5ac538:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5ac53b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
    0.00 :	  5ac540:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac545:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac548:       74 20                   je     5ac56a <ExecProcNode+0xca>
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac54a:       48 85 db                test   %rbx,%rbx
    0.00 :	  5ac54d:       0f 84 ed 01 00 00       je     5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac553:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5ac557:       0f 85 e3 01 00 00       jne    5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac55d:       f2 0f 10 05 f3 2b 20    movsd  0x202bf3(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5ac564:       00 
    0.00 :	  5ac565:       e8 66 b6 00 00          callq  5b7bd0 <InstrStopNode>
         :
         :	        return result;
         :	}
    0.00 :	  5ac56a:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5ac56d:       5b                      pop    %rbx
    0.00 :	  5ac56e:       41 5c                   pop    %r12
    0.00 :	  5ac570:       c9                      leaveq 
    0.00 :	  5ac571:       c3                      retq   
    0.00 :	  5ac572:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
         :	                        break;
         :
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
    0.00 :	  5ac578:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac57b:       e8 a0 40 01 00          callq  5c0620 <ExecLockRows>
    0.00 :	  5ac580:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac583:       eb bb                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac585:       0f 1f 00                nopl   (%rax)
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
         :	                        break;
         :
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
    0.00 :	  5ac588:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac58b:       e8 60 98 01 00          callq  5c5df0 <ExecSetOp>
    0.00 :	  5ac590:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac593:       eb ab                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac595:       0f 1f 00                nopl   (%rax)
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
         :	                        break;
         :
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
    0.00 :	  5ac598:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac59b:       e8 d0 02 01 00          callq  5bc870 <ExecHash>
    0.00 :	  5ac5a0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5a3:       eb 9b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5a5:       0f 1f 00                nopl   (%rax)
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
         :	                        break;
         :
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
    0.00 :	  5ac5a8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5ab:       e8 20 a0 01 00          callq  5c65d0 <ExecUnique>
    0.00 :	  5ac5b0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5b3:       eb 8b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5b5:       0f 1f 00                nopl   (%rax)
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
         :	                        break;
         :
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
    0.00 :	  5ac5b8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5bb:       e8 90 00 02 00          callq  5cc650 <ExecWindowAgg>
    0.00 :	  5ac5c0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5c3:       e9 78 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ac5cf:       00 
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
         :	                        break;
         :
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:476
  100.00 :	  5ac5d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5d3:       e8 a8 d7 00 00          callq  5b9d80 <ExecAgg>
    0.00 :	  5ac5d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5db:       e9 60 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
         :	                        break;
         :
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
    0.00 :	  5ac5e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5e3:       e8 88 ab 01 00          callq  5c7170 <ExecGroup>
    0.00 :	  5ac5e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5eb:       e9 50 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
         :	                        break;
         :
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
    0.00 :	  5ac5f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5f3:       e8 48 9d 01 00          callq  5c6340 <ExecSort>
    0.00 :	  5ac5f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5fb:       e9 40 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * materialization nodes
         :	                         */
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
    0.00 :	  5ac600:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac603:       e8 38 47 01 00          callq  5c0d40 <ExecMaterial>
    0.00 :	  5ac608:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac60b:       e9 30 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
         :	                        break;
         :
         :	                case T_HashJoinState:
         :	                        result = ExecHashJoin((HashJoinState *) node);
    0.00 :	  5ac610:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac613:       e8 88 14 01 00          callq  5bdaa0 <ExecHashJoin>
    0.00 :	  5ac618:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac61b:       e9 20 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
         :	                        break;
         :
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
    0.00 :	  5ac620:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac623:       e8 08 5a 01 00          callq  5c2030 <ExecMergeJoin>
    0.00 :	  5ac628:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac62b:       e9 10 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * join nodes
         :	                         */
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
    0.00 :	  5ac630:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac633:       e8 08 7c 01 00          callq  5c4240 <ExecNestLoop>
    0.00 :	  5ac638:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac63b:       e9 00 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
         :	                        break;
         :
         :	                case T_ForeignScanState:
         :	                        result = ExecForeignScan((ForeignScanState *) node);
    0.00 :	  5ac640:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac643:       e8 f8 d2 01 00          callq  5c9940 <ExecForeignScan>
    0.00 :	  5ac648:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac64b:       e9 f0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
         :	                        break;
         :
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
    0.00 :	  5ac650:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac653:       e8 f8 a8 01 00          callq  5c6f50 <ExecWorkTableScan>
    0.00 :	  5ac658:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac65b:       e9 e0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
         :	                        break;
         :
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
    0.00 :	  5ac660:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac663:       e8 28 a6 01 00          callq  5c6c90 <ExecCteScan>
    0.00 :	  5ac668:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac66b:       e9 d0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
         :	                        break;
         :
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
    0.00 :	  5ac670:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac673:       e8 18 a2 01 00          callq  5c6890 <ExecValuesScan>
    0.00 :	  5ac678:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac67b:       e9 c0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
         :	                        break;
         :
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
    0.00 :	  5ac680:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac683:       e8 28 86 01 00          callq  5c4cb0 <ExecFunctionScan>
    0.00 :	  5ac688:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac68b:       e9 b0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
         :	                        break;
         :
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
    0.00 :	  5ac690:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac693:       e8 d8 c7 01 00          callq  5c8e70 <ExecSubqueryScan>
    0.00 :	  5ac698:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac69b:       e9 a0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
         :	                        break;
         :
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
    0.00 :	  5ac6a0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6a3:       e8 58 ca 01 00          callq  5c9100 <ExecTidScan>
    0.00 :	  5ac6a8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6ab:       e9 90 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        break;
         :
         :	                        /* BitmapIndexScanState does not yield tuples */
         :
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
    0.00 :	  5ac6b0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6b3:       e8 68 e8 00 00          callq  5baf20 <ExecBitmapHeapScan>
    0.00 :	  5ac6b8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6bb:       e9 80 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
         :	                        break;
         :
         :	                case T_IndexOnlyScanState:
         :	                        result = ExecIndexOnlyScan((IndexOnlyScanState *) node);
    0.00 :	  5ac6c0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6c3:       e8 b8 33 01 00          callq  5bfa80 <ExecIndexOnlyScan>
    0.00 :	  5ac6c8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6cb:       e9 70 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
         :	                        break;
         :
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
    0.00 :	  5ac6d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6d3:       e8 08 2e 01 00          callq  5bf4e0 <ExecIndexScan>
    0.00 :	  5ac6d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6db:       e9 60 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * scan nodes
         :	                         */
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
    0.00 :	  5ac6e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6e3:       e8 28 92 01 00          callq  5c5910 <ExecSeqScan>
    0.00 :	  5ac6e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6eb:       e9 50 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
         :	                        break;
         :
         :	                case T_RecursiveUnionState:
         :	                        result = ExecRecursiveUnion((RecursiveUnionState *) node);
    0.00 :	  5ac6f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6f3:       e8 d8 8b 01 00          callq  5c52d0 <ExecRecursiveUnion>
    0.00 :	  5ac6f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6fb:       e9 40 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
         :	                        break;
         :
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
    0.00 :	  5ac700:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac703:       e8 c8 48 01 00          callq  5c0fd0 <ExecMergeAppend>
    0.00 :	  5ac708:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac70b:       e9 30 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
         :	                        break;
         :
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
    0.00 :	  5ac710:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac713:       e8 68 ba 00 00          callq  5b8180 <ExecAppend>
    0.00 :	  5ac718:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac71b:       e9 20 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
         :	                        break;
         :
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
    0.00 :	  5ac720:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac723:       e8 d8 6a 01 00          callq  5c3200 <ExecModifyTable>
    0.00 :	  5ac728:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac72b:       e9 10 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	        {
         :	                        /*
         :	                         * control nodes
         :	                         */
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
    0.00 :	  5ac730:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac733:       e8 08 8f 01 00          callq  5c5640 <ExecResult>
    0.00 :	  5ac738:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac73b:       e9 00 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac740:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5ac744:       e9 1c fe ff ff          jmpq   5ac565 <ExecProcNode+0xc5>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:537
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad8e0 <ExecEvalAggref>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalAggref(AggrefExprState *aggref, ExprContext *econtext,
         :	                           bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5ad8e0:       55                      push   %rbp
         :	        if (isDone)
    0.00 :	  5ad8e1:       48 85 c9                test   %rcx,%rcx
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalAggref(AggrefExprState *aggref, ExprContext *econtext,
         :	                           bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5ad8e4:       49 89 d0                mov    %rdx,%r8
    0.00 :	  5ad8e7:       48 89 e5                mov    %rsp,%rbp
         :	        if (isDone)
    0.00 :	  5ad8ea:       74 06                   je     5ad8f2 <ExecEvalAggref+0x12>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5ad8ec:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        if (econtext->ecxt_aggvalues == NULL)           /* safety check */
    0.00 :	  5ad8f2:       48 83 7e 40 00          cmpq   $0x0,0x40(%rsi)
    0.00 :	  5ad8f7:       74 1d                   je     5ad916 <ExecEvalAggref+0x36>
         :	                elog(ERROR, "no aggregates in this expression context");
         :
         :	        *isNull = econtext->ecxt_aggnulls[aggref->aggno];
    0.00 :	  5ad8f9:       48 63 57 30             movslq 0x30(%rdi),%rdx
    0.00 :	  5ad8fd:       48 8b 46 48             mov    0x48(%rsi),%rax
    0.00 :	  5ad901:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:537
  100.00 :	  5ad905:       41 88 00                mov    %al,(%r8)
    0.00 :	  5ad908:       48 63 57 30             movslq 0x30(%rdi),%rdx
    0.00 :	  5ad90c:       48 8b 46 40             mov    0x40(%rsi),%rax
    0.00 :	  5ad910:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
         :	        return econtext->ecxt_aggvalues[aggref->aggno];
         :	}
    0.00 :	  5ad914:       c9                      leaveq 
    0.00 :	  5ad915:       c3                      retq   
         :	{
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        if (econtext->ecxt_aggvalues == NULL)           /* safety check */
         :	                elog(ERROR, "no aggregates in this expression context");
    0.00 :	  5ad916:       ba d3 af 88 00          mov    $0x88afd3,%edx
    0.00 :	  5ad91b:       be 17 02 00 00          mov    $0x217,%esi
    0.00 :	  5ad920:       bf fc a3 88 00          mov    $0x88a3fc,%edi
    0.00 :	  5ad925:       e8 f6 da 1c 00          callq  77b420 <elog_start>
    0.00 :	  5ad92a:       be 80 a5 88 00          mov    $0x88a580,%esi
    0.00 :	  5ad92f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad934:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad936:       e8 f5 d8 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5ad93b:       e8 90 bb eb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1075
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b2630 <ExecEvalParamExec>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalParamExec(ExprState *exprstate, ExprContext *econtext,
         :	                                  bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5b2630:       55                      push   %rbp
         :	        Param      *expression = (Param *) exprstate->expr;
         :	        int                     thisParamId = expression->paramid;
         :	        ParamExecData *prm;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1075
  100.00 :	  5b2631:       48 85 c9                test   %rcx,%rcx
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalParamExec(ExprState *exprstate, ExprContext *econtext,
         :	                                  bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5b2634:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b2637:       41 54                   push   %r12
    0.00 :	  5b2639:       49 89 d4                mov    %rdx,%r12
    0.00 :	  5b263c:       53                      push   %rbx
         :	        Param      *expression = (Param *) exprstate->expr;
         :	        int                     thisParamId = expression->paramid;
    0.00 :	  5b263d:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  5b2641:       8b 40 08                mov    0x8(%rax),%eax
         :	        ParamExecData *prm;
         :
         :	        if (isDone)
    0.00 :	  5b2644:       74 06                   je     5b264c <ExecEvalParamExec+0x1c>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b2646:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /*
         :	         * PARAM_EXEC params (internal executor parameters) are stored in the
         :	         * ecxt_param_exec_vals array, and can be accessed by array index.
         :	         */
         :	        prm = &(econtext->ecxt_param_exec_vals[thisParamId]);
    0.00 :	  5b264c:       48 98                   cltq   
    0.00 :	  5b264e:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	  5b2652:       48 8d 1c c5 00 00 00    lea    0x0(,%rax,8),%rbx
    0.00 :	  5b2659:       00 
    0.00 :	  5b265a:       48 03 5e 30             add    0x30(%rsi),%rbx
         :	        if (prm->execPlan != NULL)
    0.00 :	  5b265e:       48 8b 3b                mov    (%rbx),%rdi
    0.00 :	  5b2661:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b2664:       74 05                   je     5b266b <ExecEvalParamExec+0x3b>
         :	        {
         :	                /* Parameter not evaluated yet, so go do it */
         :	                ExecSetParamPlan(prm->execPlan, econtext);
    0.00 :	  5b2666:       e8 f5 5a 01 00          callq  5c8160 <ExecSetParamPlan>
         :	                /* ExecSetParamPlan should have processed this param... */
         :	                Assert(prm->execPlan == NULL);
         :	        }
         :	        *isNull = prm->isnull;
    0.00 :	  5b266b:       0f b6 43 10             movzbl 0x10(%rbx),%eax
    0.00 :	  5b266f:       41 88 04 24             mov    %al,(%r12)
    0.00 :	  5b2673:       48 8b 43 08             mov    0x8(%rbx),%rax
         :	        return prm->value;
         :	}
    0.00 :	  5b2677:       5b                      pop    %rbx
    0.00 :	  5b2678:       41 5c                   pop    %r12
    0.00 :	  5b267a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:341
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b35f0 <ExecScanReScan>:
         :	 * that uses ExecScan().
         :	 */
         :	void
         :	ExecScanReScan(ScanState *node)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b35f0:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	 * This must be called within the ReScan function of any plan node type
         :	 * that uses ExecScan().
         :	 */
         :	void
         :	ExecScanReScan(ScanState *node)
         :	{
    0.00 :	  5b35f4:       55                      push   %rbp
         :	        EState     *estate = node->ps.state;
         :
         :	        /* Stop projecting any tuples from SRFs in the targetlist */
         :	        node->ps.ps_TupFromTlist = false;
    0.00 :	  5b35f5:       c6 47 70 00             movb   $0x0,0x70(%rdi)
         :	 * This must be called within the ReScan function of any plan node type
         :	 * that uses ExecScan().
         :	 */
         :	void
         :	ExecScanReScan(ScanState *node)
         :	{
    0.00 :	  5b35f9:       48 89 e5                mov    %rsp,%rbp
         :
         :	        /* Stop projecting any tuples from SRFs in the targetlist */
         :	        node->ps.ps_TupFromTlist = false;
         :
         :	        /* Rescan EvalPlanQual tuple if we're inside an EvalPlanQual recheck */
         :	        if (estate->es_epqScanDone != NULL)
    0.00 :	  5b35fc:       48 8b 90 e0 00 00 00    mov    0xe0(%rax),%rdx
  100.00 :	  5b3603:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5b3606:       74 0e                   je     5b3616 <ExecScanReScan+0x26>
         :	        {
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :
         :	                estate->es_epqScanDone[scanrelid - 1] = false;
    0.00 :	  5b3608:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  5b360c:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b360f:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5b3612:       c6 04 02 00             movb   $0x0,(%rdx,%rax,1)
         :	        }
         :	}
    0.00 :	  5b3616:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:459
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4110 <ExecClearTuple>:
         :	 *              NB: only the tuple is cleared, not the tuple descriptor (if any).
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: slot passed */
         :	ExecClearTuple(TupleTableSlot *slot)    /* slot in which to store tuple */
         :	{
    0.00 :	  5b4110:       55                      push   %rbp
    0.00 :	  5b4111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4114:       53                      push   %rbx
    0.00 :	  5b4115:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b4118:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(slot != NULL);
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b411c:       80 7f 05 00             cmpb   $0x0,0x5(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:459
  100.00 :	  5b4120:       75 5e                   jne    5b4180 <ExecClearTuple+0x70>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b4122:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4126:       75 48                   jne    5b4170 <ExecClearTuple+0x60>
         :	        slot->tts_shouldFreeMin = false;
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4128:       8b 7b 20                mov    0x20(%rbx),%edi
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        slot->tts_tuple = NULL;
    0.00 :	  5b412b:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b4132:       00 
         :	        slot->tts_mintuple = NULL;
    0.00 :	  5b4133:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b413a:       00 
         :	        slot->tts_shouldFree = false;
    0.00 :	  5b413b:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b413f:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4143:       85 ff                   test   %edi,%edi
    0.00 :	  5b4145:       74 05                   je     5b414c <ExecClearTuple+0x3c>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4147:       e8 14 0d 0c 00          callq  674e60 <ReleaseBuffer>
         :
         :	        slot->tts_buffer = InvalidBuffer;
    0.00 :	  5b414c:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
    0.00 :	  5b4153:       c6 43 04 01             movb   $0x1,0x4(%rbx)
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b4157:       48 89 d8                mov    %rbx,%rax
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b415a:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :
         :	        return slot;
         :	}
    0.00 :	  5b4161:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5b4165:       5b                      pop    %rbx
    0.00 :	  5b4166:       c9                      leaveq 
    0.00 :	  5b4167:       c3                      retq   
    0.00 :	  5b4168:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b416f:       00 
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4170:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4174:       e8 37 ab eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4179:       eb ad                   jmp    5b4128 <ExecClearTuple+0x18>
    0.00 :	  5b417b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4180:       48 8b 7f 08             mov    0x8(%rdi),%rdi
    0.00 :	  5b4184:       e8 37 ab eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4189:       eb 97                   jmp    5b4122 <ExecClearTuple+0x12>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execUtils.c:383
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b5180 <ReScanExprContext>:
         :	 *
         :	 * Note we make no assumption about the caller's memory context.
         :	 */
         :	void
         :	ReScanExprContext(ExprContext *econtext)
         :	{
    0.00 :	  5b5180:       55                      push   %rbp
         :	        /* Call any registered callbacks */
         :	        ShutdownExprContext(econtext, true);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execUtils.c:383
  100.00 :	  5b5181:       be 01 00 00 00          mov    $0x1,%esi
         :	 *
         :	 * Note we make no assumption about the caller's memory context.
         :	 */
         :	void
         :	ReScanExprContext(ExprContext *econtext)
         :	{
    0.00 :	  5b5186:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b5189:       53                      push   %rbx
    0.00 :	  5b518a:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b518d:       48 83 ec 08             sub    $0x8,%rsp
         :	        /* Call any registered callbacks */
         :	        ShutdownExprContext(econtext, true);
    0.00 :	  5b5191:       e8 6a f8 ff ff          callq  5b4a00 <ShutdownExprContext>
         :	        /* And clean up the memory used */
         :	        MemoryContextReset(econtext->ecxt_per_tuple_memory);
    0.00 :	  5b5196:       48 8b 7b 28             mov    0x28(%rbx),%rdi
         :	}
    0.00 :	  5b519a:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5b519e:       5b                      pop    %rbx
    0.00 :	  5b519f:       c9                      leaveq 
         :	ReScanExprContext(ExprContext *econtext)
         :	{
         :	        /* Call any registered callbacks */
         :	        ShutdownExprContext(econtext, true);
         :	        /* And clean up the memory used */
         :	        MemoryContextReset(econtext->ecxt_per_tuple_memory);
    0.00 :	  5b51a0:       e9 0b 38 1e 00          jmpq   7989b0 <MemoryContextReset>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:115
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7ae0 <InstrEndLoop>:
         :	}
         :
         :	/* Finish a run cycle for a plan node */
         :	void
         :	InstrEndLoop(Instrumentation *instr)
         :	{
    0.00 :	  5b7ae0:       55                      push   %rbp
         :	        double          totaltime;
         :
         :	        /* Skip if nothing has happened, or already shut down */
         :	        if (!instr->running)
    0.00 :	  5b7ae1:       80 7f 02 00             cmpb   $0x0,0x2(%rdi)
         :	}
         :
         :	/* Finish a run cycle for a plan node */
         :	void
         :	InstrEndLoop(Instrumentation *instr)
         :	{
    0.00 :	  5b7ae5:       48 89 e5                mov    %rsp,%rbp
         :	        double          totaltime;
         :
         :	        /* Skip if nothing has happened, or already shut down */
         :	        if (!instr->running)
    0.00 :	  5b7ae8:       0f 84 da 00 00 00       je     5b7bc8 <InstrEndLoop+0xe8>
         :	                return;
         :
         :	        if (!INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7aee:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7af3:       75 07                   jne    5b7afc <InstrEndLoop+0x1c>
    0.00 :	  5b7af5:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7afa:       74 34                   je     5b7b30 <InstrEndLoop+0x50>
         :	                elog(ERROR, "InstrEndLoop called on running node");
    0.00 :	  5b7afc:       ba 7d b6 88 00          mov    $0x88b67d,%edx
    0.00 :	  5b7b01:       be 70 00 00 00          mov    $0x70,%esi
    0.00 :	  5b7b06:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7b0b:       e8 10 39 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7b10:       be 08 b6 88 00          mov    $0x88b608,%esi
    0.00 :	  5b7b15:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7b1a:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7b1c:       e8 0f 37 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7b21:       e8 aa 19 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5b7b26:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b7b2d:       00 00 00 
         :
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7b30:       f2 48 0f 2a 47 20       cvtsi2sdq 0x20(%rdi),%xmm0
    0.00 :	  5b7b36:       f2 0f 5e 05 a2 4a 2c    divsd  0x2c4aa2(%rip),%xmm0        # 87c5e0 <__func__.18742+0x1b>
    0.00 :	  5b7b3d:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:115
  100.00 :	  5b7b3e:       f2 48 0f 2a 4f 18       cvtsi2sdq 0x18(%rdi),%xmm1
         :
         :	        /* Reset for next cycle (if any) */
         :	        instr->running = false;
         :	        INSTR_TIME_SET_ZERO(instr->starttime);
         :	        INSTR_TIME_SET_ZERO(instr->counter);
         :	        instr->firsttuple = 0;
    0.00 :	  5b7b44:       31 c0                   xor    %eax,%eax
         :	        instr->total += totaltime;
         :	        instr->ntuples += instr->tuplecount;
         :	        instr->nloops += 1;
         :
         :	        /* Reset for next cycle (if any) */
         :	        instr->running = false;
    0.00 :	  5b7b46:       c6 47 02 00             movb   $0x0,0x2(%rdi)
         :	        INSTR_TIME_SET_ZERO(instr->starttime);
    0.00 :	  5b7b4a:       48 c7 47 08 00 00 00    movq   $0x0,0x8(%rdi)
    0.00 :	  5b7b51:       00 
    0.00 :	  5b7b52:       48 c7 47 10 00 00 00    movq   $0x0,0x10(%rdi)
    0.00 :	  5b7b59:       00 
         :	        INSTR_TIME_SET_ZERO(instr->counter);
    0.00 :	  5b7b5a:       48 c7 47 18 00 00 00    movq   $0x0,0x18(%rdi)
    0.00 :	  5b7b61:       00 
    0.00 :	  5b7b62:       48 c7 47 20 00 00 00    movq   $0x0,0x20(%rdi)
    0.00 :	  5b7b69:       00 
         :
         :	        if (!INSTR_TIME_IS_ZERO(instr->starttime))
         :	                elog(ERROR, "InstrEndLoop called on running node");
         :
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7b6a:       f2 0f 58 c8             addsd  %xmm0,%xmm1
         :
         :	        instr->startup += instr->firsttuple;
    0.00 :	  5b7b6e:       f2 0f 10 87 a8 00 00    movsd  0xa8(%rdi),%xmm0
    0.00 :	  5b7b75:       00 
    0.00 :	  5b7b76:       f2 0f 58 47 28          addsd  0x28(%rdi),%xmm0
         :
         :	        /* Reset for next cycle (if any) */
         :	        instr->running = false;
         :	        INSTR_TIME_SET_ZERO(instr->starttime);
         :	        INSTR_TIME_SET_ZERO(instr->counter);
         :	        instr->firsttuple = 0;
    0.00 :	  5b7b7b:       48 89 47 28             mov    %rax,0x28(%rdi)
         :
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
         :
         :	        instr->startup += instr->firsttuple;
         :	        instr->total += totaltime;
    0.00 :	  5b7b7f:       f2 0f 58 8f b0 00 00    addsd  0xb0(%rdi),%xmm1
    0.00 :	  5b7b86:       00 
         :	                elog(ERROR, "InstrEndLoop called on running node");
         :
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
         :
         :	        instr->startup += instr->firsttuple;
    0.00 :	  5b7b87:       f2 0f 11 87 a8 00 00    movsd  %xmm0,0xa8(%rdi)
    0.00 :	  5b7b8e:       00 
         :	        instr->total += totaltime;
         :	        instr->ntuples += instr->tuplecount;
    0.00 :	  5b7b8f:       f2 0f 10 87 b8 00 00    movsd  0xb8(%rdi),%xmm0
    0.00 :	  5b7b96:       00 
         :
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
         :
         :	        instr->startup += instr->firsttuple;
         :	        instr->total += totaltime;
    0.00 :	  5b7b97:       f2 0f 11 8f b0 00 00    movsd  %xmm1,0xb0(%rdi)
    0.00 :	  5b7b9e:       00 
         :	        instr->ntuples += instr->tuplecount;
    0.00 :	  5b7b9f:       f2 0f 58 47 30          addsd  0x30(%rdi),%xmm0
         :	        /* Reset for next cycle (if any) */
         :	        instr->running = false;
         :	        INSTR_TIME_SET_ZERO(instr->starttime);
         :	        INSTR_TIME_SET_ZERO(instr->counter);
         :	        instr->firsttuple = 0;
         :	        instr->tuplecount = 0;
    0.00 :	  5b7ba4:       48 89 47 30             mov    %rax,0x30(%rdi)
         :	        /* Accumulate per-cycle statistics into totals */
         :	        totaltime = INSTR_TIME_GET_DOUBLE(instr->counter);
         :
         :	        instr->startup += instr->firsttuple;
         :	        instr->total += totaltime;
         :	        instr->ntuples += instr->tuplecount;
    0.00 :	  5b7ba8:       f2 0f 11 87 b8 00 00    movsd  %xmm0,0xb8(%rdi)
    0.00 :	  5b7baf:       00 
         :	        instr->nloops += 1;
    0.00 :	  5b7bb0:       f2 0f 10 05 a0 75 1f    movsd  0x1f75a0(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b7bb7:       00 
    0.00 :	  5b7bb8:       f2 0f 58 87 c0 00 00    addsd  0xc0(%rdi),%xmm0
    0.00 :	  5b7bbf:       00 
    0.00 :	  5b7bc0:       f2 0f 11 87 c0 00 00    movsd  %xmm0,0xc0(%rdi)
    0.00 :	  5b7bc7:       00 
         :	        instr->running = false;
         :	        INSTR_TIME_SET_ZERO(instr->starttime);
         :	        INSTR_TIME_SET_ZERO(instr->counter);
         :	        instr->firsttuple = 0;
         :	        instr->tuplecount = 0;
         :	}
    0.00 :	  5b7bc8:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:544
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9950 <advance_aggregates>:
         :	 *
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static void
         :	advance_aggregates(AggState *aggstate, AggStatePerGroup pergroup)
         :	{
    0.00 :	  5b9950:       55                      push   %rbp
    0.00 :	  5b9951:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9954:       41 57                   push   %r15
    0.00 :	  5b9956:       49 89 ff                mov    %rdi,%r15
    0.00 :	  5b9959:       41 56                   push   %r14
    0.00 :	  5b995b:       41 55                   push   %r13
    0.00 :	  5b995d:       41 54                   push   %r12
    0.00 :	  5b995f:       53                      push   %rbx
    0.00 :	  5b9960:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  5b9964:       48 89 75 c0             mov    %rsi,-0x40(%rbp)
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9968:       44 8b 9f 98 00 00 00    mov    0x98(%rdi),%r11d
    0.00 :	  5b996f:       45 85 db                test   %r11d,%r11d
    0.00 :	  5b9972:       0f 8e c1 00 00 00       jle    5b9a39 <advance_aggregates+0xe9>
    0.00 :	  5b9978:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5b997b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                AggStatePerAgg peraggstate = &aggstate->peragg[aggno];
    0.00 :	  5b9980:       4d 63 ee                movslq %r14d,%r13
    0.00 :	  5b9983:       49 69 dd a8 04 00 00    imul   $0x4a8,%r13,%rbx
    0.00 :	  5b998a:       49 03 9f b0 00 00 00    add    0xb0(%r15),%rbx
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
         :	                ExprState  *filter = peraggstate->aggrefstate->aggfilter;
    0.00 :	  5b9991:       48 8b 03                mov    (%rbx),%rax
         :	                int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5b9994:       44 8b 63 18             mov    0x18(%rbx),%r12d
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	        {
         :	                AggStatePerAgg peraggstate = &aggstate->peragg[aggno];
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
         :	                ExprState  *filter = peraggstate->aggrefstate->aggfilter;
    0.00 :	  5b9998:       48 8b 78 28             mov    0x28(%rax),%rdi
         :	                int                     numTransInputs = peraggstate->numTransInputs;
         :	                int                     i;
         :	                TupleTableSlot *slot;
         :
         :	                /* Skip anything FILTERed out */
         :	                if (filter)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:544
  100.00 :	  5b999c:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b999f:       74 1c                   je     5b99bd <advance_aggregates+0x6d>
         :	                {
         :	                        Datum           res;
         :	                        bool            isnull;
         :
         :	                        res = ExecEvalExprSwitchContext(filter, aggstate->tmpcontext,
    0.00 :	  5b99a1:       49 8b b7 c0 00 00 00    mov    0xc0(%r15),%rsi
    0.00 :	  5b99a8:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5b99ac:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b99ae:       e8 2d 35 ff ff          callq  5acee0 <ExecEvalExprSwitchContext>
         :	                                                                                        &isnull, NULL);
         :	                        if (isnull || !DatumGetBool(res))
    0.00 :	  5b99b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5b99b7:       75 6f                   jne    5b9a28 <advance_aggregates+0xd8>
    0.00 :	  5b99b9:       84 c0                   test   %al,%al
    0.00 :	  5b99bb:       74 6b                   je     5b9a28 <advance_aggregates+0xd8>
         :	                                continue;
         :	                }
         :
         :	                /* Evaluate the current input expressions for this aggregate */
         :	                slot = ExecProject(peraggstate->evalproj, NULL);
    0.00 :	  5b99bd:       48 8b bb e0 00 00 00    mov    0xe0(%rbx),%rdi
    0.00 :	  5b99c4:       31 f6                   xor    %esi,%esi
    0.00 :	  5b99c6:       e8 35 36 ff ff          callq  5ad000 <ExecProject>
         :
         :	                if (peraggstate->numSortCols > 0)
    0.00 :	  5b99cb:       44 8b 93 8c 00 00 00    mov    0x8c(%rbx),%r10d
         :	                        if (isnull || !DatumGetBool(res))
         :	                                continue;
         :	                }
         :
         :	                /* Evaluate the current input expressions for this aggregate */
         :	                slot = ExecProject(peraggstate->evalproj, NULL);
    0.00 :	  5b99d2:       48 89 c1                mov    %rax,%rcx
         :
         :	                if (peraggstate->numSortCols > 0)
    0.00 :	  5b99d5:       45 85 d2                test   %r10d,%r10d
    0.00 :	  5b99d8:       7e 76                   jle    5b9a50 <advance_aggregates+0x100>
         :	                         * storing the row in the sorter, to save space if there are a lot
         :	                         * of nulls.  Note that we must only check numTransInputs columns,
         :	                         * not numInputs, since nullity in columns used only for sorting
         :	                         * is not relevant here.
         :	                         */
         :	                        if (peraggstate->transfn.fn_strict)
    0.00 :	  5b99da:       80 7b 36 00             cmpb   $0x0,0x36(%rbx)
    0.00 :	  5b99de:       74 2c                   je     5b9a0c <advance_aggregates+0xbc>
         :	                        {
         :	                                for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b99e0:       45 85 e4                test   %r12d,%r12d
    0.00 :	  5b99e3:       7e 27                   jle    5b9a0c <advance_aggregates+0xbc>
         :	                                {
         :	                                        if (slot->tts_isnull[i])
    0.00 :	  5b99e5:       48 8b 40 30             mov    0x30(%rax),%rax
    0.00 :	  5b99e9:       31 d2                   xor    %edx,%edx
    0.00 :	  5b99eb:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b99ee:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5b99f1:       74 11                   je     5b9a04 <advance_aggregates+0xb4>
    0.00 :	  5b99f3:       eb 33                   jmp    5b9a28 <advance_aggregates+0xd8>
    0.00 :	  5b99f5:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b99f8:       0f b6 46 01             movzbl 0x1(%rsi),%eax
    0.00 :	  5b99fc:       48 83 c6 01             add    $0x1,%rsi
    0.00 :	  5b9a00:       84 c0                   test   %al,%al
    0.00 :	  5b9a02:       75 24                   jne    5b9a28 <advance_aggregates+0xd8>
         :	                         * not numInputs, since nullity in columns used only for sorting
         :	                         * is not relevant here.
         :	                         */
         :	                        if (peraggstate->transfn.fn_strict)
         :	                        {
         :	                                for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b9a04:       83 c2 01                add    $0x1,%edx
    0.00 :	  5b9a07:       41 39 d4                cmp    %edx,%r12d
    0.00 :	  5b9a0a:       7f ec                   jg     5b99f8 <advance_aggregates+0xa8>
         :	                                if (i < numTransInputs)
         :	                                        continue;
         :	                        }
         :
         :	                        /* OK, put the tuple into the tuplesort object */
         :	                        if (peraggstate->numInputs == 1)
    0.00 :	  5b9a0c:       83 7b 14 01             cmpl   $0x1,0x14(%rbx)
    0.00 :	  5b9a10:       0f 84 8a 00 00 00       je     5b9aa0 <advance_aggregates+0x150>
         :	                                tuplesort_putdatum(peraggstate->sortstate,
         :	                                                                   slot->tts_values[0],
         :	                                                                   slot->tts_isnull[0]);
         :	                        else
         :	                                tuplesort_puttupleslot(peraggstate->sortstate, slot);
    0.00 :	  5b9a16:       48 8b bb f8 00 00 00    mov    0xf8(%rbx),%rdi
    0.00 :	  5b9a1d:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  5b9a20:       e8 0b 56 1e 00          callq  79f030 <tuplesort_puttupleslot>
    0.00 :	  5b9a25:       0f 1f 00                nopl   (%rax)
         :	static void
         :	advance_aggregates(AggState *aggstate, AggStatePerGroup pergroup)
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9a28:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5b9a2c:       45 39 b7 98 00 00 00    cmp    %r14d,0x98(%r15)
    0.00 :	  5b9a33:       0f 8f 47 ff ff ff       jg     5b9980 <advance_aggregates+0x30>
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                }
         :	        }
         :	}
    0.00 :	  5b9a39:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b9a3d:       5b                      pop    %rbx
    0.00 :	  5b9a3e:       41 5c                   pop    %r12
    0.00 :	  5b9a40:       41 5d                   pop    %r13
    0.00 :	  5b9a42:       41 5e                   pop    %r14
    0.00 :	  5b9a44:       41 5f                   pop    %r15
    0.00 :	  5b9a46:       c9                      leaveq 
    0.00 :	  5b9a47:       c3                      retq   
    0.00 :	  5b9a48:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b9a4f:       00 
         :	                        if (peraggstate->numInputs == 1)
         :	                                tuplesort_putdatum(peraggstate->sortstate,
         :	                                                                   slot->tts_values[0],
         :	                                                                   slot->tts_isnull[0]);
         :	                        else
         :	                                tuplesort_puttupleslot(peraggstate->sortstate, slot);
    0.00 :	  5b9a50:       31 d2                   xor    %edx,%edx
         :	                        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        Assert(slot->tts_nvalid >= numTransInputs);
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b9a52:       45 85 e4                test   %r12d,%r12d
    0.00 :	  5b9a55:       7e 31                   jle    5b9a88 <advance_aggregates+0x138>
    0.00 :	  5b9a57:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b9a5e:       00 00 
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot->tts_values[i];
    0.00 :	  5b9a60:       48 8b 41 28             mov    0x28(%rcx),%rax
    0.00 :	  5b9a64:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5b9a68:       48 89 84 d3 28 01 00    mov    %rax,0x128(%rbx,%rdx,8)
    0.00 :	  5b9a6f:       00 
         :	                                fcinfo->argnull[i + 1] = slot->tts_isnull[i];
    0.00 :	  5b9a70:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  5b9a74:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5b9a78:       88 84 13 41 04 00 00    mov    %al,0x441(%rbx,%rdx,1)
    0.00 :	  5b9a7f:       48 83 c2 01             add    $0x1,%rdx
         :	                        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        Assert(slot->tts_nvalid >= numTransInputs);
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b9a83:       41 39 d4                cmp    %edx,%r12d
    0.00 :	  5b9a86:       7f d8                   jg     5b9a60 <advance_aggregates+0x110>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5b9a88:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5b9a8c:       49 c1 e5 04             shl    $0x4,%r13
    0.00 :	  5b9a90:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b9a93:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9a96:       4c 01 ea                add    %r13,%rdx
    0.00 :	  5b9a99:       e8 f2 fc ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5b9a9e:       eb 88                   jmp    5b9a28 <advance_aggregates+0xd8>
         :	                                        continue;
         :	                        }
         :
         :	                        /* OK, put the tuple into the tuplesort object */
         :	                        if (peraggstate->numInputs == 1)
         :	                                tuplesort_putdatum(peraggstate->sortstate,
    0.00 :	  5b9aa0:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  5b9aa4:       48 8b bb f8 00 00 00    mov    0xf8(%rbx),%rdi
    0.00 :	  5b9aab:       0f be 10                movsbl (%rax),%edx
    0.00 :	  5b9aae:       48 8b 41 28             mov    0x28(%rcx),%rax
    0.00 :	  5b9ab2:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5b9ab5:       e8 66 54 1e 00          callq  79ef20 <tuplesort_putdatum>
    0.00 :	  5b9aba:       e9 69 ff ff ff          jmpq   5b9a28 <advance_aggregates+0xd8>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1081
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9d80 <ExecAgg>:
         :	 *        stored in the expression context to be used when ExecProject evaluates
         :	 *        the result tuple.
         :	 */
         :	TupleTableSlot *
         :	ExecAgg(AggState *node)
         :	{
    0.00 :	  5b9d80:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1081
  100.00 :	  5b9d81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9d84:       41 57                   push   %r15
    0.00 :	  5b9d86:       41 56                   push   %r14
    0.00 :	  5b9d88:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b9d8b:       41 55                   push   %r13
    0.00 :	  5b9d8d:       41 54                   push   %r12
    0.00 :	  5b9d8f:       53                      push   %rbx
    0.00 :	  5b9d90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous agg
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ss.ps.ps_TupFromTlist)
    0.00 :	  5b9d97:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5b9d9b:       74 1c                   je     5b9db9 <ExecAgg+0x39>
         :	        {
         :	                TupleTableSlot *result;
         :	                ExprDoneCond isDone;
         :
         :	                result = ExecProject(node->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5b9d9d:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5b9da1:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b9da5:       e8 56 32 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b9daa:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5b9dae:       0f 84 04 02 00 00       je     5b9fb8 <ExecAgg+0x238>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->ss.ps.ps_TupFromTlist = false;
    0.00 :	  5b9db4:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Exit if nothing left to do.  (We must do the ps_TupFromTlist check
         :	         * first, because in some cases agg_done gets set before we emit the final
         :	         * aggregate tuple, and we have to finish running SRFs for it.)
         :	         */
         :	        if (node->agg_done)
    0.00 :	  5b9db9:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9dbb:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9dc2:       00 
    0.00 :	  5b9dc3:       0f 85 ef 01 00 00       jne    5b9fb8 <ExecAgg+0x238>
         :	                return NULL;
         :
         :	        /* Dispatch based on strategy */
         :	        if (((Agg *) node->ss.ps.plan)->aggstrategy == AGG_HASHED)
    0.00 :	  5b9dc9:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  5b9dcd:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	  5b9dd4:       83 78 60 02             cmpl   $0x2,0x60(%rax)
    0.00 :	  5b9dd8:       0f 85 ec 01 00 00       jne    5b9fca <ExecAgg+0x24a>
         :	        {
         :	                if (!node->table_filled)
    0.00 :	  5b9dde:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9de0:       41 80 be 00 01 00 00    cmpb   $0x0,0x100(%r14)
    0.00 :	  5b9de7:       00 
    0.00 :	  5b9de8:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5b9def:       0f 84 5d 07 00 00       je     5ba552 <ExecAgg+0x7d2>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9df5:       4d 8b 6e 60             mov    0x60(%r14),%r13
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9df9:       49 8b 55 40             mov    0x40(%r13),%rdx
    0.00 :	  5b9dfd:       48 89 95 30 ff ff ff    mov    %rdx,-0xd0(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9e04:       49 8b 55 48             mov    0x48(%r13),%rdx
    0.00 :	  5b9e08:       48 89 95 28 ff ff ff    mov    %rdx,-0xd8(%rbp)
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9e0f:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
    0.00 :	  5b9e16:       48 89 95 20 ff ff ff    mov    %rdx,-0xe0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5b9e1d:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
    0.00 :	  5b9e24:       48 89 95 18 ff ff ff    mov    %rdx,-0xe8(%rbp)
         :
         :	        /*
         :	         * We loop retrieving groups until we find one satisfying
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9e2b:       84 c0                   test   %al,%al
    0.00 :	  5b9e2d:       0f 85 83 01 00 00       jne    5b9fb6 <ExecAgg+0x236>
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e33:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9e36:       e8 85 9c 1c 00          callq  783ac0 <hash_seq_search>
         :	                if (entry == NULL)
    0.00 :	  5b9e3b:       48 85 c0                test   %rax,%rax
         :	        while (!aggstate->agg_done)
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e3e:       49 89 c4                mov    %rax,%r12
         :	                if (entry == NULL)
    0.00 :	  5b9e41:       0f 84 fc 06 00 00       je     5ba543 <ExecAgg+0x7c3>
         :	                 *
         :	                 * We intentionally don't use ReScanExprContext here; if any aggs have
         :	                 * registered shutdown callbacks, they mustn't be called yet, since we
         :	                 * might not be done with that agg.
         :	                 */
         :	                ResetExprContext(econtext);
    0.00 :	  5b9e47:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b9e4b:       e8 60 eb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                /*
         :	                 * Store the copied first input tuple in the tuple table slot reserved
         :	                 * for it, so that it can be used in ExecProject.
         :	                 */
         :	                ExecStoreMinimalTuple(entry->shared.firstTuple,
    0.00 :	  5b9e50:       48 8b b5 18 ff ff ff    mov    -0xe8(%rbp),%rsi
    0.00 :	  5b9e57:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5b9e5b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9e5d:       e8 7e a5 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e62:       41 8b 96 98 00 00 00    mov    0x98(%r14),%edx
    0.00 :	  5b9e69:       85 d2                   test   %edx,%edx
    0.00 :	  5b9e6b:       7e 49                   jle    5b9eb6 <ExecAgg+0x136>
    0.00 :	  5b9e6d:       31 db                   xor    %ebx,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e6f:       48 8b 85 30 ff ff ff    mov    -0xd0(%rbp),%rax
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b9e76:       48 63 fb                movslq %ebx,%rdi
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e79:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e7c:       48 69 f7 a8 04 00 00    imul   $0x4a8,%rdi,%rsi
    0.00 :	  5b9e83:       48 03 b5 20 ff ff ff    add    -0xe0(%rbp),%rsi
    0.00 :	  5b9e8a:       48 8d 0c f8             lea    (%rax,%rdi,8),%rcx
    0.00 :	  5b9e8e:       48 89 f8                mov    %rdi,%rax
    0.00 :	  5b9e91:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5b9e95:       49 8d 54 04 08          lea    0x8(%r12,%rax,1),%rdx
    0.00 :	  5b9e9a:       48 8b 85 28 ff ff ff    mov    -0xd8(%rbp),%rax
    0.00 :	  5b9ea1:       4c 8d 04 38             lea    (%rax,%rdi,1),%r8
    0.00 :	  5b9ea5:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9ea8:       e8 13 fc ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9ead:       41 3b 9e 98 00 00 00    cmp    0x98(%r14),%ebx
    0.00 :	  5b9eb4:       7c b9                   jl     5b9e6f <ExecAgg+0xef>
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9eb6:       48 8b 95 18 ff ff ff    mov    -0xe8(%rbp),%rdx
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ebd:       4c 89 ee                mov    %r13,%rsi
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9ec0:       49 89 55 18             mov    %rdx,0x18(%r13)
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ec4:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9ec8:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9eca:       e8 41 30 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9ecf:       84 c0                   test   %al,%al
    0.00 :	  5b9ed1:       0f 85 4e 06 00 00       jne    5ba525 <ExecAgg+0x7a5>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9ed7:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9edb:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9ede:       74 18                   je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5b9ee0:       f2 0f 10 05 70 52 1f    movsd  0x1f5270(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9ee7:       00 
    0.00 :	  5b9ee8:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9eef:       00 
    0.00 :	  5b9ef0:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9ef7:       00 
    0.00 :	  5b9ef8:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5b9eff:       00 
    0.00 :	  5b9f00:       e9 26 ff ff ff          jmpq   5b9e2b <ExecAgg+0xab>
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
         :	        }
         :
         :	        if (slot2)
    0.00 :	  5b9f05:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b9f08:       74 08                   je     5b9f12 <ExecAgg+0x192>
         :	                ExecClearTuple(slot2);
    0.00 :	  5b9f0a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9f0d:       e8 fe a1 ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        tuplesort_end(peraggstate->sortstate);
    0.00 :	  5b9f12:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5b9f19:       00 
    0.00 :	  5b9f1a:       e8 c1 52 1e 00          callq  79f1e0 <tuplesort_end>
         :	        peraggstate->sortstate = NULL;
    0.00 :	  5b9f1f:       49 c7 84 24 f8 00 00    movq   $0x0,0xf8(%r12)
    0.00 :	  5b9f26:       00 00 00 00 00 
         :	                                        process_ordered_aggregate_multi(aggstate,
         :	                                                                                                        peraggstate,
         :	                                                                                                        pergroupstate);
         :	                        }
         :
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9f2b:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	  5b9f2f:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5b9f36:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5b9f39:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9f3c:       48 8d 0c d0             lea    (%rax,%rdx,8),%rcx
    0.00 :	  5b9f40:       48 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%rax
    0.00 :	  5b9f47:       4c 8d 04 10             lea    (%rax,%rdx,1),%r8
    0.00 :	  5b9f4b:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5b9f52:       e8 69 fb ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9f57:       83 85 44 ff ff ff 01    addl   $0x1,-0xbc(%rbp)
    0.00 :	  5b9f5e:       8b 95 44 ff ff ff       mov    -0xbc(%rbp),%edx
    0.00 :	  5b9f64:       41 3b 96 98 00 00 00    cmp    0x98(%r14),%edx
    0.00 :	  5b9f6b:       0f 8c f6 01 00 00       jl     5ba167 <ExecAgg+0x3e7>
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9f71:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9f75:       48 8b b5 78 ff ff ff    mov    -0x88(%rbp),%rsi
    0.00 :	  5b9f7c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9f7e:       e8 8d 2f ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9f83:       84 c0                   test   %al,%al
    0.00 :	  5b9f85:       0f 85 18 05 00 00       jne    5ba4a3 <ExecAgg+0x723>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9f8b:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9f8f:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9f92:       74 18                   je     5b9fac <ExecAgg+0x22c>
    0.00 :	  5b9f94:       f2 0f 10 05 bc 51 1f    movsd  0x1f51bc(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9f9b:       00 
    0.00 :	  5b9f9c:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9fa3:       00 
    0.00 :	  5b9fa4:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9fab:       00 
         :
         :	        /*
         :	         * We loop retrieving groups until we find one matching
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9fac:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9fb3:       00 
    0.00 :	  5b9fb4:       74 75                   je     5ba02b <ExecAgg+0x2ab>
    0.00 :	  5b9fb6:       31 c0                   xor    %eax,%eax
         :	                        agg_fill_hash_table(node);
         :	                return agg_retrieve_hash_table(node);
         :	        }
         :	        else
         :	                return agg_retrieve_direct(node);
         :	}
    0.00 :	  5b9fb8:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5b9fbf:       5b                      pop    %rbx
    0.00 :	  5b9fc0:       41 5c                   pop    %r12
    0.00 :	  5b9fc2:       41 5d                   pop    %r13
    0.00 :	  5b9fc4:       41 5e                   pop    %r14
    0.00 :	  5b9fc6:       41 5f                   pop    %r15
    0.00 :	  5b9fc8:       c9                      leaveq 
    0.00 :	  5b9fc9:       c3                      retq   
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fca:       49 8b 56 60             mov    0x60(%r14),%rdx
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fce:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fd2:       48 89 95 78 ff ff ff    mov    %rdx,-0x88(%rbp)
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fd9:       48 89 45 80             mov    %rax,-0x80(%rbp)
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9fdd:       48 8b 42 40             mov    0x40(%rdx),%rax
    0.00 :	  5b9fe1:       48 89 85 68 ff ff ff    mov    %rax,-0x98(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9fe8:       48 8b 52 48             mov    0x48(%rdx),%rdx
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5b9fec:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9ff3:       48 89 95 60 ff ff ff    mov    %rdx,-0xa0(%rbp)
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9ffa:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba001:       48 89 85 70 ff ff ff    mov    %rax,-0x90(%rbp)
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba008:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5ba00f:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        pergroup = aggstate->pergroup;
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba016:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba01d:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba024:       48 89 95 48 ff ff ff    mov    %rdx,-0xb8(%rbp)
         :	        {
         :	                /*
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
    0.00 :	  5ba02b:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5ba032:       00 
    0.00 :	  5ba033:       0f 84 a4 04 00 00       je     5ba4dd <ExecAgg+0x75d>
         :	                 * We use ReScanExprContext not just ResetExprContext because we want
         :	                 * any registered shutdown callbacks to be called.  That allows
         :	                 * aggregate functions to ensure they've cleaned up any non-memory
         :	                 * resources.
         :	                 */
         :	                ReScanExprContext(econtext);
    0.00 :	  5ba039:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5ba040:       e8 3b b1 ff ff          callq  5b5180 <ReScanExprContext>
         :
         :	                MemoryContextResetAndDeleteChildren(aggstate->aggcontext);
    0.00 :	  5ba045:       49 8b be b8 00 00 00    mov    0xb8(%r14),%rdi
    0.00 :	  5ba04c:       e8 bf eb 1d 00          callq  798c10 <MemoryContextResetAndDeleteChildren>
         :
         :	                /*
         :	                 * Initialize working state for a new input tuple group
         :	                 */
         :	                initialize_aggregates(aggstate, peragg, pergroup);
    0.00 :	  5ba051:       48 8b 95 50 ff ff ff    mov    -0xb0(%rbp),%rdx
    0.00 :	  5ba058:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
    0.00 :	  5ba05f:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba062:       e8 69 f5 ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                if (aggstate->grp_firstTuple != NULL)
    0.00 :	  5ba067:       49 8b be e0 00 00 00    mov    0xe0(%r14),%rdi
    0.00 :	  5ba06e:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ba071:       0f 84 c5 00 00 00       je     5ba13c <ExecAgg+0x3bc>
         :	                        /*
         :	                         * Store the copied first input tuple in the tuple table slot
         :	                         * reserved for it.  The tuple will be deleted when it is cleared
         :	                         * from the slot.
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
    0.00 :	  5ba077:       48 8b b5 48 ff ff ff    mov    -0xb8(%rbp),%rsi
    0.00 :	  5ba07e:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba080:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5ba085:       e8 f6 a3 ff ff          callq  5b4480 <ExecStoreTuple>
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba08a:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba091:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
         :	                                                   firstSlot,
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
    0.00 :	  5ba098:       49 c7 86 e0 00 00 00    movq   $0x0,0xe0(%r14)
    0.00 :	  5ba09f:       00 00 00 00 
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba0a3:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                         * Process each outer-plan tuple, and then fetch the next one,
         :	                         * until we exhaust the outer plan or cross a group boundary.
         :	                         */
         :	                        for (;;)
         :	                        {
         :	                                advance_aggregates(aggstate, pergroup);
    0.00 :	  5ba0a7:       48 8b b5 50 ff ff ff    mov    -0xb0(%rbp),%rsi
    0.00 :	  5ba0ae:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba0b1:       e8 9a f8 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
    0.00 :	  5ba0b6:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5ba0bd:       48 8b 7a 28             mov    0x28(%rdx),%rdi
    0.00 :	  5ba0c1:       e8 ea e8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0c6:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba0ca:       e8 d1 23 ff ff          callq  5ac4a0 <ExecProcNode>
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0cf:       48 85 c0                test   %rax,%rax
         :	                                advance_aggregates(aggstate, pergroup);
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0d2:       48 89 c3                mov    %rax,%rbx
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0d5:       0f 84 f5 03 00 00       je     5ba4d0 <ExecAgg+0x750>
    0.00 :	  5ba0db:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba0df:       0f 85 eb 03 00 00       jne    5ba4d0 <ExecAgg+0x750>
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
         :	                                        break;
         :	                                }
         :	                                /* set up for next advance_aggregates call */
         :	                                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba0e5:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba0ec:       48 89 58 18             mov    %rbx,0x18(%rax)
         :
         :	                                /*
         :	                                 * If we are grouping, check whether we've crossed a group
         :	                                 * boundary.
         :	                                 */
         :	                                if (node->aggstrategy == AGG_SORTED)
    0.00 :	  5ba0f0:       48 8b 95 10 ff ff ff    mov    -0xf0(%rbp),%rdx
    0.00 :	  5ba0f7:       83 7a 60 01             cmpl   $0x1,0x60(%rdx)
    0.00 :	  5ba0fb:       75 aa                   jne    5ba0a7 <ExecAgg+0x327>
         :	                                {
         :	                                        if (!execTuplesMatch(firstSlot,
    0.00 :	  5ba0fd:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba104:       48 8b 4a 68             mov    0x68(%rdx),%rcx
    0.00 :	  5ba108:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba10b:       8b 52 64                mov    0x64(%rdx),%edx
    0.00 :	  5ba10e:       4d 8b 86 a0 00 00 00    mov    0xa0(%r14),%r8
    0.00 :	  5ba115:       48 8b bd 48 ff ff ff    mov    -0xb8(%rbp),%rdi
    0.00 :	  5ba11c:       4c 8b 48 28             mov    0x28(%rax),%r9
    0.00 :	  5ba120:       e8 1b f3 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba125:       84 c0                   test   %al,%al
    0.00 :	  5ba127:       0f 85 7a ff ff ff       jne    5ba0a7 <ExecAgg+0x327>
         :	                                                                                 tmpcontext->ecxt_per_tuple_memory))
         :	                                        {
         :	                                                /*
         :	                                                 * Save the first input tuple of the next group.
         :	                                                 */
         :	                                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba12d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba130:       e8 7b 9e ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba135:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
         :	                 * qual, and the tlist.  (If we are not grouping, and there are no
         :	                 * input rows at all, we will come here with an empty firstSlot ...
         :	                 * but if not grouping, there can't be any references to
         :	                 * non-aggregated input columns, so no problem.)
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba13c:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba143:       48 8b 95 78 ff ff ff    mov    -0x88(%rbp),%rdx
    0.00 :	  5ba14a:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5ba14e:       41 8b 86 98 00 00 00    mov    0x98(%r14),%eax
    0.00 :	  5ba155:       85 c0                   test   %eax,%eax
    0.00 :	  5ba157:       0f 8e 14 fe ff ff       jle    5b9f71 <ExecAgg+0x1f1>
    0.00 :	  5ba15d:       c7 85 44 ff ff ff 00    movl   $0x0,-0xbc(%rbp)
    0.00 :	  5ba164:       00 00 00 
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5ba167:       48 63 95 44 ff ff ff    movslq -0xbc(%rbp),%rdx
    0.00 :	  5ba16e:       4c 8b a5 58 ff ff ff    mov    -0xa8(%rbp),%r12
    0.00 :	  5ba175:       48 69 c2 a8 04 00 00    imul   $0x4a8,%rdx,%rax
    0.00 :	  5ba17c:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5ba180:       49 01 c4                add    %rax,%r12
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5ba183:       48 89 d0                mov    %rdx,%rax
    0.00 :	  5ba186:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5ba18a:       48 03 85 50 ff ff ff    add    -0xb0(%rbp),%rax
    0.00 :	  5ba191:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :
         :	                        if (peraggstate->numSortCols > 0)
    0.00 :	  5ba198:       41 8b 84 24 8c 00 00    mov    0x8c(%r12),%eax
    0.00 :	  5ba19f:       00 
    0.00 :	  5ba1a0:       85 c0                   test   %eax,%eax
    0.00 :	  5ba1a2:       0f 8e 83 fd ff ff       jle    5b9f2b <ExecAgg+0x1ab>
         :	                        {
         :	                                if (peraggstate->numInputs == 1)
    0.00 :	  5ba1a8:       41 83 7c 24 14 01       cmpl   $0x1,0x14(%r12)
    0.00 :	  5ba1ae:       0f 84 3e 01 00 00       je     5ba2f2 <ExecAgg+0x572>
         :	static void
         :	process_ordered_aggregate_multi(AggState *aggstate,
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba1b4:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
    0.00 :	  5ba1bb:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba1bf:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
         :	        int                     numTransInputs = peraggstate->numTransInputs;
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1c3:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba1ca:       00 
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
    0.00 :	  5ba1cb:       49 8b 9c 24 e8 00 00    mov    0xe8(%r12),%rbx
    0.00 :	  5ba1d2:       00 
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
    0.00 :	  5ba1d3:       4d 8b bc 24 f0 00 00    mov    0xf0(%r12),%r15
    0.00 :	  5ba1da:       00 
         :	        int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5ba1db:       45 8b 6c 24 18          mov    0x18(%r12),%r13d
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1e0:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	        bool            haveOldValue = false;
         :	        int                     i;
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba1e3:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba1ea:       00 
    0.00 :	  5ba1eb:       e8 00 7e 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        ExecClearTuple(slot1);
    0.00 :	  5ba1f0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba1f3:       e8 18 9f ff ff          callq  5b4110 <ExecClearTuple>
         :	        if (slot2)
    0.00 :	  5ba1f8:       4d 85 ff                test   %r15,%r15
    0.00 :	  5ba1fb:       74 08                   je     5ba205 <ExecAgg+0x485>
         :	                ExecClearTuple(slot2);
    0.00 :	  5ba1fd:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba200:       e8 0b 9f ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5ba205:       c6 45 bb 00             movb   $0x0,-0x45(%rbp)
    0.00 :	  5ba209:       eb 3d                   jmp    5ba248 <ExecAgg+0x4c8>
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba20b:       80 7d bb 00             cmpb   $0x0,-0x45(%rbp)
    0.00 :	  5ba20f:       90                      nop
    0.00 :	  5ba210:       74 6c                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba212:       49 8b 8c 24 98 00 00    mov    0x98(%r12),%rcx
    0.00 :	  5ba219:       00 
    0.00 :	  5ba21a:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  5ba21e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5ba221:       4d 8b 84 24 b8 00 00    mov    0xb8(%r12),%r8
    0.00 :	  5ba228:       00 
    0.00 :	  5ba229:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  5ba22c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba22f:       e8 0c f2 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba234:       84 c0                   test   %al,%al
    0.00 :	  5ba236:       74 46                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba238:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba23c:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
    0.00 :	  5ba240:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba243:       e8 c8 9e ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        ExecClearTuple(slot1);
         :	        if (slot2)
         :	                ExecClearTuple(slot2);
         :
         :	        while (tuplesort_gettupleslot(peraggstate->sortstate, true, slot1))
    0.00 :	  5ba248:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba24f:       00 
    0.00 :	  5ba250:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba253:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba258:       e8 33 40 1e 00          callq  79e290 <tuplesort_gettupleslot>
    0.00 :	  5ba25d:       84 c0                   test   %al,%al
    0.00 :	  5ba25f:       0f 84 a0 fc ff ff       je     5b9f05 <ExecAgg+0x185>
         :	                /*
         :	                 * Extract the first numTransInputs columns as datums to pass to the
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
    0.00 :	  5ba265:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5ba268:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba26b:       e8 f0 4f eb ff          callq  46f260 <slot_getsomeattrs>
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba270:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba273:       85 c0                   test   %eax,%eax
    0.00 :	  5ba275:       0f 94 85 0f ff ff ff    sete   -0xf1(%rbp)
    0.00 :	  5ba27c:       75 8d                   jne    5ba20b <ExecAgg+0x48b>
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba27e:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5ba281:       7e 2e                   jle    5ba2b1 <ExecAgg+0x531>
    0.00 :	  5ba283:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba285:       0f 1f 00                nopl   (%rax)
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
    0.00 :	  5ba288:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  5ba28c:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5ba290:       49 89 84 d4 28 01 00    mov    %rax,0x128(%r12,%rdx,8)
    0.00 :	  5ba297:       00 
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
    0.00 :	  5ba298:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  5ba29c:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5ba2a0:       41 88 84 14 41 04 00    mov    %al,0x441(%r12,%rdx,1)
    0.00 :	  5ba2a7:       00 
    0.00 :	  5ba2a8:       48 83 c2 01             add    $0x1,%rdx
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba2ac:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  5ba2af:       7f d7                   jg     5ba288 <ExecAgg+0x508>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba2b1:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba2b8:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba2bb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba2be:       e8 cd f4 ff ff          callq  5b9790 <advance_transition_function>
         :
         :	                        if (numDistinctCols > 0)
    0.00 :	  5ba2c3:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba2c6:       85 c0                   test   %eax,%eax
    0.00 :	  5ba2c8:       7e 0d                   jle    5ba2d7 <ExecAgg+0x557>
    0.00 :	  5ba2ca:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba2cd:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba2d1:       4c 89 fb                mov    %r15,%rbx
    0.00 :	  5ba2d4:       49 89 ff                mov    %rdi,%r15
         :	                                haveOldValue = true;
         :	                        }
         :	                }
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
    0.00 :	  5ba2d7:       80 bd 0f ff ff ff 00    cmpb   $0x0,-0xf1(%rbp)
    0.00 :	  5ba2de:       0f 84 5c ff ff ff       je     5ba240 <ExecAgg+0x4c0>
         :	                        MemoryContextReset(workcontext);
    0.00 :	  5ba2e4:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5ba2e8:       e8 c3 e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba2ed:       e9 4e ff ff ff          jmpq   5ba240 <ExecAgg+0x4c0>
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba2f2:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba2f9:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5ba2fc:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5ba301:       45 31 ff                xor    %r15d,%r15d
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba304:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba308:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            isDistinct = (peraggstate->numDistinctCols > 0);
    0.00 :	  5ba30c:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba313:       00 
    0.00 :	  5ba314:       89 45 b4                mov    %eax,-0x4c(%rbp)
         :	        Datum      *newVal;
         :	        bool       *isNull;
         :
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba317:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba31e:       00 
    0.00 :	  5ba31f:       e8 cc 7c 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba324:       49 8d 94 24 28 01 00    lea    0x128(%r12),%rdx
    0.00 :	  5ba32b:       00 
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba32c:       49 8d 84 24 41 04 00    lea    0x441(%r12),%rax
    0.00 :	  5ba333:       00 
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba334:       48 89 55 98             mov    %rdx,-0x68(%rbp)
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba338:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  5ba33c:       eb 3c                   jmp    5ba37a <ExecAgg+0x5fa>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba33e:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba345:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba348:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba34b:       e8 40 f4 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba350:       84 db                   test   %bl,%bl
    0.00 :	  5ba352:       0f 84 98 00 00 00       je     5ba3f0 <ExecAgg+0x670>
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
         :	                        oldIsNull = *isNull;
    0.00 :	  5ba358:       41 0f b6 9c 24 41 04    movzbl 0x441(%r12),%ebx
    0.00 :	  5ba35f:       00 00 
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
    0.00 :	  5ba361:       4d 8b bc 24 28 01 00    mov    0x128(%r12),%r15
    0.00 :	  5ba368:       00 
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba369:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ba36d:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  5ba373:       48 89 15 e6 04 60 00    mov    %rdx,0x6004e6(%rip)        # bba860 <CurrentMemoryContext>
         :	         * Note: if input type is pass-by-ref, the datums returned by the sort are
         :	         * freshly palloc'd in the per-query context, so we must be careful to
         :	         * pfree them when they are no longer needed.
         :	         */
         :
         :	        while (tuplesort_getdatum(peraggstate->sortstate, true,
    0.00 :	  5ba37a:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba381:       00 
    0.00 :	  5ba382:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5ba386:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba38b:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ba38f:       e8 2c 3e 1e 00          callq  79e1c0 <tuplesort_getdatum>
    0.00 :	  5ba394:       84 c0                   test   %al,%al
    0.00 :	  5ba396:       0f 84 e0 00 00 00       je     5ba47c <ExecAgg+0x6fc>
         :	        {
         :	                /*
         :	                 * Clear and select the working context for evaluation of the equality
         :	                 * function and transition function.
         :	                 */
         :	                MemoryContextReset(workcontext);
    0.00 :	  5ba39c:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5ba3a0:       e8 0b e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba3a5:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3a9:       48 8b 15 b0 04 60 00    mov    0x6004b0(%rip),%rdx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba3b0:       48 89 05 a9 04 60 00    mov    %rax,0x6004a9(%rip)        # bba860 <CurrentMemoryContext>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba3b7:       8b 45 b4                mov    -0x4c(%rbp),%eax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3ba:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
    0.00 :	  5ba3be:       85 c0                   test   %eax,%eax
    0.00 :	  5ba3c0:       0f 8e 78 ff ff ff       jle    5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3c6:       45 84 ed                test   %r13b,%r13b
    0.00 :	  5ba3c9:       0f 84 6f ff ff ff       je     5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3cf:       84 db                   test   %bl,%bl
    0.00 :	  5ba3d1:       75 39                   jne    5ba40c <ExecAgg+0x68c>
    0.00 :	  5ba3d3:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba3da:       00 00 
    0.00 :	  5ba3dc:       74 50                   je     5ba42e <ExecAgg+0x6ae>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba3de:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba3e5:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba3e8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba3eb:       e8 a0 f3 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba3f0:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba3f7:       00 00 
    0.00 :	  5ba3f9:       0f 85 59 ff ff ff       jne    5ba358 <ExecAgg+0x5d8>
         :	                                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba3ff:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba402:       e8 79 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba407:       e9 4c ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba40c:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba413:       00 00 
    0.00 :	  5ba415:       75 35                   jne    5ba44c <ExecAgg+0x6cc>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba417:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba41e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba421:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba424:       e8 67 f3 ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5ba429:       e9 2a ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba42e:       49 8b 8c 24 28 01 00    mov    0x128(%r12),%rcx
    0.00 :	  5ba435:       00 
    0.00 :	  5ba436:       49 8b bc 24 b8 00 00    mov    0xb8(%r12),%rdi
    0.00 :	  5ba43d:       00 
    0.00 :	  5ba43e:       31 f6                   xor    %esi,%esi
    0.00 :	  5ba440:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  5ba443:       e8 e8 3b 1c 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  5ba448:       84 c0                   test   %al,%al
    0.00 :	  5ba44a:       74 92                   je     5ba3de <ExecAgg+0x65e>
         :	                         (!oldIsNull && !*isNull &&
         :	                          DatumGetBool(FunctionCall2(&peraggstate->equalfns[0],
         :	                                                                                 oldVal, *newVal)))))
         :	                {
         :	                        /* equal to prior, so forget this one */
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
    0.00 :	  5ba44c:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba453:       00 00 
    0.00 :	  5ba455:       0f 85 0e ff ff ff       jne    5ba369 <ExecAgg+0x5e9>
    0.00 :	  5ba45b:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba462:       00 00 
    0.00 :	  5ba464:       0f 85 ff fe ff ff       jne    5ba369 <ExecAgg+0x5e9>
         :	                                pfree(DatumGetPointer(*newVal));
    0.00 :	  5ba46a:       49 8b bc 24 28 01 00    mov    0x128(%r12),%rdi
    0.00 :	  5ba471:       00 
    0.00 :	  5ba472:       e8 09 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba477:       e9 ed fe ff ff          jmpq   5ba369 <ExecAgg+0x5e9>
         :	                }
         :
         :	                MemoryContextSwitchTo(oldContext);
         :	        }
         :
         :	        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba47c:       84 db                   test   %bl,%bl
    0.00 :	  5ba47e:       0f 85 8e fa ff ff       jne    5b9f12 <ExecAgg+0x192>
    0.00 :	  5ba484:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba48b:       00 00 
    0.00 :	  5ba48d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5ba490:       0f 85 7c fa ff ff       jne    5b9f12 <ExecAgg+0x192>
         :	                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba496:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba499:       e8 e2 e6 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba49e:       e9 6f fa ff ff          jmpq   5b9f12 <ExecAgg+0x192>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba4a3:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba4a7:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba4ab:       e8 50 2b ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba4b0:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba4b3:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba4b6:       0f 84 f0 fa ff ff       je     5b9fac <ExecAgg+0x22c>
         :	                        {
         :	                                aggstate->ss.ps.ps_TupFromTlist =
    0.00 :	  5ba4bc:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5ba4bf:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5ba4c4:       e9 ef fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
    0.00 :	  5ba4c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                                outerslot = ExecProcNode(outerPlan);
         :	                                if (TupIsNull(outerslot))
         :	                                {
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
    0.00 :	  5ba4d0:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba4d7:       01 
    0.00 :	  5ba4d8:       e9 5f fc ff ff          jmpq   5ba13c <ExecAgg+0x3bc>
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4dd:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba4e1:       e8 ba 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4e6:       48 85 c0                test   %rax,%rax
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4e9:       48 89 c7                mov    %rax,%rdi
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4ec:       74 06                   je     5ba4f4 <ExecAgg+0x774>
    0.00 :	  5ba4ee:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba4f2:       74 1f                   je     5ba513 <ExecAgg+0x793>
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba4f4:       48 8b 85 10 ff ff ff    mov    -0xf0(%rbp),%rax
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
    0.00 :	  5ba4fb:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba502:       01 
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba503:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5ba506:       85 c0                   test   %eax,%eax
    0.00 :	  5ba508:       0f 84 2b fb ff ff       je     5ba039 <ExecAgg+0x2b9>
    0.00 :	  5ba50e:       e9 a3 fa ff ff          jmpq   5b9fb6 <ExecAgg+0x236>
         :	                        {
         :	                                /*
         :	                                 * Make a copy of the first input tuple; we will use this for
         :	                                 * comparisons (in group mode) and for projection.
         :	                                 */
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba513:       e8 98 9a ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba518:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
    0.00 :	  5ba51f:       90                      nop
    0.00 :	  5ba520:       e9 14 fb ff ff          jmpq   5ba039 <ExecAgg+0x2b9>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba525:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba529:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba52d:       e8 ce 2a ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba532:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba535:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba538:       0f 84 ba f9 ff ff       je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5ba53e:       e9 79 ff ff ff          jmpq   5ba4bc <ExecAgg+0x73c>
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
         :	                if (entry == NULL)
         :	                {
         :	                        /* No more entries in hashtable, so done */
         :	                        aggstate->agg_done = TRUE;
    0.00 :	  5ba543:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba54a:       01 
    0.00 :	  5ba54b:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba54d:       e9 66 fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
         :	        TupleTableSlot *outerslot;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5ba552:       4d 8b 6e 30             mov    0x30(%r14),%r13
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba556:       4d 8b be c0 00 00 00    mov    0xc0(%r14),%r15
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba55d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5ba560:       e8 3b 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba565:       48 85 c0                test   %rax,%rax
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba568:       48 89 c3                mov    %rax,%rbx
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba56b:       0f 84 db 00 00 00       je     5ba64c <ExecAgg+0x8cc>
    0.00 :	  5ba571:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba575:       0f 85 d1 00 00 00       jne    5ba64c <ExecAgg+0x8cc>
         :	                        break;
         :	                /* set up for advance_aggregates call */
         :	                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba57b:       49 89 47 18             mov    %rax,0x18(%r15)
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static AggHashEntry
         :	lookup_hash_entry(AggState *aggstate, TupleTableSlot *inputslot)
         :	{
         :	        TupleTableSlot *hashslot = aggstate->hashslot;
    0.00 :	  5ba57f:       4d 8b a6 f0 00 00 00    mov    0xf0(%r14),%r12
         :	        ListCell   *l;
         :	        AggHashEntry entry;
         :	        bool            isnew;
         :
         :	        /* if first time through, initialize hashslot by cloning input slot */
         :	        if (hashslot->tts_tupleDescriptor == NULL)
    0.00 :	  5ba586:       49 83 7c 24 10 00       cmpq   $0x0,0x10(%r12)
    0.00 :	  5ba58c:       75 14                   jne    5ba5a2 <ExecAgg+0x822>
         :	        {
         :	                ExecSetSlotDescriptor(hashslot, inputslot->tts_tupleDescriptor);
    0.00 :	  5ba58e:       48 8b 70 10             mov    0x10(%rax),%rsi
    0.00 :	  5ba592:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba595:       e8 16 a0 ff ff          callq  5b45b0 <ExecSetSlotDescriptor>
         :	                /* Make sure all unused columns are NULLs */
         :	                ExecStoreAllNullTuple(hashslot);
    0.00 :	  5ba59a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba59d:       e8 1e 9d ff ff          callq  5b42c0 <ExecStoreAllNullTuple>
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
    0.00 :	  5ba5a2:       49 8b 96 f8 00 00 00    mov    0xf8(%r14),%rdx
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ba5a9:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba5ab:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5ba5ae:       74 04                   je     5ba5b4 <ExecAgg+0x834>
    0.00 :	  5ba5b0:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ba5b4:       8b 30                   mov    (%rax),%esi
    0.00 :	  5ba5b6:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba5b9:       e8 a2 4c eb ff          callq  46f260 <slot_getsomeattrs>
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5be:       49 8b 86 f8 00 00 00    mov    0xf8(%r14),%rax
    0.00 :	  5ba5c5:       48 85 c0                test   %rax,%rax
    0.00 :	  5ba5c8:       74 3a                   je     5ba604 <ExecAgg+0x884>
    0.00 :	  5ba5ca:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  5ba5ce:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba5d1:       74 31                   je     5ba604 <ExecAgg+0x884>
         :	        {
         :	                int                     varNumber = lfirst_int(l) - 1;
         :
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
    0.00 :	  5ba5d3:       8b 06                   mov    (%rsi),%eax
    0.00 :	  5ba5d5:       48 8b 53 28             mov    0x28(%rbx),%rdx
    0.00 :	  5ba5d9:       49 8b 4c 24 28          mov    0x28(%r12),%rcx
    0.00 :	  5ba5de:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ba5e1:       48 98                   cltq   
    0.00 :	  5ba5e3:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ba5e7:       48 89 14 c1             mov    %rdx,(%rcx,%rax,8)
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
    0.00 :	  5ba5eb:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  5ba5ef:       49 8b 4c 24 30          mov    0x30(%r12),%rcx
    0.00 :	  5ba5f4:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	  5ba5f8:       88 14 01                mov    %dl,(%rcx,%rax,1)
         :	                ExecStoreAllNullTuple(hashslot);
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5fb:       48 8b 76 08             mov    0x8(%rsi),%rsi
    0.00 :	  5ba5ff:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba602:       75 cf                   jne    5ba5d3 <ExecAgg+0x853>
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
         :	        }
         :
         :	        /* find or create the hashtable entry using the filtered tuple */
         :	        entry = (AggHashEntry) LookupTupleHashEntry(aggstate->hashtable,
    0.00 :	  5ba604:       49 8b be e8 00 00 00    mov    0xe8(%r14),%rdi
    0.00 :	  5ba60b:       48 8d 55 d4             lea    -0x2c(%rbp),%rdx
    0.00 :	  5ba60f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba612:       e8 59 e8 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                                                                                                hashslot,
         :	                                                                                                &isnew);
         :
         :	        if (isnew)
    0.00 :	  5ba617:       80 7d d4 00             cmpb   $0x0,-0x2c(%rbp)
    0.00 :	  5ba61b:       48 8d 58 08             lea    0x8(%rax),%rbx
    0.00 :	  5ba61f:       74 12                   je     5ba633 <ExecAgg+0x8b3>
         :	        {
         :	                /* initialize aggregates for new tuple group */
         :	                initialize_aggregates(aggstate, aggstate->peragg, entry->pergroup);
    0.00 :	  5ba621:       49 8b b6 b0 00 00 00    mov    0xb0(%r14),%rsi
    0.00 :	  5ba628:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba62b:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba62e:       e8 9d ef ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                /* Find or build hashtable entry for this tuple's group */
         :	                entry = lookup_hash_entry(aggstate, outerslot);
         :
         :	                /* Advance the aggregates */
         :	                advance_aggregates(aggstate, entry->pergroup);
    0.00 :	  5ba633:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba636:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba639:       e8 12 f3 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
    0.00 :	  5ba63e:       49 8b 7f 28             mov    0x28(%r15),%rdi
    0.00 :	  5ba642:       e8 69 e3 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba647:       e9 11 ff ff ff          jmpq   5ba55d <ExecAgg+0x7dd>
         :	        }
         :
         :	        aggstate->table_filled = true;
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba64c:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
         :	        }
         :
         :	        aggstate->table_filled = true;
    0.00 :	  5ba653:       41 c6 86 00 01 00 00    movb   $0x1,0x100(%r14)
    0.00 :	  5ba65a:       01 
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba65b:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5ba662:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5ba665:       e8 f6 92 1c 00          callq  783960 <hash_freeze>
    0.00 :	  5ba66a:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
    0.00 :	  5ba671:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba674:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5ba677:       e8 b4 97 1c 00          callq  783e30 <hash_seq_init>
    0.00 :	  5ba67c:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5ba683:       00 
    0.00 :	  5ba684:       e9 6c f7 ff ff          jmpq   5b9df5 <ExecAgg+0x75>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005baf80 <BitmapHeapNext>:
         :	 *              Retrieve next tuple from the BitmapHeapScan node's currentRelation
         :	 * ----------------------------------------------------------------
         :	 */
         :	static TupleTableSlot *
         :	BitmapHeapNext(BitmapHeapScanState *node)
         :	{
    0.00 :	  5baf80:       55                      push   %rbp
    0.00 :	  5baf81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5baf84:       41 57                   push   %r15
    0.00 :	  5baf86:       41 56                   push   %r14
    0.00 :	  5baf88:       41 55                   push   %r13
    0.00 :	  5baf8a:       41 54                   push   %r12
    0.00 :	  5baf8c:       53                      push   %rbx
    0.00 :	  5baf8d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5baf90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        TupleTableSlot *slot;
         :
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
    0.00 :	  5baf97:       48 8b 47 60             mov    0x60(%rdi),%rax
    0.00 :	  5baf9b:       48 89 85 28 ff ff ff    mov    %rax,-0xd8(%rbp)
         :	        slot = node->ss.ss_ScanTupleSlot;
    0.00 :	  5bafa2:       48 8b 97 88 00 00 00    mov    0x88(%rdi),%rdx
    0.00 :	  5bafa9:       48 89 95 38 ff ff ff    mov    %rdx,-0xc8(%rbp)
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafb0:       48 8b 8f a0 00 00 00    mov    0xa0(%rdi),%rcx
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
    0.00 :	  5bafb7:       4c 8b a7 80 00 00 00    mov    0x80(%rdi),%r12
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafbe:       48 89 8d 30 ff ff ff    mov    %rcx,-0xd0(%rbp)
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
    0.00 :	  5bafc5:       48 83 bf 98 00 00 00    cmpq   $0x0,0x98(%rdi)
    0.00 :	  5bafcc:       00 
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
         :	        tbmres = node->tbmres;
    0.00 :	  5bafcd:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
         :	#ifdef USE_PREFETCH
         :	        prefetch_iterator = node->prefetch_iterator;
    0.00 :	  5bafd4:       4c 8b bf c0 00 00 00    mov    0xc0(%rdi),%r15
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
    0.00 :	  5bafdb:       0f 84 11 06 00 00       je     5bb5f2 <BitmapHeapNext+0x672>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bafe1:       49 8d 44 24 48          lea    0x48(%r12),%rax
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bafe6:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bafe9:       48 89 85 20 ff ff ff    mov    %rax,-0xe0(%rbp)
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5baff0:       0f 84 c4 01 00 00       je     5bb1ba <BitmapHeapNext+0x23a>
    0.00 :	  5baff6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5baffd:       00 00 00 
         :	                else
         :	                {
         :	                        /*
         :	                         * Continuing in previously obtained page; advance rs_cindex
         :	                         */
         :	                        scan->rs_cindex++;
    0.00 :	  5bb000:       41 83 44 24 70 01       addl   $0x1,0x70(%r12)
         :
         :	                        /*
         :	                         * Try to prefetch at least a few pages even before we get to the
         :	                         * second page if we don't stop reading after the first tuple.
         :	                         */
         :	                        if (node->prefetch_target < target_prefetch_pages)
    0.00 :	  5bb006:       49 89 d5                mov    %rdx,%r13
    0.00 :	  5bb009:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
    0.00 :	  5bb00f:       3b 05 4f 20 5c 00       cmp    0x5c204f(%rip),%eax        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb015:       7d 0c                   jge    5bb023 <BitmapHeapNext+0xa3>
         :	                                node->prefetch_target++;
    0.00 :	  5bb017:       83 c0 01                add    $0x1,%eax
    0.00 :	  5bb01a:       49 89 d5                mov    %rdx,%r13
    0.00 :	  5bb01d:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
         :	                }
         :
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
    0.00 :	  5bb023:       41 8b 44 24 70          mov    0x70(%r12),%eax
    0.00 :	  5bb028:       85 c0                   test   %eax,%eax
    0.00 :	  5bb02a:       0f 88 e0 01 00 00       js     5bb210 <BitmapHeapNext+0x290>
    0.00 :	  5bb030:       41 3b 44 24 78          cmp    0x78(%r12),%eax
    0.00 :	  5bb035:       0f 8d d5 01 00 00       jge    5bb210 <BitmapHeapNext+0x290>
         :	                 * to avoid having prefetching interfere with the main I/O. Also, this
         :	                 * should happen only when we have determined there is still something
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
    0.00 :	  5bb03b:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb03e:       74 55                   je     5bb095 <BitmapHeapNext+0x115>
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
    0.00 :	  5bb040:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
    0.00 :	  5bb046:       3b 83 c8 00 00 00       cmp    0xc8(%rbx),%eax
    0.00 :	  5bb04c:       7f 24                   jg     5bb072 <BitmapHeapNext+0xf2>
    0.00 :	  5bb04e:       eb 45                   jmp    5bb095 <BitmapHeapNext+0x115>
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
         :	                                        break;
         :	                                }
         :	                                node->prefetch_pages++;
    0.00 :	  5bb050:       83 83 c8 00 00 00 01    addl   $0x1,0xc8(%rbx)
         :	                                PrefetchBuffer(scan->rs_rd, MAIN_FORKNUM, tbmpre->blockno);
    0.00 :	  5bb057:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb059:       8b 10                   mov    (%rax),%edx
    0.00 :	  5bb05b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb05f:       e8 6c b7 0b 00          callq  6767d0 <PrefetchBuffer>
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
    0.00 :	  5bb064:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
    0.00 :	  5bb06a:       3b 83 cc 00 00 00       cmp    0xcc(%rbx),%eax
    0.00 :	  5bb070:       7d 23                   jge    5bb095 <BitmapHeapNext+0x115>
         :	                        {
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb072:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb075:       e8 d6 82 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL)
    0.00 :	  5bb07a:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb07d:       75 d1                   jne    5bb050 <BitmapHeapNext+0xd0>
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb07f:       4c 89 ff                mov    %r15,%rdi
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb082:       45 31 ff                xor    %r15d,%r15d
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL)
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb085:       e8 86 84 02 00          callq  5e3510 <tbm_end_iterate>
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb08a:       48 c7 83 c0 00 00 00    movq   $0x0,0xc0(%rbx)
    0.00 :	  5bb091:       00 00 00 00 
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
    0.00 :	  5bb095:       49 63 44 24 70          movslq 0x70(%r12),%rax
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb09a:       41 8b 74 24 64          mov    0x64(%r12),%esi
    0.00 :	  5bb09f:       85 f6                   test   %esi,%esi
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
    0.00 :	  5bb0a1:       41 0f b7 7c 44 7c       movzwl 0x7c(%r12,%rax,2),%edi
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb0a7:       0f 88 73 01 00 00       js     5bb220 <BitmapHeapNext+0x2a0>
    0.00 :	  5bb0ad:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  5bb0b0:       48 63 c8                movslq %eax,%rcx
    0.00 :	  5bb0b3:       48 c1 e1 0d             shl    $0xd,%rcx
    0.00 :	  5bb0b7:       48 03 0d 3a 4a 60 00    add    0x604a3a(%rip),%rcx        # bbfaf8 <BufferBlocks>
         :	                lp = PageGetItemId(dp, targoffset);
    0.00 :	  5bb0be:       0f b7 d7                movzwl %di,%edx
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb0c1:       48 83 c2 03             add    $0x3,%rdx
    0.00 :	  5bb0c5:       0f b7 44 91 08          movzwl 0x8(%rcx,%rdx,4),%eax
    0.00 :	  5bb0ca:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  5bb0cf:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5bb0d3:       49 89 44 24 58          mov    %rax,0x58(%r12)
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb0d8:       0f b7 44 91 0a          movzwl 0xa(%rcx,%rdx,4),%eax
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb0dd:       49 8b 14 24             mov    (%r12),%rdx
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
         :	                lp = PageGetItemId(dp, targoffset);
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb0e1:       66 d1 e8                shr    %ax
    0.00 :	  5bb0e4:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb0e7:       41 89 44 24 48          mov    %eax,0x48(%r12)
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb0ec:       8b 42 40                mov    0x40(%rdx),%eax
    0.00 :	  5bb0ef:       41 89 44 24 54          mov    %eax,0x54(%r12)
         :	                ItemPointerSet(&scan->rs_ctup.t_self, tbmres->blockno, targoffset);
    0.00 :	  5bb0f4:       41 8b 45 00             mov    0x0(%r13),%eax
    0.00 :	  5bb0f8:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  5bb0fb:       66 41 89 44 24 4c       mov    %ax,0x4c(%r12)
    0.00 :	  5bb101:       41 8b 45 00             mov    0x0(%r13),%eax
    0.00 :	  5bb105:       66 41 89 7c 24 50       mov    %di,0x50(%r12)
    0.00 :	  5bb10b:       66 41 89 44 24 4e       mov    %ax,0x4e(%r12)
         :
         :	                pgstat_count_heap_fetch(scan->rs_rd);
    0.00 :	  5bb111:       48 8b 82 38 01 00 00    mov    0x138(%rdx),%rax
    0.00 :	  5bb118:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb11b:       74 0a                   je     5bb127 <BitmapHeapNext+0x1a7>
    0.00 :	  5bb11d:       48 83 40 20 01          addq   $0x1,0x20(%rax)
    0.00 :	  5bb122:       41 8b 74 24 64          mov    0x64(%r12),%esi
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bb127:       89 f2                   mov    %esi,%edx
    0.00 :	  5bb129:       48 8b bd 20 ff ff ff    mov    -0xe0(%rbp),%rdi
    0.00 :	  5bb130:       48 8b b5 38 ff ff ff    mov    -0xc8(%rbp),%rsi
    0.00 :	  5bb137:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bb139:       e8 42 93 ff ff          callq  5b4480 <ExecStoreTuple>
         :
         :	                /*
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
    0.00 :	  5bb13e:       41 80 7d 08 00          cmpb   $0x0,0x8(%r13)
    0.00 :	  5bb143:       0f 84 b1 02 00 00       je     5bb3fa <BitmapHeapNext+0x47a>
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    0.00 :	  5bb149:       48 8b 95 28 ff ff ff    mov    -0xd8(%rbp),%rdx
    0.00 :	  5bb150:       48 8b 8d 38 ff ff ff    mov    -0xc8(%rbp),%rcx
         :	                        ResetExprContext(econtext);
    0.00 :	  5bb157:       48 8b 7a 28             mov    0x28(%rdx),%rdi
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    0.00 :	  5bb15b:       48 89 4a 08             mov    %rcx,0x8(%rdx)
         :	                        ResetExprContext(econtext);
    0.00 :	  5bb15f:       e8 4c d8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                        if (!ExecQual(node->bitmapqualorig, econtext, false))
    0.00 :	  5bb164:       48 8b bb 90 00 00 00    mov    0x90(%rbx),%rdi
    0.00 :	  5bb16b:       48 8b b5 28 ff ff ff    mov    -0xd8(%rbp),%rsi
    0.00 :	  5bb172:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb174:       e8 97 1d ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5bb179:       84 c0                   test   %al,%al
    0.00 :	  5bb17b:       0f 85 79 02 00 00       jne    5bb3fa <BitmapHeapNext+0x47a>
         :	                        {
         :	                                /* Fails recheck, so drop it and loop back for another */
         :	                                InstrCountFiltered2(node, 1);
    0.00 :	  5bb181:       48 8b 43 18             mov    0x18(%rbx),%rax
    0.00 :	  5bb185:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb188:       74 18                   je     5bb1a2 <BitmapHeapNext+0x222>
    0.00 :	  5bb18a:       f2 0f 10 05 c6 3f 1f    movsd  0x1f3fc6(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bb191:       00 
    0.00 :	  5bb192:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bb199:       00 
    0.00 :	  5bb19a:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bb1a1:       00 
         :	                                ExecClearTuple(slot);
    0.00 :	  5bb1a2:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb1a9:       e8 62 8f ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
  100.00 :	  5bb1ae:       4c 89 ea                mov    %r13,%rdx
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bb1b1:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bb1b4:       0f 85 46 fe ff ff       jne    5bb000 <BitmapHeapNext+0x80>
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.00 :	  5bb1ba:       48 8b bd 30 ff ff ff    mov    -0xd0(%rbp),%rdi
    0.00 :	  5bb1c1:       e8 8a 81 02 00          callq  5e3350 <tbm_iterate>
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1c6:       48 85 c0                test   %rax,%rax
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.00 :	  5bb1c9:       49 89 c5                mov    %rax,%r13
    0.00 :	  5bb1cc:       48 89 83 a8 00 00 00    mov    %rax,0xa8(%rbx)
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1d3:       0f 84 0e 02 00 00       je     5bb3e7 <BitmapHeapNext+0x467>
         :	                                /* no more entries in the bitmap */
         :	                                break;
         :	                        }
         :
         :	#ifdef USE_PREFETCH
         :	                        if (node->prefetch_pages > 0)
    0.00 :	  5bb1d9:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
    0.00 :	  5bb1df:       85 c0                   test   %eax,%eax
    0.00 :	  5bb1e1:       0f 8e ae 01 00 00       jle    5bb395 <BitmapHeapNext+0x415>
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
    0.00 :	  5bb1e7:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb1ea:       89 83 c8 00 00 00       mov    %eax,0xc8(%rbx)
    0.00 :	  5bb1f0:       41 8b 55 00             mov    0x0(%r13),%edx
    0.00 :	  5bb1f4:       89 95 7c ff ff ff       mov    %edx,-0x84(%rbp)
         :	                         * Ignore any claimed entries past what we think is the end of the
         :	                         * relation.  (This is probably not necessary given that we got at
         :	                         * least AccessShareLock on the table before performing any of the
         :	                         * indexscans, but let's be safe.)
         :	                         */
         :	                        if (tbmres->blockno >= scan->rs_nblocks)
    0.00 :	  5bb1fa:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  5bb200:       41 39 44 24 28          cmp    %eax,0x28(%r12)
    0.00 :	  5bb205:       77 2f                   ja     5bb236 <BitmapHeapNext+0x2b6>
    0.00 :	  5bb207:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bb20e:       00 00 
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
         :	                {
         :	                        node->tbmres = tbmres = NULL;
    0.00 :	  5bb210:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb217:       00 00 00 00 
    0.00 :	  5bb21b:       45 31 ed                xor    %r13d,%r13d
         :	                        continue;
    0.00 :	  5bb21e:       eb 8e                   jmp    5bb1ae <BitmapHeapNext+0x22e>
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb220:       89 f0                   mov    %esi,%eax
    0.00 :	  5bb222:       48 8b 15 ef 1e 5c 00    mov    0x5c1eef(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb229:       f7 d0                   not    %eax
    0.00 :	  5bb22b:       48 98                   cltq   
    0.00 :	  5bb22d:       48 8b 0c c2             mov    (%rdx,%rax,8),%rcx
    0.00 :	  5bb231:       e9 88 fe ff ff          jmpq   5bb0be <BitmapHeapNext+0x13e>
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb236:       41 8b 7c 24 64          mov    0x64(%r12),%edi
    0.00 :	  5bb23b:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  5bb241:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb245:       e8 76 b4 0b 00          callq  6766c0 <ReleaseAndReadBuffer>
    0.00 :	  5bb24a:       89 85 78 ff ff ff       mov    %eax,-0x88(%rbp)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb250:       49 8b 54 24 08          mov    0x8(%r12),%rdx
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  5bb255:       89 c6                   mov    %eax,%esi
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb257:       41 89 44 24 64          mov    %eax,0x64(%r12)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb25c:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  5bb263:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb267:       e8 e4 43 ee ff          callq  49f650 <heap_page_prune_opt>
         :	        /*
         :	         * We must hold share lock on the buffer content while examining tuple
         :	         * visibility.  Afterwards, however, the tuples we have found to be
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
    0.00 :	  5bb26c:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
    0.00 :	  5bb272:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5bb277:       e8 94 94 0b 00          callq  674710 <LockBuffer>
         :
         :	        /*
         :	         * We need two separate strategies for lossy and non-lossy cases.
         :	         */
         :	        if (tbmres->ntuples >= 0)
    0.00 :	  5bb27c:       41 83 7d 04 00          cmpl   $0x0,0x4(%r13)
    0.00 :	  5bb281:       0f 8c 97 01 00 00       jl     5bb41e <BitmapHeapNext+0x49e>
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb287:       0f 84 c1 01 00 00       je     5bb44e <BitmapHeapNext+0x4ce>
    0.00 :	  5bb28d:       8b 8d 7c ff ff ff       mov    -0x84(%rbp),%ecx
    0.00 :	  5bb293:       0f b7 85 7c ff ff ff    movzwl -0x84(%rbp),%eax
    0.00 :	  5bb29a:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5bb29d:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb2a4:       00 00 00 
    0.00 :	  5bb2a7:       c1 e9 10                shr    $0x10,%ecx
    0.00 :	  5bb2aa:       66 89 4d 80             mov    %cx,-0x80(%rbp)
    0.00 :	  5bb2ae:       66 89 45 9e             mov    %ax,-0x62(%rbp)
    0.00 :	  5bb2b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2b8:       49 63 c6                movslq %r14d,%rax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2bb:       0f b7 55 80             movzwl -0x80(%rbp),%edx
    0.00 :	  5bb2bf:       0f b7 4d 9e             movzwl -0x62(%rbp),%ecx
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2c3:       41 0f b7 44 45 0a       movzwl 0xa(%r13,%rax,2),%eax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2c9:       c7 04 24 01 00 00 00    movl   $0x1,(%rsp)
    0.00 :	  5bb2d0:       4c 8d 45 a0             lea    -0x60(%rbp),%r8
    0.00 :	  5bb2d4:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  5bb2d8:       45 31 c9                xor    %r9d,%r9d
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2db:       66 89 55 c0             mov    %dx,-0x40(%rbp)
    0.00 :	  5bb2df:       66 89 4d c2             mov    %cx,-0x3e(%rbp)
    0.00 :	  5bb2e3:       66 89 45 c4             mov    %ax,-0x3c(%rbp)
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2e7:       48 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%rcx
    0.00 :	  5bb2ee:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb2f4:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb2f8:       e8 23 1f ee ff          callq  49d220 <heap_hot_search_buffer>
    0.00 :	  5bb2fd:       84 c0                   test   %al,%al
    0.00 :	  5bb2ff:       74 18                   je     5bb319 <BitmapHeapNext+0x399>
         :	                                                                           &heapTuple, NULL, true))
         :	                                scan->rs_vistuples[ntup++] = ItemPointerGetOffsetNumber(&tid);
    0.00 :	  5bb301:       48 63 95 54 ff ff ff    movslq -0xac(%rbp),%rdx
    0.00 :	  5bb308:       0f b7 45 c4             movzwl -0x3c(%rbp),%eax
    0.00 :	  5bb30c:       66 41 89 44 54 7c       mov    %ax,0x7c(%r12,%rdx,2)
    0.00 :	  5bb312:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb319:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5bb31d:       45 3b 75 04             cmp    0x4(%r13),%r14d
    0.00 :	  5bb321:       7c 95                   jl     5bb2b8 <BitmapHeapNext+0x338>
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
         :	                                                                                        buffer, snapshot);
         :	                }
         :	        }
         :
         :	        LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  5bb323:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
    0.00 :	  5bb329:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb32b:       e8 e0 93 0b 00          callq  674710 <LockBuffer>
         :
         :	        Assert(ntup <= MaxHeapTuplesPerPage);
         :	        scan->rs_ntuples = ntup;
    0.00 :	  5bb330:       8b 85 54 ff ff ff       mov    -0xac(%rbp),%eax
    0.00 :	  5bb336:       41 89 44 24 78          mov    %eax,0x78(%r12)
         :	                        /*
         :	                         * Fetch the current heap page and identify candidate tuples.
         :	                         */
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
    0.00 :	  5bb33b:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  5bb33f:       85 c0                   test   %eax,%eax
    0.00 :	  5bb341:       0f 88 16 01 00 00       js     5bb45d <BitmapHeapNext+0x4dd>
         :	                                node->exact_pages++;
    0.00 :	  5bb347:       48 83 83 b0 00 00 00    addq   $0x1,0xb0(%rbx)
    0.00 :	  5bb34e:       01 
         :	                                node->lossy_pages++;
         :
         :	                        /*
         :	                         * Set rs_cindex to first slot to examine
         :	                         */
         :	                        scan->rs_cindex = 0;
    0.00 :	  5bb34f:       41 c7 44 24 70 00 00    movl   $0x0,0x70(%r12)
    0.00 :	  5bb356:       00 00 
         :	                         * Increase prefetch target if it's not yet at the max.  Note that
         :	                         * we will increase it to zero after fetching the very first
         :	                         * page/tuple, then to one after the second tuple is fetched, then
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
    0.00 :	  5bb358:       8b 8b cc 00 00 00       mov    0xcc(%rbx),%ecx
    0.00 :	  5bb35e:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb360:       8b 15 fe 1c 5c 00       mov    0x5c1cfe(%rip),%edx        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb366:       39 d1                   cmp    %edx,%ecx
    0.00 :	  5bb368:       0f 8d c2 fc ff ff       jge    5bb030 <BitmapHeapNext+0xb0>
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
    0.00 :	  5bb36e:       89 d0                   mov    %edx,%eax
    0.00 :	  5bb370:       c1 e8 1f                shr    $0x1f,%eax
    0.00 :	  5bb373:       01 d0                   add    %edx,%eax
    0.00 :	  5bb375:       d1 f8                   sar    %eax
    0.00 :	  5bb377:       39 c1                   cmp    %eax,%ecx
    0.00 :	  5bb379:       0f 8d 94 00 00 00       jge    5bb413 <BitmapHeapNext+0x493>
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
    0.00 :	  5bb37f:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb381:       0f 8e 5d 02 00 00       jle    5bb5e4 <BitmapHeapNext+0x664>
         :	                                node->prefetch_target *= 2;
    0.00 :	  5bb387:       8d 04 09                lea    (%rcx,%rcx,1),%eax
    0.00 :	  5bb38a:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb390:       e9 8e fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	                        if (node->prefetch_pages > 0)
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
         :	                        }
         :	                        else if (prefetch_iterator)
    0.00 :	  5bb395:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb398:       0f 84 cc 00 00 00       je     5bb46a <BitmapHeapNext+0x4ea>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb39e:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb3a1:       e8 aa 7f 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
    0.00 :	  5bb3a6:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb3a9:       74 12                   je     5bb3bd <BitmapHeapNext+0x43d>
    0.00 :	  5bb3ab:       8b 00                   mov    (%rax),%eax
    0.00 :	  5bb3ad:       89 85 7c ff ff ff       mov    %eax,-0x84(%rbp)
    0.00 :	  5bb3b3:       41 3b 45 00             cmp    0x0(%r13),%eax
    0.00 :	  5bb3b7:       0f 84 3d fe ff ff       je     5bb1fa <BitmapHeapNext+0x27a>
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb3bd:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb3c2:       be 98 00 00 00          mov    $0x98,%esi
    0.00 :	  5bb3c7:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb3cc:       e8 4f 00 1c 00          callq  77b420 <elog_start>
    0.00 :	  5bb3d1:       be 88 b8 88 00          mov    $0x88b888,%esi
    0.00 :	  5bb3d6:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb3db:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb3dd:       e8 4e fe 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb3e2:       e8 e9 e0 ea ff          callq  4694d0 <abort@plt>
         :	        }
         :
         :	        /*
         :	         * if we get here it means we are at the end of the scan..
         :	         */
         :	        return ExecClearTuple(slot);
    0.00 :	  5bb3e7:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb3ee:       e8 1d 8d ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5bb3f3:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :	}
    0.00 :	  5bb3fa:       48 8b 85 38 ff ff ff    mov    -0xc8(%rbp),%rax
    0.00 :	  5bb401:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5bb408:       5b                      pop    %rbx
    0.00 :	  5bb409:       41 5c                   pop    %r12
    0.00 :	  5bb40b:       41 5d                   pop    %r13
    0.00 :	  5bb40d:       41 5e                   pop    %r14
    0.00 :	  5bb40f:       41 5f                   pop    %r15
    0.00 :	  5bb411:       c9                      leaveq 
    0.00 :	  5bb412:       c3                      retq   
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
    0.00 :	  5bb413:       89 93 cc 00 00 00       mov    %edx,0xcc(%rbx)
    0.00 :	  5bb419:       e9 05 fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb41e:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb424:       85 d2                   test   %edx,%edx
    0.00 :	  5bb426:       0f 88 9e 01 00 00       js     5bb5ca <BitmapHeapNext+0x64a>
    0.00 :	  5bb42c:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb432:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb435:       4c 63 c8                movslq %eax,%r9
    0.00 :	  5bb438:       49 c1 e1 0d             shl    $0xd,%r9
    0.00 :	  5bb43c:       4c 03 0d b5 46 60 00    add    0x6046b5(%rip),%r9        # bbfaf8 <BufferBlocks>
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb443:       41 0f b7 41 0c          movzwl 0xc(%r9),%eax
    0.00 :	  5bb448:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  5bb44c:       77 2b                   ja     5bb479 <BitmapHeapNext+0x4f9>
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb44e:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb455:       00 00 00 
    0.00 :	  5bb458:       e9 c6 fe ff ff          jmpq   5bb323 <BitmapHeapNext+0x3a3>
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
         :	                                node->exact_pages++;
         :	                        else
         :	                                node->lossy_pages++;
    0.00 :	  5bb45d:       48 83 83 b8 00 00 00    addq   $0x1,0xb8(%rbx)
    0.00 :	  5bb464:       01 
    0.00 :	  5bb465:       e9 e5 fe ff ff          jmpq   5bb34f <BitmapHeapNext+0x3cf>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb46a:       41 8b 4d 00             mov    0x0(%r13),%ecx
    0.00 :	  5bb46e:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  5bb474:       e9 81 fd ff ff          jmpq   5bb1fa <BitmapHeapNext+0x27a>
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb479:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb47c:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  5bb480:       48 c1 e8 02             shr    $0x2,%rax
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb484:       66 85 c0                test   %ax,%ax
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb487:       66 89 85 40 ff ff ff    mov    %ax,-0xc0(%rbp)
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb48e:       74 be                   je     5bb44e <BitmapHeapNext+0x4ce>
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb490:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  5bb496:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  5bb49c:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb4a3:       00 00 00 
    0.00 :	  5bb4a6:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  5bb4a9:       66 89 85 60 ff ff ff    mov    %ax,-0xa0(%rbp)
    0.00 :	  5bb4b0:       eb 18                   jmp    5bb4ca <BitmapHeapNext+0x54a>
    0.00 :	  5bb4b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
    0.00 :	  5bb4b8:       41 83 c6 01             add    $0x1,%r14d
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb4bc:       66 44 3b b5 40 ff ff    cmp    -0xc0(%rbp),%r14w
    0.00 :	  5bb4c3:       ff 
    0.00 :	  5bb4c4:       0f 87 59 fe ff ff       ja     5bb323 <BitmapHeapNext+0x3a3>
         :	                {
         :	                        ItemId          lp;
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
    0.00 :	  5bb4ca:       41 0f b7 c6             movzwl %r14w,%eax
         :	                        if (!ItemIdIsNormal(lp))
    0.00 :	  5bb4ce:       48 8d 50 03             lea    0x3(%rax),%rdx
    0.00 :	  5bb4d2:       41 8b 44 91 08          mov    0x8(%r9,%rdx,4),%eax
    0.00 :	  5bb4d7:       25 00 80 01 00          and    $0x18000,%eax
    0.00 :	  5bb4dc:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  5bb4e1:       75 d5                   jne    5bb4b8 <BitmapHeapNext+0x538>
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb4e3:       41 0f b7 44 91 08       movzwl 0x8(%r9,%rdx,4),%eax
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb4e9:       0f b7 8d 7c ff ff ff    movzwl -0x84(%rbp),%ecx
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb4f0:       48 8d 7d a0             lea    -0x60(%rbp),%rdi
    0.00 :	  5bb4f4:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb4fb:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  5bb500:       49 8d 04 01             lea    (%r9,%rax,1),%rax
    0.00 :	  5bb504:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	                        loctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb508:       41 0f b7 44 91 0a       movzwl 0xa(%r9,%rdx,4),%eax
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb50e:       0f b7 95 60 ff ff ff    movzwl -0xa0(%rbp),%edx
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb515:       66 d1 e8                shr    %ax
    0.00 :	  5bb518:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb51b:       89 45 a0                mov    %eax,-0x60(%rbp)
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb51e:       49 8b 04 24             mov    (%r12),%rax
    0.00 :	  5bb522:       8b 40 40                mov    0x40(%rax),%eax
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb525:       66 89 55 a4             mov    %dx,-0x5c(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb529:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb530:       66 89 4d a6             mov    %cx,-0x5a(%rbp)
    0.00 :	  5bb534:       66 44 89 75 a8          mov    %r14w,-0x58(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb539:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb53f:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb542:       ff 16                   callq  *(%rsi)
         :	                        if (valid)
    0.00 :	  5bb544:       84 c0                   test   %al,%al
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb546:       41 89 c0                mov    %eax,%r8d
         :	                        if (valid)
    0.00 :	  5bb549:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb550:       75 31                   jne    5bb583 <BitmapHeapNext+0x603>
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
    0.00 :	  5bb552:       41 0f be f8             movsbl %r8b,%edi
    0.00 :	  5bb556:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb55a:       4c 8b 85 58 ff ff ff    mov    -0xa8(%rbp),%r8
    0.00 :	  5bb561:       8b 8d 78 ff ff ff       mov    -0x88(%rbp),%ecx
    0.00 :	  5bb567:       48 8d 55 a0             lea    -0x60(%rbp),%rdx
    0.00 :	  5bb56b:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb572:       e8 e9 90 0d 00          callq  694660 <CheckForSerializableConflictOut>
    0.00 :	  5bb577:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb57e:       e9 35 ff ff ff          jmpq   5bb4b8 <BitmapHeapNext+0x538>
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb583:       48 63 85 54 ff ff ff    movslq -0xac(%rbp),%rax
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
    0.00 :	  5bb58a:       48 8d 75 a0             lea    -0x60(%rbp),%rsi
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb58e:       66 45 89 74 44 7c       mov    %r14w,0x7c(%r12,%rax,2)
    0.00 :	  5bb594:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
    0.00 :	  5bb59b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb59f:       48 8b 95 58 ff ff ff    mov    -0xa8(%rbp),%rdx
    0.00 :	  5bb5a6:       44 88 85 18 ff ff ff    mov    %r8b,-0xe8(%rbp)
    0.00 :	  5bb5ad:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb5b4:       e8 e7 95 0d 00          callq  694ba0 <PredicateLockTuple>
    0.00 :	  5bb5b9:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb5c0:       44 0f b6 85 18 ff ff    movzbl -0xe8(%rbp),%r8d
    0.00 :	  5bb5c7:       ff 
    0.00 :	  5bb5c8:       eb 88                   jmp    5bb552 <BitmapHeapNext+0x5d2>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb5ca:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb5d0:       48 8b 15 41 1b 5c 00    mov    0x5c1b41(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb5d7:       f7 d0                   not    %eax
    0.00 :	  5bb5d9:       48 98                   cltq   
    0.00 :	  5bb5db:       4c 8b 0c c2             mov    (%rdx,%rax,8),%r9
    0.00 :	  5bb5df:       e9 5f fe ff ff          jmpq   5bb443 <BitmapHeapNext+0x4c3>
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
         :	                                node->prefetch_target *= 2;
         :	                        else
         :	                                node->prefetch_target++;
    0.00 :	  5bb5e4:       8d 41 01                lea    0x1(%rcx),%eax
    0.00 :	  5bb5e7:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb5ed:       e9 31 fa ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5f2:       48 8b 7f 30             mov    0x30(%rdi),%rdi
    0.00 :	  5bb5f6:       e8 d5 0d ff ff          callq  5ac3d0 <MultiExecProcNode>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb5fb:       48 85 c0                test   %rax,%rax
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5fe:       49 89 c5                mov    %rax,%r13
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb601:       74 08                   je     5bb60b <BitmapHeapNext+0x68b>
    0.00 :	  5bb603:       81 38 ba 03 00 00       cmpl   $0x3ba,(%rax)
    0.00 :	  5bb609:       74 2a                   je     5bb635 <BitmapHeapNext+0x6b5>
         :	                        elog(ERROR, "unrecognized result from subplan");
    0.00 :	  5bb60b:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb610:       be 6b 00 00 00          mov    $0x6b,%esi
    0.00 :	  5bb615:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb61a:       e8 01 fe 1b 00          callq  77b420 <elog_start>
    0.00 :	  5bb61f:       be c0 b7 88 00          mov    $0x88b7c0,%esi
    0.00 :	  5bb624:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb629:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb62b:       e8 00 fc 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb630:       e8 9b de ea ff          callq  4694d0 <abort@plt>
         :
         :	                node->tbm = tbm;
    0.00 :	  5bb635:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb63c:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bb63f:       e8 dc 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                node->tbmres = tbmres = NULL;
    0.00 :	  5bb644:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb64b:       00 00 00 00 
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb64f:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb656:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb658:       8b 0d 06 1a 5c 00       mov    0x5c1a06(%rip),%ecx        # b7d064 <target_prefetch_pages>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb65e:       48 89 85 30 ff ff ff    mov    %rax,-0xd0(%rbp)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb665:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb667:       0f 8e 74 f9 ff ff       jle    5bafe1 <BitmapHeapNext+0x61>
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb66d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5bb670:       e8 ab 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                        node->prefetch_pages = 0;
    0.00 :	  5bb675:       c7 83 c8 00 00 00 00    movl   $0x0,0xc8(%rbx)
    0.00 :	  5bb67c:       00 00 00 
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb67f:       49 89 c7                mov    %rax,%r15
    0.00 :	  5bb682:       48 89 83 c0 00 00 00    mov    %rax,0xc0(%rbx)
         :	                        node->prefetch_pages = 0;
         :	                        node->prefetch_target = -1;
    0.00 :	  5bb689:       c7 83 cc 00 00 00 ff    movl   $0xffffffff,0xcc(%rbx)
    0.00 :	  5bb690:       ff ff ff 
    0.00 :	  5bb693:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb695:       e9 47 f9 ff ff          jmpq   5bafe1 <BitmapHeapNext+0x61>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:941
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbe90 <ExecHashGetHashValue>:
         :	                                         ExprContext *econtext,
         :	                                         List *hashkeys,
         :	                                         bool outer_tuple,
         :	                                         bool keep_nulls,
         :	                                         uint32 *hashvalue)
         :	{
    0.00 :	  5bbe90:       55                      push   %rbp
    0.00 :	  5bbe91:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bbe94:       41 57                   push   %r15
    0.00 :	  5bbe96:       49 89 ff                mov    %rdi,%r15
    0.00 :	  5bbe99:       41 56                   push   %r14
    0.00 :	  5bbe9b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5bbe9e:       41 55                   push   %r13
    0.00 :	  5bbea0:       41 54                   push   %r12
    0.00 :	  5bbea2:       49 89 d4                mov    %rdx,%r12
    0.00 :	  5bbea5:       53                      push   %rbx
    0.00 :	  5bbea6:       89 cb                   mov    %ecx,%ebx
    0.00 :	  5bbea8:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  5bbeac:       4c 89 4d a8             mov    %r9,-0x58(%rbp)
    0.00 :	  5bbeb0:       44 88 45 b7             mov    %r8b,-0x49(%rbp)
         :
         :	        /*
         :	         * We reset the eval context each time to reclaim any memory leaked in the
         :	         * hashkey expressions.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5bbeb4:       48 8b 7e 28             mov    0x28(%rsi),%rdi
    0.00 :	  5bbeb8:       e8 f3 ca 1d 00          callq  7989b0 <MemoryContextReset>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5bbebd:       48 8b 05 9c e9 5f 00    mov    0x5fe99c(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
    0.00 :	  5bbec4:       84 db                   test   %bl,%bl
    0.00 :	  5bbec6:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5bbeca:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5bbece:       48 89 05 8b e9 5f 00    mov    %rax,0x5fe98b(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5bbed5:       0f 84 d5 00 00 00       je     5bbfb0 <ExecHashGetHashValue+0x120>
         :	                hashfunctions = hashtable->outer_hashfunctions;
    0.00 :	  5bbedb:       49 8b 47 78             mov    0x78(%r15),%rax
    0.00 :	  5bbedf:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5bbee3:       4d 85 e4                test   %r12,%r12
    0.00 :	  5bbee6:       0f 84 94 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    0.00 :	  5bbeec:       49 8b 5c 24 08          mov    0x8(%r12),%rbx
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
    0.00 :	  5bbef1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbef4:       0f 84 86 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    0.00 :	  5bbefa:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbefd:       45 31 e4                xor    %r12d,%r12d
         :	        {
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
    0.00 :	  5bbf00:       48 8b 03                mov    (%rbx),%rax
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
    0.00 :	  5bbf03:       31 c9                   xor    %ecx,%ecx
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
         :	                Datum           keyval;
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
    0.00 :	  5bbf05:       41 d1 c5                rol    %r13d
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
    0.00 :	  5bbf08:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5bbf0c:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5bbf0f:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bbf12:       ff 50 10                callq  *0x10(%rax)
         :	                 *
         :	                 * Note: currently, all hashjoinable operators must be strict since
         :	                 * the hash index AM assumes that.  However, it takes so little extra
         :	                 * code here to allow non-strict that we may as well do it.
         :	                 */
         :	                if (isNull)
    0.00 :	  5bbf15:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5bbf19:       74 35                   je     5bbf50 <ExecHashGetHashValue+0xc0>
         :	                {
         :	                        if (hashtable->hashStrict[i] && !keep_nulls)
    0.00 :	  5bbf1b:       49 8b 87 88 00 00 00    mov    0x88(%r15),%rax
    0.00 :	  5bbf22:       49 63 d4                movslq %r12d,%rdx
    0.00 :	  5bbf25:       80 3c 10 00             cmpb   $0x0,(%rax,%rdx,1)
    0.00 :	  5bbf29:       74 41                   je     5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf2b:       80 7d b7 00             cmpb   $0x0,-0x49(%rbp)
    0.00 :	  5bbf2f:       75 3b                   jne    5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf31:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf35:       48 89 05 24 e9 5f 00    mov    %rax,0x5fe924(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
         :	        return true;
         :	}
    0.00 :	  5bbf3c:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5bbf40:       31 c0                   xor    %eax,%eax
    0.00 :	  5bbf42:       5b                      pop    %rbx
    0.00 :	  5bbf43:       41 5c                   pop    %r12
    0.00 :	  5bbf45:       41 5d                   pop    %r13
    0.00 :	  5bbf47:       41 5e                   pop    %r14
    0.00 :	  5bbf49:       41 5f                   pop    %r15
    0.00 :	  5bbf4b:       c9                      leaveq 
    0.00 :	  5bbf4c:       c3                      retq   
    0.00 :	  5bbf4d:       0f 1f 00                nopl   (%rax)
         :	                else
         :	                {
         :	                        /* Compute the hash function */
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
    0.00 :	  5bbf50:       49 63 fc                movslq %r12d,%rdi
    0.00 :	  5bbf53:       48 89 c2                mov    %rax,%rdx
    0.00 :	  5bbf56:       31 f6                   xor    %esi,%esi
    0.00 :	  5bbf58:       48 8d 3c 7f             lea    (%rdi,%rdi,2),%rdi
    0.00 :	  5bbf5c:       48 c1 e7 04             shl    $0x4,%rdi
    0.00 :	  5bbf60:       48 03 7d b8             add    -0x48(%rbp),%rdi
    0.00 :	  5bbf64:       e8 67 21 1c 00          callq  77e0d0 <FunctionCall1Coll>
         :	                        hashkey ^= hkey;
    0.00 :	  5bbf69:       41 31 c5                xor    %eax,%r13d
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
    0.00 :	  5bbf6c:       48 8b 5b 08             mov    0x8(%rbx),%rbx
    0.00 :	  5bbf70:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbf73:       74 13                   je     5bbf88 <ExecHashGetHashValue+0xf8>
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
         :	                        hashkey ^= hkey;
         :	                }
         :
         :	                i++;
    0.00 :	  5bbf75:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  5bbf79:       eb 85                   jmp    5bbf00 <ExecHashGetHashValue+0x70>
    0.00 :	  5bbf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbf80:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbf83:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbf88:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf8c:       48 89 05 cd e8 5f 00    mov    %rax,0x5fe8cd(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf93:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  5bbf97:       44 89 28                mov    %r13d,(%rax)
         :	        return true;
         :	}
    0.00 :	  5bbf9a:       48 83 c4 38             add    $0x38,%rsp
         :	                i++;
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf9e:       b8 01 00 00 00          mov    $0x1,%eax
         :	        return true;
         :	}
    0.00 :	  5bbfa3:       5b                      pop    %rbx
    0.00 :	  5bbfa4:       41 5c                   pop    %r12
    0.00 :	  5bbfa6:       41 5d                   pop    %r13
    0.00 :	  5bbfa8:       41 5e                   pop    %r14
    0.00 :	  5bbfaa:       41 5f                   pop    %r15
    0.00 :	  5bbfac:       c9                      leaveq 
    0.00 :	  5bbfad:       c3                      retq   
    0.00 :	  5bbfae:       66 90                   xchg   %ax,%ax
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
    0.00 :	  5bbfb0:       49 8b 87 80 00 00 00    mov    0x80(%r15),%rax
  100.00 :	  5bbfb7:       48 89 45 b8             mov    %rax,-0x48(%rbp)
    0.00 :	  5bbfbb:       e9 23 ff ff ff          jmpq   5bbee3 <ExecHashGetHashValue+0x53>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1669
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbfc0 <dense_alloc>:
         :	/*
         :	 * Allocate 'size' bytes from the currently active HashMemoryChunk
         :	 */
         :	static void *
         :	dense_alloc(HashJoinTable hashtable, Size size)
         :	{
    0.00 :	  5bbfc0:       55                      push   %rbp
    0.00 :	  5bbfc1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bbfc4:       41 54                   push   %r12
    0.00 :	  5bbfc6:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5bbfc9:       53                      push   %rbx
         :	        HashMemoryChunk newChunk;
         :	        char       *ptr;
         :
         :	        /* just in case the size is not already aligned properly */
         :	        size = MAXALIGN(size);
    0.00 :	  5bbfca:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  5bbfce:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :
         :	        /*
         :	         * If tuple size is larger than of 1/4 of chunk size, allocate a separate
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
    0.00 :	  5bbfd2:       48 81 fb 00 20 00 00    cmp    $0x2000,%rbx
    0.00 :	  5bbfd9:       0f 87 89 00 00 00       ja     5bc068 <dense_alloc+0xa8>
         :
         :	        /*
         :	         * See if we have enough space for it in the current chunk (if any).
         :	         * If not, allocate a fresh chunk.
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
    0.00 :	  5bbfdf:       48 8b 97 c8 00 00 00    mov    0xc8(%rdi),%rdx
    0.00 :	  5bbfe6:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bbfe9:       74 35                   je     5bc020 <dense_alloc+0x60>
    0.00 :	  5bbfeb:       48 8b 4a 10             mov    0x10(%rdx),%rcx
  100.00 :	  5bbfef:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5bbff3:       48 29 c8                sub    %rcx,%rax
    0.00 :	  5bbff6:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  5bbff9:       77 25                   ja     5bc020 <dense_alloc+0x60>
         :	                return newChunk->data;
         :	        }
         :
         :	        /* There is enough space in the current chunk, let's add the tuple */
         :	        ptr = hashtable->chunks->data + hashtable->chunks->used;
         :	        hashtable->chunks->used += size;
    0.00 :	  5bbffb:       48 8d 04 0b             lea    (%rbx,%rcx,1),%rax
    0.00 :	  5bbfff:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	        hashtable->chunks->ntuples += 1;
    0.00 :	  5bc003:       48 8b 87 c8 00 00 00    mov    0xc8(%rdi),%rax
    0.00 :	  5bc00a:       83 00 01                addl   $0x1,(%rax)
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
    0.00 :	  5bc00d:       48 8d 44 0a 20          lea    0x20(%rdx,%rcx,1),%rax
         :	}
    0.00 :	  5bc012:       5b                      pop    %rbx
    0.00 :	  5bc013:       41 5c                   pop    %r12
    0.00 :	  5bc015:       c9                      leaveq 
    0.00 :	  5bc016:       c3                      retq   
    0.00 :	  5bc017:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bc01e:       00 00 
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
         :	                (hashtable->chunks->maxlen - hashtable->chunks->used) < size)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc020:       49 8b bc 24 c0 00 00    mov    0xc0(%r12),%rdi
    0.00 :	  5bc027:       00 
    0.00 :	  5bc028:       be 20 80 00 00          mov    $0x8020,%esi
    0.00 :	  5bc02d:       e8 5e ce 1d 00          callq  798e90 <MemoryContextAlloc>
         :	                                           offsetof(HashMemoryChunkData, data) + HASH_CHUNK_SIZE);
         :
         :	                newChunk->maxlen = HASH_CHUNK_SIZE;
    0.00 :	  5bc032:       48 c7 40 08 00 80 00    movq   $0x8000,0x8(%rax)
    0.00 :	  5bc039:       00 
         :	                newChunk->used = size;
    0.00 :	  5bc03a:       48 89 58 10             mov    %rbx,0x10(%rax)
         :	                newChunk->ntuples = 1;
    0.00 :	  5bc03e:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :
         :	                newChunk->next = hashtable->chunks;
    0.00 :	  5bc044:       49 8b 94 24 c8 00 00    mov    0xc8(%r12),%rdx
    0.00 :	  5bc04b:       00 
    0.00 :	  5bc04c:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                hashtable->chunks = newChunk;
    0.00 :	  5bc050:       49 89 84 24 c8 00 00    mov    %rax,0xc8(%r12)
    0.00 :	  5bc057:       00 
         :
         :	                return newChunk->data;
    0.00 :	  5bc058:       48 83 c0 20             add    $0x20,%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc05c:       5b                      pop    %rbx
    0.00 :	  5bc05d:       41 5c                   pop    %r12
    0.00 :	  5bc05f:       c9                      leaveq 
    0.00 :	  5bc060:       c3                      retq   
    0.00 :	  5bc061:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc068:       48 8b bf c0 00 00 00    mov    0xc0(%rdi),%rdi
    0.00 :	  5bc06f:       48 8d 73 20             lea    0x20(%rbx),%rsi
    0.00 :	  5bc073:       e8 18 ce 1d 00          callq  798e90 <MemoryContextAlloc>
    0.00 :	  5bc078:       48 89 c2                mov    %rax,%rdx
         :	                                                                  offsetof(HashMemoryChunkData, data) + size);
         :	                newChunk->maxlen = size;
    0.00 :	  5bc07b:       48 89 58 08             mov    %rbx,0x8(%rax)
         :	                newChunk->used = 0;
    0.00 :	  5bc07f:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5bc086:       00 
         :	                newChunk->ntuples = 0;
    0.00 :	  5bc087:       c7 00 00 00 00 00       movl   $0x0,(%rax)
         :
         :	                /*
         :	                 * Add this chunk to the list after the first existing chunk, so that
         :	                 * we don't lose the remaining space in the "current" chunk.
         :	                 */
         :	                if (hashtable->chunks != NULL)
    0.00 :	  5bc08d:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc094:       00 
    0.00 :	  5bc095:       48 85 c0                test   %rax,%rax
    0.00 :	  5bc098:       74 26                   je     5bc0c0 <dense_alloc+0x100>
         :	                {
         :	                        newChunk->next = hashtable->chunks->next;
    0.00 :	  5bc09a:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	  5bc09e:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                        hashtable->chunks->next = newChunk;
    0.00 :	  5bc0a2:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc0a9:       00 
    0.00 :	  5bc0aa:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                {
         :	                        newChunk->next = hashtable->chunks;
         :	                        hashtable->chunks = newChunk;
         :	                }
         :
         :	                newChunk->used += size;
    0.00 :	  5bc0ae:       48 01 5a 10             add    %rbx,0x10(%rdx)
         :	                newChunk->ntuples += 1;
    0.00 :	  5bc0b2:       83 02 01                addl   $0x1,(%rdx)
         :
         :	                return newChunk->data;
    0.00 :	  5bc0b5:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc0b9:       5b                      pop    %rbx
    0.00 :	  5bc0ba:       41 5c                   pop    %r12
    0.00 :	  5bc0bc:       c9                      leaveq 
    0.00 :	  5bc0bd:       c3                      retq   
    0.00 :	  5bc0be:       66 90                   xchg   %ax,%ax
         :	                        newChunk->next = hashtable->chunks->next;
         :	                        hashtable->chunks->next = newChunk;
         :	                }
         :	                else
         :	                {
         :	                        newChunk->next = hashtable->chunks;
    0.00 :	  5bc0c0:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  5bc0c7:       00 
         :	                        hashtable->chunks = newChunk;
    0.00 :	  5bc0c8:       49 89 94 24 c8 00 00    mov    %rdx,0xc8(%r12)
    0.00 :	  5bc0cf:       00 
    0.00 :	  5bc0d0:       eb dc                   jmp    5bc0ae <dense_alloc+0xee>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSubplan.c:318
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005c7470 <ExecSubPlan>:
         :	static Datum
         :	ExecSubPlan(SubPlanState *node,
         :	                        ExprContext *econtext,
         :	                        bool *isNull,
         :	                        ExprDoneCond *isDone)
         :	{
    0.00 :	  5c7470:       55                      push   %rbp
    0.00 :	  5c7471:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5c7474:       41 57                   push   %r15
    0.00 :	  5c7476:       49 89 f7                mov    %rsi,%r15
    0.00 :	  5c7479:       41 56                   push   %r14
    0.00 :	  5c747b:       41 55                   push   %r13
    0.00 :	  5c747d:       41 54                   push   %r12
    0.00 :	  5c747f:       53                      push   %rbx
    0.00 :	  5c7480:       48 81 ec 88 00 00 00    sub    $0x88,%rsp
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
         :
         :	        /* Set default values for result flags: non-null, not a set result */
         :	        *isNull = false;
         :	        if (isDone)
    0.00 :	  5c7487:       48 85 c9                test   %rcx,%rcx
         :	static Datum
         :	ExecSubPlan(SubPlanState *node,
         :	                        ExprContext *econtext,
         :	                        bool *isNull,
         :	                        ExprDoneCond *isDone)
         :	{
    0.00 :	  5c748a:       48 89 bd 70 ff ff ff    mov    %rdi,-0x90(%rbp)
    0.00 :	  5c7491:       48 89 95 68 ff ff ff    mov    %rdx,-0x98(%rbp)
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
    0.00 :	  5c7498:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	        /* Set default values for result flags: non-null, not a set result */
         :	        *isNull = false;
    0.00 :	  5c749c:       c6 02 00                movb   $0x0,(%rdx)
         :	        if (isDone)
    0.00 :	  5c749f:       74 06                   je     5c74a7 <ExecSubPlan+0x37>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5c74a1:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /* Sanity checks */
         :	        if (subplan->subLinkType == CTE_SUBLINK)
    0.00 :	  5c74a7:       8b 50 04                mov    0x4(%rax),%edx
    0.00 :	  5c74aa:       83 fa 07                cmp    $0x7,%edx
    0.00 :	  5c74ad:       0f 84 3c 0a 00 00       je     5c7eef <ExecSubPlan+0xa7f>
         :	                elog(ERROR, "CTE subplans should not be executed via ExecSubPlan");
         :	        if (subplan->setParam != NIL && subplan->subLinkType != MULTIEXPR_SUBLINK)
    0.00 :	  5c74b3:       48 83 78 38 00          cmpq   $0x0,0x38(%rax)
    0.00 :	  5c74b8:       74 09                   je     5c74c3 <ExecSubPlan+0x53>
    0.00 :	  5c74ba:       83 fa 05                cmp    $0x5,%edx
    0.00 :	  5c74bd:       0f 85 56 0a 00 00       jne    5c7f19 <ExecSubPlan+0xaa9>
         :	                elog(ERROR, "cannot set parent params from subquery");
         :
         :	        /* Select appropriate evaluation strategy */
         :	        if (subplan->useHashTable)
    0.00 :	  5c74c3:       80 78 34 00             cmpb   $0x0,0x34(%rax)
    0.00 :	  5c74c7:       0f 85 c3 03 00 00       jne    5c7890 <ExecSubPlan+0x420>
         :	static Datum
         :	ExecScanSubPlan(SubPlanState *node,
         :	                                ExprContext *econtext,
         :	                                bool *isNull)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
    0.00 :	  5c74cd:       48 8b bd 70 ff ff ff    mov    -0x90(%rbp),%rdi
         :	        PlanState  *planstate = node->planstate;
    0.00 :	  5c74d4:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
         :	static Datum
         :	ExecScanSubPlan(SubPlanState *node,
         :	                                ExprContext *econtext,
         :	                                bool *isNull)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
    0.00 :	  5c74db:       48 8b 7f 08             mov    0x8(%rdi),%rdi
    0.00 :	  5c74df:       48 89 7d c0             mov    %rdi,-0x40(%rbp)
         :	        PlanState  *planstate = node->planstate;
    0.00 :	  5c74e3:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	  5c74e7:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	        SubLinkType subLinkType = subplan->subLinkType;
    0.00 :	  5c74eb:       8b 57 04                mov    0x4(%rdi),%edx
         :	         * cycle.  But in general resjunk tlist items appear after non-resjunk
         :	         * ones, so this should be safe.)  Unlike ExecReScanSetParamPlan, we do
         :	         * *not* set bits in the parent plan node's chgParam, because we don't
         :	         * want to cause a rescan of the parent.
         :	         */
         :	        if (subLinkType == MULTIEXPR_SUBLINK)
    0.00 :	  5c74ee:       83 fa 05                cmp    $0x5,%edx
         :	                                ExprContext *econtext,
         :	                                bool *isNull)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
         :	        PlanState  *planstate = node->planstate;
         :	        SubLinkType subLinkType = subplan->subLinkType;
    0.00 :	  5c74f1:       89 55 b4                mov    %edx,-0x4c(%rbp)
         :	         * cycle.  But in general resjunk tlist items appear after non-resjunk
         :	         * ones, so this should be safe.)  Unlike ExecReScanSetParamPlan, we do
         :	         * *not* set bits in the parent plan node's chgParam, because we don't
         :	         * want to cause a rescan of the parent.
         :	         */
         :	        if (subLinkType == MULTIEXPR_SUBLINK)
    0.00 :	  5c74f4:       0f 84 7b 04 00 00       je     5c7975 <ExecSubPlan+0x505>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5c74fa:       48 8b 05 5f 33 5f 00    mov    0x5f335f(%rip),%rax        # bba860 <CurrentMemoryContext>
         :	         * calculation we have to do is done in the parent econtext, since the
         :	         * Param values don't need to have per-query lifetime.)
         :	         */
         :	        Assert(list_length(subplan->parParam) == list_length(node->args));
         :
         :	        forboth(l, subplan->parParam, pvar, node->args)
    0.00 :	  5c7501:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5c7505:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5c7508:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5c750c:       49 8b 47 20             mov    0x20(%r15),%rax
    0.00 :	  5c7510:       48 89 05 49 33 5f 00    mov    %rax,0x5f3349(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5c7517:       48 8b 42 40             mov    0x40(%rdx),%rax
    0.00 :	  5c751b:       48 85 c0                test   %rax,%rax
    0.00 :	  5c751e:       74 04                   je     5c7524 <ExecSubPlan+0xb4>
    0.00 :	  5c7520:       4c 8b 70 08             mov    0x8(%rax),%r14
    0.00 :	  5c7524:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
    0.00 :	  5c752b:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  5c752f:       48 85 c0                test   %rax,%rax
    0.00 :	  5c7532:       74 5a                   je     5c758e <ExecSubPlan+0x11e>
    0.00 :	  5c7534:       4d 85 f6                test   %r14,%r14
    0.00 :	  5c7537:       4c 8b 68 08             mov    0x8(%rax),%r13
    0.00 :	  5c753b:       74 51                   je     5c758e <ExecSubPlan+0x11e>
    0.00 :	  5c753d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5c7540:       4d 85 ed                test   %r13,%r13
    0.00 :	  5c7543:       74 49                   je     5c758e <ExecSubPlan+0x11e>
         :	        {
         :	                int                     paramid = lfirst_int(l);
    0.00 :	  5c7545:       45 8b 26                mov    (%r14),%r12d
         :	                ParamExecData *prm = &(econtext->ecxt_param_exec_vals[paramid]);
         :
         :	                prm->value = ExecEvalExprSwitchContext((ExprState *) lfirst(pvar),
    0.00 :	  5c7548:       49 8b 7d 00             mov    0x0(%r13),%rdi
    0.00 :	  5c754c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5c754e:       4c 89 fe                mov    %r15,%rsi
         :	        Assert(list_length(subplan->parParam) == list_length(node->args));
         :
         :	        forboth(l, subplan->parParam, pvar, node->args)
         :	        {
         :	                int                     paramid = lfirst_int(l);
         :	                ParamExecData *prm = &(econtext->ecxt_param_exec_vals[paramid]);
    0.00 :	  5c7551:       49 63 dc                movslq %r12d,%rbx
    0.00 :	  5c7554:       48 8d 1c 5b             lea    (%rbx,%rbx,2),%rbx
    0.00 :	  5c7558:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  5c755c:       49 03 5f 30             add    0x30(%r15),%rbx
         :
         :	                prm->value = ExecEvalExprSwitchContext((ExprState *) lfirst(pvar),
    0.00 :	  5c7560:       48 8d 53 10             lea    0x10(%rbx),%rdx
    0.00 :	  5c7564:       e8 77 59 fe ff          callq  5acee0 <ExecEvalExprSwitchContext>
    0.00 :	  5c7569:       48 89 43 08             mov    %rax,0x8(%rbx)
         :	                                                                                           econtext,
         :	                                                                                           &(prm->isnull),
         :	                                                                                           NULL);
         :	                planstate->chgParam = bms_add_member(planstate->chgParam, paramid);
    0.00 :	  5c756d:       48 8b 5d b8             mov    -0x48(%rbp),%rbx
    0.00 :	  5c7571:       44 89 e6                mov    %r12d,%esi
    0.00 :	  5c7574:       48 8b 7b 50             mov    0x50(%rbx),%rdi
    0.00 :	  5c7578:       e8 83 ba 01 00          callq  5e3000 <bms_add_member>
    0.00 :	  5c757d:       48 89 43 50             mov    %rax,0x50(%rbx)
         :	         * calculation we have to do is done in the parent econtext, since the
         :	         * Param values don't need to have per-query lifetime.)
         :	         */
         :	        Assert(list_length(subplan->parParam) == list_length(node->args));
         :
         :	        forboth(l, subplan->parParam, pvar, node->args)
    0.00 :	  5c7581:       4d 8b 76 08             mov    0x8(%r14),%r14
    0.00 :	  5c7585:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5c7589:       4d 85 f6                test   %r14,%r14
    0.00 :	  5c758c:       75 b2                   jne    5c7540 <ExecSubPlan+0xd0>
         :	        }
         :
         :	        /*
         :	         * Now that we've set up its parameters, we can reset the subplan.
         :	         */
         :	        ExecReScan(planstate);
    0.00 :	  5c758e:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5c7592:       e8 09 0f fe ff          callq  5a84a0 <ExecReScan>
         :	         * For ARRAY_SUBLINK we allow the subplan to produce any number of tuples,
         :	         * and form an array of the first column's values.  Note in particular
         :	         * that we produce a zero-element array if no tuples are produced (this is
         :	         * a change from pre-8.3 behavior of returning NULL).
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
    0.00 :	  5c7597:       31 c0                   xor    %eax,%eax
    0.00 :	  5c7599:       83 7d b4 01             cmpl   $0x1,-0x4c(%rbp)
         :	        *isNull = false;
    0.00 :	  5c759d:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
         :	         * For ARRAY_SUBLINK we allow the subplan to produce any number of tuples,
         :	         * and form an array of the first column's values.  Note in particular
         :	         * that we produce a zero-element array if no tuples are produced (this is
         :	         * a change from pre-8.3 behavior of returning NULL).
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
    0.00 :	  5c75a4:       0f 94 c0                sete   %al
    0.00 :	  5c75a7:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :	        *isNull = false;
    0.00 :	  5c75ab:       c6 07 00                movb   $0x0,(%rdi)
         :
         :	        for (slot = ExecProcNode(planstate);
    0.00 :	  5c75ae:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5c75b2:       e8 e9 4e fe ff          callq  5ac4a0 <ExecProcNode>
         :	                 !TupIsNull(slot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSubplan.c:318
  100.00 :	  5c75b7:       48 85 c0                test   %rax,%rax
         :	         * a change from pre-8.3 behavior of returning NULL).
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
    0.00 :	  5c75ba:       49 89 c6                mov    %rax,%r14
         :	                 !TupIsNull(slot);
    0.00 :	  5c75bd:       0f 84 1d 09 00 00       je     5c7ee0 <ExecSubPlan+0xa70>
    0.00 :	  5c75c3:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5c75c7:       0f 85 13 09 00 00       jne    5c7ee0 <ExecSubPlan+0xa70>
         :	                 slot = ExecProcNode(planstate))
         :	        {
         :	                TupleDesc       tdesc = slot->tts_tupleDescriptor;
    0.00 :	  5c75cd:       48 8b 58 10             mov    0x10(%rax),%rbx
         :	                Datum           rowresult;
         :	                bool            rownull;
         :	                int                     col;
         :	                ListCell   *plst;
         :
         :	                if (subLinkType == EXISTS_SUBLINK)
    0.00 :	  5c75d1:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  5c75d4:       85 c0                   test   %eax,%eax
    0.00 :	  5c75d6:       0f 84 67 09 00 00       je     5c7f43 <ExecSubPlan+0xad3>
    0.00 :	  5c75dc:       31 c0                   xor    %eax,%eax
         :	                        found = true;
         :	                        result = BoolGetDatum(true);
         :	                        break;
         :	                }
         :
         :	                if (subLinkType == EXPR_SUBLINK)
    0.00 :	  5c75de:       83 7d b4 04             cmpl   $0x4,-0x4c(%rbp)
         :	                Datum           rowresult;
         :	                bool            rownull;
         :	                int                     col;
         :	                ListCell   *plst;
         :
         :	                if (subLinkType == EXISTS_SUBLINK)
    0.00 :	  5c75e2:       48 c7 45 98 00 00 00    movq   $0x0,-0x68(%rbp)
    0.00 :	  5c75e9:       00 
         :	                        found = true;
         :	                        result = BoolGetDatum(true);
         :	                        break;
         :	                }
         :
         :	                if (subLinkType == EXPR_SUBLINK)
    0.00 :	  5c75ea:       0f 84 d4 00 00 00       je     5c76c4 <ExecSubPlan+0x254>
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
         :	                        /* keep scanning subplan to make sure there's only one tuple */
         :	                        continue;
         :	                }
         :
         :	                if (subLinkType == ARRAY_SUBLINK)
    0.00 :	  5c75f0:       83 7d b4 06             cmpl   $0x6,-0x4c(%rbp)
    0.00 :	  5c75f4:       0f 84 16 02 00 00       je     5c7810 <ExecSubPlan+0x3a0>
         :	                        /* keep scanning subplan to collect all values */
         :	                        continue;
         :	                }
         :
         :	                /* cannot allow multiple input tuples for ROWCOMPARE sublink either */
         :	                if (subLinkType == ROWCOMPARE_SUBLINK && found)
    0.00 :	  5c75fa:       83 7d b4 03             cmpl   $0x3,-0x4c(%rbp)
    0.00 :	  5c75fe:       0f 84 9c 01 00 00       je     5c77a0 <ExecSubPlan+0x330>
         :	                 * For ALL, ANY, and ROWCOMPARE sublinks, load up the Params
         :	                 * representing the columns of the sub-select, and then evaluate the
         :	                 * combining expression.
         :	                 */
         :	                col = 1;
         :	                foreach(plst, subplan->paramIds)
    0.00 :	  5c7604:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5c7608:       48 8b 47 10             mov    0x10(%rdi),%rax
    0.00 :	  5c760c:       48 85 c0                test   %rax,%rax
    0.00 :	  5c760f:       74 40                   je     5c7651 <ExecSubPlan+0x1e1>
    0.00 :	  5c7611:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  5c7615:       4d 85 e4                test   %r12,%r12
    0.00 :	  5c7618:       74 37                   je     5c7651 <ExecSubPlan+0x1e1>
    0.00 :	  5c761a:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	                {
         :	                        int                     paramid = lfirst_int(plst);
         :	                        ParamExecData *prmdata;
         :
         :	                        prmdata = &(econtext->ecxt_param_exec_vals[paramid]);
    0.00 :	  5c7620:       49 63 1c 24             movslq (%r12),%rbx
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col, &(prmdata->isnull));
    0.00 :	  5c7624:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5c7627:       4c 89 f7                mov    %r14,%rdi
         :	                        col++;
    0.00 :	  5c762a:       41 83 c5 01             add    $0x1,%r13d
         :	                foreach(plst, subplan->paramIds)
         :	                {
         :	                        int                     paramid = lfirst_int(plst);
         :	                        ParamExecData *prmdata;
         :
         :	                        prmdata = &(econtext->ecxt_param_exec_vals[paramid]);
    0.00 :	  5c762e:       48 8d 1c 5b             lea    (%rbx,%rbx,2),%rbx
    0.00 :	  5c7632:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  5c7636:       49 03 5f 30             add    0x30(%r15),%rbx
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col, &(prmdata->isnull));
    0.00 :	  5c763a:       48 8d 53 10             lea    0x10(%rbx),%rdx
    0.00 :	  5c763e:       e8 bd 7d ea ff          callq  46f400 <slot_getattr>
    0.00 :	  5c7643:       48 89 43 08             mov    %rax,0x8(%rbx)
         :	                 * For ALL, ANY, and ROWCOMPARE sublinks, load up the Params
         :	                 * representing the columns of the sub-select, and then evaluate the
         :	                 * combining expression.
         :	                 */
         :	                col = 1;
         :	                foreach(plst, subplan->paramIds)
    0.00 :	  5c7647:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  5c764c:       4d 85 e4                test   %r12,%r12
    0.00 :	  5c764f:       75 cf                   jne    5c7620 <ExecSubPlan+0x1b0>
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col, &(prmdata->isnull));
         :	                        col++;
         :	                }
         :
         :	                rowresult = ExecEvalExprSwitchContext(node->testexpr, econtext,
    0.00 :	  5c7651:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5c7658:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5c765c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5c765e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5c7661:       48 8b 78 28             mov    0x28(%rax),%rdi
    0.00 :	  5c7665:       e8 76 58 fe ff          callq  5acee0 <ExecEvalExprSwitchContext>
         :	                                                                                          &rownull, NULL);
         :
         :	                if (subLinkType == ANY_SUBLINK)
    0.00 :	  5c766a:       83 7d b4 02             cmpl   $0x2,-0x4c(%rbp)
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col, &(prmdata->isnull));
         :	                        col++;
         :	                }
         :
         :	                rowresult = ExecEvalExprSwitchContext(node->testexpr, econtext,
    0.00 :	  5c766e:       48 89 c2                mov    %rax,%rdx
         :	                                                                                          &rownull, NULL);
         :
         :	                if (subLinkType == ANY_SUBLINK)
    0.00 :	  5c7671:       0f 84 09 01 00 00       je     5c7780 <ExecSubPlan+0x310>
         :	                                result = BoolGetDatum(true);
         :	                                *isNull = false;
         :	                                break;                  /* needn't look at any more rows */
         :	                        }
         :	                }
         :	                else if (subLinkType == ALL_SUBLINK)
    0.00 :	  5c7677:       83 7d b4 01             cmpl   $0x1,-0x4c(%rbp)
    0.00 :	  5c767b:       0f 84 6f 01 00 00       je     5c77f0 <ExecSubPlan+0x380>
         :	                }
         :	                else
         :	                {
         :	                        /* must be ROWCOMPARE_SUBLINK */
         :	                        result = rowresult;
         :	                        *isNull = rownull;
    0.00 :	  5c7681:       0f b6 45 d7             movzbl -0x29(%rbp),%eax
    0.00 :	  5c7685:       48 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%rcx
    0.00 :	  5c768c:       88 01                   mov    %al,(%rcx)
    0.00 :	  5c768e:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
         :	                 slot = ExecProcNode(planstate))
    0.00 :	  5c7692:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5c7696:       e8 05 4e fe ff          callq  5ac4a0 <ExecProcNode>
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c769b:       48 85 c0                test   %rax,%rax
         :	                 slot = ExecProcNode(planstate))
    0.00 :	  5c769e:       49 89 c6                mov    %rax,%r14
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c76a1:       0f 84 58 03 00 00       je     5c79ff <ExecSubPlan+0x58f>
    0.00 :	  5c76a7:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5c76ab:       0f 85 4e 03 00 00       jne    5c79ff <ExecSubPlan+0x58f>
         :	                        found = true;
         :	                        result = BoolGetDatum(true);
         :	                        break;
         :	                }
         :
         :	                if (subLinkType == EXPR_SUBLINK)
    0.00 :	  5c76b1:       83 7d b4 04             cmpl   $0x4,-0x4c(%rbp)
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
         :	                 slot = ExecProcNode(planstate))
         :	        {
         :	                TupleDesc       tdesc = slot->tts_tupleDescriptor;
    0.00 :	  5c76b5:       49 8b 5e 10             mov    0x10(%r14),%rbx
    0.00 :	  5c76b9:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        found = true;
         :	                        result = BoolGetDatum(true);
         :	                        break;
         :	                }
         :
         :	                if (subLinkType == EXPR_SUBLINK)
    0.00 :	  5c76be:       0f 85 2c ff ff ff       jne    5c75f0 <ExecSubPlan+0x180>
         :	                {
         :	                        /* cannot allow multiple input tuples for EXPR sublink */
         :	                        if (found)
    0.00 :	  5c76c4:       84 c0                   test   %al,%al
    0.00 :	  5c76c6:       0f 85 79 07 00 00       jne    5c7e45 <ExecSubPlan+0x9d5>
         :	                         * copied tuple!  Can't use the subplan's instance of the tuple
         :	                         * since it won't still be valid after next ExecProcNode() call.
         :	                         * node->curTuple keeps track of the copied tuple for eventual
         :	                         * freeing.
         :	                         */
         :	                        if (node->curTuple)
    0.00 :	  5c76cc:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5c76d3:       48 8b 78 38             mov    0x38(%rax),%rdi
    0.00 :	  5c76d7:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5c76da:       74 05                   je     5c76e1 <ExecSubPlan+0x271>
         :	                                heap_freetuple(node->curTuple);
    0.00 :	  5c76dc:       e8 df 75 ea ff          callq  46ecc0 <heap_freetuple>
         :	                        node->curTuple = ExecCopySlotTuple(slot);
    0.00 :	  5c76e1:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5c76e4:       e8 c7 c8 fe ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5c76e9:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5c76f0:       48 89 42 38             mov    %rax,0x38(%rdx)
         :
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
    0.00 :	  5c76f4:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  5c76f8:       66 f7 40 12 ff 07       testw  $0x7ff,0x12(%rax)
    0.00 :	  5c76fe:       0f 84 6c 01 00 00       je     5c7870 <ExecSubPlan+0x400>
    0.00 :	  5c7704:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
    0.00 :	  5c770b:       c6 07 00                movb   $0x0,(%rdi)
    0.00 :	  5c770e:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5c7715:       48 8b 78 38             mov    0x38(%rax),%rdi
    0.00 :	  5c7719:       48 8b 4f 10             mov    0x10(%rdi),%rcx
    0.00 :	  5c771d:       f6 41 14 01             testb  $0x1,0x14(%rcx)
    0.00 :	  5c7721:       0f 85 21 01 00 00       jne    5c7848 <ExecSubPlan+0x3d8>
    0.00 :	  5c7727:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  5c772b:       48 8b 00                mov    (%rax),%rax
    0.00 :	  5c772e:       8b 50 54                mov    0x54(%rax),%edx
    0.00 :	  5c7731:       85 d2                   test   %edx,%edx
    0.00 :	  5c7733:       0f 88 0f 02 00 00       js     5c7948 <ExecSubPlan+0x4d8>
    0.00 :	  5c7739:       80 78 5c 00             cmpb   $0x0,0x5c(%rax)
    0.00 :	  5c773d:       0f 84 1b 02 00 00       je     5c795e <ExecSubPlan+0x4ee>
    0.00 :	  5c7743:       0f b7 40 4c             movzwl 0x4c(%rax),%eax
    0.00 :	  5c7747:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  5c774b:       0f 84 96 02 00 00       je     5c79e7 <ExecSubPlan+0x577>
    0.00 :	  5c7751:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  5c7755:       0f 84 bb 06 00 00       je     5c7e16 <ExecSubPlan+0x9a6>
    0.00 :	  5c775b:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  5c775f:       90                      nop
    0.00 :	  5c7760:       0f 84 c7 06 00 00       je     5c7e2d <ExecSubPlan+0x9bd>
    0.00 :	  5c7766:       48 63 c2                movslq %edx,%rax
    0.00 :	  5c7769:       0f b6 51 16             movzbl 0x16(%rcx),%edx
    0.00 :	  5c776d:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5c7771:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5c7775:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7779:       e9 14 ff ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c777e:       66 90                   xchg   %ax,%ax
         :	                                                                                          &rownull, NULL);
         :
         :	                if (subLinkType == ANY_SUBLINK)
         :	                {
         :	                        /* combine across rows per OR semantics */
         :	                        if (rownull)
    0.00 :	  5c7780:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5c7784:       0f 84 6e 01 00 00       je     5c78f8 <ExecSubPlan+0x488>
         :	                                *isNull = true;
    0.00 :	  5c778a:       48 8b 95 68 ff ff ff    mov    -0x98(%rbp),%rdx
    0.00 :	  5c7791:       c6 02 01                movb   $0x1,(%rdx)
    0.00 :	  5c7794:       e9 f9 fe ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7799:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        /* keep scanning subplan to collect all values */
         :	                        continue;
         :	                }
         :
         :	                /* cannot allow multiple input tuples for ROWCOMPARE sublink either */
         :	                if (subLinkType == ROWCOMPARE_SUBLINK && found)
    0.00 :	  5c77a0:       84 c0                   test   %al,%al
    0.00 :	  5c77a2:       0f 84 5c fe ff ff       je     5c7604 <ExecSubPlan+0x194>
         :	                        ereport(ERROR,
    0.00 :	  5c77a8:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5c77ab:       b9 a0 c6 88 00          mov    $0x88c6a0,%ecx
    0.00 :	  5c77b0:       ba 7b 01 00 00          mov    $0x17b,%edx
    0.00 :	  5c77b5:       be 01 c4 88 00          mov    $0x88c401,%esi
    0.00 :	  5c77ba:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5c77bf:       e8 fc 32 1b 00          callq  77aac0 <errstart>
    0.00 :	  5c77c4:       84 c0                   test   %al,%al
    0.00 :	  5c77c6:       74 23                   je     5c77eb <ExecSubPlan+0x37b>
    0.00 :	  5c77c8:       bf c8 c4 88 00          mov    $0x88c4c8,%edi
    0.00 :	  5c77cd:       31 c0                   xor    %eax,%eax
    0.00 :	  5c77cf:       e8 cc 50 1b 00          callq  77c8a0 <errmsg>
    0.00 :	  5c77d4:       bf 42 00 00 00          mov    $0x42,%edi
    0.00 :	  5c77d9:       89 c3                   mov    %eax,%ebx
    0.00 :	  5c77db:       e8 70 55 1b 00          callq  77cd50 <errcode>
    0.00 :	  5c77e0:       89 de                   mov    %ebx,%esi
    0.00 :	  5c77e2:       89 c7                   mov    %eax,%edi
    0.00 :	  5c77e4:       31 c0                   xor    %eax,%eax
    0.00 :	  5c77e6:       e8 f5 2d 1b 00          callq  77a5e0 <errfinish>
    0.00 :	  5c77eb:       e8 e0 1c ea ff          callq  4694d0 <abort@plt>
         :	                        }
         :	                }
         :	                else if (subLinkType == ALL_SUBLINK)
         :	                {
         :	                        /* combine across rows per AND semantics */
         :	                        if (rownull)
    0.00 :	  5c77f0:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5c77f4:       0f 84 2e 01 00 00       je     5c7928 <ExecSubPlan+0x4b8>
         :	                                *isNull = true;
    0.00 :	  5c77fa:       48 8b 9d 68 ff ff ff    mov    -0x98(%rbp),%rbx
    0.00 :	  5c7801:       c6 03 01                movb   $0x1,(%rbx)
    0.00 :	  5c7804:       e9 89 fe ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7809:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        bool            disnull;
         :
         :	                        found = true;
         :	                        /* stash away current value */
         :	                        Assert(subplan->firstColType == tdesc->attrs[0]->atttypid);
         :	                        dvalue = slot_getattr(slot, 1, &disnull);
    0.00 :	  5c7810:       48 8d 55 d6             lea    -0x2a(%rbp),%rdx
    0.00 :	  5c7814:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5c7819:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5c781c:       e8 df 7b ea ff          callq  46f400 <slot_getattr>
         :	                        astate = accumArrayResult(astate, dvalue, disnull,
    0.00 :	  5c7821:       48 8b 5d c0             mov    -0x40(%rbp),%rbx
    0.00 :	  5c7825:       0f be 55 d6             movsbl -0x2a(%rbp),%edx
         :	                        bool            disnull;
         :
         :	                        found = true;
         :	                        /* stash away current value */
         :	                        Assert(subplan->firstColType == tdesc->attrs[0]->atttypid);
         :	                        dvalue = slot_getattr(slot, 1, &disnull);
    0.00 :	  5c7829:       48 89 c6                mov    %rax,%rsi
         :	                        astate = accumArrayResult(astate, dvalue, disnull,
    0.00 :	  5c782c:       4c 8b 45 a8             mov    -0x58(%rbp),%r8
    0.00 :	  5c7830:       48 8b 7d 98             mov    -0x68(%rbp),%rdi
    0.00 :	  5c7834:       8b 4b 28                mov    0x28(%rbx),%ecx
    0.00 :	  5c7837:       e8 54 48 0f 00          callq  6bc090 <accumArrayResult>
    0.00 :	  5c783c:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5c7840:       e9 4d fe ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7845:       0f 1f 00                nopl   (%rax)
         :	                         */
         :	                        if (node->curTuple)
         :	                                heap_freetuple(node->curTuple);
         :	                        node->curTuple = ExecCopySlotTuple(slot);
         :
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
    0.00 :	  5c7848:       f6 41 17 01             testb  $0x1,0x17(%rcx)
    0.00 :	  5c784c:       0f 85 f6 00 00 00       jne    5c7948 <ExecSubPlan+0x4d8>
    0.00 :	  5c7852:       48 8b 95 68 ff ff ff    mov    -0x98(%rbp),%rdx
    0.00 :	  5c7859:       c6 02 01                movb   $0x1,(%rdx)
    0.00 :	  5c785c:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7863:       00 
    0.00 :	  5c7864:       e9 29 fe ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7869:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5c7870:       48 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%rcx
    0.00 :	  5c7877:       c6 01 01                movb   $0x1,(%rcx)
    0.00 :	  5c787a:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7881:       00 
    0.00 :	  5c7882:       e9 0b fe ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7887:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5c788e:       00 00 
         :	static Datum
         :	ExecHashSubPlan(SubPlanState *node,
         :	                                ExprContext *econtext,
         :	                                bool *isNull)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
    0.00 :	  5c7890:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
         :	        PlanState  *planstate = node->planstate;
    0.00 :	  5c7897:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
         :	static Datum
         :	ExecHashSubPlan(SubPlanState *node,
         :	                                ExprContext *econtext,
         :	                                bool *isNull)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
    0.00 :	  5c789e:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5c78a2:       48 89 45 80             mov    %rax,-0x80(%rbp)
         :	        PlanState  *planstate = node->planstate;
    0.00 :	  5c78a6:       48 8b 52 18             mov    0x18(%rdx),%rdx
    0.00 :	  5c78aa:       48 89 95 78 ff ff ff    mov    %rdx,-0x88(%rbp)
         :	        TupleTableSlot *slot;
         :
         :	        /* Shouldn't have any direct correlation Vars */
         :	        if (subplan->parParam != NIL || node->args != NIL)
    0.00 :	  5c78b1:       48 83 78 40 00          cmpq   $0x0,0x40(%rax)
    0.00 :	  5c78b6:       75 12                   jne    5c78ca <ExecSubPlan+0x45a>
    0.00 :	  5c78b8:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
    0.00 :	  5c78bf:       48 83 79 30 00          cmpq   $0x0,0x30(%rcx)
    0.00 :	  5c78c4:       0f 84 8e 01 00 00       je     5c7a58 <ExecSubPlan+0x5e8>
         :	                elog(ERROR, "hashed subplan with direct correlation not supported");
    0.00 :	  5c78ca:       ba 90 c6 88 00          mov    $0x88c690,%edx
    0.00 :	  5c78cf:       be 6d 00 00 00          mov    $0x6d,%esi
    0.00 :	  5c78d4:       bf 01 c4 88 00          mov    $0x88c401,%edi
    0.00 :	  5c78d9:       e8 42 3b 1b 00          callq  77b420 <elog_start>
    0.00 :	  5c78de:       be 90 c4 88 00          mov    $0x88c490,%esi
    0.00 :	  5c78e3:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5c78e8:       31 c0                   xor    %eax,%eax
    0.00 :	  5c78ea:       e8 41 39 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5c78ef:       e8 dc 1b ea ff          callq  4694d0 <abort@plt>
    0.00 :	  5c78f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                if (subLinkType == ANY_SUBLINK)
         :	                {
         :	                        /* combine across rows per OR semantics */
         :	                        if (rownull)
         :	                                *isNull = true;
         :	                        else if (DatumGetBool(rowresult))
    0.00 :	  5c78f8:       84 c0                   test   %al,%al
    0.00 :	  5c78fa:       0f 84 92 fd ff ff       je     5c7692 <ExecSubPlan+0x222>
         :	                        {
         :	                                result = BoolGetDatum(true);
         :	                                *isNull = false;
    0.00 :	  5c7900:       48 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%rcx
    0.00 :	  5c7907:       c6 01 00                movb   $0x0,(%rcx)
    0.00 :	  5c790a:       48 c7 45 a0 01 00 00    movq   $0x1,-0x60(%rbp)
    0.00 :	  5c7911:       00 
    0.00 :	  5c7912:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5c7916:       48 89 15 43 2f 5f 00    mov    %rdx,0x5f2f43(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5c791d:       e9 af 00 00 00          jmpq   5c79d1 <ExecSubPlan+0x561>
    0.00 :	  5c7922:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                else if (subLinkType == ALL_SUBLINK)
         :	                {
         :	                        /* combine across rows per AND semantics */
         :	                        if (rownull)
         :	                                *isNull = true;
         :	                        else if (!DatumGetBool(rowresult))
    0.00 :	  5c7928:       84 c0                   test   %al,%al
    0.00 :	  5c792a:       0f 85 62 fd ff ff       jne    5c7692 <ExecSubPlan+0x222>
         :	                        {
         :	                                result = BoolGetDatum(false);
         :	                                *isNull = false;
    0.00 :	  5c7930:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
    0.00 :	  5c7937:       c6 07 00                movb   $0x0,(%rdi)
    0.00 :	  5c793a:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7941:       00 
    0.00 :	  5c7942:       eb ce                   jmp    5c7912 <ExecSubPlan+0x4a2>
    0.00 :	  5c7944:       0f 1f 40 00             nopl   0x0(%rax)
         :	                         */
         :	                        if (node->curTuple)
         :	                                heap_freetuple(node->curTuple);
         :	                        node->curTuple = ExecCopySlotTuple(slot);
         :
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
    0.00 :	  5c7948:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5c794b:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5c7950:       e8 3b 80 ea ff          callq  46f990 <nocachegetattr>
    0.00 :	  5c7955:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7959:       e9 34 fd ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c795e:       48 63 c2                movslq %edx,%rax
    0.00 :	  5c7961:       0f b6 51 16             movzbl 0x16(%rcx),%edx
    0.00 :	  5c7965:       48 01 d0                add    %rdx,%rax
    0.00 :	  5c7968:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5c796c:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7970:       e9 1d fd ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
         :	         * *not* set bits in the parent plan node's chgParam, because we don't
         :	         * want to cause a rescan of the parent.
         :	         */
         :	        if (subLinkType == MULTIEXPR_SUBLINK)
         :	        {
         :	                EState     *estate = node->parent->state;
    0.00 :	  5c7975:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
    0.00 :	  5c797c:       48 8b 41 20             mov    0x20(%rcx),%rax
    0.00 :	  5c7980:       48 8b 70 10             mov    0x10(%rax),%rsi
         :
         :	                foreach(l, subplan->setParam)
    0.00 :	  5c7984:       48 8b 47 38             mov    0x38(%rdi),%rax
    0.00 :	  5c7988:       48 85 c0                test   %rax,%rax
    0.00 :	  5c798b:       74 32                   je     5c79bf <ExecSubPlan+0x54f>
    0.00 :	  5c798d:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	  5c7991:       48 85 c9                test   %rcx,%rcx
    0.00 :	  5c7994:       74 29                   je     5c79bf <ExecSubPlan+0x54f>
    0.00 :	  5c7996:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5c799d:       00 00 00 
         :	                {
         :	                        int                     paramid = lfirst_int(l);
         :	                        ParamExecData *prm = &(estate->es_param_exec_vals[paramid]);
         :
         :	                        prm->execPlan = node;
    0.00 :	  5c79a0:       48 63 01                movslq (%rcx),%rax
    0.00 :	  5c79a3:       48 8b 56 78             mov    0x78(%rsi),%rdx
    0.00 :	  5c79a7:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c79ae:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	  5c79b2:       48 89 1c c2             mov    %rbx,(%rdx,%rax,8)
         :	         */
         :	        if (subLinkType == MULTIEXPR_SUBLINK)
         :	        {
         :	                EState     *estate = node->parent->state;
         :
         :	                foreach(l, subplan->setParam)
    0.00 :	  5c79b6:       48 8b 49 08             mov    0x8(%rcx),%rcx
    0.00 :	  5c79ba:       48 85 c9                test   %rcx,%rcx
    0.00 :	  5c79bd:       75 e1                   jne    5c79a0 <ExecSubPlan+0x530>
         :	                        int                     paramid = lfirst_int(l);
         :	                        ParamExecData *prm = &(estate->es_param_exec_vals[paramid]);
         :
         :	                        prm->execPlan = node;
         :	                }
         :	                *isNull = true;
    0.00 :	  5c79bf:       48 8b bd 68 ff ff ff    mov    -0x98(%rbp),%rdi
    0.00 :	  5c79c6:       c6 07 01                movb   $0x1,(%rdi)
    0.00 :	  5c79c9:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c79d0:       00 
         :	        /* Select appropriate evaluation strategy */
         :	        if (subplan->useHashTable)
         :	                return ExecHashSubPlan(node, econtext, isNull);
         :	        else
         :	                return ExecScanSubPlan(node, econtext, isNull);
         :	}
    0.00 :	  5c79d1:       48 8b 45 a0             mov    -0x60(%rbp),%rax
    0.00 :	  5c79d5:       48 81 c4 88 00 00 00    add    $0x88,%rsp
    0.00 :	  5c79dc:       5b                      pop    %rbx
    0.00 :	  5c79dd:       41 5c                   pop    %r12
    0.00 :	  5c79df:       41 5d                   pop    %r13
    0.00 :	  5c79e1:       41 5e                   pop    %r14
    0.00 :	  5c79e3:       41 5f                   pop    %r15
    0.00 :	  5c79e5:       c9                      leaveq 
    0.00 :	  5c79e6:       c3                      retq   
         :	                         */
         :	                        if (node->curTuple)
         :	                                heap_freetuple(node->curTuple);
         :	                        node->curTuple = ExecCopySlotTuple(slot);
         :
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
    0.00 :	  5c79e7:       48 63 c2                movslq %edx,%rax
    0.00 :	  5c79ea:       0f b6 51 16             movzbl 0x16(%rcx),%edx
    0.00 :	  5c79ee:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5c79f2:       48 8b 04 10             mov    (%rax,%rdx,1),%rax
    0.00 :	  5c79f6:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c79fa:       e9 93 fc ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c79ff:       b8 01 00 00 00          mov    $0x1,%eax
         :	                }
         :	        }
         :
         :	        MemoryContextSwitchTo(oldcontext);
         :
         :	        if (subLinkType == ARRAY_SUBLINK)
    0.00 :	  5c7a04:       83 7d b4 06             cmpl   $0x6,-0x4c(%rbp)
    0.00 :	  5c7a08:       48 8b 5d a8             mov    -0x58(%rbp),%rbx
    0.00 :	  5c7a0c:       48 89 1d 4d 2e 5f 00    mov    %rbx,0x5f2e4d(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5c7a13:       75 1d                   jne    5c7a32 <ExecSubPlan+0x5c2>
         :	        {
         :	                /* We return the result in the caller's context */
         :	                if (astate != NULL)
    0.00 :	  5c7a15:       48 83 7d 98 00          cmpq   $0x0,-0x68(%rbp)
    0.00 :	  5c7a1a:       0f 84 37 04 00 00       je     5c7e57 <ExecSubPlan+0x9e7>
         :	                        result = makeArrayResult(astate, oldcontext);
    0.00 :	  5c7a20:       48 8b 7d 98             mov    -0x68(%rbp),%rdi
    0.00 :	  5c7a24:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5c7a27:       e8 24 46 0f 00          callq  6bc050 <makeArrayResult>
    0.00 :	  5c7a2c:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7a30:       eb 9f                   jmp    5c79d1 <ExecSubPlan+0x561>
         :	                else
         :	                        result = PointerGetDatum(construct_empty_array(subplan->firstColType));
         :	        }
         :	        else if (!found)
    0.00 :	  5c7a32:       84 c0                   test   %al,%al
    0.00 :	  5c7a34:       75 9b                   jne    5c79d1 <ExecSubPlan+0x561>
         :	                /*
         :	                 * deal with empty subplan result.  result/isNull were previously
         :	                 * initialized correctly for all sublink types except EXPR and
         :	                 * ROWCOMPARE; for those, return NULL.
         :	                 */
         :	                if (subLinkType == EXPR_SUBLINK ||
    0.00 :	  5c7a36:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  5c7a39:       83 e8 03                sub    $0x3,%eax
    0.00 :	  5c7a3c:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5c7a3f:       77 90                   ja     5c79d1 <ExecSubPlan+0x561>
         :	                        subLinkType == ROWCOMPARE_SUBLINK)
         :	                {
         :	                        result = (Datum) 0;
         :	                        *isNull = true;
    0.00 :	  5c7a41:       48 8b 95 68 ff ff ff    mov    -0x98(%rbp),%rdx
    0.00 :	  5c7a48:       c6 02 01                movb   $0x1,(%rdx)
    0.00 :	  5c7a4b:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7a52:       00 
    0.00 :	  5c7a53:       e9 79 ff ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
         :
         :	        /*
         :	         * If first time through or we need to rescan the subplan, build the hash
         :	         * table.
         :	         */
         :	        if (node->hashtable == NULL || planstate->chgParam != NULL)
    0.00 :	  5c7a58:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7a5f:       48 83 7b 58 00          cmpq   $0x0,0x58(%rbx)
    0.00 :	  5c7a64:       74 12                   je     5c7a78 <ExecSubPlan+0x608>
    0.00 :	  5c7a66:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5c7a6d:       48 83 7f 50 00          cmpq   $0x0,0x50(%rdi)
    0.00 :	  5c7a72:       0f 84 3b 02 00 00       je     5c7cb3 <ExecSubPlan+0x843>
         :	static void
         :	buildSubPlanHash(SubPlanState *node, ExprContext *econtext)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
         :	        PlanState  *planstate = node->planstate;
         :	        int                     ncols = list_length(subplan->paramIds);
    0.00 :	  5c7a78:       48 8b 55 80             mov    -0x80(%rbp),%rdx
         :	}
         :
         :	STATIC_IF_INLINE int
         :	list_length(const List *l)
         :	{
         :	        return l ? l->length : 0;
    0.00 :	  5c7a7c:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  5c7a7f:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	  5c7a83:       48 85 c0                test   %rax,%rax
    0.00 :	  5c7a86:       74 04                   je     5c7a8c <ExecSubPlan+0x61c>
    0.00 :	  5c7a88:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	        ExprContext *innerecontext = node->innerecontext;
    0.00 :	  5c7a8c:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
         :	         * searches; see findPartialMatch.)
         :	         *
         :	         * If it's not necessary to distinguish FALSE and UNKNOWN, then we don't
         :	         * need to store subplan output rows that contain NULL.
         :	         */
         :	        MemoryContextReset(node->hashtablecxt);
    0.00 :	  5c7a93:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
         :	buildSubPlanHash(SubPlanState *node, ExprContext *econtext)
         :	{
         :	        SubPlan    *subplan = (SubPlan *) node->xprstate.expr;
         :	        PlanState  *planstate = node->planstate;
         :	        int                     ncols = list_length(subplan->paramIds);
         :	        ExprContext *innerecontext = node->innerecontext;
    0.00 :	  5c7a9a:       48 8b 89 80 00 00 00    mov    0x80(%rcx),%rcx
    0.00 :	  5c7aa1:       48 89 4d 90             mov    %rcx,-0x70(%rbp)
         :	         * searches; see findPartialMatch.)
         :	         *
         :	         * If it's not necessary to distinguish FALSE and UNKNOWN, then we don't
         :	         * need to store subplan output rows that contain NULL.
         :	         */
         :	        MemoryContextReset(node->hashtablecxt);
    0.00 :	  5c7aa5:       48 8b 7b 70             mov    0x70(%rbx),%rdi
    0.00 :	  5c7aa9:       e8 02 0f 1d 00          callq  7989b0 <MemoryContextReset>
         :	        node->hashtable = NULL;
    0.00 :	  5c7aae:       48 c7 43 58 00 00 00    movq   $0x0,0x58(%rbx)
    0.00 :	  5c7ab5:       00 
         :	        node->hashnulls = NULL;
    0.00 :	  5c7ab6:       48 c7 43 60 00 00 00    movq   $0x0,0x60(%rbx)
    0.00 :	  5c7abd:       00 
         :	        node->havehashrows = false;
    0.00 :	  5c7abe:       c6 43 68 00             movb   $0x0,0x68(%rbx)
         :	        node->havenullrows = false;
    0.00 :	  5c7ac2:       c6 43 69 00             movb   $0x0,0x69(%rbx)
         :
         :	        nbuckets = (long) Min(planstate->plan->plan_rows, (double) LONG_MAX);
    0.00 :	  5c7ac6:       48 bb ff ff ff ff ff    movabs $0x7fffffffffffffff,%rbx
    0.00 :	  5c7acd:       ff ff 7f 
    0.00 :	  5c7ad0:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5c7ad7:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  5c7adb:       f2 0f 10 40 18          movsd  0x18(%rax),%xmm0
    0.00 :	  5c7ae0:       66 0f 2e 05 40 a5 1e    ucomisd 0x1ea540(%rip),%xmm0        # 7b2028 <__func__.15386+0x18>
    0.00 :	  5c7ae7:       00 
    0.00 :	  5c7ae8:       73 13                   jae    5c7afd <ExecSubPlan+0x68d>
    0.00 :	  5c7aea:       7a 11                   jp     5c7afd <ExecSubPlan+0x68d>
    0.00 :	  5c7aec:       f2 48 0f 2c d8          cvttsd2si %xmm0,%rbx
         :	        if (nbuckets < 1)
    0.00 :	  5c7af1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  5c7af6:       48 85 db                test   %rbx,%rbx
    0.00 :	  5c7af9:       48 0f 4e d8             cmovle %rax,%rbx
         :	                nbuckets = 1;
         :
         :	        node->hashtable = BuildTupleHashTable(ncols,
    0.00 :	  5c7afd:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5c7b04:       41 b9 08 00 00 00       mov    $0x8,%r9d
    0.00 :	  5c7b0a:       49 89 d8                mov    %rbx,%r8
    0.00 :	  5c7b0d:       48 8b 88 90 00 00 00    mov    0x90(%rax),%rcx
    0.00 :	  5c7b14:       48 8b 90 98 00 00 00    mov    0x98(%rax),%rdx
    0.00 :	  5c7b1b:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5c7b1e:       48 8b b0 88 00 00 00    mov    0x88(%rax),%rsi
    0.00 :	  5c7b25:       48 8b 40 78             mov    0x78(%rax),%rax
    0.00 :	  5c7b29:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	  5c7b2e:       48 8b 47 70             mov    0x70(%rdi),%rax
    0.00 :	  5c7b32:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5c7b35:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  5c7b39:       e8 a2 14 fe ff          callq  5a8fe0 <BuildTupleHashTable>
    0.00 :	  5c7b3e:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5c7b45:       48 89 42 58             mov    %rax,0x58(%rdx)
         :	                                                                                  nbuckets,
         :	                                                                                  sizeof(TupleHashEntryData),
         :	                                                                                  node->hashtablecxt,
         :	                                                                                  node->hashtempcxt);
         :
         :	        if (!subplan->unknownEqFalse)
    0.00 :	  5c7b49:       48 8b 4d 80             mov    -0x80(%rbp),%rcx
    0.00 :	  5c7b4d:       80 79 35 00             cmpb   $0x0,0x35(%rcx)
    0.00 :	  5c7b51:       0f 84 61 02 00 00       je     5c7db8 <ExecSubPlan+0x948>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5c7b57:       48 8b 3d 02 2d 5f 00    mov    0x5f2d02(%rip),%rdi        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5c7b5e:       49 8b 47 20             mov    0x20(%r15),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5c7b62:       48 89 7d 88             mov    %rdi,-0x78(%rbp)
         :	        oldcontext = MemoryContextSwitchTo(econtext->ecxt_per_query_memory);
         :
         :	        /*
         :	         * Reset subplan to start.
         :	         */
         :	        ExecReScan(planstate);
    0.00 :	  5c7b66:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5c7b6d:       48 89 05 ec 2c 5f 00    mov    %rax,0x5f2cec(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5c7b74:       e8 27 09 fe ff          callq  5a84a0 <ExecReScan>
    0.00 :	  5c7b79:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * Scan the subplan and load the hash table(s).  Note that when there are
         :	         * duplicate rows coming out of the sub-select, only one copy is stored.
         :	         */
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
         :	                 slot = ExecProcNode(planstate))
    0.00 :	  5c7b80:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5c7b87:       e8 14 49 fe ff          callq  5ac4a0 <ExecProcNode>
         :	        /*
         :	         * Scan the subplan and load the hash table(s).  Note that when there are
         :	         * duplicate rows coming out of the sub-select, only one copy is stored.
         :	         */
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c7b8c:       48 85 c0                test   %rax,%rax
         :	                 slot = ExecProcNode(planstate))
    0.00 :	  5c7b8f:       49 89 c6                mov    %rax,%r14
         :	        /*
         :	         * Scan the subplan and load the hash table(s).  Note that when there are
         :	         * duplicate rows coming out of the sub-select, only one copy is stored.
         :	         */
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c7b92:       0f 84 fc 00 00 00       je     5c7c94 <ExecSubPlan+0x824>
    0.00 :	  5c7b98:       41 80 7e 04 00          cmpb   $0x0,0x4(%r14)
    0.00 :	  5c7b9d:       0f 85 f1 00 00 00       jne    5c7c94 <ExecSubPlan+0x824>
         :
         :	                /*
         :	                 * Load up the Params representing the raw sub-select outputs, then
         :	                 * form the projection tuple to store in the hashtable.
         :	                 */
         :	                foreach(plst, subplan->paramIds)
    0.00 :	  5c7ba3:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  5c7ba7:       48 8b 42 10             mov    0x10(%rdx),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5c7bab:       48 85 c0                test   %rax,%rax
    0.00 :	  5c7bae:       74 45                   je     5c7bf5 <ExecSubPlan+0x785>
    0.00 :	  5c7bb0:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  5c7bb4:       4d 85 e4                test   %r12,%r12
    0.00 :	  5c7bb7:       74 3c                   je     5c7bf5 <ExecSubPlan+0x785>
    0.00 :	  5c7bb9:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  5c7bbf:       90                      nop
         :	                {
         :	                        int                     paramid = lfirst_int(plst);
         :	                        ParamExecData *prmdata;
         :
         :	                        prmdata = &(innerecontext->ecxt_param_exec_vals[paramid]);
    0.00 :	  5c7bc0:       49 63 1c 24             movslq (%r12),%rbx
    0.00 :	  5c7bc4:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col,
    0.00 :	  5c7bc8:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5c7bcb:       4c 89 f7                mov    %r14,%rdi
         :	                                                                                  &(prmdata->isnull));
         :	                        col++;
    0.00 :	  5c7bce:       41 83 c5 01             add    $0x1,%r13d
         :	                foreach(plst, subplan->paramIds)
         :	                {
         :	                        int                     paramid = lfirst_int(plst);
         :	                        ParamExecData *prmdata;
         :
         :	                        prmdata = &(innerecontext->ecxt_param_exec_vals[paramid]);
    0.00 :	  5c7bd2:       48 8d 1c 5b             lea    (%rbx,%rbx,2),%rbx
    0.00 :	  5c7bd6:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  5c7bda:       48 03 59 30             add    0x30(%rcx),%rbx
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col,
    0.00 :	  5c7bde:       48 8d 53 10             lea    0x10(%rbx),%rdx
    0.00 :	  5c7be2:       e8 19 78 ea ff          callq  46f400 <slot_getattr>
    0.00 :	  5c7be7:       48 89 43 08             mov    %rax,0x8(%rbx)
         :
         :	                /*
         :	                 * Load up the Params representing the raw sub-select outputs, then
         :	                 * form the projection tuple to store in the hashtable.
         :	                 */
         :	                foreach(plst, subplan->paramIds)
    0.00 :	  5c7beb:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  5c7bf0:       4d 85 e4                test   %r12,%r12
    0.00 :	  5c7bf3:       75 cb                   jne    5c7bc0 <ExecSubPlan+0x750>
         :	                        Assert(prmdata->execPlan == NULL);
         :	                        prmdata->value = slot_getattr(slot, col,
         :	                                                                                  &(prmdata->isnull));
         :	                        col++;
         :	                }
         :	                slot = ExecProject(node->projRight, NULL);
    0.00 :	  5c7bf5:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7bfc:       31 f6                   xor    %esi,%esi
    0.00 :	  5c7bfe:       48 8b 7b 50             mov    0x50(%rbx),%rdi
    0.00 :	  5c7c02:       e8 f9 53 fe ff          callq  5ad000 <ExecProject>
    0.00 :	  5c7c07:       49 89 c4                mov    %rax,%r12
         :	 * use it on projected tuples.
         :	 */
         :	static bool
         :	slotNoNulls(TupleTableSlot *slot)
         :	{
         :	        int                     ncols = slot->tts_tupleDescriptor->natts;
    0.00 :	  5c7c0a:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  5c7c0e:       44 8b 28                mov    (%rax),%r13d
         :	        int                     i;
         :
         :	        for (i = 1; i <= ncols; i++)
    0.00 :	  5c7c11:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5c7c14:       7e 5a                   jle    5c7c70 <ExecSubPlan+0x800>
    0.00 :	  5c7c16:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5c7c1b:       eb 0b                   jmp    5c7c28 <ExecSubPlan+0x7b8>
    0.00 :	  5c7c1d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5c7c20:       83 c3 01                add    $0x1,%ebx
    0.00 :	  5c7c23:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  5c7c26:       7c 48                   jl     5c7c70 <ExecSubPlan+0x800>
         :	        {
         :	                if (slot_attisnull(slot, i))
    0.00 :	  5c7c28:       89 de                   mov    %ebx,%esi
    0.00 :	  5c7c2a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7c2d:       e8 0e 72 ea ff          callq  46ee40 <slot_attisnull>
    0.00 :	  5c7c32:       84 c0                   test   %al,%al
    0.00 :	  5c7c34:       74 ea                   je     5c7c20 <ExecSubPlan+0x7b0>
         :	                if (slotNoNulls(slot))
         :	                {
         :	                        (void) LookupTupleHashEntry(node->hashtable, slot, &isnew);
         :	                        node->havehashrows = true;
         :	                }
         :	                else if (node->hashnulls)
    0.00 :	  5c7c36:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5c7c3d:       48 8b 78 60             mov    0x60(%rax),%rdi
    0.00 :	  5c7c41:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5c7c44:       74 17                   je     5c7c5d <ExecSubPlan+0x7ed>
         :	                {
         :	                        (void) LookupTupleHashEntry(node->hashnulls, slot, &isnew);
    0.00 :	  5c7c46:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5c7c4a:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7c4d:       e8 1e 12 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                        node->havenullrows = true;
    0.00 :	  5c7c52:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5c7c59:       c6 42 69 01             movb   $0x1,0x69(%rdx)
         :
         :	                /*
         :	                 * Reset innerecontext after each inner tuple to free any memory used
         :	                 * during ExecProject.
         :	                 */
         :	                ResetExprContext(innerecontext);
    0.00 :	  5c7c5d:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5c7c61:       48 8b 79 28             mov    0x28(%rcx),%rdi
    0.00 :	  5c7c65:       e8 46 0d 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5c7c6a:       e9 11 ff ff ff          jmpq   5c7b80 <ExecSubPlan+0x710>
    0.00 :	  5c7c6f:       90                      nop
         :	                /*
         :	                 * If result contains any nulls, store separately or not at all.
         :	                 */
         :	                if (slotNoNulls(slot))
         :	                {
         :	                        (void) LookupTupleHashEntry(node->hashtable, slot, &isnew);
    0.00 :	  5c7c70:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
    0.00 :	  5c7c77:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5c7c7b:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7c7e:       48 8b 79 58             mov    0x58(%rcx),%rdi
    0.00 :	  5c7c82:       e8 e9 11 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                        node->havehashrows = true;
    0.00 :	  5c7c87:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7c8e:       c6 43 68 01             movb   $0x1,0x68(%rbx)
    0.00 :	  5c7c92:       eb c9                   jmp    5c7c5d <ExecSubPlan+0x7ed>
         :	         * main context, we'd better clear the tuple slot before there's any
         :	         * chance of a reset of the sub-query's context.  Else we will have the
         :	         * potential for a double free attempt.  (XXX possibly no longer needed,
         :	         * but can't hurt.)
         :	         */
         :	        ExecClearTuple(node->projRight->pi_slot);
    0.00 :	  5c7c94:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7c9b:       48 8b 43 50             mov    0x50(%rbx),%rax
    0.00 :	  5c7c9f:       48 8b 78 18             mov    0x18(%rax),%rdi
    0.00 :	  5c7ca3:       e8 68 c4 fe ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5c7ca8:       48 8b 7d 88             mov    -0x78(%rbp),%rdi
    0.00 :	  5c7cac:       48 89 3d ad 2b 5f 00    mov    %rdi,0x5f2bad(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /*
         :	         * The result for an empty subplan is always FALSE; no need to evaluate
         :	         * lefthand side.
         :	         */
         :	        *isNull = false;
    0.00 :	  5c7cb3:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5c7cba:       c6 00 00                movb   $0x0,(%rax)
         :	        if (!node->havehashrows && !node->havenullrows)
    0.00 :	  5c7cbd:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5c7cc4:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7ccb:       00 
    0.00 :	  5c7ccc:       66 83 7a 68 00          cmpw   $0x0,0x68(%rdx)
    0.00 :	  5c7cd1:       0f 84 fa fc ff ff       je     5c79d1 <ExecSubPlan+0x561>
         :
         :	        /*
         :	         * Evaluate lefthand expressions and form a projection tuple. First we
         :	         * have to set the econtext to use (hack alert!).
         :	         */
         :	        node->projLeft->pi_exprContext = econtext;
    0.00 :	  5c7cd7:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
         :	        slot = ExecProject(node->projLeft, NULL);
    0.00 :	  5c7cde:       31 f6                   xor    %esi,%esi
         :
         :	        /*
         :	         * Evaluate lefthand expressions and form a projection tuple. First we
         :	         * have to set the econtext to use (hack alert!).
         :	         */
         :	        node->projLeft->pi_exprContext = econtext;
    0.00 :	  5c7ce0:       48 8b 41 48             mov    0x48(%rcx),%rax
    0.00 :	  5c7ce4:       4c 89 78 10             mov    %r15,0x10(%rax)
         :	        slot = ExecProject(node->projLeft, NULL);
    0.00 :	  5c7ce8:       48 8b 79 48             mov    0x48(%rcx),%rdi
    0.00 :	  5c7cec:       e8 0f 53 fe ff          callq  5ad000 <ExecProject>
    0.00 :	  5c7cf1:       49 89 c4                mov    %rax,%r12
         :	 * use it on projected tuples.
         :	 */
         :	static bool
         :	slotNoNulls(TupleTableSlot *slot)
         :	{
         :	        int                     ncols = slot->tts_tupleDescriptor->natts;
    0.00 :	  5c7cf4:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  5c7cf8:       44 8b 28                mov    (%rax),%r13d
         :	        int                     i;
         :
         :	        for (i = 1; i <= ncols; i++)
    0.00 :	  5c7cfb:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5c7cfe:       0f 8e 73 01 00 00       jle    5c7e77 <ExecSubPlan+0xa07>
    0.00 :	  5c7d04:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5c7d09:       eb 11                   jmp    5c7d1c <ExecSubPlan+0x8ac>
    0.00 :	  5c7d0b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5c7d10:       83 c3 01                add    $0x1,%ebx
    0.00 :	  5c7d13:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  5c7d16:       0f 8c 5b 01 00 00       jl     5c7e77 <ExecSubPlan+0xa07>
         :	        {
         :	                if (slot_attisnull(slot, i))
    0.00 :	  5c7d1c:       89 de                   mov    %ebx,%esi
    0.00 :	  5c7d1e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7d21:       e8 1a 71 ea ff          callq  46ee40 <slot_attisnull>
    0.00 :	  5c7d26:       84 c0                   test   %al,%al
    0.00 :	  5c7d28:       74 e6                   je     5c7d10 <ExecSubPlan+0x8a0>
         :	         * were empty, but we already handled that case.) Otherwise, we must scan
         :	         * both the main and partly-null tables to see if there are any rows that
         :	         * aren't provably unequal to the LHS; if so, the result is UNKNOWN.
         :	         * Otherwise, the result is FALSE.
         :	         */
         :	        if (node->hashnulls == NULL)
    0.00 :	  5c7d2a:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7d31:       48 83 7b 60 00          cmpq   $0x0,0x60(%rbx)
    0.00 :	  5c7d36:       74 6b                   je     5c7da3 <ExecSubPlan+0x933>
         :	 * use it on projected tuples.
         :	 */
         :	static bool
         :	slotAllNulls(TupleTableSlot *slot)
         :	{
         :	        int                     ncols = slot->tts_tupleDescriptor->natts;
    0.00 :	  5c7d38:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  5c7d3d:       44 8b 28                mov    (%rax),%r13d
         :	        int                     i;
         :
         :	        for (i = 1; i <= ncols; i++)
    0.00 :	  5c7d40:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5c7d43:       0f 8e 07 02 00 00       jle    5c7f50 <ExecSubPlan+0xae0>
    0.00 :	  5c7d49:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5c7d4e:       eb 0c                   jmp    5c7d5c <ExecSubPlan+0x8ec>
    0.00 :	  5c7d50:       83 c3 01                add    $0x1,%ebx
    0.00 :	  5c7d53:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  5c7d56:       0f 8c f4 01 00 00       jl     5c7f50 <ExecSubPlan+0xae0>
         :	        {
         :	                if (!slot_attisnull(slot, i))
    0.00 :	  5c7d5c:       89 de                   mov    %ebx,%esi
    0.00 :	  5c7d5e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7d61:       e8 da 70 ea ff          callq  46ee40 <slot_attisnull>
    0.00 :	  5c7d66:       84 c0                   test   %al,%al
    0.00 :	  5c7d68:       75 e6                   jne    5c7d50 <ExecSubPlan+0x8e0>
         :	                ExecClearTuple(slot);
         :	                *isNull = true;
         :	                return BoolGetDatum(false);
         :	        }
         :	        /* Scan partly-null table first, since more likely to get a match */
         :	        if (node->havenullrows &&
    0.00 :	  5c7d6a:       48 8b bd 70 ff ff ff    mov    -0x90(%rbp),%rdi
    0.00 :	  5c7d71:       80 7f 69 00             cmpb   $0x0,0x69(%rdi)
    0.00 :	  5c7d75:       0f 85 33 02 00 00       jne    5c7fae <ExecSubPlan+0xb3e>
         :	        {
         :	                ExecClearTuple(slot);
         :	                *isNull = true;
         :	                return BoolGetDatum(false);
         :	        }
         :	        if (node->havehashrows &&
    0.00 :	  5c7d7b:       48 8b 8d 70 ff ff ff    mov    -0x90(%rbp),%rcx
    0.00 :	  5c7d82:       80 79 68 00             cmpb   $0x0,0x68(%rcx)
    0.00 :	  5c7d86:       74 1b                   je     5c7da3 <ExecSubPlan+0x933>
    0.00 :	  5c7d88:       48 8b 91 a8 00 00 00    mov    0xa8(%rcx),%rdx
    0.00 :	  5c7d8f:       48 8b 79 58             mov    0x58(%rcx),%rdi
    0.00 :	  5c7d93:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7d96:       e8 45 f6 ff ff          callq  5c73e0 <findPartialMatch>
    0.00 :	  5c7d9b:       84 c0                   test   %al,%al
    0.00 :	  5c7d9d:       0f 85 14 01 00 00       jne    5c7eb7 <ExecSubPlan+0xa47>
         :	        {
         :	                ExecClearTuple(slot);
         :	                *isNull = true;
         :	                return BoolGetDatum(false);
         :	        }
         :	        ExecClearTuple(slot);
    0.00 :	  5c7da3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7da6:       e8 65 c3 fe ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5c7dab:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7db2:       00 
    0.00 :	  5c7db3:       e9 19 fc ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
         :	                                                                                  node->hashtablecxt,
         :	                                                                                  node->hashtempcxt);
         :
         :	        if (!subplan->unknownEqFalse)
         :	        {
         :	                if (ncols == 1)
    0.00 :	  5c7db8:       41 83 fc 01             cmp    $0x1,%r12d
    0.00 :	  5c7dbc:       0f 84 aa 00 00 00       je     5c7e6c <ExecSubPlan+0x9fc>
         :	                        nbuckets = 1;           /* there can only be one entry */
         :	                else
         :	                {
         :	                        nbuckets /= 16;
    0.00 :	  5c7dc2:       49 89 d8                mov    %rbx,%r8
    0.00 :	  5c7dc5:       49 c1 f8 04             sar    $0x4,%r8
         :	                        if (nbuckets < 1)
    0.00 :	  5c7dc9:       4d 85 c0                test   %r8,%r8
    0.00 :	  5c7dcc:       0f 84 9a 00 00 00       je     5c7e6c <ExecSubPlan+0x9fc>
         :	                                nbuckets = 1;
         :	                }
         :	                node->hashnulls = BuildTupleHashTable(ncols,
    0.00 :	  5c7dd2:       48 8b 9d 70 ff ff ff    mov    -0x90(%rbp),%rbx
    0.00 :	  5c7dd9:       41 b9 08 00 00 00       mov    $0x8,%r9d
    0.00 :	  5c7ddf:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5c7de2:       48 8b 43 78             mov    0x78(%rbx),%rax
    0.00 :	  5c7de6:       48 8b 8b 90 00 00 00    mov    0x90(%rbx),%rcx
    0.00 :	  5c7ded:       48 8b 93 98 00 00 00    mov    0x98(%rbx),%rdx
    0.00 :	  5c7df4:       48 8b b3 88 00 00 00    mov    0x88(%rbx),%rsi
    0.00 :	  5c7dfb:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	  5c7e00:       48 8b 43 70             mov    0x70(%rbx),%rax
    0.00 :	  5c7e04:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  5c7e08:       e8 d3 11 fe ff          callq  5a8fe0 <BuildTupleHashTable>
    0.00 :	  5c7e0d:       48 89 43 60             mov    %rax,0x60(%rbx)
    0.00 :	  5c7e11:       e9 41 fd ff ff          jmpq   5c7b57 <ExecSubPlan+0x6e7>
         :	                         */
         :	                        if (node->curTuple)
         :	                                heap_freetuple(node->curTuple);
         :	                        node->curTuple = ExecCopySlotTuple(slot);
         :
         :	                        result = heap_getattr(node->curTuple, 1, tdesc, isNull);
    0.00 :	  5c7e16:       48 63 c2                movslq %edx,%rax
    0.00 :	  5c7e19:       0f b6 51 16             movzbl 0x16(%rcx),%edx
    0.00 :	  5c7e1d:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5c7e21:       8b 04 10                mov    (%rax,%rdx,1),%eax
    0.00 :	  5c7e24:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7e28:       e9 65 f8 ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
    0.00 :	  5c7e2d:       48 63 c2                movslq %edx,%rax
    0.00 :	  5c7e30:       0f b6 51 16             movzbl 0x16(%rcx),%edx
    0.00 :	  5c7e34:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
    0.00 :	  5c7e38:       0f b7 04 10             movzwl (%rax,%rdx,1),%eax
    0.00 :	  5c7e3c:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7e40:       e9 4d f8 ff ff          jmpq   5c7692 <ExecSubPlan+0x222>
         :
         :	                if (subLinkType == EXPR_SUBLINK)
         :	                {
         :	                        /* cannot allow multiple input tuples for EXPR sublink */
         :	                        if (found)
         :	                                ereport(ERROR,
    0.00 :	  5c7e45:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5c7e48:       b9 a0 c6 88 00          mov    $0x88c6a0,%ecx
    0.00 :	  5c7e4d:       ba 54 01 00 00          mov    $0x154,%edx
    0.00 :	  5c7e52:       e9 5e f9 ff ff          jmpq   5c77b5 <ExecSubPlan+0x345>
         :	        {
         :	                /* We return the result in the caller's context */
         :	                if (astate != NULL)
         :	                        result = makeArrayResult(astate, oldcontext);
         :	                else
         :	                        result = PointerGetDatum(construct_empty_array(subplan->firstColType));
    0.00 :	  5c7e57:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5c7e5b:       8b 78 28                mov    0x28(%rax),%edi
    0.00 :	  5c7e5e:       e8 4d 17 0f 00          callq  6b95b0 <construct_empty_array>
    0.00 :	  5c7e63:       48 89 45 a0             mov    %rax,-0x60(%rbp)
    0.00 :	  5c7e67:       e9 65 fb ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
         :	                if (ncols == 1)
         :	                        nbuckets = 1;           /* there can only be one entry */
         :	                else
         :	                {
         :	                        nbuckets /= 16;
         :	                        if (nbuckets < 1)
    0.00 :	  5c7e6c:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  5c7e72:       e9 5b ff ff ff          jmpq   5c7dd2 <ExecSubPlan+0x962>
         :	         * LHS to some main-table entry --- which is a comparison we will not even
         :	         * make, unless there's a chance match of hash keys.
         :	         */
         :	        if (slotNoNulls(slot))
         :	        {
         :	                if (node->havehashrows &&
    0.00 :	  5c7e77:       48 8b bd 70 ff ff ff    mov    -0x90(%rbp),%rdi
    0.00 :	  5c7e7e:       80 7f 68 00             cmpb   $0x0,0x68(%rdi)
    0.00 :	  5c7e82:       0f 85 e7 00 00 00       jne    5c7f6f <ExecSubPlan+0xaff>
         :	                                                           node->lhs_hash_funcs) != NULL)
         :	                {
         :	                        ExecClearTuple(slot);
         :	                        return BoolGetDatum(true);
         :	                }
         :	                if (node->havenullrows &&
    0.00 :	  5c7e88:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5c7e8f:       80 7a 69 00             cmpb   $0x0,0x69(%rdx)
    0.00 :	  5c7e93:       0f 84 0a ff ff ff       je     5c7da3 <ExecSubPlan+0x933>
    0.00 :	  5c7e99:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  5c7e9c:       48 8b 92 a8 00 00 00    mov    0xa8(%rdx),%rdx
    0.00 :	  5c7ea3:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7ea6:       48 8b 79 60             mov    0x60(%rcx),%rdi
    0.00 :	  5c7eaa:       e8 31 f5 ff ff          callq  5c73e0 <findPartialMatch>
    0.00 :	  5c7eaf:       84 c0                   test   %al,%al
    0.00 :	  5c7eb1:       0f 84 ec fe ff ff       je     5c7da3 <ExecSubPlan+0x933>
         :	                return BoolGetDatum(false);
         :	        }
         :	        if (node->havehashrows &&
         :	                findPartialMatch(node->hashtable, slot, node->cur_eq_funcs))
         :	        {
         :	                ExecClearTuple(slot);
    0.00 :	  5c7eb7:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7eba:       e8 51 c2 fe ff          callq  5b4110 <ExecClearTuple>
         :	                *isNull = true;
    0.00 :	  5c7ebf:       48 8b 9d 68 ff ff ff    mov    -0x98(%rbp),%rbx
    0.00 :	  5c7ec6:       c6 03 01                movb   $0x1,(%rbx)
    0.00 :	  5c7ec9:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7ed0:       00 
    0.00 :	  5c7ed1:       e9 fb fa ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
    0.00 :	  5c7ed6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5c7edd:       00 00 00 
         :	         */
         :	        result = BoolGetDatum(subLinkType == ALL_SUBLINK);
         :	        *isNull = false;
         :
         :	        for (slot = ExecProcNode(planstate);
         :	                 !TupIsNull(slot);
    0.00 :	  5c7ee0:       31 c0                   xor    %eax,%eax
    0.00 :	  5c7ee2:       48 c7 45 98 00 00 00    movq   $0x0,-0x68(%rbp)
    0.00 :	  5c7ee9:       00 
    0.00 :	  5c7eea:       e9 15 fb ff ff          jmpq   5c7a04 <ExecSubPlan+0x594>
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        /* Sanity checks */
         :	        if (subplan->subLinkType == CTE_SUBLINK)
         :	                elog(ERROR, "CTE subplans should not be executed via ExecSubPlan");
    0.00 :	  5c7eef:       ba 80 c6 88 00          mov    $0x88c680,%edx
    0.00 :	  5c7ef4:       be 54 00 00 00          mov    $0x54,%esi
    0.00 :	  5c7ef9:       bf 01 c4 88 00          mov    $0x88c401,%edi
    0.00 :	  5c7efe:       e8 1d 35 1b 00          callq  77b420 <elog_start>
    0.00 :	  5c7f03:       be 30 c4 88 00          mov    $0x88c430,%esi
    0.00 :	  5c7f08:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5c7f0d:       31 c0                   xor    %eax,%eax
    0.00 :	  5c7f0f:       e8 1c 33 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5c7f14:       e8 b7 15 ea ff          callq  4694d0 <abort@plt>
         :	        if (subplan->setParam != NIL && subplan->subLinkType != MULTIEXPR_SUBLINK)
         :	                elog(ERROR, "cannot set parent params from subquery");
    0.00 :	  5c7f19:       ba 80 c6 88 00          mov    $0x88c680,%edx
    0.00 :	  5c7f1e:       be 56 00 00 00          mov    $0x56,%esi
    0.00 :	  5c7f23:       bf 01 c4 88 00          mov    $0x88c401,%edi
    0.00 :	  5c7f28:       e8 f3 34 1b 00          callq  77b420 <elog_start>
    0.00 :	  5c7f2d:       be 68 c4 88 00          mov    $0x88c468,%esi
    0.00 :	  5c7f32:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5c7f37:       31 c0                   xor    %eax,%eax
    0.00 :	  5c7f39:       e8 f2 32 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5c7f3e:       e8 8d 15 ea ff          callq  4694d0 <abort@plt>
         :	                return BoolGetDatum(false);
         :	        }
         :	        if (slotAllNulls(slot))
         :	        {
         :	                ExecClearTuple(slot);
         :	                *isNull = true;
    0.00 :	  5c7f43:       48 c7 45 a0 01 00 00    movq   $0x1,-0x60(%rbp)
    0.00 :	  5c7f4a:       00 
    0.00 :	  5c7f4b:       e9 c2 f9 ff ff          jmpq   5c7912 <ExecSubPlan+0x4a2>
         :	                ExecClearTuple(slot);
         :	                return BoolGetDatum(false);
         :	        }
         :	        if (slotAllNulls(slot))
         :	        {
         :	                ExecClearTuple(slot);
    0.00 :	  5c7f50:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7f53:       e8 b8 c1 fe ff          callq  5b4110 <ExecClearTuple>
         :	                *isNull = true;
    0.00 :	  5c7f58:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5c7f5f:       c6 00 01                movb   $0x1,(%rax)
    0.00 :	  5c7f62:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7f69:       00 
    0.00 :	  5c7f6a:       e9 62 fa ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
         :	         * LHS to some main-table entry --- which is a comparison we will not even
         :	         * make, unless there's a chance match of hash keys.
         :	         */
         :	        if (slotNoNulls(slot))
         :	        {
         :	                if (node->havehashrows &&
    0.00 :	  5c7f6f:       48 8b bd 70 ff ff ff    mov    -0x90(%rbp),%rdi
    0.00 :	  5c7f76:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7f79:       48 8b 8f a0 00 00 00    mov    0xa0(%rdi),%rcx
    0.00 :	  5c7f80:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
    0.00 :	  5c7f87:       48 8b 7f 58             mov    0x58(%rdi),%rdi
    0.00 :	  5c7f8b:       e8 70 0e fe ff          callq  5a8e00 <FindTupleHashEntry>
    0.00 :	  5c7f90:       48 85 c0                test   %rax,%rax
    0.00 :	  5c7f93:       0f 84 ef fe ff ff       je     5c7e88 <ExecSubPlan+0xa18>
         :	                        FindTupleHashEntry(node->hashtable,
         :	                                                           slot,
         :	                                                           node->cur_eq_funcs,
         :	                                                           node->lhs_hash_funcs) != NULL)
         :	                {
         :	                        ExecClearTuple(slot);
    0.00 :	  5c7f99:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7f9c:       e8 6f c1 fe ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5c7fa1:       48 c7 45 a0 01 00 00    movq   $0x1,-0x60(%rbp)
    0.00 :	  5c7fa8:       00 
    0.00 :	  5c7fa9:       e9 23 fa ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>
         :	                ExecClearTuple(slot);
         :	                *isNull = true;
         :	                return BoolGetDatum(false);
         :	        }
         :	        /* Scan partly-null table first, since more likely to get a match */
         :	        if (node->havenullrows &&
    0.00 :	  5c7fae:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
    0.00 :	  5c7fb5:       48 8b 7f 60             mov    0x60(%rdi),%rdi
    0.00 :	  5c7fb9:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5c7fbc:       e8 1f f4 ff ff          callq  5c73e0 <findPartialMatch>
    0.00 :	  5c7fc1:       84 c0                   test   %al,%al
    0.00 :	  5c7fc3:       0f 84 b2 fd ff ff       je     5c7d7b <ExecSubPlan+0x90b>
         :	                findPartialMatch(node->hashnulls, slot, node->cur_eq_funcs))
         :	        {
         :	                ExecClearTuple(slot);
    0.00 :	  5c7fc9:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c7fcc:       e8 3f c1 fe ff          callq  5b4110 <ExecClearTuple>
         :	                *isNull = true;
    0.00 :	  5c7fd1:       48 8b 95 68 ff ff ff    mov    -0x98(%rbp),%rdx
    0.00 :	  5c7fd8:       c6 02 01                movb   $0x1,(%rdx)
    0.00 :	  5c7fdb:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
    0.00 :	  5c7fe2:       00 
    0.00 :	  5c7fe3:       e9 e9 f9 ff ff          jmpq   5c79d1 <ExecSubPlan+0x561>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000642780 <pgstat_init_function_usage>:
         :	 * Called by the executor before invoking a function.
         :	 */
         :	void
         :	pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
         :	                                                   PgStat_FunctionCallUsage *fcu)
         :	{
    0.00 :	  642780:       55                      push   %rbp
    0.00 :	  642781:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
  100.00 :	  642784:       41 54                   push   %r12
    0.00 :	  642786:       49 89 fc                mov    %rdi,%r12
    0.00 :	  642789:       53                      push   %rbx
    0.00 :	  64278a:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  64278d:       48 83 ec 70             sub    $0x70,%rsp
         :	        PgStat_BackendFunctionEntry *htabent;
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
    0.00 :	  642791:       48 8b 17                mov    (%rdi),%rdx
    0.00 :	  642794:       0f b6 42 10             movzbl 0x10(%rdx),%eax
    0.00 :	  642798:       3b 05 06 94 53 00       cmp    0x539406(%rip),%eax        # b7bba4 <pgstat_track_functions>
    0.00 :	  64279e:       0f 8d ac 00 00 00       jge    642850 <pgstat_init_function_usage+0xd0>
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
         :	                return;
         :	        }
         :
         :	        if (!pgStatFunctions)
    0.00 :	  6427a4:       48 83 3d 04 95 53 00    cmpq   $0x0,0x539504(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427ab:       00 
    0.00 :	  6427ac:       0f 84 de 00 00 00       je     642890 <pgstat_init_function_usage+0x110>
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427b2:       48 8b 3d f7 94 53 00    mov    0x5394f7(%rip),%rdi        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427b9:       48 8d 72 08             lea    0x8(%rdx),%rsi
    0.00 :	  6427bd:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  6427c1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6427c6:       e8 d5 1e 14 00          callq  7846a0 <hash_search>
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427cb:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427cf:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6427d2:       48 8d 40 08             lea    0x8(%rax),%rax
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427d6:       74 40                   je     642818 <pgstat_init_function_usage+0x98>
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
    0.00 :	  6427d8:       48 89 03                mov    %rax,(%rbx)
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427db:       48 8b 42 10             mov    0x10(%rdx),%rax
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  6427df:       48 8d 7b 28             lea    0x28(%rbx),%rdi
    0.00 :	  6427e3:       31 f6                   xor    %esi,%esi
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427e5:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  6427e9:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  6427ed:       48 89 43 10             mov    %rax,0x10(%rbx)
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
    0.00 :	  6427f1:       48 8b 05 28 97 53 00    mov    0x539728(%rip),%rax        # b7bf20 <total_func_time>
    0.00 :	  6427f8:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  6427fc:       48 8b 05 25 97 53 00    mov    0x539725(%rip),%rax        # b7bf28 <total_func_time+0x8>
    0.00 :	  642803:       48 89 43 20             mov    %rax,0x20(%rbx)
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  642807:       e8 b4 6d e2 ff          callq  4695c0 <gettimeofday@plt>
         :	}
    0.00 :	  64280c:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  642810:       5b                      pop    %rbx
    0.00 :	  642811:       41 5c                   pop    %r12
    0.00 :	  642813:       c9                      leaveq 
    0.00 :	  642814:       c3                      retq   
    0.00 :	  642815:       0f 1f 00                nopl   (%rax)
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642818:       a8 07                   test   $0x7,%al
    0.00 :	  64281a:       75 44                   jne    642860 <pgstat_init_function_usage+0xe0>
    0.00 :	  64281c:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642823:       00 
    0.00 :	  642824:       48 c7 42 10 00 00 00    movq   $0x0,0x10(%rdx)
    0.00 :	  64282b:       00 
    0.00 :	  64282c:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  642833:       00 
    0.00 :	  642834:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	  64283b:       00 
    0.00 :	  64283c:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	  642843:       00 
    0.00 :	  642844:       eb 92                   jmp    6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  642846:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64284d:       00 00 00 
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
         :	        {
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
    0.00 :	  642850:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
         :	}
    0.00 :	  642857:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  64285b:       5b                      pop    %rbx
    0.00 :	  64285c:       41 5c                   pop    %r12
    0.00 :	  64285e:       c9                      leaveq 
    0.00 :	  64285f:       c3                      retq   
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642860:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642867:       00 
    0.00 :	  642868:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  64286f:       00 
    0.00 :	  642870:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  642877:       00 
    0.00 :	  642878:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  64287f:       00 
    0.00 :	  642880:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  642887:       00 
    0.00 :	  642888:       e9 4b ff ff ff          jmpq   6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  64288d:       0f 1f 00                nopl   (%rax)
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  642890:       48 8d 55 80             lea    -0x80(%rbp),%rdx
    0.00 :	  642894:       31 c0                   xor    %eax,%eax
    0.00 :	  642896:       b9 0d 00 00 00          mov    $0xd,%ecx
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  64289b:       be 00 02 00 00          mov    $0x200,%esi
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  6428a0:       48 89 d7                mov    %rdx,%rdi
    0.00 :	  6428a3:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                hash_ctl.keysize = sizeof(Oid);
    0.00 :	  6428a6:       48 c7 45 a8 04 00 00    movq   $0x4,-0x58(%rbp)
    0.00 :	  6428ad:       00 
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
    0.00 :	  6428ae:       48 c7 45 b0 30 00 00    movq   $0x30,-0x50(%rbp)
    0.00 :	  6428b5:       00 
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428b6:       bf 1c f0 89 00          mov    $0x89f01c,%edi
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
    0.00 :	  6428bb:       48 c7 45 b8 50 4f 78    movq   $0x784f50,-0x48(%rbp)
    0.00 :	  6428c2:       00 
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428c3:       b1 30                   mov    $0x30,%cl
    0.00 :	  6428c5:       e8 e6 1f 14 00          callq  7848b0 <hash_create>
    0.00 :	  6428ca:       48 89 05 df 93 53 00    mov    %rax,0x5393df(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6428d1:       49 8b 14 24             mov    (%r12),%rdx
    0.00 :	  6428d5:       e9 d8 fe ff ff          jmpq   6427b2 <pgstat_init_function_usage+0x32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2112
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674030 <BufferGetBlockNumber>:
         :	 *              Assumes that the buffer is valid and pinned, else the
         :	 *              value may be obsolete immediately...
         :	 */
         :	BlockNumber
         :	BufferGetBlockNumber(Buffer buffer)
         :	{
    0.00 :	  674030:       55                      push   %rbp
         :	        volatile BufferDesc *bufHdr;
         :
         :	        Assert(BufferIsPinned(buffer));
         :
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674031:       85 ff                   test   %edi,%edi
         :	 *              Assumes that the buffer is valid and pinned, else the
         :	 *              value may be obsolete immediately...
         :	 */
         :	BlockNumber
         :	BufferGetBlockNumber(Buffer buffer)
         :	{
    0.00 :	  674033:       48 89 e5                mov    %rsp,%rbp
         :	        volatile BufferDesc *bufHdr;
         :
         :	        Assert(BufferIsPinned(buffer));
         :
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674036:       78 18                   js     674050 <BufferGetBlockNumber+0x20>
         :	                bufHdr = &(LocalBufferDescriptors[-buffer - 1]);
         :	        else
         :	                bufHdr = &BufferDescriptors[buffer - 1];
    0.00 :	  674038:       48 63 c7                movslq %edi,%rax
    0.00 :	  67403b:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  67403f:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  674043:       48 03 05 b6 ba 54 00    add    0x54bab6(%rip),%rax        # bbfb00 <BufferDescriptors>
         :
         :	        /* pinned, so OK to read tag without spinlock */
         :	        return bufHdr->tag.blockNum;
    0.00 :	  67404a:       8b 40 10                mov    0x10(%rax),%eax
         :	}
    0.00 :	  67404d:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2112
  100.00 :	  67404e:       c3                      retq   
    0.00 :	  67404f:       90                      nop
         :	        volatile BufferDesc *bufHdr;
         :
         :	        Assert(BufferIsPinned(buffer));
         :
         :	        if (BufferIsLocal(buffer))
         :	                bufHdr = &(LocalBufferDescriptors[-buffer - 1]);
    0.00 :	  674050:       f7 d7                   not    %edi
    0.00 :	  674052:       48 63 c7                movslq %edi,%rax
    0.00 :	  674055:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  674059:       48 03 05 b0 90 50 00    add    0x5090b0(%rip),%rax        # b7d110 <LocalBufferDescriptors>
         :	        else
         :	                bufHdr = &BufferDescriptors[buffer - 1];
         :
         :	        /* pinned, so OK to read tag without spinlock */
         :	        return bufHdr->tag.blockNum;
    0.00 :	  674060:       8b 40 10                mov    0x10(%rax),%eax
         :	}
    0.00 :	  674063:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3341
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006741d0 <TerminateBufferIO>:
         :	 * be 0, or BM_VALID if we just finished reading in the page.
         :	 */
         :	static void
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
    0.00 :	  6741d0:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6741d1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6741d6:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6741d9:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6741dd:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6741e1:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6741e4:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6741e8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  6741eb:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  6741ef:       41 89 d5                mov    %edx,%r13d
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  6741f2:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	  6741f6:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  6741f9:       84 c0                   test   %al,%al
    0.00 :	  6741fb:       75 53                   jne    674250 <TerminateBufferIO+0x80>
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  6741fd:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674201:       83 e0 e7                and    $0xffffffe7,%eax
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  674204:       45 84 e4                test   %r12b,%r12b
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  674207:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  67420b:       74 12                   je     67421f <TerminateBufferIO+0x4f>
    0.00 :	  67420d:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674211:       a8 20                   test   $0x20,%al
    0.00 :	  674213:       75 0a                   jne    67421f <TerminateBufferIO+0x4f>
         :	                buf->flags &= ~(BM_DIRTY | BM_CHECKPOINT_NEEDED);
    0.00 :	  674215:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674219:       24 7e                   and    $0x7e,%al
    0.00 :	  67421b:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        buf->flags |= set_flag_bits;
    0.00 :	  67421f:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674223:       44 09 e8                or     %r13d,%eax
    0.00 :	  674226:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67422a:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = NULL;
    0.00 :	  67422e:       48 c7 05 2f 8e 50 00    movq   $0x0,0x508e2f(%rip)        # b7d068 <InProgressBuf>
    0.00 :	  674235:       00 00 00 00 
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674239:       48 8b 7b 30             mov    0x30(%rbx),%rdi
         :	}
    0.00 :	  67423d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674241:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674245:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674249:       c9                      leaveq 
         :
         :	        UnlockBufHdr(buf);
         :
         :	        InProgressBuf = NULL;
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3341
  100.00 :	  67424a:       e9 51 b1 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67424f:       90                      nop
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  674250:       ba 01 0d 00 00          mov    $0xd01,%edx
    0.00 :	  674255:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67425a:       e8 e1 bd 01 00          callq  690040 <s_lock>
    0.00 :	  67425f:       eb 9c                   jmp    6741fd <TerminateBufferIO+0x2d>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674440 <StartBufferIO>:
         :	 * Returns TRUE if we successfully marked the buffer as I/O busy,
         :	 * FALSE if someone else already did the work.
         :	 */
         :	static bool
         :	StartBufferIO(volatile BufferDesc *buf, bool forInput)
         :	{
    0.00 :	  674440:       55                      push   %rbp
    0.00 :	  674441:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674444:       41 56                   push   %r14
    0.00 :	  674446:       41 89 f6                mov    %esi,%r14d
    0.00 :	  674449:       41 55                   push   %r13
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  67444b:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  674451:       41 54                   push   %r12
    0.00 :	  674453:       4c 8d 67 20             lea    0x20(%rdi),%r12
    0.00 :	  674457:       53                      push   %rbx
    0.00 :	  674458:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67445b:       eb 20                   jmp    67447d <StartBufferIO+0x3d>
    0.00 :	  67445d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
         :
         :	                LockBufHdr(buf);
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  674460:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674464:       a8 08                   test   $0x8,%al
    0.00 :	  674466:       74 46                   je     6744ae <StartBufferIO+0x6e>
         :	                 * The only way BM_IO_IN_PROGRESS could be set when the io_in_progress
         :	                 * lock isn't held is if the process doing the I/O is recovering from
         :	                 * an error (see AbortBufferIO).  If that's the case, we must wait for
         :	                 * him to get unwedged.
         :	                 */
         :	                UnlockBufHdr(buf);
    0.00 :	  674468:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67446c:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674470:       e8 2b af 01 00          callq  68f3a0 <LWLockRelease>
         :	                WaitIO(buf);
    0.00 :	  674475:       48 89 df                mov    %rbx,%rdi
    0.00 :	  674478:       e8 43 ff ff ff          callq  6743c0 <WaitIO>
         :	        {
         :	                /*
         :	                 * Grab the io_in_progress lock so that other processes can wait for
         :	                 * me to finish the I/O.
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
    0.00 :	  67447d:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674481:       31 f6                   xor    %esi,%esi
    0.00 :	  674483:       e8 68 b6 01 00          callq  68faf0 <LWLockAcquire>
    0.00 :	  674488:       44 89 e8                mov    %r13d,%eax
    0.00 :	  67448b:       f0 41 86 04 24          lock xchg %al,(%r12)
         :
         :	                LockBufHdr(buf);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
  100.00 :	  674490:       84 c0                   test   %al,%al
    0.00 :	  674492:       74 cc                   je     674460 <StartBufferIO+0x20>
    0.00 :	  674494:       ba c6 0c 00 00          mov    $0xcc6,%edx
    0.00 :	  674499:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67449e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6744a1:       e8 9a bb 01 00          callq  690040 <s_lock>
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  6744a6:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744aa:       a8 08                   test   $0x8,%al
    0.00 :	  6744ac:       75 ba                   jne    674468 <StartBufferIO+0x28>
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744ae:       45 84 f6                test   %r14b,%r14b
    0.00 :	  6744b1:       74 3d                   je     6744f0 <StartBufferIO+0xb0>
    0.00 :	  6744b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744b7:       d1 e8                   shr    %eax
    0.00 :	  6744b9:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744bc:       84 c0                   test   %al,%al
    0.00 :	  6744be:       75 3d                   jne    6744fd <StartBufferIO+0xbd>
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
         :	                return false;
         :	        }
         :
         :	        buf->flags |= BM_IO_IN_PROGRESS;
    0.00 :	  6744c0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744c4:       83 c8 08                or     $0x8,%eax
    0.00 :	  6744c7:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  6744cb:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = buf;
    0.00 :	  6744cf:       48 89 1d 92 8b 50 00    mov    %rbx,0x508b92(%rip)        # b7d068 <InProgressBuf>
         :	        IsForInput = forInput;
    0.00 :	  6744d6:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6744db:       44 88 35 c3 8b 50 00    mov    %r14b,0x508bc3(%rip)        # b7d0a5 <IsForInput>
         :
         :	        return true;
         :	}
    0.00 :	  6744e2:       5b                      pop    %rbx
    0.00 :	  6744e3:       41 5c                   pop    %r12
    0.00 :	  6744e5:       41 5d                   pop    %r13
    0.00 :	  6744e7:       41 5e                   pop    %r14
    0.00 :	  6744e9:       c9                      leaveq 
    0.00 :	  6744ea:       c3                      retq   
    0.00 :	  6744eb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744f0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744f4:       f7 d0                   not    %eax
    0.00 :	  6744f6:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744f9:       84 c0                   test   %al,%al
    0.00 :	  6744fb:       74 c3                   je     6744c0 <StartBufferIO+0x80>
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
    0.00 :	  6744fd:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674501:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674505:       e8 96 ae 01 00          callq  68f3a0 <LWLockRelease>
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  67450a:       5b                      pop    %rbx
    0.00 :	  67450b:       41 5c                   pop    %r12
    0.00 :	  67450d:       41 5d                   pop    %r13
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67450f:       31 c0                   xor    %eax,%eax
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  674511:       41 5e                   pop    %r14
    0.00 :	  674513:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674710 <LockBuffer>:
         :	/*
         :	 * Acquire or release the content_lock for the buffer.
         :	 */
         :	void
         :	LockBuffer(Buffer buffer, int mode)
         :	{
    0.00 :	  674710:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
  100.00 :	  674711:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674714:       53                      push   %rbx
    0.00 :	  674715:       89 f3                   mov    %esi,%ebx
    0.00 :	  674717:       48 83 ec 08             sub    $0x8,%rsp
         :	        volatile BufferDesc *buf;
         :
         :	        Assert(BufferIsValid(buffer));
         :	        if (BufferIsLocal(buffer))
    0.00 :	  67471b:       85 ff                   test   %edi,%edi
    0.00 :	  67471d:       78 31                   js     674750 <LockBuffer+0x40>
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
    0.00 :	  67471f:       48 63 c7                movslq %edi,%rax
    0.00 :	  674722:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  674726:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67472a:       48 03 05 cf b3 54 00    add    0x54b3cf(%rip),%rax        # bbfb00 <BufferDescriptors>
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
    0.00 :	  674731:       85 f6                   test   %esi,%esi
    0.00 :	  674733:       74 2b                   je     674760 <LockBuffer+0x50>
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
    0.00 :	  674735:       83 fe 01                cmp    $0x1,%esi
    0.00 :	  674738:       74 36                   je     674770 <LockBuffer+0x60>
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
    0.00 :	  67473a:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  67473d:       75 45                   jne    674784 <LockBuffer+0x74>
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67473f:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674743:       48 83 c4 08             add    $0x8,%rsp
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  674747:       31 f6                   xor    %esi,%esi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674749:       5b                      pop    %rbx
    0.00 :	  67474a:       c9                      leaveq 
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67474b:       e9 a0 b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674750:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674754:       5b                      pop    %rbx
    0.00 :	  674755:       c9                      leaveq 
    0.00 :	  674756:       c3                      retq   
    0.00 :	  674757:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  67475e:       00 00 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
    0.00 :	  674760:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674764:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674768:       5b                      pop    %rbx
    0.00 :	  674769:       c9                      leaveq 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
    0.00 :	  67476a:       e9 31 ac 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67476f:       90                      nop
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674770:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674774:       48 83 c4 08             add    $0x8,%rsp
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674778:       be 01 00 00 00          mov    $0x1,%esi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  67477d:       5b                      pop    %rbx
    0.00 :	  67477e:       c9                      leaveq 
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  67477f:       e9 6c b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
    0.00 :	  674784:       ba 15 a0 8a 00          mov    $0x8aa015,%edx
    0.00 :	  674789:       be cb 0b 00 00          mov    $0xbcb,%esi
    0.00 :	  67478e:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674793:       e8 88 6c 10 00          callq  77b420 <elog_start>
    0.00 :	  674798:       89 da                   mov    %ebx,%edx
    0.00 :	  67479a:       be f8 9d 8a 00          mov    $0x8a9df8,%esi
    0.00 :	  67479f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6747a4:       31 c0                   xor    %eax,%eax
    0.00 :	  6747a6:       e8 85 6a 10 00          callq  77b230 <elog_finish>
    0.00 :	  6747ab:       e8 20 4d df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:468
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006766a0 <ReadBuffer>:
         :	 * ReadBuffer -- a shorthand for ReadBufferExtended, for reading from main
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
    0.00 :	  6766a0:       55                      push   %rbp
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
    0.00 :	  6766a1:       89 f2                   mov    %esi,%edx
    0.00 :	  6766a3:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6766a6:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6766a8:       31 f6                   xor    %esi,%esi
         :	 * ReadBuffer -- a shorthand for ReadBufferExtended, for reading from main
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
    0.00 :	  6766aa:       48 89 e5                mov    %rsp,%rbp
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
         :	}
    0.00 :	  6766ad:       c9                      leaveq 
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:468
  100.00 :	  6766ae:       e9 bd fe ff ff          jmpq   676570 <ReadBufferExtended>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1288
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679df0 <FileRead>:
         :	#endif
         :	}
         :
         :	int
         :	FileRead(File file, char *buffer, int amount)
         :	{
    0.00 :	  679df0:       55                      push   %rbp
    0.00 :	  679df1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679df4:       41 56                   push   %r14
    0.00 :	  679df6:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679df9:       41 55                   push   %r13
    0.00 :	  679dfb:       41 89 d5                mov    %edx,%r13d
    0.00 :	  679dfe:       41 54                   push   %r12
    0.00 :	  679e00:       41 89 fc                mov    %edi,%r12d
    0.00 :	  679e03:       53                      push   %rbx
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e04:       e8 17 fb ff ff          callq  679920 <FileAccess>
         :	        if (returnCode < 0)
    0.00 :	  679e09:       85 c0                   test   %eax,%eax
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e0b:       89 c3                   mov    %eax,%ebx
         :	        if (returnCode < 0)
    0.00 :	  679e0d:       78 47                   js     679e56 <FileRead+0x66>
    0.00 :	  679e0f:       4d 63 e4                movslq %r12d,%r12
    0.00 :	  679e12:       4d 63 ed                movslq %r13d,%r13
    0.00 :	  679e15:       49 c1 e4 06             shl    $0x6,%r12
    0.00 :	  679e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e20:       48 8b 05 71 33 50 00    mov    0x503371(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e27:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  679e2a:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679e2d:       42 8b 3c 20             mov    (%rax,%r12,1),%edi
    0.00 :	  679e31:       e8 da f7 de ff          callq  469610 <read@plt>
         :
         :	        if (returnCode >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1288
  100.00 :	  679e36:       85 c0                   test   %eax,%eax
         :	        returnCode = FileAccess(file);
         :	        if (returnCode < 0)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e38:       89 c3                   mov    %eax,%ebx
         :
         :	        if (returnCode >= 0)
    0.00 :	  679e3a:       79 2c                   jns    679e68 <FileRead+0x78>
         :	                                _dosmaperr(error);
         :	                                break;
         :	                }
         :	#endif
         :	                /* OK to retry if interrupted */
         :	                if (errno == EINTR)
    0.00 :	  679e3c:       e8 7f fe de ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  679e41:       83 38 04                cmpl   $0x4,(%rax)
    0.00 :	  679e44:       74 da                   je     679e20 <FileRead+0x30>
         :	                        goto retry;
         :
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
    0.00 :	  679e46:       48 8b 05 4b 33 50 00    mov    0x50334b(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e4d:       4a c7 44 20 20 ff ff    movq   $0xffffffffffffffff,0x20(%rax,%r12,1)
    0.00 :	  679e54:       ff ff 
         :	        }
         :
         :	        return returnCode;
         :	}
    0.00 :	  679e56:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e58:       5b                      pop    %rbx
    0.00 :	  679e59:       41 5c                   pop    %r12
    0.00 :	  679e5b:       41 5d                   pop    %r13
    0.00 :	  679e5d:       41 5e                   pop    %r14
    0.00 :	  679e5f:       c9                      leaveq 
    0.00 :	  679e60:       c3                      retq   
    0.00 :	  679e61:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
         :
         :	        if (returnCode >= 0)
         :	                VfdCache[file].seekPos += returnCode;
    0.00 :	  679e68:       4c 03 25 29 33 50 00    add    0x503329(%rip),%r12        # b7d198 <VfdCache>
    0.00 :	  679e6f:       48 98                   cltq   
    0.00 :	  679e71:       49 01 44 24 20          add    %rax,0x20(%r12)
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
         :	        }
         :
         :	        return returnCode;
         :	}
    0.00 :	  679e76:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e78:       5b                      pop    %rbx
    0.00 :	  679e79:       41 5c                   pop    %r12
    0.00 :	  679e7b:       41 5d                   pop    %r13
    0.00 :	  679e7d:       41 5e                   pop    %r14
    0.00 :	  679e7f:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694660 <CheckForSerializableConflictOut>:
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
    0.00 :	  694660:       55                      push   %rbp
    0.00 :	  694661:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694664:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  694668:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  69466c:       49 89 d4                mov    %rdx,%r12
    0.00 :	  69466f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
  100.00 :	  694673:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694677:       48 8b 15 42 a0 4e 00    mov    0x4ea042(%rip),%rdx        # b7e6c0 <MySerializableXact>
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
    0.00 :	  69467e:       41 89 fd                mov    %edi,%r13d
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694681:       48 85 d2                test   %rdx,%rdx
    0.00 :	  694684:       74 13                   je     694699 <CheckForSerializableConflictOut+0x39>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694686:       49 8b 00                mov    (%r8),%rax
    0.00 :	  694689:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  69468f:       74 1f                   je     6946b0 <CheckForSerializableConflictOut+0x50>
    0.00 :	  694691:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694697:       74 17                   je     6946b0 <CheckForSerializableConflictOut+0x50>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  694699:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  69469d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6946a1:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6946a5:       c9                      leaveq 
    0.00 :	  6946a6:       c3                      retq   
    0.00 :	  6946a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6946ae:       00 00 
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  6946b0:       8b 52 7c                mov    0x7c(%rdx),%edx
    0.00 :	  6946b3:       84 d2                   test   %dl,%dl
    0.00 :	  6946b5:       78 69                   js     694720 <CheckForSerializableConflictOut+0xc0>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  6946b7:       81 7e 40 0f 27 00 00    cmpl   $0x270f,0x40(%rsi)
    0.00 :	  6946be:       76 d9                   jbe    694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946c0:       48 8b 46 30             mov    0x30(%rsi),%rax
    0.00 :	  6946c4:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6946c8:       74 cf                   je     694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946ca:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  6946ce:       66 90                   xchg   %ax,%ax
    0.00 :	  6946d0:       74 c7                   je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        if (!SerializationNeededForRead(relation, snapshot))
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
    0.00 :	  6946d2:       83 e2 08                and    $0x8,%edx
    0.00 :	  6946d5:       0f 85 55 02 00 00       jne    694930 <CheckForSerializableConflictOut+0x2d0>
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946db:       8b 35 77 e0 4d 00       mov    0x4de077(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  6946e1:       89 ca                   mov    %ecx,%edx
    0.00 :	  6946e3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6946e6:       e8 35 04 11 00          callq  7a4b20 <HeapTupleSatisfiesVacuum>
         :	        switch (htsvResult)
    0.00 :	  6946eb:       83 f8 04                cmp    $0x4,%eax
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946ee:       89 c3                   mov    %eax,%ebx
         :	        switch (htsvResult)
    0.00 :	  6946f0:       76 3e                   jbe    694730 <CheckForSerializableConflictOut+0xd0>
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  6946f2:       ba e0 da 8a 00          mov    $0x8adae0,%edx
    0.00 :	  6946f7:       be 56 0f 00 00          mov    $0xf56,%esi
    0.00 :	  6946fc:       bf d3 d1 8a 00          mov    $0x8ad1d3,%edi
    0.00 :	  694701:       e8 1a 6d 0e 00          callq  77b420 <elog_start>
    0.00 :	  694706:       89 da                   mov    %ebx,%edx
    0.00 :	  694708:       be a0 d8 8a 00          mov    $0x8ad8a0,%esi
    0.00 :	  69470d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694712:       31 c0                   xor    %eax,%eax
    0.00 :	  694714:       e8 17 6b 0e 00          callq  77b230 <elog_finish>
    0.00 :	  694719:       e8 b2 4d dd ff          callq  4694d0 <abort@plt>
    0.00 :	  69471e:       66 90                   xchg   %ax,%ax
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694720:       31 ff                   xor    %edi,%edi
    0.00 :	  694722:       e8 c9 e1 ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694727:       e9 6d ff ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69472c:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
    0.00 :	  694730:       89 c0                   mov    %eax,%eax
    0.00 :	  694732:       ff 24 c5 c0 d9 8a 00    jmpq   *0x8ad9c0(,%rax,8)
    0.00 :	  694739:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        if (visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_RECENTLY_DEAD:
         :	                        if (!visible)
    0.00 :	  694740:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694743:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  694748:       0f 84 4b ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  69474e:       49 8b 7c 24 10          mov    0x10(%r12),%rdi
    0.00 :	  694753:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  694757:       89 d0                   mov    %edx,%eax
    0.00 :	  694759:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  69475e:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  694763:       0f 84 f7 00 00 00       je     694860 <CheckForSerializableConflictOut+0x200>
    0.00 :	  694769:       8b 5f 04                mov    0x4(%rdi),%ebx
         :
         :	        /*
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  69476c:       e8 0f c4 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  694771:       39 d8                   cmp    %ebx,%eax
    0.00 :	  694773:       0f 84 20 ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694779:       89 df                   mov    %ebx,%edi
    0.00 :	  69477b:       e8 70 21 e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  694780:       8b 35 d2 df 4d 00       mov    0x4ddfd2(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694786:       89 c7                   mov    %eax,%edi
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694788:       89 c3                   mov    %eax,%ebx
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  69478a:       e8 51 b8 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  69478f:       84 c0                   test   %al,%al
    0.00 :	  694791:       0f 85 02 ff ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  694797:       e8 e4 c3 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  69479c:       39 c3                   cmp    %eax,%ebx
    0.00 :	  69479e:       66 90                   xchg   %ax,%ax
    0.00 :	  6947a0:       0f 84 f3 fe ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947a6:       48 8b 3d 53 92 4e 00    mov    0x4e9253(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6947ad:       31 f6                   xor    %esi,%esi
         :	                return;
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
    0.00 :	  6947af:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947b2:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6947b9:       e8 32 b3 ff ff          callq  68faf0 <LWLockAcquire>
         :	        sxid = (SERIALIZABLEXID *)
    0.00 :	  6947be:       48 8b 3d 93 9f 4e 00    mov    0x4e9f93(%rip),%rdi        # b7e758 <SerializableXidHash>
    0.00 :	  6947c5:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6947c9:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6947cb:       31 d2                   xor    %edx,%edx
    0.00 :	  6947cd:       e8 ce fe 0e 00          callq  7846a0 <hash_search>
         :	                hash_search(SerializableXidHash, &sxidtag, HASH_FIND, NULL);
         :	        if (!sxid)
    0.00 :	  6947d2:       48 85 c0                test   %rax,%rax
    0.00 :	  6947d5:       0f 84 c5 01 00 00       je     6949a0 <CheckForSerializableConflictOut+0x340>
         :
         :	                /* It's not serializable or otherwise not important. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :	        sxact = sxid->myXact;
    0.00 :	  6947db:       4c 8b 60 08             mov    0x8(%rax),%r12
         :	        Assert(TransactionIdEquals(sxact->topXid, xid));
         :	        if (sxact == MySerializableXact || SxactIsDoomed(sxact))
    0.00 :	  6947df:       48 8b 0d da 9e 4e 00    mov    0x4e9eda(%rip),%rcx        # b7e6c0 <MySerializableXact>
    0.00 :	  6947e6:       49 39 cc                cmp    %rcx,%r12
    0.00 :	  6947e9:       0f 84 b1 00 00 00       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6947ef:       41 8b 54 24 7c          mov    0x7c(%r12),%edx
    0.00 :	  6947f4:       f6 c2 08                test   $0x8,%dl
    0.00 :	  6947f7:       0f 85 a3 00 00 00       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	         * We have a conflict out to a transaction which has a conflict out to a
         :	         * summarized transaction.  That summarized transaction must have
         :	         * committed first, and we can't tell when it committed in relation to our
         :	         * snapshot acquisition, so something needs to be canceled.
         :	         */
         :	        if (SxactHasSummaryConflictOut(sxact))
    0.00 :	  6947fd:       f6 c6 04                test   $0x4,%dh
    0.00 :	  694800:       0f 84 b2 00 00 00       je     6948b8 <CheckForSerializableConflictOut+0x258>
         :	        {
         :	                if (!SxactIsPrepared(sxact))
    0.00 :	  694806:       f6 c2 02                test   $0x2,%dl
    0.00 :	  694809:       0f 85 39 03 00 00       jne    694b48 <CheckForSerializableConflictOut+0x4e8>
         :	                {
         :	                        sxact->flags |= SXACT_FLAG_DOOMED;
    0.00 :	  69480f:       83 ca 08                or     $0x8,%edx
    0.00 :	  694812:       41 89 54 24 7c          mov    %edx,0x7c(%r12)
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694817:       48 8b 3d e2 91 4e 00    mov    0x4e91e2(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  69481e:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694825:       e8 76 ab ff ff          callq  68f3a0 <LWLockRelease>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  69482a:       e9 6a fe ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69482f:       90                      nop
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
         :	        {
         :	                case HEAPTUPLE_LIVE:
         :	                        if (visible)
    0.00 :	  694830:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694833:       0f 85 60 fe ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694839:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  69483e:       bb 02 00 00 00          mov    $0x2,%ebx
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694843:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694847:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  69484c:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694851:       0f 84 15 ff ff ff       je     69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  694857:       8b 1a                   mov    (%rdx),%ebx
    0.00 :	  694859:       e9 0e ff ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  69485e:       66 90                   xchg   %ax,%ax
         :	                        if (!visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  694860:       84 d2                   test   %dl,%dl
    0.00 :	  694862:       0f 88 01 ff ff ff       js     694769 <CheckForSerializableConflictOut+0x109>
    0.00 :	  694868:       e8 b3 28 e0 ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  69486d:       89 c3                   mov    %eax,%ebx
    0.00 :	  69486f:       90                      nop
    0.00 :	  694870:       e9 f7 fe ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
         :	                /* This write was already in our snapshot; no conflict. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :
         :	        if (RWConflictExists(MySerializableXact, sxact))
    0.00 :	  694875:       48 8b 3d 44 9e 4e 00    mov    0x4e9e44(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69487c:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  69487f:       e8 1c cc ff ff          callq  6914a0 <RWConflictExists>
    0.00 :	  694884:       84 c0                   test   %al,%al
    0.00 :	  694886:       75 18                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
    0.00 :	  694888:       48 8b 3d 31 9e 4e 00    mov    0x4e9e31(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69488f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  694892:       e8 79 c5 ff ff          callq  690e10 <FlagRWConflict>
    0.00 :	  694897:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  69489e:       00 00 
         :	        LWLockRelease(SerializableXactHashLock);
    0.00 :	  6948a0:       48 8b 3d 59 91 4e 00    mov    0x4e9159(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6948a7:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6948ae:       e8 ed aa ff ff          callq  68f3a0 <LWLockRelease>
    0.00 :	  6948b3:       e9 e1 fd ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  6948b8:       f6 41 7c 20             testb  $0x20,0x7c(%rcx)
    0.00 :	  6948bc:       74 10                   je     6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  6948be:       89 d0                   mov    %edx,%eax
    0.00 :	  6948c0:       25 01 04 00 00          and    $0x401,%eax
    0.00 :	  6948c5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  6948c8:       0f 84 e9 01 00 00       je     694ab7 <CheckForSerializableConflictOut+0x457>
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948ce:       e8 3d 2d 11 00          callq  7a7610 <GetTransactionSnapshot>
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948d3:       8b 70 08                mov    0x8(%rax),%esi
    0.00 :	  6948d6:       89 df                   mov    %ebx,%edi
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948d8:       49 89 c5                mov    %rax,%r13
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948db:       e8 00 b7 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6948e0:       84 c0                   test   %al,%al
    0.00 :	  6948e2:       75 bc                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
    0.00 :	  6948e4:       41 8b 75 0c             mov    0xc(%r13),%esi
    0.00 :	  6948e8:       89 df                   mov    %ebx,%edi
    0.00 :	  6948ea:       e8 81 b7 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  6948ef:       84 c0                   test   %al,%al
    0.00 :	  6948f1:       75 82                   jne    694875 <CheckForSerializableConflictOut+0x215>
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  6948f3:       41 8b 75 18             mov    0x18(%r13),%esi
    0.00 :	  6948f7:       85 f6                   test   %esi,%esi
    0.00 :	  6948f9:       74 a5                   je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	        {
         :	                if (xid == snap->xip[i])
    0.00 :	  6948fb:       49 8b 45 10             mov    0x10(%r13),%rax
    0.00 :	  6948ff:       31 d2                   xor    %edx,%edx
    0.00 :	  694901:       3b 18                   cmp    (%rax),%ebx
    0.00 :	  694903:       48 89 c1                mov    %rax,%rcx
    0.00 :	  694906:       75 17                   jne    69491f <CheckForSerializableConflictOut+0x2bf>
    0.00 :	  694908:       e9 68 ff ff ff          jmpq   694875 <CheckForSerializableConflictOut+0x215>
    0.00 :	  69490d:       0f 1f 00                nopl   (%rax)
    0.00 :	  694910:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  694913:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  694917:       39 c3                   cmp    %eax,%ebx
    0.00 :	  694919:       0f 84 56 ff ff ff       je     694875 <CheckForSerializableConflictOut+0x215>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  69491f:       83 c2 01                add    $0x1,%edx
    0.00 :	  694922:       39 f2                   cmp    %esi,%edx
    0.00 :	  694924:       72 ea                   jb     694910 <CheckForSerializableConflictOut+0x2b0>
    0.00 :	  694926:       e9 75 ff ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  69492b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
         :	        {
         :	                ereport(ERROR,
    0.00 :	  694930:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694933:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694938:       ba 30 0f 00 00          mov    $0xf30,%edx
    0.00 :	  69493d:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694942:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694947:       e8 74 61 0e 00          callq  77aac0 <errstart>
    0.00 :	  69494c:       84 c0                   test   %al,%al
    0.00 :	  69494e:       0f 84 c5 fd ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694954:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694959:       31 c0                   xor    %eax,%eax
    0.00 :	  69495b:       e8 40 73 0e 00          callq  77bca0 <errhint>
    0.00 :	  694960:       bf 48 d8 8a 00          mov    $0x8ad848,%edi
    0.00 :	  694965:       41 89 c5                mov    %eax,%r13d
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        ereport(ERROR,
    0.00 :	  694968:       31 c0                   xor    %eax,%eax
    0.00 :	  69496a:       e8 11 7a 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  69496f:       89 c3                   mov    %eax,%ebx
    0.00 :	  694971:       bf 48 d3 8a 00          mov    $0x8ad348,%edi
    0.00 :	  694976:       31 c0                   xor    %eax,%eax
    0.00 :	  694978:       e8 23 7f 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69497d:       bf 04 00 00 01          mov    $0x1000004,%edi
    0.00 :	  694982:       41 89 c4                mov    %eax,%r12d
    0.00 :	  694985:       e8 c6 83 0e 00          callq  77cd50 <errcode>
    0.00 :	  69498a:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  69498d:       89 c7                   mov    %eax,%edi
    0.00 :	  69498f:       89 da                   mov    %ebx,%edx
    0.00 :	  694991:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694994:       31 c0                   xor    %eax,%eax
    0.00 :	  694996:       e8 45 5c 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69499b:       e9 79 fd ff ff          jmpq   694719 <CheckForSerializableConflictOut+0xb9>
         :	        SerCommitSeqNo val;
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
    0.00 :	  6949a0:       48 8b 3d 59 90 4e 00    mov    0x4e9059(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6949a7:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6949ac:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
    0.00 :	  6949b3:       e8 38 b1 ff ff          callq  68faf0 <LWLockAcquire>
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949b8:       48 8b 05 79 9d 4e 00    mov    0x4e9d79(%rip),%rax        # b7e738 <oldSerXidControl>
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949bf:       48 8b 3d 3a 90 4e 00    mov    0x4e903a(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949c6:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949ca:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
         :	        tailXid = oldSerXidControl->tailXid;
    0.00 :	  6949d1:       44 8b 68 08             mov    0x8(%rax),%r13d
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949d5:       e8 c6 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :
         :	        if (!TransactionIdIsValid(headXid))
    0.00 :	  6949da:       45 85 e4                test   %r12d,%r12d
    0.00 :	  6949dd:       0f 84 bd fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return 0;
         :
         :	        Assert(TransactionIdIsValid(tailXid));
         :
         :	        if (TransactionIdPrecedes(xid, tailXid)
    0.00 :	  6949e3:       44 89 ee                mov    %r13d,%esi
    0.00 :	  6949e6:       89 df                   mov    %ebx,%edi
    0.00 :	  6949e8:       e8 f3 b5 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6949ed:       84 c0                   test   %al,%al
    0.00 :	  6949ef:       0f 85 ab fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6949f5:       44 89 e6                mov    %r12d,%esi
    0.00 :	  6949f8:       89 df                   mov    %ebx,%edi
    0.00 :	  6949fa:       e8 41 b6 e2 ff          callq  4c0040 <TransactionIdFollows>
    0.00 :	  6949ff:       84 c0                   test   %al,%al
    0.00 :	  694a01:       0f 85 99 fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
    0.00 :	  694a07:       89 de                   mov    %ebx,%esi
    0.00 :	  694a09:       89 da                   mov    %ebx,%edx
    0.00 :	  694a0b:       bf e0 e6 b7 00          mov    $0xb7e6e0,%edi
    0.00 :	  694a10:       c1 ee 0a                shr    $0xa,%esi
    0.00 :	  694a13:       81 e6 ff ff 1f 00       and    $0x1fffff,%esi
    0.00 :	  694a19:       e8 02 1a e3 ff          callq  4c6420 <SimpleLruReadPage_ReadOnly>
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a1e:       48 8b 15 bb 9c 4e 00    mov    0x4e9cbb(%rip),%rdx        # b7e6e0 <OldSerXidSlruCtlData>
    0.00 :	  694a25:       48 98                   cltq   
    0.00 :	  694a27:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  694a2a:       81 e1 ff 03 00 00       and    $0x3ff,%ecx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a30:       48 8b 3d c9 8f 4e 00    mov    0x4e8fc9(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a37:       48 8b 52 10             mov    0x10(%rdx),%rdx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a3b:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a42:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  694a46:       4c 8b 24 c8             mov    (%rax,%rcx,8),%r12
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a4a:       e8 51 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :	                 * got pushed out to SLRU storage for "old committed" transactions.
         :	                 */
         :	                SerCommitSeqNo conflictCommitSeqNo;
         :
         :	                conflictCommitSeqNo = OldSerXidGetMinConflictCommitSeqNo(xid);
         :	                if (conflictCommitSeqNo != 0)
    0.00 :	  694a4f:       4d 85 e4                test   %r12,%r12
    0.00 :	  694a52:       0f 84 48 fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                {
         :	                        if (conflictCommitSeqNo != InvalidSerCommitSeqNo
    0.00 :	  694a58:       49 83 fc ff             cmp    $0xffffffffffffffff,%r12
    0.00 :	  694a5c:       74 77                   je     694ad5 <CheckForSerializableConflictOut+0x475>
    0.00 :	  694a5e:       48 8b 05 5b 9c 4e 00    mov    0x4e9c5b(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694a65:       f6 40 7c 20             testb  $0x20,0x7c(%rax)
    0.00 :	  694a69:       74 06                   je     694a71 <CheckForSerializableConflictOut+0x411>
    0.00 :	  694a6b:       4c 39 60 18             cmp    %r12,0x18(%rax)
    0.00 :	  694a6f:       72 6b                   jb     694adc <CheckForSerializableConflictOut+0x47c>
         :	                                && (!SxactIsReadOnly(MySerializableXact)
         :	                                        || conflictCommitSeqNo
         :	                                        <= MySerializableXact->SeqNo.lastCommitBeforeSnapshot))
         :	                                ereport(ERROR,
    0.00 :	  694a71:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694a74:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694a79:       ba 89 0f 00 00          mov    $0xf89,%edx
    0.00 :	  694a7e:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694a83:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694a88:       e8 33 60 0e 00          callq  77aac0 <errstart>
    0.00 :	  694a8d:       84 c0                   test   %al,%al
    0.00 :	  694a8f:       0f 84 84 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694a95:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694a9a:       31 c0                   xor    %eax,%eax
    0.00 :	  694a9c:       e8 ff 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694aa1:       89 de                   mov    %ebx,%esi
    0.00 :	  694aa3:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694aa6:       bf e0 d8 8a 00          mov    $0x8ad8e0,%edi
    0.00 :	  694aab:       31 c0                   xor    %eax,%eax
    0.00 :	  694aad:       e8 ce 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694ab2:       e9 b8 fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  694ab7:       83 e2 10                and    $0x10,%edx
    0.00 :	  694aba:       0f 84 e0 fd ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ac0:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  694ac5:       48 39 41 18             cmp    %rax,0x18(%rcx)
    0.00 :	  694ac9:       0f 83 ff fd ff ff       jae    6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  694acf:       90                      nop
    0.00 :	  694ad0:       e9 cb fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ad5:       48 8b 05 e4 9b 4e 00    mov    0x4e9be4(%rip),%rax        # b7e6c0 <MySerializableXact>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on conflict out to old pivot %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        if (SxactHasSummaryConflictIn(MySerializableXact)
    0.00 :	  694adc:       f6 40 7d 02             testb  $0x2,0x7d(%rax)
    0.00 :	  694ae0:       75 0d                   jne    694aef <CheckForSerializableConflictOut+0x48f>
    0.00 :	  694ae2:       48 8d 78 30             lea    0x30(%rax),%rdi
    0.00 :	  694ae6:       e8 25 ea fe ff          callq  683510 <SHMQueueEmpty>
    0.00 :	  694aeb:       84 c0                   test   %al,%al
    0.00 :	  694aed:       75 46                   jne    694b35 <CheckForSerializableConflictOut+0x4d5>
         :	                                || !SHMQueueEmpty(&MySerializableXact->inConflicts))
         :	                                ereport(ERROR,
    0.00 :	  694aef:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694af2:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694af7:       ba 91 0f 00 00          mov    $0xf91,%edx
    0.00 :	  694afc:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b01:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b06:       e8 b5 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b0b:       84 c0                   test   %al,%al
    0.00 :	  694b0d:       0f 84 06 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b13:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b18:       31 c0                   xor    %eax,%eax
    0.00 :	  694b1a:       e8 81 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b1f:       89 de                   mov    %ebx,%esi
    0.00 :	  694b21:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b24:       bf 18 d9 8a 00          mov    $0x8ad918,%edi
    0.00 :	  694b29:       31 c0                   xor    %eax,%eax
    0.00 :	  694b2b:       e8 50 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694b30:       e9 3a fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on identification as a pivot, with conflict out to old committed transaction %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        MySerializableXact->flags |= SXACT_FLAG_SUMMARY_CONFLICT_OUT;
    0.00 :	  694b35:       48 8b 05 84 9b 4e 00    mov    0x4e9b84(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694b3c:       81 48 7c 00 04 00 00    orl    $0x400,0x7c(%rax)
    0.00 :	  694b43:       e9 58 fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694b48:       48 8b 3d b1 8e 4e 00    mov    0x4e8eb1(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  694b4f:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694b56:       e8 45 a8 ff ff          callq  68f3a0 <LWLockRelease>
         :	                        ereport(ERROR,
    0.00 :	  694b5b:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694b5e:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694b63:       ba b8 0f 00 00          mov    $0xfb8,%edx
    0.00 :	  694b68:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b6d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b72:       e8 49 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b77:       84 c0                   test   %al,%al
    0.00 :	  694b79:       0f 84 9a fb ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b7f:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b84:       31 c0                   xor    %eax,%eax
    0.00 :	  694b86:       e8 15 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b8b:       bf 80 d9 8a 00          mov    $0x8ad980,%edi
    0.00 :	  694b90:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b93:       e9 d0 fd ff ff          jmpq   694968 <CheckForSerializableConflictOut+0x308>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694ed0 <PageIsVerified>:
         :	 * treat such a page as empty and without free space.  Eventually, VACUUM
         :	 * will clean up such a page and make it usable.
         :	 */
         :	bool
         :	PageIsVerified(Page page, BlockNumber blkno)
         :	{
    0.00 :	  694ed0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
  100.00 :	  694ed1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694ed4:       41 55                   push   %r13
    0.00 :	  694ed6:       41 54                   push   %r12
    0.00 :	  694ed8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  694edb:       53                      push   %rbx
    0.00 :	  694edc:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  694edf:       48 83 ec 08             sub    $0x8,%rsp
         :	        uint16          checksum = 0;
         :
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
    0.00 :	  694ee3:       66 83 7f 0e 00          cmpw   $0x0,0xe(%rdi)
    0.00 :	  694ee8:       75 56                   jne    694f40 <PageIsVerified+0x70>
    0.00 :	  694eea:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694eed:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694ef0:       31 c9                   xor    %ecx,%ecx
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694ef2:       31 c0                   xor    %eax,%eax
    0.00 :	  694ef4:       eb 16                   jmp    694f0c <PageIsVerified+0x3c>
    0.00 :	  694ef6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  694efd:       00 00 00 
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f00:       48 83 c0 01             add    $0x1,%rax
         :	        }
         :
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
    0.00 :	  694f04:       48 3d 00 20 00 00       cmp    $0x2000,%rax
    0.00 :	  694f0a:       74 24                   je     694f30 <PageIsVerified+0x60>
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f0c:       80 3c 03 00             cmpb   $0x0,(%rbx,%rax,1)
    0.00 :	  694f10:       74 ee                   je     694f00 <PageIsVerified+0x30>
         :
         :	        /*
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
    0.00 :	  694f12:       84 c9                   test   %cl,%cl
    0.00 :	  694f14:       0f 85 86 00 00 00       jne    694fa0 <PageIsVerified+0xd0>
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f1a:       31 c0                   xor    %eax,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f1c:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  694f20:       5b                      pop    %rbx
    0.00 :	  694f21:       41 5c                   pop    %r12
    0.00 :	  694f23:       41 5d                   pop    %r13
    0.00 :	  694f25:       c9                      leaveq 
    0.00 :	  694f26:       c3                      retq   
    0.00 :	  694f27:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  694f2e:       00 00 
    0.00 :	  694f30:       48 83 c4 08             add    $0x8,%rsp
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f34:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f39:       5b                      pop    %rbx
    0.00 :	  694f3a:       41 5c                   pop    %r12
    0.00 :	  694f3c:       41 5d                   pop    %r13
    0.00 :	  694f3e:       c9                      leaveq 
    0.00 :	  694f3f:       c3                      retq   
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
    0.00 :	  694f40:       e8 7b 80 e3 ff          callq  4ccfc0 <DataChecksumsEnabled>
    0.00 :	  694f45:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694f48:       31 c9                   xor    %ecx,%ecx
    0.00 :	  694f4a:       84 c0                   test   %al,%al
    0.00 :	  694f4c:       0f 85 96 00 00 00       jne    694fe8 <PageIsVerified+0x118>
         :	                 * The following checks don't prove the header is correct, only that
         :	                 * it looks sane enough to allow into the buffer pool. Later usage of
         :	                 * the block can still reveal problems, which is why we offer the
         :	                 * checksum option.
         :	                 */
         :	                if ((p->pd_flags & ~PD_VALID_FLAG_BITS) == 0 &&
    0.00 :	  694f52:       0f b7 43 0a             movzwl 0xa(%rbx),%eax
    0.00 :	  694f56:       a9 f8 ff 00 00          test   $0xfff8,%eax
    0.00 :	  694f5b:       0f 85 7f 00 00 00       jne    694fe0 <PageIsVerified+0x110>
    0.00 :	  694f61:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  694f65:       66 39 43 0c             cmp    %ax,0xc(%rbx)
    0.00 :	  694f69:       77 75                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f6b:       0f b7 53 10             movzwl 0x10(%rbx),%edx
    0.00 :	  694f6f:       66 39 d0                cmp    %dx,%ax
    0.00 :	  694f72:       77 6c                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f74:       66 81 fa 00 20          cmp    $0x2000,%dx
    0.00 :	  694f79:       77 65                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f7b:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  694f7e:       48 8d 42 07             lea    0x7(%rdx),%rax
    0.00 :	  694f82:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  694f86:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  694f89:       75 55                   jne    694fe0 <PageIsVerified+0x110>
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694f8b:       84 c9                   test   %cl,%cl
    0.00 :	  694f8d:       74 a1                   je     694f30 <PageIsVerified+0x60>
    0.00 :	  694f8f:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  694f95:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  694f9a:       e9 53 ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
    0.00 :	  694f9f:       90                      nop
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  694fa0:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694fa3:       b9 e4 de 8a 00          mov    $0x8adee4,%ecx
    0.00 :	  694fa8:       ba 91 00 00 00          mov    $0x91,%edx
    0.00 :	  694fad:       be 33 dc 8a 00          mov    $0x8adc33,%esi
    0.00 :	  694fb2:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  694fb7:       e8 04 5b 0e 00          callq  77aac0 <errstart>
    0.00 :	  694fbc:       84 c0                   test   %al,%al
    0.00 :	  694fbe:       75 42                   jne    695002 <PageIsVerified+0x132>
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694fc0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  694fc3:       0f 84 51 ff ff ff       je     694f1a <PageIsVerified+0x4a>
    0.00 :	  694fc9:       80 3d b8 97 4e 00 00    cmpb   $0x0,0x4e97b8(%rip)        # b7e788 <ignore_checksum_failure>
    0.00 :	  694fd0:       0f 95 c0                setne  %al
    0.00 :	  694fd3:       e9 44 ff ff ff          jmpq   694f1c <PageIsVerified+0x4c>
    0.00 :	  694fd8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  694fdf:       00 
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694fe0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694fe3:       e9 0a ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694fe8:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694feb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  694fee:       e8 7d 13 00 00          callq  696370 <pg_checksum_page>
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ff3:       66 3b 43 08             cmp    0x8(%rbx),%ax
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694ff7:       41 89 c5                mov    %eax,%r13d
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ffa:       0f 95 c1                setne  %cl
    0.00 :	  694ffd:       e9 50 ff ff ff          jmpq   694f52 <PageIsVerified+0x82>
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  695002:       0f b7 53 08             movzwl 0x8(%rbx),%edx
    0.00 :	  695006:       41 0f b7 f5             movzwl %r13w,%esi
    0.00 :	  69500a:       bf 78 dc 8a 00          mov    $0x8adc78,%edi
    0.00 :	  69500f:       31 c0                   xor    %eax,%eax
    0.00 :	  695011:       e8 8a 78 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  695016:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  69501b:       89 c6                   mov    %eax,%esi
    0.00 :	  69501d:       31 c0                   xor    %eax,%eax
    0.00 :	  69501f:       e8 bc 55 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  695024:       eb 9a                   jmp    694fc0 <PageIsVerified+0xf0>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/datum.c:119
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006cff70 <datumCopy>:
         :	 * If the datatype is pass-by-reference, memory is obtained with palloc().
         :	 *-------------------------------------------------------------------------
         :	 */
         :	Datum
         :	datumCopy(Datum value, bool typByVal, int typLen)
         :	{
    0.00 :	  6cff70:       55                      push   %rbp
         :	        Datum           res;
         :
         :	        if (typByVal)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/datum.c:119
  100.00 :	  6cff71:       48 89 f8                mov    %rdi,%rax
         :	 * If the datatype is pass-by-reference, memory is obtained with palloc().
         :	 *-------------------------------------------------------------------------
         :	 */
         :	Datum
         :	datumCopy(Datum value, bool typByVal, int typLen)
         :	{
    0.00 :	  6cff74:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6cff77:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6cff7b:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6cff7f:       49 89 fd                mov    %rdi,%r13
    0.00 :	  6cff82:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6cff86:       48 83 ec 20             sub    $0x20,%rsp
         :	        Datum           res;
         :
         :	        if (typByVal)
    0.00 :	  6cff8a:       40 84 f6                test   %sil,%sil
    0.00 :	  6cff8d:       75 2d                   jne    6cffbc <datumCopy+0x4c>
         :	        else
         :	        {
         :	                Size            realSize;
         :	                char       *s;
         :
         :	                if (DatumGetPointer(value) == NULL)
    0.00 :	  6cff8f:       31 c0                   xor    %eax,%eax
    0.00 :	  6cff91:       48 85 ff                test   %rdi,%rdi
    0.00 :	  6cff94:       74 26                   je     6cffbc <datumCopy+0x4c>
         :	                        return PointerGetDatum(NULL);
         :
         :	                realSize = datumGetSize(value, typByVal, typLen);
    0.00 :	  6cff96:       31 f6                   xor    %esi,%esi
    0.00 :	  6cff98:       e8 23 fe ff ff          callq  6cfdc0 <datumGetSize>
    0.00 :	  6cff9d:       48 89 c3                mov    %rax,%rbx
         :
         :	                s = (char *) palloc(realSize);
    0.00 :	  6cffa0:       48 89 c7                mov    %rax,%rdi
    0.00 :	  6cffa3:       e8 a8 8d 0c 00          callq  798d50 <palloc>
         :	                memcpy(s, DatumGetPointer(value), realSize);
    0.00 :	  6cffa8:       48 89 da                mov    %rbx,%rdx
         :	                if (DatumGetPointer(value) == NULL)
         :	                        return PointerGetDatum(NULL);
         :
         :	                realSize = datumGetSize(value, typByVal, typLen);
         :
         :	                s = (char *) palloc(realSize);
    0.00 :	  6cffab:       49 89 c4                mov    %rax,%r12
         :	                memcpy(s, DatumGetPointer(value), realSize);
    0.00 :	  6cffae:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  6cffb1:       48 89 c7                mov    %rax,%rdi
    0.00 :	  6cffb4:       e8 37 9c d9 ff          callq  469bf0 <memcpy@plt>
         :	                res = PointerGetDatum(s);
    0.00 :	  6cffb9:       4c 89 e0                mov    %r12,%rax
         :	        }
         :	        return res;
         :	}
    0.00 :	  6cffbc:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6cffc0:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6cffc4:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6cffc8:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2571
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006d3aa0 <float84mul>:
         :	        PG_RETURN_FLOAT8(result);
         :	}
         :
         :	Datum
         :	float84mul(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6d3aa0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2571
  100.00 :	  6d3aa1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6d3aa4:       53                      push   %rbx
    0.00 :	  6d3aa5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6d3aa8:       48 83 ec 28             sub    $0x28,%rsp
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
    0.00 :	  6d3aac:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6d3ab0:       e8 1b 9f 0a 00          callq  77d9d0 <DatumGetFloat8>
    0.00 :	  6d3ab5:       f2 0f 11 45 e0          movsd  %xmm0,-0x20(%rbp)
         :	        float4          arg2 = PG_GETARG_FLOAT4(1);
    0.00 :	  6d3aba:       48 8b 7b 28             mov    0x28(%rbx),%rdi
    0.00 :	  6d3abe:       e8 ed 9e 0a 00          callq  77d9b0 <DatumGetFloat4>
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
    0.00 :	  6d3ac3:       0f 28 c8                movaps %xmm0,%xmm1
         :
         :	Datum
         :	float84mul(PG_FUNCTION_ARGS)
         :	{
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
         :	        float4          arg2 = PG_GETARG_FLOAT4(1);
    0.00 :	  6d3ac6:       f3 0f 11 45 ec          movss  %xmm0,-0x14(%rbp)
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
    0.00 :	  6d3acb:       0f 14 c9                unpcklps %xmm1,%xmm1
    0.00 :	  6d3ace:       0f 5a c9                cvtps2pd %xmm1,%xmm1
    0.00 :	  6d3ad1:       f2 0f 59 4d e0          mulsd  -0x20(%rbp),%xmm1
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
    0.00 :	  6d3ad6:       66 0f 28 c1             movapd %xmm1,%xmm0
    0.00 :	  6d3ada:       f2 0f 11 4d d0          movsd  %xmm1,-0x30(%rbp)
    0.00 :	  6d3adf:       e8 0c 60 d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3ae4:       85 c0                   test   %eax,%eax
    0.00 :	  6d3ae6:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3aeb:       75 4b                   jne    6d3b38 <float84mul+0x98>
    0.00 :	  6d3aed:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  6d3af1:       66 0f 2e c8             ucomisd %xmm0,%xmm1
    0.00 :	  6d3af5:       75 2f                   jne    6d3b26 <float84mul+0x86>
    0.00 :	  6d3af7:       7a 2d                   jp     6d3b26 <float84mul+0x86>
    0.00 :	  6d3af9:       f2 0f 10 55 e0          movsd  -0x20(%rbp),%xmm2
    0.00 :	  6d3afe:       66 0f 2e d0             ucomisd %xmm0,%xmm2
    0.00 :	  6d3b02:       7a 06                   jp     6d3b0a <float84mul+0x6a>
    0.00 :	  6d3b04:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  6d3b08:       74 1c                   je     6d3b26 <float84mul+0x86>
    0.00 :	  6d3b0a:       f3 0f 10 45 ec          movss  -0x14(%rbp),%xmm0
    0.00 :	  6d3b0f:       0f 2e 05 ca e7 0d 00    ucomiss 0xde7ca(%rip),%xmm0        # 7b22e0 <__func__.14992+0xd7>
    0.00 :	  6d3b16:       0f 8a 87 00 00 00       jp     6d3ba3 <float84mul+0x103>
    0.00 :	  6d3b1c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  6d3b20:       0f 85 7d 00 00 00       jne    6d3ba3 <float84mul+0x103>
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
         :	}
    0.00 :	  6d3b26:       48 83 c4 28             add    $0x28,%rsp
         :
         :	        result = arg1 * arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3b2a:       66 0f 28 c1             movapd %xmm1,%xmm0
         :	}
    0.00 :	  6d3b2e:       5b                      pop    %rbx
    0.00 :	  6d3b2f:       c9                      leaveq 
         :
         :	        result = arg1 * arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3b30:       e9 8b 9e 0a 00          jmpq   77d9c0 <Float8GetDatum>
    0.00 :	  6d3b35:       0f 1f 00                nopl   (%rax)
         :	        float4          arg2 = PG_GETARG_FLOAT4(1);
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
    0.00 :	  6d3b38:       f2 0f 10 45 e0          movsd  -0x20(%rbp),%xmm0
    0.00 :	  6d3b3d:       e8 ae 5f d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3b42:       85 c0                   test   %eax,%eax
    0.00 :	  6d3b44:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3b49:       75 a2                   jne    6d3aed <float84mul+0x4d>
    0.00 :	  6d3b4b:       f3 0f 10 45 ec          movss  -0x14(%rbp),%xmm0
    0.00 :	  6d3b50:       e8 db 5b d9 ff          callq  469730 <__isinff@plt>
    0.00 :	  6d3b55:       85 c0                   test   %eax,%eax
    0.00 :	  6d3b57:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3b5c:       75 8f                   jne    6d3aed <float84mul+0x4d>
    0.00 :	  6d3b5e:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d3b61:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d3b66:       b9 cf b8 8b 00          mov    $0x8bb8cf,%ecx
    0.00 :	  6d3b6b:       ba 13 0a 00 00          mov    $0xa13,%edx
    0.00 :	  6d3b70:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d3b75:       e8 46 6f 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d3b7a:       84 c0                   test   %al,%al
    0.00 :	  6d3b7c:       bf 2f b4 8b 00          mov    $0x8bb42f,%edi
    0.00 :	  6d3b81:       74 40                   je     6d3bc3 <float84mul+0x123>
    0.00 :	  6d3b83:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3b85:       e8 16 8d 0a 00          callq  77c8a0 <errmsg>
    0.00 :	  6d3b8a:       bf 82 00 00 03          mov    $0x3000082,%edi
    0.00 :	  6d3b8f:       89 c3                   mov    %eax,%ebx
    0.00 :	  6d3b91:       e8 ba 91 0a 00          callq  77cd50 <errcode>
    0.00 :	  6d3b96:       89 de                   mov    %ebx,%esi
    0.00 :	  6d3b98:       89 c7                   mov    %eax,%edi
    0.00 :	  6d3b9a:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3b9c:       e8 3f 6a 0a 00          callq  77a5e0 <errfinish>
    0.00 :	  6d3ba1:       eb 20                   jmp    6d3bc3 <float84mul+0x123>
    0.00 :	  6d3ba3:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d3ba6:       b9 cf b8 8b 00          mov    $0x8bb8cf,%ecx
    0.00 :	  6d3bab:       ba 13 0a 00 00          mov    $0xa13,%edx
    0.00 :	  6d3bb0:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d3bb5:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d3bba:       e8 01 6f 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d3bbf:       84 c0                   test   %al,%al
    0.00 :	  6d3bc1:       75 05                   jne    6d3bc8 <float84mul+0x128>
    0.00 :	  6d3bc3:       e8 08 59 d9 ff          callq  4694d0 <abort@plt>
    0.00 :	  6d3bc8:       bf 4c b4 8b 00          mov    $0x8bb44c,%edi
    0.00 :	  6d3bcd:       eb b4                   jmp    6d3b83 <float84mul+0xe3>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1321
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077e030 <FunctionCall2Coll>:
         :	        return result;
         :	}
         :
         :	Datum
         :	FunctionCall2Coll(FmgrInfo *flinfo, Oid collation, Datum arg1, Datum arg2)
         :	{
    0.00 :	  77e030:       55                      push   %rbp
    0.00 :	  77e031:       48 89 f8                mov    %rdi,%rax
    0.00 :	  77e034:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  77e037:       48 81 ec b0 03 00 00    sub    $0x3b0,%rsp
         :	         * utils/sort/tuplesort.c!
         :	         */
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 2, collation, NULL, NULL);
    0.00 :	  77e03e:       48 89 bd 50 fc ff ff    mov    %rdi,-0x3b0(%rbp)
    0.00 :	  77e045:       48 c7 85 58 fc ff ff    movq   $0x0,-0x3a8(%rbp)
    0.00 :	  77e04c:       00 00 00 00 
         :	        fcinfo.arg[0] = arg1;
         :	        fcinfo.arg[1] = arg2;
         :	        fcinfo.argnull[0] = false;
         :	        fcinfo.argnull[1] = false;
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e050:       48 8d bd 50 fc ff ff    lea    -0x3b0(%rbp),%rdi
         :	         * utils/sort/tuplesort.c!
         :	         */
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 2, collation, NULL, NULL);
    0.00 :	  77e057:       48 c7 85 60 fc ff ff    movq   $0x0,-0x3a0(%rbp)
    0.00 :	  77e05e:       00 00 00 00 
    0.00 :	  77e062:       89 b5 68 fc ff ff       mov    %esi,-0x398(%rbp)
    0.00 :	  77e068:       c6 85 6c fc ff ff 00    movb   $0x0,-0x394(%rbp)
    0.00 :	  77e06f:       66 c7 85 6e fc ff ff    movw   $0x2,-0x392(%rbp)
    0.00 :	  77e076:       02 00 
         :
         :	        fcinfo.arg[0] = arg1;
    0.00 :	  77e078:       48 89 95 70 fc ff ff    mov    %rdx,-0x390(%rbp)
         :	        fcinfo.arg[1] = arg2;
    0.00 :	  77e07f:       48 89 8d 78 fc ff ff    mov    %rcx,-0x388(%rbp)
         :	        fcinfo.argnull[0] = false;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1321
  100.00 :	  77e086:       c6 45 90 00             movb   $0x0,-0x70(%rbp)
         :	        fcinfo.argnull[1] = false;
    0.00 :	  77e08a:       c6 45 91 00             movb   $0x0,-0x6f(%rbp)
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e08e:       ff 10                   callq  *(%rax)
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
    0.00 :	  77e090:       80 bd 6c fc ff ff 00    cmpb   $0x0,-0x394(%rbp)
    0.00 :	  77e097:       75 02                   jne    77e09b <FunctionCall2Coll+0x6b>
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
         :
         :	        return result;
         :	}
    0.00 :	  77e099:       c9                      leaveq 
    0.00 :	  77e09a:       c3                      retq   
         :
         :	        result = FunctionCallInvoke(&fcinfo);
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
    0.00 :	  77e09b:       ba 40 52 8d 00          mov    $0x8d5240,%edx
    0.00 :	  77e0a0:       be 30 05 00 00          mov    $0x530,%esi
    0.00 :	  77e0a5:       bf b3 47 8d 00          mov    $0x8d47b3,%edi
    0.00 :	  77e0aa:       e8 71 d3 ff ff          callq  77b420 <elog_start>
    0.00 :	  77e0af:       48 8b 85 50 fc ff ff    mov    -0x3b0(%rbp),%rax
    0.00 :	  77e0b6:       be 97 4c 8d 00          mov    $0x8d4c97,%esi
    0.00 :	  77e0bb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  77e0c0:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	  77e0c3:       31 c0                   xor    %eax,%eax
    0.00 :	  77e0c5:       e8 66 d1 ff ff          callq  77b230 <elog_finish>
    0.00 :	  77e0ca:       e8 01 b4 ce ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007832f0 <CHashSearch>:
         :	 * from the data in the hash table and return true.  If not, it will return
         :	 * false.
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
    0.00 :	  7832f0:       55                      push   %rbp
    0.00 :	  7832f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7832f4:       41 54                   push   %r12
    0.00 :	  7832f6:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7832f9:       53                      push   %rbx
    0.00 :	  7832fa:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7832fd:       48 83 ec 20             sub    $0x20,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  783301:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  783305:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783308:       e8 43 d0 d0 ff          callq  490350 <hash_any>
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  78330d:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  783311:       8b 7b 10                mov    0x10(%rbx),%edi
    0.00 :	  783314:       21 c7                   and    %eax,%edi
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783316:       89 fe                   mov    %edi,%esi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783318:       d3 ef                   shr    %cl,%edi
    0.00 :	  78331a:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  78331e:       89 fa                   mov    %edi,%edx
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783320:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  783324:       48 03 73 20             add    0x20(%rbx),%rsi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783328:       d3 ea                   shr    %cl,%edx
    0.00 :	  78332a:       48 8b 0d 17 a6 3f 00    mov    0x3fa617(%rip),%rcx        # b7d948 <MyProc>
    0.00 :	  783331:       01 fa                   add    %edi,%edx
    0.00 :	  783333:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	  783337:       48 03 53 28             add    0x28(%rbx),%rdx
    0.00 :	  78333b:       48 89 91 e8 02 00 00    mov    %rdx,0x2e8(%rcx)
         :	        pg_memory_barrier();
    0.00 :	  783342:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  783347:       4c 8d 45 d0             lea    -0x30(%rbp),%r8
    0.00 :	  78334b:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  78334e:       89 c2                   mov    %eax,%edx
    0.00 :	  783350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  783353:       e8 48 f9 ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  783358:       80 7d e8 00             cmpb   $0x0,-0x18(%rbp)
    0.00 :	  78335c:       75 32                   jne    783390 <CHashSearch+0xa0>
         :	                           CHashNodeGetItem(scan.target_node) + table->desc.key_size,
         :	                           table->desc.element_size - table->desc.key_size);
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  78335e:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
  100.00 :	  783363:       48 8b 05 de a5 3f 00    mov    0x3fa5de(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  78336a:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  783371:       00 00 00 00 
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
         :	        if (!scan.found)
    0.00 :	  783375:       0f b6 45 e8             movzbl -0x18(%rbp),%eax
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
    0.00 :	  783379:       48 83 43 40 01          addq   $0x1,0x40(%rbx)
         :	        if (!scan.found)
    0.00 :	  78337e:       84 c0                   test   %al,%al
    0.00 :	  783380:       75 05                   jne    783387 <CHashSearch+0x97>
         :	                CHashTableIncrementStatistic(table, CHS_Search_Failed);
    0.00 :	  783382:       48 83 43 48 01          addq   $0x1,0x48(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  783387:       48 83 c4 20             add    $0x20,%rsp
    0.00 :	  78338b:       5b                      pop    %rbx
    0.00 :	  78338c:       41 5c                   pop    %r12
    0.00 :	  78338e:       c9                      leaveq 
    0.00 :	  78338f:       c3                      retq   
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
         :	        if (scan.found)
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  783390:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  783394:       0f b7 53 0c             movzwl 0xc(%rbx),%edx
    0.00 :	  783398:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  78339b:       29 c2                   sub    %eax,%edx
    0.00 :	  78339d:       49 8d 3c 34             lea    (%r12,%rsi,1),%rdi
    0.00 :	  7833a1:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7833a5:       48 03 75 e0             add    -0x20(%rbp),%rsi
    0.00 :	  7833a9:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7833ac:       e8 3f 68 ce ff          callq  469bf0 <memcpy@plt>
    0.00 :	  7833b1:       eb ab                   jmp    78335e <CHashSearch+0x6e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798110 <AllocSetAlloc>:
         :	 *              MAXALIGN_DOWN(SIZE_MAX) - ALLOC_BLOCKHDRSZ - ALLOC_CHUNKHDRSZ
         :	 * All callers use a much-lower limit.
         :	 */
         :	static void *
         :	AllocSetAlloc(MemoryContext context, Size size)
         :	{
    0.00 :	  798110:       55                      push   %rbp
    0.00 :	  798111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798114:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  798118:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  79811c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79811f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  798123:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  798127:       49 89 f6                mov    %rsi,%r14
    0.00 :	  79812a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  79812e:       48 83 ec 30             sub    $0x30,%rsp
         :
         :	        /*
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
    0.00 :	  798132:       48 39 b7 b0 00 00 00    cmp    %rsi,0xb0(%rdi)
    0.00 :	  798139:       72 6d                   jb     7981a8 <AllocSetAlloc+0x98>
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  79813b:       31 f6                   xor    %esi,%esi
    0.00 :	  79813d:       49 83 fe 08             cmp    $0x8,%r14
    0.00 :	  798141:       77 3d                   ja     798180 <AllocSetAlloc+0x70>
         :	         * corresponding free list to see if there is a free chunk we could reuse.
         :	         * If one is found, remove it from the free list, make it again a member
         :	         * of the alloc set and return its data address.
         :	         */
         :	        fidx = AllocSetFreeIndex(size);
         :	        chunk = set->freelist[fidx];
    0.00 :	  798143:       48 63 c6                movslq %esi,%rax
    0.00 :	  798146:       48 8d 48 08             lea    0x8(%rax),%rcx
    0.00 :	  79814a:       49 8b 14 cc             mov    (%r12,%rcx,8),%rdx
         :	        if (chunk != NULL)
    0.00 :	  79814e:       48 85 d2                test   %rdx,%rdx
    0.00 :	  798151:       0f 84 c9 00 00 00       je     798220 <AllocSetAlloc+0x110>
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
    0.00 :	  798157:       48 8b 02                mov    (%rdx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
  100.00 :	  79815a:       49 89 04 cc             mov    %rax,(%r12,%rcx,8)
         :	                /* fill the allocated space with junk */
         :	                randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	                AllocAllocInfo(set, chunk);
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  79815e:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
         :
         :	                chunk->aset = (void *) set;
    0.00 :	  798162:       4c 89 22                mov    %r12,(%rdx)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798165:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  798169:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  79816d:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  798171:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  798175:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  798179:       c9                      leaveq 
    0.00 :	  79817a:       c3                      retq   
    0.00 :	  79817b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798180:       49 8d 46 ff             lea    -0x1(%r14),%rax
    0.00 :	  798184:       48 89 c2                mov    %rax,%rdx
    0.00 :	  798187:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  79818b:       89 d0                   mov    %edx,%eax
    0.00 :	  79818d:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798190:       85 c0                   test   %eax,%eax
    0.00 :	  798192:       74 7c                   je     798210 <AllocSetAlloc+0x100>
    0.00 :	  798194:       89 c0                   mov    %eax,%eax
    0.00 :	  798196:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  79819d:       8d 70 08                lea    0x8(%rax),%esi
    0.00 :	  7981a0:       eb a1                   jmp    798143 <AllocSetAlloc+0x33>
    0.00 :	  7981a2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
    0.00 :	  7981a8:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  7981ac:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  7981b0:       4c 8d 6b 30             lea    0x30(%rbx),%r13
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981b4:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7981b7:       e8 74 14 cd ff          callq  469630 <malloc@plt>
         :	                if (block == NULL)
    0.00 :	  7981bc:       48 85 c0                test   %rax,%rax
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981bf:       48 89 c2                mov    %rax,%rdx
         :	                if (block == NULL)
    0.00 :	  7981c2:       0f 84 2e 02 00 00       je     7983f6 <AllocSetAlloc+0x2e6>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
    0.00 :	  7981c8:       4c 89 20                mov    %r12,(%rax)
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
    0.00 :	  7981cb:       48 8d 72 20             lea    0x20(%rdx),%rsi
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981cf:       4a 8d 04 28             lea    (%rax,%r13,1),%rax
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
    0.00 :	  7981d3:       4c 89 62 20             mov    %r12,0x20(%rdx)
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981d7:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	  7981db:       48 89 42 10             mov    %rax,0x10(%rdx)
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
         :	                chunk->size = chunk_size;
    0.00 :	  7981df:       48 89 5e 08             mov    %rbx,0x8(%rsi)
         :
         :	                /*
         :	                 * Stick the new block underneath the active allocation block, so that
         :	                 * we don't lose the use of the space remaining therein.
         :	                 */
         :	                if (set->blocks != NULL)
    0.00 :	  7981e3:       49 8b 4c 24 38          mov    0x38(%r12),%rcx
    0.00 :	  7981e8:       48 85 c9                test   %rcx,%rcx
    0.00 :	  7981eb:       0f 84 cf 01 00 00       je     7983c0 <AllocSetAlloc+0x2b0>
         :	                {
         :	                        block->next = set->blocks->next;
    0.00 :	  7981f1:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  7981f5:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                        set->blocks->next = block;
    0.00 :	  7981f9:       48 89 51 08             mov    %rdx,0x8(%rcx)
         :	                 * if any, NOACCESS.
         :	                 */
         :	                VALGRIND_MAKE_MEM_NOACCESS((char *) chunk + ALLOC_CHUNK_PUBLIC,
         :	                                                 chunk_size + ALLOC_CHUNKHDRSZ - ALLOC_CHUNK_PUBLIC);
         :
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  7981fd:       48 8d 46 10             lea    0x10(%rsi),%rax
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798201:       e9 5f ff ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  798206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  79820d:       00 00 00 
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798210:       89 d0                   mov    %edx,%eax
    0.00 :	  798212:       0f b6 b0 80 1e 8e 00    movzbl 0x8e1e80(%rax),%esi
    0.00 :	  798219:       e9 25 ff ff ff          jmpq   798143 <AllocSetAlloc+0x33>
    0.00 :	  79821e:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798220:       4d 8b 4c 24 38          mov    0x38(%r12),%r9
         :	        }
         :
         :	        /*
         :	         * Choose the actual chunk size to allocate.
         :	         */
         :	        chunk_size = (1 << ALLOC_MINBITS) << fidx;
    0.00 :	  798225:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  79822a:       89 f1                   mov    %esi,%ecx
    0.00 :	  79822c:       d3 e0                   shl    %cl,%eax
    0.00 :	  79822e:       4c 63 f8                movslq %eax,%r15
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798231:       4d 85 c9                test   %r9,%r9
    0.00 :	  798234:       0f 84 ce 00 00 00       je     798308 <AllocSetAlloc+0x1f8>
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  79823a:       49 8b 79 10             mov    0x10(%r9),%rdi
    0.00 :	  79823e:       4d 8b 41 18             mov    0x18(%r9),%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798242:       49 8d 47 10             lea    0x10(%r15),%rax
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  798246:       49 29 f8                sub    %rdi,%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798249:       49 39 c0                cmp    %rax,%r8
    0.00 :	  79824c:       0f 83 52 01 00 00       jae    7983a4 <AllocSetAlloc+0x294>
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  798252:       49 83 f8 17             cmp    $0x17,%r8
    0.00 :	  798256:       0f 86 ac 00 00 00       jbe    798308 <AllocSetAlloc+0x1f8>
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  79825c:       41 ba 01 00 00 00       mov    $0x1,%r10d
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798262:       49 c7 c3 f0 ff ff ff    mov    $0xfffffffffffffff0,%r11
    0.00 :	  798269:       eb 5d                   jmp    7982c8 <AllocSetAlloc+0x1b8>
    0.00 :	  79826b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798270:       89 c0                   mov    %eax,%eax
    0.00 :	  798272:       0f b6 88 80 1e 8e 00    movzbl 0x8e1e80(%rax),%ecx
    0.00 :	  798279:       4c 89 d0                mov    %r10,%rax
    0.00 :	  79827c:       8d 51 08                lea    0x8(%rcx),%edx
    0.00 :	  79827f:       83 c1 0b                add    $0xb,%ecx
    0.00 :	  798282:       48 d3 e0                shl    %cl,%rax
         :	                                /*
         :	                                 * In most cases, we'll get back the index of the next larger
         :	                                 * freelist than the one we need to put this chunk on.  The
         :	                                 * exception is when availchunk is exactly a power of 2.
         :	                                 */
         :	                                if (availchunk != ((Size) 1 << (a_fidx + ALLOC_MINBITS)))
    0.00 :	  798285:       48 39 c6                cmp    %rax,%rsi
    0.00 :	  798288:       74 0c                   je     798296 <AllocSetAlloc+0x186>
         :	                                {
         :	                                        a_fidx--;
    0.00 :	  79828a:       83 ea 01                sub    $0x1,%edx
         :	                                        Assert(a_fidx >= 0);
         :	                                        availchunk = ((Size) 1 << (a_fidx + ALLOC_MINBITS));
    0.00 :	  79828d:       4c 89 d6                mov    %r10,%rsi
    0.00 :	  798290:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  798293:       48 d3 e6                shl    %cl,%rsi
         :	                                chunk = (AllocChunk) (block->freeptr);
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798296:       48 8d 44 37 10          lea    0x10(%rdi,%rsi,1),%rax
    0.00 :	  79829b:       49 89 41 10             mov    %rax,0x10(%r9)
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  79829f:       4c 89 d8                mov    %r11,%rax
         :
         :	                                chunk->size = availchunk;
    0.00 :	  7982a2:       48 89 77 08             mov    %rsi,0x8(%rdi)
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  7982a6:       48 29 f0                sub    %rsi,%rax
    0.00 :	  7982a9:       49 01 c0                add    %rax,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982ac:       48 63 c2                movslq %edx,%rax
    0.00 :	  7982af:       48 83 c0 08             add    $0x8,%rax
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982b3:       49 83 f8 17             cmp    $0x17,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982b7:       49 8b 14 c4             mov    (%r12,%rax,8),%rdx
    0.00 :	  7982bb:       48 89 17                mov    %rdx,(%rdi)
         :	                                set->freelist[a_fidx] = chunk;
    0.00 :	  7982be:       49 89 3c c4             mov    %rdi,(%r12,%rax,8)
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982c2:       76 44                   jbe    798308 <AllocSetAlloc+0x1f8>
    0.00 :	  7982c4:       49 8b 79 10             mov    0x10(%r9),%rdi
         :	                        {
         :	                                Size            availchunk = availspace - ALLOC_CHUNKHDRSZ;
    0.00 :	  7982c8:       49 8d 70 f0             lea    -0x10(%r8),%rsi
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  7982cc:       31 d2                   xor    %edx,%edx
    0.00 :	  7982ce:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  7982d3:       48 83 fe 08             cmp    $0x8,%rsi
    0.00 :	  7982d7:       76 ac                   jbe    798285 <AllocSetAlloc+0x175>
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  7982d9:       49 8d 40 ef             lea    -0x11(%r8),%rax
    0.00 :	  7982dd:       48 89 c2                mov    %rax,%rdx
    0.00 :	  7982e0:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  7982e4:       89 d0                   mov    %edx,%eax
    0.00 :	  7982e6:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7982e9:       85 c0                   test   %eax,%eax
    0.00 :	  7982eb:       75 83                   jne    798270 <AllocSetAlloc+0x160>
    0.00 :	  7982ed:       89 d0                   mov    %edx,%eax
    0.00 :	  7982ef:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
    0.00 :	  7982f6:       4c 89 d0                mov    %r10,%rax
    0.00 :	  7982f9:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  7982fc:       48 d3 e0                shl    %cl,%rax
    0.00 :	  7982ff:       eb 84                   jmp    798285 <AllocSetAlloc+0x175>
    0.00 :	  798301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
    0.00 :	  798308:       49 8b 94 24 a8 00 00    mov    0xa8(%r12),%rdx
    0.00 :	  79830f:       00 
         :	                set->nextBlockSize <<= 1;
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798310:       49 8b 8c 24 a0 00 00    mov    0xa0(%r12),%rcx
    0.00 :	  798317:       00 
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  798318:       48 8d 04 12             lea    (%rdx,%rdx,1),%rax
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  79831c:       48 39 c8                cmp    %rcx,%rax
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  79831f:       49 89 84 24 a8 00 00    mov    %rax,0xa8(%r12)
    0.00 :	  798326:       00 
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798327:       76 08                   jbe    798331 <AllocSetAlloc+0x221>
         :	                        set->nextBlockSize = set->maxBlockSize;
    0.00 :	  798329:       49 89 8c 24 a8 00 00    mov    %rcx,0xa8(%r12)
    0.00 :	  798330:       00 
         :
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  798331:       4d 8d 6f 30             lea    0x30(%r15),%r13
         :	                while (blksize < required_size)
    0.00 :	  798335:       4c 39 ea                cmp    %r13,%rdx
    0.00 :	  798338:       73 0e                   jae    798348 <AllocSetAlloc+0x238>
    0.00 :	  79833a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        blksize <<= 1;
    0.00 :	  798340:       48 01 d2                add    %rdx,%rdx
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                while (blksize < required_size)
    0.00 :	  798343:       49 39 d5                cmp    %rdx,%r13
    0.00 :	  798346:       77 f8                   ja     798340 <AllocSetAlloc+0x230>
    0.00 :	  798348:       48 89 d3                mov    %rdx,%rbx
    0.00 :	  79834b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                while (block == NULL && blksize > 1024 * 1024)
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  798350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  798353:       e8 d8 12 cd ff          callq  469630 <malloc@plt>
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798358:       48 85 c0                test   %rax,%rax
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  79835b:       48 89 c2                mov    %rax,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  79835e:       74 78                   je     7983d8 <AllocSetAlloc+0x2c8>
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798360:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798363:       49 89 d1                mov    %rdx,%r9
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798366:       0f 84 10 01 00 00       je     79847c <AllocSetAlloc+0x36c>
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  79836c:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
    0.00 :	  798370:       4c 89 22                mov    %r12,(%rdx)
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  798373:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                block->endptr = ((char *) block) + blksize;
    0.00 :	  798377:       48 8d 04 1a             lea    (%rdx,%rbx,1),%rax
    0.00 :	  79837b:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  79837f:       49 83 bc 24 b8 00 00    cmpq   $0x0,0xb8(%r12)
    0.00 :	  798386:       00 00 
    0.00 :	  798388:       0f 84 99 00 00 00       je     798427 <AllocSetAlloc+0x317>
         :
         :	                /* Mark unallocated space NOACCESS. */
         :	                VALGRIND_MAKE_MEM_NOACCESS(block->freeptr,
         :	                                                                   blksize - ALLOC_BLOCKHDRSZ);
         :
         :	                block->next = set->blocks;
    0.00 :	  79838e:       49 8b 44 24 38          mov    0x38(%r12),%rax
    0.00 :	  798393:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                set->blocks = block;
    0.00 :	  798397:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  79839c:       49 8d 47 10             lea    0x10(%r15),%rax
    0.00 :	  7983a0:       48 8b 7a 10             mov    0x10(%rdx),%rdi
         :	        chunk = (AllocChunk) (block->freeptr);
         :
         :	        /* Prepare to initialize the chunk header. */
         :	        VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
    0.00 :	  7983a4:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  7983a8:       49 89 41 10             mov    %rax,0x10(%r9)
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
    0.00 :	  7983ac:       4c 89 27                mov    %r12,(%rdi)
         :	        /* fill the allocated space with junk */
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
    0.00 :	  7983af:       48 8d 47 10             lea    0x10(%rdi),%rax
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
         :	        chunk->size = chunk_size;
    0.00 :	  7983b3:       4c 89 7f 08             mov    %r15,0x8(%rdi)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  7983b7:       e9 a9 fd ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  7983bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        block->next = set->blocks->next;
         :	                        set->blocks->next = block;
         :	                }
         :	                else
         :	                {
         :	                        block->next = NULL;
    0.00 :	  7983c0:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  7983c7:       00 
         :	                        set->blocks = block;
    0.00 :	  7983c8:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  7983cd:       e9 2b fe ff ff          jmpq   7981fd <AllocSetAlloc+0xed>
    0.00 :	  7983d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  7983d8:       48 81 fb 00 00 10 00    cmp    $0x100000,%rbx
    0.00 :	  7983df:       0f 86 7b ff ff ff       jbe    798360 <AllocSetAlloc+0x250>
         :	                {
         :	                        blksize >>= 1;
    0.00 :	  7983e5:       48 d1 eb                shr    %rbx
         :	                        if (blksize < required_size)
    0.00 :	  7983e8:       49 39 dd                cmp    %rbx,%r13
    0.00 :	  7983eb:       0f 86 5f ff ff ff       jbe    798350 <AllocSetAlloc+0x240>
    0.00 :	  7983f1:       e9 6a ff ff ff          jmpq   798360 <AllocSetAlloc+0x250>
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  7983f6:       48 8b 3d 6b 24 42 00    mov    0x42246b(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  7983fd:       e8 3e 07 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798402:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  798405:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  79840a:       ba a7 02 00 00          mov    $0x2a7,%edx
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  79840f:       be 6d 1d 8e 00          mov    $0x8e1d6d,%esi
    0.00 :	  798414:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798419:       e8 a2 26 fe ff          callq  77aac0 <errstart>
    0.00 :	  79841e:       84 c0                   test   %al,%al
    0.00 :	  798420:       75 20                   jne    798442 <AllocSetAlloc+0x332>
    0.00 :	  798422:       e8 a9 10 cd ff          callq  4694d0 <abort@plt>
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  798427:       49 39 9c 24 98 00 00    cmp    %rbx,0x98(%r12)
    0.00 :	  79842e:       00 
    0.00 :	  79842f:       0f 85 59 ff ff ff       jne    79838e <AllocSetAlloc+0x27e>
         :	                        set->keeper = block;
    0.00 :	  798435:       49 89 94 24 b8 00 00    mov    %rdx,0xb8(%r12)
    0.00 :	  79843c:       00 
    0.00 :	  79843d:       e9 4c ff ff ff          jmpq   79838e <AllocSetAlloc+0x27e>
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  798442:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  798445:       bf a8 1d 8e 00          mov    $0x8e1da8,%edi
    0.00 :	  79844a:       31 c0                   xor    %eax,%eax
    0.00 :	  79844c:       e8 df 40 fe ff          callq  77c530 <errdetail>
    0.00 :	  798451:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  798456:       41 89 c4                mov    %eax,%r12d
    0.00 :	  798459:       31 c0                   xor    %eax,%eax
    0.00 :	  79845b:       e8 40 44 fe ff          callq  77c8a0 <errmsg>
    0.00 :	  798460:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  798465:       89 c3                   mov    %eax,%ebx
    0.00 :	  798467:       e8 e4 48 fe ff          callq  77cd50 <errcode>
    0.00 :	  79846c:       44 89 e2                mov    %r12d,%edx
    0.00 :	  79846f:       89 c7                   mov    %eax,%edi
    0.00 :	  798471:       89 de                   mov    %ebx,%esi
    0.00 :	  798473:       31 c0                   xor    %eax,%eax
    0.00 :	  798475:       e8 66 21 fe ff          callq  77a5e0 <errfinish>
    0.00 :	  79847a:       eb a6                   jmp    798422 <AllocSetAlloc+0x312>
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  79847c:       48 8b 3d e5 23 42 00    mov    0x4223e5(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  798483:       e8 b8 06 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798488:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  79848b:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  798490:       ba 69 03 00 00          mov    $0x369,%edx
    0.00 :	  798495:       e9 75 ff ff ff          jmpq   79840f <AllocSetAlloc+0x2ff>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007989b0 <MemoryContextReset>:
         :	 * The type-specific reset routine handles the context itself, but we
         :	 * have to do the recursion for the children.
         :	 */
         :	void
         :	MemoryContextReset(MemoryContext context)
         :	{
    0.00 :	  7989b0:       55                      push   %rbp
    0.00 :	  7989b1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7989b4:       53                      push   %rbx
    0.00 :	  7989b5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7989b8:       48 83 ec 08             sub    $0x8,%rsp
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        /* save a function call in common case where there are no children */
         :	        if (context->firstchild != NULL)
    0.00 :	  7989bc:       48 83 7f 18 00          cmpq   $0x0,0x18(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
  100.00 :	  7989c1:       74 05                   je     7989c8 <MemoryContextReset+0x18>
         :	                MemoryContextResetChildren(context);
    0.00 :	  7989c3:       e8 b8 ff ff ff          callq  798980 <MemoryContextResetChildren>
         :
         :	        /* Nothing to do if no pallocs since startup or last reset */
         :	        if (!context->isReset)
    0.00 :	  7989c8:       80 7b 30 00             cmpb   $0x0,0x30(%rbx)
    0.00 :	  7989cc:       75 0e                   jne    7989dc <MemoryContextReset+0x2c>
         :	        {
         :	                (*context->methods->reset) (context);
    0.00 :	  7989ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7989d2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7989d5:       ff 50 20                callq  *0x20(%rax)
         :	                context->isReset = true;
    0.00 :	  7989d8:       c6 43 30 01             movb   $0x1,0x30(%rbx)
         :	                VALGRIND_DESTROY_MEMPOOL(context);
         :	                VALGRIND_CREATE_MEMPOOL(context, 0, false);
         :	        }
         :	}
    0.00 :	  7989dc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7989e0:       5b                      pop    %rbx
    0.00 :	  7989e1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:224
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798be0 <MemoryContextDeleteChildren>:
         :	 *              Delete all the descendants of the named context and release all
         :	 *              space allocated therein.  The named context itself is not touched.
         :	 */
         :	void
         :	MemoryContextDeleteChildren(MemoryContext context)
         :	{
    0.00 :	  798be0:       55                      push   %rbp
    0.00 :	  798be1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798be4:       53                      push   %rbx
    0.00 :	  798be5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  798be8:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * MemoryContextDelete will delink the child from me, so just iterate as
         :	         * long as there is a child.
         :	         */
         :	        while (context->firstchild != NULL)
    0.00 :	  798bec:       48 8b 7f 18             mov    0x18(%rdi),%rdi
  100.00 :	  798bf0:       48 85 ff                test   %rdi,%rdi
    0.00 :	  798bf3:       74 11                   je     798c06 <MemoryContextDeleteChildren+0x26>
    0.00 :	  798bf5:       0f 1f 00                nopl   (%rax)
         :	                MemoryContextDelete(context->firstchild);
    0.00 :	  798bf8:       e8 a3 ff ff ff          callq  798ba0 <MemoryContextDelete>
         :
         :	        /*
         :	         * MemoryContextDelete will delink the child from me, so just iterate as
         :	         * long as there is a child.
         :	         */
         :	        while (context->firstchild != NULL)
    0.00 :	  798bfd:       48 8b 7b 18             mov    0x18(%rbx),%rdi
    0.00 :	  798c01:       48 85 ff                test   %rdi,%rdi
    0.00 :	  798c04:       75 f2                   jne    798bf8 <MemoryContextDeleteChildren+0x18>
         :	                MemoryContextDelete(context->firstchild);
         :	}
    0.00 :	  798c06:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  798c0a:       5b                      pop    %rbx
    0.00 :	  798c0b:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:705
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798d50 <palloc>:
         :	        return ret;
         :	}
         :
         :	void *
         :	palloc(Size size)
         :	{
    0.00 :	  798d50:       55                      push   %rbp
    0.00 :	  798d51:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798d54:       53                      push   %rbx
    0.00 :	  798d55:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  798d58:       48 83 ec 08             sub    $0x8,%rsp
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798d5c:       48 81 ff ff ff ff 3f    cmp    $0x3fffffff,%rdi
    0.00 :	  798d63:       77 25                   ja     798d8a <palloc+0x3a>
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798d65:       48 8b 05 f4 1a 42 00    mov    0x421af4(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798d6c:       48 89 de                mov    %rbx,%rsi
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798d6f:       c6 40 30 00             movb   $0x0,0x30(%rax)
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798d73:       48 8b 3d e6 1a 42 00    mov    0x421ae6(%rip),%rdi        # bba860 <CurrentMemoryContext>
    0.00 :	  798d7a:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  798d7e:       4c 8b 18                mov    (%rax),%r11
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        return ret;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:705
  100.00 :	  798d81:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  798d85:       5b                      pop    %rbx
    0.00 :	  798d86:       c9                      leaveq 
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798d87:       41 ff e3                jmpq   *%r11
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
    0.00 :	  798d8a:       ba 18 20 8e 00          mov    $0x8e2018,%edx
    0.00 :	  798d8f:       be b9 02 00 00          mov    $0x2b9,%esi
    0.00 :	  798d94:       bf 8e 1f 8e 00          mov    $0x8e1f8e,%edi
    0.00 :	  798d99:       e8 82 26 fe ff          callq  77b420 <elog_start>
    0.00 :	  798d9e:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798da1:       be b8 1f 8e 00          mov    $0x8e1fb8,%esi
    0.00 :	  798da6:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798dab:       31 c0                   xor    %eax,%eax
    0.00 :	  798dad:       e8 7e 24 fe ff          callq  77b230 <elog_finish>
    0.00 :	  798db2:       e8 19 07 cd ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5600 <XidInMVCCSnapshot>:
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
    0.00 :	  7a5600:       55                      push   %rbp
    0.00 :	  7a5601:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5604:       41 54                   push   %r12
    0.00 :	  7a5606:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7a5609:       53                      push   %rbx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560a:       8b 76 08                mov    0x8(%rsi),%esi
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
    0.00 :	  7a560d:       89 fb                   mov    %edi,%ebx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560f:       e8 cc a9 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5614:       84 c0                   test   %al,%al
    0.00 :	  7a5616:       74 08                   je     7a5620 <XidInMVCCSnapshot+0x20>
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a5618:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5619:       31 c0                   xor    %eax,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
  100.00 :	  7a561b:       41 5c                   pop    %r12
    0.00 :	  7a561d:       c9                      leaveq 
    0.00 :	  7a561e:       c3                      retq   
    0.00 :	  7a561f:       90                      nop
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                return false;
         :	        /* Any xid >= xmax is in-progress */
         :	        if (TransactionIdFollowsOrEquals(xid, snapshot->xmax))
    0.00 :	  7a5620:       41 8b 74 24 0c          mov    0xc(%r12),%esi
    0.00 :	  7a5625:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5627:       e8 44 aa d1 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  7a562c:       84 c0                   test   %al,%al
    0.00 :	  7a562e:       0f 85 7c 00 00 00       jne    7a56b0 <XidInMVCCSnapshot+0xb0>
         :
         :	        /*
         :	         * Snapshot information is stored slightly differently in snapshots taken
         :	         * during recovery.
         :	         */
         :	        if (!snapshot->takenDuringRecovery)
    0.00 :	  7a5634:       41 80 7c 24 29 00       cmpb   $0x0,0x29(%r12)
    0.00 :	  7a563a:       0f 85 80 00 00 00       jne    7a56c0 <XidInMVCCSnapshot+0xc0>
         :	                 * check things is just to compare the given XID against both subxact
         :	                 * XIDs and top-level XIDs.  If the snapshot overflowed, we have to
         :	                 * use pg_subtrans to convert a subxact XID to its parent XID, but
         :	                 * then we need only look at top-level XIDs not subxacts.
         :	                 */
         :	                if (!snapshot->suboverflowed)
    0.00 :	  7a5640:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a5646:       0f 85 b4 00 00 00       jne    7a5700 <XidInMVCCSnapshot+0x100>
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a564c:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a5651:       85 f6                   test   %esi,%esi
    0.00 :	  7a5653:       7e 25                   jle    7a567a <XidInMVCCSnapshot+0x7a>
         :	                        {
         :	                                if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a5655:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a565a:       31 d2                   xor    %edx,%edx
    0.00 :	  7a565c:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a565e:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a5661:       75 10                   jne    7a5673 <XidInMVCCSnapshot+0x73>
    0.00 :	  7a5663:       eb 4b                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5665:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a5668:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a566b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a566f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a5671:       74 3d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                if (!snapshot->suboverflowed)
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5673:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a5676:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a5678:       7c ee                   jl     7a5668 <XidInMVCCSnapshot+0x68>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a567a:       41 8b 74 24 18          mov    0x18(%r12),%esi
    0.00 :	  7a567f:       85 f6                   test   %esi,%esi
    0.00 :	  7a5681:       74 95                   je     7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->xip[i]))
    0.00 :	  7a5683:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  7a5688:       31 d2                   xor    %edx,%edx
    0.00 :	  7a568a:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a568c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a568f:       75 12                   jne    7a56a3 <XidInMVCCSnapshot+0xa3>
    0.00 :	  7a5691:       eb 1d                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5693:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a5698:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a569b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a569f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56a1:       74 0d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a56a3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56a6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56a8:       72 ee                   jb     7a5698 <XidInMVCCSnapshot+0x98>
    0.00 :	  7a56aa:       e9 69 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56af:       90                      nop
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b0:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56b1:       b8 01 00 00 00          mov    $0x1,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b6:       41 5c                   pop    %r12
    0.00 :	  7a56b8:       c9                      leaveq 
    0.00 :	  7a56b9:       c3                      retq   
    0.00 :	  7a56ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * far the bigger array, and we mostly don't know which xids are
         :	                 * top-level and which are subxacts. The xip array is empty.
         :	                 *
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
    0.00 :	  7a56c0:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a56c6:       75 60                   jne    7a5728 <XidInMVCCSnapshot+0x128>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56c8:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a56cd:       85 f6                   test   %esi,%esi
    0.00 :	  7a56cf:       0f 8e 43 ff ff ff       jle    7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a56d5:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a56da:       31 d2                   xor    %edx,%edx
    0.00 :	  7a56dc:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a56de:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a56e1:       75 10                   jne    7a56f3 <XidInMVCCSnapshot+0xf3>
    0.00 :	  7a56e3:       eb cb                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a56e5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a56e8:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a56eb:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a56ef:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56f1:       74 bd                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56f3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56f6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56f8:       7c ee                   jl     7a56e8 <XidInMVCCSnapshot+0xe8>
    0.00 :	  7a56fa:       e9 19 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56ff:       90                      nop
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5700:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5702:       e8 e9 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5707:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a570c:       89 c7                   mov    %eax,%edi
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a570e:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5710:       e8 cb a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5715:       84 c0                   test   %al,%al
    0.00 :	  7a5717:       0f 84 5d ff ff ff       je     7a567a <XidInMVCCSnapshot+0x7a>
    0.00 :	  7a571d:       e9 f6 fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a5722:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5728:       89 df                   mov    %ebx,%edi
    0.00 :	  7a572a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5730:       e8 bb 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5735:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a573a:       89 c7                   mov    %eax,%edi
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a573c:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a573e:       e8 9d a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5743:       84 c0                   test   %al,%al
    0.00 :	  7a5745:       74 81                   je     7a56c8 <XidInMVCCSnapshot+0xc8>
    0.00 :	  7a5747:       e9 cc fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5750 <HeapTupleSatisfiesMVCC>:
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    0.00 :	  7a5750:       55                      push   %rbp
    0.00 :	  7a5751:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5754:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7a5758:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7a575c:       41 89 d6                mov    %edx,%r14d
    0.00 :	  7a575f:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  7a5763:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7a5767:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tuple = htup->t_data;
    0.00 :	  7a576b:       48 8b 5f 10             mov    0x10(%rdi),%rbx
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    0.00 :	  7a576f:       49 89 f5                mov    %rsi,%r13
         :	        HeapTupleHeader tuple = htup->t_data;
         :
         :	        Assert(ItemPointerIsValid(&htup->t_self));
         :	        Assert(htup->t_tableOid != InvalidOid);
         :
         :	        if (!HeapTupleHeaderXminCommitted(tuple))
    0.00 :	  7a5772:       0f b7 4b 14             movzwl 0x14(%rbx),%ecx
    0.00 :	  7a5776:       0f b7 d1                movzwl %cx,%edx
    0.00 :	  7a5779:       f6 c6 01                test   $0x1,%dh
    0.00 :	  7a577c:       75 72                   jne    7a57f0 <HeapTupleSatisfiesMVCC+0xa0>
         :	        {
         :	                if (HeapTupleHeaderXminInvalid(tuple))
    0.00 :	  7a577e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5780:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a5785:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  7a578a:       0f 84 06 01 00 00       je     7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :
         :	                /* Used by pre-9.0 binary upgrades */
         :	                if (tuple->t_infomask & HEAP_MOVED_OFF)
    0.00 :	  7a5790:       f6 c6 40                test   $0x40,%dh
    0.00 :	  7a5793:       0f 84 27 01 00 00       je     7a58c0 <HeapTupleSatisfiesMVCC+0x170>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a5799:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a579c:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a57a1:       74 04                   je     7a57a7 <HeapTupleSatisfiesMVCC+0x57>
    0.00 :	  7a57a3:       44 8b 63 08             mov    0x8(%rbx),%r12d
         :
         :	                        if (TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a57a7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57aa:       e8 f1 ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a57af:       84 c0                   test   %al,%al
    0.00 :	  7a57b1:       0f 85 df 00 00 00       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;
         :	                        if (!TransactionIdIsInProgress(xvac))
    0.00 :	  7a57b7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ba:       e8 f1 c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a57bf:       84 c0                   test   %al,%al
    0.00 :	  7a57c1:       0f 85 1f 01 00 00       jne    7a58e6 <HeapTupleSatisfiesMVCC+0x196>
         :	                        {
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a57c7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ca:       e8 11 ab d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a57cf:       84 c0                   test   %al,%al
    0.00 :	  7a57d1:       0f 85 79 02 00 00       jne    7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
         :	                                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a57d7:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a57dc:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a57de:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a57e1:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a57e4:       e8 b7 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a57e9:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a57ed:       0f 1f 00                nopl   (%rax)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a57f0:       89 d0                   mov    %edx,%eax
    0.00 :	  7a57f2:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a57f7:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a57fc:       0f 85 86 00 00 00       jne    7a5888 <HeapTupleSatisfiesMVCC+0x138>
         :	                return false;                   /* treat as still in progress */
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid or aborted */
         :	                return true;
         :
         :	        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))
    0.00 :	  7a5802:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5808:       0f 85 a2 00 00 00       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a580e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5810:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a5815:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5818:       0f 84 92 00 00 00       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                return true;
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a581e:       f6 c6 10                test   $0x10,%dh
    0.00 :	  7a5821:       0f 85 b9 01 00 00       jne    7a59e0 <HeapTupleSatisfiesMVCC+0x290>
         :	                }
         :	                /* it must have aborted or crashed */
         :	                return true;
         :	        }
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
    0.00 :	  7a5827:       80 e6 04                and    $0x4,%dh
    0.00 :	  7a582a:       75 44                   jne    7a5870 <HeapTupleSatisfiesMVCC+0x120>
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a582c:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a582f:       90                      nop
    0.00 :	  7a5830:       e8 6b ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5835:       84 c0                   test   %al,%al
    0.00 :	  7a5837:       0f 85 43 01 00 00       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :
         :	                if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a583d:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5840:       e8 6b c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5845:       84 c0                   test   %al,%al
    0.00 :	  7a5847:       75 67                   jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5849:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a584c:       e8 8f aa d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5851:       84 c0                   test   %al,%al
    0.00 :	  7a5853:       0f 84 20 02 00 00       je     7a5a79 <HeapTupleSatisfiesMVCC+0x329>
         :	                                                InvalidTransactionId);
         :	                        return true;
         :	                }
         :
         :	                /* xmax transaction committed */
         :	                SetHintBits(tuple, buffer, HEAP_XMAX_COMMITTED,
    0.00 :	  7a5859:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	  7a585c:       ba 00 04 00 00          mov    $0x400,%edx
    0.00 :	  7a5861:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5864:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5867:       e8 34 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a586c:       0f 1f 40 00             nopl   0x0(%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5870:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5873:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5876:       e8 85 fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a587b:       84 c0                   test   %al,%al
    0.00 :	  7a587d:       0f 95 c0                setne  %al
    0.00 :	  7a5880:       eb 16                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5882:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a5888:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a588a:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a588d:       e8 6e fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5892:       84 c0                   test   %al,%al
    0.00 :	  7a5894:       74 6a                   je     7a5900 <HeapTupleSatisfiesMVCC+0x1b0>
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5896:       31 c0                   xor    %eax,%eax
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5898:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7a589c:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7a58a1:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  7a58a6:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  7a58ab:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
  100.00 :	  7a58ac:       c3                      retq   
    0.00 :	  7a58ad:       0f 1f 00                nopl   (%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a58b0:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  7a58b5:       eb e1                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a58b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7a58be:       00 00 
         :	                                SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                        InvalidTransactionId);
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
    0.00 :	  7a58c0:       66 85 c9                test   %cx,%cx
    0.00 :	  7a58c3:       79 4b                   jns    7a5910 <HeapTupleSatisfiesMVCC+0x1c0>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a58c5:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a58c8:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a58cd:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a58d0:       0f 85 fa 00 00 00       jne    7a59d0 <HeapTupleSatisfiesMVCC+0x280>
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a58d6:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a58d9:       e8 c2 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a58de:       84 c0                   test   %al,%al
    0.00 :	  7a58e0:       0f 84 4a 01 00 00       je     7a5a30 <HeapTupleSatisfiesMVCC+0x2e0>
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a58e6:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a58ea:       89 d0                   mov    %edx,%eax
    0.00 :	  7a58ec:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a58f1:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a58f6:       0f 84 06 ff ff ff       je     7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a58fc:       eb 8a                   jmp    7a5888 <HeapTupleSatisfiesMVCC+0x138>
    0.00 :	  7a58fe:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5900:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a5904:       e9 f9 fe ff ff          jmpq   7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a5909:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                InvalidTransactionId);
         :	                                        return false;
         :	                                }
         :	                        }
         :	                }
         :	                else if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5910:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a5912:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5918:       e8 83 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a591d:       84 c0                   test   %al,%al
    0.00 :	  7a591f:       90                      nop
    0.00 :	  7a5920:       74 76                   je     7a5998 <HeapTupleSatisfiesMVCC+0x248>
         :	                {
         :	                        if (HeapTupleHeaderGetCmin(tuple) >= snapshot->curcid)
    0.00 :	  7a5922:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5925:       e8 96 eb ff ff          callq  7a44c0 <HeapTupleHeaderGetCmin>
    0.00 :	  7a592a:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a592e:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5930:       0f 83 60 ff ff ff       jae    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;   /* inserted after scan started */
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid */
    0.00 :	  7a5936:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :	                                return true;
         :
         :	                        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))        /* not deleter */
    0.00 :	  7a593a:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5940:       0f 85 6a ff ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5946:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5948:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a594d:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5950:       0f 84 5a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                                return true;
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a5956:       80 e6 10                and    $0x10,%dh
    0.00 :	  7a5959:       0f 84 0a 01 00 00       je     7a5a69 <HeapTupleSatisfiesMVCC+0x319>
         :	                        {
         :	                                TransactionId xmax;
         :
         :	                                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a595f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5962:       e8 b9 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  7a5967:       89 c7                   mov    %eax,%edi
         :
         :	                                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                                Assert(TransactionIdIsValid(xmax));
         :
         :	                                /* updating subtransaction must have aborted */
         :	                                if (!TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a5969:       e8 32 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a596e:       84 c0                   test   %al,%al
    0.00 :	  7a5970:       0f 84 3a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5976:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  7a597d:       00 00 00 
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
    0.00 :	  7a5980:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5983:       e8 58 eb ff ff          callq  7a44e0 <HeapTupleHeaderGetCmax>
    0.00 :	  7a5988:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a598c:       0f 93 c0                setae  %al
    0.00 :	  7a598f:       e9 04 ff ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5998:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a599a:       e8 11 c3 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a599f:       84 c0                   test   %al,%al
    0.00 :	  7a59a1:       0f 85 ef fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a59a7:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a59a9:       e8 32 a9 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a59ae:       84 c0                   test   %al,%al
    0.00 :	  7a59b0:       0f 84 9a 00 00 00       je     7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a59b6:       8b 0b                   mov    (%rbx),%ecx
    0.00 :	  7a59b8:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a59bd:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a59c0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59c3:       e8 d8 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a59c8:       e9 19 ff ff ff          jmpq   7a58e6 <HeapTupleSatisfiesMVCC+0x196>
    0.00 :	  7a59cd:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a59d0:       44 8b 63 08             mov    0x8(%rbx),%r12d
    0.00 :	  7a59d4:       e9 fd fe ff ff          jmpq   7a58d6 <HeapTupleSatisfiesMVCC+0x186>
    0.00 :	  7a59d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59e0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a59e8:       e8 33 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59ed:       89 c7                   mov    %eax,%edi
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59ef:       41 89 c4                mov    %eax,%r12d
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59f2:       e8 a9 ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a59f7:       84 c0                   test   %al,%al
    0.00 :	  7a59f9:       75 85                   jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                if (TransactionIdIsInProgress(xmax))
    0.00 :	  7a59fb:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a59fe:       e8 ad c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a03:       84 c0                   test   %al,%al
    0.00 :	  7a5a05:       0f 85 a5 fe ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :	                if (TransactionIdDidCommit(xmax))
    0.00 :	  7a5a0b:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a0e:       e8 cd a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a13:       84 c0                   test   %al,%al
    0.00 :	  7a5a15:       0f 84 95 fe ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                {
         :	                        /* updating transaction committed, but when? */
         :	                        if (XidInMVCCSnapshot(xmax, snapshot))
    0.00 :	  7a5a1b:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5a1e:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a21:       e8 da fb ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5a26:       84 c0                   test   %al,%al
    0.00 :	  7a5a28:       0f 95 c0                setne  %al
    0.00 :	  7a5a2b:       e9 68 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
    0.00 :	  7a5a30:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a33:       e8 78 c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a38:       84 c0                   test   %al,%al
    0.00 :	  7a5a3a:       0f 85 56 fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a5a40:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a43:       e8 98 a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a48:       84 c0                   test   %al,%al
    0.00 :	  7a5a4a:       0f 85 87 fd ff ff       jne    7a57d7 <HeapTupleSatisfiesMVCC+0x87>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                HeapTupleHeaderGetRawXmin(tuple));
         :	                else
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_INVALID,
    0.00 :	  7a5a50:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a52:       ba 00 02 00 00          mov    $0x200,%edx
    0.00 :	  7a5a57:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a5a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a5d:       e8 3e f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a62:       31 c0                   xor    %eax,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a64:       e9 2f fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                                        return true;    /* updated after scan started */
         :	                                else
         :	                                        return false;           /* updated before scan started */
         :	                        }
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5a69:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5a6c:       e8 2f ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5a71:       84 c0                   test   %al,%al
    0.00 :	  7a5a73:       0f 85 07 ff ff ff       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMAX_INVALID,
    0.00 :	  7a5a79:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a7b:       ba 00 08 00 00          mov    $0x800,%edx
    0.00 :	  7a5a80:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a83:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a86:       e8 15 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a8b:       b8 01 00 00 00          mov    $0x1,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a90:       e9 03 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000031e00 <__isnan>:
    0.00 :	   31e00:       f2 0f 11 44 24 f8       movsd  %xmm0,-0x8(%rsp)
    0.00 :	   31e06:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   31e0b:       89 c2                   mov    %eax,%edx
    0.00 :	   31e0d:       48 89 c1                mov    %rax,%rcx
    0.00 :	   31e10:       f7 da                   neg    %edx
    0.00 :	   31e12:       48 c1 e9 20             shr    $0x20,%rcx
    0.00 :	   31e16:       09 c2                   or     %eax,%edx
    0.00 :	   31e18:       81 e1 ff ff ff 7f       and    $0x7fffffff,%ecx
    0.00 :	   31e1e:       b8 00 00 f0 7f          mov    $0x7ff00000,%eax
    0.00 :	   31e23:       c1 ea 1f                shr    $0x1f,%edx
  100.00 :	   31e26:       09 ca                   or     %ecx,%edx
    0.00 :	   31e28:       29 d0                   sub    %edx,%eax
    0.00 :	   31e2a:       c1 e8 1f                shr    $0x1f,%eax

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000083470 <__GI_memset>:
    0.00 :	   83470:       48 83 fa 01             cmp    $0x1,%rdx
    0.00 :	   83474:       48 89 f8                mov    %rdi,%rax
    0.00 :	   83477:       75 04                   jne    8347d <__GI_memset+0xd>
    0.00 :	   83479:       40 88 37                mov    %sil,(%rdi)
    0.00 :	   8347c:       c3                      retq   
    0.00 :	   8347d:       49 b9 01 01 01 01 01    movabs $0x101010101010101,%r9
    0.00 :	   83484:       01 01 01 
    0.00 :	   83487:       49 89 d0                mov    %rdx,%r8
    0.00 :	   8348a:       48 0f b6 d6             movzbq %sil,%rdx
    0.00 :	   8348e:       49 0f af d1             imul   %r9,%rdx
    0.00 :	   83492:       49 81 f8 90 00 00 00    cmp    $0x90,%r8
    0.00 :	   83499:       0f 87 e1 02 00 00       ja     83780 <__GI_memset+0x310>
    0.00 :	   8349f:       4c 01 c7                add    %r8,%rdi
    0.00 :	   834a2:       4c 8d 1d 13 00 00 00    lea    0x13(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   834a9:       48 8d 0d 60 2d 0b 00    lea    0xb2d60(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   834b0:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
 ??:0
  100.00 :	   834b5:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   834b9:       41 ff e3                jmpq   *%r11
    0.00 :	   834bc:       c3                      retq   
    0.00 :	   834bd:       0f 1f 00                nopl   (%rax)
    0.00 :	   834c0:       48 89 97 77 ff ff ff    mov    %rdx,-0x89(%rdi)
    0.00 :	   834c7:       48 89 97 7f ff ff ff    mov    %rdx,-0x81(%rdi)
    0.00 :	   834ce:       48 89 57 87             mov    %rdx,-0x79(%rdi)
    0.00 :	   834d2:       48 89 57 8f             mov    %rdx,-0x71(%rdi)
    0.00 :	   834d6:       48 89 57 97             mov    %rdx,-0x69(%rdi)
    0.00 :	   834da:       48 89 57 9f             mov    %rdx,-0x61(%rdi)
    0.00 :	   834de:       48 89 57 a7             mov    %rdx,-0x59(%rdi)
    0.00 :	   834e2:       48 89 57 af             mov    %rdx,-0x51(%rdi)
    0.00 :	   834e6:       48 89 57 b7             mov    %rdx,-0x49(%rdi)
    0.00 :	   834ea:       48 89 57 bf             mov    %rdx,-0x41(%rdi)
    0.00 :	   834ee:       48 89 57 c7             mov    %rdx,-0x39(%rdi)
    0.00 :	   834f2:       48 89 57 cf             mov    %rdx,-0x31(%rdi)
    0.00 :	   834f6:       48 89 57 d7             mov    %rdx,-0x29(%rdi)
    0.00 :	   834fa:       48 89 57 df             mov    %rdx,-0x21(%rdi)
    0.00 :	   834fe:       48 89 57 e7             mov    %rdx,-0x19(%rdi)
    0.00 :	   83502:       48 89 57 ef             mov    %rdx,-0x11(%rdi)
    0.00 :	   83506:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   8350a:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   8350d:       c3                      retq   
    0.00 :	   8350e:       66 90                   xchg   %ax,%ax
    0.00 :	   83510:       48 89 97 70 ff ff ff    mov    %rdx,-0x90(%rdi)
    0.00 :	   83517:       48 89 97 78 ff ff ff    mov    %rdx,-0x88(%rdi)
    0.00 :	   8351e:       48 89 57 80             mov    %rdx,-0x80(%rdi)
    0.00 :	   83522:       48 89 57 88             mov    %rdx,-0x78(%rdi)
    0.00 :	   83526:       48 89 57 90             mov    %rdx,-0x70(%rdi)
    0.00 :	   8352a:       48 89 57 98             mov    %rdx,-0x68(%rdi)
    0.00 :	   8352e:       48 89 57 a0             mov    %rdx,-0x60(%rdi)
    0.00 :	   83532:       48 89 57 a8             mov    %rdx,-0x58(%rdi)
    0.00 :	   83536:       48 89 57 b0             mov    %rdx,-0x50(%rdi)
    0.00 :	   8353a:       48 89 57 b8             mov    %rdx,-0x48(%rdi)
    0.00 :	   8353e:       48 89 57 c0             mov    %rdx,-0x40(%rdi)
    0.00 :	   83542:       48 89 57 c8             mov    %rdx,-0x38(%rdi)
    0.00 :	   83546:       48 89 57 d0             mov    %rdx,-0x30(%rdi)
    0.00 :	   8354a:       48 89 57 d8             mov    %rdx,-0x28(%rdi)
    0.00 :	   8354e:       48 89 57 e0             mov    %rdx,-0x20(%rdi)
    0.00 :	   83552:       48 89 57 e8             mov    %rdx,-0x18(%rdi)
    0.00 :	   83556:       48 89 57 f0             mov    %rdx,-0x10(%rdi)
    0.00 :	   8355a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8355e:       c3                      retq   
    0.00 :	   8355f:       90                      nop
    0.00 :	   83560:       48 89 97 76 ff ff ff    mov    %rdx,-0x8a(%rdi)
    0.00 :	   83567:       48 89 97 7e ff ff ff    mov    %rdx,-0x82(%rdi)
    0.00 :	   8356e:       48 89 57 86             mov    %rdx,-0x7a(%rdi)
    0.00 :	   83572:       48 89 57 8e             mov    %rdx,-0x72(%rdi)
    0.00 :	   83576:       48 89 57 96             mov    %rdx,-0x6a(%rdi)
    0.00 :	   8357a:       48 89 57 9e             mov    %rdx,-0x62(%rdi)
    0.00 :	   8357e:       48 89 57 a6             mov    %rdx,-0x5a(%rdi)
    0.00 :	   83582:       48 89 57 ae             mov    %rdx,-0x52(%rdi)
    0.00 :	   83586:       48 89 57 b6             mov    %rdx,-0x4a(%rdi)
    0.00 :	   8358a:       48 89 57 be             mov    %rdx,-0x42(%rdi)
    0.00 :	   8358e:       48 89 57 c6             mov    %rdx,-0x3a(%rdi)
    0.00 :	   83592:       48 89 57 ce             mov    %rdx,-0x32(%rdi)
    0.00 :	   83596:       48 89 57 d6             mov    %rdx,-0x2a(%rdi)
    0.00 :	   8359a:       48 89 57 de             mov    %rdx,-0x22(%rdi)
    0.00 :	   8359e:       48 89 57 e6             mov    %rdx,-0x1a(%rdi)
    0.00 :	   835a2:       48 89 57 ee             mov    %rdx,-0x12(%rdi)
    0.00 :	   835a6:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   835aa:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   835ae:       c3                      retq   
    0.00 :	   835af:       90                      nop
    0.00 :	   835b0:       48 89 97 75 ff ff ff    mov    %rdx,-0x8b(%rdi)
    0.00 :	   835b7:       48 89 97 7d ff ff ff    mov    %rdx,-0x83(%rdi)
    0.00 :	   835be:       48 89 57 85             mov    %rdx,-0x7b(%rdi)
    0.00 :	   835c2:       48 89 57 8d             mov    %rdx,-0x73(%rdi)
    0.00 :	   835c6:       48 89 57 95             mov    %rdx,-0x6b(%rdi)
    0.00 :	   835ca:       48 89 57 9d             mov    %rdx,-0x63(%rdi)
    0.00 :	   835ce:       48 89 57 a5             mov    %rdx,-0x5b(%rdi)
    0.00 :	   835d2:       48 89 57 ad             mov    %rdx,-0x53(%rdi)
    0.00 :	   835d6:       48 89 57 b5             mov    %rdx,-0x4b(%rdi)
    0.00 :	   835da:       48 89 57 bd             mov    %rdx,-0x43(%rdi)
    0.00 :	   835de:       48 89 57 c5             mov    %rdx,-0x3b(%rdi)
    0.00 :	   835e2:       48 89 57 cd             mov    %rdx,-0x33(%rdi)
    0.00 :	   835e6:       48 89 57 d5             mov    %rdx,-0x2b(%rdi)
    0.00 :	   835ea:       48 89 57 dd             mov    %rdx,-0x23(%rdi)
    0.00 :	   835ee:       48 89 57 e5             mov    %rdx,-0x1b(%rdi)
    0.00 :	   835f2:       48 89 57 ed             mov    %rdx,-0x13(%rdi)
    0.00 :	   835f6:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   835fa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   835fe:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83601:       c3                      retq   
    0.00 :	   83602:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83609:       1f 84 00 00 00 00 00 
    0.00 :	   83610:       48 89 97 74 ff ff ff    mov    %rdx,-0x8c(%rdi)
    0.00 :	   83617:       48 89 97 7c ff ff ff    mov    %rdx,-0x84(%rdi)
    0.00 :	   8361e:       48 89 57 84             mov    %rdx,-0x7c(%rdi)
    0.00 :	   83622:       48 89 57 8c             mov    %rdx,-0x74(%rdi)
    0.00 :	   83626:       48 89 57 94             mov    %rdx,-0x6c(%rdi)
    0.00 :	   8362a:       48 89 57 9c             mov    %rdx,-0x64(%rdi)
    0.00 :	   8362e:       48 89 57 a4             mov    %rdx,-0x5c(%rdi)
    0.00 :	   83632:       48 89 57 ac             mov    %rdx,-0x54(%rdi)
    0.00 :	   83636:       48 89 57 b4             mov    %rdx,-0x4c(%rdi)
    0.00 :	   8363a:       48 89 57 bc             mov    %rdx,-0x44(%rdi)
    0.00 :	   8363e:       48 89 57 c4             mov    %rdx,-0x3c(%rdi)
    0.00 :	   83642:       48 89 57 cc             mov    %rdx,-0x34(%rdi)
    0.00 :	   83646:       48 89 57 d4             mov    %rdx,-0x2c(%rdi)
    0.00 :	   8364a:       48 89 57 dc             mov    %rdx,-0x24(%rdi)
    0.00 :	   8364e:       48 89 57 e4             mov    %rdx,-0x1c(%rdi)
    0.00 :	   83652:       48 89 57 ec             mov    %rdx,-0x14(%rdi)
    0.00 :	   83656:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   8365a:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8365d:       c3                      retq   
    0.00 :	   8365e:       66 90                   xchg   %ax,%ax
    0.00 :	   83660:       48 89 97 73 ff ff ff    mov    %rdx,-0x8d(%rdi)
    0.00 :	   83667:       48 89 97 7b ff ff ff    mov    %rdx,-0x85(%rdi)
    0.00 :	   8366e:       48 89 57 83             mov    %rdx,-0x7d(%rdi)
    0.00 :	   83672:       48 89 57 8b             mov    %rdx,-0x75(%rdi)
    0.00 :	   83676:       48 89 57 93             mov    %rdx,-0x6d(%rdi)
    0.00 :	   8367a:       48 89 57 9b             mov    %rdx,-0x65(%rdi)
    0.00 :	   8367e:       48 89 57 a3             mov    %rdx,-0x5d(%rdi)
    0.00 :	   83682:       48 89 57 ab             mov    %rdx,-0x55(%rdi)
    0.00 :	   83686:       48 89 57 b3             mov    %rdx,-0x4d(%rdi)
    0.00 :	   8368a:       48 89 57 bb             mov    %rdx,-0x45(%rdi)
    0.00 :	   8368e:       48 89 57 c3             mov    %rdx,-0x3d(%rdi)
    0.00 :	   83692:       48 89 57 cb             mov    %rdx,-0x35(%rdi)
    0.00 :	   83696:       48 89 57 d3             mov    %rdx,-0x2d(%rdi)
    0.00 :	   8369a:       48 89 57 db             mov    %rdx,-0x25(%rdi)
    0.00 :	   8369e:       48 89 57 e3             mov    %rdx,-0x1d(%rdi)
    0.00 :	   836a2:       48 89 57 eb             mov    %rdx,-0x15(%rdi)
    0.00 :	   836a6:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   836aa:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   836ad:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   836b0:       c3                      retq   
    0.00 :	   836b1:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   836b8:       0f 1f 84 00 00 00 00 
    0.00 :	   836bf:       00 
    0.00 :	   836c0:       48 89 97 72 ff ff ff    mov    %rdx,-0x8e(%rdi)
    0.00 :	   836c7:       48 89 97 7a ff ff ff    mov    %rdx,-0x86(%rdi)
    0.00 :	   836ce:       48 89 57 82             mov    %rdx,-0x7e(%rdi)
    0.00 :	   836d2:       48 89 57 8a             mov    %rdx,-0x76(%rdi)
    0.00 :	   836d6:       48 89 57 92             mov    %rdx,-0x6e(%rdi)
    0.00 :	   836da:       48 89 57 9a             mov    %rdx,-0x66(%rdi)
    0.00 :	   836de:       48 89 57 a2             mov    %rdx,-0x5e(%rdi)
    0.00 :	   836e2:       48 89 57 aa             mov    %rdx,-0x56(%rdi)
    0.00 :	   836e6:       48 89 57 b2             mov    %rdx,-0x4e(%rdi)
    0.00 :	   836ea:       48 89 57 ba             mov    %rdx,-0x46(%rdi)
    0.00 :	   836ee:       48 89 57 c2             mov    %rdx,-0x3e(%rdi)
    0.00 :	   836f2:       48 89 57 ca             mov    %rdx,-0x36(%rdi)
    0.00 :	   836f6:       48 89 57 d2             mov    %rdx,-0x2e(%rdi)
    0.00 :	   836fa:       48 89 57 da             mov    %rdx,-0x26(%rdi)
    0.00 :	   836fe:       48 89 57 e2             mov    %rdx,-0x1e(%rdi)
    0.00 :	   83702:       48 89 57 ea             mov    %rdx,-0x16(%rdi)
    0.00 :	   83706:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   8370a:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   8370d:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83711:       c3                      retq   
    0.00 :	   83712:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83719:       1f 84 00 00 00 00 00 
    0.00 :	   83720:       48 89 97 71 ff ff ff    mov    %rdx,-0x8f(%rdi)
    0.00 :	   83727:       48 89 97 79 ff ff ff    mov    %rdx,-0x87(%rdi)
    0.00 :	   8372e:       48 89 57 81             mov    %rdx,-0x7f(%rdi)
    0.00 :	   83732:       48 89 57 89             mov    %rdx,-0x77(%rdi)
    0.00 :	   83736:       48 89 57 91             mov    %rdx,-0x6f(%rdi)
    0.00 :	   8373a:       48 89 57 99             mov    %rdx,-0x67(%rdi)
    0.00 :	   8373e:       48 89 57 a1             mov    %rdx,-0x5f(%rdi)
    0.00 :	   83742:       48 89 57 a9             mov    %rdx,-0x57(%rdi)
    0.00 :	   83746:       48 89 57 b1             mov    %rdx,-0x4f(%rdi)
    0.00 :	   8374a:       48 89 57 b9             mov    %rdx,-0x47(%rdi)
    0.00 :	   8374e:       48 89 57 c1             mov    %rdx,-0x3f(%rdi)
    0.00 :	   83752:       48 89 57 c9             mov    %rdx,-0x37(%rdi)
    0.00 :	   83756:       48 89 57 d1             mov    %rdx,-0x2f(%rdi)
    0.00 :	   8375a:       48 89 57 d9             mov    %rdx,-0x27(%rdi)
    0.00 :	   8375e:       48 89 57 e1             mov    %rdx,-0x1f(%rdi)
    0.00 :	   83762:       48 89 57 e9             mov    %rdx,-0x17(%rdi)
    0.00 :	   83766:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   8376a:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   8376d:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83771:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83774:       c3                      retq   
    0.00 :	   83775:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8377c:       00 00 00 00 
    0.00 :	   83780:       49 c7 c2 10 00 00 00    mov    $0x10,%r10
    0.00 :	   83787:       49 89 f9                mov    %rdi,%r9
    0.00 :	   8378a:       49 83 e1 0f             and    $0xf,%r9
    0.00 :	   8378e:       4d 29 ca                sub    %r9,%r10
    0.00 :	   83791:       49 83 e2 0f             and    $0xf,%r10
    0.00 :	   83795:       4c 01 d7                add    %r10,%rdi
    0.00 :	   83798:       4d 29 d0                sub    %r10,%r8
    0.00 :	   8379b:       4c 8d 1d 98 00 00 00    lea    0x98(%rip),%r11        # 8383a <__GI_memset+0x3ca>
    0.00 :	   837a2:       48 8d 0d 97 2b 0b 00    lea    0xb2b97(%rip),%rcx        # 136340 <next_state.9261+0x1bc>
    0.00 :	   837a9:       4a 0f bf 0c 51          movswq (%rcx,%r10,2),%rcx
    0.00 :	   837ae:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   837b2:       41 ff e3                jmpq   *%r11
    0.00 :	   837b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837bc:       00 00 00 00 
    0.00 :	   837c0:       88 57 f3                mov    %dl,-0xd(%rdi)
    0.00 :	   837c3:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   837c6:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837ca:       eb 6e                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   837d0:       88 57 f7                mov    %dl,-0x9(%rdi)
    0.00 :	   837d3:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837d7:       eb 61                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   837e0:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   837e3:       eb 55                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837e5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837ec:       00 00 00 00 
    0.00 :	   837f0:       88 57 f5                mov    %dl,-0xb(%rdi)
    0.00 :	   837f3:       66 89 57 f6             mov    %dx,-0xa(%rdi)
    0.00 :	   837f7:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837fb:       eb 3d                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837fd:       0f 1f 00                nopl   (%rax)
    0.00 :	   83800:       88 57 fd                mov    %dl,-0x3(%rdi)
    0.00 :	   83803:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83807:       eb 31                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83809:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83810:       88 57 fb                mov    %dl,-0x5(%rdi)
    0.00 :	   83813:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83816:       eb 22                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83818:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   8381f:       00 
    0.00 :	   83820:       88 57 f1                mov    %dl,-0xf(%rdi)
    0.00 :	   83823:       66 89 57 f2             mov    %dx,-0xe(%rdi)
    0.00 :	   83827:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   8382a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8382e:       eb 0a                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83830:       88 57 f9                mov    %dl,-0x7(%rdi)
    0.00 :	   83833:       66 89 57 fa             mov    %dx,-0x6(%rdi)
    0.00 :	   83837:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8383a:       66 48 0f 6e c2          movq   %rdx,%xmm0
    0.00 :	   8383f:       66 0f 6c c0             punpcklqdq %xmm0,%xmm0
    0.00 :	   83843:       49 81 f8 b0 00 00 00    cmp    $0xb0,%r8
    0.00 :	   8384a:       0f 83 d0 04 00 00       jae    83d20 <__GI_memset+0x8b0>
    0.00 :	   83850:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83853:       4c 8d 0d 53 00 00 00    lea    0x53(%rip),%r9        # 838ad <__GI_memset+0x43d>
    0.00 :	   8385a:       48 8d 0d ff 2a 0b 00    lea    0xb2aff(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83861:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83866:       4e 8d 0c 09             lea    (%rcx,%r9,1),%r9
    0.00 :	   8386a:       41 ff e1                jmpq   *%r9
    0.00 :	   8386d:       66 0f 7f 87 50 ff ff    movdqa %xmm0,-0xb0(%rdi)
    0.00 :	   83874:       ff 
    0.00 :	   83875:       66 0f 7f 87 60 ff ff    movdqa %xmm0,-0xa0(%rdi)
    0.00 :	   8387c:       ff 
    0.00 :	   8387d:       66 0f 7f 87 70 ff ff    movdqa %xmm0,-0x90(%rdi)
    0.00 :	   83884:       ff 
    0.00 :	   83885:       66 0f 7f 47 80          movdqa %xmm0,-0x80(%rdi)
    0.00 :	   8388a:       66 0f 7f 47 90          movdqa %xmm0,-0x70(%rdi)
    0.00 :	   8388f:       66 0f 7f 47 a0          movdqa %xmm0,-0x60(%rdi)
    0.00 :	   83894:       66 0f 7f 47 b0          movdqa %xmm0,-0x50(%rdi)
    0.00 :	   83899:       66 0f 7f 47 c0          movdqa %xmm0,-0x40(%rdi)
    0.00 :	   8389e:       66 0f 7f 47 d0          movdqa %xmm0,-0x30(%rdi)
    0.00 :	   838a3:       66 0f 7f 47 e0          movdqa %xmm0,-0x20(%rdi)
    0.00 :	   838a8:       66 0f 7f 47 f0          movdqa %xmm0,-0x10(%rdi)
    0.00 :	   838ad:       c3                      retq   
    0.00 :	   838ae:       66 0f 7f 87 4f ff ff    movdqa %xmm0,-0xb1(%rdi)
    0.00 :	   838b5:       ff 
    0.00 :	   838b6:       66 0f 7f 87 5f ff ff    movdqa %xmm0,-0xa1(%rdi)
    0.00 :	   838bd:       ff 
    0.00 :	   838be:       66 0f 7f 87 6f ff ff    movdqa %xmm0,-0x91(%rdi)
    0.00 :	   838c5:       ff 
    0.00 :	   838c6:       66 0f 7f 87 7f ff ff    movdqa %xmm0,-0x81(%rdi)
    0.00 :	   838cd:       ff 
    0.00 :	   838ce:       66 0f 7f 47 8f          movdqa %xmm0,-0x71(%rdi)
    0.00 :	   838d3:       66 0f 7f 47 9f          movdqa %xmm0,-0x61(%rdi)
    0.00 :	   838d8:       66 0f 7f 47 af          movdqa %xmm0,-0x51(%rdi)
    0.00 :	   838dd:       66 0f 7f 47 bf          movdqa %xmm0,-0x41(%rdi)
    0.00 :	   838e2:       66 0f 7f 47 cf          movdqa %xmm0,-0x31(%rdi)
    0.00 :	   838e7:       66 0f 7f 47 df          movdqa %xmm0,-0x21(%rdi)
    0.00 :	   838ec:       66 0f 7f 47 ef          movdqa %xmm0,-0x11(%rdi)
    0.00 :	   838f1:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   838f4:       c3                      retq   
    0.00 :	   838f5:       66 0f 7f 87 4e ff ff    movdqa %xmm0,-0xb2(%rdi)
    0.00 :	   838fc:       ff 
    0.00 :	   838fd:       66 0f 7f 87 5e ff ff    movdqa %xmm0,-0xa2(%rdi)
    0.00 :	   83904:       ff 
    0.00 :	   83905:       66 0f 7f 87 6e ff ff    movdqa %xmm0,-0x92(%rdi)
    0.00 :	   8390c:       ff 
    0.00 :	   8390d:       66 0f 7f 87 7e ff ff    movdqa %xmm0,-0x82(%rdi)
    0.00 :	   83914:       ff 
    0.00 :	   83915:       66 0f 7f 47 8e          movdqa %xmm0,-0x72(%rdi)
    0.00 :	   8391a:       66 0f 7f 47 9e          movdqa %xmm0,-0x62(%rdi)
    0.00 :	   8391f:       66 0f 7f 47 ae          movdqa %xmm0,-0x52(%rdi)
    0.00 :	   83924:       66 0f 7f 47 be          movdqa %xmm0,-0x42(%rdi)
    0.00 :	   83929:       66 0f 7f 47 ce          movdqa %xmm0,-0x32(%rdi)
    0.00 :	   8392e:       66 0f 7f 47 de          movdqa %xmm0,-0x22(%rdi)
    0.00 :	   83933:       66 0f 7f 47 ee          movdqa %xmm0,-0x12(%rdi)
    0.00 :	   83938:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   8393c:       c3                      retq   
    0.00 :	   8393d:       66 0f 7f 87 4d ff ff    movdqa %xmm0,-0xb3(%rdi)
    0.00 :	   83944:       ff 
    0.00 :	   83945:       66 0f 7f 87 5d ff ff    movdqa %xmm0,-0xa3(%rdi)
    0.00 :	   8394c:       ff 
    0.00 :	   8394d:       66 0f 7f 87 6d ff ff    movdqa %xmm0,-0x93(%rdi)
    0.00 :	   83954:       ff 
    0.00 :	   83955:       66 0f 7f 87 7d ff ff    movdqa %xmm0,-0x83(%rdi)
    0.00 :	   8395c:       ff 
    0.00 :	   8395d:       66 0f 7f 47 8d          movdqa %xmm0,-0x73(%rdi)
    0.00 :	   83962:       66 0f 7f 47 9d          movdqa %xmm0,-0x63(%rdi)
    0.00 :	   83967:       66 0f 7f 47 ad          movdqa %xmm0,-0x53(%rdi)
    0.00 :	   8396c:       66 0f 7f 47 bd          movdqa %xmm0,-0x43(%rdi)
    0.00 :	   83971:       66 0f 7f 47 cd          movdqa %xmm0,-0x33(%rdi)
    0.00 :	   83976:       66 0f 7f 47 dd          movdqa %xmm0,-0x23(%rdi)
    0.00 :	   8397b:       66 0f 7f 47 ed          movdqa %xmm0,-0x13(%rdi)
    0.00 :	   83980:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83984:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83987:       c3                      retq   
    0.00 :	   83988:       66 0f 7f 87 4c ff ff    movdqa %xmm0,-0xb4(%rdi)
    0.00 :	   8398f:       ff 
    0.00 :	   83990:       66 0f 7f 87 5c ff ff    movdqa %xmm0,-0xa4(%rdi)
    0.00 :	   83997:       ff 
    0.00 :	   83998:       66 0f 7f 87 6c ff ff    movdqa %xmm0,-0x94(%rdi)
    0.00 :	   8399f:       ff 
    0.00 :	   839a0:       66 0f 7f 87 7c ff ff    movdqa %xmm0,-0x84(%rdi)
    0.00 :	   839a7:       ff 
    0.00 :	   839a8:       66 0f 7f 47 8c          movdqa %xmm0,-0x74(%rdi)
    0.00 :	   839ad:       66 0f 7f 47 9c          movdqa %xmm0,-0x64(%rdi)
    0.00 :	   839b2:       66 0f 7f 47 ac          movdqa %xmm0,-0x54(%rdi)
    0.00 :	   839b7:       66 0f 7f 47 bc          movdqa %xmm0,-0x44(%rdi)
    0.00 :	   839bc:       66 0f 7f 47 cc          movdqa %xmm0,-0x34(%rdi)
    0.00 :	   839c1:       66 0f 7f 47 dc          movdqa %xmm0,-0x24(%rdi)
    0.00 :	   839c6:       66 0f 7f 47 ec          movdqa %xmm0,-0x14(%rdi)
    0.00 :	   839cb:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   839ce:       c3                      retq   
    0.00 :	   839cf:       66 0f 7f 87 4b ff ff    movdqa %xmm0,-0xb5(%rdi)
    0.00 :	   839d6:       ff 
    0.00 :	   839d7:       66 0f 7f 87 5b ff ff    movdqa %xmm0,-0xa5(%rdi)
    0.00 :	   839de:       ff 
    0.00 :	   839df:       66 0f 7f 87 6b ff ff    movdqa %xmm0,-0x95(%rdi)
    0.00 :	   839e6:       ff 
    0.00 :	   839e7:       66 0f 7f 87 7b ff ff    movdqa %xmm0,-0x85(%rdi)
    0.00 :	   839ee:       ff 
    0.00 :	   839ef:       66 0f 7f 47 8b          movdqa %xmm0,-0x75(%rdi)
    0.00 :	   839f4:       66 0f 7f 47 9b          movdqa %xmm0,-0x65(%rdi)
    0.00 :	   839f9:       66 0f 7f 47 ab          movdqa %xmm0,-0x55(%rdi)
    0.00 :	   839fe:       66 0f 7f 47 bb          movdqa %xmm0,-0x45(%rdi)
    0.00 :	   83a03:       66 0f 7f 47 cb          movdqa %xmm0,-0x35(%rdi)
    0.00 :	   83a08:       66 0f 7f 47 db          movdqa %xmm0,-0x25(%rdi)
    0.00 :	   83a0d:       66 0f 7f 47 eb          movdqa %xmm0,-0x15(%rdi)
    0.00 :	   83a12:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83a15:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83a18:       c3                      retq   
    0.00 :	   83a19:       66 0f 7f 87 4a ff ff    movdqa %xmm0,-0xb6(%rdi)
    0.00 :	   83a20:       ff 
    0.00 :	   83a21:       66 0f 7f 87 5a ff ff    movdqa %xmm0,-0xa6(%rdi)
    0.00 :	   83a28:       ff 
    0.00 :	   83a29:       66 0f 7f 87 6a ff ff    movdqa %xmm0,-0x96(%rdi)
    0.00 :	   83a30:       ff 
    0.00 :	   83a31:       66 0f 7f 87 7a ff ff    movdqa %xmm0,-0x86(%rdi)
    0.00 :	   83a38:       ff 
    0.00 :	   83a39:       66 0f 7f 47 8a          movdqa %xmm0,-0x76(%rdi)
    0.00 :	   83a3e:       66 0f 7f 47 9a          movdqa %xmm0,-0x66(%rdi)
    0.00 :	   83a43:       66 0f 7f 47 aa          movdqa %xmm0,-0x56(%rdi)
    0.00 :	   83a48:       66 0f 7f 47 ba          movdqa %xmm0,-0x46(%rdi)
    0.00 :	   83a4d:       66 0f 7f 47 ca          movdqa %xmm0,-0x36(%rdi)
    0.00 :	   83a52:       66 0f 7f 47 da          movdqa %xmm0,-0x26(%rdi)
    0.00 :	   83a57:       66 0f 7f 47 ea          movdqa %xmm0,-0x16(%rdi)
    0.00 :	   83a5c:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83a5f:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83a63:       c3                      retq   
    0.00 :	   83a64:       66 0f 7f 87 49 ff ff    movdqa %xmm0,-0xb7(%rdi)
    0.00 :	   83a6b:       ff 
    0.00 :	   83a6c:       66 0f 7f 87 59 ff ff    movdqa %xmm0,-0xa7(%rdi)
    0.00 :	   83a73:       ff 
    0.00 :	   83a74:       66 0f 7f 87 69 ff ff    movdqa %xmm0,-0x97(%rdi)
    0.00 :	   83a7b:       ff 
    0.00 :	   83a7c:       66 0f 7f 87 79 ff ff    movdqa %xmm0,-0x87(%rdi)
    0.00 :	   83a83:       ff 
    0.00 :	   83a84:       66 0f 7f 47 89          movdqa %xmm0,-0x77(%rdi)
    0.00 :	   83a89:       66 0f 7f 47 99          movdqa %xmm0,-0x67(%rdi)
    0.00 :	   83a8e:       66 0f 7f 47 a9          movdqa %xmm0,-0x57(%rdi)
    0.00 :	   83a93:       66 0f 7f 47 b9          movdqa %xmm0,-0x47(%rdi)
    0.00 :	   83a98:       66 0f 7f 47 c9          movdqa %xmm0,-0x37(%rdi)
    0.00 :	   83a9d:       66 0f 7f 47 d9          movdqa %xmm0,-0x27(%rdi)
    0.00 :	   83aa2:       66 0f 7f 47 e9          movdqa %xmm0,-0x17(%rdi)
    0.00 :	   83aa7:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83aaa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83aae:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83ab1:       c3                      retq   
    0.00 :	   83ab2:       66 0f 7f 87 48 ff ff    movdqa %xmm0,-0xb8(%rdi)
    0.00 :	   83ab9:       ff 
    0.00 :	   83aba:       66 0f 7f 87 58 ff ff    movdqa %xmm0,-0xa8(%rdi)
    0.00 :	   83ac1:       ff 
    0.00 :	   83ac2:       66 0f 7f 87 68 ff ff    movdqa %xmm0,-0x98(%rdi)
    0.00 :	   83ac9:       ff 
    0.00 :	   83aca:       66 0f 7f 87 78 ff ff    movdqa %xmm0,-0x88(%rdi)
    0.00 :	   83ad1:       ff 
    0.00 :	   83ad2:       66 0f 7f 47 88          movdqa %xmm0,-0x78(%rdi)
    0.00 :	   83ad7:       66 0f 7f 47 98          movdqa %xmm0,-0x68(%rdi)
    0.00 :	   83adc:       66 0f 7f 47 a8          movdqa %xmm0,-0x58(%rdi)
    0.00 :	   83ae1:       66 0f 7f 47 b8          movdqa %xmm0,-0x48(%rdi)
    0.00 :	   83ae6:       66 0f 7f 47 c8          movdqa %xmm0,-0x38(%rdi)
    0.00 :	   83aeb:       66 0f 7f 47 d8          movdqa %xmm0,-0x28(%rdi)
    0.00 :	   83af0:       66 0f 7f 47 e8          movdqa %xmm0,-0x18(%rdi)
    0.00 :	   83af5:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   83af9:       c3                      retq   
    0.00 :	   83afa:       66 0f 7f 87 47 ff ff    movdqa %xmm0,-0xb9(%rdi)
    0.00 :	   83b01:       ff 
    0.00 :	   83b02:       66 0f 7f 87 57 ff ff    movdqa %xmm0,-0xa9(%rdi)
    0.00 :	   83b09:       ff 
    0.00 :	   83b0a:       66 0f 7f 87 67 ff ff    movdqa %xmm0,-0x99(%rdi)
    0.00 :	   83b11:       ff 
    0.00 :	   83b12:       66 0f 7f 87 77 ff ff    movdqa %xmm0,-0x89(%rdi)
    0.00 :	   83b19:       ff 
    0.00 :	   83b1a:       66 0f 7f 47 87          movdqa %xmm0,-0x79(%rdi)
    0.00 :	   83b1f:       66 0f 7f 47 97          movdqa %xmm0,-0x69(%rdi)
    0.00 :	   83b24:       66 0f 7f 47 a7          movdqa %xmm0,-0x59(%rdi)
    0.00 :	   83b29:       66 0f 7f 47 b7          movdqa %xmm0,-0x49(%rdi)
    0.00 :	   83b2e:       66 0f 7f 47 c7          movdqa %xmm0,-0x39(%rdi)
    0.00 :	   83b33:       66 0f 7f 47 d7          movdqa %xmm0,-0x29(%rdi)
    0.00 :	   83b38:       66 0f 7f 47 e7          movdqa %xmm0,-0x19(%rdi)
    0.00 :	   83b3d:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   83b41:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83b44:       c3                      retq   
    0.00 :	   83b45:       66 0f 7f 87 46 ff ff    movdqa %xmm0,-0xba(%rdi)
    0.00 :	   83b4c:       ff 
    0.00 :	   83b4d:       66 0f 7f 87 56 ff ff    movdqa %xmm0,-0xaa(%rdi)
    0.00 :	   83b54:       ff 
    0.00 :	   83b55:       66 0f 7f 87 66 ff ff    movdqa %xmm0,-0x9a(%rdi)
    0.00 :	   83b5c:       ff 
    0.00 :	   83b5d:       66 0f 7f 87 76 ff ff    movdqa %xmm0,-0x8a(%rdi)
    0.00 :	   83b64:       ff 
    0.00 :	   83b65:       66 0f 7f 47 86          movdqa %xmm0,-0x7a(%rdi)
    0.00 :	   83b6a:       66 0f 7f 47 96          movdqa %xmm0,-0x6a(%rdi)
    0.00 :	   83b6f:       66 0f 7f 47 a6          movdqa %xmm0,-0x5a(%rdi)
    0.00 :	   83b74:       66 0f 7f 47 b6          movdqa %xmm0,-0x4a(%rdi)
    0.00 :	   83b79:       66 0f 7f 47 c6          movdqa %xmm0,-0x3a(%rdi)
    0.00 :	   83b7e:       66 0f 7f 47 d6          movdqa %xmm0,-0x2a(%rdi)
    0.00 :	   83b83:       66 0f 7f 47 e6          movdqa %xmm0,-0x1a(%rdi)
    0.00 :	   83b88:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   83b8c:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83b90:       c3                      retq   
    0.00 :	   83b91:       66 0f 7f 87 45 ff ff    movdqa %xmm0,-0xbb(%rdi)
    0.00 :	   83b98:       ff 
    0.00 :	   83b99:       66 0f 7f 87 55 ff ff    movdqa %xmm0,-0xab(%rdi)
    0.00 :	   83ba0:       ff 
    0.00 :	   83ba1:       66 0f 7f 87 65 ff ff    movdqa %xmm0,-0x9b(%rdi)
    0.00 :	   83ba8:       ff 
    0.00 :	   83ba9:       66 0f 7f 87 75 ff ff    movdqa %xmm0,-0x8b(%rdi)
    0.00 :	   83bb0:       ff 
    0.00 :	   83bb1:       66 0f 7f 47 85          movdqa %xmm0,-0x7b(%rdi)
    0.00 :	   83bb6:       66 0f 7f 47 95          movdqa %xmm0,-0x6b(%rdi)
    0.00 :	   83bbb:       66 0f 7f 47 a5          movdqa %xmm0,-0x5b(%rdi)
    0.00 :	   83bc0:       66 0f 7f 47 b5          movdqa %xmm0,-0x4b(%rdi)
    0.00 :	   83bc5:       66 0f 7f 47 c5          movdqa %xmm0,-0x3b(%rdi)
    0.00 :	   83bca:       66 0f 7f 47 d5          movdqa %xmm0,-0x2b(%rdi)
    0.00 :	   83bcf:       66 0f 7f 47 e5          movdqa %xmm0,-0x1b(%rdi)
    0.00 :	   83bd4:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   83bd8:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83bdc:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83bdf:       c3                      retq   
    0.00 :	   83be0:       66 0f 7f 87 44 ff ff    movdqa %xmm0,-0xbc(%rdi)
    0.00 :	   83be7:       ff 
    0.00 :	   83be8:       66 0f 7f 87 54 ff ff    movdqa %xmm0,-0xac(%rdi)
    0.00 :	   83bef:       ff 
    0.00 :	   83bf0:       66 0f 7f 87 64 ff ff    movdqa %xmm0,-0x9c(%rdi)
    0.00 :	   83bf7:       ff 
    0.00 :	   83bf8:       66 0f 7f 87 74 ff ff    movdqa %xmm0,-0x8c(%rdi)
    0.00 :	   83bff:       ff 
    0.00 :	   83c00:       66 0f 7f 47 84          movdqa %xmm0,-0x7c(%rdi)
    0.00 :	   83c05:       66 0f 7f 47 94          movdqa %xmm0,-0x6c(%rdi)
    0.00 :	   83c0a:       66 0f 7f 47 a4          movdqa %xmm0,-0x5c(%rdi)
    0.00 :	   83c0f:       66 0f 7f 47 b4          movdqa %xmm0,-0x4c(%rdi)
    0.00 :	   83c14:       66 0f 7f 47 c4          movdqa %xmm0,-0x3c(%rdi)
    0.00 :	   83c19:       66 0f 7f 47 d4          movdqa %xmm0,-0x2c(%rdi)
    0.00 :	   83c1e:       66 0f 7f 47 e4          movdqa %xmm0,-0x1c(%rdi)
    0.00 :	   83c23:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   83c27:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83c2a:       c3                      retq   
    0.00 :	   83c2b:       66 0f 7f 87 43 ff ff    movdqa %xmm0,-0xbd(%rdi)
    0.00 :	   83c32:       ff 
    0.00 :	   83c33:       66 0f 7f 87 53 ff ff    movdqa %xmm0,-0xad(%rdi)
    0.00 :	   83c3a:       ff 
    0.00 :	   83c3b:       66 0f 7f 87 63 ff ff    movdqa %xmm0,-0x9d(%rdi)
    0.00 :	   83c42:       ff 
    0.00 :	   83c43:       66 0f 7f 87 73 ff ff    movdqa %xmm0,-0x8d(%rdi)
    0.00 :	   83c4a:       ff 
    0.00 :	   83c4b:       66 0f 7f 47 83          movdqa %xmm0,-0x7d(%rdi)
    0.00 :	   83c50:       66 0f 7f 47 93          movdqa %xmm0,-0x6d(%rdi)
    0.00 :	   83c55:       66 0f 7f 47 a3          movdqa %xmm0,-0x5d(%rdi)
    0.00 :	   83c5a:       66 0f 7f 47 b3          movdqa %xmm0,-0x4d(%rdi)
    0.00 :	   83c5f:       66 0f 7f 47 c3          movdqa %xmm0,-0x3d(%rdi)
    0.00 :	   83c64:       66 0f 7f 47 d3          movdqa %xmm0,-0x2d(%rdi)
    0.00 :	   83c69:       66 0f 7f 47 e3          movdqa %xmm0,-0x1d(%rdi)
    0.00 :	   83c6e:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   83c72:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83c75:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83c78:       c3                      retq   
    0.00 :	   83c79:       66 0f 7f 87 42 ff ff    movdqa %xmm0,-0xbe(%rdi)
    0.00 :	   83c80:       ff 
    0.00 :	   83c81:       66 0f 7f 87 52 ff ff    movdqa %xmm0,-0xae(%rdi)
    0.00 :	   83c88:       ff 
    0.00 :	   83c89:       66 0f 7f 87 62 ff ff    movdqa %xmm0,-0x9e(%rdi)
    0.00 :	   83c90:       ff 
    0.00 :	   83c91:       66 0f 7f 87 72 ff ff    movdqa %xmm0,-0x8e(%rdi)
    0.00 :	   83c98:       ff 
    0.00 :	   83c99:       66 0f 7f 47 82          movdqa %xmm0,-0x7e(%rdi)
    0.00 :	   83c9e:       66 0f 7f 47 92          movdqa %xmm0,-0x6e(%rdi)
    0.00 :	   83ca3:       66 0f 7f 47 a2          movdqa %xmm0,-0x5e(%rdi)
    0.00 :	   83ca8:       66 0f 7f 47 b2          movdqa %xmm0,-0x4e(%rdi)
    0.00 :	   83cad:       66 0f 7f 47 c2          movdqa %xmm0,-0x3e(%rdi)
    0.00 :	   83cb2:       66 0f 7f 47 d2          movdqa %xmm0,-0x2e(%rdi)
    0.00 :	   83cb7:       66 0f 7f 47 e2          movdqa %xmm0,-0x1e(%rdi)
    0.00 :	   83cbc:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   83cc0:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83cc3:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83cc7:       c3                      retq   
    0.00 :	   83cc8:       66 0f 7f 87 41 ff ff    movdqa %xmm0,-0xbf(%rdi)
    0.00 :	   83ccf:       ff 
    0.00 :	   83cd0:       66 0f 7f 87 51 ff ff    movdqa %xmm0,-0xaf(%rdi)
    0.00 :	   83cd7:       ff 
    0.00 :	   83cd8:       66 0f 7f 87 61 ff ff    movdqa %xmm0,-0x9f(%rdi)
    0.00 :	   83cdf:       ff 
    0.00 :	   83ce0:       66 0f 7f 87 71 ff ff    movdqa %xmm0,-0x8f(%rdi)
    0.00 :	   83ce7:       ff 
    0.00 :	   83ce8:       66 0f 7f 47 81          movdqa %xmm0,-0x7f(%rdi)
    0.00 :	   83ced:       66 0f 7f 47 91          movdqa %xmm0,-0x6f(%rdi)
    0.00 :	   83cf2:       66 0f 7f 47 a1          movdqa %xmm0,-0x5f(%rdi)
    0.00 :	   83cf7:       66 0f 7f 47 b1          movdqa %xmm0,-0x4f(%rdi)
    0.00 :	   83cfc:       66 0f 7f 47 c1          movdqa %xmm0,-0x3f(%rdi)
    0.00 :	   83d01:       66 0f 7f 47 d1          movdqa %xmm0,-0x2f(%rdi)
    0.00 :	   83d06:       66 0f 7f 47 e1          movdqa %xmm0,-0x1f(%rdi)
    0.00 :	   83d0b:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   83d0f:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83d12:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83d16:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83d19:       c3                      retq   
    0.00 :	   83d1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   83d20:       44 8b 0d 11 e4 2e 00    mov    0x2ee411(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83d27:       4d 39 c8                cmp    %r9,%r8
    0.00 :	   83d2a:       77 64                   ja     83d90 <__GI_memset+0x920>
    0.00 :	   83d2c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   83d30:       4d 8d 40 80             lea    -0x80(%r8),%r8
    0.00 :	   83d34:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
    0.00 :	   83d3b:       66 0f 7f 07             movdqa %xmm0,(%rdi)
    0.00 :	   83d3f:       66 0f 7f 47 10          movdqa %xmm0,0x10(%rdi)
    0.00 :	   83d44:       66 0f 7f 47 20          movdqa %xmm0,0x20(%rdi)
    0.00 :	   83d49:       66 0f 7f 47 30          movdqa %xmm0,0x30(%rdi)
    0.00 :	   83d4e:       66 0f 7f 47 40          movdqa %xmm0,0x40(%rdi)
    0.00 :	   83d53:       66 0f 7f 47 50          movdqa %xmm0,0x50(%rdi)
    0.00 :	   83d58:       66 0f 7f 47 60          movdqa %xmm0,0x60(%rdi)
    0.00 :	   83d5d:       66 0f 7f 47 70          movdqa %xmm0,0x70(%rdi)
    0.00 :	   83d62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83d69:       73 c5                   jae    83d30 <__GI_memset+0x8c0>
    0.00 :	   83d6b:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83d6e:       4c 8d 1d 38 fb ff ff    lea    -0x4c8(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83d75:       48 8d 0d e4 25 0b 00    lea    0xb25e4(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83d7c:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83d81:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83d85:       41 ff e3                jmpq   *%r11
    0.00 :	   83d88:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d8f:       00 
    0.00 :	   83d90:       49 83 f9 00             cmp    $0x0,%r9
    0.00 :	   83d94:       74 9a                   je     83d30 <__GI_memset+0x8c0>
    0.00 :	   83d96:       eb 08                   jmp    83da0 <__GI_memset+0x930>
    0.00 :	   83d98:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d9f:       00 
    0.00 :	   83da0:       4d 8d 40 80             lea    -0x80(%r8),%r8
    0.00 :	   83da4:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
    0.00 :	   83dab:       66 0f e7 07             movntdq %xmm0,(%rdi)
    0.00 :	   83daf:       66 0f e7 47 10          movntdq %xmm0,0x10(%rdi)
    0.00 :	   83db4:       66 0f e7 47 20          movntdq %xmm0,0x20(%rdi)
    0.00 :	   83db9:       66 0f e7 47 30          movntdq %xmm0,0x30(%rdi)
    0.00 :	   83dbe:       66 0f e7 47 40          movntdq %xmm0,0x40(%rdi)
    0.00 :	   83dc3:       66 0f e7 47 50          movntdq %xmm0,0x50(%rdi)
    0.00 :	   83dc8:       66 0f e7 47 60          movntdq %xmm0,0x60(%rdi)
    0.00 :	   83dcd:       66 0f e7 47 70          movntdq %xmm0,0x70(%rdi)
    0.00 :	   83dd2:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83dd9:       73 c5                   jae    83da0 <__GI_memset+0x930>
    0.00 :	   83ddb:       0f ae f8                sfence 
    0.00 :	   83dde:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83de1:       4c 8d 1d c5 fa ff ff    lea    -0x53b(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83de8:       48 8d 0d 71 25 0b 00    lea    0xb2571(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83def:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83df4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83df8:       41 ff e3                jmpq   *%r11
    0.00 :	   83dfb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83e00:       49 81 f8 00 20 00 00    cmp    $0x2000,%r8
    0.00 :	   83e07:       0f 83 83 00 00 00       jae    83e90 <__GI_memset+0xa20>
    0.00 :	   83e0d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e10:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83e13:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83e17:       74 52                   je     83e6b <__GI_memset+0x9fb>
    0.00 :	   83e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83e20:       48 ff c9                dec    %rcx
    0.00 :	   83e23:       48 89 17                mov    %rdx,(%rdi)
    0.00 :	   83e26:       48 89 57 08             mov    %rdx,0x8(%rdi)
    0.00 :	   83e2a:       48 89 57 10             mov    %rdx,0x10(%rdi)
    0.00 :	   83e2e:       48 89 57 18             mov    %rdx,0x18(%rdi)
    0.00 :	   83e32:       48 89 57 20             mov    %rdx,0x20(%rdi)
    0.00 :	   83e36:       48 89 57 28             mov    %rdx,0x28(%rdi)
    0.00 :	   83e3a:       48 89 57 30             mov    %rdx,0x30(%rdi)
    0.00 :	   83e3e:       48 89 57 38             mov    %rdx,0x38(%rdi)
    0.00 :	   83e42:       48 89 57 40             mov    %rdx,0x40(%rdi)
    0.00 :	   83e46:       48 89 57 48             mov    %rdx,0x48(%rdi)
    0.00 :	   83e4a:       48 89 57 50             mov    %rdx,0x50(%rdi)
    0.00 :	   83e4e:       48 89 57 58             mov    %rdx,0x58(%rdi)
    0.00 :	   83e52:       48 89 57 60             mov    %rdx,0x60(%rdi)
    0.00 :	   83e56:       48 89 57 68             mov    %rdx,0x68(%rdi)
    0.00 :	   83e5a:       48 89 57 70             mov    %rdx,0x70(%rdi)
    0.00 :	   83e5e:       48 89 57 78             mov    %rdx,0x78(%rdi)
    0.00 :	   83e62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83e69:       75 b5                   jne    83e20 <__GI_memset+0x9b0>
    0.00 :	   83e6b:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83e6f:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83e73:       4c 8d 1d 42 f6 ff ff    lea    -0x9be(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83e7a:       48 8d 0d 8f 23 0b 00    lea    0xb238f(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83e81:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83e86:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83e8a:       41 ff e3                jmpq   *%r11
    0.00 :	   83e8d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e90:       44 8b 0d a1 e2 2e 00    mov    0x2ee2a1(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83e97:       4d 39 c1                cmp    %r8,%r9
    0.00 :	   83e9a:       4d 0f 47 c8             cmova  %r8,%r9
    0.00 :	   83e9e:       76 10                   jbe    83eb0 <__GI_memset+0xa40>
    0.00 :	   83ea0:       49 81 f8 00 00 01 00    cmp    $0x10000,%r8
    0.00 :	   83ea7:       0f 83 63 ff ff ff       jae    83e10 <__GI_memset+0x9a0>
    0.00 :	   83ead:       0f 1f 00                nopl   (%rax)
    0.00 :	   83eb0:       4c 89 c9                mov    %r9,%rcx
    0.00 :	   83eb3:       49 83 e1 f8             and    $0xfffffffffffffff8,%r9
    0.00 :	   83eb7:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   83ebb:       74 07                   je     83ec4 <__GI_memset+0xa54>
    0.00 :	   83ebd:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ebf:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	   83ec2:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ec4:       4d 29 c8                sub    %r9,%r8
    0.00 :	   83ec7:       77 27                   ja     83ef0 <__GI_memset+0xa80>
    0.00 :	   83ec9:       41 83 e0 07             and    $0x7,%r8d
    0.00 :	   83ecd:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83ed1:       4c 8d 1d e4 f5 ff ff    lea    -0xa1c(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83ed8:       48 8d 0d 31 23 0b 00    lea    0xb2331(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83edf:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83ee4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83ee8:       41 ff e3                jmpq   *%r11
    0.00 :	   83eeb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83ef0:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83ef3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83ef7:       74 65                   je     83f5e <__GI_memset+0xaee>
    0.00 :	   83ef9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83f00:       48 ff c9                dec    %rcx
    0.00 :	   83f03:       48 0f c3 17             movnti %rdx,(%rdi)
    0.00 :	   83f07:       48 0f c3 57 08          movnti %rdx,0x8(%rdi)
    0.00 :	   83f0c:       48 0f c3 57 10          movnti %rdx,0x10(%rdi)
    0.00 :	   83f11:       48 0f c3 57 18          movnti %rdx,0x18(%rdi)
    0.00 :	   83f16:       48 0f c3 57 20          movnti %rdx,0x20(%rdi)
    0.00 :	   83f1b:       48 0f c3 57 28          movnti %rdx,0x28(%rdi)
    0.00 :	   83f20:       48 0f c3 57 30          movnti %rdx,0x30(%rdi)
    0.00 :	   83f25:       48 0f c3 57 38          movnti %rdx,0x38(%rdi)
    0.00 :	   83f2a:       48 0f c3 57 40          movnti %rdx,0x40(%rdi)
    0.00 :	   83f2f:       48 0f c3 57 48          movnti %rdx,0x48(%rdi)
    0.00 :	   83f34:       48 0f c3 57 50          movnti %rdx,0x50(%rdi)
    0.00 :	   83f39:       48 0f c3 57 58          movnti %rdx,0x58(%rdi)
    0.00 :	   83f3e:       48 0f c3 57 60          movnti %rdx,0x60(%rdi)
    0.00 :	   83f43:       48 0f c3 57 68          movnti %rdx,0x68(%rdi)
    0.00 :	   83f48:       48 0f c3 57 70          movnti %rdx,0x70(%rdi)
    0.00 :	   83f4d:       48 0f c3 57 78          movnti %rdx,0x78(%rdi)
    0.00 :	   83f52:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83f59:       75 a5                   jne    83f00 <__GI_memset+0xa90>
    0.00 :	   83f5b:       0f ae f8                sfence 
    0.00 :	   83f5e:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83f62:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83f66:       4c 8d 1d 4f f5 ff ff    lea    -0xab1(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83f6d:       48 8d 0d 9c 22 0b 00    lea    0xb229c(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83f74:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83f79:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83f7d:       41 ff e3                jmpq   *%r11

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000084750 <memcpy>:
    0.00 :	   84750:       48 83 fa 20             cmp    $0x20,%rdx
    0.00 :	   84754:       48 89 f8                mov    %rdi,%rax
    0.00 :	   84757:       73 77                   jae    847d0 <memcpy+0x80>
    0.00 :	   84759:       f6 c2 01                test   $0x1,%dl
    0.00 :	   8475c:       74 0b                   je     84769 <memcpy+0x19>
    0.00 :	   8475e:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   84761:       88 0f                   mov    %cl,(%rdi)
    0.00 :	   84763:       48 ff c6                inc    %rsi
    0.00 :	   84766:       48 ff c7                inc    %rdi
    0.00 :	   84769:       f6 c2 02                test   $0x2,%dl
    0.00 :	   8476c:       74 12                   je     84780 <memcpy+0x30>
    0.00 :	   8476e:       0f b7 0e                movzwl (%rsi),%ecx
    0.00 :	   84771:       66 89 0f                mov    %cx,(%rdi)
    0.00 :	   84774:       48 83 c6 02             add    $0x2,%rsi
    0.00 :	   84778:       48 83 c7 02             add    $0x2,%rdi
    0.00 :	   8477c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   84780:       f6 c2 04                test   $0x4,%dl
    0.00 :	   84783:       74 0c                   je     84791 <memcpy+0x41>
    0.00 :	   84785:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	   84787:       89 0f                   mov    %ecx,(%rdi)
    0.00 :	   84789:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	   8478d:       48 83 c7 04             add    $0x4,%rdi
    0.00 :	   84791:       f6 c2 08                test   $0x8,%dl
    0.00 :	   84794:       74 0e                   je     847a4 <memcpy+0x54>
    0.00 :	   84796:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   84799:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   8479c:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	   847a0:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	   847a4:       81 e2 f0 00 00 00       and    $0xf0,%edx
    0.00 :	   847aa:       74 1f                   je     847cb <memcpy+0x7b>
    0.00 :	   847ac:       0f 1f 40 00             nopl   0x0(%rax)
 ??:0
  100.00 :	   847b0:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   847b3:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   847b7:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   847ba:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   847be:       83 ea 10                sub    $0x10,%edx
    0.00 :	   847c1:       48 8d 76 10             lea    0x10(%rsi),%rsi
    0.00 :	   847c5:       48 8d 7f 10             lea    0x10(%rdi),%rdi
    0.00 :	   847c9:       75 e5                   jne    847b0 <memcpy+0x60>
    0.00 :	   847cb:       f3 c3                   repz retq 
    0.00 :	   847cd:       0f 1f 00                nopl   (%rax)
    0.00 :	   847d0:       48 89 44 24 f8          mov    %rax,-0x8(%rsp)
    0.00 :	   847d5:       89 f1                   mov    %esi,%ecx
    0.00 :	   847d7:       83 e1 07                and    $0x7,%ecx
    0.00 :	   847da:       74 34                   je     84810 <memcpy+0xc0>
    0.00 :	   847dc:       48 8d 54 11 f8          lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	   847e1:       83 e9 08                sub    $0x8,%ecx
    0.00 :	   847e4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   847eb:       00 00 00 00 00 
    0.00 :	   847f0:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	   847f3:       88 07                   mov    %al,(%rdi)
    0.00 :	   847f5:       ff c1                   inc    %ecx
    0.00 :	   847f7:       48 8d 76 01             lea    0x1(%rsi),%rsi
    0.00 :	   847fb:       48 8d 7f 01             lea    0x1(%rdi),%rdi
    0.00 :	   847ff:       75 ef                   jne    847f0 <memcpy+0xa0>
    0.00 :	   84801:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   84808:       0f 1f 84 00 00 00 00 
    0.00 :	   8480f:       00 
    0.00 :	   84810:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	   84817:       77 77                   ja     84890 <memcpy+0x140>
    0.00 :	   84819:       89 d1                   mov    %edx,%ecx
    0.00 :	   8481b:       c1 e9 05                shr    $0x5,%ecx
    0.00 :	   8481e:       74 60                   je     84880 <memcpy+0x130>
    0.00 :	   84820:       ff c9                   dec    %ecx
    0.00 :	   84822:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84825:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84829:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8482d:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84831:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84834:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84838:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8483c:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84840:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   84844:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84848:       74 36                   je     84880 <memcpy+0x130>
    0.00 :	   8484a:       ff c9                   dec    %ecx
    0.00 :	   8484c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   8484f:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84853:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84857:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8485b:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   8485e:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84862:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84866:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8486a:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   8486e:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84872:       75 ac                   jne    84820 <memcpy+0xd0>
    0.00 :	   84874:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8487b:       00 00 00 00 00 
    0.00 :	   84880:       83 e2 1f                and    $0x1f,%edx
    0.00 :	   84883:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84888:       0f 85 cb fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   8488e:       f3 c3                   repz retq 
    0.00 :	   84890:       4c 8b 1d 79 d8 2e 00    mov    0x2ed879(%rip),%r11        # 372110 <__x86_64_data_cache_size_half>
    0.00 :	   84897:       49 39 d3                cmp    %rdx,%r11
    0.00 :	   8489a:       4c 0f 47 da             cmova  %rdx,%r11
    0.00 :	   8489e:       4c 89 d9                mov    %r11,%rcx
    0.00 :	   848a1:       49 83 e3 f8             and    $0xfffffffffffffff8,%r11
    0.00 :	   848a5:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   848a9:       74 05                   je     848b0 <memcpy+0x160>
    0.00 :	   848ab:       f3 48 a5                rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	   848ae:       66 90                   xchg   %ax,%ax
    0.00 :	   848b0:       4c 29 da                sub    %r11,%rdx
    0.00 :	   848b3:       48 f7 c2 f8 ff ff ff    test   $0xfffffffffffffff8,%rdx
    0.00 :	   848ba:       75 14                   jne    848d0 <memcpy+0x180>
    0.00 :	   848bc:       83 e2 07                and    $0x7,%edx
    0.00 :	   848bf:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   848c4:       0f 85 8f fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   848ca:       f3 c3                   repz retq 
    0.00 :	   848cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   848d0:       4c 8b 05 59 d8 2e 00    mov    0x2ed859(%rip),%r8        # 372130 <__x86_64_shared_cache_size_half>
    0.00 :	   848d7:       49 39 d0                cmp    %rdx,%r8
    0.00 :	   848da:       4c 0f 47 c2             cmova  %rdx,%r8
    0.00 :	   848de:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   848e1:       49 83 e0 c0             and    $0xffffffffffffffc0,%r8
    0.00 :	   848e5:       48 c1 e9 06             shr    $0x6,%rcx
    0.00 :	   848e9:       0f 84 ab 01 00 00       je     84a9a <memcpy+0x34a>
    0.00 :	   848ef:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   848f4:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   848f9:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   848fe:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   84903:       83 3d 06 2b 2f 00 00    cmpl   $0x0,0x2f2b06(%rip)        # 377410 <__x86_64_prefetchw>
    0.00 :	   8490a:       0f 84 c0 00 00 00       je     849d0 <memcpy+0x280>
    0.00 :	   84910:       48 ff c9                dec    %rcx
    0.00 :	   84913:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84916:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   8491a:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8491e:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84922:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84926:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   8492a:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8492e:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84932:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   84939:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84940:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84943:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84947:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8494b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8494f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84953:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84957:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   8495b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   8495f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84963:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84967:       0f 84 19 01 00 00       je     84a86 <memcpy+0x336>
    0.00 :	   8496d:       48 ff c9                dec    %rcx
    0.00 :	   84970:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84973:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84977:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8497b:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8497f:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84983:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84987:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8498b:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   8498f:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84992:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84996:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8499a:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8499e:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   849a2:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   849a6:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   849aa:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   849ae:       0f 0d 8f 40 03 00 00    prefetchw 0x340(%rdi)
    0.00 :	   849b5:       0f 0d 8f 80 03 00 00    prefetchw 0x380(%rdi)
    0.00 :	   849bc:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   849c0:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   849c4:       0f 85 46 ff ff ff       jne    84910 <memcpy+0x1c0>
    0.00 :	   849ca:       e9 b7 00 00 00          jmpq   84a86 <memcpy+0x336>
    0.00 :	   849cf:       90                      nop
    0.00 :	   849d0:       48 ff c9                dec    %rcx
    0.00 :	   849d3:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   849d6:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   849da:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   849de:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   849e2:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   849e6:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   849ea:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   849ee:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   849f2:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   849f9:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84a00:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a03:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a07:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a0b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a0f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a13:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a17:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a1b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a1f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a23:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a27:       74 5d                   je     84a86 <memcpy+0x336>
    0.00 :	   84a29:       48 ff c9                dec    %rcx
    0.00 :	   84a2c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84a2f:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84a33:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84a37:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84a3b:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84a3f:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84a43:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84a47:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84a4b:       0f 18 8f 40 03 00 00    prefetcht0 0x340(%rdi)
    0.00 :	   84a52:       0f 18 8f 80 03 00 00    prefetcht0 0x380(%rdi)
    0.00 :	   84a59:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a5c:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a60:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a64:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a68:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a6c:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a70:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a74:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a78:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a7c:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a80:       0f 85 4a ff ff ff       jne    849d0 <memcpy+0x280>
    0.00 :	   84a86:       48 8b 5c 24 d8          mov    -0x28(%rsp),%rbx
    0.00 :	   84a8b:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84a90:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84a95:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84a9a:       4c 29 c2                sub    %r8,%rdx
    0.00 :	   84a9d:       48 f7 c2 c0 ff ff ff    test   $0xffffffffffffffc0,%rdx
    0.00 :	   84aa4:       75 1a                   jne    84ac0 <memcpy+0x370>
    0.00 :	   84aa6:       83 e2 3f                and    $0x3f,%edx
    0.00 :	   84aa9:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84aae:       0f 85 a5 fc ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84ab4:       f3 c3                   repz retq 
    0.00 :	   84ab6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   84abd:       00 00 00 
    0.00 :	   84ac0:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   84ac3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   84ac7:       0f 84 d8 00 00 00       je     84ba5 <memcpy+0x455>
    0.00 :	   84acd:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   84ad2:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   84ad7:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   84adc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   84ae0:       0f 18 86 00 03 00 00    prefetchnta 0x300(%rsi)
    0.00 :	   84ae7:       0f 18 86 40 03 00 00    prefetchnta 0x340(%rsi)
    0.00 :	   84aee:       48 ff c9                dec    %rcx
    0.00 :	   84af1:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84af4:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84af8:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84afc:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84b00:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84b04:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84b08:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84b0c:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84b10:       48 0f c3 07             movnti %rax,(%rdi)
    0.00 :	   84b14:       4c 0f c3 47 08          movnti %r8,0x8(%rdi)
    0.00 :	   84b19:       4c 0f c3 4f 10          movnti %r9,0x10(%rdi)
    0.00 :	   84b1e:       4c 0f c3 57 18          movnti %r10,0x18(%rdi)
    0.00 :	   84b23:       4c 0f c3 5f 20          movnti %r11,0x20(%rdi)
    0.00 :	   84b28:       4c 0f c3 67 28          movnti %r12,0x28(%rdi)
    0.00 :	   84b2d:       4c 0f c3 6f 30          movnti %r13,0x30(%rdi)
    0.00 :	   84b32:       4c 0f c3 77 38          movnti %r14,0x38(%rdi)
    0.00 :	   84b37:       48 8b 46 40             mov    0x40(%rsi),%rax
    0.00 :	   84b3b:       4c 8b 46 48             mov    0x48(%rsi),%r8
    0.00 :	   84b3f:       4c 8b 4e 50             mov    0x50(%rsi),%r9
    0.00 :	   84b43:       4c 8b 56 58             mov    0x58(%rsi),%r10
    0.00 :	   84b47:       4c 8b 5e 60             mov    0x60(%rsi),%r11
    0.00 :	   84b4b:       4c 8b 66 68             mov    0x68(%rsi),%r12
    0.00 :	   84b4f:       4c 8b 6e 70             mov    0x70(%rsi),%r13
    0.00 :	   84b53:       4c 8b 76 78             mov    0x78(%rsi),%r14
    0.00 :	   84b57:       48 0f c3 47 40          movnti %rax,0x40(%rdi)
    0.00 :	   84b5c:       4c 0f c3 47 48          movnti %r8,0x48(%rdi)
    0.00 :	   84b61:       4c 0f c3 4f 50          movnti %r9,0x50(%rdi)
    0.00 :	   84b66:       4c 0f c3 57 58          movnti %r10,0x58(%rdi)
    0.00 :	   84b6b:       4c 0f c3 5f 60          movnti %r11,0x60(%rdi)
    0.00 :	   84b70:       4c 0f c3 67 68          movnti %r12,0x68(%rdi)
    0.00 :	   84b75:       4c 0f c3 6f 70          movnti %r13,0x70(%rdi)
    0.00 :	   84b7a:       4c 0f c3 77 78          movnti %r14,0x78(%rdi)
    0.00 :	   84b7f:       48 8d b6 80 00 00 00    lea    0x80(%rsi),%rsi
    0.00 :	   84b86:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   84b8d:       0f 85 4d ff ff ff       jne    84ae0 <memcpy+0x390>
    0.00 :	   84b93:       0f ae f8                sfence 
    0.00 :	   84b96:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84b9b:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84ba0:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84ba5:       83 e2 7f                and    $0x7f,%edx
    0.00 :	   84ba8:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84bad:       0f 85 a6 fb ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84bb3:       f3 c3                   repz retq 

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000cd5c0 <__read>:
    0.00 :	   cd5c0:       83 3d ed a0 2a 00 00    cmpl   $0x0,0x2aa0ed(%rip)        # 3776b4 <__libc_multiple_threads>
    0.00 :	   cd5c7:       75 10                   jne    cd5d9 <__read_nocancel+0x10>
         :
         :	00000000000cd5c9 <__read_nocancel>:
    0.00 :	   cd5c9:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5ce:       0f 05                   syscall 
 ??:0
  100.00 :	   cd5d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd5d6:       73 31                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd5d8:       c3                      retq   
    0.00 :	   cd5d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   cd5dd:       e8 4e ac 01 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   cd5e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   cd5e6:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5eb:       0f 05                   syscall 
    0.00 :	   cd5ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   cd5f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   cd5f4:       e8 97 ac 01 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   cd5f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   cd5fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   cd600:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd606:       73 01                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd608:       c3                      retq   
    0.00 :	   cd609:       48 8b 0d 28 48 2a 00    mov    0x2a4828(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   cd610:       31 d2                   xor    %edx,%edx
    0.00 :	   cd612:       48 29 c2                sub    %rax,%rdx
    0.00 :	   cd615:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   cd618:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   cd61c:       eb ea                   jmp    cd608 <__read_nocancel+0x3f>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000db0c0 <__lseek>:
    0.00 :	   db0c0:       83 3d ed c5 29 00 00    cmpl   $0x0,0x29c5ed(%rip)        # 3776b4 <__libc_multiple_threads>
    0.00 :	   db0c7:       75 10                   jne    db0d9 <__lseek_nocancel+0x10>
         :
         :	00000000000db0c9 <__lseek_nocancel>:
    0.00 :	   db0c9:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0ce:       0f 05                   syscall 
 ??:0
  100.00 :	   db0d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db0d6:       73 31                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db0d8:       c3                      retq   
    0.00 :	   db0d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   db0dd:       e8 4e d1 00 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   db0e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   db0e6:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0eb:       0f 05                   syscall 
    0.00 :	   db0ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   db0f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   db0f4:       e8 97 d1 00 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   db0f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   db0fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   db100:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db106:       73 01                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db108:       c3                      retq   
    0.00 :	   db109:       48 8b 0d 28 6d 29 00    mov    0x296d28(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   db110:       31 d2                   xor    %edx,%edx
    0.00 :	   db112:       48 29 c2                sub    %rax,%rdx
    0.00 :	   db115:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   db118:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   db11c:       eb ea                   jmp    db108 <__lseek_nocancel+0x3f>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000700 <igb_update_stats>:
    0.00 :	     700:       53                      push   %rbx
    0.00 :	     731:       48 89 fb 48 83          mov    $0x2b8,%edi
    0.00 :	     736:       ec 10 66                xor    %r10d,%r10d
    0.00 :	     739:       83 bf f8                xor    %r9d,%r9d
    0.00 :	     73c:       03 00                   test   %edi,%edi
    0.00 :	     73e:       00 00                   jle    78c <dma_unmap_page+0x75c>
    0.00 :	     740:       48 8b 87                mov    %rbx,%r8
    0.00 :	     743:       a0 04                   xor    %edi,%edi
    0.00 :	     745:       00 00 74                xor    %r10d,%r10d
    0.00 :	     748:       09 83 b8                xor    %r9d,%r9d
    0.00 :	     74b:       88 00 00 00 01          mov    $0xc030,%ecx
    0.00 :	     750:       74 0e 48                mov    %rcx,%rax
    0.00 :	     753:       83 c4 10 5b c3 0f 1f    add    0x570(%rbx),%rax
    0.00 :	     75a:       84 00                   mov    (%rax),%eax
    0.00 :	     75c:       00 00                   test   %eax,%eax
    0.00 :	     75e:       00 00 8b bf b8 02 00    mov    0x2c0(%r8),%rdx
    0.00 :	     765:       00 45                   je     771 <dma_unmap_page+0x741>
    0.00 :	     767:       31 d2                   mov    %eax,%eax
    0.00 :	     769:       45 31 c9 85             add    %rax,0x68(%rdx)
    0.00 :	     76d:       ff 7e 4c 49             add    %rax,0x70(%rsi)
    0.00 :	     771:       89 d8 31 ff             add    0x60(%rdx),%r10
    0.00 :	     775:       45 31 d2 45             add    0x58(%rdx),%r9
    0.00 :	     779:       31 c9 b9                add    $0x1,%edi
    0.00 :	     77c:       30 c0 00 00             add    $0x40,%rcx
    0.00 :	     780:       48 89 c8 48             add    $0x8,%r8
    0.00 :	     784:       03 83 70 05 00 00       cmp    %edi,0x2b8(%rbx)
    0.00 :	     78a:       8b 00                   jg     750 <dma_unmap_page+0x720>
    0.00 :	     78c:       85 c0 49 8b             mov    %r10,0x10(%rsi)
    0.00 :	     790:       90 c0 02                mov    %r9,(%rsi)
    0.00 :	     793:       00 00                   xor    %edi,%edi
    0.00 :	     795:       74 0a 89 c0 48 01 42    mov    0x234(%rbx),%r8d
    0.00 :	     79c:       68 48                   xor    %ecx,%ecx
    0.00 :	     79e:       01 46 70                test   %r8d,%r8d
    0.00 :	     7a1:       4c 03                   jle    7c9 <dma_unmap_page+0x799>
    0.00 :	     7a3:       52 60                   xor    %edi,%edi
    0.00 :	     7a5:       4c 03                   xor    %ecx,%ecx
    0.00 :	     7a7:       4a 58                   xor    %edx,%edx
    0.00 :	     7a9:       83 c7 01 48 83 c1 40    nopl   0x0(%rax)
    0.00 :	     7b0:       49 83 c0 08 39 bb b8    mov    0x238(%rbx,%rdx,8),%rax
    0.00 :	     7b7:       02 
    0.00 :	     7b8:       00 00 7f c4             add    $0x1,%rdx
    0.00 :	     7bc:       4c 89 56 10             add    0x58(%rax),%rdi
    0.00 :	     7c0:       4c 89 0e 31             add    0x50(%rax),%rcx
    0.00 :	     7c4:       ff 44 8b                cmp    %edx,%r8d
    0.00 :	     7c7:       83 34                   jg     7b0 <dma_unmap_page+0x780>
    0.00 :	     7c9:       02 00 00 31             mov    %rdi,0x18(%rsi)
    0.00 :	     7cd:       c9 45 85 c0             mov    %rcx,0x8(%rsi)
    0.00 :	     7d1:       7e 26 31 ff 31 c9 31    mov    0x570(%rbx),%rax
    0.00 :	     7d8:       d2 0f 1f 80 00 00 00    mov    0x9c8(%rbx),%rdx
    0.00 :	     7df:       00 48 8b 84 d3 38       add    $0x4000,%rax
    0.00 :	     7e5:       02 00                   mov    (%rax),%eax
    0.00 :	     7e7:       00 48                   mov    %eax,%eax
    0.00 :	     7e9:       83 c2 01                add    %rdx,%rax
    0.00 :	     7ec:       48 03 78 58 48 03 48    mov    0xa98(%rbx),%rdx
    0.00 :	     7f3:       50 41 39 d0 7f e7 48    mov    %rax,0x9c8(%rbx)
    0.00 :	     7fa:       89 7e 18 48 89 4e 08    mov    0x570(%rbx),%rax
    0.00 :	     801:       48 8b 83 70 05 00       add    $0x4074,%rax
    0.00 :	     807:       00 48                   mov    (%rax),%eax
    0.00 :	     809:       8b 93                   mov    %eax,%eax
    0.00 :	     80b:       c8 09 00                add    %rdx,%rax
    0.00 :	     80e:       00 48 05 00 40 00 00    mov    0xab8(%rbx),%rdx
    0.00 :	     815:       8b 00 89 c0 48 01 d0    mov    %rax,0xa98(%rbx)
    0.00 :	     81c:       48 8b 93 98 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     823:       48 89 83 c8 09 00       add    $0x4088,%rax
    0.00 :	     829:       00 48                   mov    (%rax),%eax
    0.00 :	     82b:       8b 83                   mov    %eax,%eax
    0.00 :	     82d:       70 05 00                add    %rdx,%rax
    0.00 :	     830:       00 48 05 74 40 00 00    mov    %rax,0xab8(%rbx)
    0.00 :	     837:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     83e:       48 8b 93 b8 0a 00       add    $0x408c,%rax
    0.00 :	     844:       00 48                   mov    (%rax),%eax
    0.00 :	     846:       89 83 98 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     84d:       8b 83 70 05 00 00 48    mov    0xaa0(%rbx),%rdx
    0.00 :	     854:       05 88 40 00 00 8b       add    $0x4078,%rax
    0.00 :	     85a:       00 89                   mov    (%rax),%eax
    0.00 :	     85c:       c0 48                   mov    %eax,%eax
    0.00 :	     85e:       01 d0 48                add    %rdx,%rax
    0.00 :	     861:       89 83 b8 0a 00 00 48    mov    0xaa8(%rbx),%rdx
    0.00 :	     868:       8b 83 70 05 00 00 48    mov    %rax,0xaa0(%rbx)
    0.00 :	     86f:       05 8c 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     876:       48 8b 83 70 05 00       add    $0x407c,%rax
    0.00 :	     87c:       00 48                   mov    (%rax),%eax
    0.00 :	     87e:       8b 93                   mov    %eax,%eax
    0.00 :	     880:       a0 0a 00                add    %rdx,%rax
    0.00 :	     883:       00 48 05 78 40 00 00    mov    0xae0(%rbx),%rdx
    0.00 :	     88a:       8b 00 89 c0 48 01 d0    mov    %rax,0xaa8(%rbx)
    0.00 :	     891:       48 8b 93 a8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     898:       48 89 83 a0 0a 00       add    $0x40ac,%rax
    0.00 :	     89e:       00 48                   mov    (%rax),%eax
    0.00 :	     8a0:       8b 83                   mov    %eax,%eax
    0.00 :	     8a2:       70 05 00                add    %rdx,%rax
    0.00 :	     8a5:       00 48 05 7c 40 00 00    mov    0xa68(%rbx),%rdx
    0.00 :	     8ac:       8b 00 89 c0 48 01 d0    mov    %rax,0xae0(%rbx)
    0.00 :	     8b3:       48 8b 93 e0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8ba:       48 89 83 a8 0a 00       add    $0x405c,%rax
    0.00 :	     8c0:       00 48                   mov    (%rax),%eax
    0.00 :	     8c2:       8b 83                   mov    %eax,%eax
    0.00 :	     8c4:       70 05 00                add    %rdx,%rax
    0.00 :	     8c7:       00 48 05 ac 40 00 00    mov    0xa70(%rbx),%rdx
    0.00 :	     8ce:       8b 00 89 c0 48 01 d0    mov    %rax,0xa68(%rbx)
    0.00 :	     8d5:       48 8b 93 68 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8dc:       48 89 83 e0 0a 00       add    $0x4060,%rax
    0.00 :	     8e2:       00 48                   mov    (%rax),%eax
    0.00 :	     8e4:       8b 83                   mov    %eax,%eax
    0.00 :	     8e6:       70 05 00                add    %rdx,%rax
    0.00 :	     8e9:       00 48 05 5c 40 00 00    mov    0xa78(%rbx),%rdx
    0.00 :	     8f0:       8b 00 89 c0 48 01 d0    mov    %rax,0xa70(%rbx)
    0.00 :	     8f7:       48 8b 93 70 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8fe:       48 89 83 68 0a 00       add    $0x4064,%rax
    0.00 :	     904:       00 48                   mov    (%rax),%eax
    0.00 :	     906:       8b 83                   mov    %eax,%eax
    0.00 :	     908:       70 05 00                add    %rdx,%rax
    0.00 :	     90b:       00 48 05 60 40 00 00    mov    0xa80(%rbx),%rdx
    0.00 :	     912:       8b 00 89 c0 48 01 d0    mov    %rax,0xa78(%rbx)
    0.00 :	     919:       48 8b 93 78 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     920:       48 89 83 70 0a 00       add    $0x4068,%rax
    0.00 :	     926:       00 48                   mov    (%rax),%eax
    0.00 :	     928:       8b 83                   mov    %eax,%eax
    0.00 :	     92a:       70 05 00                add    %rdx,%rax
    0.00 :	     92d:       00 48 05 64 40 00 00    mov    0xa88(%rbx),%rdx
    0.00 :	     934:       8b 00 89 c0 48 01 d0    mov    %rax,0xa80(%rbx)
    0.00 :	     93b:       48 8b 93 80 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     942:       48 89 83 78 0a 00       add    $0x406c,%rax
    0.00 :	     948:       00 48                   mov    (%rax),%eax
    0.00 :	     94a:       8b 83                   mov    %eax,%eax
    0.00 :	     94c:       70 05 00                add    %rdx,%rax
    0.00 :	     94f:       00 48 05 68 40 00 00    mov    0xa90(%rbx),%rdx
    0.00 :	     956:       8b 00 89 c0 48 01 d0    mov    %rax,0xa88(%rbx)
    0.00 :	     95d:       48 8b 93 88 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     964:       48 89 83 80 0a 00       add    $0x4070,%rax
    0.00 :	     96a:       00 48                   mov    (%rax),%eax
    0.00 :	     96c:       8b 83                   mov    %eax,%eax
    0.00 :	     96e:       70 05 00                add    %rdx,%rax
    0.00 :	     971:       00 48 05 6c 40 00 00    mov    0x9d8(%rbx),%rdx
    0.00 :	     978:       8b 00 89 c0 48 01 d0    mov    %rax,0xa90(%rbx)
    0.00 :	     97f:       48 8b 93 90 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     986:       48 89 83 88 0a 00       add    $0x4008,%rax
    0.00 :	     98c:       00 48                   mov    (%rax),%eax
    0.00 :	     98e:       8b 83                   mov    %eax,%eax
    0.00 :	     990:       70 05 00                add    %rdx,%rax
    0.00 :	     993:       00 48 05 70 40 00 00    mov    0xa28(%rbx),%rdx
    0.00 :	     99a:       8b 00 89 c0 48 01 d0    mov    %rax,0x9d8(%rbx)
    0.00 :	     9a1:       48 8b 93 d8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     9a8:       48 89 83 90 0a 00       add    $0x4038,%rax
    0.00 :	     9ae:       00 48                   mov    (%rax),%eax
    0.00 :	     9b0:       8b 83                   mov    %eax,%eax
    0.00 :	     9b2:       70 05 00                add    %rdx,%rax
    0.00 :	     9b5:       00 48 05 08 40 00 00    mov    %rax,0xa28(%rbx)
    0.00 :	     9bc:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     9c3:       48 8b 93 28 0a 00       add    $0x4010,%rax
    0.00 :	     9c9:       00 48                   mov    (%rax),%eax
    0.00 :	     9cb:       89 83                   mov    %eax,%eax
    0.00 :	     9cd:       d8 09 00 00 48 8b 83    add    %rax,0x9e8(%rbx)
    0.00 :	     9d4:       70 05 00 00             add    %rax,0x70(%rsi)
    0.00 :	     9d8:       48 05 38 40 00 00 8b    mov    0x570(%rbx),%rax
    0.00 :	     9df:       00 89 c0 48 01 d0 48    mov    0x9f0(%rbx),%rdx
    0.00 :	     9e6:       89 83 28 0a 00 00       add    $0x4014,%rax
    0.00 :	     9ec:       48 8b                   mov    (%rax),%eax
    0.00 :	     9ee:       83 70                   mov    %eax,%eax
    0.00 :	     9f0:       05 00 00                add    %rdx,%rax
    0.00 :	     9f3:       48 05 10 40 00 00 8b    mov    0x9f8(%rbx),%rdx
    0.00 :	     9fa:       00 89 c0 48 01 83 e8    mov    %rax,0x9f0(%rbx)
    0.00 :	     a01:       09 00 00 48 01 46 70    mov    0x570(%rbx),%rax
    0.00 :	     a08:       48 8b 83 70 05 00       add    $0x4018,%rax
    0.00 :	     a0e:       00 48                   mov    (%rax),%eax
    0.00 :	     a10:       8b 93                   mov    %eax,%eax
    0.00 :	     a12:       f0 09 00                add    %rdx,%rax
    0.00 :	     a15:       00 48 05 14 40 00 00    mov    0xa00(%rbx),%rdx
    0.00 :	     a1c:       8b 00 89 c0 48 01 d0    mov    %rax,0x9f8(%rbx)
    0.00 :	     a23:       48 8b 93 f8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a2a:       48 89 83 f0 09 00       add    $0x401c,%rax
    0.00 :	     a30:       00 48                   mov    (%rax),%eax
    0.00 :	     a32:       8b 83                   mov    %eax,%eax
    0.00 :	     a34:       70 05 00                add    %rdx,%rax
    0.00 :	     a37:       00 48 05 18 40 00 00    mov    0xa08(%rbx),%rdx
    0.00 :	     a3e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa00(%rbx)
    0.00 :	     a45:       48 8b 93 00 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a4c:       48 89 83 f8 09 00       add    $0x4020,%rax
    0.00 :	     a52:       00 48                   mov    (%rax),%eax
    0.00 :	     a54:       8b 83                   mov    %eax,%eax
    0.00 :	     a56:       70 05 00                add    %rdx,%rax
    0.00 :	     a59:       00 48 05 1c 40 00 00    mov    0xa18(%rbx),%rdx
    0.00 :	     a60:       8b 00 89 c0 48 01 d0    mov    %rax,0xa08(%rbx)
    0.00 :	     a67:       48 8b 93 08 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a6e:       48 89 83 00 0a 00       add    $0x4030,%rax
    0.00 :	     a74:       00 48                   mov    (%rax),%eax
    0.00 :	     a76:       8b 83                   mov    %eax,%eax
    0.00 :	     a78:       70 05 00                add    %rdx,%rax
    0.00 :	     a7b:       00 48 05 20 40 00 00    mov    0xa38(%rbx),%rdx
    0.00 :	     a82:       8b 00 89 c0 48 01 d0    mov    %rax,0xa18(%rbx)
    0.00 :	     a89:       48 8b 93 18 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a90:       48 89 83 08 0a 00       add    $0x4040,%rax
    0.00 :	     a96:       00 48                   mov    (%rax),%eax
    0.00 :	     a98:       8b 83                   mov    %eax,%eax
    0.00 :	     a9a:       70 05 00                add    %rdx,%rax
    0.00 :	     a9d:       00 48 05 30 40 00 00    mov    0xa40(%rbx),%rdx
    0.00 :	     aa4:       8b 00 89 c0 48 01 d0    mov    %rax,0xa38(%rbx)
    0.00 :	     aab:       48 8b 93 38 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ab2:       48 89 83 18 0a 00       add    $0x4048,%rax
    0.00 :	     ab8:       00 48                   mov    (%rax),%eax
    0.00 :	     aba:       8b 83                   mov    %eax,%eax
    0.00 :	     abc:       70 05 00                add    %rdx,%rax
    0.00 :	     abf:       00 48 05 40 40 00 00    mov    0xa48(%rbx),%rdx
    0.00 :	     ac6:       8b 00 89 c0 48 01 d0    mov    %rax,0xa40(%rbx)
    0.00 :	     acd:       48 8b 93 40 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ad4:       48 89 83 38 0a 00       add    $0x404c,%rax
    0.00 :	     ada:       00 48                   mov    (%rax),%eax
    0.00 :	     adc:       8b 83                   mov    %eax,%eax
    0.00 :	     ade:       70 05 00                add    %rdx,%rax
    0.00 :	     ae1:       00 48 05 48 40 00 00    mov    0xa50(%rbx),%rdx
    0.00 :	     ae8:       8b 00 89 c0 48 01 d0    mov    %rax,0xa48(%rbx)
    0.00 :	     aef:       48 8b 93 48 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     af6:       48 89 83 40 0a 00       add    $0x4050,%rax
    0.00 :	     afc:       00 48                   mov    (%rax),%eax
    0.00 :	     afe:       8b 83                   mov    %eax,%eax
    0.00 :	     b00:       70 05 00                add    %rdx,%rax
    0.00 :	     b03:       00 48 05 4c 40 00 00    mov    0xa58(%rbx),%rdx
    0.00 :	     b0a:       8b 00 89 c0 48 01 d0    mov    %rax,0xa50(%rbx)
    0.00 :	     b11:       48 8b 93 50 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b18:       48 89 83 48 0a 00       add    $0x4054,%rax
    0.00 :	     b1e:       00 48                   mov    (%rax),%eax
    0.00 :	     b20:       8b 83                   mov    %eax,%eax
    0.00 :	     b22:       70 05 00                add    %rdx,%rax
    0.00 :	     b25:       00 48 05 50 40 00 00    mov    0xa60(%rbx),%rdx
    0.00 :	     b2c:       8b 00 89 c0 48 01 d0    mov    %rax,0xa58(%rbx)
    0.00 :	     b33:       48 8b 93 58 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b3a:       48 89 83 50 0a 00       add    $0x4058,%rax
    0.00 :	     b40:       00 48                   mov    (%rax),%eax
    0.00 :	     b42:       8b 83                   mov    %eax,%eax
    0.00 :	     b44:       70 05 00                add    %rdx,%rax
    0.00 :	     b47:       00 48 05 54 40 00 00    mov    0xab0(%rbx),%rdx
    0.00 :	     b4e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa60(%rbx)
    0.00 :	     b55:       48 8b 93 60 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b5c:       48 89 83 58 0a 00       add    $0x4080,%rax
    0.00 :	     b62:       00 48                   mov    (%rax),%eax
 ??:0
  100.00 :	     b64:       8b 83                   mov    %eax,%eax
    0.00 :	     b66:       70 05 00                add    %rdx,%rax
    0.00 :	     b69:       00 48 05 58 40 00 00    mov    0xac0(%rbx),%rdx
    0.00 :	     b70:       8b 00 89 c0 48 01 d0    mov    %rax,0xab0(%rbx)
    0.00 :	     b77:       48 8b 93 b0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b7e:       48 89 83 60 0a 00       add    $0x4090,%rax
    0.00 :	     b84:       00 48                   mov    (%rax),%eax
    0.00 :	     b86:       8b 83                   mov    %eax,%eax
    0.00 :	     b88:       70 05 00                add    %rdx,%rax
    0.00 :	     b8b:       00 48 05 80 40 00 00    mov    %rax,0xac0(%rbx)
    0.00 :	     b92:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     b99:       48 8b 93 c0 0a 00       add    $0x4094,%rax
    0.00 :	     b9f:       00 48                   mov    (%rax),%eax
    0.00 :	     ba1:       89 83 b0 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     ba8:       8b 83 70 05 00 00 48    mov    0xac8(%rbx),%rdx
    0.00 :	     baf:       05 90 40 00 00 8b       add    $0x40a0,%rax
    0.00 :	     bb5:       00 89                   mov    (%rax),%eax
    0.00 :	     bb7:       c0 48                   mov    %eax,%eax
    0.00 :	     bb9:       01 d0 48                add    %rdx,%rax
    0.00 :	     bbc:       89 83 c0 0a 00 00 48    mov    0xad0(%rbx),%rdx
    0.00 :	     bc3:       8b 83 70 05 00 00 48    mov    %rax,0xac8(%rbx)
    0.00 :	     bca:       05 94 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     bd1:       48 8b 83 70 05 00       add    $0x40a4,%rax
    0.00 :	     bd7:       00 48                   mov    (%rax),%eax
    0.00 :	     bd9:       8b 93                   mov    %eax,%eax
    0.00 :	     bdb:       c8 0a 00                add    %rdx,%rax
    0.00 :	     bde:       00 48 05 a0 40 00 00    mov    0xad8(%rbx),%rdx
    0.00 :	     be5:       8b 00 89 c0 48 01 d0    mov    %rax,0xad0(%rbx)
    0.00 :	     bec:       48 8b 93 d0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     bf3:       48 89 83 c8 0a 00       add    $0x40a8,%rax
    0.00 :	     bf9:       00 48                   mov    (%rax),%eax
    0.00 :	     bfb:       8b 83                   mov    %eax,%eax
    0.00 :	     bfd:       70 05 00                add    %rdx,%rax
    0.00 :	     c00:       00 48 05 a4 40 00 00    mov    0xae8(%rbx),%rdx
    0.00 :	     c07:       8b 00 89 c0 48 01 d0    mov    %rax,0xad8(%rbx)
    0.00 :	     c0e:       48 8b 93 d8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c15:       48 89 83 d0 0a 00       add    $0x40b0,%rax
    0.00 :	     c1b:       00 48                   mov    (%rax),%eax
    0.00 :	     c1d:       8b 83                   mov    %eax,%eax
    0.00 :	     c1f:       70 05 00                add    %rdx,%rax
    0.00 :	     c22:       00 48 05 a8 40 00 00    mov    0xb08(%rbx),%rdx
    0.00 :	     c29:       8b 00 89 c0 48 01 d0    mov    %rax,0xae8(%rbx)
    0.00 :	     c30:       48 8b 93 e8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c37:       48 89 83 d8 0a 00       add    $0x40c4,%rax
    0.00 :	     c3d:       00 48                   mov    (%rax),%eax
    0.00 :	     c3f:       8b 83                   mov    %eax,%eax
    0.00 :	     c41:       70 05 00                add    %rdx,%rax
    0.00 :	     c44:       00 48 05 b0 40 00 00    mov    0xb10(%rbx),%rdx
    0.00 :	     c4b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb08(%rbx)
    0.00 :	     c52:       48 8b 93 08 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c59:       48 89 83 e8 0a 00       add    $0x40cc,%rax
    0.00 :	     c5f:       00 48                   mov    (%rax),%eax
    0.00 :	     c61:       8b 83                   mov    %eax,%eax
    0.00 :	     c63:       70 05 00                add    %rdx,%rax
    0.00 :	     c66:       00 48 05 c4 40 00 00    mov    0xb18(%rbx),%rdx
    0.00 :	     c6d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb10(%rbx)
    0.00 :	     c74:       48 8b 93 10 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c7b:       48 89 83 08 0b 00       add    $0x40d0,%rax
    0.00 :	     c81:       00 48                   mov    (%rax),%eax
    0.00 :	     c83:       8b 83                   mov    %eax,%eax
    0.00 :	     c85:       70 05 00                add    %rdx,%rax
    0.00 :	     c88:       00 48 05 cc 40 00 00    mov    0xb28(%rbx),%rdx
    0.00 :	     c8f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb18(%rbx)
    0.00 :	     c96:       48 8b 93 18 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c9d:       48 89 83 10 0b 00       add    $0x40d8,%rax
    0.00 :	     ca3:       00 48                   mov    (%rax),%eax
    0.00 :	     ca5:       8b 83                   mov    %eax,%eax
    0.00 :	     ca7:       70 05 00                add    %rdx,%rax
    0.00 :	     caa:       00 48 05 d0 40 00 00    mov    0xb30(%rbx),%rdx
    0.00 :	     cb1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb28(%rbx)
    0.00 :	     cb8:       48 8b 93 28 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     cbf:       48 89 83 18 0b 00       add    $0x40dc,%rax
    0.00 :	     cc5:       00 48                   mov    (%rax),%eax
    0.00 :	     cc7:       8b 83                   mov    %eax,%eax
    0.00 :	     cc9:       70 05 00                add    %rdx,%rax
    0.00 :	     ccc:       00 48 05 d8 40 00 00    mov    0xb38(%rbx),%rdx
    0.00 :	     cd3:       8b 00 89 c0 48 01 d0    mov    %rax,0xb30(%rbx)
    0.00 :	     cda:       48 8b 93 30 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ce1:       48 89 83 28 0b 00       add    $0x40e0,%rax
    0.00 :	     ce7:       00 48                   mov    (%rax),%eax
    0.00 :	     ce9:       8b 83                   mov    %eax,%eax
    0.00 :	     ceb:       70 05 00                add    %rdx,%rax
    0.00 :	     cee:       00 48 05 dc 40 00 00    mov    0xb40(%rbx),%rdx
    0.00 :	     cf5:       8b 00 89 c0 48 01 d0    mov    %rax,0xb38(%rbx)
    0.00 :	     cfc:       48 8b 93 38 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d03:       48 89 83 30 0b 00       add    $0x40e4,%rax
    0.00 :	     d09:       00 48                   mov    (%rax),%eax
    0.00 :	     d0b:       8b 83                   mov    %eax,%eax
    0.00 :	     d0d:       70 05 00                add    %rdx,%rax
    0.00 :	     d10:       00 48 05 e0 40 00 00    mov    0xb48(%rbx),%rdx
    0.00 :	     d17:       8b 00 89 c0 48 01 d0    mov    %rax,0xb40(%rbx)
    0.00 :	     d1e:       48 8b 93 40 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d25:       48 89 83 38 0b 00       add    $0x40e8,%rax
    0.00 :	     d2b:       00 48                   mov    (%rax),%eax
    0.00 :	     d2d:       8b 83                   mov    %eax,%eax
    0.00 :	     d2f:       70 05 00                add    %rdx,%rax
    0.00 :	     d32:       00 48 05 e4 40 00 00    mov    0xb50(%rbx),%rdx
    0.00 :	     d39:       8b 00 89 c0 48 01 d0    mov    %rax,0xb48(%rbx)
    0.00 :	     d40:       48 8b 93 48 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d47:       48 89 83 40 0b 00       add    $0x40ec,%rax
    0.00 :	     d4d:       00 48                   mov    (%rax),%eax
    0.00 :	     d4f:       8b 83                   mov    %eax,%eax
    0.00 :	     d51:       70 05 00                add    %rdx,%rax
    0.00 :	     d54:       00 48 05 e8 40 00 00    mov    0xb58(%rbx),%rdx
    0.00 :	     d5b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb50(%rbx)
    0.00 :	     d62:       48 8b 93 50 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d69:       48 89 83 48 0b 00       add    $0x40f0,%rax
    0.00 :	     d6f:       00 48                   mov    (%rax),%eax
    0.00 :	     d71:       8b 83                   mov    %eax,%eax
    0.00 :	     d73:       70 05 00                add    %rdx,%rax
    0.00 :	     d76:       00 48 05 ec 40 00 00    mov    0xb60(%rbx),%rdx
    0.00 :	     d7d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb58(%rbx)
    0.00 :	     d84:       48 8b 93 58 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d8b:       48 89 83 50 0b 00       add    $0x40f4,%rax
    0.00 :	     d91:       00 48                   mov    (%rax),%eax
    0.00 :	     d93:       8b 83                   mov    %eax,%eax
    0.00 :	     d95:       70 05 00                add    %rdx,%rax
    0.00 :	     d98:       00 48 05 f0 40 00 00    mov    0xb20(%rbx),%rdx
    0.00 :	     d9f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb60(%rbx)
    0.00 :	     da6:       48 8b 93 60 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dad:       48 89 83 58 0b 00       add    $0x40d4,%rax
    0.00 :	     db3:       00 48                   mov    (%rax),%eax
    0.00 :	     db5:       8b 83                   mov    %eax,%eax
    0.00 :	     db7:       70 05 00                add    %rdx,%rax
    0.00 :	     dba:       00 48 05 f4 40 00 00    mov    0xa10(%rbx),%rdx
    0.00 :	     dc1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb20(%rbx)
    0.00 :	     dc8:       48 8b 93 20 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dcf:       48 89 83 60 0b 00       add    $0x4028,%rax
    0.00 :	     dd5:       00 48                   mov    (%rax),%eax
    0.00 :	     dd7:       8b 83                   mov    %eax,%eax
    0.00 :	     dd9:       70 05 00                add    %rdx,%rax
    0.00 :	     ddc:       00 48 05 d4 40 00 00    mov    0x9d0(%rbx),%rdx
    0.00 :	     de3:       8b 00 89 c0 48 01 d0    mov    %rax,0xa10(%rbx)
    0.00 :	     dea:       48 8b 93 10 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     df1:       48 89 83 20 0b 00       add    $0x4004,%rax
    0.00 :	     df7:       00 48                   mov    (%rax),%eax
    0.00 :	     df9:       8b 83                   mov    %eax,%eax
    0.00 :	     dfb:       70 05 00                add    %rdx,%rax
    0.00 :	     dfe:       00 48 05 28 40 00 00    mov    %rax,0x9d0(%rbx)
    0.00 :	     e05:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     e0c:       48 8b 93 d0             add    $0x18,%rax
    0.00 :	     e10:       09 00                   mov    (%rax),%eax
    0.00 :	     e12:       00 48 89 83 10          test   $0xc00000,%eax
    0.00 :	     e17:       0a 00                   jne    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e19:       00 48 8b 83 70 05 00    mov    0x570(%rbx),%rax
    0.00 :	     e20:       00 48 05 04 40 00 00    mov    0x9e0(%rbx),%rdx
    0.00 :	     e27:       8b 00 89 c0 48 01       add    $0x400c,%rax
    0.00 :	     e2d:       d0 48                   mov    (%rax),%eax
    0.00 :	     e2f:       89 83                   mov    %eax,%eax
    0.00 :	     e31:       d0 09 00                add    %rdx,%rax
    0.00 :	     e34:       00 48 8b 83 70 05 00    mov    %rax,0x9e0(%rbx)
    0.00 :	     e3b:       00 48 83 c0 18 8b       mov    0x5e4(%rbx),%eax
    0.00 :	     e41:       00 a9 00                sub    $0x5,%eax
    0.00 :	     e44:       00 c0 00                cmp    $0x1,%eax
    0.00 :	     e47:       75 53                   jbe    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e49:       48 8b 83 70 05 00 00    mov    0x570(%rbx),%rdx
    0.00 :	     e50:       48 8b 93 e0 09 00 00    mov    0xa20(%rbx),%rax
    0.00 :	     e57:       48 05 0c 40 00 00 8b    add    $0x4034,%rdx
    0.00 :	     e5e:       00 89                   mov    (%rdx),%edx
    0.00 :	     e60:       c0 48                   mov    %edx,%edx
    0.00 :	     e62:       01 d0 48                add    %rax,%rdx
    0.00 :	     e65:       89 83 e0 09 00 00 8b    mov    %rdx,0xa20(%rbx)
    0.00 :	     e6c:       83 e4 05 00 00 83 e8    mov    0x570(%rbx),%rax
    0.00 :	     e73:       05 83 f8 01 76 23 48    mov    0xb68(%rbx),%rdx
    0.00 :	     e7a:       8b 93 70 05 00 00       add    $0x40f8,%rax
    0.00 :	     e80:       48 8b                   mov    (%rax),%eax
    0.00 :	     e82:       83 20                   mov    %eax,%eax
    0.00 :	     e84:       0a 00 00                add    %rdx,%rax
    0.00 :	     e87:       48 81 c2 34 40 00 00    mov    0xb70(%rbx),%rdx
    0.00 :	     e8e:       8b 12 89 d2 48 01 c2    mov    %rax,0xb68(%rbx)
    0.00 :	     e95:       48 89 93 20 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     e9c:       48 8b 83 70 05 00       add    $0x40fc,%rax
    0.00 :	     ea2:       00 48                   mov    (%rax),%eax
    0.00 :	     ea4:       8b 93                   mov    %eax,%eax
    0.00 :	     ea6:       68 0b 00                add    %rdx,%rax
    0.00 :	     ea9:       00 48 05 f8 40 00 00    mov    0xb78(%rbx),%rdx
    0.00 :	     eb0:       8b 00 89 c0 48 01 d0    mov    %rax,0xb70(%rbx)
    0.00 :	     eb7:       48 8b 93 70 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ebe:       48 89 83 68 0b 00       add    $0x4100,%rax
    0.00 :	     ec4:       00 48                   mov    (%rax),%eax
    0.00 :	     ec6:       8b 83                   mov    %eax,%eax
    0.00 :	     ec8:       70 05 00                add    %rdx,%rax
    0.00 :	     ecb:       00 48 05 fc 40 00 00    mov    0xbb8(%rbx),%rdx
    0.00 :	     ed2:       8b 00 89 c0 48 01 d0    mov    %rax,0xb78(%rbx)
    0.00 :	     ed9:       48 8b 93 78 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ee0:       48 89 83 70 0b 00       add    $0x4124,%rax
    0.00 :	     ee6:       00 48                   mov    (%rax),%eax
    0.00 :	     ee8:       8b 83                   mov    %eax,%eax
    0.00 :	     eea:       70 05 00                add    %rdx,%rax
    0.00 :	     eed:       00 48 05 00 41 00 00    mov    0xb80(%rbx),%rdx
    0.00 :	     ef4:       8b 00 89 c0 48 01 d0    mov    %rax,0xbb8(%rbx)
    0.00 :	     efb:       48 8b 93 b8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f02:       48 89 83 78 0b 00       add    $0x4104,%rax
    0.00 :	     f08:       00 48                   mov    (%rax),%eax
    0.00 :	     f0a:       8b 83                   mov    %eax,%eax
    0.00 :	     f0c:       70 05 00                add    %rdx,%rax
    0.00 :	     f0f:       00 48 05 24 41 00 00    mov    0xb88(%rbx),%rdx
    0.00 :	     f16:       8b 00 89 c0 48 01 d0    mov    %rax,0xb80(%rbx)
    0.00 :	     f1d:       48 8b 93 80 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f24:       48 89 83 b8 0b 00       add    $0x4108,%rax
    0.00 :	     f2a:       00 48                   mov    (%rax),%eax
    0.00 :	     f2c:       8b 83                   mov    %eax,%eax
    0.00 :	     f2e:       70 05 00                add    %rdx,%rax
    0.00 :	     f31:       00 48 05 04 41 00 00    mov    0xb90(%rbx),%rdx
    0.00 :	     f38:       8b 00 89 c0 48 01 d0    mov    %rax,0xb88(%rbx)
    0.00 :	     f3f:       48 8b 93 88 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f46:       48 89 83 80 0b 00       add    $0x410c,%rax
    0.00 :	     f4c:       00 48                   mov    (%rax),%eax
    0.00 :	     f4e:       8b 83                   mov    %eax,%eax
    0.00 :	     f50:       70 05 00                add    %rdx,%rax
    0.00 :	     f53:       00 48 05 08 41 00 00    mov    0xb98(%rbx),%rdx
    0.00 :	     f5a:       8b 00 89 c0 48 01 d0    mov    %rax,0xb90(%rbx)
    0.00 :	     f61:       48 8b 93 90 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f68:       48 89 83 88 0b 00       add    $0x4110,%rax
    0.00 :	     f6e:       00 48                   mov    (%rax),%eax
    0.00 :	     f70:       8b 83                   mov    %eax,%eax
    0.00 :	     f72:       70 05 00                add    %rdx,%rax
    0.00 :	     f75:       00 48 05 0c 41 00 00    mov    0xba0(%rbx),%rdx
    0.00 :	     f7c:       8b 00 89 c0 48 01 d0    mov    %rax,0xb98(%rbx)
    0.00 :	     f83:       48 8b 93 98 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f8a:       48 89 83 90 0b 00       add    $0x4118,%rax
    0.00 :	     f90:       00 48                   mov    (%rax),%eax
    0.00 :	     f92:       8b 83                   mov    %eax,%eax
    0.00 :	     f94:       70 05 00                add    %rdx,%rax
    0.00 :	     f97:       00 48 05 10 41 00 00    mov    0xba8(%rbx),%rdx
    0.00 :	     f9e:       8b 00 89 c0 48 01 d0    mov    %rax,0xba0(%rbx)
    0.00 :	     fa5:       48 8b 93 a0 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fac:       48 89 83 98 0b 00       add    $0x411c,%rax
    0.00 :	     fb2:       00 48                   mov    (%rax),%eax
    0.00 :	     fb4:       8b 83                   mov    %eax,%eax
    0.00 :	     fb6:       70 05 00                add    %rdx,%rax
    0.00 :	     fb9:       00 48 05 18 41 00 00    mov    0xbb0(%rbx),%rdx
    0.00 :	     fc0:       8b 00 89 c0 48 01 d0    mov    %rax,0xba8(%rbx)
    0.00 :	     fc7:       48 8b 93 a8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fce:       48 89 83 a0 0b 00       add    $0x4120,%rax
    0.00 :	     fd4:       00 48                   mov    (%rax),%eax
    0.00 :	     fd6:       8b 83                   mov    %eax,%eax
    0.00 :	     fd8:       70 05 00                add    %rdx,%rax
    0.00 :	     fdb:       00 48 05 1c 41 00 00    mov    %rax,0xbb0(%rbx)
    0.00 :	     fe2:       8b 00 89 c0 48 01 d0    mov    0xaa8(%rbx),%rax
    0.00 :	     fe9:       48 8b 93 b0             mov    %rax,0x40(%rsi)
    0.00 :	     fed:       0b 00 00 48 89 83 a8    mov    0xa10(%rbx),%rax
    0.00 :	     ff4:       0b 00 00 48             mov    %rax,0x48(%rsi)
    0.00 :	     ff8:       8b 83 70 05 00 00 48    mov    0x9c8(%rbx),%rax
    0.00 :	     fff:       05 20 41 00 00 8b 00    add    0x9e0(%rbx),%rax
    0.00 :	    1006:       89 c0 48 01 d0 48 89    add    0x9d0(%rbx),%rax
    0.00 :	    100d:       83 b0 0b 00 00 48 8b    add    0xad0(%rbx),%rax
    0.00 :	    1014:       83 a8 0a 00 00 48 89    add    0xae0(%rbx),%rax
    0.00 :	    101b:       46 40 48 8b 83 10 0a    add    0xa30(%rbx),%rax
    0.00 :	    1022:       00 00 48 89             mov    %rax,0x20(%rsi)
    0.00 :	    1026:       46 48 48 8b 83 c8 09    mov    0xae0(%rbx),%rax
    0.00 :	    102d:       00 00 48 03 83 e0 09    add    0xad0(%rbx),%rax
    0.00 :	    1034:       00 00 48 03             mov    %rax,0x50(%rsi)
    0.00 :	    1038:       83 d0 09 00 00 48 03    mov    0x9c8(%rbx),%rax
    0.00 :	    103f:       83 d0 0a 00             mov    %rax,0x60(%rsi)
    0.00 :	    1043:       00 48 03 83 e0 0a 00    mov    0x9d0(%rbx),%rax
    0.00 :	    104a:       00 48 03 83             mov    %rax,0x68(%rsi)
    0.00 :	    104e:       30 0a 00 00 48 89 46    mov    0x9e8(%rbx),%rax
    0.00 :	    1055:       20 48 8b 83             mov    %rax,0x78(%rsi)
    0.00 :	    1059:       e0 0a 00 00 48 03 83    mov    0xa08(%rbx),%rax
    0.00 :	    1060:       d0 0a 00 00 48 89 46    add    0x9f8(%rbx),%rax
    0.00 :	    1067:       50 48 8b 83             mov    %rax,0x28(%rsi)
    0.00 :	    106b:       c8 09 00 00 48 89 46    mov    0x9f8(%rbx),%rax
    0.00 :	    1072:       60 48 8b 83 d0 09 00    mov    %rax,0x80(%rsi)
    0.00 :	    1079:       00 48 89 46 68 48 8b    mov    0xa08(%rbx),%rax
    0.00 :	    1080:       83 e8 09 00 00 48 89    mov    %rax,0xa0(%rsi)
    0.00 :	    1087:       46 78 48 8b 83 08 0a    mov    0xa20(%rbx),%rax
    0.00 :	    108e:       00 00 48 03 83 f8 09    mov    %rax,0x88(%rsi)
    0.00 :	    1095:       00 00 48 89 46 28 48    cmpl   $0x1,0x8bc(%rbx)
    0.00 :	    109c:       8b 83 f8 09 00 00       je     11b0 <dma_unmap_page+0x1180>
    0.00 :	    10a2:       48 89 86 80 00 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10a9:       48 8b 83 08 0a 00 00    mov    0xb00(%rbx),%rdx
    0.00 :	    10b0:       48 89 86 a0 00 00       add    $0x40bc,%rax
    0.00 :	    10b6:       00 48                   mov    (%rax),%eax
    0.00 :	    10b8:       8b 83                   mov    %eax,%eax
    0.00 :	    10ba:       20 0a 00                add    %rdx,%rax
    0.00 :	    10bd:       00 48 89 86 88 00 00    mov    0xaf0(%rbx),%rdx
    0.00 :	    10c4:       00 83 bb bc 08 00 00    mov    %rax,0xb00(%rbx)
    0.00 :	    10cb:       01 0f 84 0e 01 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10d2:       48 8b 83 70 05 00       add    $0x40b4,%rax
    0.00 :	    10d8:       00 48                   mov    (%rax),%eax
    0.00 :	    10da:       8b 93                   mov    %eax,%eax
    0.00 :	    10dc:       00 0b 00                add    %rdx,%rax
    0.00 :	    10df:       00 48 05 bc 40 00 00    mov    0xaf8(%rbx),%rdx
    0.00 :	    10e6:       8b 00 89 c0 48 01 d0    mov    %rax,0xaf0(%rbx)
    0.00 :	    10ed:       48 8b 93 f0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10f4:       48 89 83 00 0b 00       add    $0x40b8,%rax
    0.00 :	    10fa:       00 48                   mov    (%rax),%eax
    0.00 :	    10fc:       8b 83                   mov    %eax,%eax
    0.00 :	    10fe:       70 05 00                add    %rdx,%rax
    0.00 :	    1101:       00 48 05 b4 40 00 00    mov    %rax,0xaf8(%rbx)
    0.00 :	    1108:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	    110f:       48 8b 93 f8 0a 00       add    $0x5820,%rax
    0.00 :	    1115:       00 48                   mov    (%rax),%eax
    0.00 :	    1117:       89 83 f0 0a 00          test   $0x10000000,%eax
    0.00 :	    111c:       00 48 8b 83 70 05       je     722 <dma_unmap_page+0x6f2>
    0.00 :	    1122:       00 00 48 05 b8 40 00    mov    0x570(%rbx),%rax
    0.00 :	    1129:       00 8b 00 89 c0 48 01    mov    0xc28(%rbx),%rdx
    0.00 :	    1130:       d0 48 89 83 f8 0a       add    $0x8fe4,%rax
    0.00 :	    1136:       00 00                   mov    (%rax),%eax
    0.00 :	    1138:       48 8b                   mov    %eax,%eax
    0.00 :	    113a:       83 70 05                add    %rdx,%rax
    0.00 :	    113d:       00 00 48 05 20 58 00    mov    0xc30(%rbx),%rdx
    0.00 :	    1144:       00 8b 00 a9 00 00 00    mov    %rax,0xc28(%rbx)
    0.00 :	    114b:       10 0f 84 00 f6 ff ff    mov    0x570(%rbx),%rax
    0.00 :	    1152:       48 8b 83 70 05 00       add    $0x415c,%rax
    0.00 :	    1158:       00 48                   mov    (%rax),%eax
    0.00 :	    115a:       8b 93                   mov    %eax,%eax
    0.00 :	    115c:       28 0c 00                add    %rdx,%rax
    0.00 :	    115f:       00 48 05 e4 8f 00 00    mov    0xc38(%rbx),%rdx
    0.00 :	    1166:       8b 00 89 c0 48 01 d0    mov    %rax,0xc30(%rbx)
    0.00 :	    116d:       48 8b 93 30 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1174:       48 89 83 28 0c 00       add    $0x8fe0,%rax
    0.00 :	    117a:       00 48                   mov    (%rax),%eax
    0.00 :	    117c:       8b 83                   mov    %eax,%eax
    0.00 :	    117e:       70 05 00                add    %rdx,%rax
    0.00 :	    1181:       00 48 05 5c 41 00 00    mov    0xc40(%rbx),%rdx
    0.00 :	    1188:       8b 00 89 c0 48 01 d0    mov    %rax,0xc38(%rbx)
    0.00 :	    118f:       48 8b 93 38 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1196:       48 89 83 30 0c 00       add    $0x4158,%rax
    0.00 :	    119c:       00 48                   mov    (%rax),%eax
    0.00 :	    119e:       8b 83                   mov    %eax,%eax
    0.00 :	    11a0:       70 05 00                add    %rdx,%rax
    0.00 :	    11a3:       00 48 05 e0 8f 00 00    mov    %rax,0xc40(%rbx)
    0.00 :	    11aa:       8b 00 89 c0             add    $0x10,%rsp
    0.00 :	    11ae:       48                      pop    %rbx
    0.00 :	    11af:       01                      retq   
    0.00 :	    11b0:       d0 48 8b 93 40 0c 00    cmpw   $0x3e8,0x3f8(%rbx)
    0.00 :	    11b7:       00 48 
    0.00 :	    11b9:       89 83 38 0c 00 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11bf:       48 8b 83 70 05 00 00    mov    0x860(%rbx),%rax
    0.00 :	    11c6:       48 05 58                test   %rax,%rax
    0.00 :	    11c9:       41 00                   je     11e6 <dma_unmap_page+0x11b6>
    0.00 :	    11cb:       00 8b 00 89 c0          lea    0xe(%rsp),%rdx
    0.00 :	    11d0:       48 01 d0 48 89 83 40    lea    0x568(%rbx),%rdi
    0.00 :	    11d7:       0c 00 00 48 83          mov    $0xa,%esi
    0.00 :	    11dc:       c4 10                   callq  *%rax
    0.00 :	    11de:       5b c3                   test   %eax,%eax
    0.00 :	    11e0:       66 81 bb f8 03 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11e6:       00 e8 03 0f 85          movzbl 0xe(%rsp),%eax
    0.00 :	    11eb:       e3 fe ff ff 48          mov    %ax,0xe(%rsp)
    0.00 :	    11f0:       8b 83 60                movzwl %ax,%eax
    0.00 :	    11f3:       08 00 00 48 85 c0       add    %eax,0xcf8(%rbx)
    0.00 :	    11f9:       74 1b 48 8d 54          jmpq   10a2 <dma_unmap_page+0x1072>
         :	    11fe:       24 0e                   xchg   %ax,%ax
         :	    1200:       48 8d bb 68             sub    $0x18,%rsp
         :	    1204:       05 00 00 be             mov    %rbx,(%rsp)
         :	    1208:       0a 00 00 00 ff          mov    %rbp,0x8(%rsp)
         :	    120d:       d0 85 c0                mov    %rdi,%rbx
         :	    1210:       0f 85 bc fe ff          mov    %r12,0x10(%rsp)
         :	    1215:       ff 0f b6 44             mov    0x20(%rdi),%rsi
         :	    1219:       24 0e 66                mov    (%rdi),%rbp
         :	    121c:       89 44 24                test   %rsi,%rsi
         :	    121f:       0e 0f b7 c0 01 83       je     13b0 <dma_unmap_page+0x1380>
         :	    1225:       f8 0c 00 00 e9 a4 fe    testb  $0x3,0x220(%rbp)
         :	    122c:       ff ff                   je     127b <dma_unmap_page+0x124b>
