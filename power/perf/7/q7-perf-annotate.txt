
Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    5.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    4.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    3.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.17 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    2.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    1.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    1.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1139
    1.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    1.50 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    1.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1107
    1.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    1.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.17 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    1.17 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1138
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1123
    0.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    0.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ef10 <slot_deform_tuple>:
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.17 :	  46ef10:       55                      push   %rbp
    0.00 :	  46ef11:       48 89 e5                mov    %rsp,%rbp
    0.17 :	  46ef14:       41 57                   push   %r15
    0.33 :	  46ef16:       41 89 f7                mov    %esi,%r15d
    0.00 :	  46ef19:       41 56                   push   %r14
    0.00 :	  46ef1b:       49 89 fe                mov    %rdi,%r14
    0.17 :	  46ef1e:       41 55                   push   %r13
    0.00 :	  46ef20:       41 54                   push   %r12
    0.17 :	  46ef22:       53                      push   %rbx
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef23:       31 db                   xor    %ebx,%ebx
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.17 :	  46ef25:       48 83 ec 28             sub    $0x28,%rsp
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
    0.17 :	  46ef29:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  46ef2d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
    0.17 :	  46ef31:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
    0.17 :	  46ef35:       8b 77 24                mov    0x24(%rdi),%esi
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
    0.00 :	  46ef38:       4c 8b 5f 30             mov    0x30(%rdi),%r11
         :	        HeapTupleHeader tup = tuple->t_data;
    0.00 :	  46ef3c:       4c 8b 40 10             mov    0x10(%rax),%r8
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
    0.50 :	  46ef40:       41 0f b7 40 14          movzwl 0x14(%r8),%eax
    0.50 :	  46ef45:       83 e0 01                and    $0x1,%eax
    0.00 :	  46ef48:       41 89 c2                mov    %eax,%r10d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef4b:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef4f:       31 ff                   xor    %edi,%edi
    0.17 :	  46ef51:       85 f6                   test   %esi,%esi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef53:       4c 8b 48 08             mov    0x8(%rax),%r9
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.17 :	  46ef57:       74 09                   je     46ef62 <slot_deform_tuple+0x52>
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
    0.00 :	  46ef59:       41 0f b6 7e 07          movzbl 0x7(%r14),%edi
         :	                slow = false;
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
    0.00 :	  46ef5e:       49 8b 5e 58             mov    0x58(%r14),%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.17 :	  46ef62:       41 0f b6 40 16          movzbl 0x16(%r8),%eax
         :
         :	        for (; attnum < natts; attnum++)
    0.50 :	  46ef67:       44 39 fe                cmp    %r15d,%esi
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.00 :	  46ef6a:       4d 8d 2c 00             lea    (%r8,%rax,1),%r13
         :
         :	        for (; attnum < natts; attnum++)
    0.00 :	  46ef6e:       0f 8d c0 00 00 00       jge    46f034 <slot_deform_tuple+0x124>
    0.50 :	  46ef74:       41 89 f4                mov    %esi,%r12d
    0.17 :	  46ef77:       eb 40                   jmp    46efb9 <slot_deform_tuple+0xa9>
    0.00 :	  46ef79:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
    0.00 :	  46ef80:       44 89 e0                mov    %r12d,%eax
    0.00 :	  46ef83:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  46ef86:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46ef89:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46ef8c:       48 98                   cltq   
    0.00 :	  46ef8e:       41 0f b6 44 00 17       movzbl 0x17(%r8,%rax,1),%eax
    0.00 :	  46ef94:       d3 f8                   sar    %cl,%eax
    0.00 :	  46ef96:       a8 01                   test   $0x1,%al
    0.00 :	  46ef98:       75 2b                   jne    46efc5 <slot_deform_tuple+0xb5>
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46ef9a:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
         :	                        isnull[attnum] = true;
    0.00 :	  46ef9e:       bf 01 00 00 00          mov    $0x1,%edi
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46efa3:       48 c7 04 f2 00 00 00    movq   $0x0,(%rdx,%rsi,8)
    0.00 :	  46efaa:       00 
         :	                        isnull[attnum] = true;
    0.00 :	  46efab:       41 c6 04 33 01          movb   $0x1,(%r11,%rsi,1)
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.33 :	  46efb0:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  46efb4:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46efb7:       7e 78                   jle    46f031 <slot_deform_tuple+0x121>
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
    0.00 :	  46efb9:       49 63 f4                movslq %r12d,%rsi
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    1.17 :	  46efbc:       45 84 d2                test   %r10b,%r10b
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    5.33 :	  46efbf:       49 8b 14 f1             mov    (%r9,%rsi,8),%rdx
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    5.17 :	  46efc3:       75 bb                   jne    46ef80 <slot_deform_tuple+0x70>
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
    0.00 :	  46efc5:       40 84 ff                test   %dil,%dil
         :	                        isnull[attnum] = true;
         :	                        slow = true;            /* can't use attcacheoff anymore */
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
    0.50 :	  46efc8:       41 c6 04 33 00          movb   $0x0,(%r11,%rsi,1)
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    5.00 :	  46efcd:       0f 85 7d 00 00 00       jne    46f050 <slot_deform_tuple+0x140>
    0.00 :	  46efd3:       8b 42 54                mov    0x54(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    1.00 :	  46efd6:       85 c0                   test   %eax,%eax
    0.00 :	  46efd8:       78 76                   js     46f050 <slot_deform_tuple+0x140>
         :	                        off = thisatt->attcacheoff;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.67 :	  46efda:       48 63 d8                movslq %eax,%rbx
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    4.00 :	  46efdd:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    1.83 :	  46efe1:       49 8d 44 1d 00          lea    0x0(%r13,%rbx,1),%rax
    1.50 :	  46efe6:       74 28                   je     46f010 <slot_deform_tuple+0x100>
    2.50 :	  46efe8:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
    0.83 :	  46efec:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  46eff0:       0f 84 3a 01 00 00       je     46f130 <slot_deform_tuple+0x220>
    0.50 :	  46eff6:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  46effa:       0f 84 90 01 00 00       je     46f190 <slot_deform_tuple+0x280>
    0.00 :	  46f000:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  46f004:       0f 84 a6 01 00 00       je     46f1b0 <slot_deform_tuple+0x2a0>
    0.00 :	  46f00a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
    2.00 :	  46f010:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
    2.33 :	  46f014:       48 89 04 f1             mov    %rax,(%rcx,%rsi,8)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
   18.83 :	  46f018:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.67 :	  46f01c:       66 85 c0                test   %ax,%ax
    0.00 :	  46f01f:       7e 6f                   jle    46f090 <slot_deform_tuple+0x180>
    0.00 :	  46f021:       48 0f bf c0             movswq %ax,%rax
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.83 :	  46f025:       41 83 c4 01             add    $0x1,%r12d
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    3.17 :	  46f029:       48 01 c3                add    %rax,%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.67 :	  46f02c:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46f02f:       7f 88                   jg     46efb9 <slot_deform_tuple+0xa9>
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.83 :	  46f031:       44 89 fe                mov    %r15d,%esi
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1138
    1.00 :	  46f034:       49 89 5e 58             mov    %rbx,0x58(%r14)
         :	        }
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    2.00 :	  46f038:       41 89 76 24             mov    %esi,0x24(%r14)
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1139
    1.50 :	  46f03c:       41 88 7e 07             mov    %dil,0x7(%r14)
         :	}
    0.00 :	  46f040:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  46f044:       5b                      pop    %rbx
    0.50 :	  46f045:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.67 :	  46f047:       41 5d                   pop    %r13
    0.17 :	  46f049:       41 5e                   pop    %r14
    0.00 :	  46f04b:       41 5f                   pop    %r15
    0.17 :	  46f04d:       c9                      leaveq 
    0.00 :	  46f04e:       c3                      retq   
    0.00 :	  46f04f:       90                      nop
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
         :	                        off = thisatt->attcacheoff;
         :	                else if (thisatt->attlen == -1)
    0.00 :	  46f050:       66 83 7a 4c ff          cmpw   $0xffff,0x4c(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    3.83 :	  46f055:       74 71                   je     46f0c8 <slot_deform_tuple+0x1b8>
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    1.50 :	  46f057:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.17 :	  46f05b:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f05d:       0f 84 1d 01 00 00       je     46f180 <slot_deform_tuple+0x270>
    0.00 :	  46f063:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f065:       74 10                   je     46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f067:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f069:       0f 84 51 01 00 00       je     46f1c0 <slot_deform_tuple+0x2b0>
    0.00 :	  46f06f:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f073:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
         :
         :	                        if (!slow)
    0.00 :	  46f077:       40 84 ff                test   %dil,%dil
    0.00 :	  46f07a:       0f 85 5d ff ff ff       jne    46efdd <slot_deform_tuple+0xcd>
         :	                                thisatt->attcacheoff = off;
    0.00 :	  46f080:       89 5a 54                mov    %ebx,0x54(%rdx)
    0.00 :	  46f083:       e9 55 ff ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f088:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f08f:       00 
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.17 :	  46f090:       66 83 c0 01             add    $0x1,%ax
    0.00 :	  46f094:       0f 85 a6 00 00 00       jne    46f140 <slot_deform_tuple+0x230>
    0.00 :	  46f09a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.33 :	  46f0a0:       3c 01                   cmp    $0x1,%al
    0.00 :	  46f0a2:       0f 84 50 01 00 00       je     46f1f8 <slot_deform_tuple+0x2e8>
    0.33 :	  46f0a8:       a8 01                   test   $0x1,%al
    0.00 :	  46f0aa:       0f 85 20 01 00 00       jne    46f1d0 <slot_deform_tuple+0x2c0>
    0.00 :	  46f0b0:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    0.00 :	  46f0b5:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  46f0b8:       89 c0                   mov    %eax,%eax
    0.83 :	  46f0ba:       48 8d 1c 18             lea    (%rax,%rbx,1),%rbx
    0.00 :	  46f0be:       e9 ad 00 00 00          jmpq   46f170 <slot_deform_tuple+0x260>
    0.00 :	  46f0c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1107
    1.33 :	  46f0c8:       40 84 ff                test   %dil,%dil
    0.00 :	  46f0cb:       75 26                   jne    46f0f3 <slot_deform_tuple+0x1e3>
    0.00 :	  46f0cd:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f0d1:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f0d3:       0f 84 4f 01 00 00       je     46f228 <slot_deform_tuple+0x318>
    0.00 :	  46f0d9:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f0db:       74 a3                   je     46f080 <slot_deform_tuple+0x170>
    0.00 :	  46f0dd:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f0df:       90                      nop
    0.00 :	  46f0e0:       0f 84 52 01 00 00       je     46f238 <slot_deform_tuple+0x328>
    0.00 :	  46f0e6:       48 8d 43 01             lea    0x1(%rbx),%rax
    0.00 :	  46f0ea:       48 83 e0 fe             and    $0xfffffffffffffffe,%rax
    0.00 :	  46f0ee:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  46f0f1:       74 8d                   je     46f080 <slot_deform_tuple+0x170>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    1.33 :	  46f0f3:       41 80 7c 1d 00 00       cmpb   $0x0,0x0(%r13,%rbx,1)
    2.00 :	  46f0f9:       0f 85 a1 00 00 00       jne    46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f0ff:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f103:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f105:       0f 84 d5 00 00 00       je     46f1e0 <slot_deform_tuple+0x2d0>
    0.00 :	  46f10b:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f10d:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f110:       0f 84 8a 00 00 00       je     46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f116:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f118:       0f 84 27 01 00 00       je     46f245 <slot_deform_tuple+0x335>
    0.00 :	  46f11e:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f122:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f127:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
    0.00 :	  46f12b:       e9 ad fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f130:       49 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%rax
    0.00 :	  46f135:       e9 d6 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f13a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f140:       49 8d 7c 1d 00          lea    0x0(%r13,%rbx,1),%rdi
    0.00 :	  46f145:       4c 89 45 c8             mov    %r8,-0x38(%rbp)
    0.00 :	  46f149:       4c 89 4d c0             mov    %r9,-0x40(%rbp)
    0.00 :	  46f14d:       44 88 55 b8             mov    %r10b,-0x48(%rbp)
    0.00 :	  46f151:       4c 89 5d b0             mov    %r11,-0x50(%rbp)
    0.00 :	  46f155:       e8 f6 a6 ff ff          callq  469850 <strlen@plt>
    0.00 :	  46f15a:       44 0f b6 55 b8          movzbl -0x48(%rbp),%r10d
    0.00 :	  46f15f:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  46f163:       48 8d 5c 03 01          lea    0x1(%rbx,%rax,1),%rbx
    0.00 :	  46f168:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  46f16c:       4c 8b 5d b0             mov    -0x50(%rbp),%r11
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    1.50 :	  46f170:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f175:       e9 36 fe ff ff          jmpq   46efb0 <slot_deform_tuple+0xa0>
    0.00 :	  46f17a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f180:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f184:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1120
    1.17 :	  46f188:       e9 ea fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f18d:       0f 1f 00                nopl   (%rax)
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.83 :	  46f190:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    4.83 :	  46f195:       e9 76 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f19a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1123
    1.00 :	  46f1a0:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1a5:       e9 33 fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f1b0:       41 0f b7 44 1d 00       movzwl 0x0(%r13,%rbx,1),%eax
    0.00 :	  46f1b6:       e9 55 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f1bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f1c0:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f1c4:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f1c8:       e9 aa fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f1cd:       0f 1f 00                nopl   (%rax)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.33 :	  46f1d0:       d0 e8                   shr    %al
    0.17 :	  46f1d2:       0f b6 c0                movzbl %al,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.33 :	  46f1d5:       e9 e0 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f1da:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (!slow &&
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f1e0:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f1e4:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1e9:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.00 :	  46f1ed:       e9 eb fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f1f8:       41 0f b6 54 1d 01       movzbl 0x1(%r13,%rbx,1),%edx
    0.00 :	  46f1fe:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  46f203:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  46f206:       0f 84 ae fe ff ff       je     46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f20c:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  46f20f:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  46f214:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  46f219:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  46f21d:       e9 98 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f222:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.00 :	  46f228:       48 8d 43 03             lea    0x3(%rbx),%rax
    0.00 :	  46f22c:       48 83 e0 fc             and    $0xfffffffffffffffc,%rax
    0.00 :	  46f230:       e9 b9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
    0.00 :	  46f235:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f238:       48 8d 43 07             lea    0x7(%rbx),%rax
    0.00 :	  46f23c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  46f240:       e9 a9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f245:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f249:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f24e:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f252:       e9 86 fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   89.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
    1.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    1.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:884
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:874
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bc410 <ExecHashTableInsert>:
         :	 */
         :	void
         :	ExecHashTableInsert(HashJoinTable hashtable,
         :	                                        TupleTableSlot *slot,
         :	                                        uint32 hashvalue)
         :	{
    0.35 :	  5bc410:       55                      push   %rbp
    0.00 :	  5bc411:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:831
    1.05 :	  5bc414:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5bc418:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    1.05 :	  5bc41c:       49 89 fd                mov    %rdi,%r13
    0.35 :	  5bc41f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.70 :	  5bc423:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5bc427:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5bc42a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.35 :	  5bc42e:       48 83 ec 40             sub    $0x40,%rsp
    0.70 :	  5bc432:       89 d3                   mov    %edx,%ebx
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bc434:       e8 17 7b ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
    0.35 :	  5bc439:       49 89 c7                mov    %rax,%r15
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
    0.00 :	  5bc43c:       41 8b 45 40             mov    0x40(%r13),%eax
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bc440:       41 8b 55 00             mov    0x0(%r13),%edx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
    0.00 :	  5bc444:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5bc447:       0f 86 0b 01 00 00       jbe    5bc558 <ExecHashTableInsert+0x148>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc44d:       41 8b 4d 04             mov    0x4(%r13),%ecx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc451:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc455:       89 da                   mov    %ebx,%edx
    0.00 :	  5bc457:       83 e8 01                sub    $0x1,%eax
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc45a:       41 21 de                and    %ebx,%r14d
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bc45d:       d3 ea                   shr    %cl,%edx
    0.00 :	  5bc45f:       21 c2                   and    %eax,%edx
         :	                                                          &bucketno, &batchno);
         :
         :	        /*
         :	         * decide whether to put the tuple in the hash table or a temp file
         :	         */
         :	        if (batchno == hashtable->curbatch)
    0.00 :	  5bc461:       41 39 55 44             cmp    %edx,0x44(%r13)
    0.00 :	  5bc465:       74 31                   je     5bc498 <ExecHashTableInsert+0x88>
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc467:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5bc46a:       89 de                   mov    %ebx,%esi
    0.00 :	  5bc46c:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bc46f:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  5bc473:       49 03 55 68             add    0x68(%r13),%rdx
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc477:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc47b:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc47f:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc483:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc487:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc48b:       c9                      leaveq 
         :	        {
         :	                /*
         :	                 * put the tuple into a temp file for later batches
         :	                 */
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
    0.00 :	  5bc48c:       e9 cf 10 00 00          jmpq   5bd560 <ExecHashJoinSaveTuple>
    0.00 :	  5bc491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc498:       f2 41 0f 10 45 58       movsd  0x58(%r13),%xmm0
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.00 :	  5bc49e:       4c 89 ef                mov    %r13,%rdi
         :	                /*
         :	                 * put the tuple in hash table
         :	                 */
         :	                HashJoinTuple hashTuple;
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
    0.00 :	  5bc4a1:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc4a6:       f2 41 0f 10 4d 60       movsd  0x60(%r13),%xmm1
    0.00 :	  5bc4ac:       f2 0f 11 4d c8          movsd  %xmm1,-0x38(%rbp)
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.35 :	  5bc4b1:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bc4b4:       83 c0 10                add    $0x10,%eax
    0.00 :	  5bc4b7:       48 98                   cltq   
    0.00 :	  5bc4b9:       48 89 c6                mov    %rax,%rsi
    0.35 :	  5bc4bc:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.35 :	  5bc4c0:       e8 fb fa ff ff          callq  5bbfc0 <dense_alloc>
         :
         :	                hashTuple->hashvalue = hashvalue;
    0.00 :	  5bc4c5:       89 58 08                mov    %ebx,0x8(%rax)
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.35 :	  5bc4c8:       41 8b 17                mov    (%r15),%edx
    0.00 :	  5bc4cb:       48 8d 58 10             lea    0x10(%rax),%rbx
    0.00 :	  5bc4cf:       4c 89 fe                mov    %r15,%rsi
         :	                int                     hashTupleSize;
         :	                double          ntuples = (hashtable->totalTuples - hashtable->skewTuples);
         :
         :	                /* Create the HashJoinTuple */
         :	                hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	                hashTuple = (HashJoinTuple) dense_alloc(hashtable, hashTupleSize);
    0.35 :	  5bc4d2:       49 89 c4                mov    %rax,%r12
         :
         :	                hashTuple->hashvalue = hashvalue;
         :	                memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bc4d5:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bc4d8:       e8 13 d7 ea ff          callq  469bf0 <memcpy@plt>
         :	                 * We always reset the tuple-matched flag on insertion.  This is okay
         :	                 * even when reloading a tuple from a batch file, since the tuple
         :	                 * could not possibly have been matched to an outer tuple before it
         :	                 * went into the batch file.
         :	                 */
         :	                HeapTupleHeaderClearMatch(HJTUPLE_MINTUPLE(hashTuple));
    0.35 :	  5bc4dd:       66 81 63 0a ff 7f       andw   $0x7fff,0xa(%rbx)
         :
         :	                /* Push it onto the front of the bucket's list */
         :	                hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bc4e3:       49 63 d6                movslq %r14d,%rdx
    0.00 :	  5bc4e6:       49 8b 45 18             mov    0x18(%r13),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
    0.70 :	  5bc4ea:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:867
   89.51 :	  5bc4ee:       49 89 04 24             mov    %rax,(%r12)
         :	                hashtable->buckets[bucketno] = hashTuple;
    0.35 :	  5bc4f2:       49 8b 45 18             mov    0x18(%r13),%rax
    0.00 :	  5bc4f6:       4c 89 24 d0             mov    %r12,(%rax,%rdx,8)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc4fa:       41 83 7d 40 01          cmpl   $0x1,0x40(%r13)
    0.00 :	  5bc4ff:       74 7f                   je     5bc580 <ExecHashTableInsert+0x170>
    0.00 :	  5bc501:       41 8b 55 0c             mov    0xc(%r13),%edx
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.35 :	  5bc505:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5bc509:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bc510:       49 3b 85 a0 00 00 00    cmp    0xa0(%r13),%rax
         :	                        hashtable->nbuckets_optimal *= 2;
         :	                        hashtable->log2_nbuckets_optimal += 1;
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bc517:       49 89 85 90 00 00 00    mov    %rax,0x90(%r13)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:884
    0.70 :	  5bc51e:       77 50                   ja     5bc570 <ExecHashTableInsert+0x160>
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
    0.00 :	  5bc520:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bc523:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bc527:       49 03 85 90 00 00 00    add    0x90(%r13),%rax
    0.00 :	  5bc52e:       49 3b 85 98 00 00 00    cmp    0x98(%r13),%rax
    0.00 :	  5bc535:       0f 87 8d 00 00 00       ja     5bc5c8 <ExecHashTableInsert+0x1b8>
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc53b:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc53f:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc543:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc547:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.35 :	  5bc54b:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc54f:       c9                      leaveq 
    0.00 :	  5bc550:       c3                      retq   
    0.00 :	  5bc551:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bc558:       44 8d 72 ff             lea    -0x1(%rdx),%r14d
    0.00 :	  5bc55c:       31 d2                   xor    %edx,%edx
    0.00 :	  5bc55e:       41 21 de                and    %ebx,%r14d
    0.00 :	  5bc561:       e9 fb fe ff ff          jmpq   5bc461 <ExecHashTableInsert+0x51>
    0.00 :	  5bc566:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bc56d:       00 00 00 
         :	                }
         :
         :	                /* Account for space used, and back off if we've used too much */
         :	                hashtable->spaceUsed += hashTupleSize;
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bc570:       49 89 85 a0 00 00 00    mov    %rax,0xa0(%r13)
    0.00 :	  5bc577:       eb a7                   jmp    5bc520 <ExecHashTableInsert+0x110>
    0.00 :	  5bc579:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * Increase the (optimal) number of buckets if we just exceeded the
         :	                 * NTUP_PER_BUCKET threshold, but only when there's still a single batch.
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
    0.00 :	  5bc580:       41 8b 55 0c             mov    0xc(%r13),%edx
    0.00 :	  5bc584:       81 fa ff ff ff 3f       cmp    $0x3fffffff,%edx
    0.00 :	  5bc58a:       0f 8f 75 ff ff ff       jg     5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc590:       f2 0f 10 45 c0          movsd  -0x40(%rbp),%xmm0
    0.35 :	  5bc595:       f2 0f 5c 45 c8          subsd  -0x38(%rbp),%xmm0
    0.00 :	  5bc59a:       f2 0f 11 45 c0          movsd  %xmm0,-0x40(%rbp)
    0.00 :	  5bc59f:       f2 0f 2a c2             cvtsi2sd %edx,%xmm0
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:874
    0.70 :	  5bc5a3:       f2 0f 10 4d c0          movsd  -0x40(%rbp),%xmm1
    0.00 :	  5bc5a8:       66 0f 2e c8             ucomisd %xmm0,%xmm1
    0.00 :	  5bc5ac:       0f 82 53 ff ff ff       jb     5bc505 <ExecHashTableInsert+0xf5>
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5b2:       8d 04 12                lea    (%rdx,%rdx,1),%eax
         :	                        hashtable->log2_nbuckets_optimal += 1;
    0.00 :	  5bc5b5:       41 83 45 10 01          addl   $0x1,0x10(%r13)
         :	                 */
         :	                if ((hashtable->nbatch == 1) &&
         :	                        (hashtable->nbuckets_optimal <= INT_MAX/2) &&   /* overflow protection */
         :	                        (ntuples >= (hashtable->nbuckets_optimal * NTUP_PER_BUCKET)))
         :	                {
         :	                        hashtable->nbuckets_optimal *= 2;
    0.00 :	  5bc5ba:       41 89 45 0c             mov    %eax,0xc(%r13)
    0.00 :	  5bc5be:       89 c2                   mov    %eax,%edx
    0.00 :	  5bc5c0:       e9 40 ff ff ff          jmpq   5bc505 <ExecHashTableInsert+0xf5>
    0.00 :	  5bc5c5:       0f 1f 00                nopl   (%rax)
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5c8:       4c 89 ef                mov    %r13,%rdi
         :	                Assert(batchno > hashtable->curbatch);
         :	                ExecHashJoinSaveTuple(tuple,
         :	                                                          hashvalue,
         :	                                                          &hashtable->innerBatchFile[batchno]);
         :	        }
         :	}
    0.00 :	  5bc5cb:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5bc5cf:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5bc5d3:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5bc5d7:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5bc5db:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5bc5df:       c9                      leaveq 
         :	                if (hashtable->spaceUsed > hashtable->spacePeak)
         :	                        hashtable->spacePeak = hashtable->spaceUsed;
         :	                if (hashtable->spaceUsed +
         :	                        hashtable->nbuckets_optimal * sizeof(HashJoinTuple)
         :	                        > hashtable->spaceAllowed)
         :	                        ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bc5e0:       e9 fb fa ff ff          jmpq   5bc0e0 <ExecHashIncreaseNumBatches>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   61.96 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    6.52 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    5.80 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    2.54 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    2.17 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.81 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    1.81 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    1.81 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    1.09 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    1.09 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    1.09 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    1.09 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    0.72 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f400 <slot_getattr>:
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    0.36 :	  46f400:       55                      push   %rbp
    0.36 :	  46f401:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    1.09 :	  46f404:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.72 :	  46f408:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.72 :	  46f40c:       48 89 fb                mov    %rdi,%rbx
    1.81 :	  46f40f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  46f413:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.36 :	  46f417:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f41b:       85 f6                   test   %esi,%esi
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    1.09 :	  46f41d:       49 89 d4                mov    %rdx,%r12
         :	        HeapTuple       tuple = slot->tts_tuple;
    0.00 :	  46f420:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
    0.00 :	  46f424:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f428:       0f 8e a2 00 00 00       jle    46f4d0 <slot_getattr+0xd0>
         :	        }
         :
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    2.54 :	  46f42e:       3b 73 24                cmp    0x24(%rbx),%esi
    0.00 :	  46f431:       7e 65                   jle    46f498 <slot_getattr+0x98>
         :	        }
         :
         :	        /*
         :	         * return NULL if attnum is out of range according to the tupdesc
         :	         */
         :	        if (attnum > tupleDesc->natts)
    0.00 :	  46f433:       3b 32                   cmp    (%rdx),%esi
    0.00 :	  46f435:       7f 51                   jg     46f488 <slot_getattr+0x88>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
    0.00 :	  46f437:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f43a:       0f 84 34 01 00 00       je     46f574 <slot_getattr+0x174>
         :	         *
         :	         * (We have to check this separately because of various inheritance and
         :	         * table-alteration scenarios: the tuple could be either longer or shorter
         :	         * than the tupdesc.)
         :	         */
         :	        tup = tuple->t_data;
    0.00 :	  46f440:       48 8b 7f 10             mov    0x10(%rdi),%rdi
         :	        if (attnum > HeapTupleHeaderGetNatts(tup))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    6.52 :	  46f444:       0f b7 47 12             movzwl 0x12(%rdi),%eax
   61.96 :	  46f448:       25 ff 07 00 00          and    $0x7ff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    0.72 :	  46f44d:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f44f:       7f 37                   jg     46f488 <slot_getattr+0x88>
         :	        }
         :
         :	        /*
         :	         * check if target attribute is null: no point in groveling through tuple
         :	         */
         :	        if (HeapTupleHasNulls(tuple) && att_isnull(attnum - 1, tup->t_bits))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    0.72 :	  46f451:       f6 47 14 01             testb  $0x1,0x14(%rdi)
    1.09 :	  46f455:       74 18                   je     46f46f <slot_getattr+0x6f>
    0.00 :	  46f457:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  46f45a:       89 c8                   mov    %ecx,%eax
    0.00 :	  46f45c:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46f45f:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46f462:       48 98                   cltq   
    0.00 :	  46f464:       0f b6 44 07 17          movzbl 0x17(%rdi,%rax,1),%eax
    0.00 :	  46f469:       d3 f8                   sar    %cl,%eax
    0.00 :	  46f46b:       a8 01                   test   $0x1,%al
    0.00 :	  46f46d:       74 19                   je     46f488 <slot_getattr+0x88>
         :	        /*
         :	         * If the attribute's column has been dropped, we force a NULL result.
         :	         * This case should not happen in normal use, but it could happen if we
         :	         * are executing a plan cached before the column was dropped.
         :	         */
         :	        if (tupleDesc->attrs[attnum - 1]->attisdropped)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    0.72 :	  46f46f:       4c 63 ee                movslq %esi,%r13
    0.00 :	  46f472:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  46f476:       4d 8d 75 ff             lea    -0x1(%r13),%r14
    0.00 :	  46f47a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
    0.72 :	  46f47e:       80 78 61 00             cmpb   $0x0,0x61(%rax)
    0.72 :	  46f482:       74 7c                   je     46f500 <slot_getattr+0x100>
    0.00 :	  46f484:       0f 1f 40 00             nopl   0x0(%rax)
         :	        {
         :	                *isnull = true;
    0.00 :	  46f488:       41 c6 04 24 01          movb   $0x1,(%r12)
    0.00 :	  46f48d:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f48f:       eb 20                   jmp    46f4b1 <slot_getattr+0xb1>
    0.00 :	  46f491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
         :	        {
         :	                *isnull = slot->tts_isnull[attnum - 1];
    0.00 :	  46f498:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  46f49c:       48 63 d6                movslq %esi,%rdx
    0.00 :	  46f49f:       0f b6 44 10 ff          movzbl -0x1(%rax,%rdx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    1.81 :	  46f4a4:       41 88 04 24             mov    %al,(%r12)
         :	                return slot->tts_values[attnum - 1];
    0.36 :	  46f4a8:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f4ac:       48 8b 44 d0 f8          mov    -0x8(%rax,%rdx,8),%rax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.36 :	  46f4b1:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.81 :	  46f4b5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    1.45 :	  46f4ba:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4bf:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    2.17 :	  46f4c4:       c9                      leaveq 
    0.72 :	  46f4c5:       c3                      retq   
    0.00 :	  46f4c6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46f4cd:       00 00 00 
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
    0.00 :	  46f4d0:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f4d3:       74 4b                   je     46f520 <slot_getattr+0x120>
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
    0.00 :	  46f4d5:       48 8d 43 40             lea    0x40(%rbx),%rax
    0.00 :	  46f4d9:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  46f4dc:       74 6c                   je     46f54a <slot_getattr+0x14a>
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4de:       4c 89 e1                mov    %r12,%rcx
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4e1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4e5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  46f4ea:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4ef:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  46f4f4:       c9                      leaveq 
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4f5:       e9 d6 f7 ff ff          jmpq   46ecd0 <heap_getsysattr>
    0.00 :	  46f4fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Extract the attribute, along with any preceding attributes.
         :	         */
         :	        slot_deform_tuple(slot, attnum);
    0.36 :	  46f500:       48 89 df                mov    %rbx,%rdi
    0.00 :	  46f503:       e8 08 fa ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    1.09 :	  46f508:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.36 :	  46f50c:       42 0f b6 44 28 ff       movzbl -0x1(%rax,%r13,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    5.80 :	  46f512:       41 88 04 24             mov    %al,(%r12)
         :	        return slot->tts_values[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    1.45 :	  46f516:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f51a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
         :	}
    0.00 :	  46f51e:       eb 91                   jmp    46f4b1 <slot_getattr+0xb1>
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
    0.00 :	  46f520:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f525:       be 8f 04 00 00          mov    $0x48f,%esi
    0.00 :	  46f52a:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f52f:       e8 ec be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f534:       be 40 f7 7a 00          mov    $0x7af740,%esi
    0.00 :	  46f539:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f53e:       31 c0                   xor    %eax,%eax
    0.00 :	  46f540:       e8 eb bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f545:       e8 86 9f ff ff          callq  4694d0 <abort@plt>
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
    0.00 :	  46f54a:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f54f:       be 91 04 00 00          mov    $0x491,%esi
    0.00 :	  46f554:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f559:       e8 c2 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f55e:       be 78 f7 7a 00          mov    $0x7af778,%esi
    0.00 :	  46f563:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f568:       31 c0                   xor    %eax,%eax
    0.00 :	  46f56a:       e8 c1 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f56f:       e8 5c 9f ff ff          callq  4694d0 <abort@plt>
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f574:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f579:       be ac 04 00 00          mov    $0x4ac,%esi
    0.00 :	  46f57e:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f583:       e8 98 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f588:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f58d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f592:       31 c0                   xor    %eax,%eax
    0.00 :	  46f594:       e8 97 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f599:       e8 32 9f ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   17.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
   13.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    8.72 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    8.72 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:666
    7.80 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    5.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    3.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:654
    3.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    3.21 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    3.21 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    2.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    2.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    2.29 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    2.29 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:666
    1.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    1.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    1.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:654
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    0.92 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000757d90 <bcTruelen>:
         :	 *****************************************************************************/
         :
         :	/* "True" length (not counting trailing blanks) of a BpChar */
         :	static int
         :	bcTruelen(BpChar *arg)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:654
    3.67 :	  757d90:       55                      push   %rbp
         :	        char       *s = VARDATA_ANY(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    2.75 :	  757d91:       0f b6 17                movzbl (%rdi),%edx
    0.92 :	  757d94:       48 8d 4f 01             lea    0x1(%rdi),%rcx
    0.46 :	  757d98:       48 8d 47 04             lea    0x4(%rdi),%rax
    3.67 :	  757d9c:       be 01 00 00 00          mov    $0x1,%esi
         :	 *****************************************************************************/
         :
         :	/* "True" length (not counting trailing blanks) of a BpChar */
         :	static int
         :	bcTruelen(BpChar *arg)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:654
    0.92 :	  757da1:       48 89 e5                mov    %rsp,%rbp
         :	        char       *s = VARDATA_ANY(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:655
    1.38 :	  757da4:       21 d6                   and    %edx,%esi
    3.21 :	  757da6:       48 0f 44 c8             cmove  %rax,%rcx
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    2.75 :	  757daa:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  757dad:       74 51                   je     757e00 <bcTruelen+0x70>
    0.00 :	  757daf:       85 f6                   test   %esi,%esi
    0.00 :	  757db1:       75 3d                   jne    757df0 <bcTruelen+0x60>
    0.00 :	  757db3:       8b 07                   mov    (%rdi),%eax
    0.46 :	  757db5:       c1 e8 02                shr    $0x2,%eax
    0.92 :	  757db8:       83 e8 04                sub    $0x4,%eax
         :	        for (i = len - 1; i >= 0; i--)
    0.46 :	  757dbb:       89 c2                   mov    %eax,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    0.92 :	  757dbd:       83 ea 01                sub    $0x1,%edx
    1.38 :	  757dc0:       78 20                   js     757de2 <bcTruelen+0x52>
    2.29 :	  757dc2:       48 63 f2                movslq %edx,%rsi
         :	        {
         :	                if (s[i] != ' ')
    0.00 :	  757dc5:       80 3c 31 20             cmpb   $0x20,(%rcx,%rsi,1)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
   17.43 :	  757dc9:       74 0e                   je     757dd9 <bcTruelen+0x49>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    0.92 :	  757dcb:       eb 15                   jmp    757de2 <bcTruelen+0x52>
    0.00 :	  757dcd:       0f 1f 00                nopl   (%rax)
    1.38 :	  757dd0:       48 63 c2                movslq %edx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:662
    5.50 :	  757dd3:       80 3c 01 20             cmpb   $0x20,(%rcx,%rax,1)
   13.76 :	  757dd7:       75 09                   jne    757de2 <bcTruelen+0x52>
         :	        char       *s = VARDATA_ANY(arg);
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
         :	        for (i = len - 1; i >= 0; i--)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    8.72 :	  757dd9:       83 ea 01                sub    $0x1,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    3.21 :	  757ddc:       0f 1f 40 00             nopl   0x0(%rax)
    0.46 :	  757de0:       79 ee                   jns    757dd0 <bcTruelen+0x40>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:660
    7.80 :	  757de2:       8d 42 01                lea    0x1(%rdx),%eax
         :	        {
         :	                if (s[i] != ' ')
         :	                        break;
         :	        }
         :	        return i + 1;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:666
    2.29 :	  757de5:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:666
    8.72 :	  757de6:       c3                      retq   
    0.00 :	  757de7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  757dee:       00 00 
         :	{
         :	        char       *s = VARDATA_ANY(arg);
         :	        int                     i;
         :	        int                     len;
         :
         :	        len = VARSIZE_ANY_EXHDR(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:659
    0.92 :	  757df0:       d0 ea                   shr    %dl
    0.92 :	  757df2:       0f b6 c2                movzbl %dl,%eax
    0.92 :	  757df5:       83 e8 01                sub    $0x1,%eax
    0.92 :	  757df8:       eb c1                   jmp    757dbb <bcTruelen+0x2b>
    0.00 :	  757dfa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  757e00:       0f b6 7f 01             movzbl 0x1(%rdi),%edi
    0.00 :	  757e04:       ba 07 00 00 00          mov    $0x7,%edx
    0.00 :	  757e09:       be 07 00 00 00          mov    $0x7,%esi
    0.00 :	  757e0e:       40 80 ff 01             cmp    $0x1,%dil
    0.00 :	  757e12:       74 b1                   je     757dc5 <bcTruelen+0x35>
    0.00 :	  757e14:       40 80 ff 12             cmp    $0x12,%dil
    0.00 :	  757e18:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  757e1d:       ba 0f 00 00 00          mov    $0xf,%edx
    0.00 :	  757e22:       0f 45 d0                cmovne %eax,%edx
    0.00 :	  757e25:       be 0f 00 00 00          mov    $0xf,%esi
    0.00 :	  757e2a:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  757e2f:       48 0f 45 f0             cmovne %rax,%rsi
    0.00 :	  757e33:       eb 90                   jmp    757dc5 <bcTruelen+0x35>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   10.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2672
    9.15 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2639
    4.27 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2619
    3.66 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2633
    3.66 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2637
    3.66 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2639
    3.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2593
    3.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2594
    3.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2524
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2558
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2619
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2672
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2542
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2617
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2670
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    1.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2507
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2523
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2558
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2619
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2621
    1.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2541
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2541
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2566
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2567
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2574
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2584
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2592
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2610
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2617
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2620
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2637
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2672
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    0.61 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b0d90 <ExecEvalScalarArrayOp>:
         :	 */
         :	static Datum
         :	ExecEvalScalarArrayOp(ScalarArrayOpExprState *sstate,
         :	                                          ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2505
    0.61 :	  5b0d90:       55                      push   %rbp
    0.61 :	  5b0d91:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b0d94:       41 57                   push   %r15
    0.61 :	  5b0d96:       41 56                   push   %r14
    0.61 :	  5b0d98:       41 55                   push   %r13
    0.00 :	  5b0d9a:       41 54                   push   %r12
    0.00 :	  5b0d9c:       49 89 f4                mov    %rsi,%r12
    1.22 :	  5b0d9f:       53                      push   %rbx
    0.61 :	  5b0da0:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b0da3:       48 83 ec 38             sub    $0x38,%rsp
    0.61 :	  5b0da7:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        ScalarArrayOpExpr *opexpr = (ScalarArrayOpExpr *) sstate->fxprstate.xprstate.expr;
    0.00 :	  5b0dab:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        bits8      *bitmap;
         :	        int                     bitmask;
         :
         :	        /* Set default values for result flags: non-null, not a set result */
         :	        *isNull = false;
         :	        if (isDone)
    0.00 :	  5b0daf:       48 85 c9                test   %rcx,%rcx
         :	ExecEvalScalarArrayOp(ScalarArrayOpExprState *sstate,
         :	                                          ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        ScalarArrayOpExpr *opexpr = (ScalarArrayOpExpr *) sstate->fxprstate.xprstate.expr;
         :	        bool            useOr = opexpr->useOr;
    0.00 :	  5b0db2:       0f b6 50 0c             movzbl 0xc(%rax),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2507
    1.22 :	  5b0db6:       88 55 bf                mov    %dl,-0x41(%rbp)
         :	        char       *s;
         :	        bits8      *bitmap;
         :	        int                     bitmask;
         :
         :	        /* Set default values for result flags: non-null, not a set result */
         :	        *isNull = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2523
    1.22 :	  5b0db9:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5b0dbd:       c6 02 00                movb   $0x0,(%rdx)
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2524
    2.44 :	  5b0dc0:       74 06                   je     5b0dc8 <ExecEvalScalarArrayOp+0x38>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b0dc2:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /*
         :	         * Initialize function cache if first time through
         :	         */
         :	        if (sstate->fxprstate.func.fn_oid == InvalidOid)
    0.00 :	  5b0dc8:       44 8b 43 28             mov    0x28(%rbx),%r8d
    0.00 :	  5b0dcc:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5b0dcf:       0f 84 43 02 00 00       je     5b1018 <ExecEvalScalarArrayOp+0x288>
         :	        }
         :
         :	        /*
         :	         * Evaluate arguments
         :	         */
         :	        fcinfo = &sstate->fxprstate.fcinfo_data;
    0.00 :	  5b0dd5:       48 8d 4b 70             lea    0x70(%rbx),%rcx
         :	        argDone = ExecEvalFuncArgs(fcinfo, sstate->fxprstate.args, econtext);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2541
    0.61 :	  5b0dd9:       4c 89 e2                mov    %r12,%rdx
         :	        }
         :
         :	        /*
         :	         * Evaluate arguments
         :	         */
         :	        fcinfo = &sstate->fxprstate.fcinfo_data;
    0.00 :	  5b0ddc:       48 89 4d c8             mov    %rcx,-0x38(%rbp)
         :	        argDone = ExecEvalFuncArgs(fcinfo, sstate->fxprstate.args, econtext);
    0.61 :	  5b0de0:       48 8b 73 18             mov    0x18(%rbx),%rsi
    0.00 :	  5b0de4:       48 89 cf                mov    %rcx,%rdi
    0.00 :	  5b0de7:       e8 44 c6 ff ff          callq  5ad430 <ExecEvalFuncArgs>
         :	        if (argDone != ExprSingleResult)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2542
    1.83 :	  5b0dec:       85 c0                   test   %eax,%eax
    0.00 :	  5b0dee:       0f 85 a0 03 00 00       jne    5b1194 <ExecEvalScalarArrayOp+0x404>
         :
         :	        /*
         :	         * If the array is NULL then we return NULL --- it's not very meaningful
         :	         * to do anything else, even if the operator isn't strict.
         :	         */
         :	        if (fcinfo->argnull[1])
    0.00 :	  5b0df4:       80 bb b1 03 00 00 00    cmpb   $0x0,0x3b1(%rbx)
    0.00 :	  5b0dfb:       74 1b                   je     5b0e18 <ExecEvalScalarArrayOp+0x88>
         :	        {
         :	                *isNull = true;
    0.00 :	  5b0dfd:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5b0e01:       c6 00 01                movb   $0x1,(%rax)
    0.00 :	  5b0e04:       31 c0                   xor    %eax,%eax
         :	                }
         :	        }
         :
         :	        *isNull = resultnull;
         :	        return result;
         :	}
    0.00 :	  5b0e06:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5b0e0a:       5b                      pop    %rbx
    0.00 :	  5b0e0b:       41 5c                   pop    %r12
    0.00 :	  5b0e0d:       41 5d                   pop    %r13
    0.00 :	  5b0e0f:       41 5e                   pop    %r14
    0.00 :	  5b0e11:       41 5f                   pop    %r15
    0.00 :	  5b0e13:       c9                      leaveq 
    0.00 :	  5b0e14:       c3                      retq   
    0.00 :	  5b0e15:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                *isNull = true;
         :	                return (Datum) 0;
         :	        }
         :	        /* Else okay to fetch and detoast the array */
         :	        arr = DatumGetArrayTypeP(fcinfo->arg[1]);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2558
    2.44 :	  5b0e18:       48 8b bb 98 00 00 00    mov    0x98(%rbx),%rdi
    0.00 :	  5b0e1f:       e8 ec de 1c 00          callq  77ed10 <pg_detoast_datum>
         :	         * If the array is empty, we return either FALSE or TRUE per the useOr
         :	         * flag.  This is correct even if the scalar is NULL; since we would
         :	         * evaluate the operator zero times, it matters not whether it would want
         :	         * to return NULL.
         :	         */
         :	        nitems = ArrayGetNItems(ARR_NDIM(arr), ARR_DIMS(arr));
    0.00 :	  5b0e24:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  5b0e27:       48 8d 70 10             lea    0x10(%rax),%rsi
         :	        {
         :	                *isNull = true;
         :	                return (Datum) 0;
         :	        }
         :	        /* Else okay to fetch and detoast the array */
         :	        arr = DatumGetArrayTypeP(fcinfo->arg[1]);
    1.22 :	  5b0e2b:       49 89 c5                mov    %rax,%r13
         :	         * If the array is empty, we return either FALSE or TRUE per the useOr
         :	         * flag.  This is correct even if the scalar is NULL; since we would
         :	         * evaluate the operator zero times, it matters not whether it would want
         :	         * to return NULL.
         :	         */
         :	        nitems = ArrayGetNItems(ARR_NDIM(arr), ARR_DIMS(arr));
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2566
    0.61 :	  5b0e2e:       e8 1d 35 11 00          callq  6c4350 <ArrayGetNItems>
         :	        if (nitems <= 0)
    0.00 :	  5b0e33:       85 c0                   test   %eax,%eax
         :	         * If the array is empty, we return either FALSE or TRUE per the useOr
         :	         * flag.  This is correct even if the scalar is NULL; since we would
         :	         * evaluate the operator zero times, it matters not whether it would want
         :	         * to return NULL.
         :	         */
         :	        nitems = ArrayGetNItems(ARR_NDIM(arr), ARR_DIMS(arr));
    0.00 :	  5b0e35:       89 45 c0                mov    %eax,-0x40(%rbp)
         :	        if (nitems <= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2567
    0.61 :	  5b0e38:       0f 8e 3a 03 00 00       jle    5b1178 <ExecEvalScalarArrayOp+0x3e8>
         :
         :	        /*
         :	         * If the scalar is NULL, and the function is strict, return NULL; no
         :	         * point in iterating the loop.
         :	         */
         :	        if (fcinfo->argnull[0] && sstate->fxprstate.func.fn_strict)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2574
    0.61 :	  5b0e3e:       80 bb b0 03 00 00 00    cmpb   $0x0,0x3b0(%rbx)
    0.00 :	  5b0e45:       0f 85 f5 01 00 00       jne    5b1040 <ExecEvalScalarArrayOp+0x2b0>
         :
         :	        /*
         :	         * We arrange to look up info about the element type only once per series
         :	         * of calls, assuming the element type doesn't change underneath us.
         :	         */
         :	        if (sstate->element_type != ARR_ELEMTYPE(arr))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2584
    0.61 :	  5b0e4b:       41 8b 7d 0c             mov    0xc(%r13),%edi
    0.00 :	  5b0e4f:       39 bb 18 04 00 00       cmp    %edi,0x418(%rbx)
    0.00 :	  5b0e55:       74 24                   je     5b0e7b <ExecEvalScalarArrayOp+0xeb>
         :	        {
         :	                get_typlenbyvalalign(ARR_ELEMTYPE(arr),
    0.00 :	  5b0e57:       48 8d 8b 1f 04 00 00    lea    0x41f(%rbx),%rcx
    0.00 :	  5b0e5e:       48 8d 93 1e 04 00 00    lea    0x41e(%rbx),%rdx
    0.00 :	  5b0e65:       48 8d b3 1c 04 00 00    lea    0x41c(%rbx),%rsi
    0.00 :	  5b0e6c:       e8 ff 1f 1c 00          callq  772e70 <get_typlenbyvalalign>
         :	                                                         &sstate->typlen,
         :	                                                         &sstate->typbyval,
         :	                                                         &sstate->typalign);
         :	                sstate->element_type = ARR_ELEMTYPE(arr);
    0.00 :	  5b0e71:       41 8b 45 0c             mov    0xc(%r13),%eax
    0.00 :	  5b0e75:       89 83 18 04 00 00       mov    %eax,0x418(%rbx)
         :	        }
         :	        typlen = sstate->typlen;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2592
    0.61 :	  5b0e7b:       0f b7 8b 1c 04 00 00    movzwl 0x41c(%rbx),%ecx
    0.00 :	  5b0e82:       66 89 4d d4             mov    %cx,-0x2c(%rbp)
         :	        typbyval = sstate->typbyval;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2593
    3.05 :	  5b0e86:       0f b6 83 1e 04 00 00    movzbl 0x41e(%rbx),%eax
    0.00 :	  5b0e8d:       88 45 d6                mov    %al,-0x2a(%rbp)
         :	        typalign = sstate->typalign;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2594
    3.05 :	  5b0e90:       0f b6 93 1f 04 00 00    movzbl 0x41f(%rbx),%edx
    0.00 :	  5b0e97:       88 55 d7                mov    %dl,-0x29(%rbp)
         :
         :	        result = BoolGetDatum(!useOr);
         :	        resultnull = false;
         :
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    1.22 :	  5b0e9a:       41 8b 45 08             mov    0x8(%r13),%eax
    0.00 :	  5b0e9e:       85 c0                   test   %eax,%eax
    0.00 :	  5b0ea0:       0f 84 ba 02 00 00       je     5b1160 <ExecEvalScalarArrayOp+0x3d0>
    0.00 :	  5b0ea6:       48 98                   cltq   
    0.00 :	  5b0ea8:       4d 8d 64 05 00          lea    0x0(%r13,%rax,1),%r12
         :	        bitmap = ARR_NULLBITMAP(arr);
    0.00 :	  5b0ead:       49 63 45 04             movslq 0x4(%r13),%rax
    0.00 :	  5b0eb1:       4d 8d 7c c5 10          lea    0x10(%r13,%rax,8),%r15
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
         :	                        s = att_addlength_pointer(s, typlen, s);
    0.00 :	  5b0eb6:       48 0f bf 4d d4          movswq -0x2c(%rbp),%rcx
         :
         :	        result = BoolGetDatum(!useOr);
         :	        resultnull = false;
         :
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
    0.00 :	  5b0ebb:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    1.83 :	  5b0ebf:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5b0ec2:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
         :	                        s = att_addlength_pointer(s, typlen, s);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    1.22 :	  5b0ec8:       48 89 4d a8             mov    %rcx,-0x58(%rbp)
    0.00 :	  5b0ecc:       eb 47                   jmp    5b0f15 <ExecEvalScalarArrayOp+0x185>
    0.00 :	  5b0ece:       66 90                   xchg   %ax,%ax
         :	                        fcinfo->arg[1] = elt;
         :	                        fcinfo->argnull[1] = false;
         :	                }
         :
         :	                /* Call comparison function */
         :	                if (fcinfo->argnull[1] && sstate->fxprstate.func.fn_strict)
    0.00 :	  5b0ed0:       80 7b 2e 00             cmpb   $0x0,0x2e(%rbx)
         :	                Datum           thisresult;
         :
         :	                /* Get array element, checking for NULL */
         :	                if (bitmap && (*bitmap & bitmask) == 0)
         :	                {
         :	                        fcinfo->arg[1] = (Datum) 0;
    0.00 :	  5b0ed4:       48 c7 83 98 00 00 00    movq   $0x0,0x98(%rbx)
    0.00 :	  5b0edb:       00 00 00 00 
         :	                        fcinfo->argnull[1] = true;
    0.00 :	  5b0edf:       c6 83 b1 03 00 00 01    movb   $0x1,0x3b1(%rbx)
         :	                        fcinfo->arg[1] = elt;
         :	                        fcinfo->argnull[1] = false;
         :	                }
         :
         :	                /* Call comparison function */
         :	                if (fcinfo->argnull[1] && sstate->fxprstate.func.fn_strict)
    0.00 :	  5b0ee6:       0f 84 a5 00 00 00       je     5b0f91 <ExecEvalScalarArrayOp+0x201>
         :	                }
         :
         :	                /* advance bitmap pointer if any */
         :	                if (bitmap)
         :	                {
         :	                        bitmask <<= 1;
    0.00 :	  5b0eec:       45 01 ed                add    %r13d,%r13d
         :	                }
         :
         :	                /* Call comparison function */
         :	                if (fcinfo->argnull[1] && sstate->fxprstate.func.fn_strict)
         :	                {
         :	                        fcinfo->isnull = true;
    0.00 :	  5b0eef:       c6 83 8c 00 00 00 01    movb   $0x1,0x8c(%rbx)
    0.00 :	  5b0ef6:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
         :
         :	                /* advance bitmap pointer if any */
         :	                if (bitmap)
         :	                {
         :	                        bitmask <<= 1;
         :	                        if (bitmask == 0x100)
    0.00 :	  5b0efa:       41 81 fd 00 01 00 00    cmp    $0x100,%r13d
    0.00 :	  5b0f01:       0f 84 d3 00 00 00       je     5b0fda <ExecEvalScalarArrayOp+0x24a>
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
         :	        bitmap = ARR_NULLBITMAP(arr);
         :	        bitmask = 1;
         :
         :	        for (i = 0; i < nitems; i++)
    0.00 :	  5b0f07:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5b0f0b:       44 39 75 c0             cmp    %r14d,-0x40(%rbp)
    0.00 :	  5b0f0f:       0f 8e dc 00 00 00       jle    5b0ff1 <ExecEvalScalarArrayOp+0x261>
         :	        {
         :	                Datum           elt;
         :	                Datum           thisresult;
         :
         :	                /* Get array element, checking for NULL */
         :	                if (bitmap && (*bitmap & bitmask) == 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2610
    0.61 :	  5b0f15:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b0f18:       74 09                   je     5b0f23 <ExecEvalScalarArrayOp+0x193>
    0.00 :	  5b0f1a:       41 0f b6 07             movzbl (%r15),%eax
    0.00 :	  5b0f1e:       44 85 e8                test   %r13d,%eax
    0.00 :	  5b0f21:       74 ad                   je     5b0ed0 <ExecEvalScalarArrayOp+0x140>
         :	                        fcinfo->arg[1] = (Datum) 0;
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2617
    1.83 :	  5b0f23:       80 7d d6 00             cmpb   $0x0,-0x2a(%rbp)
    0.61 :	  5b0f27:       4d 89 e0                mov    %r12,%r8
    0.00 :	  5b0f2a:       74 26                   je     5b0f52 <ExecEvalScalarArrayOp+0x1c2>
    0.00 :	  5b0f2c:       66 83 7d d4 08          cmpw   $0x8,-0x2c(%rbp)
    0.00 :	  5b0f31:       0f 84 89 01 00 00       je     5b10c0 <ExecEvalScalarArrayOp+0x330>
    0.00 :	  5b0f37:       66 83 7d d4 04          cmpw   $0x4,-0x2c(%rbp)
    0.00 :	  5b0f3c:       0f 84 be 01 00 00       je     5b1100 <ExecEvalScalarArrayOp+0x370>
    0.00 :	  5b0f42:       66 83 7d d4 02          cmpw   $0x2,-0x2c(%rbp)
    0.00 :	  5b0f47:       0f 84 c3 01 00 00       je     5b1110 <ExecEvalScalarArrayOp+0x380>
    0.00 :	  5b0f4d:       45 0f b6 04 24          movzbl (%r12),%r8d
         :	                        s = att_addlength_pointer(s, typlen, s);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    2.44 :	  5b0f52:       66 83 7d d4 00          cmpw   $0x0,-0x2c(%rbp)
    0.00 :	  5b0f57:       0f 8e 23 01 00 00       jle    5b1080 <ExecEvalScalarArrayOp+0x2f0>
    0.00 :	  5b0f5d:       4c 03 65 a8             add    -0x58(%rbp),%r12
         :	                        s = (char *) att_align_nominal(s, typalign);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2619
    2.44 :	  5b0f61:       80 7d d7 69             cmpb   $0x69,-0x29(%rbp)
    1.22 :	  5b0f65:       0f 84 05 01 00 00       je     5b1070 <ExecEvalScalarArrayOp+0x2e0>
    0.00 :	  5b0f6b:       80 7d d7 63             cmpb   $0x63,-0x29(%rbp)
    0.00 :	  5b0f6f:       74 12                   je     5b0f83 <ExecEvalScalarArrayOp+0x1f3>
    0.00 :	  5b0f71:       80 7d d7 64             cmpb   $0x64,-0x29(%rbp)
    0.00 :	  5b0f75:       0f 84 75 01 00 00       je     5b10f0 <ExecEvalScalarArrayOp+0x360>
    0.00 :	  5b0f7b:       49 83 c4 01             add    $0x1,%r12
    0.00 :	  5b0f7f:       49 83 e4 fe             and    $0xfffffffffffffffe,%r12
         :	                        fcinfo->arg[1] = elt;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2620
    0.61 :	  5b0f83:       4c 89 83 98 00 00 00    mov    %r8,0x98(%rbx)
         :	                        fcinfo->argnull[1] = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2621
    1.22 :	  5b0f8a:       c6 83 b1 03 00 00 00    movb   $0x0,0x3b1(%rbx)
         :	                        thisresult = (Datum) 0;
         :	                }
         :	                else
         :	                {
         :	                        fcinfo->isnull = false;
         :	                        thisresult = FunctionCallInvoke(fcinfo);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2633
    3.66 :	  5b0f91:       48 8b 43 70             mov    0x70(%rbx),%rax
         :	                        fcinfo->isnull = true;
         :	                        thisresult = (Datum) 0;
         :	                }
         :	                else
         :	                {
         :	                        fcinfo->isnull = false;
    0.00 :	  5b0f95:       c6 83 8c 00 00 00 00    movb   $0x0,0x8c(%rbx)
         :	                        thisresult = FunctionCallInvoke(fcinfo);
    0.00 :	  5b0f9c:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  5b0fa0:       ff 10                   callq  *(%rax)
         :	                }
         :
         :	                /* Combine results per OR or AND semantics */
         :	                if (fcinfo->isnull)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2637
    3.66 :	  5b0fa2:       80 bb 8c 00 00 00 00    cmpb   $0x0,0x8c(%rbx)
    0.61 :	  5b0fa9:       0f 85 01 01 00 00       jne    5b10b0 <ExecEvalScalarArrayOp+0x320>
         :	                        resultnull = true;
         :	                else if (useOr)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2639
    3.66 :	  5b0faf:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2639
    9.15 :	  5b0fb3:       0f 84 a7 00 00 00       je     5b1060 <ExecEvalScalarArrayOp+0x2d0>
         :	                {
         :	                        if (DatumGetBool(thisresult))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    2.44 :	  5b0fb9:       84 c0                   test   %al,%al
    0.61 :	  5b0fbb:       0f 85 c5 01 00 00       jne    5b1186 <ExecEvalScalarArrayOp+0x3f6>
         :	                                break;                  /* needn't look at any more elements */
         :	                        }
         :	                }
         :
         :	                /* advance bitmap pointer if any */
         :	                if (bitmap)
    0.00 :	  5b0fc1:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b0fc4:       0f 84 3d ff ff ff       je     5b0f07 <ExecEvalScalarArrayOp+0x177>
         :	                {
         :	                        bitmask <<= 1;
    0.00 :	  5b0fca:       45 01 ed                add    %r13d,%r13d
         :	                        if (bitmask == 0x100)
    0.00 :	  5b0fcd:       41 81 fd 00 01 00 00    cmp    $0x100,%r13d
    0.00 :	  5b0fd4:       0f 85 2d ff ff ff       jne    5b0f07 <ExecEvalScalarArrayOp+0x177>
         :	                        {
         :	                                bitmap++;
    0.00 :	  5b0fda:       49 83 c7 01             add    $0x1,%r15
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
         :	        bitmap = ARR_NULLBITMAP(arr);
         :	        bitmask = 1;
         :
         :	        for (i = 0; i < nitems; i++)
    0.00 :	  5b0fde:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5b0fe2:       44 39 75 c0             cmp    %r14d,-0x40(%rbp)
         :	                if (bitmap)
         :	                {
         :	                        bitmask <<= 1;
         :	                        if (bitmask == 0x100)
         :	                        {
         :	                                bitmap++;
    0.00 :	  5b0fe6:       66 41 bd 01 00          mov    $0x1,%r13w
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
         :	        bitmap = ARR_NULLBITMAP(arr);
         :	        bitmask = 1;
         :
         :	        for (i = 0; i < nitems; i++)
    0.00 :	  5b0feb:       0f 8f 24 ff ff ff       jg     5b0f15 <ExecEvalScalarArrayOp+0x185>
         :	        }
         :	        typlen = sstate->typlen;
         :	        typbyval = sstate->typbyval;
         :	        typalign = sstate->typalign;
         :
         :	        result = BoolGetDatum(!useOr);
    0.00 :	  5b0ff1:       31 c0                   xor    %eax,%eax
    0.00 :	  5b0ff3:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
    0.00 :	  5b0ff7:       0f 94 c0                sete   %al
         :	                                bitmask = 1;
         :	                        }
         :	                }
         :	        }
         :
         :	        *isNull = resultnull;
    0.00 :	  5b0ffa:       0f b6 4d c7             movzbl -0x39(%rbp),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2670
    1.83 :	  5b0ffe:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5b1002:       88 0a                   mov    %cl,(%rdx)
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2672
   10.37 :	  5b1004:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5b1008:       5b                      pop    %rbx
    0.00 :	  5b1009:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2672
    0.61 :	  5b100b:       41 5d                   pop    %r13
    0.00 :	  5b100d:       41 5e                   pop    %r14
    0.00 :	  5b100f:       41 5f                   pop    %r15
    0.00 :	  5b1011:       c9                      leaveq 
    2.44 :	  5b1012:       c3                      retq   
    0.00 :	  5b1013:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /*
         :	         * Initialize function cache if first time through
         :	         */
         :	        if (sstate->fxprstate.func.fn_oid == InvalidOid)
         :	        {
         :	                init_fcache(opexpr->opfuncid, opexpr->inputcollid, &sstate->fxprstate,
    0.00 :	  5b1018:       49 8b 4c 24 20          mov    0x20(%r12),%rcx
    0.00 :	  5b101d:       8b 70 10                mov    0x10(%rax),%esi
    0.00 :	  5b1020:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  5b1026:       8b 78 08                mov    0x8(%rax),%edi
    0.00 :	  5b1029:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5b102c:       e8 ff fa ff ff          callq  5b0b30 <init_fcache>
    0.00 :	  5b1031:       e9 9f fd ff ff          jmpq   5b0dd5 <ExecEvalScalarArrayOp+0x45>
    0.00 :	  5b1036:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b103d:       00 00 00 
         :
         :	        /*
         :	         * If the scalar is NULL, and the function is strict, return NULL; no
         :	         * point in iterating the loop.
         :	         */
         :	        if (fcinfo->argnull[0] && sstate->fxprstate.func.fn_strict)
    0.00 :	  5b1040:       80 7b 2e 00             cmpb   $0x0,0x2e(%rbx)
    0.00 :	  5b1044:       0f 84 01 fe ff ff       je     5b0e4b <ExecEvalScalarArrayOp+0xbb>
         :	        {
         :	                *isNull = true;
    0.00 :	  5b104a:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5b104e:       31 c0                   xor    %eax,%eax
    0.00 :	  5b1050:       c6 02 01                movb   $0x1,(%rdx)
         :	                }
         :	        }
         :
         :	        *isNull = resultnull;
         :	        return result;
         :	}
    0.00 :	  5b1053:       e9 ae fd ff ff          jmpq   5b0e06 <ExecEvalScalarArrayOp+0x76>
    0.00 :	  5b1058:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b105f:       00 
         :	                                break;                  /* needn't look at any more elements */
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        if (!DatumGetBool(thisresult))
    0.00 :	  5b1060:       84 c0                   test   %al,%al
    0.00 :	  5b1062:       0f 85 59 ff ff ff       jne    5b0fc1 <ExecEvalScalarArrayOp+0x231>
    0.00 :	  5b1068:       31 c0                   xor    %eax,%eax
    0.00 :	  5b106a:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  5b106e:       eb 8a                   jmp    5b0ffa <ExecEvalScalarArrayOp+0x26a>
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
         :	                        s = att_addlength_pointer(s, typlen, s);
         :	                        s = (char *) att_align_nominal(s, typalign);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2619
    4.27 :	  5b1070:       49 83 c4 03             add    $0x3,%r12
    0.00 :	  5b1074:       49 83 e4 fc             and    $0xfffffffffffffffc,%r12
    0.00 :	  5b1078:       e9 06 ff ff ff          jmpq   5b0f83 <ExecEvalScalarArrayOp+0x1f3>
    0.00 :	  5b107d:       0f 1f 00                nopl   (%rax)
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
         :	                        s = att_addlength_pointer(s, typlen, s);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2618
    3.05 :	  5b1080:       66 83 7d d4 ff          cmpw   $0xffff,-0x2c(%rbp)
    0.00 :	  5b1085:       75 49                   jne    5b10d0 <ExecEvalScalarArrayOp+0x340>
    0.00 :	  5b1087:       41 0f b6 04 24          movzbl (%r12),%eax
    0.00 :	  5b108c:       3c 01                   cmp    $0x1,%al
    0.00 :	  5b108e:       0f 84 9c 00 00 00       je     5b1130 <ExecEvalScalarArrayOp+0x3a0>
    1.83 :	  5b1094:       a8 01                   test   $0x1,%al
    0.00 :	  5b1096:       0f 84 84 00 00 00       je     5b1120 <ExecEvalScalarArrayOp+0x390>
    0.00 :	  5b109c:       d0 e8                   shr    %al
    0.00 :	  5b109e:       0f b6 c0                movzbl %al,%eax
    0.61 :	  5b10a1:       49 01 c4                add    %rax,%r12
    0.61 :	  5b10a4:       e9 b8 fe ff ff          jmpq   5b0f61 <ExecEvalScalarArrayOp+0x1d1>
    0.00 :	  5b10a9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        fcinfo->isnull = false;
         :	                        thisresult = FunctionCallInvoke(fcinfo);
         :	                }
         :
         :	                /* Combine results per OR or AND semantics */
         :	                if (fcinfo->isnull)
    0.00 :	  5b10b0:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
    0.00 :	  5b10b4:       e9 08 ff ff ff          jmpq   5b0fc1 <ExecEvalScalarArrayOp+0x231>
    0.00 :	  5b10b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        fcinfo->arg[1] = (Datum) 0;
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
    0.00 :	  5b10c0:       4d 8b 04 24             mov    (%r12),%r8
    0.00 :	  5b10c4:       e9 94 fe ff ff          jmpq   5b0f5d <ExecEvalScalarArrayOp+0x1cd>
    0.00 :	  5b10c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        s = att_addlength_pointer(s, typlen, s);
    0.00 :	  5b10d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b10d3:       4c 89 45 a0             mov    %r8,-0x60(%rbp)
    0.00 :	  5b10d7:       e8 74 87 eb ff          callq  469850 <strlen@plt>
    0.00 :	  5b10dc:       4c 8b 45 a0             mov    -0x60(%rbp),%r8
    0.00 :	  5b10e0:       4d 8d 64 04 01          lea    0x1(%r12,%rax,1),%r12
    0.00 :	  5b10e5:       e9 77 fe ff ff          jmpq   5b0f61 <ExecEvalScalarArrayOp+0x1d1>
    0.00 :	  5b10ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        s = (char *) att_align_nominal(s, typalign);
    0.00 :	  5b10f0:       49 83 c4 07             add    $0x7,%r12
    0.00 :	  5b10f4:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	  5b10f8:       e9 86 fe ff ff          jmpq   5b0f83 <ExecEvalScalarArrayOp+0x1f3>
    0.00 :	  5b10fd:       0f 1f 00                nopl   (%rax)
         :	                        fcinfo->arg[1] = (Datum) 0;
         :	                        fcinfo->argnull[1] = true;
         :	                }
         :	                else
         :	                {
         :	                        elt = fetch_att(s, typbyval, typlen);
    0.00 :	  5b1100:       45 8b 04 24             mov    (%r12),%r8d
    0.00 :	  5b1104:       e9 54 fe ff ff          jmpq   5b0f5d <ExecEvalScalarArrayOp+0x1cd>
    0.00 :	  5b1109:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b1110:       45 0f b7 04 24          movzwl (%r12),%r8d
    0.00 :	  5b1115:       e9 43 fe ff ff          jmpq   5b0f5d <ExecEvalScalarArrayOp+0x1cd>
    0.00 :	  5b111a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        s = att_addlength_pointer(s, typlen, s);
    2.44 :	  5b1120:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5b1124:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  5b1127:       89 c0                   mov    %eax,%eax
    1.22 :	  5b1129:       e9 73 ff ff ff          jmpq   5b10a1 <ExecEvalScalarArrayOp+0x311>
    0.00 :	  5b112e:       66 90                   xchg   %ax,%ax
    0.00 :	  5b1130:       41 0f b6 54 24 01       movzbl 0x1(%r12),%edx
    0.00 :	  5b1136:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  5b113b:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  5b113e:       0f 84 5d ff ff ff       je     5b10a1 <ExecEvalScalarArrayOp+0x311>
    0.00 :	  5b1144:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  5b1147:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  5b114c:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  5b1151:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  5b1155:       e9 47 ff ff ff          jmpq   5b10a1 <ExecEvalScalarArrayOp+0x311>
    0.00 :	  5b115a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        result = BoolGetDatum(!useOr);
         :	        resultnull = false;
         :
         :	        /* Loop over the array elements */
         :	        s = (char *) ARR_DATA_PTR(arr);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2600
    0.61 :	  5b1160:       49 63 45 04             movslq 0x4(%r13),%rax
    0.61 :	  5b1164:       45 31 ff                xor    %r15d,%r15d
    0.00 :	  5b1167:       4d 8d 64 c5 10          lea    0x10(%r13,%rax,8),%r12
    0.00 :	  5b116c:       e9 45 fd ff ff          jmpq   5b0eb6 <ExecEvalScalarArrayOp+0x126>
    0.00 :	  5b1171:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * evaluate the operator zero times, it matters not whether it would want
         :	         * to return NULL.
         :	         */
         :	        nitems = ArrayGetNItems(ARR_NDIM(arr), ARR_DIMS(arr));
         :	        if (nitems <= 0)
         :	                return BoolGetDatum(!useOr);
    0.00 :	  5b1178:       31 c0                   xor    %eax,%eax
    0.00 :	  5b117a:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
    0.00 :	  5b117e:       0f 94 c0                sete   %al
         :	                }
         :	        }
         :
         :	        *isNull = resultnull;
         :	        return result;
         :	}
    0.00 :	  5b1181:       e9 80 fc ff ff          jmpq   5b0e06 <ExecEvalScalarArrayOp+0x76>
         :	                /* Combine results per OR or AND semantics */
         :	                if (fcinfo->isnull)
         :	                        resultnull = true;
         :	                else if (useOr)
         :	                {
         :	                        if (DatumGetBool(thisresult))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2641
    0.61 :	  5b1186:       b8 01 00 00 00          mov    $0x1,%eax
    2.44 :	  5b118b:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    1.83 :	  5b118f:       e9 66 fe ff ff          jmpq   5b0ffa <ExecEvalScalarArrayOp+0x26a>
         :	         * Evaluate arguments
         :	         */
         :	        fcinfo = &sstate->fxprstate.fcinfo_data;
         :	        argDone = ExecEvalFuncArgs(fcinfo, sstate->fxprstate.args, econtext);
         :	        if (argDone != ExprSingleResult)
         :	                ereport(ERROR,
    0.00 :	  5b1194:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5b1197:       b9 e0 ae 88 00          mov    $0x88aee0,%ecx
    0.00 :	  5b119c:       ba f1 09 00 00          mov    $0x9f1,%edx
    0.00 :	  5b11a1:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5b11a6:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b11ab:       e8 10 99 1c 00          callq  77aac0 <errstart>
    0.00 :	  5b11b0:       84 c0                   test   %al,%al
    0.00 :	  5b11b2:       75 05                   jne    5b11b9 <ExecEvalScalarArrayOp+0x429>
    0.00 :	  5b11b4:       e8 17 83 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5b11b9:       bf 10 a9 88 00          mov    $0x88a910,%edi
    0.00 :	  5b11be:       31 c0                   xor    %eax,%eax
    0.00 :	  5b11c0:       e8 db b6 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5b11c5:       bf 84 80 00 04          mov    $0x4008084,%edi
    0.00 :	  5b11ca:       89 c3                   mov    %eax,%ebx
    0.00 :	  5b11cc:       e8 7f bb 1c 00          callq  77cd50 <errcode>
    0.00 :	  5b11d1:       89 de                   mov    %ebx,%esi
    0.00 :	  5b11d3:       89 c7                   mov    %eax,%edi
    0.00 :	  5b11d5:       31 c0                   xor    %eax,%eax
    0.00 :	  5b11d7:       e8 04 94 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5b11dc:       eb d6                   jmp    5b11b4 <ExecEvalScalarArrayOp+0x424>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.80 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    6.34 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:724
    4.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    4.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    4.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    4.23 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    4.23 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    4.23 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:712
    3.52 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:711
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:723
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    2.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:705
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:718
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    1.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:718
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:706
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:706
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:711
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    0.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000758230 <bpchareq>:
         :	 * need to be so careful.
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:704
    2.11 :	  758230:       55                      push   %rbp
    2.11 :	  758231:       48 89 e5                mov    %rsp,%rbp
    0.70 :	  758234:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    4.23 :	  758238:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    4.93 :	  75823c:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    4.23 :	  758240:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    2.11 :	  758244:       49 89 fd                mov    %rdi,%r13
    0.00 :	  758247:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  75824b:       48 83 ec 30             sub    $0x30,%rsp
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:705
    1.41 :	  75824f:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:718
    0.70 :	  758253:       45 31 f6                xor    %r14d,%r14d
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  758256:       e8 85 6a 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:706
    0.70 :	  75825b:       49 8b 7d 28             mov    0x28(%r13),%rdi
         :	 *****************************************************************************/
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  75825f:       49 89 c4                mov    %rax,%r12
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.70 :	  758262:       e8 79 6a 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:711
    3.52 :	  758267:       4c 89 e7                mov    %r12,%rdi
         :
         :	Datum
         :	bpchareq(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  75826a:       48 89 c3                mov    %rax,%rbx
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.70 :	  75826d:       e8 1e fb ff ff          callq  757d90 <bcTruelen>
         :	        len2 = bcTruelen(arg2);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:712
    4.23 :	  758272:       48 89 df                mov    %rbx,%rdi
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  758275:       41 89 c7                mov    %eax,%r15d
         :	        len2 = bcTruelen(arg2);
    0.00 :	  758278:       e8 13 fb ff ff          callq  757d90 <bcTruelen>
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:718
    1.41 :	  75827d:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  758280:       74 3e                   je     7582c0 <bpchareq+0x90>
         :	                result = false;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) == 0);
         :
         :	        PG_FREE_IF_COPY(arg1, 0);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:723
    2.11 :	  758282:       4d 3b 65 20             cmp    0x20(%r13),%r12
    0.00 :	  758286:       74 0d                   je     758295 <bpchareq+0x65>
    0.00 :	  758288:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  75828b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  758290:       e8 eb 08 04 00          callq  798b80 <pfree>
         :	        PG_FREE_IF_COPY(arg2, 1);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:724
    6.34 :	  758295:       49 3b 5d 28             cmp    0x28(%r13),%rbx
    0.00 :	  758299:       74 08                   je     7582a3 <bpchareq+0x73>
    0.00 :	  75829b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  75829e:       e8 dd 08 04 00          callq  798b80 <pfree>
         :
         :	        PG_RETURN_BOOL(result);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:727
    1.41 :	  7582a3:       4c 89 f0                mov    %r14,%rax
    0.00 :	  7582a6:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    1.41 :	  7582aa:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  7582ae:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    2.11 :	  7582b2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  7582b6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    1.41 :	  7582ba:       c9                      leaveq 
    2.11 :	  7582bb:       c3                      retq   
    0.00 :	  7582bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
         :	                result = false;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) == 0);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    2.11 :	  7582c0:       f6 03 01                testb  $0x1,(%rbx)
    0.00 :	  7582c3:       48 8d 43 04             lea    0x4(%rbx),%rax
    0.00 :	  7582c7:       48 8d 7b 01             lea    0x1(%rbx),%rdi
    0.00 :	  7582cb:       49 8d 74 24 01          lea    0x1(%r12),%rsi
    0.00 :	  7582d0:       49 63 cf                movslq %r15d,%rcx
    0.70 :	  7582d3:       48 0f 44 f8             cmove  %rax,%rdi
    0.00 :	  7582d7:       41 f6 04 24 01          testb  $0x1,(%r12)
    0.00 :	  7582dc:       49 8d 44 24 04          lea    0x4(%r12),%rax
    0.00 :	  7582e1:       48 0f 44 f0             cmove  %rax,%rsi
    0.70 :	  7582e5:       48 39 c9                cmp    %rcx,%rcx
    4.93 :	  7582e8:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
   33.80 :	  7582ea:       0f 97 c2                seta   %dl
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:721
    4.93 :	  7582ed:       0f 92 c0                setb   %al
    0.00 :	  7582f0:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  7582f3:       38 c2                   cmp    %al,%dl
    1.41 :	  7582f5:       41 0f 94 c6             sete   %r14b
    0.70 :	  7582f9:       eb 87                   jmp    758282 <bpchareq+0x52>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   10.31 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    8.25 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:885
    6.19 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    5.15 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:731
    5.15 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:871
    5.15 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    4.12 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    4.12 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    4.12 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:770
    3.09 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:881
    3.09 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:864
    3.09 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:871
    3.09 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:766
    3.09 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:770
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:732
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:745
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:745
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:872
    2.06 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:872
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:866
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:909
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:957
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:770
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:965
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:965
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:922
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:937
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004960f0 <heapgettup_pagemode>:
         :	static void
         :	heapgettup_pagemode(HeapScanDesc scan,
         :	                                        ScanDirection dir,
         :	                                        int nkeys,
         :	                                        ScanKey key)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    4.12 :	  4960f0:       55                      push   %rbp
         :	        HeapTuple       tuple = &(scan->rs_ctup);
    0.00 :	  4960f1:       48 8d 47 48             lea    0x48(%rdi),%rax
         :	static void
         :	heapgettup_pagemode(HeapScanDesc scan,
         :	                                        ScanDirection dir,
         :	                                        int nkeys,
         :	                                        ScanKey key)
         :	{
    1.03 :	  4960f5:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4960f8:       41 57                   push   %r15
    4.12 :	  4960fa:       41 56                   push   %r14
    2.06 :	  4960fc:       41 55                   push   %r13
    2.06 :	  4960fe:       49 89 fd                mov    %rdi,%r13
    0.00 :	  496101:       41 54                   push   %r12
    1.03 :	  496103:       53                      push   %rbx
    0.00 :	  496104:       48 83 ec 48             sub    $0x48,%rsp
         :	        HeapTuple       tuple = &(scan->rs_ctup);
         :	        bool            backward = ScanDirectionIsBackward(dir);
    0.00 :	  496108:       83 fe ff                cmp    $0xffffffff,%esi
         :	static void
         :	heapgettup_pagemode(HeapScanDesc scan,
         :	                                        ScanDirection dir,
         :	                                        int nkeys,
         :	                                        ScanKey key)
         :	{
    0.00 :	  49610b:       89 55 ac                mov    %edx,-0x54(%rbp)
         :	        HeapTuple       tuple = &(scan->rs_ctup);
         :	        bool            backward = ScanDirectionIsBackward(dir);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:732
    2.06 :	  49610e:       0f 94 45 bf             sete   -0x41(%rbp)
         :	        ItemId          lpp;
         :
         :	        /*
         :	         * calculate next starting lineindex, given scan direction
         :	         */
         :	        if (ScanDirectionIsForward(dir))
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:745
    2.06 :	  496112:       83 ee 01                sub    $0x1,%esi
         :	static void
         :	heapgettup_pagemode(HeapScanDesc scan,
         :	                                        ScanDirection dir,
         :	                                        int nkeys,
         :	                                        ScanKey key)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:730
    1.03 :	  496115:       48 89 4d a0             mov    %rcx,-0x60(%rbp)
         :	        HeapTuple       tuple = &(scan->rs_ctup);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:731
    5.15 :	  496119:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	        ItemId          lpp;
         :
         :	        /*
         :	         * calculate next starting lineindex, given scan direction
         :	         */
         :	        if (ScanDirectionIsForward(dir))
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:745
    2.06 :	  49611d:       0f 84 fd 02 00 00       je     496420 <heapgettup_pagemode+0x330>
         :	                lines = scan->rs_ntuples;
         :	                /* page and lineindex now reference the next visible tid */
         :
         :	                linesleft = lines - lineindex;
         :	        }
         :	        else if (backward)
    0.00 :	  496123:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
    0.00 :	  496127:       0f 84 67 02 00 00       je     496394 <heapgettup_pagemode+0x2a4>
         :	        {
         :	                if (!scan->rs_inited)
    0.00 :	  49612d:       80 7f 41 00             cmpb   $0x0,0x41(%rdi)
    0.00 :	  496131:       0f 84 2a 03 00 00       je     496461 <heapgettup_pagemode+0x371>
         :	                        heapgetpage(scan, page);
         :	                }
         :	                else
         :	                {
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
    0.00 :	  496137:       44 8b 7f 60             mov    0x60(%rdi),%r15d
         :	                }
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  49613b:       41 8b 45 64             mov    0x64(%r13),%eax
    0.00 :	  49613f:       85 c0                   test   %eax,%eax
    0.00 :	  496141:       0f 88 24 05 00 00       js     49666b <heapgettup_pagemode+0x57b>
    0.00 :	  496147:       83 e8 01                sub    $0x1,%eax
    0.00 :	  49614a:       4c 63 f0                movslq %eax,%r14
    0.00 :	  49614d:       49 c1 e6 0d             shl    $0xd,%r14
    0.00 :	  496151:       4c 03 35 a0 99 72 00    add    0x7299a0(%rip),%r14        # bbfaf8 <BufferBlocks>
         :	                lines = scan->rs_ntuples;
         :
         :	                if (!scan->rs_inited)
    0.00 :	  496158:       41 80 7d 41 00          cmpb   $0x0,0x41(%r13)
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
         :	                }
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
         :	                lines = scan->rs_ntuples;
    0.00 :	  49615d:       41 8b 45 78             mov    0x78(%r13),%eax
         :
         :	                if (!scan->rs_inited)
    0.00 :	  496161:       0f 85 c6 04 00 00       jne    49662d <heapgettup_pagemode+0x53d>
         :	                {
         :	                        lineindex = lines - 1;
    0.00 :	  496167:       83 e8 01                sub    $0x1,%eax
    0.00 :	  49616a:       89 45 c0                mov    %eax,-0x40(%rbp)
         :	                        scan->rs_inited = true;
    0.00 :	  49616d:       41 c6 45 41 01          movb   $0x1,0x41(%r13)
         :	                {
         :	                        lineindex = scan->rs_cindex - 1;
         :	                }
         :	                /* page and lineindex now reference the previous visible tid */
         :
         :	                linesleft = lineindex + 1;
    0.00 :	  496172:       8b 55 c0                mov    -0x40(%rbp),%edx
    0.00 :	  496175:       83 c2 01                add    $0x1,%edx
    0.00 :	  496178:       89 55 c4                mov    %edx,-0x3c(%rbp)
         :	                         */
         :	                        if (key != NULL)
         :	                        {
         :	                                bool            valid;
         :
         :	                                HeapKeyTest(tuple, RelationGetDescr(scan->rs_rd),
    0.00 :	  49617b:       8b 55 ac                mov    -0x54(%rbp),%edx
    0.00 :	  49617e:       83 ea 01                sub    $0x1,%edx
    0.00 :	  496181:       89 55 9c                mov    %edx,-0x64(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:881
    3.09 :	  496184:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * advance the scan until we find a qualifying tuple or run out of stuff
         :	         * to scan
         :	         */
         :	        for (;;)
         :	        {
         :	                while (linesleft > 0)
    0.00 :	  496188:       44 8b 45 c4             mov    -0x3c(%rbp),%r8d
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:864
    3.09 :	  49618c:       45 85 c0                test   %r8d,%r8d
    0.00 :	  49618f:       0f 8e 6b 01 00 00       jle    496300 <heapgettup_pagemode+0x210>
         :	                {
         :	                        lineoff = scan->rs_vistuples[lineindex];
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:866
    1.03 :	  496195:       48 63 45 c0             movslq -0x40(%rbp),%rax
    0.00 :	  496199:       41 0f b7 4c 45 7c       movzwl 0x7c(%r13,%rax,2),%ecx
         :	                        lpp = PageGetItemId(dp, lineoff);
    0.00 :	  49619f:       0f b7 d1                movzwl %cx,%edx
         :	                        Assert(ItemIdIsNormal(lpp));
         :
         :	                        tuple->t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
    0.00 :	  4961a2:       48 83 c2 03             add    $0x3,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    2.06 :	  4961a6:       41 0f b7 44 96 08       movzwl 0x8(%r14,%rdx,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
   10.31 :	  4961ac:       25 ff 7f 00 00          and    $0x7fff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:870
    1.03 :	  4961b1:       49 8d 04 06             lea    (%r14,%rax,1),%rax
    2.06 :	  4961b5:       49 89 45 58             mov    %rax,0x58(%r13)
         :	                        tuple->t_len = ItemIdGetLength(lpp);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:871
    5.15 :	  4961b9:       41 0f b7 44 96 0a       movzwl 0xa(%r14,%rdx,4),%eax
         :	                        ItemPointerSet(&(tuple->t_self), page, lineoff);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:872
    2.06 :	  4961bf:       66 45 89 7d 4e          mov    %r15w,0x4e(%r13)
    0.00 :	  4961c4:       66 41 89 4d 50          mov    %cx,0x50(%r13)
         :	                        lineoff = scan->rs_vistuples[lineindex];
         :	                        lpp = PageGetItemId(dp, lineoff);
         :	                        Assert(ItemIdIsNormal(lpp));
         :
         :	                        tuple->t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        tuple->t_len = ItemIdGetLength(lpp);
    0.00 :	  4961c9:       66 d1 e8                shr    %ax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:871
    3.09 :	  4961cc:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4961cf:       41 89 45 48             mov    %eax,0x48(%r13)
         :	                        ItemPointerSet(&(tuple->t_self), page, lineoff);
    0.00 :	  4961d3:       44 89 f8                mov    %r15d,%eax
    0.00 :	  4961d6:       c1 e8 10                shr    $0x10,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:872
    2.06 :	  4961d9:       66 41 89 45 4c          mov    %ax,0x4c(%r13)
         :
         :	                        /*
         :	                         * if current tuple qualifies, return it.
         :	                         */
         :	                        if (key != NULL)
    0.00 :	  4961de:       48 83 7d a0 00          cmpq   $0x0,-0x60(%rbp)
    0.00 :	  4961e3:       0f 84 87 03 00 00       je     496570 <heapgettup_pagemode+0x480>
         :	                        {
         :	                                bool            valid;
         :
         :	                                HeapKeyTest(tuple, RelationGetDescr(scan->rs_rd),
    0.00 :	  4961e9:       44 8b 4d ac             mov    -0x54(%rbp),%r9d
    0.00 :	  4961ed:       45 85 c9                test   %r9d,%r9d
    0.00 :	  4961f0:       0f 84 7a 03 00 00       je     496570 <heapgettup_pagemode+0x480>
    0.00 :	  4961f6:       48 8b 5d a0             mov    -0x60(%rbp),%rbx
    0.00 :	  4961fa:       44 8b 65 9c             mov    -0x64(%rbp),%r12d
    0.00 :	  4961fe:       f6 03 01                testb  $0x1,(%rbx)
    0.00 :	  496201:       0f 84 a3 00 00 00       je     4962aa <heapgettup_pagemode+0x1ba>
    0.00 :	  496207:       e9 c7 00 00 00          jmpq   4962d3 <heapgettup_pagemode+0x1e3>
    0.00 :	  49620c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  496210:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
    0.00 :	  496214:       f6 47 14 01             testb  $0x1,0x14(%rdi)
    0.00 :	  496218:       0f 85 9a 02 00 00       jne    4964b8 <heapgettup_pagemode+0x3c8>
    0.00 :	  49621e:       49 8b 45 00             mov    0x0(%r13),%rax
    0.00 :	  496222:       48 0f bf d1             movswq %cx,%rdx
    0.00 :	  496226:       4c 8b 40 38             mov    0x38(%rax),%r8
    0.00 :	  49622a:       49 8b 40 08             mov    0x8(%r8),%rax
    0.00 :	  49622e:       48 8b 54 d0 f8          mov    -0x8(%rax,%rdx,8),%rdx
    0.00 :	  496233:       8b 42 54                mov    0x54(%rdx),%eax
    0.00 :	  496236:       85 c0                   test   %eax,%eax
    0.00 :	  496238:       0f 88 02 03 00 00       js     496540 <heapgettup_pagemode+0x450>
    0.00 :	  49623e:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.00 :	  496242:       0f 84 d8 02 00 00       je     496520 <heapgettup_pagemode+0x430>
    0.00 :	  496248:       0f b7 52 4c             movzwl 0x4c(%rdx),%edx
    0.00 :	  49624c:       66 83 fa 08             cmp    $0x8,%dx
    0.00 :	  496250:       0f 84 02 03 00 00       je     496558 <heapgettup_pagemode+0x468>
    0.00 :	  496256:       66 83 fa 04             cmp    $0x4,%dx
    0.00 :	  49625a:       0f 84 88 03 00 00       je     4965e8 <heapgettup_pagemode+0x4f8>
    0.00 :	  496260:       66 83 fa 02             cmp    $0x2,%dx
    0.00 :	  496264:       0f 84 96 03 00 00       je     496600 <heapgettup_pagemode+0x510>
    0.00 :	  49626a:       0f b6 57 16             movzbl 0x16(%rdi),%edx
    0.00 :	  49626e:       48 98                   cltq   
    0.00 :	  496270:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  496274:       0f b6 14 10             movzbl (%rax,%rdx,1),%edx
    0.00 :	  496278:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49627f:       00 
    0.00 :	  496280:       48 8b 4b 40             mov    0x40(%rbx),%rcx
    0.00 :	  496284:       8b 73 0c                mov    0xc(%rbx),%esi
    0.00 :	  496287:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  49628b:       e8 a0 7d 2e 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  496290:       84 c0                   test   %al,%al
    0.00 :	  496292:       74 3f                   je     4962d3 <heapgettup_pagemode+0x1e3>
    0.00 :	  496294:       45 85 e4                test   %r12d,%r12d
    0.00 :	  496297:       0f 84 d3 02 00 00       je     496570 <heapgettup_pagemode+0x480>
    0.00 :	  49629d:       48 83 c3 48             add    $0x48,%rbx
    0.00 :	  4962a1:       f6 03 01                testb  $0x1,(%rbx)
    0.00 :	  4962a4:       75 2d                   jne    4962d3 <heapgettup_pagemode+0x1e3>
    0.00 :	  4962a6:       41 83 ec 01             sub    $0x1,%r12d
    0.00 :	  4962aa:       0f b7 4b 04             movzwl 0x4(%rbx),%ecx
    0.00 :	  4962ae:       66 85 c9                test   %cx,%cx
    0.00 :	  4962b1:       0f 8e 49 02 00 00       jle    496500 <heapgettup_pagemode+0x410>
    0.00 :	  4962b7:       49 8b 7d 58             mov    0x58(%r13),%rdi
    0.00 :	  4962bb:       0f bf f1                movswl %cx,%esi
    0.00 :	  4962be:       0f b7 47 12             movzwl 0x12(%rdi),%eax
    0.00 :	  4962c2:       25 ff 07 00 00          and    $0x7ff,%eax
    0.00 :	  4962c7:       39 c6                   cmp    %eax,%esi
    0.00 :	  4962c9:       0f 8e 41 ff ff ff       jle    496210 <heapgettup_pagemode+0x120>
    0.00 :	  4962cf:       c6 45 d7 01             movb   $0x1,-0x29(%rbp)
         :	                         */
         :	                        --linesleft;
         :	                        if (backward)
         :	                                --lineindex;
         :	                        else
         :	                                ++lineindex;
    0.00 :	  4962d3:       8b 55 c0                mov    -0x40(%rbp),%edx
    0.00 :	  4962d6:       8b 45 c0                mov    -0x40(%rbp),%eax
         :	                        }
         :
         :	                        /*
         :	                         * otherwise move to the next item on the page
         :	                         */
         :	                        --linesleft;
    0.00 :	  4962d9:       83 6d c4 01             subl   $0x1,-0x3c(%rbp)
         :	         * advance the scan until we find a qualifying tuple or run out of stuff
         :	         * to scan
         :	         */
         :	        for (;;)
         :	        {
         :	                while (linesleft > 0)
    0.00 :	  4962dd:       44 8b 45 c4             mov    -0x3c(%rbp),%r8d
         :	                         */
         :	                        --linesleft;
         :	                        if (backward)
         :	                                --lineindex;
         :	                        else
         :	                                ++lineindex;
    0.00 :	  4962e1:       83 c2 01                add    $0x1,%edx
    0.00 :	  4962e4:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4962e7:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
    0.00 :	  4962eb:       0f 45 d0                cmovne %eax,%edx
         :	         * advance the scan until we find a qualifying tuple or run out of stuff
         :	         * to scan
         :	         */
         :	        for (;;)
         :	        {
         :	                while (linesleft > 0)
    0.00 :	  4962ee:       45 85 c0                test   %r8d,%r8d
         :	                         */
         :	                        --linesleft;
         :	                        if (backward)
         :	                                --lineindex;
         :	                        else
         :	                                ++lineindex;
    0.00 :	  4962f1:       89 55 c0                mov    %edx,-0x40(%rbp)
         :	         * advance the scan until we find a qualifying tuple or run out of stuff
         :	         * to scan
         :	         */
         :	        for (;;)
         :	        {
         :	                while (linesleft > 0)
    0.00 :	  4962f4:       0f 8f 9b fe ff ff       jg     496195 <heapgettup_pagemode+0xa5>
    0.00 :	  4962fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /*
         :	                 * if we get here, it means we've exhausted the items on this page and
         :	                 * it's time to move to the next.
         :	                 */
         :	                if (backward)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:909
    1.03 :	  496300:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
    0.00 :	  496304:       0f 84 86 02 00 00       je     496590 <heapgettup_pagemode+0x4a0>
         :	                {
         :	                        finished = (page == scan->rs_startblock) ||
    0.00 :	  49630a:       45 39 7d 2c             cmp    %r15d,0x2c(%r13)
    0.00 :	  49630e:       74 1c                   je     49632c <heapgettup_pagemode+0x23c>
    0.00 :	  496310:       41 8b 45 34             mov    0x34(%r13),%eax
    0.00 :	  496314:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	  496317:       0f 84 15 02 00 00       je     496532 <heapgettup_pagemode+0x442>
    0.00 :	  49631d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  496320:       85 c0                   test   %eax,%eax
    0.00 :	  496322:       41 89 45 34             mov    %eax,0x34(%r13)
    0.00 :	  496326:       0f 85 06 02 00 00       jne    496532 <heapgettup_pagemode+0x442>
    0.00 :	  49632c:       bb 01 00 00 00          mov    $0x1,%ebx
         :	                                (scan->rs_numblocks != InvalidBlockNumber ? --scan->rs_numblocks <= 0 : false);
         :	                        if (page == 0)
    0.00 :	  496331:       45 85 ff                test   %r15d,%r15d
    0.00 :	  496334:       75 04                   jne    49633a <heapgettup_pagemode+0x24a>
         :	                                page = scan->rs_nblocks;
    0.00 :	  496336:       45 8b 7d 28             mov    0x28(%r13),%r15d
         :	                        page--;
    0.00 :	  49633a:       41 83 ef 01             sub    $0x1,%r15d
         :	                }
         :
         :	                /*
         :	                 * return NULL if we've exhausted all the pages
         :	                 */
         :	                if (finished)
    0.00 :	  49633e:       84 db                   test   %bl,%bl
    0.00 :	  496340:       0f 85 f6 02 00 00       jne    49663c <heapgettup_pagemode+0x54c>
         :	                        tuple->t_data = NULL;
         :	                        scan->rs_inited = false;
         :	                        return;
         :	                }
         :
         :	                heapgetpage(scan, page);
    0.00 :	  496346:       44 89 fe                mov    %r15d,%esi
    0.00 :	  496349:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  49634c:       e8 0f fb ff ff          callq  495e60 <heapgetpage>
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:957
    1.03 :	  496351:       41 8b 45 64             mov    0x64(%r13),%eax
    0.00 :	  496355:       85 c0                   test   %eax,%eax
    0.00 :	  496357:       0f 88 bb 02 00 00       js     496618 <heapgettup_pagemode+0x528>
    0.00 :	  49635d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  496360:       4c 63 f0                movslq %eax,%r14
    0.00 :	  496363:       49 c1 e6 0d             shl    $0xd,%r14
    0.00 :	  496367:       4c 03 35 8a 97 72 00    add    0x72978a(%rip),%r14        # bbfaf8 <BufferBlocks>
         :	                lines = scan->rs_ntuples;
         :	                linesleft = lines;
         :	                if (backward)
    0.00 :	  49636e:       80 7d bf 00             cmpb   $0x0,-0x41(%rbp)
         :	                }
         :
         :	                heapgetpage(scan, page);
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
         :	                lines = scan->rs_ntuples;
    0.00 :	  496372:       41 8b 45 78             mov    0x78(%r13),%eax
         :	                linesleft = lines;
         :	                if (backward)
    0.00 :	  496376:       c7 45 c0 00 00 00 00    movl   $0x0,-0x40(%rbp)
    0.00 :	  49637d:       89 45 c4                mov    %eax,-0x3c(%rbp)
    0.00 :	  496380:       0f 84 02 fe ff ff       je     496188 <heapgettup_pagemode+0x98>
         :	                        lineindex = lines - 1;
    0.00 :	  496386:       8d 50 ff                lea    -0x1(%rax),%edx
    0.00 :	  496389:       89 45 c4                mov    %eax,-0x3c(%rbp)
    0.00 :	  49638c:       89 55 c0                mov    %edx,-0x40(%rbp)
    0.00 :	  49638f:       e9 f4 fd ff ff          jmpq   496188 <heapgettup_pagemode+0x98>
         :	        else
         :	        {
         :	                /*
         :	                 * ``no movement'' scan direction: refetch prior tuple
         :	                 */
         :	                if (!scan->rs_inited)
    0.00 :	  496394:       80 7f 41 00             cmpb   $0x0,0x41(%rdi)
    0.00 :	  496398:       74 6e                   je     496408 <heapgettup_pagemode+0x318>
         :	                        Assert(!BufferIsValid(scan->rs_cbuf));
         :	                        tuple->t_data = NULL;
         :	                        return;
         :	                }
         :
         :	                page = ItemPointerGetBlockNumber(&(tuple->t_self));
    0.00 :	  49639a:       0f b7 77 4c             movzwl 0x4c(%rdi),%esi
    0.00 :	  49639e:       0f b7 47 4e             movzwl 0x4e(%rdi),%eax
    0.00 :	  4963a2:       c1 e6 10                shl    $0x10,%esi
    0.00 :	  4963a5:       09 c6                   or     %eax,%esi
         :	                if (page != scan->rs_cblock)
    0.00 :	  4963a7:       39 77 60                cmp    %esi,0x60(%rdi)
    0.00 :	  4963aa:       74 05                   je     4963b1 <heapgettup_pagemode+0x2c1>
         :	                        heapgetpage(scan, page);
    0.00 :	  4963ac:       e8 af fa ff ff          callq  495e60 <heapgetpage>
         :
         :	                /* Since the tuple was previously fetched, needn't lock page here */
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  4963b1:       41 8b 45 64             mov    0x64(%r13),%eax
    0.00 :	  4963b5:       85 c0                   test   %eax,%eax
    0.00 :	  4963b7:       0f 88 d8 02 00 00       js     496695 <heapgettup_pagemode+0x5a5>
    0.00 :	  4963bd:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4963c0:       48 63 c8                movslq %eax,%rcx
    0.00 :	  4963c3:       48 c1 e1 0d             shl    $0xd,%rcx
    0.00 :	  4963c7:       48 03 0d 2a 97 72 00    add    0x72972a(%rip),%rcx        # bbfaf8 <BufferBlocks>
         :	                lineoff = ItemPointerGetOffsetNumber(&(tuple->t_self));
         :	                lpp = PageGetItemId(dp, lineoff);
    0.00 :	  4963ce:       41 0f b7 45 50          movzwl 0x50(%r13),%eax
         :	                Assert(ItemIdIsNormal(lpp));
         :
         :	                tuple->t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
    0.00 :	  4963d3:       48 83 c0 03             add    $0x3,%rax
    0.00 :	  4963d7:       0f b7 54 81 08          movzwl 0x8(%rcx,%rax,4),%edx
    0.00 :	  4963dc:       81 e2 ff 7f 00 00       and    $0x7fff,%edx
    0.00 :	  4963e2:       48 8d 14 11             lea    (%rcx,%rdx,1),%rdx
    0.00 :	  4963e6:       49 89 55 58             mov    %rdx,0x58(%r13)
         :	                tuple->t_len = ItemIdGetLength(lpp);
    0.00 :	  4963ea:       0f b7 44 81 0a          movzwl 0xa(%rcx,%rax,4),%eax
    0.00 :	  4963ef:       66 d1 e8                shr    %ax
    0.00 :	  4963f2:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  4963f5:       41 89 45 48             mov    %eax,0x48(%r13)
         :	                if (backward)
         :	                        lineindex = lines - 1;
         :	                else
         :	                        lineindex = 0;
         :	        }
         :	}
    0.00 :	  4963f9:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  4963fd:       5b                      pop    %rbx
    0.00 :	  4963fe:       41 5c                   pop    %r12
    0.00 :	  496400:       41 5d                   pop    %r13
    0.00 :	  496402:       41 5e                   pop    %r14
    0.00 :	  496404:       41 5f                   pop    %r15
    0.00 :	  496406:       c9                      leaveq 
    0.00 :	  496407:       c3                      retq   
         :	                 * ``no movement'' scan direction: refetch prior tuple
         :	                 */
         :	                if (!scan->rs_inited)
         :	                {
         :	                        Assert(!BufferIsValid(scan->rs_cbuf));
         :	                        tuple->t_data = NULL;
    0.00 :	  496408:       49 c7 45 58 00 00 00    movq   $0x0,0x58(%r13)
    0.00 :	  49640f:       00 
         :	                if (backward)
         :	                        lineindex = lines - 1;
         :	                else
         :	                        lineindex = 0;
         :	        }
         :	}
    0.00 :	  496410:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  496414:       5b                      pop    %rbx
    0.00 :	  496415:       41 5c                   pop    %r12
    0.00 :	  496417:       41 5d                   pop    %r13
    0.00 :	  496419:       41 5e                   pop    %r14
    0.00 :	  49641b:       41 5f                   pop    %r15
    0.00 :	  49641d:       c9                      leaveq 
    0.00 :	  49641e:       c3                      retq   
    0.00 :	  49641f:       90                      nop
         :	        /*
         :	         * calculate next starting lineindex, given scan direction
         :	         */
         :	        if (ScanDirectionIsForward(dir))
         :	        {
         :	                if (!scan->rs_inited)
    0.00 :	  496420:       80 7f 41 00             cmpb   $0x0,0x41(%rdi)
    0.00 :	  496424:       74 66                   je     49648c <heapgettup_pagemode+0x39c>
         :	                }
         :	                else
         :	                {
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
         :	                        lineindex = scan->rs_cindex + 1;
    0.00 :	  496426:       8b 47 70                mov    0x70(%rdi),%eax
         :	                        scan->rs_inited = true;
         :	                }
         :	                else
         :	                {
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:766
    3.09 :	  496429:       44 8b 7f 60             mov    0x60(%rdi),%r15d
         :	                        lineindex = scan->rs_cindex + 1;
    0.00 :	  49642d:       83 c0 01                add    $0x1,%eax
    0.00 :	  496430:       89 45 c0                mov    %eax,-0x40(%rbp)
         :	                }
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:770
    1.03 :	  496433:       41 8b 45 64             mov    0x64(%r13),%eax
    3.09 :	  496437:       85 c0                   test   %eax,%eax
    0.00 :	  496439:       0f 88 41 02 00 00       js     496680 <heapgettup_pagemode+0x590>
    0.00 :	  49643f:       83 e8 01                sub    $0x1,%eax
    0.00 :	  496442:       4c 63 f0                movslq %eax,%r14
    0.00 :	  496445:       49 c1 e6 0d             shl    $0xd,%r14
    4.12 :	  496449:       4c 03 35 a8 96 72 00    add    0x7296a8(%rip),%r14        # bbfaf8 <BufferBlocks>
         :	                lines = scan->rs_ntuples;
         :	                /* page and lineindex now reference the next visible tid */
         :
         :	                linesleft = lines - lineindex;
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    6.19 :	  496450:       41 8b 55 78             mov    0x78(%r13),%edx
    0.00 :	  496454:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  496457:       29 c2                   sub    %eax,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    1.03 :	  496459:       89 55 c4                mov    %edx,-0x3c(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:774
    5.15 :	  49645c:       e9 1a fd ff ff          jmpq   49617b <heapgettup_pagemode+0x8b>
         :	                if (!scan->rs_inited)
         :	                {
         :	                        /*
         :	                         * return null immediately if relation is empty
         :	                         */
         :	                        if (scan->rs_nblocks == 0)
    0.00 :	  496461:       44 8b 57 28             mov    0x28(%rdi),%r10d
    0.00 :	  496465:       45 85 d2                test   %r10d,%r10d
    0.00 :	  496468:       74 9e                   je     496408 <heapgettup_pagemode+0x318>
         :	                         * time, and much more likely that we'll just bollix things for
         :	                         * forward scanners.
         :	                         */
         :	                        scan->rs_syncscan = false;
         :	                        /* start from last page of the scan */
         :	                        if (scan->rs_startblock > 0)
    0.00 :	  49646a:       8b 47 2c                mov    0x2c(%rdi),%eax
         :	                         * Disable reporting to syncscan logic in a backwards scan; it's
         :	                         * not very likely anyone else is doing the same thing at the same
         :	                         * time, and much more likely that we'll just bollix things for
         :	                         * forward scanners.
         :	                         */
         :	                        scan->rs_syncscan = false;
    0.00 :	  49646d:       c6 47 40 00             movb   $0x0,0x40(%rdi)
         :	                        /* start from last page of the scan */
         :	                        if (scan->rs_startblock > 0)
    0.00 :	  496471:       85 c0                   test   %eax,%eax
    0.00 :	  496473:       75 03                   jne    496478 <heapgettup_pagemode+0x388>
         :	                                page = scan->rs_startblock - 1;
         :	                        else
         :	                                page = scan->rs_nblocks - 1;
    0.00 :	  496475:       8b 47 28                mov    0x28(%rdi),%eax
    0.00 :	  496478:       44 8d 78 ff             lea    -0x1(%rax),%r15d
         :	                        heapgetpage(scan, page);
    0.00 :	  49647c:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  49647f:       44 89 fe                mov    %r15d,%esi
    0.00 :	  496482:       e8 d9 f9 ff ff          callq  495e60 <heapgetpage>
    0.00 :	  496487:       e9 af fc ff ff          jmpq   49613b <heapgettup_pagemode+0x4b>
         :	                if (!scan->rs_inited)
         :	                {
         :	                        /*
         :	                         * return null immediately if relation is empty
         :	                         */
         :	                        if (scan->rs_nblocks == 0)
    0.00 :	  49648c:       44 8b 5f 28             mov    0x28(%rdi),%r11d
    0.00 :	  496490:       45 85 db                test   %r11d,%r11d
    0.00 :	  496493:       0f 84 6f ff ff ff       je     496408 <heapgettup_pagemode+0x318>
         :	                        {
         :	                                Assert(!BufferIsValid(scan->rs_cbuf));
         :	                                tuple->t_data = NULL;
         :	                                return;
         :	                        }
         :	                        page = scan->rs_startblock; /* first page */
    0.00 :	  496499:       44 8b 7f 2c             mov    0x2c(%rdi),%r15d
         :	                        heapgetpage(scan, page);
    0.00 :	  49649d:       44 89 fe                mov    %r15d,%esi
    0.00 :	  4964a0:       e8 bb f9 ff ff          callq  495e60 <heapgetpage>
         :	                        lineindex = 0;
         :	                        scan->rs_inited = true;
    0.00 :	  4964a5:       41 c6 45 41 01          movb   $0x1,0x41(%r13)
    0.00 :	  4964aa:       c7 45 c0 00 00 00 00    movl   $0x0,-0x40(%rbp)
    0.00 :	  4964b1:       eb 80                   jmp    496433 <heapgettup_pagemode+0x343>
    0.00 :	  4964b3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         */
         :	                        if (key != NULL)
         :	                        {
         :	                                bool            valid;
         :
         :	                                HeapKeyTest(tuple, RelationGetDescr(scan->rs_rd),
    0.00 :	  4964b8:       0f bf 73 04             movswl 0x4(%rbx),%esi
    0.00 :	  4964bc:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  4964bf:       89 c8                   mov    %ecx,%eax
    0.00 :	  4964c1:       83 e1 07                and    $0x7,%ecx
    0.00 :	  4964c4:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4964c7:       48 98                   cltq   
    0.00 :	  4964c9:       0f b6 44 07 17          movzbl 0x17(%rdi,%rax,1),%eax
    0.00 :	  4964ce:       d3 f8                   sar    %cl,%eax
    0.00 :	  4964d0:       a8 01                   test   $0x1,%al
    0.00 :	  4964d2:       0f 84 f7 fd ff ff       je     4962cf <heapgettup_pagemode+0x1df>
    0.00 :	  4964d8:       49 8b 45 00             mov    0x0(%r13),%rax
    0.00 :	  4964dc:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  4964e0:       48 8b 50 38             mov    0x38(%rax),%rdx
    0.00 :	  4964e4:       e8 a7 94 fd ff          callq  46f990 <nocachegetattr>
    0.00 :	  4964e9:       48 89 c2                mov    %rax,%rdx
    0.00 :	  4964ec:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  4964f0:       0f 84 8a fd ff ff       je     496280 <heapgettup_pagemode+0x190>
    0.00 :	  4964f6:       e9 d8 fd ff ff          jmpq   4962d3 <heapgettup_pagemode+0x1e3>
    0.00 :	  4964fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  496500:       49 8b 45 00             mov    0x0(%r13),%rax
    0.00 :	  496504:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  496508:       0f bf f1                movswl %cx,%esi
    0.00 :	  49650b:       48 8d 4d d7             lea    -0x29(%rbp),%rcx
    0.00 :	  49650f:       48 8b 50 38             mov    0x38(%rax),%rdx
    0.00 :	  496513:       e8 b8 87 fd ff          callq  46ecd0 <heap_getsysattr>
    0.00 :	  496518:       48 89 c2                mov    %rax,%rdx
    0.00 :	  49651b:       eb cf                   jmp    4964ec <heapgettup_pagemode+0x3fc>
    0.00 :	  49651d:       0f 1f 00                nopl   (%rax)
    0.00 :	  496520:       0f b6 57 16             movzbl 0x16(%rdi),%edx
    0.00 :	  496524:       48 98                   cltq   
    0.00 :	  496526:       48 01 d0                add    %rdx,%rax
    0.00 :	  496529:       48 8d 14 07             lea    (%rdi,%rax,1),%rdx
    0.00 :	  49652d:       e9 4e fd ff ff          jmpq   496280 <heapgettup_pagemode+0x190>
         :	                 * if we get here, it means we've exhausted the items on this page and
         :	                 * it's time to move to the next.
         :	                 */
         :	                if (backward)
         :	                {
         :	                        finished = (page == scan->rs_startblock) ||
    0.00 :	  496532:       31 db                   xor    %ebx,%ebx
    0.00 :	  496534:       e9 f8 fd ff ff          jmpq   496331 <heapgettup_pagemode+0x241>
    0.00 :	  496539:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         */
         :	                        if (key != NULL)
         :	                        {
         :	                                bool            valid;
         :
         :	                                HeapKeyTest(tuple, RelationGetDescr(scan->rs_rd),
    0.00 :	  496540:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  496544:       4c 89 c2                mov    %r8,%rdx
    0.00 :	  496547:       e8 44 94 fd ff          callq  46f990 <nocachegetattr>
    0.00 :	  49654c:       48 89 c2                mov    %rax,%rdx
    0.00 :	  49654f:       eb 9b                   jmp    4964ec <heapgettup_pagemode+0x3fc>
    0.00 :	  496551:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  496558:       0f b6 57 16             movzbl 0x16(%rdi),%edx
    0.00 :	  49655c:       48 98                   cltq   
    0.00 :	  49655e:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  496562:       48 8b 14 10             mov    (%rax,%rdx,1),%rdx
    0.00 :	  496566:       e9 15 fd ff ff          jmpq   496280 <heapgettup_pagemode+0x190>
    0.00 :	  49656b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                                        nkeys, key, valid);
         :	                                if (valid)
         :	                                {
         :	                                        scan->rs_cindex = lineindex;
    0.00 :	  496570:       8b 45 c0                mov    -0x40(%rbp),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:885
    8.25 :	  496573:       41 89 45 70             mov    %eax,0x70(%r13)
         :	                if (backward)
         :	                        lineindex = lines - 1;
         :	                else
         :	                        lineindex = 0;
         :	        }
         :	}
    0.00 :	  496577:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  49657b:       5b                      pop    %rbx
    0.00 :	  49657c:       41 5c                   pop    %r12
    0.00 :	  49657e:       41 5d                   pop    %r13
    0.00 :	  496580:       41 5e                   pop    %r14
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:965
    1.03 :	  496582:       41 5f                   pop    %r15
    0.00 :	  496584:       c9                      leaveq 
    1.03 :	  496585:       c3                      retq   
    0.00 :	  496586:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  49658d:       00 00 00 
         :	                                page = scan->rs_nblocks;
         :	                        page--;
         :	                }
         :	                else
         :	                {
         :	                        page++;
    0.00 :	  496590:       41 83 c7 01             add    $0x1,%r15d
         :	                        if (page >= scan->rs_nblocks)
    0.00 :	  496594:       45 3b 7d 28             cmp    0x28(%r13),%r15d
    0.00 :	  496598:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	  49659d:       44 0f 43 f8             cmovae %eax,%r15d
         :	                                page = 0;
         :	                        finished = (page == scan->rs_startblock) ||
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:922
    1.03 :	  4965a1:       45 39 7d 2c             cmp    %r15d,0x2c(%r13)
    0.00 :	  4965a5:       74 14                   je     4965bb <heapgettup_pagemode+0x4cb>
    0.00 :	  4965a7:       41 8b 45 34             mov    0x34(%r13),%eax
    0.00 :	  4965ab:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	  4965ae:       74 2c                   je     4965dc <heapgettup_pagemode+0x4ec>
    0.00 :	  4965b0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  4965b3:       85 c0                   test   %eax,%eax
    0.00 :	  4965b5:       41 89 45 34             mov    %eax,0x34(%r13)
    0.00 :	  4965b9:       75 21                   jne    4965dc <heapgettup_pagemode+0x4ec>
    0.00 :	  4965bb:       bb 01 00 00 00          mov    $0x1,%ebx
         :	                         * rel.  That's not strictly necessary, but otherwise when you run
         :	                         * the same query multiple times the starting position would shift
         :	                         * a little bit backwards on every invocation, which is confusing.
         :	                         * We don't guarantee any specific ordering in general, though.
         :	                         */
         :	                        if (scan->rs_syncscan)
    0.00 :	  4965c0:       41 80 7d 40 00          cmpb   $0x0,0x40(%r13)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:937
    1.03 :	  4965c5:       0f 84 73 fd ff ff       je     49633e <heapgettup_pagemode+0x24e>
         :	                                ss_report_location(scan->rs_rd, page);
    0.00 :	  4965cb:       49 8b 7d 00             mov    0x0(%r13),%rdi
    0.00 :	  4965cf:       44 89 fe                mov    %r15d,%esi
    0.00 :	  4965d2:       e8 49 a8 00 00          callq  4a0e20 <ss_report_location>
    0.00 :	  4965d7:       e9 62 fd ff ff          jmpq   49633e <heapgettup_pagemode+0x24e>
         :	                else
         :	                {
         :	                        page++;
         :	                        if (page >= scan->rs_nblocks)
         :	                                page = 0;
         :	                        finished = (page == scan->rs_startblock) ||
    0.00 :	  4965dc:       31 db                   xor    %ebx,%ebx
    0.00 :	  4965de:       66 90                   xchg   %ax,%ax
    0.00 :	  4965e0:       eb de                   jmp    4965c0 <heapgettup_pagemode+0x4d0>
    0.00 :	  4965e2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         */
         :	                        if (key != NULL)
         :	                        {
         :	                                bool            valid;
         :
         :	                                HeapKeyTest(tuple, RelationGetDescr(scan->rs_rd),
    0.00 :	  4965e8:       0f b6 57 16             movzbl 0x16(%rdi),%edx
    0.00 :	  4965ec:       48 98                   cltq   
    0.00 :	  4965ee:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  4965f2:       8b 14 10                mov    (%rax,%rdx,1),%edx
    0.00 :	  4965f5:       e9 86 fc ff ff          jmpq   496280 <heapgettup_pagemode+0x190>
    0.00 :	  4965fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  496600:       0f b6 57 16             movzbl 0x16(%rdi),%edx
    0.00 :	  496604:       48 98                   cltq   
    0.00 :	  496606:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  49660a:       0f b7 14 10             movzwl (%rax,%rdx,1),%edx
    0.00 :	  49660e:       e9 6d fc ff ff          jmpq   496280 <heapgettup_pagemode+0x190>
    0.00 :	  496613:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        return;
         :	                }
         :
         :	                heapgetpage(scan, page);
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  496618:       f7 d0                   not    %eax
    0.00 :	  49661a:       48 63 d0                movslq %eax,%rdx
    0.00 :	  49661d:       48 8b 05 f4 6a 6e 00    mov    0x6e6af4(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  496624:       4c 8b 34 d0             mov    (%rax,%rdx,8),%r14
    0.00 :	  496628:       e9 41 fd ff ff          jmpq   49636e <heapgettup_pagemode+0x27e>
         :	                        lineindex = lines - 1;
         :	                        scan->rs_inited = true;
         :	                }
         :	                else
         :	                {
         :	                        lineindex = scan->rs_cindex - 1;
    0.00 :	  49662d:       41 8b 45 70             mov    0x70(%r13),%eax
    0.00 :	  496631:       83 e8 01                sub    $0x1,%eax
    0.00 :	  496634:       89 45 c0                mov    %eax,-0x40(%rbp)
    0.00 :	  496637:       e9 36 fb ff ff          jmpq   496172 <heapgettup_pagemode+0x82>
         :	                /*
         :	                 * return NULL if we've exhausted all the pages
         :	                 */
         :	                if (finished)
         :	                {
         :	                        if (BufferIsValid(scan->rs_cbuf))
    0.00 :	  49663c:       41 8b 7d 64             mov    0x64(%r13),%edi
    0.00 :	  496640:       85 ff                   test   %edi,%edi
    0.00 :	  496642:       74 05                   je     496649 <heapgettup_pagemode+0x559>
         :	                                ReleaseBuffer(scan->rs_cbuf);
    0.00 :	  496644:       e8 17 e8 1d 00          callq  674e60 <ReleaseBuffer>
         :	                        scan->rs_cbuf = InvalidBuffer;
    0.00 :	  496649:       41 c7 45 64 00 00 00    movl   $0x0,0x64(%r13)
    0.00 :	  496650:       00 
         :	                        scan->rs_cblock = InvalidBlockNumber;
    0.00 :	  496651:       41 c7 45 60 ff ff ff    movl   $0xffffffff,0x60(%r13)
    0.00 :	  496658:       ff 
         :	                        tuple->t_data = NULL;
    0.00 :	  496659:       49 c7 45 58 00 00 00    movq   $0x0,0x58(%r13)
    0.00 :	  496660:       00 
         :	                        scan->rs_inited = false;
    0.00 :	  496661:       41 c6 45 41 00          movb   $0x0,0x41(%r13)
         :	                if (backward)
         :	                        lineindex = lines - 1;
         :	                else
         :	                        lineindex = 0;
         :	        }
         :	}
    0.00 :	  496666:       e9 a5 fd ff ff          jmpq   496410 <heapgettup_pagemode+0x320>
         :	                {
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
         :	                }
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  49666b:       f7 d0                   not    %eax
    0.00 :	  49666d:       48 63 d0                movslq %eax,%rdx
    0.00 :	  496670:       48 8b 05 a1 6a 6e 00    mov    0x6e6aa1(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  496677:       4c 8b 34 d0             mov    (%rax,%rdx,8),%r14
    0.00 :	  49667b:       e9 d8 fa ff ff          jmpq   496158 <heapgettup_pagemode+0x68>
         :	                        /* continue from previously returned page/tuple */
         :	                        page = scan->rs_cblock;         /* current page */
         :	                        lineindex = scan->rs_cindex + 1;
         :	                }
         :
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  496680:       f7 d0                   not    %eax
    0.00 :	  496682:       48 63 d0                movslq %eax,%rdx
    0.00 :	  496685:       48 8b 05 8c 6a 6e 00    mov    0x6e6a8c(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49668c:       4c 8b 34 d0             mov    (%rax,%rdx,8),%r14
    0.00 :	  496690:       e9 bb fd ff ff          jmpq   496450 <heapgettup_pagemode+0x360>
         :	                page = ItemPointerGetBlockNumber(&(tuple->t_self));
         :	                if (page != scan->rs_cblock)
         :	                        heapgetpage(scan, page);
         :
         :	                /* Since the tuple was previously fetched, needn't lock page here */
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  496695:       f7 d0                   not    %eax
    0.00 :	  496697:       48 63 d0                movslq %eax,%rdx
    0.00 :	  49669a:       48 8b 05 77 6a 6e 00    mov    0x6e6a77(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4966a1:       48 8b 0c d0             mov    (%rax,%rdx,8),%rcx
    0.00 :	  4966a5:       e9 24 fd ff ff          jmpq   4963ce <heapgettup_pagemode+0x2de>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   69.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   21.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    3.53 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:779
    1.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:811
    1.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782ca0 <CHashBucketScan>:
         :	CHashBucketScan(CHashTable table,
         :	                                CHashPtr *start,
         :	                                uint32 hashcode,
         :	                                const void *key,
         :	                                CHashScanResult *res)
         :	{
    0.00 :	  782ca0:       55                      push   %rbp
    0.00 :	  782ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782ca4:       41 57                   push   %r15
    0.00 :	  782ca6:       41 89 d7                mov    %edx,%r15d
    0.00 :	  782ca9:       41 56                   push   %r14
    0.00 :	  782cab:       41 55                   push   %r13
    0.00 :	  782cad:       49 89 fd                mov    %rdi,%r13
    0.00 :	  782cb0:       41 54                   push   %r12
    0.00 :	  782cb2:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  782cb5:       53                      push   %rbx
    0.00 :	  782cb6:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  782cba:       48 89 75 d0             mov    %rsi,-0x30(%rbp)
    0.00 :	  782cbe:       48 89 4d c8             mov    %rcx,-0x38(%rbp)
    0.00 :	  782cc2:       4c 89 45 c0             mov    %r8,-0x40(%rbp)
         :	        CHashPtr   *pointer_to_target;
         :	        CHashNode  *target_node = NULL;
         :
         :	retry:
         :	        pointer_to_target = start;
         :	        target = *pointer_to_target;
    0.00 :	  782cc6:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  782cca:       44 8b 10                mov    (%rax),%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
   21.18 :	  782ccd:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cd1:       0f 87 ff 00 00 00       ja     782dd6 <CHashBucketScan+0x136>
         :	                {
         :	                        res->found = false;
         :	                        break;
    0.00 :	  782cd7:       4c 8b 75 d0             mov    -0x30(%rbp),%r14
    0.00 :	  782cdb:       eb 21                   jmp    782cfe <CHashBucketScan+0x5e>
    0.00 :	  782cdd:       0f 1f 00                nopl   (%rax)
         :	                /*
         :	                 * Bucket chains are kept in order, so that there is exactly one legal
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
    0.00 :	  782ce0:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	                if (h == hashcode)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:779
    1.18 :	  782ce5:       44 39 f8                cmp    %r15d,%eax
    0.00 :	  782ce8:       74 5e                   je     782d48 <CHashBucketScan+0xa8>
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
         :	                                                 table->desc.key_size);
         :	                else if (h > hashcode)
    0.00 :	  782cea:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  782ced:       0f 1f 00                nopl   (%rax)
    0.00 :	  782cf0:       72 7b                   jb     782d6d <CHashBucketScan+0xcd>
         :	                                break;
         :	                        }
         :	                }
         :
         :	                /* Continue scan from next node. */
         :	                pointer_to_target = &target_node->next;
    0.00 :	  782cf2:       4d 89 e6                mov    %r12,%r14
    0.00 :	  782cf5:       45 89 c2                mov    %r8d,%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
    0.00 :	  782cf8:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cfc:       77 79                   ja     782d77 <CHashBucketScan+0xd7>
         :	                {
         :	                        res->found = false;
         :	                        break;
         :	                }
         :	                target_node = CHashTableGetNode(table, target);
    0.00 :	  782cfe:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d01:       d1 e8                   shr    %eax
    0.00 :	  782d03:       41 89 c4                mov    %eax,%r12d
    0.00 :	  782d06:       45 0f af 65 1c          imul   0x1c(%r13),%r12d
    0.00 :	  782d0b:       4d 03 65 30             add    0x30(%r13),%r12
         :	                 * target may have been fetched from an arena entry that could be
         :	                 * concurrently modified, so a dependency barrier is required before
         :	                 * dereferencing the derived pointer.
         :	                 */
         :	                pg_read_barrier_depends();
         :	                next = target_node->next;
    0.00 :	  782d0f:       45 8b 04 24             mov    (%r12),%r8d
         :	                 * ensures that delete-marked elements are removed from bucket chains
         :	                 * as quickly as possible and reduces code duplication.  See
         :	                 * CHashDelete for further comments about why delete-marking is
         :	                 * necessary and how it allows safe deletion.
         :	                 */
         :	                if (CHashPtrIsMarked(next))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   69.41 :	  782d13:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d17:       74 c7                   je     782ce0 <CHashBucketScan+0x40>
         :	                {
         :	zap:
         :	                        if (__sync_bool_compare_and_swap(pointer_to_target,
    0.00 :	  782d19:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  782d1c:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d1f:       83 e3 fe                and    $0xfffffffe,%ebx
    0.00 :	  782d22:       f0 41 0f b1 1e          lock cmpxchg %ebx,(%r14)
    0.00 :	  782d27:       74 77                   je     782da0 <CHashBucketScan+0x100>
         :	                                 * the node which precedes it before we advance to the next
         :	                                 * node.  That could certainly happen occasionally, but we'd
         :	                                 * have to be pretty unlucky to have it happen even twice in
         :	                                 * a row.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge_Fail);
    0.00 :	  782d29:       49 83 85 88 00 00 00    addq   $0x1,0x88(%r13)
    0.00 :	  782d30:       01 
         :	                                target = *pointer_to_target;
    0.00 :	  782d31:       45 8b 16                mov    (%r14),%r10d
         :	                                if (CHashPtrIsMarked(target))
    0.00 :	  782d34:       41 f6 c2 01             test   $0x1,%r10b
    0.00 :	  782d38:       74 be                   je     782cf8 <CHashBucketScan+0x58>
         :	                                {
         :	                                        CHashTableIncrementStatistic(table, CHS_Scan_Restart);
    0.00 :	  782d3a:       49 83 85 90 00 00 00    addq   $0x1,0x90(%r13)
    0.00 :	  782d41:       01 
         :	                                        goto retry;
    0.00 :	  782d42:       eb 82                   jmp    782cc6 <CHashBucketScan+0x26>
    0.00 :	  782d44:       0f 1f 40 00             nopl   0x0(%rax)
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
         :	                if (h == hashcode)
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.18 :	  782d48:       41 0f b7 4d 0e          movzwl 0xe(%r13),%ecx
    0.00 :	  782d4d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  782d51:       49 8d 74 24 08          lea    0x8(%r12),%rsi
    0.00 :	  782d56:       48 39 c9                cmp    %rcx,%rcx
    1.18 :	  782d59:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
    3.53 :	  782d5b:       0f 97 c0                seta   %al
    0.00 :	  782d5e:       0f 92 c2                setb   %dl
    0.00 :	  782d61:       28 d0                   sub    %dl,%al
    0.00 :	  782d63:       0f be c0                movsbl %al,%eax
         :	                 * the point where we expect to find the key OR someone delete-marked
         :	                 * the item and overwrote the hashcode with a gcnext pointer.  In the
         :	                 * latter case we must take care not to be fooled into stopping the
         :	                 * scan early.
         :	                 */
         :	                if (cmp >= 0)
    0.00 :	  782d66:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  782d69:       7c 87                   jl     782cf2 <CHashBucketScan+0x52>
         :	                {
         :	                        if (cmp == 0)
    0.00 :	  782d6b:       74 5b                   je     782dc8 <CHashBucketScan+0x128>
         :	                                /*
         :	                                 * pg_read_barrier() prevents the reread of the next pointer
         :	                                 * from being speculated ahead of the read of the hash value.
         :	                                 */
         :	                                pg_read_barrier();
         :	                                next = target_node->next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:811
    1.18 :	  782d6d:       45 8b 04 24             mov    (%r12),%r8d
         :	                                if (CHashPtrIsMarked(next))
    0.00 :	  782d71:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d75:       75 a2                   jne    782d19 <CHashBucketScan+0x79>
         :	                                        goto zap;
         :	                                res->found = false;
    0.00 :	  782d77:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  782d7b:       c6 47 18 00             movb   $0x0,0x18(%rdi)
         :	                pointer_to_target = &target_node->next;
         :	                target = next;
         :	        }
         :
         :	        /* Send results back to caller. */
         :	        res->target = target;
    0.00 :	  782d7f:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782d83:       44 89 10                mov    %r10d,(%rax)
         :	        res->pointer_to_target = pointer_to_target;
    0.00 :	  782d86:       4c 89 70 08             mov    %r14,0x8(%rax)
         :	        res->target_node = target_node;
    0.00 :	  782d8a:       4c 89 60 10             mov    %r12,0x10(%rax)
         :	}
    0.00 :	  782d8e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  782d92:       5b                      pop    %rbx
    0.00 :	  782d93:       41 5c                   pop    %r12
    0.00 :	  782d95:       41 5d                   pop    %r13
    0.00 :	  782d97:       41 5e                   pop    %r14
    0.00 :	  782d99:       41 5f                   pop    %r15
    0.00 :	  782d9b:       c9                      leaveq 
    0.00 :	  782d9c:       c3                      retq   
    0.00 :	  782d9d:       0f 1f 00                nopl   (%rax)
         :	                                 * delete-mark has been applied.  Thus, if we just keep
         :	                                 * following the next pointers, we're guaranteed to visit
         :	                                 * all non-deleted items (and possibly some deleted items)
         :	                                 * that were present at the time we began the scan.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge);
    0.00 :	  782da0:       49 83 85 80 00 00 00    addq   $0x1,0x80(%r13)
    0.00 :	  782da7:       01 
         :	                                CHashAddToGarbage(table, hashcode & table->bucket_mask,
    0.00 :	  782da8:       44 89 fe                mov    %r15d,%esi
    0.00 :	  782dab:       41 23 75 10             and    0x10(%r13),%esi
    0.00 :	  782daf:       44 89 d2                mov    %r10d,%edx
    0.00 :	  782db2:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  782db5:       e8 96 fe ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782dba:       41 89 da                mov    %ebx,%r10d
    0.00 :	  782dbd:       e9 36 ff ff ff          jmpq   782cf8 <CHashBucketScan+0x58>
    0.00 :	  782dc2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 */
         :	                if (cmp >= 0)
         :	                {
         :	                        if (cmp == 0)
         :	                        {
         :	                                res->found = true;
    0.00 :	  782dc8:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782dcc:       c6 40 18 01             movb   $0x1,0x18(%rax)
         :	                                res->next = next;
    0.00 :	  782dd0:       44 89 40 04             mov    %r8d,0x4(%rax)
         :	                                break;
    0.00 :	  782dd4:       eb a9                   jmp    782d7f <CHashBucketScan+0xdf>
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    1.18 :	  782dd6:       49 89 c6                mov    %rax,%r14
    0.00 :	  782dd9:       eb 9c                   jmp    782d77 <CHashBucketScan+0xd7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   13.04 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
   11.59 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
   10.14 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
   10.14 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    7.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    5.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    2.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    2.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    2.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005acf10 <ExecQual>:
         :	 *
         :	 * ----------------------------------------------------------------
         :	 */
         :	bool
         :	ExecQual(List *qual, ExprContext *econtext, bool resultForNull)
         :	{
    0.00 :	  5acf10:       55                      push   %rbp
    0.00 :	  5acf11:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    8.70 :	  5acf14:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.45 :	  5acf16:       41 56                   push   %r14
    0.00 :	  5acf18:       41 89 d6                mov    %edx,%r14d
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    8.70 :	  5acf1b:       41 55                   push   %r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.45 :	  5acf1d:       41 54                   push   %r12
    0.00 :	  5acf1f:       49 89 f4                mov    %rsi,%r12
    0.00 :	  5acf22:       53                      push   %rbx
    0.00 :	  5acf23:       48 83 ec 18             sub    $0x18,%rsp
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf27:       48 8b 46 28             mov    0x28(%rsi),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    1.45 :	  5acf2b:       48 85 ff                test   %rdi,%rdi
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    5.80 :	  5acf2e:       4c 8b 3d 2b d9 60 00    mov    0x60d92b(%rip),%r15        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5acf35:       48 89 05 24 d9 60 00    mov    %rax,0x60d924(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5acf3c:       74 4a                   je     5acf88 <ExecQual+0x78>
    0.00 :	  5acf3e:       48 8b 5f 08             mov    0x8(%rdi),%rbx
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
   10.14 :	  5acf42:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf45:       74 41                   je     5acf88 <ExecQual+0x78>
    0.00 :	  5acf47:       4c 8d 6d d7             lea    -0x29(%rbp),%r13
    0.00 :	  5acf4b:       eb 11                   jmp    5acf5e <ExecQual+0x4e>
    0.00 :	  5acf4d:       0f 1f 00                nopl   (%rax)
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
         :
         :	                if (isNull)
         :	                {
         :	                        if (resultForNull == false)
    0.00 :	  5acf50:       45 84 f6                test   %r14b,%r14b
    0.00 :	  5acf53:       74 24                   je     5acf79 <ExecQual+0x69>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf55:       48 8b 5b 08             mov    0x8(%rbx),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    2.90 :	  5acf59:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf5c:       74 2a                   je     5acf88 <ExecQual+0x78>
         :	        {
         :	                ExprState  *clause = (ExprState *) lfirst(l);
    0.00 :	  5acf5e:       48 8b 03                mov    (%rbx),%rax
         :	                Datum           expr_value;
         :	                bool            isNull;
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
   11.59 :	  5acf61:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5acf63:       4c 89 ea                mov    %r13,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    1.45 :	  5acf66:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5acf69:       48 89 c7                mov    %rax,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
   10.14 :	  5acf6c:       ff 50 10                callq  *0x10(%rax)
         :
         :	                if (isNull)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    2.90 :	  5acf6f:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
   13.04 :	  5acf73:       75 db                   jne    5acf50 <ExecQual+0x40>
         :	                                break;
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        if (!DatumGetBool(expr_value))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    7.25 :	  5acf75:       84 c0                   test   %al,%al
    0.00 :	  5acf77:       75 dc                   jne    5acf55 <ExecQual+0x45>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf79:       31 c0                   xor    %eax,%eax
    0.00 :	  5acf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5acf80:       eb 0b                   jmp    5acf8d <ExecQual+0x7d>
    0.00 :	  5acf82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5acf88:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  5acf8d:       4c 89 3d cc d8 60 00    mov    %r15,0x60d8cc(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    4.35 :	  5acf94:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5acf98:       5b                      pop    %rbx
    2.90 :	  5acf99:       41 5c                   pop    %r12
    0.00 :	  5acf9b:       41 5d                   pop    %r13
    0.00 :	  5acf9d:       41 5e                   pop    %r14
    0.00 :	  5acf9f:       41 5f                   pop    %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    5.80 :	  5acfa1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   37.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   18.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   14.06 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
    7.81 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    3.12 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:669
    1.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:665
    1.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:676
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b16a0 <ExecEvalScalarVarFast>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   18.75 :	  5b16a0:       55                      push   %rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:669
    1.56 :	  5b16a1:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Var                *variable = (Var *) exprstate->expr;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:665
    1.56 :	  5b16a4:       4c 8b 47 08             mov    0x8(%rdi),%r8
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   14.06 :	  5b16a8:       48 89 e5                mov    %rsp,%rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16ab:       74 06                   je     5b16b3 <ExecEvalScalarVarFast+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b16ad:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.56 :	  5b16b3:       41 8b 40 04             mov    0x4(%r8),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   37.50 :	  5b16b7:       3d e8 fd 00 00          cmp    $0xfde8,%eax
    0.00 :	  5b16bc:       74 1a                   je     5b16d8 <ExecEvalScalarVarFast+0x38>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    3.12 :	  5b16be:       3d e9 fd 00 00          cmp    $0xfde9,%eax
    0.00 :	  5b16c3:       74 2b                   je     5b16f0 <ExecEvalScalarVarFast+0x50>
         :
         :	                        /* INDEX_VAR is handled by default case */
         :
         :	                default:                                /* get the tuple from the relation being
         :	                                                                 * scanned */
         :	                        slot = econtext->ecxt_scantuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
   12.50 :	  5b16c5:       48 8b 7e 08             mov    0x8(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16c9:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16ce:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    7.81 :	  5b16cf:       e9 2c dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16d4:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
         :	        {
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:676
    1.56 :	  5b16d8:       48 8b 7e 10             mov    0x10(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16dc:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16e1:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16e2:       e9 19 dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b16ee:       00 00 
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
         :	                        break;
         :
         :	                case OUTER_VAR: /* get the tuple from the outer node */
         :	                        slot = econtext->ecxt_outertuple;
    0.00 :	  5b16f0:       48 8b 7e 18             mov    0x18(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16f4:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16f9:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16fa:       e9 01 dd eb ff          jmpq   46f400 <slot_getattr>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   27.87 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:394
   21.31 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:396
    8.20 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:404
    4.92 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:414
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:344
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:396
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:401
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:402
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:393
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:401
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:404
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:409
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:333
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000495e60 <heapgetpage>:
         :	 * In page-at-a-time mode it performs additional work, namely determining
         :	 * which tuples on the page are visible.
         :	 */
         :	static void
         :	heapgetpage(HeapScanDesc scan, BlockNumber page)
         :	{
    0.00 :	  495e60:       55                      push   %rbp
    0.00 :	  495e61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  495e64:       41 57                   push   %r15
    0.00 :	  495e66:       41 56                   push   %r14
    0.00 :	  495e68:       49 89 fe                mov    %rdi,%r14
    0.00 :	  495e6b:       41 55                   push   %r13
    0.00 :	  495e6d:       41 54                   push   %r12
    0.00 :	  495e6f:       53                      push   %rbx
    0.00 :	  495e70:       48 83 ec 78             sub    $0x78,%rsp
    0.00 :	  495e74:       89 b5 6c ff ff ff       mov    %esi,-0x94(%rbp)
         :	        bool            all_visible;
         :
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        /* release previous scan buffer, if any */
         :	        if (BufferIsValid(scan->rs_cbuf))
    0.00 :	  495e7a:       8b 7f 64                mov    0x64(%rdi),%edi
    0.00 :	  495e7d:       85 ff                   test   %edi,%edi
    0.00 :	  495e7f:       0f 85 fb 01 00 00       jne    496080 <heapgetpage+0x220>
         :	        /*
         :	         * Be sure to check for interrupts at least once per page.  Checks at
         :	         * higher code levels won't be able to stop a seqscan that encounters many
         :	         * pages' worth of consecutive dead tuples.
         :	         */
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  495e85:       0f b6 05 04 42 72 00    movzbl 0x724204(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  495e8c:       84 c0                   test   %al,%al
    0.00 :	  495e8e:       0f 85 d4 01 00 00       jne    496068 <heapgetpage+0x208>
         :
         :	        /* read page using selected strategy */
         :	        scan->rs_cbuf = ReadBufferExtended(scan->rs_rd, MAIN_FORKNUM, page,
    0.00 :	  495e94:       4d 8b 46 38             mov    0x38(%r14),%r8
    0.00 :	  495e98:       8b 95 6c ff ff ff       mov    -0x94(%rbp),%edx
    0.00 :	  495e9e:       31 c9                   xor    %ecx,%ecx
    0.00 :	  495ea0:       49 8b 3e                mov    (%r14),%rdi
    0.00 :	  495ea3:       31 f6                   xor    %esi,%esi
    0.00 :	  495ea5:       e8 c6 06 1e 00          callq  676570 <ReadBufferExtended>
         :	                                                                           RBM_NORMAL, scan->rs_strategy);
         :	        scan->rs_cblock = page;
         :
         :	        if (!scan->rs_pageatatime)
    0.00 :	  495eaa:       41 80 7e 21 00          cmpb   $0x0,0x21(%r14)
         :	         * pages' worth of consecutive dead tuples.
         :	         */
         :	        CHECK_FOR_INTERRUPTS();
         :
         :	        /* read page using selected strategy */
         :	        scan->rs_cbuf = ReadBufferExtended(scan->rs_rd, MAIN_FORKNUM, page,
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:344
    3.28 :	  495eaf:       41 89 c7                mov    %eax,%r15d
    0.00 :	  495eb2:       41 89 46 64             mov    %eax,0x64(%r14)
         :	                                                                           RBM_NORMAL, scan->rs_strategy);
         :	        scan->rs_cblock = page;
    0.00 :	  495eb6:       8b 85 6c ff ff ff       mov    -0x94(%rbp),%eax
    0.00 :	  495ebc:       41 89 46 60             mov    %eax,0x60(%r14)
         :
         :	        if (!scan->rs_pageatatime)
    0.00 :	  495ec0:       75 16                   jne    495ed8 <heapgetpage+0x78>
         :
         :	        LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
         :
         :	        Assert(ntup <= MaxHeapTuplesPerPage);
         :	        scan->rs_ntuples = ntup;
         :	}
    0.00 :	  495ec2:       48 83 c4 78             add    $0x78,%rsp
    0.00 :	  495ec6:       5b                      pop    %rbx
    0.00 :	  495ec7:       41 5c                   pop    %r12
    0.00 :	  495ec9:       41 5d                   pop    %r13
    0.00 :	  495ecb:       41 5e                   pop    %r14
    0.00 :	  495ecd:       41 5f                   pop    %r15
    0.00 :	  495ecf:       c9                      leaveq 
    0.00 :	  495ed0:       c3                      retq   
    0.00 :	  495ed1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        if (!scan->rs_pageatatime)
         :	                return;
         :
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  495ed8:       49 8b 4e 08             mov    0x8(%r14),%rcx
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  495edc:       44 89 fe                mov    %r15d,%esi
         :
         :	        if (!scan->rs_pageatatime)
         :	                return;
         :
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  495edf:       48 89 4d 88             mov    %rcx,-0x78(%rbp)
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  495ee3:       49 8b 3e                mov    (%r14),%rdi
    0.00 :	  495ee6:       e8 65 97 00 00          callq  49f650 <heap_page_prune_opt>
         :	        /*
         :	         * We must hold share lock on the buffer content while examining tuple
         :	         * visibility.  Afterwards, however, the tuples we have found to be
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
    0.00 :	  495eeb:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  495ef0:       44 89 ff                mov    %r15d,%edi
    0.00 :	  495ef3:       e8 18 e8 1d 00          callq  674710 <LockBuffer>
         :
         :	        dp = (Page) BufferGetPage(buffer);
    0.00 :	  495ef8:       45 85 ff                test   %r15d,%r15d
    0.00 :	  495efb:       0f 88 cf 01 00 00       js     4960d0 <heapgetpage+0x270>
    0.00 :	  495f01:       41 8d 47 ff             lea    -0x1(%r15),%eax
    0.00 :	  495f05:       48 63 d8                movslq %eax,%rbx
    0.00 :	  495f08:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  495f0c:       48 03 1d e5 9b 72 00    add    0x729be5(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        lines = PageGetMaxOffsetNumber(dp);
    0.00 :	  495f13:       0f b7 43 0c             movzwl 0xc(%rbx),%eax
    0.00 :	  495f17:       c7 45 90 00 00 00 00    movl   $0x0,-0x70(%rbp)
    0.00 :	  495f1e:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  495f22:       0f 87 88 01 00 00       ja     4960b0 <heapgetpage+0x250>
         :	         * the page-level flag can be trusted in the same way, because it might
         :	         * get propagated somehow without being explicitly WAL-logged, e.g. via a
         :	         * full page write. Until we can prove that beyond doubt, let's check each
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
    0.00 :	  495f28:       c6 45 af 00             movb   $0x0,-0x51(%rbp)
    0.00 :	  495f2c:       f6 43 0a 04             testb  $0x4,0xa(%rbx)
    0.00 :	  495f30:       0f 85 62 01 00 00       jne    496098 <heapgetpage+0x238>
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
    0.00 :	  495f36:       8b 7d 90                mov    -0x70(%rbp),%edi
         :	                 lineoff++, lpp++)
    0.00 :	  495f39:       c7 45 a8 00 00 00 00    movl   $0x0,-0x58(%rbp)
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
    0.00 :	  495f40:       85 ff                   test   %edi,%edi
    0.00 :	  495f42:       0f 8e c8 00 00 00       jle    496010 <heapgetpage+0x1b0>
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        loctup.t_len = ItemIdGetLength(lpp);
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
    0.00 :	  495f48:       8b 8d 6c ff ff ff       mov    -0x94(%rbp),%ecx
         :	         * full page write. Until we can prove that beyond doubt, let's check each
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
    0.00 :	  495f4e:       4c 8d 6b 18             lea    0x18(%rbx),%r13
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        loctup.t_len = ItemIdGetLength(lpp);
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
    0.00 :	  495f52:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  495f58:       c1 e9 10                shr    $0x10,%ecx
    0.00 :	  495f5b:       66 89 8d 70 ff ff ff    mov    %cx,-0x90(%rbp)
    0.00 :	  495f62:       eb 19                   jmp    495f7d <heapgetpage+0x11d>
    0.00 :	  495f64:       0f 1f 40 00             nopl   0x0(%rax)
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
         :	                 lineoff++, lpp++)
    0.00 :	  495f68:       41 83 c4 01             add    $0x1,%r12d
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
    0.00 :	  495f6c:       41 0f b7 c4             movzwl %r12w,%eax
    0.00 :	  495f70:       39 45 90                cmp    %eax,-0x70(%rbp)
    0.00 :	  495f73:       0f 8c 97 00 00 00       jl     496010 <heapgetpage+0x1b0>
         :	                 lineoff++, lpp++)
    0.00 :	  495f79:       49 83 c5 04             add    $0x4,%r13
         :	        {
         :	                if (ItemIdIsNormal(lpp))
    0.00 :	  495f7d:       41 8b 45 00             mov    0x0(%r13),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:396
   21.31 :	  495f81:       25 00 80 01 00          and    $0x18000,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:396
    3.28 :	  495f86:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  495f8b:       75 db                   jne    495f68 <heapgetpage+0x108>
         :	                {
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
    0.00 :	  495f8d:       49 8b 36                mov    (%r14),%rsi
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        loctup.t_len = ItemIdGetLength(lpp);
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
    0.00 :	  495f90:       0f b7 8d 6c ff ff ff    movzwl -0x94(%rbp),%ecx
         :	                if (ItemIdIsNormal(lpp))
         :	                {
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:401
    1.64 :	  495f97:       8b 46 40                mov    0x40(%rsi),%eax
    3.28 :	  495f9a:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
    0.00 :	  495f9d:       41 0f b7 45 00          movzwl 0x0(%r13),%eax
    0.00 :	  495fa2:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	  495fa7:       48 8d 04 03             lea    (%rbx,%rax,1),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:402
    3.28 :	  495fab:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	                        loctup.t_len = ItemIdGetLength(lpp);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    3.28 :	  495faf:       41 0f b7 45 02          movzwl 0x2(%r13),%eax
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
    0.00 :	  495fb4:       66 89 4d b6             mov    %cx,-0x4a(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:404
    1.64 :	  495fb8:       66 44 89 65 b8          mov    %r12w,-0x48(%rbp)
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        loctup.t_len = ItemIdGetLength(lpp);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:403
    1.64 :	  495fbd:       66 d1 e8                shr    %ax
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
         :
         :	                        if (all_visible)
    0.00 :	  495fc0:       80 7d af 00             cmpb   $0x0,-0x51(%rbp)
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        loctup.t_tableOid = RelationGetRelid(scan->rs_rd);
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lpp);
         :	                        loctup.t_len = ItemIdGetLength(lpp);
    1.64 :	  495fc4:       0f b7 c0                movzwl %ax,%eax
    1.64 :	  495fc7:       89 45 b0                mov    %eax,-0x50(%rbp)
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:404
    8.20 :	  495fca:       0f b7 85 70 ff ff ff    movzwl -0x90(%rbp),%eax
    0.00 :	  495fd1:       66 89 45 b4             mov    %ax,-0x4c(%rbp)
         :
         :	                        if (all_visible)
    0.00 :	  495fd5:       74 59                   je     496030 <heapgetpage+0x1d0>
         :	                                valid = true;
         :	                        else
         :	                                valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 :	  495fd7:       4c 8b 45 88             mov    -0x78(%rbp),%r8
    0.00 :	  495fdb:       48 8d 55 b0             lea    -0x50(%rbp),%rdx
    0.00 :	  495fdf:       44 89 f9                mov    %r15d,%ecx
    1.64 :	  495fe2:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  495fe7:       e8 74 e6 1f 00          callq  694660 <CheckForSerializableConflictOut>
         :	                                                                                        buffer, snapshot);
         :
         :	                        if (valid)
         :	                                scan->rs_vistuples[ntup++] = lineoff;
    0.00 :	  495fec:       48 63 45 a8             movslq -0x58(%rbp),%rax
    0.00 :	  495ff0:       66 45 89 64 46 7c       mov    %r12w,0x7c(%r14,%rax,2)
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
         :	                 lineoff++, lpp++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:394
   27.87 :	  495ff6:       41 83 c4 01             add    $0x1,%r12d
         :
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
         :	                                                                                        buffer, snapshot);
         :
         :	                        if (valid)
         :	                                scan->rs_vistuples[ntup++] = lineoff;
    0.00 :	  495ffa:       83 45 a8 01             addl   $0x1,-0x58(%rbp)
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
         :
         :	        for (lineoff = FirstOffsetNumber, lpp = PageGetItemId(dp, lineoff);
         :	                 lineoff <= lines;
    0.00 :	  495ffe:       41 0f b7 c4             movzwl %r12w,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:393
    3.28 :	  496002:       39 45 90                cmp    %eax,-0x70(%rbp)
    0.00 :	  496005:       0f 8d 6e ff ff ff       jge    495f79 <heapgetpage+0x119>
    0.00 :	  49600b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        if (valid)
         :	                                scan->rs_vistuples[ntup++] = lineoff;
         :	                }
         :	        }
         :
         :	        LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  496010:       44 89 ff                mov    %r15d,%edi
    0.00 :	  496013:       31 f6                   xor    %esi,%esi
    0.00 :	  496015:       e8 f6 e6 1d 00          callq  674710 <LockBuffer>
         :
         :	        Assert(ntup <= MaxHeapTuplesPerPage);
         :	        scan->rs_ntuples = ntup;
    0.00 :	  49601a:       8b 45 a8                mov    -0x58(%rbp),%eax
    0.00 :	  49601d:       41 89 46 78             mov    %eax,0x78(%r14)
         :	}
    0.00 :	  496021:       48 83 c4 78             add    $0x78,%rsp
    0.00 :	  496025:       5b                      pop    %rbx
    0.00 :	  496026:       41 5c                   pop    %r12
    0.00 :	  496028:       41 5d                   pop    %r13
    0.00 :	  49602a:       41 5e                   pop    %r14
    0.00 :	  49602c:       41 5f                   pop    %r15
    0.00 :	  49602e:       c9                      leaveq 
    0.00 :	  49602f:       c3                      retq   
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
         :
         :	                        if (all_visible)
         :	                                valid = true;
         :	                        else
         :	                                valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:409
    1.64 :	  496030:       48 8b 75 88             mov    -0x78(%rbp),%rsi
    0.00 :	  496034:       44 89 fa                mov    %r15d,%edx
    0.00 :	  496037:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  49603b:       ff 16                   callq  *(%rsi)
         :
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
    0.00 :	  49603d:       4c 8b 45 88             mov    -0x78(%rbp),%r8
         :	                        ItemPointerSet(&(loctup.t_self), page, lineoff);
         :
         :	                        if (all_visible)
         :	                                valid = true;
         :	                        else
         :	                                valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  496041:       88 45 ae                mov    %al,-0x52(%rbp)
         :
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:411
    1.64 :	  496044:       48 8d 55 b0             lea    -0x50(%rbp),%rdx
    1.64 :	  496048:       49 8b 36                mov    (%r14),%rsi
    0.00 :	  49604b:       0f be f8                movsbl %al,%edi
    0.00 :	  49604e:       44 89 f9                mov    %r15d,%ecx
    0.00 :	  496051:       e8 0a e6 1f 00          callq  694660 <CheckForSerializableConflictOut>
         :	                                                                                        buffer, snapshot);
         :
         :	                        if (valid)
    0.00 :	  496056:       80 7d ae 00             cmpb   $0x0,-0x52(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:414
    4.92 :	  49605a:       0f 84 08 ff ff ff       je     495f68 <heapgetpage+0x108>
    0.00 :	  496060:       eb 8a                   jmp    495fec <heapgetpage+0x18c>
    0.00 :	  496062:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  496068:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49606f:       00 
         :	        /*
         :	         * Be sure to check for interrupts at least once per page.  Checks at
         :	         * higher code levels won't be able to stop a seqscan that encounters many
         :	         * pages' worth of consecutive dead tuples.
         :	         */
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  496070:       e8 2b 62 20 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  496075:       0f 1f 00                nopl   (%rax)
    0.00 :	  496078:       e9 17 fe ff ff          jmpq   495e94 <heapgetpage+0x34>
    0.00 :	  49607d:       0f 1f 00                nopl   (%rax)
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        /* release previous scan buffer, if any */
         :	        if (BufferIsValid(scan->rs_cbuf))
         :	        {
         :	                ReleaseBuffer(scan->rs_cbuf);
    0.00 :	  496080:       e8 db ed 1d 00          callq  674e60 <ReleaseBuffer>
         :	                scan->rs_cbuf = InvalidBuffer;
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:333
    1.64 :	  496085:       41 c7 46 64 00 00 00    movl   $0x0,0x64(%r14)
    0.00 :	  49608c:       00 
    0.00 :	  49608d:       0f 1f 00                nopl   (%rax)
    0.00 :	  496090:       e9 f0 fd ff ff          jmpq   495e85 <heapgetpage+0x25>
    0.00 :	  496095:       0f 1f 00                nopl   (%rax)
         :	         * the page-level flag can be trusted in the same way, because it might
         :	         * get propagated somehow without being explicitly WAL-logged, e.g. via a
         :	         * full page write. Until we can prove that beyond doubt, let's check each
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
    0.00 :	  496098:       48 8b 45 88             mov    -0x78(%rbp),%rax
    0.00 :	  49609c:       80 78 29 00             cmpb   $0x0,0x29(%rax)
    0.00 :	  4960a0:       0f 94 45 af             sete   -0x51(%rbp)
    0.00 :	  4960a4:       e9 8d fe ff ff          jmpq   495f36 <heapgetpage+0xd6>
    0.00 :	  4960a9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
         :
         :	        dp = (Page) BufferGetPage(buffer);
         :	        lines = PageGetMaxOffsetNumber(dp);
    0.00 :	  4960b0:       0f b7 c0                movzwl %ax,%eax
         :	         * the page-level flag can be trusted in the same way, because it might
         :	         * get propagated somehow without being explicitly WAL-logged, e.g. via a
         :	         * full page write. Until we can prove that beyond doubt, let's check each
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
    0.00 :	  4960b3:       c6 45 af 00             movb   $0x0,-0x51(%rbp)
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
         :
         :	        dp = (Page) BufferGetPage(buffer);
         :	        lines = PageGetMaxOffsetNumber(dp);
    0.00 :	  4960b7:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  4960bb:       48 c1 e8 02             shr    $0x2,%rax
    0.00 :	  4960bf:       89 45 90                mov    %eax,-0x70(%rbp)
         :	         * the page-level flag can be trusted in the same way, because it might
         :	         * get propagated somehow without being explicitly WAL-logged, e.g. via a
         :	         * full page write. Until we can prove that beyond doubt, let's check each
         :	         * tuple for visibility the hard way.
         :	         */
         :	        all_visible = PageIsAllVisible(dp) && !snapshot->takenDuringRecovery;
    0.00 :	  4960c2:       f6 43 0a 04             testb  $0x4,0xa(%rbx)
    0.00 :	  4960c6:       0f 84 6a fe ff ff       je     495f36 <heapgetpage+0xd6>
    0.00 :	  4960cc:       eb ca                   jmp    496098 <heapgetpage+0x238>
    0.00 :	  4960ce:       66 90                   xchg   %ax,%ax
         :	         * visibility.  Afterwards, however, the tuples we have found to be
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
         :
         :	        dp = (Page) BufferGetPage(buffer);
    0.00 :	  4960d0:       44 89 f8                mov    %r15d,%eax
    0.00 :	  4960d3:       48 8b 15 3e 70 6e 00    mov    0x6e703e(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4960da:       f7 d0                   not    %eax
    0.00 :	  4960dc:       48 98                   cltq   
    0.00 :	  4960de:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  4960e2:       e9 2c fe ff ff          jmpq   495f13 <heapgetpage+0xb3>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1995
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1964
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    1.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b1430 <ExecMakeFunctionResultNoSets>:
         :	static Datum
         :	ExecMakeFunctionResultNoSets(FuncExprState *fcache,
         :	                                                         ExprContext *econtext,
         :	                                                         bool *isNull,
         :	                                                         ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
   23.33 :	  5b1430:       55                      push   %rbp
    0.00 :	  5b1431:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b1434:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    3.33 :	  5b1436:       49 89 d7                mov    %rdx,%r15
    0.00 :	  5b1439:       41 56                   push   %r14
    1.67 :	  5b143b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5b143e:       41 55                   push   %r13
    1.67 :	  5b1440:       49 89 fd                mov    %rdi,%r13
    0.00 :	  5b1443:       41 54                   push   %r12
    0.00 :	  5b1445:       53                      push   %rbx
    1.67 :	  5b1446:       48 89 cb                mov    %rcx,%rbx
    1.67 :	  5b1449:       48 83 ec 48             sub    $0x48,%rsp
         :	        FunctionCallInfo fcinfo;
         :	        PgStat_FunctionCallUsage fcusage;
         :	        int                     i;
         :
         :	        /* Guard against stack overflow due to overly complex expressions */
         :	        check_stack_depth();
    0.00 :	  5b144d:       e8 8e a5 0e 00          callq  69b9e0 <check_stack_depth>
         :
         :	        if (isDone)
    0.00 :	  5b1452:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b1455:       74 06                   je     5b145d <ExecMakeFunctionResultNoSets+0x2d>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b1457:       c7 03 00 00 00 00       movl   $0x0,(%rbx)
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.67 :	  5b145d:       49 8b 45 18             mov    0x18(%r13),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5b1461:       48 85 c0                test   %rax,%rax
    0.00 :	  5b1464:       0f 84 c2 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b146a:       4c 8b 60 08             mov    0x8(%rax),%r12
    1.67 :	  5b146e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b1471:       0f 84 b5 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b1477:       31 db                   xor    %ebx,%ebx
    0.00 :	  5b1479:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1964
    1.67 :	  5b1480:       49 8b 04 24             mov    (%r12),%rax
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    5.00 :	  5b1484:       49 8d 94 1d b0 03 00    lea    0x3b0(%r13,%rbx,1),%rdx
    0.00 :	  5b148b:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    1.67 :	  5b148c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b148e:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5b1491:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5b1494:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5b1497:       49 89 84 dd 90 00 00    mov    %rax,0x90(%r13,%rbx,8)
    0.00 :	  5b149e:       00 
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    6.67 :	  5b149f:       4d 8b 64 24 08          mov    0x8(%r12),%r12
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
    0.00 :	  5b14a4:       8d 53 01                lea    0x1(%rbx),%edx
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b14a7:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  5b14ab:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b14ae:       75 d0                   jne    5b1480 <ExecMakeFunctionResultNoSets+0x50>
         :
         :	        /*
         :	         * If function is strict, and there are any NULL arguments, skip calling
         :	         * the function and return NULL.
         :	         */
         :	        if (fcache->func.fn_strict)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    3.33 :	  5b14b0:       41 80 7d 2e 00          cmpb   $0x0,0x2e(%r13)
    1.67 :	  5b14b5:       74 34                   je     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
    0.00 :	  5b14b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b14be:       00 00 
         :	        {
         :	                while (--i >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    3.33 :	  5b14c0:       83 ea 01                sub    $0x1,%edx
    3.33 :	  5b14c3:       78 26                   js     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
         :	                {
         :	                        if (fcinfo->argnull[i])
    0.00 :	  5b14c5:       48 63 c2                movslq %edx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.67 :	  5b14c8:       41 80 bc 05 b0 03 00    cmpb   $0x0,0x3b0(%r13,%rax,1)
    0.00 :	  5b14cf:       00 00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    8.33 :	  5b14d1:       74 ed                   je     5b14c0 <ExecMakeFunctionResultNoSets+0x90>
         :	                        {
         :	                                *isNull = true;
    0.00 :	  5b14d3:       41 c6 07 01             movb   $0x1,(%r15)
    0.00 :	  5b14d7:       31 db                   xor    %ebx,%ebx
         :	        *isNull = fcinfo->isnull;
         :
         :	        pgstat_end_function_usage(&fcusage, true);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.33 :	  5b14d9:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5b14dd:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b14e0:       5b                      pop    %rbx
    1.67 :	  5b14e1:       41 5c                   pop    %r12
    0.00 :	  5b14e3:       41 5d                   pop    %r13
    0.00 :	  5b14e5:       41 5e                   pop    %r14
    0.00 :	  5b14e7:       41 5f                   pop    %r15
    1.67 :	  5b14e9:       c9                      leaveq 
    3.33 :	  5b14ea:       c3                      retq   
         :
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
    0.00 :	  5b14eb:       49 8d 5d 70             lea    0x70(%r13),%rbx
         :	                                return (Datum) 0;
         :	                        }
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
    0.00 :	  5b14ef:       4c 8d 65 90             lea    -0x70(%rbp),%r12
    0.00 :	  5b14f3:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b14f6:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5b14f9:       e8 82 12 09 00          callq  642780 <pgstat_init_function_usage>
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    3.33 :	  5b14fe:       49 8b 45 70             mov    0x70(%r13),%rax
    3.33 :	  5b1502:       48 89 df                mov    %rbx,%rdi
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
    0.00 :	  5b1505:       41 c6 85 8c 00 00 00    movb   $0x0,0x8c(%r13)
    0.00 :	  5b150c:       00 
         :	        result = FunctionCallInvoke(fcinfo);
    1.67 :	  5b150d:       ff 10                   callq  *(%rax)
    1.67 :	  5b150f:       48 89 c3                mov    %rax,%rbx
         :	        *isNull = fcinfo->isnull;
    0.00 :	  5b1512:       41 0f b6 85 8c 00 00    movzbl 0x8c(%r13),%eax
    0.00 :	  5b1519:       00 
         :
         :	        pgstat_end_function_usage(&fcusage, true);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1995
    3.33 :	  5b151a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5b151f:       4c 89 e7                mov    %r12,%rdi
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
         :	        *isNull = fcinfo->isnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    3.33 :	  5b1522:       41 88 07                mov    %al,(%r15)
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.00 :	  5b1525:       e8 a6 10 09 00          callq  6425d0 <pgstat_end_function_usage>
         :
         :	        return result;
         :	}
    0.00 :	  5b152a:       eb ad                   jmp    5b14d9 <ExecMakeFunctionResultNoSets+0xa9>
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b152c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b152e:       eb 80                   jmp    5b14b0 <ExecMakeFunctionResultNoSets+0x80>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   15.38 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
   13.46 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    9.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
    9.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    5.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:41
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:140
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:207
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:208
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    1.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3750 <ExecScan>:
         :	 */
         :	TupleTableSlot *
         :	ExecScan(ScanState *node,
         :	                 ExecScanAccessMtd accessMtd,   /* function returning a tuple */
         :	                 ExecScanRecheckMtd recheckMtd)
         :	{
    0.00 :	  5b3750:       55                      push   %rbp
    0.00 :	  5b3751:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.92 :	  5b3754:       41 57                   push   %r15
    0.00 :	  5b3756:       41 56                   push   %r14
    0.00 :	  5b3758:       41 55                   push   %r13
    0.00 :	  5b375a:       41 54                   push   %r12
    0.00 :	  5b375c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b375f:       53                      push   %rbx
    1.92 :	  5b3760:       48 83 ec 28             sub    $0x28,%rsp
    1.92 :	  5b3764:       48 89 75 b8             mov    %rsi,-0x48(%rbp)
    0.00 :	  5b3768:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b376c:       48 8b 47 28             mov    0x28(%rdi),%rax
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b3770:       48 85 c0                test   %rax,%rax
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b3773:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        projInfo = node->ps.ps_ProjInfo;
    0.00 :	  5b3777:       4c 8b 77 68             mov    0x68(%rdi),%r14
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5b377b:       4c 8b 6f 60             mov    0x60(%rdi),%r13
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b377f:       41 0f 94 c7             sete   %r15b
    0.00 :	  5b3783:       75 09                   jne    5b378e <ExecScan+0x3e>
    0.00 :	  5b3785:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3788:       0f 84 d6 01 00 00       je     5b3964 <ExecScan+0x214>
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous scan
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
    0.00 :	  5b378e:       41 80 7c 24 70 00       cmpb   $0x0,0x70(%r12)
    0.00 :	  5b3794:       0f 85 a6 01 00 00       jne    5b3940 <ExecScan+0x1f0>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:140
    1.92 :	  5b379a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a scan tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5b37a0:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b37a4:       e8 07 52 1e 00          callq  7989b0 <MemoryContextReset>
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b37a9:       0f b6 05 e0 68 60 00    movzbl 0x6068e0(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5b37b0:       84 c0                   test   %al,%al
    0.00 :	  5b37b2:       0f 85 50 01 00 00       jne    5b3908 <ExecScan+0x1b8>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:41
    3.85 :	  5b37b8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b37bd:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b37c4:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
    5.77 :	  5b37c5:       0f 84 0d 01 00 00       je     5b38d8 <ExecScan+0x188>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b37cb:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b37d0:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b37d3:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b37d6:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b37dd:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b37e1:       0f 84 f1 00 00 00       je     5b38d8 <ExecScan+0x188>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37e7:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b37ea:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b37f1:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b37f8:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37f9:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b37fc:       0f 85 16 01 00 00       jne    5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b3802:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b3805:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b380c:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b3810:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3813:       0f 84 ff 00 00 00       je     5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b3819:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b381b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b381d:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3820:       e8 5b 0c 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b3825:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3828:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b382b:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b382e:       84 c0                   test   %al,%al
    0.00 :	  5b3830:       0f 84 fa 00 00 00       je     5b3930 <ExecScan+0x1e0>
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b3836:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b3839:       0f 84 ab 00 00 00       je     5b38ea <ExecScan+0x19a>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
    9.62 :	  5b383f:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5b3843:       0f 85 a1 00 00 00       jne    5b38ea <ExecScan+0x19a>
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3849:       45 84 ff                test   %r15b,%r15b
         :	                }
         :
         :	                /*
         :	                 * place the current tuple into the expr context
         :	                 */
         :	                econtext->ecxt_scantuple = slot;
    0.00 :	  5b384c:       49 89 5d 08             mov    %rbx,0x8(%r13)
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
   15.38 :	  5b3850:       75 3e                   jne    5b3890 <ExecScan+0x140>
    0.00 :	  5b3852:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5b3856:       31 d2                   xor    %edx,%edx
    0.00 :	  5b3858:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  5b385b:       e8 b0 96 ff ff          callq  5acf10 <ExecQual>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.92 :	  5b3860:       84 c0                   test   %al,%al
    0.00 :	  5b3862:       75 2c                   jne    5b3890 <ExecScan+0x140>
         :	                                 */
         :	                                return slot;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(node, 1);
    0.00 :	  5b3864:       49 8b 44 24 18          mov    0x18(%r12),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    1.92 :	  5b3869:       48 85 c0                test   %rax,%rax
    0.00 :	  5b386c:       0f 84 2e ff ff ff       je     5b37a0 <ExecScan+0x50>
    0.00 :	  5b3872:       f2 0f 10 05 de b8 1f    movsd  0x1fb8de(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b3879:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    7.69 :	  5b387a:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b3881:       00 
   13.46 :	  5b3882:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b3889:       00 
    9.62 :	  5b388a:       e9 11 ff ff ff          jmpq   5b37a0 <ExecScan+0x50>
    0.00 :	  5b388f:       90                      nop
         :	                if (!qual || ExecQual(qual, econtext, false))
         :	                {
         :	                        /*
         :	                         * Found a satisfactory scan tuple.
         :	                         */
         :	                        if (projInfo)
    0.00 :	  5b3890:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3893:       74 2b                   je     5b38c0 <ExecScan+0x170>
         :	                                /*
         :	                                 * Form a projection tuple, store it in the result tuple slot
         :	                                 * and return it --- unless we find we can project no tuples
         :	                                 * from this scan tuple, in which case continue scan.
         :	                                 */
         :	                                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3895:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3899:       4c 89 f7                mov    %r14,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:207
    1.92 :	  5b389c:       e8 5f 97 ff ff          callq  5ad000 <ExecProject>
    0.00 :	  5b38a1:       48 89 c3                mov    %rax,%rbx
         :	                                if (isDone != ExprEndResult)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:208
    1.92 :	  5b38a4:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  5b38a7:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5b38aa:       0f 84 f0 fe ff ff       je     5b37a0 <ExecScan+0x50>
         :	                                {
         :	                                        node->ps.ps_TupFromTlist = (isDone == ExprMultipleResult);
    0.00 :	  5b38b0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5b38b3:       41 0f 94 44 24 70       sete   0x70(%r12)
    0.00 :	  5b38b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b38c0:       48 83 c4 28             add    $0x28,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    3.85 :	  5b38c4:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b38c7:       5b                      pop    %rbx
    0.00 :	  5b38c8:       41 5c                   pop    %r12
    0.00 :	  5b38ca:       41 5d                   pop    %r13
    0.00 :	  5b38cc:       41 5e                   pop    %r14
    1.92 :	  5b38ce:       41 5f                   pop    %r15
    0.00 :	  5b38d0:       c9                      leaveq 
    0.00 :	  5b38d1:       c3                      retq   
    0.00 :	  5b38d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    7.69 :	  5b38d8:       4c 89 e7                mov    %r12,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    1.92 :	  5b38db:       ff 55 b8                callq  *-0x48(%rbp)
    1.92 :	  5b38de:       48 89 c3                mov    %rax,%rbx
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
    1.92 :	  5b38e1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b38e4:       0f 85 55 ff ff ff       jne    5b383f <ExecScan+0xef>
         :	                {
         :	                        if (projInfo)
    0.00 :	  5b38ea:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b38ed:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b38f0:       74 ce                   je     5b38c0 <ExecScan+0x170>
         :	                                return ExecClearTuple(projInfo->pi_slot);
    0.00 :	  5b38f2:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5b38f6:       e8 15 08 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b38fb:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b38fe:       66 90                   xchg   %ax,%ax
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b3900:       eb be                   jmp    5b38c0 <ExecScan+0x170>
    0.00 :	  5b3902:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b3908:       e8 93 89 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5b390d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b3910:       e9 a3 fe ff ff          jmpq   5b37b8 <ExecScan+0x68>
    0.00 :	  5b3915:       0f 1f 00                nopl   (%rax)
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3918:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b391b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5b3920:       e8 eb 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3925:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3928:       e9 09 ff ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b392d:       0f 1f 00                nopl   (%rax)
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b3930:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3933:       e8 d8 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3938:       e9 f9 fe ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b393d:       0f 1f 00                nopl   (%rax)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3940:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3944:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b3947:       e8 b4 96 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b394c:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3950:       48 89 c3                mov    %rax,%rbx
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b3953:       0f 84 67 ff ff ff       je     5b38c0 <ExecScan+0x170>
         :	                        return resultSlot;
         :	                /* Done with that source tuple... */
         :	                node->ps.ps_TupFromTlist = false;
    0.00 :	  5b3959:       41 c6 44 24 70 00       movb   $0x0,0x70(%r12)
    0.00 :	  5b395f:       e9 3c fe ff ff          jmpq   5b37a0 <ExecScan+0x50>
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
         :	        {
         :	                ResetExprContext(econtext);
    0.00 :	  5b3964:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b3968:       e8 43 50 1e 00          callq  7989b0 <MemoryContextReset>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b396d:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b3972:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b3979:       00 
    0.00 :	  5b397a:       74 74                   je     5b39f0 <ExecScan+0x2a0>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b397c:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b3981:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b3984:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b3987:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b398e:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b3992:       74 5c                   je     5b39f0 <ExecScan+0x2a0>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b3994:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b3997:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b399e:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b39a5:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b39a6:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b39a9:       75 5a                   jne    5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b39ab:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b39ae:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b39b5:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b39b9:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b39bc:       74 47                   je     5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b39be:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b39c0:       31 d2                   xor    %edx,%edx
    0.00 :	  5b39c2:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39c5:       e8 b6 0a 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b39ca:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39cd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39d0:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b39d3:       84 c0                   test   %al,%al
    0.00 :	  5b39d5:       0f 85 e5 fe ff ff       jne    5b38c0 <ExecScan+0x170>
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b39db:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b39de:       e8 2d 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b39e3:       e9 d8 fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
    0.00 :	  5b39e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b39ef:       00 
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b39f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39f3:       ff 55 b8                callq  *-0x48(%rbp)
    0.00 :	  5b39f6:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b39f9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b3a00:       e9 bb fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3a05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3a08:       e8 03 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3a0d:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3a10:       e9 ab fe ff ff          jmpq   5b38c0 <ExecScan+0x170>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   42.55 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1508
   10.64 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1483
    8.51 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    8.51 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
    8.51 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1509
    4.26 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1483
    4.26 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1488
    4.26 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1488
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000496e90 <heap_getnext>:
         :	#endif   /* !defined(HEAPDEBUGALL) */
         :
         :
         :	HeapTuple
         :	heap_getnext(HeapScanDesc scan, ScanDirection direction)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1483
   10.64 :	  496e90:       55                      push   %rbp
    0.00 :	  496e91:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  496e94:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1483
    4.26 :	  496e95:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  496e98:       48 83 ec 08             sub    $0x8,%rsp
         :	        /* Note: no locking manipulations needed */
         :
         :	        HEAPDEBUG_1;                            /* heap_getnext( info ) */
         :
         :	        if (scan->rs_pageatatime)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1488
    4.26 :	  496e9c:       80 7f 21 00             cmpb   $0x0,0x21(%rdi)
    2.13 :	  496ea0:       74 3e                   je     496ee0 <heap_getnext+0x50>
         :	                heapgettup_pagemode(scan, direction,
    0.00 :	  496ea2:       48 8b 4f 18             mov    0x18(%rdi),%rcx
    0.00 :	  496ea6:       8b 57 10                mov    0x10(%rdi),%edx
    0.00 :	  496ea9:       e8 42 f2 ff ff          callq  4960f0 <heapgettup_pagemode>
         :	                                                        scan->rs_nkeys, scan->rs_key);
         :	        else
         :	                heapgettup(scan, direction, scan->rs_nkeys, scan->rs_key);
         :
         :	        if (scan->rs_ctup.t_data == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    4.26 :	  496eae:       31 c0                   xor    %eax,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    8.51 :	  496eb0:       48 83 7b 58 00          cmpq   $0x0,0x58(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1494
    2.13 :	  496eb5:       74 18                   je     496ecf <heap_getnext+0x3f>
         :	         * if we get here it means we have a new current scan tuple, so point to
         :	         * the proper return buffer and return the tuple.
         :	         */
         :	        HEAPDEBUG_3;                            /* heap_getnext returning tuple */
         :
         :	        pgstat_count_heap_getnext(scan->rs_rd);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
    2.13 :	  496eb7:       48 8b 03                mov    (%rbx),%rax
    0.00 :	  496eba:       48 8b 80 38 01 00 00    mov    0x138(%rax),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
    8.51 :	  496ec1:       48 85 c0                test   %rax,%rax
    0.00 :	  496ec4:       74 05                   je     496ecb <heap_getnext+0x3b>
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1506
    2.13 :	  496ec6:       48 83 40 18 01          addq   $0x1,0x18(%rax)
         :
         :	        return &(scan->rs_ctup);
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1508
   42.55 :	  496ecb:       48 8d 43 48             lea    0x48(%rbx),%rax
         :	}
    0.00 :	  496ecf:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  496ed3:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/heapam.c:1509
    8.51 :	  496ed4:       c9                      leaveq 
    0.00 :	  496ed5:       c3                      retq   
    0.00 :	  496ed6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  496edd:       00 00 00 
         :
         :	        if (scan->rs_pageatatime)
         :	                heapgettup_pagemode(scan, direction,
         :	                                                        scan->rs_nkeys, scan->rs_key);
         :	        else
         :	                heapgettup(scan, direction, scan->rs_nkeys, scan->rs_key);
    0.00 :	  496ee0:       48 8b 4f 18             mov    0x18(%rdi),%rcx
    0.00 :	  496ee4:       8b 57 10                mov    0x10(%rdi),%edx
    0.00 :	  496ee7:       e8 c4 f7 ff ff          callq  4966b0 <heapgettup>
    0.00 :	  496eec:       eb c0                   jmp    496eae <heap_getnext+0x1e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   76.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    8.51 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    4.26 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5750 <HeapTupleSatisfiesMVCC>:
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    0.00 :	  7a5750:       55                      push   %rbp
    0.00 :	  7a5751:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    2.13 :	  7a5754:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    2.13 :	  7a5758:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7a575c:       41 89 d6                mov    %edx,%r14d
    0.00 :	  7a575f:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  7a5763:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7a5767:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tuple = htup->t_data;
    0.00 :	  7a576b:       48 8b 5f 10             mov    0x10(%rdi),%rbx
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    0.00 :	  7a576f:       49 89 f5                mov    %rsi,%r13
         :	        HeapTupleHeader tuple = htup->t_data;
         :
         :	        Assert(ItemPointerIsValid(&htup->t_self));
         :	        Assert(htup->t_tableOid != InvalidOid);
         :
         :	        if (!HeapTupleHeaderXminCommitted(tuple))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    2.13 :	  7a5772:       0f b7 4b 14             movzwl 0x14(%rbx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
   76.60 :	  7a5776:       0f b7 d1                movzwl %cx,%edx
    0.00 :	  7a5779:       f6 c6 01                test   $0x1,%dh
    0.00 :	  7a577c:       75 72                   jne    7a57f0 <HeapTupleSatisfiesMVCC+0xa0>
         :	        {
         :	                if (HeapTupleHeaderXminInvalid(tuple))
    0.00 :	  7a577e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5780:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a5785:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  7a578a:       0f 84 06 01 00 00       je     7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :
         :	                /* Used by pre-9.0 binary upgrades */
         :	                if (tuple->t_infomask & HEAP_MOVED_OFF)
    0.00 :	  7a5790:       f6 c6 40                test   $0x40,%dh
    0.00 :	  7a5793:       0f 84 27 01 00 00       je     7a58c0 <HeapTupleSatisfiesMVCC+0x170>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a5799:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a579c:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a57a1:       74 04                   je     7a57a7 <HeapTupleSatisfiesMVCC+0x57>
    0.00 :	  7a57a3:       44 8b 63 08             mov    0x8(%rbx),%r12d
         :
         :	                        if (TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a57a7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57aa:       e8 f1 ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a57af:       84 c0                   test   %al,%al
    0.00 :	  7a57b1:       0f 85 df 00 00 00       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;
         :	                        if (!TransactionIdIsInProgress(xvac))
    0.00 :	  7a57b7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ba:       e8 f1 c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a57bf:       84 c0                   test   %al,%al
    0.00 :	  7a57c1:       0f 85 1f 01 00 00       jne    7a58e6 <HeapTupleSatisfiesMVCC+0x196>
         :	                        {
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a57c7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ca:       e8 11 ab d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a57cf:       84 c0                   test   %al,%al
    0.00 :	  7a57d1:       0f 85 79 02 00 00       jne    7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
         :	                                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a57d7:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a57dc:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a57de:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a57e1:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a57e4:       e8 b7 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a57e9:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a57ed:       0f 1f 00                nopl   (%rax)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a57f0:       89 d0                   mov    %edx,%eax
    0.00 :	  7a57f2:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a57f7:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a57fc:       0f 85 86 00 00 00       jne    7a5888 <HeapTupleSatisfiesMVCC+0x138>
         :	                return false;                   /* treat as still in progress */
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid or aborted */
         :	                return true;
         :
         :	        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    2.13 :	  7a5802:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5808:       0f 85 a2 00 00 00       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a580e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5810:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a5815:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5818:       0f 84 92 00 00 00       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                return true;
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a581e:       f6 c6 10                test   $0x10,%dh
    0.00 :	  7a5821:       0f 85 b9 01 00 00       jne    7a59e0 <HeapTupleSatisfiesMVCC+0x290>
         :	                }
         :	                /* it must have aborted or crashed */
         :	                return true;
         :	        }
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
    0.00 :	  7a5827:       80 e6 04                and    $0x4,%dh
    0.00 :	  7a582a:       75 44                   jne    7a5870 <HeapTupleSatisfiesMVCC+0x120>
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a582c:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a582f:       90                      nop
    0.00 :	  7a5830:       e8 6b ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5835:       84 c0                   test   %al,%al
    0.00 :	  7a5837:       0f 85 43 01 00 00       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :
         :	                if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a583d:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5840:       e8 6b c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5845:       84 c0                   test   %al,%al
    0.00 :	  7a5847:       75 67                   jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5849:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a584c:       e8 8f aa d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5851:       84 c0                   test   %al,%al
    0.00 :	  7a5853:       0f 84 20 02 00 00       je     7a5a79 <HeapTupleSatisfiesMVCC+0x329>
         :	                                                InvalidTransactionId);
         :	                        return true;
         :	                }
         :
         :	                /* xmax transaction committed */
         :	                SetHintBits(tuple, buffer, HEAP_XMAX_COMMITTED,
    0.00 :	  7a5859:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	  7a585c:       ba 00 04 00 00          mov    $0x400,%edx
    0.00 :	  7a5861:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5864:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5867:       e8 34 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a586c:       0f 1f 40 00             nopl   0x0(%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5870:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5873:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5876:       e8 85 fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a587b:       84 c0                   test   %al,%al
    0.00 :	  7a587d:       0f 95 c0                setne  %al
    0.00 :	  7a5880:       eb 16                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5882:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a5888:       8b 3b                   mov    (%rbx),%edi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    8.51 :	  7a588a:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a588d:       e8 6e fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5892:       84 c0                   test   %al,%al
    0.00 :	  7a5894:       74 6a                   je     7a5900 <HeapTupleSatisfiesMVCC+0x1b0>
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5896:       31 c0                   xor    %eax,%eax
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5898:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7a589c:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7a58a1:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    2.13 :	  7a58a6:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  7a58ab:       c9                      leaveq 
    4.26 :	  7a58ac:       c3                      retq   
    0.00 :	  7a58ad:       0f 1f 00                nopl   (%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a58b0:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  7a58b5:       eb e1                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a58b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7a58be:       00 00 
         :	                                SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                        InvalidTransactionId);
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
    0.00 :	  7a58c0:       66 85 c9                test   %cx,%cx
    0.00 :	  7a58c3:       79 4b                   jns    7a5910 <HeapTupleSatisfiesMVCC+0x1c0>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a58c5:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a58c8:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a58cd:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a58d0:       0f 85 fa 00 00 00       jne    7a59d0 <HeapTupleSatisfiesMVCC+0x280>
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a58d6:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a58d9:       e8 c2 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a58de:       84 c0                   test   %al,%al
    0.00 :	  7a58e0:       0f 84 4a 01 00 00       je     7a5a30 <HeapTupleSatisfiesMVCC+0x2e0>
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a58e6:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a58ea:       89 d0                   mov    %edx,%eax
    0.00 :	  7a58ec:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a58f1:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a58f6:       0f 84 06 ff ff ff       je     7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a58fc:       eb 8a                   jmp    7a5888 <HeapTupleSatisfiesMVCC+0x138>
    0.00 :	  7a58fe:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5900:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a5904:       e9 f9 fe ff ff          jmpq   7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a5909:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                InvalidTransactionId);
         :	                                        return false;
         :	                                }
         :	                        }
         :	                }
         :	                else if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5910:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a5912:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5918:       e8 83 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a591d:       84 c0                   test   %al,%al
    0.00 :	  7a591f:       90                      nop
    0.00 :	  7a5920:       74 76                   je     7a5998 <HeapTupleSatisfiesMVCC+0x248>
         :	                {
         :	                        if (HeapTupleHeaderGetCmin(tuple) >= snapshot->curcid)
    0.00 :	  7a5922:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5925:       e8 96 eb ff ff          callq  7a44c0 <HeapTupleHeaderGetCmin>
    0.00 :	  7a592a:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a592e:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5930:       0f 83 60 ff ff ff       jae    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;   /* inserted after scan started */
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid */
    0.00 :	  7a5936:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :	                                return true;
         :
         :	                        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))        /* not deleter */
    0.00 :	  7a593a:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5940:       0f 85 6a ff ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5946:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5948:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a594d:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5950:       0f 84 5a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                                return true;
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a5956:       80 e6 10                and    $0x10,%dh
    0.00 :	  7a5959:       0f 84 0a 01 00 00       je     7a5a69 <HeapTupleSatisfiesMVCC+0x319>
         :	                        {
         :	                                TransactionId xmax;
         :
         :	                                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a595f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5962:       e8 b9 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  7a5967:       89 c7                   mov    %eax,%edi
         :
         :	                                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                                Assert(TransactionIdIsValid(xmax));
         :
         :	                                /* updating subtransaction must have aborted */
         :	                                if (!TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a5969:       e8 32 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a596e:       84 c0                   test   %al,%al
    0.00 :	  7a5970:       0f 84 3a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5976:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  7a597d:       00 00 00 
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
    0.00 :	  7a5980:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5983:       e8 58 eb ff ff          callq  7a44e0 <HeapTupleHeaderGetCmax>
    0.00 :	  7a5988:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a598c:       0f 93 c0                setae  %al
    0.00 :	  7a598f:       e9 04 ff ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5998:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a599a:       e8 11 c3 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a599f:       84 c0                   test   %al,%al
    0.00 :	  7a59a1:       0f 85 ef fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a59a7:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a59a9:       e8 32 a9 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a59ae:       84 c0                   test   %al,%al
    0.00 :	  7a59b0:       0f 84 9a 00 00 00       je     7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a59b6:       8b 0b                   mov    (%rbx),%ecx
    0.00 :	  7a59b8:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a59bd:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a59c0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59c3:       e8 d8 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a59c8:       e9 19 ff ff ff          jmpq   7a58e6 <HeapTupleSatisfiesMVCC+0x196>
    0.00 :	  7a59cd:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a59d0:       44 8b 63 08             mov    0x8(%rbx),%r12d
    0.00 :	  7a59d4:       e9 fd fe ff ff          jmpq   7a58d6 <HeapTupleSatisfiesMVCC+0x186>
    0.00 :	  7a59d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59e0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a59e8:       e8 33 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59ed:       89 c7                   mov    %eax,%edi
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59ef:       41 89 c4                mov    %eax,%r12d
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59f2:       e8 a9 ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a59f7:       84 c0                   test   %al,%al
    0.00 :	  7a59f9:       75 85                   jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                if (TransactionIdIsInProgress(xmax))
    0.00 :	  7a59fb:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a59fe:       e8 ad c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a03:       84 c0                   test   %al,%al
    0.00 :	  7a5a05:       0f 85 a5 fe ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :	                if (TransactionIdDidCommit(xmax))
    0.00 :	  7a5a0b:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a0e:       e8 cd a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a13:       84 c0                   test   %al,%al
    0.00 :	  7a5a15:       0f 84 95 fe ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                {
         :	                        /* updating transaction committed, but when? */
         :	                        if (XidInMVCCSnapshot(xmax, snapshot))
    0.00 :	  7a5a1b:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5a1e:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a21:       e8 da fb ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5a26:       84 c0                   test   %al,%al
    0.00 :	  7a5a28:       0f 95 c0                setne  %al
    0.00 :	  7a5a2b:       e9 68 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
    0.00 :	  7a5a30:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a33:       e8 78 c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a38:       84 c0                   test   %al,%al
    0.00 :	  7a5a3a:       0f 85 56 fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a5a40:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a43:       e8 98 a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a48:       84 c0                   test   %al,%al
    0.00 :	  7a5a4a:       0f 85 87 fd ff ff       jne    7a57d7 <HeapTupleSatisfiesMVCC+0x87>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                HeapTupleHeaderGetRawXmin(tuple));
         :	                else
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_INVALID,
    0.00 :	  7a5a50:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a52:       ba 00 02 00 00          mov    $0x200,%edx
    0.00 :	  7a5a57:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a5a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a5d:       e8 3e f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a62:       31 c0                   xor    %eax,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a64:       e9 2f fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                                        return true;    /* updated after scan started */
         :	                                else
         :	                                        return false;           /* updated before scan started */
         :	                        }
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5a69:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5a6c:       e8 2f ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5a71:       84 c0                   test   %al,%al
    0.00 :	  7a5a73:       0f 85 07 ff ff ff       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMAX_INVALID,
    0.00 :	  7a5a79:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a7b:       ba 00 08 00 00          mov    $0x800,%edx
    0.00 :	  7a5a80:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a83:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a86:       e8 15 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a8b:       b8 01 00 00 00          mov    $0x1,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a90:       e9 03 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2274
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
   12.82 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2269
   12.82 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
   10.26 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2269
   10.26 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
    5.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
    5.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2274
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
    2.56 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2274
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077ece0 <pg_detoast_datum_packed>:
         :	        return heap_tuple_untoast_attr_slice(datum, first, count);
         :	}
         :
         :	struct varlena *
         :	pg_detoast_datum_packed(struct varlena * datum)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2269
   12.82 :	  77ece0:       55                      push   %rbp
         :	        if (VARATT_IS_COMPRESSED(datum) || VARATT_IS_EXTERNAL(datum))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
    5.13 :	  77ece1:       0f b6 17                movzbl (%rdi),%edx
         :	        return heap_tuple_untoast_attr_slice(datum, first, count);
         :	}
         :
         :	struct varlena *
         :	pg_detoast_datum_packed(struct varlena * datum)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2269
   10.26 :	  77ece4:       48 89 e5                mov    %rsp,%rbp
         :	        if (VARATT_IS_COMPRESSED(datum) || VARATT_IS_EXTERNAL(datum))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
   12.82 :	  77ece7:       89 d0                   mov    %edx,%eax
   10.26 :	  77ece9:       83 e0 03                and    $0x3,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
    2.56 :	  77ecec:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  77ecef:       74 0f                   je     77ed00 <pg_detoast_datum_packed+0x20>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2270
   15.38 :	  77ecf1:       80 ea 01                sub    $0x1,%dl
    0.00 :	  77ecf4:       74 0a                   je     77ed00 <pg_detoast_datum_packed+0x20>
         :	                return heap_tuple_untoast_attr(datum);
         :	        else
         :	                return datum;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2274
    2.56 :	  77ecf6:       48 89 f8                mov    %rdi,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2274
    5.13 :	  77ecf9:       c9                      leaveq 
   23.08 :	  77ecfa:       c3                      retq   
    0.00 :	  77ecfb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  77ed00:       c9                      leaveq 
         :
         :	struct varlena *
         :	pg_detoast_datum_packed(struct varlena * datum)
         :	{
         :	        if (VARATT_IS_COMPRESSED(datum) || VARATT_IS_EXTERNAL(datum))
         :	                return heap_tuple_untoast_attr(datum);
    0.00 :	  77ed01:       e9 4a 41 d2 ff          jmpq   4a2e50 <heap_tuple_untoast_attr>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1493
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1464
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1493
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1466
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1464
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1464
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad430 <ExecEvalFuncArgs>:
         :	 */
         :	static ExprDoneCond
         :	ExecEvalFuncArgs(FunctionCallInfo fcinfo,
         :	                                 List *argList,
         :	                                 ExprContext *econtext)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
    2.78 :	  5ad430:       55                      push   %rbp
    0.00 :	  5ad431:       48 89 e5                mov    %rsp,%rbp
    2.78 :	  5ad434:       41 57                   push   %r15
    2.78 :	  5ad436:       49 89 d7                mov    %rdx,%r15
    0.00 :	  5ad439:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1456
   11.11 :	  5ad43b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5ad43e:       41 55                   push   %r13
    5.56 :	  5ad440:       41 54                   push   %r12
    0.00 :	  5ad442:       53                      push   %rbx
    0.00 :	  5ad443:       48 83 ec 18             sub    $0x18,%rsp
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    8.33 :	  5ad447:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ad44a:       0f 84 82 00 00 00       je     5ad4d2 <ExecEvalFuncArgs+0xa2>
    0.00 :	  5ad450:       4c 8b 66 08             mov    0x8(%rsi),%r12
         :	        ListCell   *arg;
         :
         :	        argIsDone = ExprSingleResult;           /* default assumption */
         :
         :	        i = 0;
         :	        foreach(arg, argList)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1464
    2.78 :	  5ad454:       4d 85 e4                test   %r12,%r12
    0.00 :	  5ad457:       74 79                   je     5ad4d2 <ExecEvalFuncArgs+0xa2>
    0.00 :	  5ad459:       45 31 ed                xor    %r13d,%r13d
    2.78 :	  5ad45c:       31 db                   xor    %ebx,%ebx
    0.00 :	  5ad45e:       66 90                   xchg   %ax,%ax
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1466
    5.56 :	  5ad460:       49 8b 04 24             mov    (%r12),%rax
         :	                ExprDoneCond thisArgIsDone;
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
    2.78 :	  5ad464:       49 8d 94 1e 40 03 00    lea    0x340(%r14,%rbx,1),%rdx
    0.00 :	  5ad46b:       00 
    2.78 :	  5ad46c:       48 8d 4d d4             lea    -0x2c(%rbp),%rcx
    0.00 :	  5ad470:       4c 89 fe                mov    %r15,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1469
   16.67 :	  5ad473:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad476:       ff 50 10                callq  *0x10(%rax)
    5.56 :	  5ad479:       49 89 44 de 20          mov    %rax,0x20(%r14,%rbx,8)
         :	                                                                          econtext,
         :	                                                                          &fcinfo->argnull[i],
         :	                                                                          &thisArgIsDone);
         :
         :	                if (thisArgIsDone != ExprSingleResult)
    0.00 :	  5ad47e:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  5ad481:       85 c0                   test   %eax,%eax
    0.00 :	  5ad483:       74 08                   je     5ad48d <ExecEvalFuncArgs+0x5d>
         :	                        /*
         :	                         * We allow only one argument to have a set value; we'd need much
         :	                         * more complexity to keep track of multiple set arguments (cf.
         :	                         * ExecTargetList) and it doesn't seem worth it.
         :	                         */
         :	                        if (argIsDone != ExprSingleResult)
    0.00 :	  5ad485:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5ad488:       75 23                   jne    5ad4ad <ExecEvalFuncArgs+0x7d>
         :	                                ereport(ERROR,
    0.00 :	  5ad48a:       41 89 c5                mov    %eax,%r13d
         :	        ListCell   *arg;
         :
         :	        argIsDone = ExprSingleResult;           /* default assumption */
         :
         :	        i = 0;
         :	        foreach(arg, argList)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1464
    8.33 :	  5ad48d:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  5ad492:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  5ad496:       4d 85 e4                test   %r12,%r12
    0.00 :	  5ad499:       75 c5                   jne    5ad460 <ExecEvalFuncArgs+0x30>
         :	        }
         :
         :	        Assert(i == fcinfo->nargs);
         :
         :	        return argIsDone;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1493
   11.11 :	  5ad49b:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5ad49f:       44 89 e8                mov    %r13d,%eax
    0.00 :	  5ad4a2:       5b                      pop    %rbx
    8.33 :	  5ad4a3:       41 5c                   pop    %r12
    0.00 :	  5ad4a5:       41 5d                   pop    %r13
    0.00 :	  5ad4a7:       41 5e                   pop    %r14
    0.00 :	  5ad4a9:       41 5f                   pop    %r15
    0.00 :	  5ad4ab:       c9                      leaveq 
    0.00 :	  5ad4ac:       c3                      retq   
         :	                         * We allow only one argument to have a set value; we'd need much
         :	                         * more complexity to keep track of multiple set arguments (cf.
         :	                         * ExecTargetList) and it doesn't seem worth it.
         :	                         */
         :	                        if (argIsDone != ExprSingleResult)
         :	                                ereport(ERROR,
    0.00 :	  5ad4ad:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5ad4b0:       b9 10 af 88 00          mov    $0x88af10,%ecx
    0.00 :	  5ad4b5:       ba cc 05 00 00          mov    $0x5cc,%edx
    0.00 :	  5ad4ba:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5ad4bf:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad4c4:       e8 f7 d5 1c 00          callq  77aac0 <errstart>
    0.00 :	  5ad4c9:       84 c0                   test   %al,%al
    0.00 :	  5ad4cb:       75 0a                   jne    5ad4d7 <ExecEvalFuncArgs+0xa7>
    0.00 :	  5ad4cd:       e8 fe bf eb ff          callq  4694d0 <abort@plt>
         :	        ListCell   *arg;
         :
         :	        argIsDone = ExprSingleResult;           /* default assumption */
         :
         :	        i = 0;
         :	        foreach(arg, argList)
    0.00 :	  5ad4d2:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5ad4d5:       eb c4                   jmp    5ad49b <ExecEvalFuncArgs+0x6b>
         :	                         * We allow only one argument to have a set value; we'd need much
         :	                         * more complexity to keep track of multiple set arguments (cf.
         :	                         * ExecTargetList) and it doesn't seem worth it.
         :	                         */
         :	                        if (argIsDone != ExprSingleResult)
         :	                                ereport(ERROR,
    0.00 :	  5ad4d7:       bf 10 a5 88 00          mov    $0x88a510,%edi
    0.00 :	  5ad4dc:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad4de:       e8 bd f3 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5ad4e3:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  5ad4e8:       89 c3                   mov    %eax,%ebx
    0.00 :	  5ad4ea:       e8 61 f8 1c 00          callq  77cd50 <errcode>
    0.00 :	  5ad4ef:       89 de                   mov    %ebx,%esi
    0.00 :	  5ad4f1:       89 c7                   mov    %eax,%edi
    0.00 :	  5ad4f3:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad4f5:       e8 e6 d0 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5ad4fa:       eb d1                   jmp    5ad4cd <ExecEvalFuncArgs+0x9d>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   13.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:79
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:138
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:85
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:141
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7bd0 <InstrStopNode>:
         :	}
         :
         :	/* Exit from a plan node */
         :	void
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
    3.33 :	  5b7bd0:       55                      push   %rbp
    0.00 :	  5b7bd1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7bd4:       53                      push   %rbx
    3.33 :	  5b7bd5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7bd8:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
    0.00 :	  5b7bdc:       80 3f 00                cmpb   $0x0,(%rdi)
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
         :	        instr_time      endtime;
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    3.33 :	  5b7bdf:       f2 0f 58 47 30          addsd  0x30(%rdi),%xmm0
    0.00 :	  5b7be4:       f2 0f 11 47 30          movsd  %xmm0,0x30(%rdi)
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
    0.00 :	  5b7be9:       0f 84 90 00 00 00       je     5b7c7f <InstrStopNode+0xaf>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7bef:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:79
    6.67 :	  5b7bf4:       75 0b                   jne    5b7c01 <InstrStopNode+0x31>
    0.00 :	  5b7bf6:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7bfb:       0f 84 d1 02 00 00       je     5b7ed2 <InstrStopNode+0x302>
         :	                        elog(ERROR, "InstrStopNode called without start");
         :
         :	                INSTR_TIME_SET_CURRENT(endtime);
    0.00 :	  5b7c01:       48 8d 7d e0             lea    -0x20(%rbp),%rdi
    0.00 :	  5b7c05:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7c07:       e8 b4 19 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                INSTR_TIME_ACCUM_DIFF(instr->counter, endtime, instr->starttime);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    3.33 :	  5b7c0c:       48 8b 45 e0             mov    -0x20(%rbp),%rax
    0.00 :	  5b7c10:       48 03 43 18             add    0x18(%rbx),%rax
    0.00 :	  5b7c14:       48 2b 43 08             sub    0x8(%rbx),%rax
    0.00 :	  5b7c18:       48 89 43 18             mov    %rax,0x18(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
   13.33 :	  5b7c1c:       48 8b 45 e8             mov    -0x18(%rbp),%rax
    0.00 :	  5b7c20:       48 03 43 20             add    0x20(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    3.33 :	  5b7c24:       48 2b 43 10             sub    0x10(%rbx),%rax
    0.00 :	  5b7c28:       48 85 c0                test   %rax,%rax
    3.33 :	  5b7c2b:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c2f:       79 36                   jns    5b7c67 <InstrStopNode+0x97>
    0.00 :	  5b7c31:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b7c38:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7c3e:       48 83 6b 18 01          subq   $0x1,0x18(%rbx)
    0.00 :	  5b7c43:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7c46:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c4a:       78 ec                   js     5b7c38 <InstrStopNode+0x68>
    0.00 :	  5b7c4c:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c52:       7e 1b                   jle    5b7c6f <InstrStopNode+0x9f>
    0.00 :	  5b7c54:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b7c58:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  5b7c5d:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7c63:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c67:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c6d:       7f e9                   jg     5b7c58 <InstrStopNode+0x88>
         :
         :	                INSTR_TIME_SET_ZERO(instr->starttime);
    0.00 :	  5b7c6f:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b7c76:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:85
    3.33 :	  5b7c77:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	  5b7c7e:       00 
         :	        }
         :
         :	        /* Add delta of buffer usage since entry to node's totals */
         :	        if (instr->need_bufusage)
    0.00 :	  5b7c7f:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    3.33 :	  5b7c83:       75 33                   jne    5b7cb8 <InstrStopNode+0xe8>
         :	                BufferUsageAccumDiff(&instr->bufusage,
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
    0.00 :	  5b7c85:       80 7b 02 00             cmpb   $0x0,0x2(%rbx)
    0.00 :	  5b7c89:       75 21                   jne    5b7cac <InstrStopNode+0xdc>
         :	        {
         :	                instr->running = true;
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7c8b:       f2 48 0f 2a 43 20       cvtsi2sdq 0x20(%rbx),%xmm0
    0.00 :	  5b7c91:       f2 0f 5e 05 47 49 2c    divsd  0x2c4947(%rip),%xmm0        # 87c5e0 <__func__.18742+0x1b>
    0.00 :	  5b7c98:       00 
    0.00 :	  5b7c99:       f2 48 0f 2a 4b 18       cvtsi2sdq 0x18(%rbx),%xmm1
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
         :	        {
         :	                instr->running = true;
    0.00 :	  5b7c9f:       c6 43 02 01             movb   $0x1,0x2(%rbx)
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7ca3:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  5b7ca7:       f2 0f 11 4b 28          movsd  %xmm1,0x28(%rbx)
         :	        }
         :	}
    0.00 :	  5b7cac:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b7cb0:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    3.33 :	  5b7cb1:       c9                      leaveq 
    3.33 :	  5b7cb2:       c3                      retq   
    0.00 :	  5b7cb3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	static void
         :	BufferUsageAccumDiff(BufferUsage *dst,
         :	                                         const BufferUsage *add,
         :	                                         const BufferUsage *sub)
         :	{
         :	        dst->shared_blks_hit += add->shared_blks_hit - sub->shared_blks_hit;
    0.00 :	  5b7cb8:       48 8b 05 a1 7a 60 00    mov    0x607aa1(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7cbf:       48 03 83 d8 00 00 00    add    0xd8(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:136
    3.33 :	  5b7cc6:       48 2b 43 38             sub    0x38(%rbx),%rax
    3.33 :	  5b7cca:       48 89 83 d8 00 00 00    mov    %rax,0xd8(%rbx)
         :	        dst->shared_blks_read += add->shared_blks_read - sub->shared_blks_read;
    0.00 :	  5b7cd1:       48 8b 05 90 7a 60 00    mov    0x607a90(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7cd8:       48 03 83 e0 00 00 00    add    0xe0(%rbx),%rax
    0.00 :	  5b7cdf:       48 2b 43 40             sub    0x40(%rbx),%rax
    0.00 :	  5b7ce3:       48 89 83 e0 00 00 00    mov    %rax,0xe0(%rbx)
         :	        dst->shared_blks_dirtied += add->shared_blks_dirtied - sub->shared_blks_dirtied;
    0.00 :	  5b7cea:       48 8b 05 7f 7a 60 00    mov    0x607a7f(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7cf1:       48 03 83 e8 00 00 00    add    0xe8(%rbx),%rax
    0.00 :	  5b7cf8:       48 2b 43 48             sub    0x48(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:138
    6.67 :	  5b7cfc:       48 89 83 e8 00 00 00    mov    %rax,0xe8(%rbx)
         :	        dst->shared_blks_written += add->shared_blks_written - sub->shared_blks_written;
    0.00 :	  5b7d03:       48 8b 05 6e 7a 60 00    mov    0x607a6e(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7d0a:       48 03 83 f0 00 00 00    add    0xf0(%rbx),%rax
    0.00 :	  5b7d11:       48 2b 43 50             sub    0x50(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:139
    3.33 :	  5b7d15:       48 89 83 f0 00 00 00    mov    %rax,0xf0(%rbx)
         :	        dst->local_blks_hit += add->local_blks_hit - sub->local_blks_hit;
    0.00 :	  5b7d1c:       48 8b 05 5d 7a 60 00    mov    0x607a5d(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7d23:       48 03 83 f8 00 00 00    add    0xf8(%rbx),%rax
    0.00 :	  5b7d2a:       48 2b 43 58             sub    0x58(%rbx),%rax
    0.00 :	  5b7d2e:       48 89 83 f8 00 00 00    mov    %rax,0xf8(%rbx)
         :	        dst->local_blks_read += add->local_blks_read - sub->local_blks_read;
    0.00 :	  5b7d35:       48 8b 05 4c 7a 60 00    mov    0x607a4c(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7d3c:       48 03 83 00 01 00 00    add    0x100(%rbx),%rax
    0.00 :	  5b7d43:       48 2b 43 60             sub    0x60(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:141
    3.33 :	  5b7d47:       48 89 83 00 01 00 00    mov    %rax,0x100(%rbx)
         :	        dst->local_blks_dirtied += add->local_blks_dirtied - sub->local_blks_dirtied;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    3.33 :	  5b7d4e:       48 8b 05 3b 7a 60 00    mov    0x607a3b(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7d55:       48 03 83 08 01 00 00    add    0x108(%rbx),%rax
    0.00 :	  5b7d5c:       48 2b 43 68             sub    0x68(%rbx),%rax
    3.33 :	  5b7d60:       48 89 83 08 01 00 00    mov    %rax,0x108(%rbx)
         :	        dst->local_blks_written += add->local_blks_written - sub->local_blks_written;
    0.00 :	  5b7d67:       48 8b 05 2a 7a 60 00    mov    0x607a2a(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7d6e:       48 03 83 10 01 00 00    add    0x110(%rbx),%rax
    0.00 :	  5b7d75:       48 2b 43 70             sub    0x70(%rbx),%rax
    0.00 :	  5b7d79:       48 89 83 10 01 00 00    mov    %rax,0x110(%rbx)
         :	        dst->temp_blks_read += add->temp_blks_read - sub->temp_blks_read;
    0.00 :	  5b7d80:       48 8b 05 19 7a 60 00    mov    0x607a19(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7d87:       48 03 83 18 01 00 00    add    0x118(%rbx),%rax
    0.00 :	  5b7d8e:       48 2b 43 78             sub    0x78(%rbx),%rax
    0.00 :	  5b7d92:       48 89 83 18 01 00 00    mov    %rax,0x118(%rbx)
         :	        dst->temp_blks_written += add->temp_blks_written - sub->temp_blks_written;
    0.00 :	  5b7d99:       48 8b 05 08 7a 60 00    mov    0x607a08(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7da0:       48 03 83 20 01 00 00    add    0x120(%rbx),%rax
    0.00 :	  5b7da7:       48 2b 83 80 00 00 00    sub    0x80(%rbx),%rax
    0.00 :	  5b7dae:       48 89 83 20 01 00 00    mov    %rax,0x120(%rbx)
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_read_time,
    0.00 :	  5b7db5:       48 8b 05 f4 79 60 00    mov    0x6079f4(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7dbc:       48 03 83 28 01 00 00    add    0x128(%rbx),%rax
    0.00 :	  5b7dc3:       48 2b 83 88 00 00 00    sub    0x88(%rbx),%rax
    0.00 :	  5b7dca:       48 89 83 28 01 00 00    mov    %rax,0x128(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    3.33 :	  5b7dd1:       48 8b 05 e0 79 60 00    mov    0x6079e0(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7dd8:       48 03 83 30 01 00 00    add    0x130(%rbx),%rax
    0.00 :	  5b7ddf:       48 2b 83 90 00 00 00    sub    0x90(%rbx),%rax
    3.33 :	  5b7de6:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7de9:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7df0:       79 43                   jns    5b7e35 <InstrStopNode+0x265>
    0.00 :	  5b7df2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7df8:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7dfe:       48 83 ab 28 01 00 00    subq   $0x1,0x128(%rbx)
    0.00 :	  5b7e05:       01 
    0.00 :	  5b7e06:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e09:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e10:       78 e6                   js     5b7df8 <InstrStopNode+0x228>
    0.00 :	  5b7e12:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e18:       7e 23                   jle    5b7e3d <InstrStopNode+0x26d>
    0.00 :	  5b7e1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e20:       48 83 83 28 01 00 00    addq   $0x1,0x128(%rbx)
    0.00 :	  5b7e27:       01 
    0.00 :	  5b7e28:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7e2e:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e35:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e3b:       7f e3                   jg     5b7e20 <InstrStopNode+0x250>
         :	                                                  add->blk_read_time, sub->blk_read_time);
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_write_time,
    0.00 :	  5b7e3d:       48 8b 05 7c 79 60 00    mov    0x60797c(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7e44:       48 03 83 38 01 00 00    add    0x138(%rbx),%rax
    0.00 :	  5b7e4b:       48 2b 83 98 00 00 00    sub    0x98(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    3.33 :	  5b7e52:       48 89 83 38 01 00 00    mov    %rax,0x138(%rbx)
    0.00 :	  5b7e59:       48 8b 05 68 79 60 00    mov    0x607968(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b7e60:       48 03 83 40 01 00 00    add    0x140(%rbx),%rax
    0.00 :	  5b7e67:       48 2b 83 a0 00 00 00    sub    0xa0(%rbx),%rax
    0.00 :	  5b7e6e:       48 85 c0                test   %rax,%rax
    3.33 :	  5b7e71:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    3.33 :	  5b7e78:       79 4b                   jns    5b7ec5 <InstrStopNode+0x2f5>
    0.00 :	  5b7e7a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e80:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7e86:       48 83 ab 38 01 00 00    subq   $0x1,0x138(%rbx)
    0.00 :	  5b7e8d:       01 
    0.00 :	  5b7e8e:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e91:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e98:       78 e6                   js     5b7e80 <InstrStopNode+0x2b0>
    0.00 :	  5b7e9a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ea0:       0f 8e df fd ff ff       jle    5b7c85 <InstrStopNode+0xb5>
    0.00 :	  5b7ea6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b7ead:       00 00 00 
    0.00 :	  5b7eb0:       48 83 83 38 01 00 00    addq   $0x1,0x138(%rbx)
    0.00 :	  5b7eb7:       01 
    0.00 :	  5b7eb8:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7ebe:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    3.33 :	  5b7ec5:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ecb:       7f e3                   jg     5b7eb0 <InstrStopNode+0x2e0>
    0.00 :	  5b7ecd:       e9 b3 fd ff ff          jmpq   5b7c85 <InstrStopNode+0xb5>
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        elog(ERROR, "InstrStopNode called without start");
    0.00 :	  5b7ed2:       ba 8a b6 88 00          mov    $0x88b68a,%edx
    0.00 :	  5b7ed7:       be 50 00 00 00          mov    $0x50,%esi
    0.00 :	  5b7edc:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7ee1:       e8 3a 35 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7ee6:       be 30 b6 88 00          mov    $0x88b630,%esi
    0.00 :	  5b7eeb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7ef0:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7ef2:       e8 39 33 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7ef7:       e8 d4 15 eb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   17.24 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:191
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:137
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:148
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:142
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:231
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:231
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:214
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:137
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:194
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:198
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:255
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:255
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:203
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:211
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:231
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:195
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ff60 <heap_fill_tuple>:
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:137
    6.90 :	  46ff60:       55                      push   %rbp
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff61:       45 31 d2                xor    %r10d,%r10d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff64:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46ff67:       41 57                   push   %r15
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:148
    6.90 :	  46ff69:       45 31 ff                xor    %r15d,%r15d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff6c:       41 56                   push   %r14
    0.00 :	  46ff6e:       41 55                   push   %r13
    0.00 :	  46ff70:       49 89 cd                mov    %rcx,%r13
    0.00 :	  46ff73:       41 54                   push   %r12
    0.00 :	  46ff75:       53                      push   %rbx
    0.00 :	  46ff76:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  46ff7a:       4c 8b 5d 10             mov    0x10(%rbp),%r11
    0.00 :	  46ff7e:       48 89 75 c8             mov    %rsi,-0x38(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:137
    3.45 :	  46ff82:       48 89 55 c0             mov    %rdx,-0x40(%rbp)
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff86:       8b 07                   mov    (%rdi),%eax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff88:       4d 85 db                test   %r11,%r11
         :	                                uint16 *infomask, bits8 *bit)
         :	{
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff8b:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :	        Form_pg_attribute *att = tupleDesc->attrs;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:142
    6.90 :	  46ff8e:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff92:       74 0a                   je     46ff9e <heap_fill_tuple+0x3e>
         :	        {
         :	                bitP = &bit[-1];
    0.00 :	  46ff94:       4d 8d 53 ff             lea    -0x1(%r11),%r10
    0.00 :	  46ff98:       41 bf 80 00 00 00       mov    $0x80,%r15d
         :	                /* just to keep compiler quiet */
         :	                bitP = NULL;
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
    0.00 :	  46ff9e:       66 41 83 21 f8          andw   $0xfff8,(%r9)
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffa3:       8b 4d d4                mov    -0x2c(%rbp),%ecx
    0.00 :	  46ffa6:       85 c9                   test   %ecx,%ecx
    0.00 :	  46ffa8:       0f 8e 5c 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
    0.00 :	  46ffae:       49 89 c0                mov    %rax,%r8
    0.00 :	  46ffb1:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  46ffb4:       eb 21                   jmp    46ffd7 <heap_fill_tuple+0x77>
    0.00 :	  46ffb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46ffbd:       00 00 00 
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
    0.00 :	  46ffc0:       66 41 83 09 01          orw    $0x1,(%r9)
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :
         :	                data += data_length;
    0.00 :	  46ffc5:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  46ffc9:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffcd:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  46ffd1:       0f 8e 33 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
         :	        {
         :	                Size            data_length;
         :
         :	                if (bit != NULL)
    0.00 :	  46ffd7:       4d 85 db                test   %r11,%r11
    0.00 :	  46ffda:       74 1e                   je     46fffa <heap_fill_tuple+0x9a>
         :	                {
         :	                        if (bitmask != HIGHBIT)
    0.00 :	  46ffdc:       41 81 ff 80 00 00 00    cmp    $0x80,%r15d
    0.00 :	  46ffe3:       0f 84 37 01 00 00       je     470120 <heap_fill_tuple+0x1c0>
         :	                                bitmask <<= 1;
    0.00 :	  46ffe9:       45 01 ff                add    %r15d,%r15d
         :	                                bitP += 1;
         :	                                *bitP = 0x0;
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
    0.00 :	  46ffec:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  46fff0:       42 80 3c 32 00          cmpb   $0x0,(%rdx,%r14,1)
    0.00 :	  46fff5:       75 c9                   jne    46ffc0 <heap_fill_tuple+0x60>
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
         :	                                continue;
         :	                        }
         :
         :	                        *bitP |= bitmask;
    0.00 :	  46fff7:       45 08 3a                or     %r15b,(%r10)
         :	                /*
         :	                 * XXX we use the att_align macros on the pointer value itself, not on
         :	                 * an offset.  This is a bit of a hack.
         :	                 */
         :
         :	                if (att[i]->attbyval)
    0.00 :	  46fffa:       49 8b 08                mov    (%r8),%rcx
    0.00 :	  46fffd:       80 79 5c 00             cmpb   $0x0,0x5c(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:191
   17.24 :	  470001:       74 7d                   je     470080 <heap_fill_tuple+0x120>
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:194
    3.45 :	  470003:       0f b6 41 5e             movzbl 0x5e(%rcx),%eax
    0.00 :	  470007:       3c 69                   cmp    $0x69,%al
    0.00 :	  470009:       0f 84 f1 01 00 00       je     470200 <heap_fill_tuple+0x2a0>
    0.00 :	  47000f:       3c 63                   cmp    $0x63,%al
    0.00 :	  470011:       74 10                   je     470023 <heap_fill_tuple+0xc3>
    0.00 :	  470013:       3c 64                   cmp    $0x64,%al
    0.00 :	  470015:       0f 84 55 02 00 00       je     470270 <heap_fill_tuple+0x310>
    0.00 :	  47001b:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  47001f:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470023:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470027:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  47002b:       0f 84 e5 01 00 00       je     470216 <heap_fill_tuple+0x2b6>
    0.00 :	  470031:       0f 8f 01 01 00 00       jg     470138 <heap_fill_tuple+0x1d8>
    0.00 :	  470037:       66 83 e8 01             sub    $0x1,%ax
    0.00 :	  47003b:       0f 84 07 02 00 00       je     470248 <heap_fill_tuple+0x2e8>
    0.00 :	  470041:       ba 30 f7 7a 00          mov    $0x7af730,%edx
    0.00 :	  470046:       be c3 00 00 00          mov    $0xc3,%esi
    0.00 :	  47004b:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  470050:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470054:       e8 c7 b3 30 00          callq  77b420 <elog_start>
    0.00 :	  470059:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  47005d:       be 2f f6 7a 00          mov    $0x7af62f,%esi
    0.00 :	  470062:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  470067:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47006a:       0f bf 50 4c             movswl 0x4c(%rax),%edx
    0.00 :	  47006e:       31 c0                   xor    %eax,%eax
    0.00 :	  470070:       e8 bb b1 30 00          callq  77b230 <elog_finish>
    0.00 :	  470075:       e8 56 94 ff ff          callq  4694d0 <abort@plt>
    0.00 :	  47007a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:198
    3.45 :	  470080:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470084:       66 83 f8 ff             cmp    $0xffff,%ax
    0.00 :	  470088:       0f 84 da 00 00 00       je     470168 <heap_fill_tuple+0x208>
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
    0.00 :	  47008e:       66 83 f8 fe             cmp    $0xfffe,%ax
    0.00 :	  470092:       0f 84 e8 01 00 00       je     470280 <heap_fill_tuple+0x320>
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470098:       0f b6 49 5e             movzbl 0x5e(%rcx),%ecx
    0.00 :	  47009c:       80 f9 69                cmp    $0x69,%cl
    0.00 :	  47009f:       0f 84 bb 01 00 00       je     470260 <heap_fill_tuple+0x300>
    0.00 :	  4700a5:       80 f9 63                cmp    $0x63,%cl
    0.00 :	  4700a8:       74 14                   je     4700be <heap_fill_tuple+0x15e>
    0.00 :	  4700aa:       80 f9 64                cmp    $0x64,%cl
    0.00 :	  4700ad:       0f 1f 00                nopl   (%rax)
    0.00 :	  4700b0:       0f 84 3a 02 00 00       je     4702f0 <heap_fill_tuple+0x390>
    0.00 :	  4700b6:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4700ba:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700be:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
    0.00 :	  4700c2:       4c 0f bf e0             movswq %ax,%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700c6:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4700c9:       4a 8b 34 f2             mov    (%rdx,%r14,8),%rsi
    0.00 :	  4700cd:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4700d0:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4700d4:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4700d8:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  4700dc:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4700e0:       e8 0b 9b ff ff          callq  469bf0 <memcpy@plt>
    0.00 :	  4700e5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4700e9:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4700ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4700f1:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
         :	                }
         :
         :	                data += data_length;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
    3.45 :	  4700f5:       4d 01 e5                add    %r12,%r13
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
    6.90 :	  4700f8:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  4700fc:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470100:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  470104:       0f 8f cd fe ff ff       jg     46ffd7 <heap_fill_tuple+0x77>
         :
         :	                data += data_length;
         :	        }
         :
         :	        Assert((data - start) == data_size);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:255
    3.45 :	  47010a:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  47010e:       5b                      pop    %rbx
    3.45 :	  47010f:       41 5c                   pop    %r12
    0.00 :	  470111:       41 5d                   pop    %r13
    0.00 :	  470113:       41 5e                   pop    %r14
    0.00 :	  470115:       41 5f                   pop    %r15
    0.00 :	  470117:       c9                      leaveq 
    0.00 :	  470118:       c3                      retq   
    0.00 :	  470119:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        if (bitmask != HIGHBIT)
         :	                                bitmask <<= 1;
         :	                        else
         :	                        {
         :	                                bitP += 1;
    0.00 :	  470120:       49 83 c2 01             add    $0x1,%r10
         :	                                *bitP = 0x0;
    0.00 :	  470124:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  47012a:       41 c6 02 00             movb   $0x0,(%r10)
    0.00 :	  47012e:       e9 b9 fe ff ff          jmpq   46ffec <heap_fill_tuple+0x8c>
    0.00 :	  470133:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470138:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  47013c:       0f 84 ee 00 00 00       je     470230 <heap_fill_tuple+0x2d0>
    0.00 :	  470142:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  470146:       0f 85 f5 fe ff ff       jne    470041 <heap_fill_tuple+0xe1>
    0.00 :	  47014c:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470150:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470154:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                        data_length = att[i]->attlen;
    0.00 :	  470158:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47015b:       4c 0f bf 60 4c          movswq 0x4c(%rax),%r12
    0.00 :	  470160:       eb 93                   jmp    4700f5 <heap_fill_tuple+0x195>
    0.00 :	  470162:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470168:       48 8b 45 c8             mov    -0x38(%rbp),%rax
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  47016c:       41 0f b7 11             movzwl (%r9),%edx
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470170:       4a 8b 34 f0             mov    (%rax,%r14,8),%rsi
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:203
    3.45 :	  470174:       89 d0                   mov    %edx,%eax
    0.00 :	  470176:       83 c8 02                or     $0x2,%eax
    0.00 :	  470179:       66 41 89 01             mov    %ax,(%r9)
         :	                        if (VARATT_IS_EXTERNAL(val))
    0.00 :	  47017d:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	  470180:       3c 01                   cmp    $0x1,%al
    0.00 :	  470182:       0f 84 38 01 00 00       je     4702c0 <heap_fill_tuple+0x360>
         :	                                *infomask |= HEAP_HASEXTERNAL;
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:211
    3.45 :	  470188:       0f b6 d0                movzbl %al,%edx
    0.00 :	  47018b:       f6 c2 01                test   $0x1,%dl
    0.00 :	  47018e:       0f 85 6c 01 00 00       jne    470300 <heap_fill_tuple+0x3a0>
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470194:       49 8b 00                mov    (%r8),%rax
    0.00 :	  470197:       80 78 5d 70             cmpb   $0x70,0x5d(%rax)
    0.00 :	  47019b:       74 09                   je     4701a6 <heap_fill_tuple+0x246>
    0.00 :	  47019d:       83 e2 03                and    $0x3,%edx
    0.00 :	  4701a0:       0f 84 6a 01 00 00       je     470310 <heap_fill_tuple+0x3b0>
    0.00 :	  4701a6:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  4701a8:       c1 e9 02                shr    $0x2,%ecx
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  4701ab:       0f b6 40 5e             movzbl 0x5e(%rax),%eax
    0.00 :	  4701af:       3c 69                   cmp    $0x69,%al
    0.00 :	  4701b1:       0f 84 99 01 00 00       je     470350 <heap_fill_tuple+0x3f0>
    0.00 :	  4701b7:       3c 63                   cmp    $0x63,%al
    0.00 :	  4701b9:       74 10                   je     4701cb <heap_fill_tuple+0x26b>
    0.00 :	  4701bb:       3c 64                   cmp    $0x64,%al
    0.00 :	  4701bd:       0f 84 9a 01 00 00       je     47035d <heap_fill_tuple+0x3fd>
    0.00 :	  4701c3:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4701c7:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
    0.00 :	  4701cb:       41 89 cc                mov    %ecx,%r12d
         :	                                memcpy(data, val, data_length);
    0.00 :	  4701ce:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4701d1:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4701d4:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4701d8:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4701dc:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:231
    6.90 :	  4701e0:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4701e4:       e8 07 9a ff ff          callq  469bf0 <memcpy@plt>
    6.90 :	  4701e9:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:231
    3.45 :	  4701ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4701f1:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4701f5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4701f9:       e9 f7 fe ff ff          jmpq   4700f5 <heap_fill_tuple+0x195>
    0.00 :	  4701fe:       66 90                   xchg   %ax,%ax
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470200:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470204:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470208:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  47020c:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  470210:       0f 85 1b fe ff ff       jne    470031 <heap_fill_tuple+0xd1>
    0.00 :	  470216:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47021a:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  47021e:       66 41 89 45 00          mov    %ax,0x0(%r13)
    0.00 :	  470223:       e9 30 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470228:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  47022f:       00 
    0.00 :	  470230:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470234:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:195
    3.45 :	  470238:       41 89 45 00             mov    %eax,0x0(%r13)
    0.00 :	  47023c:       e9 17 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470241:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  470248:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47024c:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470250:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470254:       e9 ff fe ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470259:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470260:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470264:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470268:       e9 51 fe ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  47026d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470270:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470274:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470278:       e9 a6 fd ff ff          jmpq   470023 <heap_fill_tuple+0xc3>
    0.00 :	  47027d:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
         :	                {
         :	                        /* cstring ... never needs alignment */
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  470280:       66 41 83 09 02          orw    $0x2,(%r9)
         :	                        Assert(att[i]->attalign == 'c');
         :	                        data_length = strlen(DatumGetCString(values[i])) + 1;
    0.00 :	  470285:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  470289:       4a 8b 1c f0             mov    (%rax,%r14,8),%rbx
    0.00 :	  47028d:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470291:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  470295:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470299:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  47029d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4702a0:       e8 ab 95 ff ff          callq  469850 <strlen@plt>
    0.00 :	  4702a5:       4c 8d 60 01             lea    0x1(%rax),%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4702a9:       48 89 de                mov    %rbx,%rsi
    0.00 :	  4702ac:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4702af:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4702b2:       e9 2d ff ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  4702b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4702be:       00 00 
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c0:       83 ca 06                or     $0x6,%edx
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702c3:       41 bc 0a 00 00 00       mov    $0xa,%r12d
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c9:       66 41 89 11             mov    %dx,(%r9)
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702cd:       0f b6 46 01             movzbl 0x1(%rsi),%eax
    0.00 :	  4702d1:       3c 01                   cmp    $0x1,%al
    0.00 :	  4702d3:       0f 84 f5 fe ff ff       je     4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702d9:       3c 12                   cmp    $0x12,%al
    0.00 :	  4702db:       41 bc 03 00 00 00       mov    $0x3,%r12d
    0.00 :	  4702e1:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4702e6:       4c 0f 44 e2             cmove  %rdx,%r12
    0.00 :	  4702ea:       e9 df fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702ef:       90                      nop
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  4702f0:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  4702f4:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  4702f8:       e9 c1 fd ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  4702fd:       0f 1f 00                nopl   (%rax)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
    0.00 :	  470300:       d0 e8                   shr    %al
    0.00 :	  470302:       44 0f b6 e0             movzbl %al,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:214
    6.90 :	  470306:       e9 c3 fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  47030b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470310:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  470312:       c1 e9 02                shr    $0x2,%ecx
    0.00 :	  470315:       8d 51 fc                lea    -0x4(%rcx),%edx
    0.00 :	  470318:       4c 8d 62 01             lea    0x1(%rdx),%r12
    0.00 :	  47031c:       49 83 fc 7f             cmp    $0x7f,%r12
    0.00 :	  470320:       0f 87 85 fe ff ff       ja     4701ab <heap_fill_tuple+0x24b>
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470326:       43 8d 04 24             lea    (%r12,%r12,1),%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47032a:       49 8d 7d 01             lea    0x1(%r13),%rdi
    0.00 :	  47032e:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	  470332:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470336:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  47033a:       83 c8 01                or     $0x1,%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47033d:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470341:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470345:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470349:       e9 96 fe ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  47034e:       66 90                   xchg   %ax,%ax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  470350:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470354:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470358:       e9 6e fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>
    0.00 :	  47035d:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470361:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470365:       e9 61 fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   35.71 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   10.71 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
   10.71 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:889
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    3.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1005
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782f20 <CHashInsert>:
         :	 * degrading performance; or CHashAllocate may enter a tight loop until such
         :	 * time as an element is deleted).
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
    0.00 :	  782f20:       55                      push   %rbp
    0.00 :	  782f21:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782f24:       41 57                   push   %r15
    0.00 :	  782f26:       41 56                   push   %r14
    0.00 :	  782f28:       41 55                   push   %r13
    0.00 :	  782f2a:       41 54                   push   %r12
    0.00 :	  782f2c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  782f2f:       53                      push   %rbx
    0.00 :	  782f30:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  782f34:       48 89 75 a0             mov    %rsi,-0x60(%rbp)
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782f38:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782f3c:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  782f40:       e8 0b d4 d0 ff          callq  490350 <hash_any>
    0.00 :	  782f45:       89 45 a8                mov    %eax,-0x58(%rbp)
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f48:       41 23 44 24 10          and    0x10(%r12),%eax
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f4d:       8b 35 b5 5b 3e 00       mov    0x3e5bb5(%rip),%esi        # b68b08 <MyBackendId>
    0.00 :	  782f53:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f59:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f5c:       89 c0                   mov    %eax,%eax
    0.00 :	  782f5e:       4c 8d 3c 85 00 00 00    lea    0x0(,%rax,4),%r15
    0.00 :	  782f65:       00 
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f66:       8b 05 78 cd 43 00       mov    0x43cd78(%rip),%eax        # bbfce4 <MyProcPid>
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f6c:       4d 03 7c 24 20          add    0x20(%r12),%r15
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f71:       41 39 44 24 38          cmp    %eax,0x38(%r12)
    0.00 :	  782f76:       74 26                   je     782f9e <CHashInsert+0x7e>
         :	        {
         :	                table->gc_pid = MyProcPid;
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f78:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  782f7e:       41 8b 54 24 10          mov    0x10(%r12),%edx
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
         :	        {
         :	                table->gc_pid = MyProcPid;
    0.00 :	  782f83:       41 89 44 24 38          mov    %eax,0x38(%r12)
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f88:       8b 05 56 cd 43 00       mov    0x43cd56(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  782f8e:       83 c2 01                add    $0x1,%edx
    0.00 :	  782f91:       d3 ea                   shr    %cl,%edx
    0.00 :	  782f93:       89 d1                   mov    %edx,%ecx
    0.00 :	  782f95:       31 d2                   xor    %edx,%edx
    0.00 :	  782f97:       f7 f1                   div    %ecx
    0.00 :	  782f99:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f9e:       0f b7 cf                movzwl %di,%ecx
    0.00 :	  782fa1:       89 f0                   mov    %esi,%eax
    0.00 :	  782fa3:       31 d2                   xor    %edx,%edx
    0.00 :	  782fa5:       f7 f1                   div    %ecx
    0.00 :	  782fa7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  782fad:       49 8b 74 24 28          mov    0x28(%r12),%rsi
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  782fb2:       41 bb fe ff ff ff       mov    $0xfffffffe,%r11d
         :	                 * If we attempt to pop the free-list and fail, we retry immediately
         :	                 * with the same free-list.  This reduces the frequency with which
         :	                 * we're obliged to update our hazard pointers, which is a material
         :	                 * savings due to the associated memory barrier.
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
    0.00 :	  782fb8:       44 8d 42 01             lea    0x1(%rdx),%r8d
    0.00 :	  782fbc:       44 89 c0                mov    %r8d,%eax
    0.00 :	  782fbf:       d3 e0                   shl    %cl,%eax
    0.00 :	  782fc1:       01 d0                   add    %edx,%eax
    0.00 :	  782fc3:       48 8d 0c 86             lea    (%rsi,%rax,4),%rcx
         :	                MyProc->hazard[0] = b;
    0.00 :	  782fc7:       48 8b 05 7a a9 3f 00    mov    0x3fa97a(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782fce:       48 89 88 e8 02 00 00    mov    %rcx,0x2e8(%rax)
         :	                pg_memory_barrier();
    0.00 :	  782fd5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                new = *b;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
   10.71 :	  782fda:       8b 19                   mov    (%rcx),%ebx
         :	                while (!CHashPtrIsInvalid(new))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:889
    3.57 :	  782fdc:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782fdf:       76 23                   jbe    783004 <CHashInsert+0xe4>
    0.00 :	  782fe1:       e9 52 01 00 00          jmpq   783138 <CHashInsert+0x218>
    0.00 :	  782fe6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  782fed:       00 00 00 
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
         :	                                return new;
         :	                        CHashTableIncrementStatistic(table, CHS_Allocate_Fail);
    0.00 :	  782ff0:       49 83 84 24 a0 00 00    addq   $0x1,0xa0(%r12)
    0.00 :	  782ff7:       00 01 
         :	                        new = *b;
    0.00 :	  782ff9:       8b 19                   mov    (%rcx),%ebx
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782ffb:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782ffe:       0f 87 34 01 00 00       ja     783138 <CHashInsert+0x218>
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  783004:       89 de                   mov    %ebx,%esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  783006:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  78300b:       d1 ee                   shr    %esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  78300d:       89 f2                   mov    %esi,%edx
    0.00 :	  78300f:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783015:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
   10.71 :	  783019:       89 d8                   mov    %ebx,%eax
    0.00 :	  78301b:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
    0.00 :	  78301f:       75 cf                   jne    782ff0 <CHashInsert+0xd0>
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783021:       41 89 f5                mov    %esi,%r13d
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783024:       8b 4d a8                mov    -0x58(%rbp),%ecx
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783027:       45 0f af 6c 24 1c       imul   0x1c(%r12),%r13d
    0.00 :	  78302d:       4d 03 6c 24 30          add    0x30(%r12),%r13
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783032:       41 89 4d 04             mov    %ecx,0x4(%r13)
         :	        memcpy(CHashNodeGetItem(nnew), entry, table->desc.element_size);
    0.00 :	  783036:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  78303c:       49 8d 7d 08             lea    0x8(%r13),%rdi
    0.00 :	  783040:       48 8b 75 a0             mov    -0x60(%rbp),%rsi
    0.00 :	  783044:       e8 a7 6b ce ff          callq  469bf0 <memcpy@plt>
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783049:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  78304f:       8b 55 ac                mov    -0x54(%rbp),%edx
    0.00 :	  783052:       d3 ea                   shr    %cl,%edx
    0.00 :	  783054:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78305a:       89 d0                   mov    %edx,%eax
    0.00 :	  78305c:       d3 e8                   shr    %cl,%eax
    0.00 :	  78305e:       01 d0                   add    %edx,%eax
    0.00 :	  783060:       48 8b 15 e1 a8 3f 00    mov    0x3fa8e1(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  783067:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  78306b:       49 03 44 24 28          add    0x28(%r12),%rax
    0.00 :	  783070:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  783077:       f0 83 04 24 00          lock addl $0x0,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
    3.57 :	  78307c:       4c 8d 75 b0             lea    -0x50(%rbp),%r14
    0.00 :	  783080:       eb 20                   jmp    7830a2 <CHashInsert+0x182>
    0.00 :	  783082:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * where N is the number of buckets and M is the number of elements
         :	                 * in the table.  Even for a quite modestly size table this is likely
         :	                 * to exceed the number of CPU cores.
         :	                 */
         :	                Assert(!CHashPtrIsMarked(scan.target));
         :	                nnew->next = scan.target;
    0.00 :	  783088:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  78308b:       41 89 45 00             mov    %eax,0x0(%r13)
         :	                if (!__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  78308f:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  783093:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  783096:       f0 0f b1 1a             lock cmpxchg %ebx,(%rdx)
    0.00 :	  78309a:       74 49                   je     7830e5 <CHashInsert+0x1c5>
         :	                                                                                  scan.target, new))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Insert_Retry);
    0.00 :	  78309c:       49 83 44 24 60 01       addq   $0x1,0x60(%r12)
         :	         * Scan the bucket.  If we don't find a match, use compare-and-swap to
         :	         * insert the new node at the insert position.  If we do find a match,
         :	         * return the data to the caller.
         :	         */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  7830a2:       48 8b 4d a0             mov    -0x60(%rbp),%rcx
    0.00 :	  7830a6:       8b 55 a8                mov    -0x58(%rbp),%edx
    0.00 :	  7830a9:       4d 89 f0                mov    %r14,%r8
    0.00 :	  7830ac:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  7830af:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  7830b2:       e8 e9 fb ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  7830b7:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  7830bb:       74 cb                   je     783088 <CHashInsert+0x168>
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  7830bd:       41 0f b7 44 24 0e       movzwl 0xe(%r12),%eax
    0.00 :	  7830c3:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  7830c7:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  7830cd:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  7830d0:       48 01 f7                add    %rsi,%rdi
    0.00 :	  7830d3:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7830d7:       48 03 75 c0             add    -0x40(%rbp),%rsi
    0.00 :	  7830db:       29 c2                   sub    %eax,%edx
    0.00 :	  7830dd:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7830e0:       e8 0b 6b ce ff          callq  469bf0 <memcpy@plt>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  7830e5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7830ea:       48 8b 05 57 a8 3f 00    mov    0x3fa857(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7830f1:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7830f8:       00 00 00 00 
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
         :	        if (scan.found)
    0.00 :	  7830fc:       31 c0                   xor    %eax,%eax
         :	         * progress at the time we popped the freelist has completed.  This
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
    0.00 :	  7830fe:       49 83 44 24 50 01       addq   $0x1,0x50(%r12)
         :	        if (scan.found)
    0.00 :	  783104:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  783108:       74 17                   je     783121 <CHashInsert+0x201>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Insert_Failed);
    0.00 :	  78310a:       49 83 44 24 58 01       addq   $0x1,0x58(%r12)
         :	                CHashAddToGarbage(table, bucket, new);
    0.00 :	  783110:       8b 75 ac                mov    -0x54(%rbp),%esi
    0.00 :	  783113:       89 da                   mov    %ebx,%edx
    0.00 :	  783115:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783118:       e8 33 fb ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  78311d:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
    0.00 :	  783121:       84 c0                   test   %al,%al
    0.00 :	  783123:       0f 94 c0                sete   %al
         :	        }
         :
         :	        /* The insert succeeded if and only if no duplicate was found. */
         :	        return !scan.found;
         :	}
    0.00 :	  783126:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  78312a:       5b                      pop    %rbx
    0.00 :	  78312b:       41 5c                   pop    %r12
    0.00 :	  78312d:       41 5d                   pop    %r13
    0.00 :	  78312f:       41 5e                   pop    %r14
    0.00 :	  783131:       41 5f                   pop    %r15
    0.00 :	  783133:       c9                      leaveq 
    0.00 :	  783134:       c3                      retq   
    0.00 :	  783135:       0f 1f 00                nopl   (%rax)
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783138:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  78313e:       8b 05 c4 59 3e 00       mov    0x3e59c4(%rip),%eax        # b68b08 <MyBackendId>
    0.00 :	  783144:       31 d2                   xor    %edx,%edx
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783146:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78314c:       4d 8b 4c 24 28          mov    0x28(%r12),%r9
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783151:       f7 f7                   div    %edi
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783153:       8d 42 01                lea    0x1(%rdx),%eax
    0.00 :	  783156:       d3 e0                   shl    %cl,%eax
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783158:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  78315e:       01 d0                   add    %edx,%eax
    0.00 :	  783160:       4c 8d 14 85 00 00 00    lea    0x0(,%rax,4),%r10
    0.00 :	  783167:       00 
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783168:       41 8b 44 24 3c          mov    0x3c(%r12),%eax
    0.00 :	  78316d:       8d 50 01                lea    0x1(%rax),%edx
    0.00 :	  783170:       41 8b 44 24 10          mov    0x10(%r12),%eax
    0.00 :	  783175:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  783178:       89 d0                   mov    %edx,%eax
    0.00 :	  78317a:       31 d2                   xor    %edx,%edx
    0.00 :	  78317c:       d3 ee                   shr    %cl,%esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  78317e:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783184:       f7 f6                   div    %esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783186:       4c 89 ce                mov    %r9,%rsi
    0.00 :	  783189:       89 d0                   mov    %edx,%eax
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  78318b:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783190:       d3 e8                   shr    %cl,%eax
    0.00 :	  783192:       01 d0                   add    %edx,%eax
    0.00 :	  783194:       49 8d 14 81             lea    (%r9,%rax,4),%rdx
         :	        garbage = *b;
    0.00 :	  783198:       8b 1a                   mov    (%rdx),%ebx
         :
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    7.14 :	  78319a:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  78319d:       76 11                   jbe    7831b0 <CHashInsert+0x290>
         :	                new = CHashAllocateViaGC(table);
         :	                if (!CHashPtrIsInvalid(new))
         :	                        return new;
         :
         :	                /* Advance to next freelist. */
         :	                f_current = (f_current + 1) % CHashTableNFreeLists(table);
    0.00 :	  78319f:       44 89 c0                mov    %r8d,%eax
    0.00 :	  7831a2:       31 d2                   xor    %edx,%edx
    0.00 :	  7831a4:       f7 f7                   div    %edi
    0.00 :	  7831a6:       e9 0d fe ff ff          jmpq   782fb8 <CHashInsert+0x98>
    0.00 :	  7831ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  7831b0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7831b2:       f0 44 0f b1 1a          lock cmpxchg %r11d,(%rdx)
    0.00 :	  7831b7:       74 1c                   je     7831d5 <CHashInsert+0x2b5>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Dequeue_Fail);
    0.00 :	  7831b9:       49 83 84 24 b0 00 00    addq   $0x1,0xb0(%r12)
    0.00 :	  7831c0:       00 01 
    0.00 :	  7831c2:       49 8b 74 24 28          mov    0x28(%r12),%rsi
    0.00 :	  7831c7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  7831cd:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  7831d3:       eb ca                   jmp    78319f <CHashInsert+0x27f>
         :	         * requeues the garbage if it's not immediately recycleable, but
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
    0.00 :	  7831d5:       49 83 84 24 b8 00 00    addq   $0x1,0xb8(%r12)
    0.00 :	  7831dc:       00 01 
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    3.57 :	  7831de:       4f 8d 04 11             lea    (%r9,%r10,1),%r8
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7831e2:       48 8b 05 5f a7 3f 00    mov    0x3fa75f(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7831e9:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7831f0:       00 00 00 00 
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  7831f4:       48 8b 35 5d a7 3f 00    mov    0x3fa75d(%rip),%rsi        # b7d958 <ProcGlobal>
    0.00 :	  7831fb:       8b 46 10                mov    0x10(%rsi),%eax
    0.00 :	  7831fe:       85 c0                   test   %eax,%eax
    0.00 :	  783200:       74 5f                   je     783261 <CHashInsert+0x341>
    0.00 :	  783202:       31 ff                   xor    %edi,%edi
    0.00 :	  783204:       eb 1a                   jmp    783220 <CHashInsert+0x300>
    0.00 :	  783206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78320d:       00 00 00 
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
         :	                if (hazard == b || hazard == fh)
    0.00 :	  783210:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783213:       74 23                   je     783238 <CHashInsert+0x318>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    3.57 :	  783215:       83 c7 01                add    $0x1,%edi
    3.57 :	  783218:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78321b:       73 44                   jae    783261 <CHashInsert+0x341>
    0.00 :	  78321d:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
    0.00 :	  783220:       89 f8                   mov    %edi,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    7.14 :	  783222:       48 69 c0 f0 02 00 00    imul   $0x2f0,%rax,%rax
    0.00 :	  783229:       48 03 06                add    (%rsi),%rax
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    3.57 :	  78322c:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    3.57 :	  783233:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  783236:       75 d8                   jne    783210 <CHashInsert+0x2f0>
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Spin);
    0.00 :	  783238:       49 83 84 24 c0 00 00    addq   $0x1,0xc0(%r12)
    0.00 :	  78323f:       00 01 
         :	                        do
         :	                        {
         :	                                hazard = proc->hazard[0];
    0.00 :	  783241:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                        } while (hazard == b || hazard == fh);
    0.00 :	  783248:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  78324b:       74 f4                   je     783241 <CHashInsert+0x321>
    0.00 :	  78324d:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783250:       74 ef                   je     783241 <CHashInsert+0x321>
    0.00 :	  783252:       48 8b 35 ff a6 3f 00    mov    0x3fa6ff(%rip),%rsi        # b7d958 <ProcGlobal>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783259:       83 c7 01                add    $0x1,%edi
    0.00 :	  78325c:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78325f:       72 bf                   jb     783220 <CHashInsert+0x300>
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783261:       89 de                   mov    %ebx,%esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  783263:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783268:       d1 ee                   shr    %esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  78326a:       89 f2                   mov    %esi,%edx
    0.00 :	  78326c:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783272:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
         :
         :	        if (CHashPtrIsInvalid(fhead))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   35.71 :	  783276:       83 fa fd                cmp    $0xfffffffd,%edx
    0.00 :	  783279:       76 13                   jbe    78328e <CHashInsert+0x36e>
         :	                 * before we overwrite n->un.gcnext with a new hashcode.
         :	                 * (This is only needed when we reclaim exactly one node,
         :	                 * because in any other case we'll do a compare-and-swap
         :	                 * before returning, which implies a full barrier.)
         :	                 */
         :	                pg_memory_barrier();
    0.00 :	  78327b:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Skipped);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1005
    3.57 :	  783280:       49 83 84 24 c8 00 00    addq   $0x1,0xc8(%r12)
    0.00 :	  783287:       00 01 
    0.00 :	  783289:       e9 93 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        }
         :	        else if (__sync_bool_compare_and_swap(fh, InvalidCHashPtr, fhead))
    0.00 :	  78328e:       b8 fe ff ff ff          mov    $0xfffffffe,%eax
    0.00 :	  783293:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  783298:       74 41                   je     7832db <CHashInsert+0x3bb>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  78329a:       4d 8b 4c 24 30          mov    0x30(%r12),%r9
    0.00 :	  78329f:       41 8b 7c 24 1c          mov    0x1c(%r12),%edi
    0.00 :	  7832a4:       89 d0                   mov    %edx,%eax
         :
         :	                /* Walk list of reclaimed elements to end. */
         :	                fcurrent = fhead;
         :	                for (;;)
         :	                {
         :	                        n = CHashTableGetNode(table, fcurrent);
    0.00 :	  7832a6:       d1 e8                   shr    %eax
    0.00 :	  7832a8:       0f af c7                imul   %edi,%eax
    0.00 :	  7832ab:       49 8d 0c 01             lea    (%r9,%rax,1),%rcx
         :	                        fnext = n->un.gcnext;
    0.00 :	  7832af:       8b 41 04                mov    0x4(%rcx),%eax
         :	                        if (CHashPtrIsInvalid(fnext))
    0.00 :	  7832b2:       83 f8 fd                cmp    $0xfffffffd,%eax
    0.00 :	  7832b5:       76 ef                   jbe    7832a6 <CHashInsert+0x386>
    0.00 :	  7832b7:       eb 10                   jmp    7832c9 <CHashInsert+0x3a9>
    0.00 :	  7832b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        oldhead = *fh;
         :	                        n->un.gcnext = oldhead;
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
         :	                                break;
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Retry);
    0.00 :	  7832c0:       49 83 84 24 d8 00 00    addq   $0x1,0xd8(%r12)
    0.00 :	  7832c7:       00 01 
         :	                }
         :
         :	                /* Push reclaimed elements onto home free list. */
         :	                for (;;)
         :	                {
         :	                        oldhead = *fh;
    0.00 :	  7832c9:       41 8b 00                mov    (%r8),%eax
         :	                        n->un.gcnext = oldhead;
    0.00 :	  7832cc:       89 41 04                mov    %eax,0x4(%rcx)
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
    0.00 :	  7832cf:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  7832d4:       75 ea                   jne    7832c0 <CHashInsert+0x3a0>
    0.00 :	  7832d6:       e9 46 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  7832db:       49 83 84 24 d0 00 00    addq   $0x1,0xd0(%r12)
    0.00 :	  7832e2:       00 01 
    0.00 :	  7832e4:       e9 38 fd ff ff          jmpq   783021 <CHashInsert+0x101>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   22.22 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
   14.81 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
   14.81 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5437
   14.81 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5436
    7.41 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    7.41 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5399
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5421
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5451
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5493
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad000 <ExecProject>:
         :	 *              data will be valid, he must call ExecMaterializeSlot on the
         :	 *              result slot.
         :	 */
         :	TupleTableSlot *
         :	ExecProject(ProjectionInfo *projInfo, ExprDoneCond *isDone)
         :	{
    0.00 :	  5ad000:       55                      push   %rbp
    0.00 :	  5ad001:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
   14.81 :	  5ad004:       41 57                   push   %r15
    0.00 :	  5ad006:       41 56                   push   %r14
    0.00 :	  5ad008:       41 55                   push   %r13
    0.00 :	  5ad00a:       41 54                   push   %r12
    0.00 :	  5ad00c:       53                      push   %rbx
    0.00 :	  5ad00d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5ad010:       48 83 ec 48             sub    $0x48,%rsp
    0.00 :	  5ad014:       48 89 75 90             mov    %rsi,-0x70(%rbp)
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad018:       48 8b 47 18             mov    0x18(%rdi),%rax
         :	        econtext = projInfo->pi_exprContext;
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad01c:       48 85 f6                test   %rsi,%rsi
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5399
    3.70 :	  5ad01f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	        econtext = projInfo->pi_exprContext;
    0.00 :	  5ad023:       4c 8b 77 10             mov    0x10(%rdi),%r14
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad027:       74 06                   je     5ad02f <ExecProject+0x2f>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5ad029:       c7 06 00 00 00 00       movl   $0x0,(%rsi)
         :	        /*
         :	         * Clear any former contents of the result slot.  This makes it safe for
         :	         * us to use the slot's Datum/isnull arrays as workspace. (Also, we can
         :	         * return the slot as-is if we decide no rows can be projected.)
         :	         */
         :	        ExecClearTuple(slot);
    0.00 :	  5ad02f:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  5ad033:       e8 d8 70 00 00          callq  5b4110 <ExecClearTuple>
         :	        /*
         :	         * Force extraction of all input values that we'll need.  The
         :	         * Var-extraction loops below depend on this, and we are also prefetching
         :	         * all attributes that will be referenced in the generic expressions.
         :	         */
         :	        if (projInfo->pi_lastInnerVar > 0)
    0.00 :	  5ad038:       8b 73 48                mov    0x48(%rbx),%esi
    0.00 :	  5ad03b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad03d:       7e 09                   jle    5ad048 <ExecProject+0x48>
         :	                slot_getsomeattrs(econtext->ecxt_innertuple,
    0.00 :	  5ad03f:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  5ad043:       e8 18 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastInnerVar);
         :	        if (projInfo->pi_lastOuterVar > 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5421
    3.70 :	  5ad048:       8b 73 4c                mov    0x4c(%rbx),%esi
    0.00 :	  5ad04b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad04d:       7e 09                   jle    5ad058 <ExecProject+0x58>
         :	                slot_getsomeattrs(econtext->ecxt_outertuple,
    0.00 :	  5ad04f:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5ad053:       e8 08 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastOuterVar);
         :	        if (projInfo->pi_lastScanVar > 0)
    0.00 :	  5ad058:       8b 73 50                mov    0x50(%rbx),%esi
    0.00 :	  5ad05b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad05d:       7e 09                   jle    5ad068 <ExecProject+0x68>
         :	                slot_getsomeattrs(econtext->ecxt_scantuple,
    0.00 :	  5ad05f:       49 8b 7e 08             mov    0x8(%r14),%rdi
    0.00 :	  5ad063:       e8 f8 21 ec ff          callq  46f260 <slot_getsomeattrs>
         :
         :	        /*
         :	         * Assign simple Vars to result by direct extraction of fields from source
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
    0.00 :	  5ad068:       44 8b 43 2c             mov    0x2c(%rbx),%r8d
         :	        if (numSimpleVars > 0)
    0.00 :	  5ad06c:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5ad06f:       7e 5d                   jle    5ad0ce <ExecProject+0xce>
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad071:       80 7b 28 00             cmpb   $0x0,0x28(%rbx)
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad075:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5437
   14.81 :	  5ad079:       4c 8b 5b 30             mov    0x30(%rbx),%r11
         :	                int                *varNumbers = projInfo->pi_varNumbers;
    0.00 :	  5ad07d:       4c 8b 53 38             mov    0x38(%rbx),%r10
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad081:       4c 8b 6a 28             mov    0x28(%rdx),%r13
         :	                bool       *isnull = slot->tts_isnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5436
   14.81 :	  5ad085:       4c 8b 62 30             mov    0x30(%rdx),%r12
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad089:       0f 84 e1 01 00 00       je     5ad270 <ExecProject+0x270>
    0.00 :	  5ad08f:       4c 89 df                mov    %r11,%rdi
    0.00 :	  5ad092:       31 f6                   xor    %esi,%esi
    0.00 :	  5ad094:       0f 1f 40 00             nopl   0x0(%rax)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad098:       48 63 07                movslq (%rdi),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad09b:       48 83 c7 04             add    $0x4,%rdi
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad09f:       49 8b 0c 06             mov    (%r14,%rax,1),%rcx
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
   22.22 :	  5ad0a3:       41 8b 04 b2             mov    (%r10,%rsi,4),%eax
    0.00 :	  5ad0a7:       48 8b 51 28             mov    0x28(%rcx),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    3.70 :	  5ad0ab:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad0ae:       48 98                   cltq   
    0.00 :	  5ad0b0:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    7.41 :	  5ad0b4:       49 89 54 f5 00          mov    %rdx,0x0(%r13,%rsi,8)
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5451
    3.70 :	  5ad0b9:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  5ad0bd:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad0c1:       41 88 04 34             mov    %al,(%r12,%rsi,1)
    0.00 :	  5ad0c5:       48 83 c6 01             add    $0x1,%rsi
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad0c9:       41 39 f0                cmp    %esi,%r8d
    0.00 :	  5ad0cc:       7f ca                   jg     5ad098 <ExecProject+0x98>
         :	         * If there are any generic expressions, evaluate them.  It's possible
         :	         * that there are set-returning functions in such expressions; if so and
         :	         * we have reached the end of the set, we return the result slot, which we
         :	         * already marked empty.
         :	         */
         :	        if (projInfo->pi_targetlist)
    0.00 :	  5ad0ce:       48 8b 43 08             mov    0x8(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
    7.41 :	  5ad0d2:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad0d5:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5ad0d9:       0f 84 fc 00 00 00       je     5ad1db <ExecProject+0x1db>
         :	        {
         :	                if (!ExecTargetList(projInfo->pi_targetlist,
    0.00 :	  5ad0df:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5ad0e3:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad0e7:       4c 8b 7b 20             mov    0x20(%rbx),%r15
    0.00 :	  5ad0eb:       48 8b 52 30             mov    0x30(%rdx),%rdx
    0.00 :	  5ad0ef:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ad0f3:       48 8b 15 66 d7 60 00    mov    0x60d766(%rip),%rdx        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad0fa:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ad0fe:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
    0.00 :	  5ad102:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ad106:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5ad10a:       48 89 05 4f d7 60 00    mov    %rax,0x60d74f(%rip)        # bba860 <CurrentMemoryContext>
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ad111:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad115:       4c 8b 68 08             mov    0x8(%rax),%r13
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad119:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad11c:       0f 84 ae 00 00 00       je     5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad122:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  5ad126:       eb 15                   jmp    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad128:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad12f:       00 
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad130:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad134:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad138:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad13b:       74 63                   je     5ad1a0 <ExecProject+0x1a0>
         :	        {
         :	                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad13d:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                AttrNumber      resind = tle->resno - 1;
         :
         :	                values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad141:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad144:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad148:       0f b7 58 10             movzwl 0x10(%rax),%ebx
    0.00 :	  5ad14c:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad150:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad154:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad157:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  5ad15a:       48 0f bf db             movswq %bx,%rbx
    0.00 :	  5ad15e:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad162:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad165:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad168:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad16b:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad16f:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                          econtext,
         :	                                                                          &isnull[resind],
         :	                                                                          &itemIsDone[resind]);
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
    0.00 :	  5ad173:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ad177:       85 c0                   test   %eax,%eax
    0.00 :	  5ad179:       74 b9                   je     5ad134 <ExecProject+0x134>
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
    0.00 :	  5ad17b:       48 83 7d 90 00          cmpq   $0x0,-0x70(%rbp)
    0.00 :	  5ad180:       0f 84 fd 01 00 00       je     5ad383 <ExecProject+0x383>
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad186:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad189:       75 a5                   jne    5ad130 <ExecProject+0x130>
         :	                        {
         :	                                /* we have undone sets in the tlist, set flag */
         :	                                *isDone = ExprMultipleResult;
    0.00 :	  5ad18b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad18f:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad195:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad199:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad19c:       75 9f                   jne    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad19e:       66 90                   xchg   %ax,%ax
         :	                                haveDoneSets = true;
         :	                        }
         :	                }
         :	        }
         :
         :	        if (haveDoneSets)
    0.00 :	  5ad1a0:       80 7d c7 00             cmpb   $0x0,-0x39(%rbp)
    0.00 :	  5ad1a4:       74 2a                   je     5ad1d0 <ExecProject+0x1d0>
         :	        {
         :	                /*
         :	                 * note: can't get here unless we verified isDone != NULL
         :	                 */
         :	                if (*isDone == ExprSingleResult)
    0.00 :	  5ad1a6:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad1aa:       8b 02                   mov    (%rdx),%eax
    0.00 :	  5ad1ac:       85 c0                   test   %eax,%eax
    0.00 :	  5ad1ae:       0f 84 bc 01 00 00       je     5ad370 <ExecProject+0x370>
    0.00 :	  5ad1b4:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ad1b8:       4c 8b 6a 08             mov    0x8(%rdx),%r13
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad1bc:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad1bf:       75 6f                   jne    5ad230 <ExecProject+0x230>
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad1c1:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad1c4:       0f 84 02 01 00 00       je     5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad1ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad1d0:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad1d4:       48 89 05 85 d6 60 00    mov    %rax,0x60d685(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1db:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
         :	}
    0.00 :	  5ad1df:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad1e3:       5b                      pop    %rbx
    0.00 :	  5ad1e4:       41 5c                   pop    %r12
    0.00 :	  5ad1e6:       41 5d                   pop    %r13
    0.00 :	  5ad1e8:       41 5e                   pop    %r14
    0.00 :	  5ad1ea:       41 5f                   pop    %r15
    0.00 :	  5ad1ec:       c9                      leaveq 
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5493
    3.70 :	  5ad1ed:       e9 2e 68 00 00          jmpq   5b3a20 <ExecStoreVirtualTuple>
    0.00 :	  5ad1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
         :	                                {
         :	                                        values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad1f8:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad1fc:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad200:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad203:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad206:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad209:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad20c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad20f:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad213:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                                                  econtext,
         :	                                                                                                  &isnull[resind],
         :	                                                                                                  &itemIsDone[resind]);
         :
         :	                                        if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad217:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad21c:       0f 84 a0 00 00 00       je     5ad2c2 <ExecProject+0x2c2>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad222:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad226:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad229:       74 2c                   je     5ad257 <ExecProject+0x257>
    0.00 :	  5ad22b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        {
         :	                                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad230:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad234:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad238:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad23c:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad23f:       48 0f bf d8             movswq %ax,%rbx
    0.00 :	  5ad243:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad247:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad24c:       74 aa                   je     5ad1f8 <ExecProject+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad24e:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad252:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad255:       75 d9                   jne    5ad230 <ExecProject+0x230>
    0.00 :	  5ad257:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad25b:       8b 02                   mov    (%rdx),%eax
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad25d:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad260:       0f 85 6a ff ff ff       jne    5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad266:       eb 64                   jmp    5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad268:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad26f:       00 
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
    0.00 :	  5ad270:       4c 8b 4b 40             mov    0x40(%rbx),%r9
    0.00 :	  5ad274:       31 ff                   xor    %edi,%edi
    0.00 :	  5ad276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5ad27d:       00 00 00 
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad280:       49 63 04 bb             movslq (%r11,%rdi,4),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad284:       41 8b 0c b9             mov    (%r9,%rdi,4),%ecx
    0.00 :	  5ad288:       83 e9 01                sub    $0x1,%ecx
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad28b:       49 8b 34 06             mov    (%r14,%rax,1),%rsi
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad28f:       41 8b 04 ba             mov    (%r10,%rdi,4),%eax
    0.00 :	  5ad293:       48 63 c9                movslq %ecx,%rcx
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad296:       48 83 c7 01             add    $0x1,%rdi
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad29a:       48 8b 56 28             mov    0x28(%rsi),%rdx
    0.00 :	  5ad29e:       83 e8 01                sub    $0x1,%eax
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2a1:       41 39 f8                cmp    %edi,%r8d
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad2a4:       48 98                   cltq   
    0.00 :	  5ad2a6:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad2aa:       49 89 54 cd 00          mov    %rdx,0x0(%r13,%rcx,8)
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad2af:       48 8b 56 30             mov    0x30(%rsi),%rdx
    0.00 :	  5ad2b3:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad2b7:       41 88 04 0c             mov    %al,(%r12,%rcx,1)
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2bb:       7f c3                   jg     5ad280 <ExecProject+0x280>
    0.00 :	  5ad2bd:       e9 0c fe ff ff          jmpq   5ad0ce <ExecProject+0xce>
         :	                                        {
         :	                                                /*
         :	                                                 * Oh dear, this item is returning an empty set. Guess
         :	                                                 * we can't make a tuple after all.
         :	                                                 */
         :	                                                *isDone = ExprEndResult;
    0.00 :	  5ad2c2:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad2c6:       c7 00 02 00 00 00       movl   $0x2,(%rax)
    0.00 :	  5ad2cc:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad2d0:       48 8b 40 08             mov    0x8(%rax),%rax
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad2d4:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad2d7:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad2db:       74 6c                   je     5ad349 <ExecProject+0x349>
    0.00 :	  5ad2dd:       0f 1f 00                nopl   (%rax)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad2e0:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  5ad2e4:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	  5ad2e7:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad2eb:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad2ef:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad2f3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad2f6:       48 0f bf c0             movswq %ax,%rax
    0.00 :	  5ad2fa:       49 8d 1c 87             lea    (%r15,%rax,4),%rbx
    0.00 :	  5ad2fe:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad301:       75 35                   jne    5ad338 <ExecProject+0x338>
    0.00 :	  5ad303:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad307:       4c 8b 65 a0             mov    -0x60(%rbp),%r12
    0.00 :	  5ad30b:       4c 8d 2c c2             lea    (%rdx,%rax,8),%r13
    0.00 :	  5ad30f:       49 01 c4                add    %rax,%r12
    0.00 :	  5ad312:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        {
         :	                                                values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad318:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5ad31c:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  5ad31f:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad322:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad326:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  5ad329:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad32c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad32f:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad333:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad336:       74 e0                   je     5ad318 <ExecProject+0x318>
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad338:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5ad33c:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5ad340:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad343:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad347:       75 97                   jne    5ad2e0 <ExecProject+0x2e0>
    0.00 :	  5ad349:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  5ad34d:       48 89 15 0c d5 60 00    mov    %rdx,0x60d50c(%rip)        # bba860 <CurrentMemoryContext>
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
         :	}
    0.00 :	  5ad354:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad358:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad35c:       5b                      pop    %rbx
    0.00 :	  5ad35d:       41 5c                   pop    %r12
    0.00 :	  5ad35f:       41 5d                   pop    %r13
    0.00 :	  5ad361:       41 5e                   pop    %r14
    0.00 :	  5ad363:       41 5f                   pop    %r15
    0.00 :	  5ad365:       c9                      leaveq 
    0.00 :	  5ad366:       c3                      retq   
    0.00 :	  5ad367:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad36e:       00 00 
         :	                if (*isDone == ExprSingleResult)
         :	                {
         :	                        /*
         :	                         * all sets are done, so report that tlist expansion is complete.
         :	                         */
         :	                        *isDone = ExprEndResult;
    0.00 :	  5ad370:       c7 02 02 00 00 00       movl   $0x2,(%rdx)
    0.00 :	  5ad376:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad37a:       48 89 05 df d4 60 00    mov    %rax,0x60d4df(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad381:       eb d1                   jmp    5ad354 <ExecProject+0x354>
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
    0.00 :	  5ad383:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5ad386:       b9 f0 ad 88 00          mov    $0x88adf0,%ecx
    0.00 :	  5ad38b:       ba 9c 14 00 00          mov    $0x149c,%edx
    0.00 :	  5ad390:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5ad395:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad39a:       e8 21 d7 1c 00          callq  77aac0 <errstart>
    0.00 :	  5ad39f:       84 c0                   test   %al,%al
    0.00 :	  5ad3a1:       75 05                   jne    5ad3a8 <ExecProject+0x3a8>
    0.00 :	  5ad3a3:       e8 28 c1 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5ad3a8:       bf 30 b3 87 00          mov    $0x87b330,%edi
    0.00 :	  5ad3ad:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3af:       e8 ec f4 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5ad3b4:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  5ad3b9:       89 c3                   mov    %eax,%ebx
    0.00 :	  5ad3bb:       e8 90 f9 1c 00          callq  77cd50 <errcode>
    0.00 :	  5ad3c0:       89 de                   mov    %ebx,%esi
    0.00 :	  5ad3c2:       89 c7                   mov    %eax,%edi
    0.00 :	  5ad3c4:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3c6:       e8 15 d2 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5ad3cb:       eb d6                   jmp    5ad3a3 <ExecProject+0x3a3>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   92.31 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1292
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674c30 <PinBuffer>:
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
    0.00 :	  674c30:       55                      push   %rbp
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c31:       ba 01 00 00 00          mov    $0x1,%edx
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
    0.00 :	  674c36:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674c39:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  674c3d:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
    3.85 :	  674c41:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674c44:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  674c48:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  674c4c:       48 83 ec 20             sub    $0x20,%rsp
         :	        int                     b = buf->buf_id;
    0.00 :	  674c50:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Returns TRUE if buffer is BM_VALID, else FALSE.  This provision allows
         :	 * some callers to avoid an extra spinlock cycle.
         :	 */
         :	static bool
         :	PinBuffer(volatile BufferDesc *buf, BufferAccessStrategy strategy)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1283
   92.31 :	  674c53:       49 89 f6                mov    %rsi,%r14
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c56:       be 01 00 00 00          mov    $0x1,%esi
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c5b:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	{
         :	        int                     b = buf->buf_id;
         :	        bool            result;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674c61:       83 c7 01                add    $0x1,%edi
    0.00 :	  674c64:       e8 b7 f8 ff ff          callq  674520 <GetPrivateRefCountEntry>
    0.00 :	  674c69:       49 89 c4                mov    %rax,%r12
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674c6c:       8b 40 04                mov    0x4(%rax),%eax
    0.00 :	  674c6f:       85 c0                   test   %eax,%eax
    0.00 :	  674c71:       75 43                   jne    674cb6 <PinBuffer+0x86>
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674c73:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674c77:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674c7c:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1292
    3.85 :	  674c7f:       84 c0                   test   %al,%al
    0.00 :	  674c81:       75 6d                   jne    674cf0 <PinBuffer+0xc0>
         :	                buf->refcount++;
    0.00 :	  674c83:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674c86:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674c89:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674c8c:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674c8f:       74 7c                   je     674d0d <PinBuffer+0xdd>
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
         :	                                buf->usage_count++;
         :	                }
         :	                else
         :	                {
         :	                        if (buf->usage_count == 0)
    0.00 :	  674c91:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674c95:       66 85 c0                test   %ax,%ax
    0.00 :	  674c98:       75 06                   jne    674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count = 1;
    0.00 :	  674c9a:       66 c7 43 16 01 00       movw   $0x1,0x16(%rbx)
         :	                }
         :	                result = (buf->flags & BM_VALID) != 0;
    0.00 :	  674ca0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674ca4:       d1 e8                   shr    %eax
    0.00 :	  674ca6:       41 89 c5                mov    %eax,%r13d
    0.00 :	  674ca9:       41 83 e5 01             and    $0x1,%r13d
         :	                UnlockBufHdr(buf);
    0.00 :	  674cad:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  674cb1:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	        {
         :	                /* If we previously pinned the buffer, it must surely be valid */
         :	                result = true;
         :	        }
         :
         :	        ref->refcount++;
    0.00 :	  674cb6:       83 c0 01                add    $0x1,%eax
    0.00 :	  674cb9:       41 89 44 24 04          mov    %eax,0x4(%r12)
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674cbe:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674cc1:       48 8b 3d f8 5b 54 00    mov    0x545bf8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674cc8:       83 c6 01                add    $0x1,%esi
    0.00 :	  674ccb:       e8 d0 54 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	                                                                BufferDescriptorGetBuffer(buf));
         :	        return result;
         :	}
    0.00 :	  674cd0:       44 89 e8                mov    %r13d,%eax
    0.00 :	  674cd3:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  674cd7:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674cdc:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  674ce1:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  674ce6:       c9                      leaveq 
    0.00 :	  674ce7:       c3                      retq   
    0.00 :	  674ce8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674cef:       00 
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
    0.00 :	  674cf0:       ba 0c 05 00 00          mov    $0x50c,%edx
    0.00 :	  674cf5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674cfa:       e8 41 b3 01 00          callq  690040 <s_lock>
         :	                buf->refcount++;
    0.00 :	  674cff:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d02:       83 c0 01                add    $0x1,%eax
         :	                if (strategy == NULL)
    0.00 :	  674d05:       4d 85 f6                test   %r14,%r14
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
         :
         :	        if (ref->refcount == 0)
         :	        {
         :	                LockBufHdr(buf);
         :	                buf->refcount++;
    0.00 :	  674d08:       89 43 18                mov    %eax,0x18(%rbx)
         :	                if (strategy == NULL)
    0.00 :	  674d0b:       75 84                   jne    674c91 <PinBuffer+0x61>
         :	                {
         :	                        if (buf->usage_count < BM_MAX_USAGE_COUNT)
    0.00 :	  674d0d:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d11:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  674d15:       77 89                   ja     674ca0 <PinBuffer+0x70>
         :	                                buf->usage_count++;
    0.00 :	  674d17:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  674d1b:       83 c0 01                add    $0x1,%eax
    0.00 :	  674d1e:       66 89 43 16             mov    %ax,0x16(%rbx)
    0.00 :	  674d22:       e9 79 ff ff ff          jmpq   674ca0 <PinBuffer+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   12.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:373
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4480 <ExecStoreTuple>:
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b4480:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
   12.00 :	  5b4481:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4484:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  5b4488:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
   12.00 :	  5b448c:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b448f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  5b4493:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  5b4497:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    8.00 :	  5b449b:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b449f:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b44a2:       41 89 d4                mov    %edx,%r12d
    0.00 :	  5b44a5:       41 89 cd                mov    %ecx,%r13d
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    8.00 :	  5b44a8:       0f 85 92 00 00 00       jne    5b4540 <ExecStoreTuple+0xc0>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b44ae:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b44b2:       75 74                   jne    5b4528 <ExecStoreTuple+0xa8>
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44b4:       8b 7b 20                mov    0x20(%rbx),%edi
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    8.00 :	  5b44b7:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = shouldFree;
    0.00 :	  5b44bb:       44 88 6b 05             mov    %r13b,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b44bf:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :	        slot->tts_tuple = tuple;
    0.00 :	  5b44c3:       4c 89 73 08             mov    %r14,0x8(%rbx)
         :	        slot->tts_mintuple = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    8.00 :	  5b44c7:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b44ce:       00 
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:373
    4.00 :	  5b44cf:       44 39 e7                cmp    %r12d,%edi
         :	        slot->tts_shouldFreeMin = false;
         :	        slot->tts_tuple = tuple;
         :	        slot->tts_mintuple = NULL;
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b44d2:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44d9:       74 0d                   je     5b44e8 <ExecStoreTuple+0x68>
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b44db:       85 ff                   test   %edi,%edi
    0.00 :	  5b44dd:       75 31                   jne    5b4510 <ExecStoreTuple+0x90>
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44df:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b44e2:       44 89 63 20             mov    %r12d,0x20(%rbx)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44e6:       75 18                   jne    5b4500 <ExecStoreTuple+0x80>
         :	                        IncrBufferRefCount(buffer);
         :	        }
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
   12.00 :	  5b44e8:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b44eb:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  5b44f0:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  5b44f4:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
   12.00 :	  5b44f9:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  5b44fe:       c9                      leaveq 
   12.00 :	  5b44ff:       c3                      retq   
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
         :	                        IncrBufferRefCount(buffer);
    0.00 :	  5b4500:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5b4503:       e8 58 06 0c 00          callq  674b60 <IncrBufferRefCount>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    4.00 :	  5b4508:       eb de                   jmp    5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b450a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4510:       e8 4b 09 0c 00          callq  674e60 <ReleaseBuffer>
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4515:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b4518:       44 89 63 20             mov    %r12d,0x20(%rbx)
    0.00 :	  5b451c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4520:       74 c6                   je     5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b4522:       eb dc                   jmp    5b4500 <ExecStoreTuple+0x80>
    0.00 :	  5b4524:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4528:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b452c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b4530:       e8 7b a7 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4535:       e9 7a ff ff ff          jmpq   5b44b4 <ExecStoreTuple+0x34>
    0.00 :	  5b453a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4540:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4544:       e8 77 a7 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4549:       e9 60 ff ff ff          jmpq   5b44ae <ExecStoreTuple+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:95
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:99
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049f650 <heap_page_prune_opt>:
         :	 * OldestXmin is the cutoff XID used to distinguish whether tuples are DEAD
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
    4.17 :	  49f650:       55                      push   %rbp
    0.00 :	  49f651:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  49f654:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  49f658:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  49f65c:       41 89 f4                mov    %esi,%r12d
    0.00 :	  49f65f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  49f663:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  49f667:       49 89 fe                mov    %rdi,%r14
    0.00 :	  49f66a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  49f66e:       48 83 ec 40             sub    $0x40,%rsp
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f672:       85 f6                   test   %esi,%esi
    0.00 :	  49f674:       0f 88 fe 00 00 00       js     49f778 <heap_page_prune_opt+0x128>
    0.00 :	  49f67a:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  49f67f:       48 63 d8                movslq %eax,%rbx
    0.00 :	  49f682:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  49f686:       48 03 1d 6b 04 72 00    add    0x72046b(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        /*
         :	         * We can't write WAL in recovery mode, so there's no point trying to
         :	         * clean the page. The master will likely issue a cleaning WAL record soon
         :	         * anyway, so this is no particular loss.
         :	         */
         :	        if (RecoveryInProgress())
    0.00 :	  49f68d:       e8 2e de 02 00          callq  4cd4c0 <RecoveryInProgress>
    0.00 :	  49f692:       84 c0                   test   %al,%al
    0.00 :	  49f694:       74 1a                   je     49f6b0 <heap_page_prune_opt+0x60>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
         :	        }
         :	}
    0.00 :	  49f696:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  49f69a:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  49f69e:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  49f6a2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  49f6a6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  49f6aa:       c9                      leaveq 
    0.00 :	  49f6ab:       c3                      retq   
    0.00 :	  49f6ac:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f6b0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f6b3:       e8 28 37 04 00          callq  4e2de0 <IsCatalogRelation>
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:95
    4.17 :	  49f6b8:       84 c0                   test   %al,%al
    0.00 :	  49f6ba:       0f 84 d0 00 00 00       je     49f790 <heap_page_prune_opt+0x140>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
    0.00 :	  49f6c0:       44 8b 3d 39 b2 71 00    mov    0x71b239(%rip),%r15d        # bba900 <RecentGlobalXmin>
         :	         * Let's see if we really need pruning.
         :	         *
         :	         * Forget it if page is not hinted to contain something prunable that's
         :	         * older than OldestXmin.
         :	         */
         :	        if (!PageIsPrunable(page, OldestXmin))
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:109
   12.50 :	  49f6c7:       8b 7b 14                mov    0x14(%rbx),%edi
   75.00 :	  49f6ca:       85 ff                   test   %edi,%edi
    0.00 :	  49f6cc:       74 c8                   je     49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f6ce:       44 89 fe                mov    %r15d,%esi
    0.00 :	  49f6d1:       e8 0a 09 02 00          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  49f6d6:       84 c0                   test   %al,%al
    0.00 :	  49f6d8:       74 bc                   je     49f696 <heap_page_prune_opt+0x46>
         :	         * unlikely to be *seriously* wrong, though, since reading either pd_lower
         :	         * or pd_upper is probably atomic.  Avoiding taking a lock seems more
         :	         * important than sometimes getting a wrong answer in what is after all
         :	         * just a heuristic estimate.
         :	         */
         :	        minfree = RelationGetTargetPageFreeSpace(relation,
    0.00 :	  49f6da:       49 8b 96 98 00 00 00    mov    0x98(%r14),%rdx
    0.00 :	  49f6e1:       41 bd 33 03 00 00       mov    $0x333,%r13d
    0.00 :	  49f6e7:       48 85 d2                test   %rdx,%rdx
    0.00 :	  49f6ea:       74 2f                   je     49f71b <heap_page_prune_opt+0xcb>
    0.00 :	  49f6ec:       b9 64 00 00 00          mov    $0x64,%ecx
    0.00 :	  49f6f1:       2b 4a 04                sub    0x4(%rdx),%ecx
    0.00 :	  49f6f4:       ba 1f 85 eb 51          mov    $0x51eb851f,%edx
    0.00 :	  49f6f9:       c1 e1 0d                shl    $0xd,%ecx
    0.00 :	  49f6fc:       89 c8                   mov    %ecx,%eax
    0.00 :	  49f6fe:       c1 f9 1f                sar    $0x1f,%ecx
    0.00 :	  49f701:       f7 ea                   imul   %edx
    0.00 :	  49f703:       b8 33 03 00 00          mov    $0x333,%eax
    0.00 :	  49f708:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  49f70b:       29 ca                   sub    %ecx,%edx
    0.00 :	  49f70d:       4c 63 ea                movslq %edx,%r13
    0.00 :	  49f710:       49 81 fd 33 03 00 00    cmp    $0x333,%r13
    0.00 :	  49f717:       4c 0f 42 e8             cmovb  %rax,%r13
         :	                                                                                         HEAP_DEFAULT_FILLFACTOR);
         :	        minfree = Max(minfree, BLCKSZ / 10);
         :
         :	        if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f71b:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f71f:       75 11                   jne    49f732 <heap_page_prune_opt+0xe2>
    0.00 :	  49f721:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f724:       e8 37 56 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f729:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f72c:       0f 83 64 ff ff ff       jae    49f696 <heap_page_prune_opt+0x46>
         :	        {
         :	                /* OK, try to get exclusive buffer lock */
         :	                if (!ConditionalLockBufferForCleanup(buffer))
    0.00 :	  49f732:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f735:       e8 26 78 1d 00          callq  676f60 <ConditionalLockBufferForCleanup>
    0.00 :	  49f73a:       84 c0                   test   %al,%al
    0.00 :	  49f73c:       0f 84 54 ff ff ff       je     49f696 <heap_page_prune_opt+0x46>
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f742:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f746:       74 68                   je     49f7b0 <heap_page_prune_opt+0x160>
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f748:       4c 8d 45 d4             lea    -0x2c(%rbp),%r8
    0.00 :	  49f74c:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  49f751:       44 89 fa                mov    %r15d,%edx
    0.00 :	  49f754:       44 89 e6                mov    %r12d,%esi
    0.00 :	  49f757:       4c 89 f7                mov    %r14,%rdi
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
    0.00 :	  49f75a:       c7 45 d4 00 00 00 00    movl   $0x0,-0x2c(%rbp)
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f761:       e8 5a f4 ff ff          callq  49ebc0 <heap_page_prune>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  49f766:       31 f6                   xor    %esi,%esi
    0.00 :	  49f768:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f76b:       e8 a0 4f 1d 00          callq  674710 <LockBuffer>
    0.00 :	  49f770:       e9 21 ff ff ff          jmpq   49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f775:       0f 1f 00                nopl   (%rax)
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f778:       89 f0                   mov    %esi,%eax
    0.00 :	  49f77a:       48 8b 15 97 d9 6d 00    mov    0x6dd997(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49f781:       f7 d0                   not    %eax
    0.00 :	  49f783:       48 98                   cltq   
    0.00 :	  49f785:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  49f789:       e9 ff fe ff ff          jmpq   49f68d <heap_page_prune_opt+0x3d>
    0.00 :	  49f78e:       66 90                   xchg   %ax,%ax
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f790:       83 3d c5 99 6d 00 02    cmpl   $0x2,0x6d99c5(%rip)        # b7915c <wal_level>
    0.00 :	  49f797:       7e 0a                   jle    49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f799:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  49f79d:       80 78 6e 70             cmpb   $0x70,0x6e(%rax)
    0.00 :	  49f7a1:       74 25                   je     49f7c8 <heap_page_prune_opt+0x178>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
         :	        else
         :	                OldestXmin = RecentGlobalDataXmin;
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:99
    4.17 :	  49f7a3:       44 8b 3d 5a b1 71 00    mov    0x71b15a(%rip),%r15d        # bba904 <RecentGlobalDataXmin>
    0.00 :	  49f7aa:       e9 18 ff ff ff          jmpq   49f6c7 <heap_page_prune_opt+0x77>
    0.00 :	  49f7af:       90                      nop
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f7b0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f7b3:       e8 a8 55 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f7b8:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f7bb:       73 a9                   jae    49f766 <heap_page_prune_opt+0x116>
    0.00 :	  49f7bd:       0f 1f 00                nopl   (%rax)
    0.00 :	  49f7c0:       eb 86                   jmp    49f748 <heap_page_prune_opt+0xf8>
    0.00 :	  49f7c2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f7c8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f7cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  49f7d0:       e8 0b 36 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f7d5:       84 c0                   test   %al,%al
    0.00 :	  49f7d7:       0f 85 e3 fe ff ff       jne    49f6c0 <heap_page_prune_opt+0x70>
    0.00 :	  49f7dd:       49 8b 86 98 00 00 00    mov    0x98(%r14),%rax
    0.00 :	  49f7e4:       48 85 c0                test   %rax,%rax
    0.00 :	  49f7e7:       74 ba                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7e9:       80 78 48 00             cmpb   $0x0,0x48(%rax)
    0.00 :	  49f7ed:       74 b4                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7ef:       90                      nop
    0.00 :	  49f7f0:       e9 cb fe ff ff          jmpq   49f6c0 <heap_page_prune_opt+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   79.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:612
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:655
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068eec0 <LWLockAttemptLock>:
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec0:       55                      push   %rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:612
    4.17 :	  68eec1:       48 85 d2                test   %rdx,%rdx
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec4:       48 89 e5                mov    %rsp,%rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec7:       74 03                   je     68eecc <LWLockAttemptLock+0xc>
         :	                *potentially_spurious = false;
    0.00 :	  68eec9:       c6 02 00                movb   $0x0,(%rdx)
         :
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68eecc:       85 f6                   test   %esi,%esi
    0.00 :	  68eece:       75 28                   jne    68eef8 <LWLockAttemptLock+0x38>
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68eed0:       8b 47 04                mov    0x4(%rdi),%eax
         :	                 * First check whether the variable is free without a atomic
         :	                 * operation; it's often quite a bit cheaper for contended
         :	                 * locks. Doing so can cause a superflous shared-exclusive cacheline
         :	                 * transition, but benchmarks show that it's still worth doing so.
         :	                 */
         :	                expected = pg_atomic_read_u32(&lock->lockcount);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
    8.33 :	  68eed3:       48 8d 57 04             lea    0x4(%rdi),%rdx
         :
         :	                if (expected != 0)
    0.00 :	  68eed7:       85 c0                   test   %eax,%eax
    0.00 :	  68eed9:       75 65                   jne    68ef40 <LWLockAttemptLock+0x80>
         :
         :	        /*
         :	         * Perform cmpxchg and use the zero flag which it implicitly sets when
         :	         * equal to measure the success.
         :	         */
         :	        __asm__ __volatile__(
    0.00 :	  68eedb:       b9 00 00 00 40          mov    $0x40000000,%ecx
    0.00 :	  68eee0:       89 f0                   mov    %esi,%eax
    0.00 :	  68eee2:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
    4.17 :	  68eee6:       40 0f 94 c6             sete   %sil
    0.00 :	  68eeea:       40 84 f6                test   %sil,%sil
    0.00 :	  68eeed:       0f 94 c1                sete   %cl
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68eef0:       89 c8                   mov    %ecx,%eax
    0.00 :	  68eef2:       c9                      leaveq 
    0.00 :	  68eef3:       c3                      retq   
    0.00 :	  68eef4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                /*
         :	                 * If the caller is interested in spurious locks, do an unlocked check
         :	                 * first.  This is useful if potentially spurious results have a
         :	                 * noticeable cost.
         :	                 */
         :	                if (potentially_spurious != NULL &&
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:655
    4.17 :	  68eef8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68eefb:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68eeff:       74 0e                   je     68ef0f <LWLockAttemptLock+0x4f>
    0.00 :	  68ef01:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  68ef04:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68ef08:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef0d:       77 31                   ja     68ef40 <LWLockAttemptLock+0x80>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68ef0f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68ef14:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                 * might have to back out again if it turns out somebody else has an
         :	                 * exclusive lock.
         :	                 */
         :	                oldstate = pg_atomic_fetch_add_u32(&lock->lockcount, 1);
         :
         :	                if (oldstate >= EXCLUSIVE_LOCK)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   79.17 :	  68ef18:       31 c9                   xor    %ecx,%ecx
    0.00 :	  68ef1a:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef1f:       76 cf                   jbe    68eef0 <LWLockAttemptLock+0x30>
    0.00 :	  68ef21:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68ef26:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                         * problems exist.
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
    0.00 :	  68ef2a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68ef2d:       74 11                   je     68ef40 <LWLockAttemptLock+0x80>
         :	                                *potentially_spurious = true;
    0.00 :	  68ef2f:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  68ef34:       c6 02 01                movb   $0x1,(%rdx)
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef37:       89 c8                   mov    %ecx,%eax
    0.00 :	  68ef39:       c9                      leaveq 
    0.00 :	  68ef3a:       c3                      retq   
    0.00 :	  68ef3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
         :	                                *potentially_spurious = true;
    0.00 :	  68ef40:       b9 01 00 00 00          mov    $0x1,%ecx
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef45:       c9                      leaveq 
    0.00 :	  68ef46:       89 c8                   mov    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007989b0 <MemoryContextReset>:
         :	 * The type-specific reset routine handles the context itself, but we
         :	 * have to do the recursion for the children.
         :	 */
         :	void
         :	MemoryContextReset(MemoryContext context)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    8.33 :	  7989b0:       55                      push   %rbp
    0.00 :	  7989b1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7989b4:       53                      push   %rbx
   25.00 :	  7989b5:       48 89 fb                mov    %rdi,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    4.17 :	  7989b8:       48 83 ec 08             sub    $0x8,%rsp
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        /* save a function call in common case where there are no children */
         :	        if (context->firstchild != NULL)
    0.00 :	  7989bc:       48 83 7f 18 00          cmpq   $0x0,0x18(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   25.00 :	  7989c1:       74 05                   je     7989c8 <MemoryContextReset+0x18>
         :	                MemoryContextResetChildren(context);
    0.00 :	  7989c3:       e8 b8 ff ff ff          callq  798980 <MemoryContextResetChildren>
         :
         :	        /* Nothing to do if no pallocs since startup or last reset */
         :	        if (!context->isReset)
    0.00 :	  7989c8:       80 7b 30 00             cmpb   $0x0,0x30(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
    8.33 :	  7989cc:       75 0e                   jne    7989dc <MemoryContextReset+0x2c>
         :	        {
         :	                (*context->methods->reset) (context);
    0.00 :	  7989ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7989d2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7989d5:       ff 50 20                callq  *0x20(%rax)
         :	                context->isReset = true;
    0.00 :	  7989d8:       c6 43 30 01             movb   $0x1,0x30(%rbx)
         :	                VALGRIND_DESTROY_MEMPOOL(context);
         :	                VALGRIND_CREATE_MEMPOOL(context, 0, false);
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
    8.33 :	  7989dc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7989e0:       5b                      pop    %rbx
   20.83 :	  7989e1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   34.78 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   26.09 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005aca20 <ExecEvalConst>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   26.09 :	  5aca20:       55                      push   %rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
    8.70 :	  5aca21:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Const      *con = (Const *) exprstate->expr;
    0.00 :	  5aca24:       48 8b 77 08             mov    0x8(%rdi),%rsi
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
    4.35 :	  5aca28:       48 89 e5                mov    %rsp,%rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
    0.00 :	  5aca2b:       74 06                   je     5aca33 <ExecEvalConst+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5aca2d:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        *isNull = con->constisnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    8.70 :	  5aca33:       0f b6 46 20             movzbl 0x20(%rsi),%eax
   34.78 :	  5aca37:       88 02                   mov    %al,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    4.35 :	  5aca39:       48 8b 46 18             mov    0x18(%rsi),%rax
         :	        return con->constvalue;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
   13.04 :	  5aca3d:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.18 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   18.18 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   13.64 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   13.64 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694660 <CheckForSerializableConflictOut>:
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   18.18 :	  694660:       55                      push   %rbp
   13.64 :	  694661:       48 89 e5                mov    %rsp,%rbp
   18.18 :	  694664:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    4.55 :	  694668:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  69466c:       49 89 d4                mov    %rdx,%r12
    4.55 :	  69466f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    4.55 :	  694673:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
    4.55 :	  694677:       48 8b 15 42 a0 4e 00    mov    0x4ea042(%rip),%rdx        # b7e6c0 <MySerializableXact>
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    9.09 :	  69467e:       41 89 fd                mov    %edi,%r13d
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694681:       48 85 d2                test   %rdx,%rdx
    0.00 :	  694684:       74 13                   je     694699 <CheckForSerializableConflictOut+0x39>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694686:       49 8b 00                mov    (%r8),%rax
    0.00 :	  694689:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  69468f:       74 1f                   je     6946b0 <CheckForSerializableConflictOut+0x50>
    0.00 :	  694691:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694697:       74 17                   je     6946b0 <CheckForSerializableConflictOut+0x50>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   13.64 :	  694699:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  69469d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6946a1:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6946a5:       c9                      leaveq 
    9.09 :	  6946a6:       c3                      retq   
    0.00 :	  6946a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6946ae:       00 00 
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  6946b0:       8b 52 7c                mov    0x7c(%rdx),%edx
    0.00 :	  6946b3:       84 d2                   test   %dl,%dl
    0.00 :	  6946b5:       78 69                   js     694720 <CheckForSerializableConflictOut+0xc0>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  6946b7:       81 7e 40 0f 27 00 00    cmpl   $0x270f,0x40(%rsi)
    0.00 :	  6946be:       76 d9                   jbe    694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946c0:       48 8b 46 30             mov    0x30(%rsi),%rax
    0.00 :	  6946c4:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6946c8:       74 cf                   je     694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946ca:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  6946ce:       66 90                   xchg   %ax,%ax
    0.00 :	  6946d0:       74 c7                   je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        if (!SerializationNeededForRead(relation, snapshot))
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
    0.00 :	  6946d2:       83 e2 08                and    $0x8,%edx
    0.00 :	  6946d5:       0f 85 55 02 00 00       jne    694930 <CheckForSerializableConflictOut+0x2d0>
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946db:       8b 35 77 e0 4d 00       mov    0x4de077(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  6946e1:       89 ca                   mov    %ecx,%edx
    0.00 :	  6946e3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6946e6:       e8 35 04 11 00          callq  7a4b20 <HeapTupleSatisfiesVacuum>
         :	        switch (htsvResult)
    0.00 :	  6946eb:       83 f8 04                cmp    $0x4,%eax
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946ee:       89 c3                   mov    %eax,%ebx
         :	        switch (htsvResult)
    0.00 :	  6946f0:       76 3e                   jbe    694730 <CheckForSerializableConflictOut+0xd0>
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  6946f2:       ba e0 da 8a 00          mov    $0x8adae0,%edx
    0.00 :	  6946f7:       be 56 0f 00 00          mov    $0xf56,%esi
    0.00 :	  6946fc:       bf d3 d1 8a 00          mov    $0x8ad1d3,%edi
    0.00 :	  694701:       e8 1a 6d 0e 00          callq  77b420 <elog_start>
    0.00 :	  694706:       89 da                   mov    %ebx,%edx
    0.00 :	  694708:       be a0 d8 8a 00          mov    $0x8ad8a0,%esi
    0.00 :	  69470d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694712:       31 c0                   xor    %eax,%eax
    0.00 :	  694714:       e8 17 6b 0e 00          callq  77b230 <elog_finish>
    0.00 :	  694719:       e8 b2 4d dd ff          callq  4694d0 <abort@plt>
    0.00 :	  69471e:       66 90                   xchg   %ax,%ax
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694720:       31 ff                   xor    %edi,%edi
    0.00 :	  694722:       e8 c9 e1 ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694727:       e9 6d ff ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69472c:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
    0.00 :	  694730:       89 c0                   mov    %eax,%eax
    0.00 :	  694732:       ff 24 c5 c0 d9 8a 00    jmpq   *0x8ad9c0(,%rax,8)
    0.00 :	  694739:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        if (visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_RECENTLY_DEAD:
         :	                        if (!visible)
    0.00 :	  694740:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694743:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  694748:       0f 84 4b ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  69474e:       49 8b 7c 24 10          mov    0x10(%r12),%rdi
    0.00 :	  694753:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  694757:       89 d0                   mov    %edx,%eax
    0.00 :	  694759:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  69475e:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  694763:       0f 84 f7 00 00 00       je     694860 <CheckForSerializableConflictOut+0x200>
    0.00 :	  694769:       8b 5f 04                mov    0x4(%rdi),%ebx
         :
         :	        /*
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  69476c:       e8 0f c4 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  694771:       39 d8                   cmp    %ebx,%eax
    0.00 :	  694773:       0f 84 20 ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694779:       89 df                   mov    %ebx,%edi
    0.00 :	  69477b:       e8 70 21 e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  694780:       8b 35 d2 df 4d 00       mov    0x4ddfd2(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694786:       89 c7                   mov    %eax,%edi
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694788:       89 c3                   mov    %eax,%ebx
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  69478a:       e8 51 b8 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  69478f:       84 c0                   test   %al,%al
    0.00 :	  694791:       0f 85 02 ff ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  694797:       e8 e4 c3 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  69479c:       39 c3                   cmp    %eax,%ebx
    0.00 :	  69479e:       66 90                   xchg   %ax,%ax
    0.00 :	  6947a0:       0f 84 f3 fe ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947a6:       48 8b 3d 53 92 4e 00    mov    0x4e9253(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6947ad:       31 f6                   xor    %esi,%esi
         :	                return;
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
    0.00 :	  6947af:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947b2:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6947b9:       e8 32 b3 ff ff          callq  68faf0 <LWLockAcquire>
         :	        sxid = (SERIALIZABLEXID *)
    0.00 :	  6947be:       48 8b 3d 93 9f 4e 00    mov    0x4e9f93(%rip),%rdi        # b7e758 <SerializableXidHash>
    0.00 :	  6947c5:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6947c9:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6947cb:       31 d2                   xor    %edx,%edx
    0.00 :	  6947cd:       e8 ce fe 0e 00          callq  7846a0 <hash_search>
         :	                hash_search(SerializableXidHash, &sxidtag, HASH_FIND, NULL);
         :	        if (!sxid)
    0.00 :	  6947d2:       48 85 c0                test   %rax,%rax
    0.00 :	  6947d5:       0f 84 c5 01 00 00       je     6949a0 <CheckForSerializableConflictOut+0x340>
         :
         :	                /* It's not serializable or otherwise not important. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :	        sxact = sxid->myXact;
    0.00 :	  6947db:       4c 8b 60 08             mov    0x8(%rax),%r12
         :	        Assert(TransactionIdEquals(sxact->topXid, xid));
         :	        if (sxact == MySerializableXact || SxactIsDoomed(sxact))
    0.00 :	  6947df:       48 8b 0d da 9e 4e 00    mov    0x4e9eda(%rip),%rcx        # b7e6c0 <MySerializableXact>
    0.00 :	  6947e6:       49 39 cc                cmp    %rcx,%r12
    0.00 :	  6947e9:       0f 84 b1 00 00 00       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6947ef:       41 8b 54 24 7c          mov    0x7c(%r12),%edx
    0.00 :	  6947f4:       f6 c2 08                test   $0x8,%dl
    0.00 :	  6947f7:       0f 85 a3 00 00 00       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	         * We have a conflict out to a transaction which has a conflict out to a
         :	         * summarized transaction.  That summarized transaction must have
         :	         * committed first, and we can't tell when it committed in relation to our
         :	         * snapshot acquisition, so something needs to be canceled.
         :	         */
         :	        if (SxactHasSummaryConflictOut(sxact))
    0.00 :	  6947fd:       f6 c6 04                test   $0x4,%dh
    0.00 :	  694800:       0f 84 b2 00 00 00       je     6948b8 <CheckForSerializableConflictOut+0x258>
         :	        {
         :	                if (!SxactIsPrepared(sxact))
    0.00 :	  694806:       f6 c2 02                test   $0x2,%dl
    0.00 :	  694809:       0f 85 39 03 00 00       jne    694b48 <CheckForSerializableConflictOut+0x4e8>
         :	                {
         :	                        sxact->flags |= SXACT_FLAG_DOOMED;
    0.00 :	  69480f:       83 ca 08                or     $0x8,%edx
    0.00 :	  694812:       41 89 54 24 7c          mov    %edx,0x7c(%r12)
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694817:       48 8b 3d e2 91 4e 00    mov    0x4e91e2(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  69481e:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694825:       e8 76 ab ff ff          callq  68f3a0 <LWLockRelease>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  69482a:       e9 6a fe ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69482f:       90                      nop
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
         :	        {
         :	                case HEAPTUPLE_LIVE:
         :	                        if (visible)
    0.00 :	  694830:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694833:       0f 85 60 fe ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694839:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  69483e:       bb 02 00 00 00          mov    $0x2,%ebx
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694843:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694847:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  69484c:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694851:       0f 84 15 ff ff ff       je     69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  694857:       8b 1a                   mov    (%rdx),%ebx
    0.00 :	  694859:       e9 0e ff ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  69485e:       66 90                   xchg   %ax,%ax
         :	                        if (!visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  694860:       84 d2                   test   %dl,%dl
    0.00 :	  694862:       0f 88 01 ff ff ff       js     694769 <CheckForSerializableConflictOut+0x109>
    0.00 :	  694868:       e8 b3 28 e0 ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  69486d:       89 c3                   mov    %eax,%ebx
    0.00 :	  69486f:       90                      nop
    0.00 :	  694870:       e9 f7 fe ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
         :	                /* This write was already in our snapshot; no conflict. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :
         :	        if (RWConflictExists(MySerializableXact, sxact))
    0.00 :	  694875:       48 8b 3d 44 9e 4e 00    mov    0x4e9e44(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69487c:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  69487f:       e8 1c cc ff ff          callq  6914a0 <RWConflictExists>
    0.00 :	  694884:       84 c0                   test   %al,%al
    0.00 :	  694886:       75 18                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
    0.00 :	  694888:       48 8b 3d 31 9e 4e 00    mov    0x4e9e31(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69488f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  694892:       e8 79 c5 ff ff          callq  690e10 <FlagRWConflict>
    0.00 :	  694897:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  69489e:       00 00 
         :	        LWLockRelease(SerializableXactHashLock);
    0.00 :	  6948a0:       48 8b 3d 59 91 4e 00    mov    0x4e9159(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6948a7:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6948ae:       e8 ed aa ff ff          callq  68f3a0 <LWLockRelease>
    0.00 :	  6948b3:       e9 e1 fd ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  6948b8:       f6 41 7c 20             testb  $0x20,0x7c(%rcx)
    0.00 :	  6948bc:       74 10                   je     6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  6948be:       89 d0                   mov    %edx,%eax
    0.00 :	  6948c0:       25 01 04 00 00          and    $0x401,%eax
    0.00 :	  6948c5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  6948c8:       0f 84 e9 01 00 00       je     694ab7 <CheckForSerializableConflictOut+0x457>
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948ce:       e8 3d 2d 11 00          callq  7a7610 <GetTransactionSnapshot>
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948d3:       8b 70 08                mov    0x8(%rax),%esi
    0.00 :	  6948d6:       89 df                   mov    %ebx,%edi
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948d8:       49 89 c5                mov    %rax,%r13
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948db:       e8 00 b7 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6948e0:       84 c0                   test   %al,%al
    0.00 :	  6948e2:       75 bc                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
    0.00 :	  6948e4:       41 8b 75 0c             mov    0xc(%r13),%esi
    0.00 :	  6948e8:       89 df                   mov    %ebx,%edi
    0.00 :	  6948ea:       e8 81 b7 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  6948ef:       84 c0                   test   %al,%al
    0.00 :	  6948f1:       75 82                   jne    694875 <CheckForSerializableConflictOut+0x215>
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  6948f3:       41 8b 75 18             mov    0x18(%r13),%esi
    0.00 :	  6948f7:       85 f6                   test   %esi,%esi
    0.00 :	  6948f9:       74 a5                   je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	        {
         :	                if (xid == snap->xip[i])
    0.00 :	  6948fb:       49 8b 45 10             mov    0x10(%r13),%rax
    0.00 :	  6948ff:       31 d2                   xor    %edx,%edx
    0.00 :	  694901:       3b 18                   cmp    (%rax),%ebx
    0.00 :	  694903:       48 89 c1                mov    %rax,%rcx
    0.00 :	  694906:       75 17                   jne    69491f <CheckForSerializableConflictOut+0x2bf>
    0.00 :	  694908:       e9 68 ff ff ff          jmpq   694875 <CheckForSerializableConflictOut+0x215>
    0.00 :	  69490d:       0f 1f 00                nopl   (%rax)
    0.00 :	  694910:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  694913:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  694917:       39 c3                   cmp    %eax,%ebx
    0.00 :	  694919:       0f 84 56 ff ff ff       je     694875 <CheckForSerializableConflictOut+0x215>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  69491f:       83 c2 01                add    $0x1,%edx
    0.00 :	  694922:       39 f2                   cmp    %esi,%edx
    0.00 :	  694924:       72 ea                   jb     694910 <CheckForSerializableConflictOut+0x2b0>
    0.00 :	  694926:       e9 75 ff ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  69492b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
         :	        {
         :	                ereport(ERROR,
    0.00 :	  694930:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694933:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694938:       ba 30 0f 00 00          mov    $0xf30,%edx
    0.00 :	  69493d:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694942:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694947:       e8 74 61 0e 00          callq  77aac0 <errstart>
    0.00 :	  69494c:       84 c0                   test   %al,%al
    0.00 :	  69494e:       0f 84 c5 fd ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694954:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694959:       31 c0                   xor    %eax,%eax
    0.00 :	  69495b:       e8 40 73 0e 00          callq  77bca0 <errhint>
    0.00 :	  694960:       bf 48 d8 8a 00          mov    $0x8ad848,%edi
    0.00 :	  694965:       41 89 c5                mov    %eax,%r13d
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        ereport(ERROR,
    0.00 :	  694968:       31 c0                   xor    %eax,%eax
    0.00 :	  69496a:       e8 11 7a 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  69496f:       89 c3                   mov    %eax,%ebx
    0.00 :	  694971:       bf 48 d3 8a 00          mov    $0x8ad348,%edi
    0.00 :	  694976:       31 c0                   xor    %eax,%eax
    0.00 :	  694978:       e8 23 7f 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69497d:       bf 04 00 00 01          mov    $0x1000004,%edi
    0.00 :	  694982:       41 89 c4                mov    %eax,%r12d
    0.00 :	  694985:       e8 c6 83 0e 00          callq  77cd50 <errcode>
    0.00 :	  69498a:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  69498d:       89 c7                   mov    %eax,%edi
    0.00 :	  69498f:       89 da                   mov    %ebx,%edx
    0.00 :	  694991:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694994:       31 c0                   xor    %eax,%eax
    0.00 :	  694996:       e8 45 5c 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69499b:       e9 79 fd ff ff          jmpq   694719 <CheckForSerializableConflictOut+0xb9>
         :	        SerCommitSeqNo val;
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
    0.00 :	  6949a0:       48 8b 3d 59 90 4e 00    mov    0x4e9059(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6949a7:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6949ac:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
    0.00 :	  6949b3:       e8 38 b1 ff ff          callq  68faf0 <LWLockAcquire>
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949b8:       48 8b 05 79 9d 4e 00    mov    0x4e9d79(%rip),%rax        # b7e738 <oldSerXidControl>
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949bf:       48 8b 3d 3a 90 4e 00    mov    0x4e903a(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949c6:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949ca:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
         :	        tailXid = oldSerXidControl->tailXid;
    0.00 :	  6949d1:       44 8b 68 08             mov    0x8(%rax),%r13d
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949d5:       e8 c6 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :
         :	        if (!TransactionIdIsValid(headXid))
    0.00 :	  6949da:       45 85 e4                test   %r12d,%r12d
    0.00 :	  6949dd:       0f 84 bd fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return 0;
         :
         :	        Assert(TransactionIdIsValid(tailXid));
         :
         :	        if (TransactionIdPrecedes(xid, tailXid)
    0.00 :	  6949e3:       44 89 ee                mov    %r13d,%esi
    0.00 :	  6949e6:       89 df                   mov    %ebx,%edi
    0.00 :	  6949e8:       e8 f3 b5 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6949ed:       84 c0                   test   %al,%al
    0.00 :	  6949ef:       0f 85 ab fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6949f5:       44 89 e6                mov    %r12d,%esi
    0.00 :	  6949f8:       89 df                   mov    %ebx,%edi
    0.00 :	  6949fa:       e8 41 b6 e2 ff          callq  4c0040 <TransactionIdFollows>
    0.00 :	  6949ff:       84 c0                   test   %al,%al
    0.00 :	  694a01:       0f 85 99 fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
    0.00 :	  694a07:       89 de                   mov    %ebx,%esi
    0.00 :	  694a09:       89 da                   mov    %ebx,%edx
    0.00 :	  694a0b:       bf e0 e6 b7 00          mov    $0xb7e6e0,%edi
    0.00 :	  694a10:       c1 ee 0a                shr    $0xa,%esi
    0.00 :	  694a13:       81 e6 ff ff 1f 00       and    $0x1fffff,%esi
    0.00 :	  694a19:       e8 02 1a e3 ff          callq  4c6420 <SimpleLruReadPage_ReadOnly>
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a1e:       48 8b 15 bb 9c 4e 00    mov    0x4e9cbb(%rip),%rdx        # b7e6e0 <OldSerXidSlruCtlData>
    0.00 :	  694a25:       48 98                   cltq   
    0.00 :	  694a27:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  694a2a:       81 e1 ff 03 00 00       and    $0x3ff,%ecx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a30:       48 8b 3d c9 8f 4e 00    mov    0x4e8fc9(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a37:       48 8b 52 10             mov    0x10(%rdx),%rdx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a3b:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a42:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  694a46:       4c 8b 24 c8             mov    (%rax,%rcx,8),%r12
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a4a:       e8 51 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :	                 * got pushed out to SLRU storage for "old committed" transactions.
         :	                 */
         :	                SerCommitSeqNo conflictCommitSeqNo;
         :
         :	                conflictCommitSeqNo = OldSerXidGetMinConflictCommitSeqNo(xid);
         :	                if (conflictCommitSeqNo != 0)
    0.00 :	  694a4f:       4d 85 e4                test   %r12,%r12
    0.00 :	  694a52:       0f 84 48 fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                {
         :	                        if (conflictCommitSeqNo != InvalidSerCommitSeqNo
    0.00 :	  694a58:       49 83 fc ff             cmp    $0xffffffffffffffff,%r12
    0.00 :	  694a5c:       74 77                   je     694ad5 <CheckForSerializableConflictOut+0x475>
    0.00 :	  694a5e:       48 8b 05 5b 9c 4e 00    mov    0x4e9c5b(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694a65:       f6 40 7c 20             testb  $0x20,0x7c(%rax)
    0.00 :	  694a69:       74 06                   je     694a71 <CheckForSerializableConflictOut+0x411>
    0.00 :	  694a6b:       4c 39 60 18             cmp    %r12,0x18(%rax)
    0.00 :	  694a6f:       72 6b                   jb     694adc <CheckForSerializableConflictOut+0x47c>
         :	                                && (!SxactIsReadOnly(MySerializableXact)
         :	                                        || conflictCommitSeqNo
         :	                                        <= MySerializableXact->SeqNo.lastCommitBeforeSnapshot))
         :	                                ereport(ERROR,
    0.00 :	  694a71:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694a74:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694a79:       ba 89 0f 00 00          mov    $0xf89,%edx
    0.00 :	  694a7e:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694a83:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694a88:       e8 33 60 0e 00          callq  77aac0 <errstart>
    0.00 :	  694a8d:       84 c0                   test   %al,%al
    0.00 :	  694a8f:       0f 84 84 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694a95:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694a9a:       31 c0                   xor    %eax,%eax
    0.00 :	  694a9c:       e8 ff 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694aa1:       89 de                   mov    %ebx,%esi
    0.00 :	  694aa3:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694aa6:       bf e0 d8 8a 00          mov    $0x8ad8e0,%edi
    0.00 :	  694aab:       31 c0                   xor    %eax,%eax
    0.00 :	  694aad:       e8 ce 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694ab2:       e9 b8 fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  694ab7:       83 e2 10                and    $0x10,%edx
    0.00 :	  694aba:       0f 84 e0 fd ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ac0:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  694ac5:       48 39 41 18             cmp    %rax,0x18(%rcx)
    0.00 :	  694ac9:       0f 83 ff fd ff ff       jae    6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  694acf:       90                      nop
    0.00 :	  694ad0:       e9 cb fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ad5:       48 8b 05 e4 9b 4e 00    mov    0x4e9be4(%rip),%rax        # b7e6c0 <MySerializableXact>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on conflict out to old pivot %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        if (SxactHasSummaryConflictIn(MySerializableXact)
    0.00 :	  694adc:       f6 40 7d 02             testb  $0x2,0x7d(%rax)
    0.00 :	  694ae0:       75 0d                   jne    694aef <CheckForSerializableConflictOut+0x48f>
    0.00 :	  694ae2:       48 8d 78 30             lea    0x30(%rax),%rdi
    0.00 :	  694ae6:       e8 25 ea fe ff          callq  683510 <SHMQueueEmpty>
    0.00 :	  694aeb:       84 c0                   test   %al,%al
    0.00 :	  694aed:       75 46                   jne    694b35 <CheckForSerializableConflictOut+0x4d5>
         :	                                || !SHMQueueEmpty(&MySerializableXact->inConflicts))
         :	                                ereport(ERROR,
    0.00 :	  694aef:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694af2:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694af7:       ba 91 0f 00 00          mov    $0xf91,%edx
    0.00 :	  694afc:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b01:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b06:       e8 b5 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b0b:       84 c0                   test   %al,%al
    0.00 :	  694b0d:       0f 84 06 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b13:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b18:       31 c0                   xor    %eax,%eax
    0.00 :	  694b1a:       e8 81 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b1f:       89 de                   mov    %ebx,%esi
    0.00 :	  694b21:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b24:       bf 18 d9 8a 00          mov    $0x8ad918,%edi
    0.00 :	  694b29:       31 c0                   xor    %eax,%eax
    0.00 :	  694b2b:       e8 50 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694b30:       e9 3a fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on identification as a pivot, with conflict out to old committed transaction %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        MySerializableXact->flags |= SXACT_FLAG_SUMMARY_CONFLICT_OUT;
    0.00 :	  694b35:       48 8b 05 84 9b 4e 00    mov    0x4e9b84(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694b3c:       81 48 7c 00 04 00 00    orl    $0x400,0x7c(%rax)
    0.00 :	  694b43:       e9 58 fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694b48:       48 8b 3d b1 8e 4e 00    mov    0x4e8eb1(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  694b4f:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694b56:       e8 45 a8 ff ff          callq  68f3a0 <LWLockRelease>
         :	                        ereport(ERROR,
    0.00 :	  694b5b:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694b5e:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694b63:       ba b8 0f 00 00          mov    $0xfb8,%edx
    0.00 :	  694b68:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b6d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b72:       e8 49 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b77:       84 c0                   test   %al,%al
    0.00 :	  694b79:       0f 84 9a fb ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b7f:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b84:       31 c0                   xor    %eax,%eax
    0.00 :	  694b86:       e8 15 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b8b:       bf 80 d9 8a 00          mov    $0x8ad980,%edi
    0.00 :	  694b90:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b93:       e9 d0 fd ff ff          jmpq   694968 <CheckForSerializableConflictOut+0x308>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:77
   19.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:86
    9.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:86
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:61
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:66
    4.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:86
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005c5930 <SeqNext>:
         :	 *              This is a workhorse for ExecSeqScan
         :	 * ----------------------------------------------------------------
         :	 */
         :	static TupleTableSlot *
         :	SeqNext(SeqScanState *node)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
    4.76 :	  5c5930:       55                      push   %rbp
    0.00 :	  5c5931:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5c5934:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
   19.05 :	  5c5938:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:48
    4.76 :	  5c593c:       48 83 ec 10             sub    $0x10,%rsp
         :	        slot = node->ss_ScanTupleSlot;
         :
         :	        /*
         :	         * get the next tuple from the table
         :	         */
         :	        tuple = heap_getnext(scandesc, direction);
    0.00 :	  5c5940:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	        TupleTableSlot *slot;
         :
         :	        /*
         :	         * get information from the estate and scan state
         :	         */
         :	        scandesc = node->ss_currentScanDesc;
    0.00 :	  5c5944:       4c 8b a7 80 00 00 00    mov    0x80(%rdi),%r12
         :	        estate = node->ps.state;
         :	        direction = estate->es_direction;
         :	        slot = node->ss_ScanTupleSlot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:61
    4.76 :	  5c594b:       48 8b 9f 88 00 00 00    mov    0x88(%rdi),%rbx
         :
         :	        /*
         :	         * get the next tuple from the table
         :	         */
         :	        tuple = heap_getnext(scandesc, direction);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:66
    4.76 :	  5c5952:       8b 70 04                mov    0x4(%rax),%esi
    0.00 :	  5c5955:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5c5958:       e8 33 15 ed ff          callq  496e90 <heap_getnext>
         :	         * tuples returned by heap_getnext() are pointers onto disk pages and were
         :	         * not created with palloc() and so should not be pfree()'d.  Note also
         :	         * that ExecStoreTuple will increment the refcount of the buffer; the
         :	         * refcount will not be dropped until the tuple table slot is cleared.
         :	         */
         :	        if (tuple)
    0.00 :	  5c595d:       48 85 c0                test   %rax,%rax
    0.00 :	  5c5960:       74 26                   je     5c5988 <SeqNext+0x58>
         :	                ExecStoreTuple(tuple,   /* tuple to store */
    0.00 :	  5c5962:       41 8b 54 24 64          mov    0x64(%r12),%edx
    0.00 :	  5c5967:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5c5969:       48 89 de                mov    %rbx,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:77
   33.33 :	  5c596c:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5c596f:       e8 0c eb fe ff          callq  5b4480 <ExecStoreTuple>
         :	                                           false);      /* don't pfree this pointer */
         :	        else
         :	                ExecClearTuple(slot);
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:86
    4.76 :	  5c5974:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5c5977:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:86
   14.29 :	  5c597c:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  5c5980:       c9                      leaveq 
    9.52 :	  5c5981:       c3                      retq   
    0.00 :	  5c5982:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                           slot,        /* slot to store in */
         :	                                           scandesc->rs_cbuf,           /* buffer associated with this
         :	                                                                                                 * tuple */
         :	                                           false);      /* don't pfree this pointer */
         :	        else
         :	                ExecClearTuple(slot);
    0.00 :	  5c5988:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5c598b:       e8 80 e7 fe ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5c5990:       eb e2                   jmp    5c5974 <SeqNext+0x44>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   15.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
   15.79 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:115
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:97
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:93
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:115
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:100
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:113
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000470370 <heap_compute_data_size>:
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
    5.26 :	  470370:       55                      push   %rbp
    0.00 :	  470371:       49 89 f0                mov    %rsi,%r8
    0.00 :	  470374:       48 89 e5                mov    %rsp,%rbp
    5.26 :	  470377:       41 57                   push   %r15
    5.26 :	  470379:       41 56                   push   %r14
    0.00 :	  47037b:       49 89 d6                mov    %rdx,%r14
    0.00 :	  47037e:       41 55                   push   %r13
    0.00 :	  470380:       41 54                   push   %r12
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470382:       45 31 e4                xor    %r12d,%r12d
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470385:       53                      push   %rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470386:       31 db                   xor    %ebx,%ebx
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470388:       48 83 ec 08             sub    $0x8,%rsp
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  47038c:       44 8b 2f                mov    (%rdi),%r13d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  47038f:       4c 8b 7f 08             mov    0x8(%rdi),%r15
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:93
    5.26 :	  470393:       45 85 ed                test   %r13d,%r13d
    0.00 :	  470396:       7f 43                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470398:       e9 c3 00 00 00          jmpq   470460 <heap_compute_data_size+0xf0>
    0.00 :	  47039d:       0f 1f 00                nopl   (%rax)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  4703a0:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  4703a4:       3c 69                   cmp    $0x69,%al
    0.00 :	  4703a6:       0f 84 cc 00 00 00       je     470478 <heap_compute_data_size+0x108>
    0.00 :	  4703ac:       3c 63                   cmp    $0x63,%al
    0.00 :	  4703ae:       66 90                   xchg   %ax,%ax
    0.00 :	  4703b0:       74 10                   je     4703c2 <heap_compute_data_size+0x52>
    0.00 :	  4703b2:       3c 64                   cmp    $0x64,%al
    0.00 :	  4703b4:       0f 84 ce 00 00 00       je     470488 <heap_compute_data_size+0x118>
    0.00 :	  4703ba:       49 83 c4 01             add    $0x1,%r12
    0.00 :	  4703be:       49 83 e4 fe             and    $0xfffffffffffffffe,%r12
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:115
   10.53 :	  4703c2:       66 85 c9                test   %cx,%cx
    0.00 :	  4703c5:       7e 71                   jle    470438 <heap_compute_data_size+0xc8>
    0.00 :	  4703c7:       48 0f bf c1             movswq %cx,%rax
    0.00 :	  4703cb:       49 01 c4                add    %rax,%r12
    5.26 :	  4703ce:       48 83 c3 01             add    $0x1,%rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  4703d2:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  4703d5:       0f 8e 85 00 00 00       jle    470460 <heap_compute_data_size+0xf0>
         :	        {
         :	                Datum           val;
         :
         :	                if (isnull[i])
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:97
   10.53 :	  4703db:       41 80 3c 1e 00          cmpb   $0x0,(%r14,%rbx,1)
    0.00 :	  4703e0:       75 ec                   jne    4703ce <heap_compute_data_size+0x5e>
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
    5.26 :	  4703e2:       49 8b 14 df             mov    (%r15,%rbx,8),%rdx
         :	                Datum           val;
         :
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:100
    5.26 :	  4703e6:       49 8b 3c d8             mov    (%r8,%rbx,8),%rdi
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4703ea:       0f b7 4a 4c             movzwl 0x4c(%rdx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:102
   15.79 :	  4703ee:       66 83 f9 ff             cmp    $0xffff,%cx
    0.00 :	  4703f2:       75 ac                   jne    4703a0 <heap_compute_data_size+0x30>
   15.79 :	  4703f4:       80 7a 5d 70             cmpb   $0x70,0x5d(%rdx)
    0.00 :	  4703f8:       0f 84 c2 00 00 00       je     4704c0 <heap_compute_data_size+0x150>
    5.26 :	  4703fe:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  470401:       40 f6 c6 03             test   $0x3,%sil
    0.00 :	  470405:       75 12                   jne    470419 <heap_compute_data_size+0xa9>
    0.00 :	  470407:       8b 07                   mov    (%rdi),%eax
    0.00 :	  470409:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  47040c:       83 e8 04                sub    $0x4,%eax
    0.00 :	  47040f:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  470413:       48 83 f8 7f             cmp    $0x7f,%rax
    0.00 :	  470417:       76 b2                   jbe    4703cb <heap_compute_data_size+0x5b>
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:113
    5.26 :	  470419:       83 e6 01                and    $0x1,%esi
    0.00 :	  47041c:       74 82                   je     4703a0 <heap_compute_data_size+0x30>
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47041e:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  470421:       3c 01                   cmp    $0x1,%al
    0.00 :	  470423:       74 73                   je     470498 <heap_compute_data_size+0x128>
    0.00 :	  470425:       a8 01                   test   $0x1,%al
    0.00 :	  470427:       0f 84 a3 00 00 00       je     4704d0 <heap_compute_data_size+0x160>
    0.00 :	  47042d:       d0 e8                   shr    %al
    0.00 :	  47042f:       0f b6 c0                movzbl %al,%eax
    0.00 :	  470432:       eb 97                   jmp    4703cb <heap_compute_data_size+0x5b>
    0.00 :	  470434:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  470438:       66 83 c1 01             add    $0x1,%cx
    0.00 :	  47043c:       74 e0                   je     47041e <heap_compute_data_size+0xae>
    0.00 :	  47043e:       4c 89 45 d0             mov    %r8,-0x30(%rbp)
    0.00 :	  470442:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  470446:       e8 05 94 ff ff          callq  469850 <strlen@plt>
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47044b:       41 39 dd                cmp    %ebx,%r13d
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47044e:       4d 8d 64 04 01          lea    0x1(%r12,%rax,1),%r12
    0.00 :	  470453:       4c 8b 45 d0             mov    -0x30(%rbp),%r8
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470457:       7f 82                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470459:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                                          val);
         :	                }
         :	        }
         :
         :	        return data_length;
         :	}
    0.00 :	  470460:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  470464:       4c 89 e0                mov    %r12,%rax
    0.00 :	  470467:       5b                      pop    %rbx
    0.00 :	  470468:       41 5c                   pop    %r12
    0.00 :	  47046a:       41 5d                   pop    %r13
    0.00 :	  47046c:       41 5e                   pop    %r14
    0.00 :	  47046e:       41 5f                   pop    %r15
    0.00 :	  470470:       c9                      leaveq 
    0.00 :	  470471:       c3                      retq   
    0.00 :	  470472:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  470478:       49 83 c4 03             add    $0x3,%r12
    0.00 :	  47047c:       49 83 e4 fc             and    $0xfffffffffffffffc,%r12
    0.00 :	  470480:       e9 3d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470485:       0f 1f 00                nopl   (%rax)
    0.00 :	  470488:       49 83 c4 07             add    $0x7,%r12
    0.00 :	  47048c:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	  470490:       e9 2d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470495:       0f 1f 00                nopl   (%rax)
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  470498:       0f b6 57 01             movzbl 0x1(%rdi),%edx
    0.00 :	  47049c:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  4704a1:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  4704a4:       0f 84 21 ff ff ff       je     4703cb <heap_compute_data_size+0x5b>
    0.00 :	  4704aa:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  4704ad:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  4704b2:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4704b7:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  4704bb:       e9 0b ff ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4704c0:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  4704c3:       e9 51 ff ff ff          jmpq   470419 <heap_compute_data_size+0xa9>
    0.00 :	  4704c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4704cf:       00 
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  4704d0:       8b 07                   mov    (%rdi),%eax
    0.00 :	  4704d2:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  4704d5:       89 c0                   mov    %eax,%eax
    0.00 :	  4704d7:       e9 ef fe ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1445
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1475
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1407
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1407
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1413
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1416
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1443
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1454
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1460
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1461
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1475
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004704e0 <heap_form_minimal_tuple>:
         :	 */
         :	MinimalTuple
         :	heap_form_minimal_tuple(TupleDesc tupleDescriptor,
         :	                                                Datum *values,
         :	                                                bool *isnull)
         :	{
    0.00 :	  4704e0:       55                      push   %rbp
    0.00 :	  4704e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4704e4:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1407
    5.56 :	  4704e6:       49 89 d7                mov    %rdx,%r15
    5.56 :	  4704e9:       41 56                   push   %r14
    0.00 :	  4704eb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  4704ee:       41 55                   push   %r13
    0.00 :	  4704f0:       41 54                   push   %r12
    0.00 :	  4704f2:       53                      push   %rbx
    0.00 :	  4704f3:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	  4704f7:       48 89 75 c0             mov    %rsi,-0x40(%rbp)
         :	        MinimalTuple tuple;                     /* return tuple */
         :	        Size            len,
         :	                                data_len;
         :	        int                     hoff;
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1413
    5.56 :	  4704fb:       44 8b 2f                mov    (%rdi),%r13d
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1416
    5.56 :	  4704fe:       41 81 fd 80 06 00 00    cmp    $0x680,%r13d
    0.00 :	  470505:       0f 8f fb 00 00 00       jg     470606 <heap_form_minimal_tuple+0x126>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47050b:       45 85 ed                test   %r13d,%r13d
    0.00 :	  47050e:       7e 28                   jle    470538 <heap_form_minimal_tuple+0x58>
         :	        {
         :	                if (isnull[i])
    0.00 :	  470510:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  470513:       31 d2                   xor    %edx,%edx
    0.00 :	  470515:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	  470519:       74 15                   je     470530 <heap_form_minimal_tuple+0x50>
    0.00 :	  47051b:       e9 d0 00 00 00          jmpq   4705f0 <heap_form_minimal_tuple+0x110>
    0.00 :	  470520:       0f b6 41 01             movzbl 0x1(%rcx),%eax
    0.00 :	  470524:       48 83 c1 01             add    $0x1,%rcx
    0.00 :	  470528:       84 c0                   test   %al,%al
    0.00 :	  47052a:       0f 85 c0 00 00 00       jne    4705f0 <heap_form_minimal_tuple+0x110>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470530:       83 c2 01                add    $0x1,%edx
    0.00 :	  470533:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  470536:       7f e8                   jg     470520 <heap_form_minimal_tuple+0x40>
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
    0.00 :	  470538:       ba 0f 00 00 00          mov    $0xf,%edx
    0.00 :	  47053d:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
    0.00 :	  470541:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
    0.00 :	  470546:       48 8d 42 04             lea    0x4(%rdx),%rax
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47054a:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  47054e:       4c 89 f7                mov    %r14,%rdi
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1443
    5.56 :	  470551:       48 0f 45 d0             cmovne %rax,%rdx
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
    0.00 :	  470555:       48 8d 5a 07             lea    0x7(%rdx),%rbx
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470559:       4c 89 fa                mov    %r15,%rdx
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1445
   16.67 :	  47055c:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  470560:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470563:       e8 08 fe ff ff          callq  470370 <heap_compute_data_size>
         :
         :	        len += data_len;
    0.00 :	  470568:       48 01 c3                add    %rax,%rbx
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47056b:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1454
    5.56 :	  47056f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  470572:       e8 f9 89 32 00          callq  798f70 <palloc0>
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
    0.00 :	  470577:       89 18                   mov    %ebx,(%rax)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
    0.00 :	  470579:       49 89 c4                mov    %rax,%r12
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
         :	        HeapTupleHeaderSetNatts(tuple, numberOfAttributes);
    0.00 :	  47057c:       0f b7 40 0a             movzwl 0xa(%rax),%eax
    0.00 :	  470580:       66 25 00 f8             and    $0xf800,%ax
    0.00 :	  470584:       44 09 e8                or     %r13d,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1460
    5.56 :	  470587:       66 41 89 44 24 0a       mov    %ax,0xa(%r12)
         :	        tuple->t_hoff = hoff + MINIMAL_TUPLE_OFFSET;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1461
    5.56 :	  47058d:       0f b6 45 d0             movzbl -0x30(%rbp),%eax
    0.00 :	  470591:       83 c0 08                add    $0x8,%eax
    0.00 :	  470594:       41 88 44 24 0e          mov    %al,0xe(%r12)
         :
         :	        if (tupleDescriptor->tdhasoid)          /* else leave infomask = 0 */
    0.00 :	  470599:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
    0.00 :	  47059e:       74 08                   je     4705a8 <heap_form_minimal_tuple+0xc8>
         :	                tuple->t_infomask = HEAP_HASOID;
    0.00 :	  4705a0:       66 41 c7 44 24 0c 08    movw   $0x8,0xc(%r12)
    0.00 :	  4705a7:       00 
         :
         :	        heap_fill_tuple(tupleDescriptor,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1466
    5.56 :	  4705a8:       48 63 4d d0             movslq -0x30(%rbp),%rcx
    0.00 :	  4705ac:       31 d2                   xor    %edx,%edx
    0.00 :	  4705ae:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  4705b2:       49 8d 44 24 0f          lea    0xf(%r12),%rax
    0.00 :	  4705b7:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  4705bb:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  4705bf:       4d 8d 4c 24 0c          lea    0xc(%r12),%r9
    0.00 :	  4705c4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4705c7:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	  4705cb:       49 8d 0c 0c             lea    (%r12,%rcx,1),%rcx
    5.56 :	  4705cf:       48 89 14 24             mov    %rdx,(%rsp)
   11.11 :	  4705d3:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4705d6:       e8 85 f9 ff ff          callq  46ff60 <heap_fill_tuple>
         :	                                        data_len,
         :	                                        &tuple->t_infomask,
         :	                                        (hasnull ? tuple->t_bits : NULL));
         :
         :	        return tuple;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1475
   11.11 :	  4705db:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  4705df:       4c 89 e0                mov    %r12,%rax
    0.00 :	  4705e2:       5b                      pop    %rbx
    0.00 :	  4705e3:       41 5c                   pop    %r12
    0.00 :	  4705e5:       41 5d                   pop    %r13
    0.00 :	  4705e7:       41 5e                   pop    %r14
    0.00 :	  4705e9:       41 5f                   pop    %r15
    0.00 :	  4705eb:       c9                      leaveq 
    5.56 :	  4705ec:       c3                      retq   
    0.00 :	  4705ed:       0f 1f 00                nopl   (%rax)
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
    0.00 :	  4705f0:       41 8d 45 07             lea    0x7(%r13),%eax
    0.00 :	  4705f4:       c6 45 d7 01             movb   $0x1,-0x29(%rbp)
    0.00 :	  4705f8:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4705fb:       48 98                   cltq   
    0.00 :	  4705fd:       48 8d 50 0f             lea    0xf(%rax),%rdx
    0.00 :	  470601:       e9 3b ff ff ff          jmpq   470541 <heap_form_minimal_tuple+0x61>
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
         :	                ereport(ERROR,
    0.00 :	  470606:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  470609:       b9 90 f6 7a 00          mov    $0x7af690,%ecx
    0.00 :	  47060e:       ba 8c 05 00 00          mov    $0x58c,%edx
    0.00 :	  470613:       be f4 f5 7a 00          mov    $0x7af5f4,%esi
    0.00 :	  470618:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  47061d:       e8 9e a4 30 00          callq  77aac0 <errstart>
    0.00 :	  470622:       84 c0                   test   %al,%al
    0.00 :	  470624:       74 2b                   je     470651 <heap_form_minimal_tuple+0x171>
    0.00 :	  470626:       44 89 ee                mov    %r13d,%esi
    0.00 :	  470629:       ba 80 06 00 00          mov    $0x680,%edx
    0.00 :	  47062e:       bf e0 f7 7a 00          mov    $0x7af7e0,%edi
    0.00 :	  470633:       31 c0                   xor    %eax,%eax
    0.00 :	  470635:       e8 66 c2 30 00          callq  77c8a0 <errmsg>
    0.00 :	  47063a:       bf 05 01 04 01          mov    $0x1040105,%edi
    0.00 :	  47063f:       89 c3                   mov    %eax,%ebx
    0.00 :	  470641:       e8 0a c7 30 00          callq  77cd50 <errcode>
    0.00 :	  470646:       89 de                   mov    %ebx,%esi
    0.00 :	  470648:       89 c7                   mov    %eax,%edi
    0.00 :	  47064a:       31 c0                   xor    %eax,%eax
    0.00 :	  47064c:       e8 8f 9f 30 00          callq  77a5e0 <errfinish>
    0.00 :	  470651:       e8 7a 8e ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:63
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:56
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:57
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:65
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:65
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7f00 <InstrStartNode>:
         :	}
         :
         :	/* Entry to a plan node */
         :	void
         :	InstrStartNode(Instrumentation *instr)
         :	{
    0.00 :	  5b7f00:       55                      push   %rbp
    0.00 :	  5b7f01:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7f04:       53                      push   %rbx
    0.00 :	  5b7f05:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7f08:       48 83 ec 08             sub    $0x8,%rsp
         :	        if (instr->need_timer)
    0.00 :	  5b7f0c:       80 3f 00                cmpb   $0x0,(%rdi)
    0.00 :	  5b7f0f:       74 4a                   je     5b7f5b <InstrStartNode+0x5b>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:56
   11.11 :	  5b7f11:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7f16:       75 07                   jne    5b7f1f <InstrStartNode+0x1f>
    0.00 :	  5b7f18:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7f1d:       74 31                   je     5b7f50 <InstrStartNode+0x50>
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
    0.00 :	  5b7f1f:       ba 98 b6 88 00          mov    $0x88b698,%edx
    0.00 :	  5b7f24:       be 3b 00 00 00          mov    $0x3b,%esi
    0.00 :	  5b7f29:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7f2e:       e8 ed 34 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7f33:       be 58 b6 88 00          mov    $0x88b658,%esi
    0.00 :	  5b7f38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7f3d:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7f3f:       e8 ec 32 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7f44:       e8 87 15 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5b7f49:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	InstrStartNode(Instrumentation *instr)
         :	{
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:57
    5.56 :	  5b7f50:       48 8d 7f 08             lea    0x8(%rdi),%rdi
    0.00 :	  5b7f54:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7f56:       e8 65 16 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
         :	        }
         :
         :	        /* save buffer usage totals at node entry, if needed */
         :	        if (instr->need_bufusage)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:63
   16.67 :	  5b7f5b:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
    0.00 :	  5b7f5f:       0f 84 a9 00 00 00       je     5b800e <InstrStartNode+0x10e>
         :	                instr->bufusage_start = pgBufferUsage;
    0.00 :	  5b7f65:       48 8b 05 f4 77 60 00    mov    0x6077f4(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7f6c:       48 89 43 38             mov    %rax,0x38(%rbx)
    0.00 :	  5b7f70:       48 8b 05 f1 77 60 00    mov    0x6077f1(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7f77:       48 89 43 40             mov    %rax,0x40(%rbx)
    0.00 :	  5b7f7b:       48 8b 05 ee 77 60 00    mov    0x6077ee(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7f82:       48 89 43 48             mov    %rax,0x48(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   11.11 :	  5b7f86:       48 8b 05 eb 77 60 00    mov    0x6077eb(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7f8d:       48 89 43 50             mov    %rax,0x50(%rbx)
    0.00 :	  5b7f91:       48 8b 05 e8 77 60 00    mov    0x6077e8(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7f98:       48 89 43 58             mov    %rax,0x58(%rbx)
   16.67 :	  5b7f9c:       48 8b 05 e5 77 60 00    mov    0x6077e5(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7fa3:       48 89 43 60             mov    %rax,0x60(%rbx)
    0.00 :	  5b7fa7:       48 8b 05 e2 77 60 00    mov    0x6077e2(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7fae:       48 89 43 68             mov    %rax,0x68(%rbx)
    5.56 :	  5b7fb2:       48 8b 05 df 77 60 00    mov    0x6077df(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7fb9:       48 89 43 70             mov    %rax,0x70(%rbx)
    0.00 :	  5b7fbd:       48 8b 05 dc 77 60 00    mov    0x6077dc(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7fc4:       48 89 43 78             mov    %rax,0x78(%rbx)
    5.56 :	  5b7fc8:       48 8b 05 d9 77 60 00    mov    0x6077d9(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7fcf:       48 89 83 80 00 00 00    mov    %rax,0x80(%rbx)
    0.00 :	  5b7fd6:       48 8b 05 d3 77 60 00    mov    0x6077d3(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7fdd:       48 89 83 88 00 00 00    mov    %rax,0x88(%rbx)
    5.56 :	  5b7fe4:       48 8b 05 cd 77 60 00    mov    0x6077cd(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7feb:       48 89 83 90 00 00 00    mov    %rax,0x90(%rbx)
    0.00 :	  5b7ff2:       48 8b 05 c7 77 60 00    mov    0x6077c7(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7ff9:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
   11.11 :	  5b8000:       48 8b 05 c1 77 60 00    mov    0x6077c1(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b8007:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:65
    5.56 :	  5b800e:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5b8012:       5b                      pop    %rbx
    5.56 :	  5b8013:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   55.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1097
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1082
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbda0 <ExecScanHashBucket>:
         :	 * for the latter.
         :	 */
         :	bool
         :	ExecScanHashBucket(HashJoinState *hjstate,
         :	                                   ExprContext *econtext)
         :	{
    0.00 :	  5bbda0:       55                      push   %rbp
    0.00 :	  5bbda1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bbda4:       41 57                   push   %r15
    0.00 :	  5bbda6:       41 56                   push   %r14
    0.00 :	  5bbda8:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5bbdab:       41 55                   push   %r13
    0.00 :	  5bbdad:       41 54                   push   %r12
    0.00 :	  5bbdaf:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5bbdb2:       53                      push   %rbx
    0.00 :	  5bbdb3:       48 83 ec 08             sub    $0x8,%rsp
         :	        List       *hjclauses = hjstate->hashclauses;
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
         :	        HashJoinTuple hashTuple = hjstate->hj_CurTuple;
    0.00 :	  5bbdb7:       48 8b 87 c0 00 00 00    mov    0xc0(%rdi),%rax
         :	 */
         :	bool
         :	ExecScanHashBucket(HashJoinState *hjstate,
         :	                                   ExprContext *econtext)
         :	{
         :	        List       *hjclauses = hjstate->hashclauses;
    0.00 :	  5bbdbe:       4c 8b bf 88 00 00 00    mov    0x88(%rdi),%r15
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
    0.00 :	  5bbdc5:       48 8b 8f a8 00 00 00    mov    0xa8(%rdi),%rcx
         :	        HashJoinTuple hashTuple = hjstate->hj_CurTuple;
         :	        uint32          hashvalue = hjstate->hj_CurHashValue;
    0.00 :	  5bbdcc:       44 8b af b0 00 00 00    mov    0xb0(%rdi),%r13d
         :	         * bucket, or NULL if it's time to start scanning a new bucket.
         :	         *
         :	         * If the tuple hashed to a skew bucket then scan the skew bucket
         :	         * otherwise scan the standard hashtable bucket.
         :	         */
         :	        if (hashTuple != NULL)
    0.00 :	  5bbdd3:       48 85 c0                test   %rax,%rax
    0.00 :	  5bbdd6:       74 79                   je     5bbe51 <ExecScanHashBucket+0xb1>
         :	                hashTuple = hashTuple->next;
    0.00 :	  5bbdd8:       48 8b 18                mov    (%rax),%rbx
    0.00 :	  5bbddb:       eb 06                   jmp    5bbde3 <ExecScanHashBucket+0x43>
    0.00 :	  5bbddd:       0f 1f 00                nopl   (%rax)
         :	                                hjstate->hj_CurTuple = hashTuple;
         :	                                return true;
         :	                        }
         :	                }
         :
         :	                hashTuple = hashTuple->next;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1097
   55.56 :	  5bbde0:       48 8b 1b                mov    (%rbx),%rbx
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
         :
         :	        while (hashTuple != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1075
    5.56 :	  5bbde3:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbde6:       74 58                   je     5bbe40 <ExecScanHashBucket+0xa0>
         :	        {
         :	                if (hashTuple->hashvalue == hashvalue)
    0.00 :	  5bbde8:       44 39 6b 08             cmp    %r13d,0x8(%rbx)
    0.00 :	  5bbdec:       75 f2                   jne    5bbde0 <ExecScanHashBucket+0x40>
         :	                {
         :	                        TupleTableSlot *inntuple;
         :
         :	                        /* insert hashtable's tuple into exec slot so ExecQual sees it */
         :	                        inntuple = ExecStoreMinimalTuple(HJTUPLE_MINTUPLE(hashTuple),
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1082
   33.33 :	  5bbdee:       49 8b b4 24 d0 00 00    mov    0xd0(%r12),%rsi
    0.00 :	  5bbdf5:       00 
    0.00 :	  5bbdf6:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  5bbdfa:       31 d2                   xor    %edx,%edx
    0.00 :	  5bbdfc:       e8 df 85 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :	                                                                                         hjstate->hj_HashTupleSlot,
         :	                                                                                         false);        /* do not pfree */
         :	                        econtext->ecxt_innertuple = inntuple;
         :
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
    0.00 :	  5bbe01:       49 8b 7e 28             mov    0x28(%r14),%rdi
         :
         :	                        /* insert hashtable's tuple into exec slot so ExecQual sees it */
         :	                        inntuple = ExecStoreMinimalTuple(HJTUPLE_MINTUPLE(hashTuple),
         :	                                                                                         hjstate->hj_HashTupleSlot,
         :	                                                                                         false);        /* do not pfree */
         :	                        econtext->ecxt_innertuple = inntuple;
    0.00 :	  5bbe05:       49 89 46 10             mov    %rax,0x10(%r14)
         :
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
    0.00 :	  5bbe09:       e8 a2 cb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                        if (ExecQual(hjclauses, econtext, false))
    0.00 :	  5bbe0e:       31 d2                   xor    %edx,%edx
    0.00 :	  5bbe10:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5bbe13:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bbe16:       e8 f5 10 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5bbe1b:       84 c0                   test   %al,%al
    0.00 :	  5bbe1d:       74 c1                   je     5bbde0 <ExecScanHashBucket+0x40>
         :	                        {
         :	                                hjstate->hj_CurTuple = hashTuple;
    0.00 :	  5bbe1f:       49 89 9c 24 c0 00 00    mov    %rbx,0xc0(%r12)
    0.00 :	  5bbe26:       00 
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe27:       48 83 c4 08             add    $0x8,%rsp
         :	                        /* reset temp memory each time to avoid leaks from qual expr */
         :	                        ResetExprContext(econtext);
         :
         :	                        if (ExecQual(hjclauses, econtext, false))
         :	                        {
         :	                                hjstate->hj_CurTuple = hashTuple;
    0.00 :	  5bbe2b:       b8 01 00 00 00          mov    $0x1,%eax
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe30:       5b                      pop    %rbx
    0.00 :	  5bbe31:       41 5c                   pop    %r12
    0.00 :	  5bbe33:       41 5d                   pop    %r13
    0.00 :	  5bbe35:       41 5e                   pop    %r14
    0.00 :	  5bbe37:       41 5f                   pop    %r15
    0.00 :	  5bbe39:       c9                      leaveq 
    0.00 :	  5bbe3a:       c3                      retq   
    0.00 :	  5bbe3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbe40:       48 83 c4 08             add    $0x8,%rsp
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
         :
         :	        while (hashTuple != NULL)
    0.00 :	  5bbe44:       31 c0                   xor    %eax,%eax
         :
         :	        /*
         :	         * no match
         :	         */
         :	        return false;
         :	}
    0.00 :	  5bbe46:       5b                      pop    %rbx
    0.00 :	  5bbe47:       41 5c                   pop    %r12
    0.00 :	  5bbe49:       41 5d                   pop    %r13
    0.00 :	  5bbe4b:       41 5e                   pop    %r14
    0.00 :	  5bbe4d:       41 5f                   pop    %r15
    0.00 :	  5bbe4f:       c9                      leaveq 
    0.00 :	  5bbe50:       c3                      retq   
         :	         * If the tuple hashed to a skew bucket then scan the skew bucket
         :	         * otherwise scan the standard hashtable bucket.
         :	         */
         :	        if (hashTuple != NULL)
         :	                hashTuple = hashTuple->next;
         :	        else if (hjstate->hj_CurSkewBucketNo != INVALID_SKEW_BUCKET_NO)
    0.00 :	  5bbe51:       8b 87 b8 00 00 00       mov    0xb8(%rdi),%eax
    0.00 :	  5bbe57:       83 f8 ff                cmp    $0xffffffff,%eax
    0.00 :	  5bbe5a:       74 13                   je     5bbe6f <ExecScanHashBucket+0xcf>
         :	                hashTuple = hashtable->skewBucket[hjstate->hj_CurSkewBucketNo]->tuples;
    0.00 :	  5bbe5c:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  5bbe60:       48 98                   cltq   
    0.00 :	  5bbe62:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5bbe66:       48 8b 58 08             mov    0x8(%rax),%rbx
    0.00 :	  5bbe6a:       e9 74 ff ff ff          jmpq   5bbde3 <ExecScanHashBucket+0x43>
         :	        else
         :	                hashTuple = hashtable->buckets[hjstate->hj_CurBucketNo];
    0.00 :	  5bbe6f:       48 63 97 b4 00 00 00    movslq 0xb4(%rdi),%rdx
    0.00 :	  5bbe76:       48 8b 41 18             mov    0x18(%rcx),%rax
    0.00 :	  5bbe7a:       48 8b 1c d0             mov    (%rax,%rdx,8),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1073
    5.56 :	  5bbe7e:       e9 60 ff ff ff          jmpq   5bbde3 <ExecScanHashBucket+0x43>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   18.75 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:509
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:400
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:364
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:510
    6.25 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:510
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ac4a0 <ExecProcNode>:
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:359
    6.25 :	  5ac4a0:       0f b6 05 e9 db 60 00    movzbl 0x60dbe9(%rip),%eax        # bba090 <InterruptPending>
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4a7:       55                      push   %rbp
    0.00 :	  5ac4a8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ac4ab:       41 54                   push   %r12
    0.00 :	  5ac4ad:       49 89 fc                mov    %rdi,%r12
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b0:       84 c0                   test   %al,%al
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4b2:       53                      push   %rbx
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    6.25 :	  5ac4b3:       75 6b                   jne    5ac520 <ExecProcNode+0x80>
         :
         :	        if (node->chgParam != NULL) /* something changed */
    0.00 :	  5ac4b5:       49 83 7c 24 50 00       cmpq   $0x0,0x50(%r12)
    0.00 :	  5ac4bb:       74 08                   je     5ac4c5 <ExecProcNode+0x25>
         :	                ExecReScan(node);               /* let ReScan handle this */
    0.00 :	  5ac4bd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac4c0:       e8 db bf ff ff          callq  5a84a0 <ExecReScan>
         :
         :	        if (node->instrument)
    0.00 :	  5ac4c5:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:364
    6.25 :	  5ac4ca:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac4cd:       74 05                   je     5ac4d4 <ExecProcNode+0x34>
         :	                InstrStartNode(node->instrument);
    0.00 :	  5ac4cf:       e8 2c ba 00 00          callq  5b7f00 <InstrStartNode>
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac4d4:       41 8b 04 24             mov    (%r12),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
    6.25 :	  5ac4d8:       2d c9 00 00 00          sub    $0xc9,%eax
    0.00 :	  5ac4dd:       83 f8 21                cmp    $0x21,%eax
    0.00 :	  5ac4e0:       76 2e                   jbe    5ac510 <ExecProcNode+0x70>
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
         :	                        break;
         :
         :	                default:
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
    0.00 :	  5ac4e2:       ba e2 a3 88 00          mov    $0x88a3e2,%edx
    0.00 :	  5ac4e7:       be f8 01 00 00          mov    $0x1f8,%esi
    0.00 :	  5ac4ec:       bf 75 a0 88 00          mov    $0x88a075,%edi
    0.00 :	  5ac4f1:       e8 2a ef 1c 00          callq  77b420 <elog_start>
    0.00 :	  5ac4f6:       41 8b 14 24             mov    (%r12),%edx
    0.00 :	  5ac4fa:       be 5c 17 87 00          mov    $0x87175c,%esi
    0.00 :	  5ac4ff:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ac504:       31 c0                   xor    %eax,%eax
    0.00 :	  5ac506:       e8 25 ed 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5ac50b:       e8 c0 cf eb ff          callq  4694d0 <abort@plt>
         :	                ExecReScan(node);               /* let ReScan handle this */
         :
         :	        if (node->instrument)
         :	                InstrStartNode(node->instrument);
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac510:       89 c0                   mov    %eax,%eax
    0.00 :	  5ac512:       ff 24 c5 a0 a1 88 00    jmpq   *0x88a1a0(,%rax,8)
    0.00 :	  5ac519:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac520:       e8 7b fd 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5ac525:       eb 8e                   jmp    5ac4b5 <ExecProcNode+0x15>
    0.00 :	  5ac527:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ac52e:       00 00 
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
         :	                        break;
         :
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
    0.00 :	  5ac530:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac533:       e8 a8 3c 01 00          callq  5c01e0 <ExecLimit>
    0.00 :	  5ac538:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5ac53b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:509
   12.50 :	  5ac540:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac545:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac548:       74 20                   je     5ac56a <ExecProcNode+0xca>
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac54a:       48 85 db                test   %rbx,%rbx
    0.00 :	  5ac54d:       0f 84 ed 01 00 00       je     5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac553:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:510
    6.25 :	  5ac557:       0f 85 e3 01 00 00       jne    5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac55d:       f2 0f 10 05 f3 2b 20    movsd  0x202bf3(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5ac564:       00 
    6.25 :	  5ac565:       e8 66 b6 00 00          callq  5b7bd0 <InstrStopNode>
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   18.75 :	  5ac56a:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5ac56d:       5b                      pop    %rbx
    0.00 :	  5ac56e:       41 5c                   pop    %r12
    0.00 :	  5ac570:       c9                      leaveq 
   18.75 :	  5ac571:       c3                      retq   
    0.00 :	  5ac572:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
         :	                        break;
         :
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
    0.00 :	  5ac578:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac57b:       e8 a0 40 01 00          callq  5c0620 <ExecLockRows>
    0.00 :	  5ac580:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac583:       eb bb                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac585:       0f 1f 00                nopl   (%rax)
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
         :	                        break;
         :
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
    0.00 :	  5ac588:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac58b:       e8 60 98 01 00          callq  5c5df0 <ExecSetOp>
    0.00 :	  5ac590:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac593:       eb ab                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac595:       0f 1f 00                nopl   (%rax)
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
         :	                        break;
         :
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
    0.00 :	  5ac598:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac59b:       e8 d0 02 01 00          callq  5bc870 <ExecHash>
    0.00 :	  5ac5a0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5a3:       eb 9b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5a5:       0f 1f 00                nopl   (%rax)
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
         :	                        break;
         :
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
    0.00 :	  5ac5a8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5ab:       e8 20 a0 01 00          callq  5c65d0 <ExecUnique>
    0.00 :	  5ac5b0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5b3:       eb 8b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5b5:       0f 1f 00                nopl   (%rax)
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
         :	                        break;
         :
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
    0.00 :	  5ac5b8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5bb:       e8 90 00 02 00          callq  5cc650 <ExecWindowAgg>
    0.00 :	  5ac5c0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5c3:       e9 78 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ac5cf:       00 
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
         :	                        break;
         :
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
    0.00 :	  5ac5d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5d3:       e8 a8 d7 00 00          callq  5b9d80 <ExecAgg>
    0.00 :	  5ac5d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5db:       e9 60 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
         :	                        break;
         :
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
    0.00 :	  5ac5e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5e3:       e8 88 ab 01 00          callq  5c7170 <ExecGroup>
    0.00 :	  5ac5e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5eb:       e9 50 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
         :	                        break;
         :
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
    0.00 :	  5ac5f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5f3:       e8 48 9d 01 00          callq  5c6340 <ExecSort>
    0.00 :	  5ac5f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5fb:       e9 40 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * materialization nodes
         :	                         */
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
    0.00 :	  5ac600:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac603:       e8 38 47 01 00          callq  5c0d40 <ExecMaterial>
    0.00 :	  5ac608:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac60b:       e9 30 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
         :	                        break;
         :
         :	                case T_HashJoinState:
         :	                        result = ExecHashJoin((HashJoinState *) node);
    0.00 :	  5ac610:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac613:       e8 88 14 01 00          callq  5bdaa0 <ExecHashJoin>
    0.00 :	  5ac618:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac61b:       e9 20 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
         :	                        break;
         :
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
    0.00 :	  5ac620:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac623:       e8 08 5a 01 00          callq  5c2030 <ExecMergeJoin>
    0.00 :	  5ac628:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac62b:       e9 10 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * join nodes
         :	                         */
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
    0.00 :	  5ac630:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac633:       e8 08 7c 01 00          callq  5c4240 <ExecNestLoop>
    0.00 :	  5ac638:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac63b:       e9 00 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
         :	                        break;
         :
         :	                case T_ForeignScanState:
         :	                        result = ExecForeignScan((ForeignScanState *) node);
    0.00 :	  5ac640:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac643:       e8 f8 d2 01 00          callq  5c9940 <ExecForeignScan>
    0.00 :	  5ac648:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac64b:       e9 f0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
         :	                        break;
         :
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
    0.00 :	  5ac650:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac653:       e8 f8 a8 01 00          callq  5c6f50 <ExecWorkTableScan>
    0.00 :	  5ac658:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac65b:       e9 e0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
         :	                        break;
         :
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
    0.00 :	  5ac660:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac663:       e8 28 a6 01 00          callq  5c6c90 <ExecCteScan>
    0.00 :	  5ac668:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac66b:       e9 d0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
         :	                        break;
         :
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
    0.00 :	  5ac670:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac673:       e8 18 a2 01 00          callq  5c6890 <ExecValuesScan>
    0.00 :	  5ac678:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac67b:       e9 c0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
         :	                        break;
         :
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
    0.00 :	  5ac680:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac683:       e8 28 86 01 00          callq  5c4cb0 <ExecFunctionScan>
    0.00 :	  5ac688:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac68b:       e9 b0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
         :	                        break;
         :
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
    0.00 :	  5ac690:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac693:       e8 d8 c7 01 00          callq  5c8e70 <ExecSubqueryScan>
    0.00 :	  5ac698:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac69b:       e9 a0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
         :	                        break;
         :
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
    0.00 :	  5ac6a0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6a3:       e8 58 ca 01 00          callq  5c9100 <ExecTidScan>
    0.00 :	  5ac6a8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6ab:       e9 90 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        break;
         :
         :	                        /* BitmapIndexScanState does not yield tuples */
         :
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
    0.00 :	  5ac6b0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6b3:       e8 68 e8 00 00          callq  5baf20 <ExecBitmapHeapScan>
    0.00 :	  5ac6b8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6bb:       e9 80 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
         :	                        break;
         :
         :	                case T_IndexOnlyScanState:
         :	                        result = ExecIndexOnlyScan((IndexOnlyScanState *) node);
    0.00 :	  5ac6c0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6c3:       e8 b8 33 01 00          callq  5bfa80 <ExecIndexOnlyScan>
    0.00 :	  5ac6c8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6cb:       e9 70 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
         :	                        break;
         :
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
    0.00 :	  5ac6d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6d3:       e8 08 2e 01 00          callq  5bf4e0 <ExecIndexScan>
    0.00 :	  5ac6d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6db:       e9 60 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * scan nodes
         :	                         */
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:400
   12.50 :	  5ac6e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6e3:       e8 28 92 01 00          callq  5c5910 <ExecSeqScan>
    0.00 :	  5ac6e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6eb:       e9 50 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
         :	                        break;
         :
         :	                case T_RecursiveUnionState:
         :	                        result = ExecRecursiveUnion((RecursiveUnionState *) node);
    0.00 :	  5ac6f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6f3:       e8 d8 8b 01 00          callq  5c52d0 <ExecRecursiveUnion>
    0.00 :	  5ac6f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6fb:       e9 40 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
         :	                        break;
         :
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
    0.00 :	  5ac700:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac703:       e8 c8 48 01 00          callq  5c0fd0 <ExecMergeAppend>
    0.00 :	  5ac708:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac70b:       e9 30 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
         :	                        break;
         :
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
    0.00 :	  5ac710:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac713:       e8 68 ba 00 00          callq  5b8180 <ExecAppend>
    0.00 :	  5ac718:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac71b:       e9 20 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
         :	                        break;
         :
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
    0.00 :	  5ac720:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac723:       e8 d8 6a 01 00          callq  5c3200 <ExecModifyTable>
    0.00 :	  5ac728:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac72b:       e9 10 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	        {
         :	                        /*
         :	                         * control nodes
         :	                         */
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
    0.00 :	  5ac730:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac733:       e8 08 8f 01 00          callq  5c5640 <ExecResult>
    0.00 :	  5ac738:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac73b:       e9 00 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac740:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5ac744:       e9 1c fe ff ff          jmpq   5ac565 <ExecProcNode+0xc5>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:989
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:337
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:936
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:999
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:1001
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007986d0 <AllocSetFree>:
         :	 * AllocSetFree
         :	 *              Frees allocated memory; memory is removed from the set.
         :	 */
         :	static void
         :	AllocSetFree(MemoryContext context, void *pointer)
         :	{
    0.00 :	  7986d0:       55                      push   %rbp
    0.00 :	  7986d1:       48 89 f9                mov    %rdi,%rcx
    0.00 :	  7986d4:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:936
    6.67 :	  7986d7:       53                      push   %rbx
         :	        AllocSet        set = (AllocSet) context;
         :	        AllocChunk      chunk = AllocPointerGetChunk(pointer);
    0.00 :	  7986d8:       48 8d 5e f0             lea    -0x10(%rsi),%rbx
         :	 * AllocSetFree
         :	 *              Frees allocated memory; memory is removed from the set.
         :	 */
         :	static void
         :	AllocSetFree(MemoryContext context, void *pointer)
         :	{
    0.00 :	  7986dc:       48 83 ec 08             sub    $0x8,%rsp
         :	                if (!sentinel_ok(pointer, chunk->requested_size))
         :	                        elog(WARNING, "detected write past chunk end in %s %p",
         :	                                 set->header.name, chunk);
         :	#endif
         :
         :	        if (chunk->size > set->allocChunkLimit)
    0.00 :	  7986e0:       48 8b 46 f8             mov    -0x8(%rsi),%rax
    0.00 :	  7986e4:       48 3b 87 b0 00 00 00    cmp    0xb0(%rdi),%rax
    0.00 :	  7986eb:       76 63                   jbe    798750 <AllocSetFree+0x80>
         :	        {
         :	                /*
         :	                 * Big chunks are certain to have been allocated as single-chunk
         :	                 * blocks.  Find the containing block and return it to malloc().
         :	                 */
         :	                AllocBlock      block = set->blocks;
    0.00 :	  7986ed:       48 8b 7f 38             mov    0x38(%rdi),%rdi
         :	                AllocBlock      prevblock = NULL;
         :
         :	                while (block != NULL)
    0.00 :	  7986f1:       48 85 ff                test   %rdi,%rdi
    0.00 :	  7986f4:       74 2c                   je     798722 <AllocSetFree+0x52>
         :	                {
         :	                        if (chunk == (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ))
    0.00 :	  7986f6:       48 8d 47 20             lea    0x20(%rdi),%rax
    0.00 :	  7986fa:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  7986fd:       75 17                   jne    798716 <AllocSetFree+0x46>
    0.00 :	  7986ff:       90                      nop
    0.00 :	  798700:       e9 be 00 00 00          jmpq   7987c3 <AllocSetFree+0xf3>
    0.00 :	  798705:       0f 1f 00                nopl   (%rax)
    0.00 :	  798708:       48 8d 47 20             lea    0x20(%rdi),%rax
    0.00 :	  79870c:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  79870f:       90                      nop
    0.00 :	  798710:       0f 84 8a 00 00 00       je     7987a0 <AllocSetFree+0xd0>
         :	                                break;
    0.00 :	  798716:       48 89 fa                mov    %rdi,%rdx
         :	                        prevblock = block;
         :	                        block = block->next;
    0.00 :	  798719:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	                 * blocks.  Find the containing block and return it to malloc().
         :	                 */
         :	                AllocBlock      block = set->blocks;
         :	                AllocBlock      prevblock = NULL;
         :
         :	                while (block != NULL)
    0.00 :	  79871d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  798720:       75 e6                   jne    798708 <AllocSetFree+0x38>
         :	                                break;
         :	                        prevblock = block;
         :	                        block = block->next;
         :	                }
         :	                if (block == NULL)
         :	                        elog(ERROR, "could not find block containing chunk %p", chunk);
    0.00 :	  798722:       ba 70 1e 8e 00          mov    $0x8e1e70,%edx
    0.00 :	  798727:       be c9 03 00 00          mov    $0x3c9,%esi
    0.00 :	  79872c:       bf 6d 1d 8e 00          mov    $0x8e1d6d,%edi
    0.00 :	  798731:       e8 ea 2c fe ff          callq  77b420 <elog_start>
    0.00 :	  798736:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798739:       be 08 1e 8e 00          mov    $0x8e1e08,%esi
    0.00 :	  79873e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798743:       31 c0                   xor    %eax,%eax
    0.00 :	  798745:       e8 e6 2a fe ff          callq  77b230 <elog_finish>
    0.00 :	  79874a:       e8 81 0d cd ff          callq  4694d0 <abort@plt>
    0.00 :	  79874f:       90                      nop
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  798750:       31 d2                   xor    %edx,%edx
    0.00 :	  798752:       48 83 f8 08             cmp    $0x8,%rax
    0.00 :	  798756:       77 20                   ja     798778 <AllocSetFree+0xa8>
         :	        else
         :	        {
         :	                /* Normal case, put the chunk into appropriate freelist */
         :	                int                     fidx = AllocSetFreeIndex(chunk->size);
         :
         :	                chunk->aset = (void *) set->freelist[fidx];
    0.00 :	  798758:       48 63 c2                movslq %edx,%rax
    0.00 :	  79875b:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  79875f:       48 8b 14 c1             mov    (%rcx,%rax,8),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:989
   40.00 :	  798763:       48 89 56 f0             mov    %rdx,-0x10(%rsi)
         :
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                /* Reset requested_size to 0 in chunks that are on freelist */
         :	                chunk->requested_size = 0;
         :	#endif
         :	                set->freelist[fidx] = chunk;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:999
    6.67 :	  798767:       48 89 1c c1             mov    %rbx,(%rcx,%rax,8)
         :	        }
         :	}
    0.00 :	  79876b:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  79876f:       5b                      pop    %rbx
    0.00 :	  798770:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:1001
    6.67 :	  798771:       c3                      retq   
    0.00 :	  798772:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798778:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  79877c:       48 89 c2                mov    %rax,%rdx
    0.00 :	  79877f:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  798783:       89 d0                   mov    %edx,%eax
    0.00 :	  798785:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798788:       85 c0                   test   %eax,%eax
    0.00 :	  79878a:       74 2c                   je     7987b8 <AllocSetFree+0xe8>
    0.00 :	  79878c:       89 c0                   mov    %eax,%eax
    0.00 :	  79878e:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  798795:       8d 50 08                lea    0x8(%rax),%edx
    0.00 :	  798798:       eb be                   jmp    798758 <AllocSetFree+0x88>
    0.00 :	  79879a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /* OK, remove block from aset's list and free it */
         :	                if (prevblock == NULL)
         :	                        set->blocks = block->next;
         :	                else
         :	                        prevblock->next = block->next;
    0.00 :	  7987a0:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  7987a4:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                /* Reset requested_size to 0 in chunks that are on freelist */
         :	                chunk->requested_size = 0;
         :	#endif
         :	                set->freelist[fidx] = chunk;
         :	        }
         :	}
    0.00 :	  7987a8:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7987ac:       5b                      pop    %rbx
    0.00 :	  7987ad:       c9                      leaveq 
         :	                else
         :	                        prevblock->next = block->next;
         :	#ifdef CLOBBER_FREED_MEMORY
         :	                wipe_mem(block, block->freeptr - ((char *) block));
         :	#endif
         :	                free(block);
    0.00 :	  7987ae:       e9 6d 10 cd ff          jmpq   469820 <free@plt>
    0.00 :	  7987b3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7987b8:       89 d0                   mov    %edx,%eax
    0.00 :	  7987ba:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:337
   40.00 :	  7987c1:       eb 95                   jmp    798758 <AllocSetFree+0x88>
         :	                Assert(block->freeptr == ((char *) block) +
         :	                           (chunk->size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ));
         :
         :	                /* OK, remove block from aset's list and free it */
         :	                if (prevblock == NULL)
         :	                        set->blocks = block->next;
    0.00 :	  7987c3:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  7987c7:       48 89 41 38             mov    %rax,0x38(%rcx)
    0.00 :	  7987cb:       eb db                   jmp    7987a8 <AllocSetFree+0xd8>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   21.43 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000069b9e0 <check_stack_depth>:
         :	 * overflow as an unrecoverable SIGSEGV, so we want to error out ourselves
         :	 * before hitting the hardware limit.
         :	 */
         :	void
         :	check_stack_depth(void)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   21.43 :	  69b9e0:       55                      push   %rbp
    0.00 :	  69b9e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  69b9e4:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
   14.29 :	  69b9e8:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  69b9ec:       48 83 ec 20             sub    $0x20,%rsp
         :	        long            stack_depth;
         :
         :	        /*
         :	         * Compute distance from reference point to my local variables
         :	         */
         :	        stack_depth = (long) (stack_base_ptr - &stack_top_loc);
    0.00 :	  69b9f0:       48 8b 0d f9 2d 4e 00    mov    0x4e2df9(%rip),%rcx        # b7e7f0 <stack_base_ptr>
    0.00 :	  69b9f7:       48 8d 45 ef             lea    -0x11(%rbp),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
   14.29 :	  69b9fb:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  69b9fe:       48 29 c2                sub    %rax,%rdx
    0.00 :	  69ba01:       48 89 d0                mov    %rdx,%rax
         :	         * The test on stack_base_ptr prevents us from erroring out if called
         :	         * during process setup or in a non-backend process.  Logically it should
         :	         * be done first, but putting it here avoids wasting cycles during normal
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
    0.00 :	  69ba04:       48 c1 fa 3f             sar    $0x3f,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    7.14 :	  69ba08:       48 31 d0                xor    %rdx,%rax
   21.43 :	  69ba0b:       48 29 d0                sub    %rdx,%rax
    0.00 :	  69ba0e:       48 39 05 a3 cd 4c 00    cmp    %rax,0x4ccda3(%rip)        # b687b8 <max_stack_depth_bytes>
    0.00 :	  69ba15:       7d 05                   jge    69ba1c <check_stack_depth+0x3c>
    0.00 :	  69ba17:       48 85 c9                test   %rcx,%rcx
    0.00 :	  69ba1a:       75 0a                   jne    69ba26 <check_stack_depth+0x46>
         :	                                 errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), "
         :	                          "after ensuring the platform's stack depth limit is adequate.",
         :	                                                 max_stack_depth)));
         :	        }
         :	#endif   /* IA64 */
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    7.14 :	  69ba1c:       48 8b 5d f0             mov    -0x10(%rbp),%rbx
    7.14 :	  69ba20:       4c 8b 65 f8             mov    -0x8(%rbp),%r12
    0.00 :	  69ba24:       c9                      leaveq 
    7.14 :	  69ba25:       c3                      retq   
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
         :	                stack_base_ptr != NULL)
         :	        {
         :	                ereport(ERROR,
    0.00 :	  69ba26:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  69ba29:       b9 e0 00 8b 00          mov    $0x8b00e0,%ecx
    0.00 :	  69ba2e:       ba 19 0c 00 00          mov    $0xc19,%edx
    0.00 :	  69ba33:       be d0 e8 8a 00          mov    $0x8ae8d0,%esi
    0.00 :	  69ba38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  69ba3d:       e8 7e f0 0d 00          callq  77aac0 <errstart>
    0.00 :	  69ba42:       84 c0                   test   %al,%al
    0.00 :	  69ba44:       75 05                   jne    69ba4b <check_stack_depth+0x6b>
    0.00 :	  69ba46:       e8 85 da dc ff          callq  4694d0 <abort@plt>
    0.00 :	  69ba4b:       8b 35 5b cd 4c 00       mov    0x4ccd5b(%rip),%esi        # b687ac <max_stack_depth>
    0.00 :	  69ba51:       bf 60 f0 8a 00          mov    $0x8af060,%edi
    0.00 :	  69ba56:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba58:       e8 43 02 0e 00          callq  77bca0 <errhint>
    0.00 :	  69ba5d:       bf 00 ea 8a 00          mov    $0x8aea00,%edi
    0.00 :	  69ba62:       41 89 c4                mov    %eax,%r12d
    0.00 :	  69ba65:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba67:       e8 34 0e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69ba6c:       bf 05 01 00 01          mov    $0x1000105,%edi
    0.00 :	  69ba71:       89 c3                   mov    %eax,%ebx
    0.00 :	  69ba73:       e8 d8 12 0e 00          callq  77cd50 <errcode>
    0.00 :	  69ba78:       44 89 e2                mov    %r12d,%edx
    0.00 :	  69ba7b:       89 c7                   mov    %eax,%edi
    0.00 :	  69ba7d:       89 de                   mov    %ebx,%esi
    0.00 :	  69ba7f:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba81:       e8 5a eb 0d 00          callq  77a5e0 <errfinish>
    0.00 :	  69ba86:       eb be                   jmp    69ba46 <check_stack_depth+0x66>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:85
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:82
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:112
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:76
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:76
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:96
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:98
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:112
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:112
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c4350 <ArrayGetNItems>:
         :	 * arithmetic, but that is nearly all platforms these days, and doing check
         :	 * divides for those that don't seems way too expensive.
         :	 */
         :	int
         :	ArrayGetNItems(int ndim, const int *dims)
         :	{
    0.00 :	  6c4350:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:76
    7.69 :	  6c4351:       48 89 e5                mov    %rsp,%rbp
    7.69 :	  6c4354:       53                      push   %rbx
    0.00 :	  6c4355:       48 83 ec 08             sub    $0x8,%rsp
         :	        int32           ret;
         :	        int                     i;
         :
         :	#define MaxArraySize ((Size) (MaxAllocSize / sizeof(Datum)))
         :
         :	        if (ndim <= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:82
   15.38 :	  6c4359:       85 ff                   test   %edi,%edi
    0.00 :	  6c435b:       7e 43                   jle    6c43a0 <ArrayGetNItems+0x50>
    0.00 :	  6c435d:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  6c4363:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6c4365:       0f 1f 00                nopl   (%rax)
         :	        for (i = 0; i < ndim; i++)
         :	        {
         :	                int64           prod;
         :
         :	                /* A negative dimension implies that UB-LB overflowed ... */
         :	                if (dims[i] < 0)
    0.00 :	  6c4368:       8b 16                   mov    (%rsi),%edx
    0.00 :	  6c436a:       85 d2                   test   %edx,%edx
    0.00 :	  6c436c:       78 3f                   js     6c43ad <ArrayGetNItems+0x5d>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :
         :	                prod = (int64) ret *(int64) dims[i];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:96
    7.69 :	  6c436e:       49 63 c0                movslq %r8d,%rax
    0.00 :	  6c4371:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6c4374:       48 0f af c2             imul   %rdx,%rax
         :
         :	                ret = (int32) prod;
         :	                if ((int64) ret != prod)
    0.00 :	  6c4378:       48 63 d0                movslq %eax,%rdx
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :
         :	                prod = (int64) ret *(int64) dims[i];
         :
         :	                ret = (int32) prod;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:98
    7.69 :	  6c437b:       41 89 c0                mov    %eax,%r8d
         :	                if ((int64) ret != prod)
    0.00 :	  6c437e:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  6c4381:       75 4f                   jne    6c43d2 <ArrayGetNItems+0x82>
         :	#define MaxArraySize ((Size) (MaxAllocSize / sizeof(Datum)))
         :
         :	        if (ndim <= 0)
         :	                return 0;
         :	        ret = 1;
         :	        for (i = 0; i < ndim; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:85
   23.08 :	  6c4383:       83 c1 01                add    $0x1,%ecx
    0.00 :	  6c4386:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	  6c438a:       39 cf                   cmp    %ecx,%edi
    0.00 :	  6c438c:       7f da                   jg     6c4368 <ArrayGetNItems+0x18>
         :	                                        (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :	        }
         :	        Assert(ret >= 0);
         :	        if ((Size) ret > MaxArraySize)
    0.00 :	  6c438e:       81 fa ff ff ff 07       cmp    $0x7ffffff,%edx
    0.00 :	  6c4394:       77 75                   ja     6c440b <ArrayGetNItems+0xbb>
         :	                ereport(ERROR,
         :	                                (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
         :	                                 errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                (int) MaxArraySize)));
         :	        return (int) ret;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/arrayutils.c:112
    7.69 :	  6c4396:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  6c439a:       44 89 c0                mov    %r8d,%eax
    7.69 :	  6c439d:       5b                      pop    %rbx
    0.00 :	  6c439e:       c9                      leaveq 
   15.38 :	  6c439f:       c3                      retq   
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :	        }
         :	        Assert(ret >= 0);
         :	        if ((Size) ret > MaxArraySize)
         :	                ereport(ERROR,
    0.00 :	  6c43a0:       45 31 c0                xor    %r8d,%r8d
         :	                                (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),
         :	                                 errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                (int) MaxArraySize)));
         :	        return (int) ret;
         :	}
    0.00 :	  6c43a3:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  6c43a7:       44 89 c0                mov    %r8d,%eax
    0.00 :	  6c43aa:       5b                      pop    %rbx
    0.00 :	  6c43ab:       c9                      leaveq 
    0.00 :	  6c43ac:       c3                      retq   
         :	        {
         :	                int64           prod;
         :
         :	                /* A negative dimension implies that UB-LB overflowed ... */
         :	                if (dims[i] < 0)
         :	                        ereport(ERROR,
    0.00 :	  6c43ad:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6c43b0:       b9 b7 8d 8b 00          mov    $0x8b8db7,%ecx
    0.00 :	  6c43b5:       ba 5e 00 00 00          mov    $0x5e,%edx
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :	        }
         :	        Assert(ret >= 0);
         :	        if ((Size) ret > MaxArraySize)
         :	                ereport(ERROR,
    0.00 :	  6c43ba:       be 0c 8d 8b 00          mov    $0x8b8d0c,%esi
    0.00 :	  6c43bf:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6c43c4:       e8 f7 66 0b 00          callq  77aac0 <errstart>
    0.00 :	  6c43c9:       84 c0                   test   %al,%al
    0.00 :	  6c43cb:       75 14                   jne    6c43e1 <ArrayGetNItems+0x91>
    0.00 :	  6c43cd:       e8 fe 50 da ff          callq  4694d0 <abort@plt>
         :
         :	                prod = (int64) ret *(int64) dims[i];
         :
         :	                ret = (int32) prod;
         :	                if ((int64) ret != prod)
         :	                        ereport(ERROR,
    0.00 :	  6c43d2:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6c43d5:       b9 b7 8d 8b 00          mov    $0x8b8db7,%ecx
    0.00 :	  6c43da:       ba 67 00 00 00          mov    $0x67,%edx
    0.00 :	  6c43df:       eb d9                   jmp    6c43ba <ArrayGetNItems+0x6a>
         :	                                         errmsg("array size exceeds the maximum allowed (%d)",
         :	                                                        (int) MaxArraySize)));
         :	        }
         :	        Assert(ret >= 0);
         :	        if ((Size) ret > MaxArraySize)
         :	                ereport(ERROR,
    0.00 :	  6c43e1:       be ff ff ff 07          mov    $0x7ffffff,%esi
    0.00 :	  6c43e6:       bf a0 82 8b 00          mov    $0x8b82a0,%edi
    0.00 :	  6c43eb:       31 c0                   xor    %eax,%eax
    0.00 :	  6c43ed:       e8 ae 84 0b 00          callq  77c8a0 <errmsg>
    0.00 :	  6c43f2:       bf 05 01 00 00          mov    $0x105,%edi
    0.00 :	  6c43f7:       89 c3                   mov    %eax,%ebx
    0.00 :	  6c43f9:       e8 52 89 0b 00          callq  77cd50 <errcode>
    0.00 :	  6c43fe:       89 de                   mov    %ebx,%esi
    0.00 :	  6c4400:       89 c7                   mov    %eax,%edi
    0.00 :	  6c4402:       31 c0                   xor    %eax,%eax
    0.00 :	  6c4404:       e8 d7 61 0b 00          callq  77a5e0 <errfinish>
    0.00 :	  6c4409:       eb c2                   jmp    6c43cd <ArrayGetNItems+0x7d>
    0.00 :	  6c440b:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6c440e:       b9 b7 8d 8b 00          mov    $0x8b8db7,%ecx
    0.00 :	  6c4413:       ba 6e 00 00 00          mov    $0x6e,%edx
    0.00 :	  6c4418:       eb a0                   jmp    6c43ba <ArrayGetNItems+0x6a>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
   23.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:317
   23.08 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6af0 <date_lt>:
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
   23.08 :	  6c6af0:       48 8b 47 28             mov    0x28(%rdi),%rax
    7.69 :	  6c6af4:       39 47 20                cmp    %eax,0x20(%rdi)
    7.69 :	  6c6af7:       55                      push   %rbp
   15.38 :	  6c6af8:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 < dateVal2);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:317
   23.08 :	  6c6afb:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 != dateVal2);
         :	}
         :
         :	Datum
         :	date_lt(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:312
   23.08 :	  6c6afc:       0f 9c c0                setl   %al
    0.00 :	  6c6aff:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   23.08 ??:0
   15.38 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
    7.69 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000084750 <memcpy>:
 ??:0
   15.38 :	   84750:       48 83 fa 20             cmp    $0x20,%rdx
    0.00 :	   84754:       48 89 f8                mov    %rdi,%rax
    0.00 :	   84757:       73 77                   jae    847d0 <memcpy+0x80>
    0.00 :	   84759:       f6 c2 01                test   $0x1,%dl
    0.00 :	   8475c:       74 0b                   je     84769 <memcpy+0x19>
    0.00 :	   8475e:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   84761:       88 0f                   mov    %cl,(%rdi)
    0.00 :	   84763:       48 ff c6                inc    %rsi
    0.00 :	   84766:       48 ff c7                inc    %rdi
    7.69 :	   84769:       f6 c2 02                test   $0x2,%dl
    0.00 :	   8476c:       74 12                   je     84780 <memcpy+0x30>
    0.00 :	   8476e:       0f b7 0e                movzwl (%rsi),%ecx
    0.00 :	   84771:       66 89 0f                mov    %cx,(%rdi)
    0.00 :	   84774:       48 83 c6 02             add    $0x2,%rsi
    0.00 :	   84778:       48 83 c7 02             add    $0x2,%rdi
    0.00 :	   8477c:       0f 1f 40 00             nopl   0x0(%rax)
    7.69 :	   84780:       f6 c2 04                test   $0x4,%dl
    0.00 :	   84783:       74 0c                   je     84791 <memcpy+0x41>
    0.00 :	   84785:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	   84787:       89 0f                   mov    %ecx,(%rdi)
    0.00 :	   84789:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	   8478d:       48 83 c7 04             add    $0x4,%rdi
    0.00 :	   84791:       f6 c2 08                test   $0x8,%dl
    0.00 :	   84794:       74 0e                   je     847a4 <memcpy+0x54>
    0.00 :	   84796:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   84799:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   8479c:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	   847a0:       48 83 c7 08             add    $0x8,%rdi
    7.69 :	   847a4:       81 e2 f0 00 00 00       and    $0xf0,%edx
    0.00 :	   847aa:       74 1f                   je     847cb <memcpy+0x7b>
    0.00 :	   847ac:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   847b0:       48 8b 0e                mov    (%rsi),%rcx
   23.08 :	   847b3:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   847b7:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   847ba:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   847be:       83 ea 10                sub    $0x10,%edx
    0.00 :	   847c1:       48 8d 76 10             lea    0x10(%rsi),%rsi
    0.00 :	   847c5:       48 8d 7f 10             lea    0x10(%rdi),%rdi
    0.00 :	   847c9:       75 e5                   jne    847b0 <memcpy+0x60>
    7.69 :	   847cb:       f3 c3                   repz retq 
    0.00 :	   847cd:       0f 1f 00                nopl   (%rax)
    0.00 :	   847d0:       48 89 44 24 f8          mov    %rax,-0x8(%rsp)
    0.00 :	   847d5:       89 f1                   mov    %esi,%ecx
    0.00 :	   847d7:       83 e1 07                and    $0x7,%ecx
    0.00 :	   847da:       74 34                   je     84810 <memcpy+0xc0>
    0.00 :	   847dc:       48 8d 54 11 f8          lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	   847e1:       83 e9 08                sub    $0x8,%ecx
    0.00 :	   847e4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   847eb:       00 00 00 00 00 
    0.00 :	   847f0:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	   847f3:       88 07                   mov    %al,(%rdi)
    0.00 :	   847f5:       ff c1                   inc    %ecx
    0.00 :	   847f7:       48 8d 76 01             lea    0x1(%rsi),%rsi
    0.00 :	   847fb:       48 8d 7f 01             lea    0x1(%rdi),%rdi
    0.00 :	   847ff:       75 ef                   jne    847f0 <memcpy+0xa0>
    0.00 :	   84801:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   84808:       0f 1f 84 00 00 00 00 
    0.00 :	   8480f:       00 
    7.69 :	   84810:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	   84817:       77 77                   ja     84890 <memcpy+0x140>
    0.00 :	   84819:       89 d1                   mov    %edx,%ecx
    0.00 :	   8481b:       c1 e9 05                shr    $0x5,%ecx
    0.00 :	   8481e:       74 60                   je     84880 <memcpy+0x130>
    7.69 :	   84820:       ff c9                   dec    %ecx
    0.00 :	   84822:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84825:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84829:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8482d:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84831:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84834:       4c 89 47 08             mov    %r8,0x8(%rdi)
    7.69 :	   84838:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8483c:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84840:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   84844:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84848:       74 36                   je     84880 <memcpy+0x130>
    0.00 :	   8484a:       ff c9                   dec    %ecx
    0.00 :	   8484c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   8484f:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84853:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84857:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8485b:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   8485e:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84862:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84866:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8486a:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   8486e:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84872:       75 ac                   jne    84820 <memcpy+0xd0>
    0.00 :	   84874:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8487b:       00 00 00 00 00 
    0.00 :	   84880:       83 e2 1f                and    $0x1f,%edx
    7.69 :	   84883:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84888:       0f 85 cb fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   8488e:       f3 c3                   repz retq 
    0.00 :	   84890:       4c 8b 1d 79 d8 2e 00    mov    0x2ed879(%rip),%r11        # 372110 <__x86_64_data_cache_size_half>
    0.00 :	   84897:       49 39 d3                cmp    %rdx,%r11
    0.00 :	   8489a:       4c 0f 47 da             cmova  %rdx,%r11
    0.00 :	   8489e:       4c 89 d9                mov    %r11,%rcx
    0.00 :	   848a1:       49 83 e3 f8             and    $0xfffffffffffffff8,%r11
    0.00 :	   848a5:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   848a9:       74 05                   je     848b0 <memcpy+0x160>
    0.00 :	   848ab:       f3 48 a5                rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	   848ae:       66 90                   xchg   %ax,%ax
    0.00 :	   848b0:       4c 29 da                sub    %r11,%rdx
    0.00 :	   848b3:       48 f7 c2 f8 ff ff ff    test   $0xfffffffffffffff8,%rdx
    0.00 :	   848ba:       75 14                   jne    848d0 <memcpy+0x180>
    0.00 :	   848bc:       83 e2 07                and    $0x7,%edx
    0.00 :	   848bf:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   848c4:       0f 85 8f fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   848ca:       f3 c3                   repz retq 
    0.00 :	   848cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   848d0:       4c 8b 05 59 d8 2e 00    mov    0x2ed859(%rip),%r8        # 372130 <__x86_64_shared_cache_size_half>
    0.00 :	   848d7:       49 39 d0                cmp    %rdx,%r8
    0.00 :	   848da:       4c 0f 47 c2             cmova  %rdx,%r8
    0.00 :	   848de:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   848e1:       49 83 e0 c0             and    $0xffffffffffffffc0,%r8
    0.00 :	   848e5:       48 c1 e9 06             shr    $0x6,%rcx
    0.00 :	   848e9:       0f 84 ab 01 00 00       je     84a9a <memcpy+0x34a>
    0.00 :	   848ef:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   848f4:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   848f9:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   848fe:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   84903:       83 3d 06 2b 2f 00 00    cmpl   $0x0,0x2f2b06(%rip)        # 377410 <__x86_64_prefetchw>
    0.00 :	   8490a:       0f 84 c0 00 00 00       je     849d0 <memcpy+0x280>
    0.00 :	   84910:       48 ff c9                dec    %rcx
    0.00 :	   84913:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84916:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   8491a:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8491e:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84922:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84926:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   8492a:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8492e:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84932:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   84939:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84940:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84943:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84947:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8494b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8494f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84953:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84957:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   8495b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   8495f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84963:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84967:       0f 84 19 01 00 00       je     84a86 <memcpy+0x336>
    0.00 :	   8496d:       48 ff c9                dec    %rcx
    0.00 :	   84970:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84973:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84977:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8497b:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8497f:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84983:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84987:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8498b:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   8498f:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84992:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84996:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8499a:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8499e:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   849a2:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   849a6:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   849aa:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   849ae:       0f 0d 8f 40 03 00 00    prefetchw 0x340(%rdi)
    0.00 :	   849b5:       0f 0d 8f 80 03 00 00    prefetchw 0x380(%rdi)
    0.00 :	   849bc:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   849c0:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   849c4:       0f 85 46 ff ff ff       jne    84910 <memcpy+0x1c0>
    0.00 :	   849ca:       e9 b7 00 00 00          jmpq   84a86 <memcpy+0x336>
    0.00 :	   849cf:       90                      nop
    0.00 :	   849d0:       48 ff c9                dec    %rcx
    0.00 :	   849d3:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   849d6:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   849da:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   849de:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   849e2:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   849e6:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   849ea:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   849ee:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   849f2:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   849f9:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84a00:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a03:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a07:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a0b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a0f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a13:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a17:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a1b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a1f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a23:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a27:       74 5d                   je     84a86 <memcpy+0x336>
    0.00 :	   84a29:       48 ff c9                dec    %rcx
    0.00 :	   84a2c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84a2f:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84a33:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84a37:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84a3b:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84a3f:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84a43:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84a47:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84a4b:       0f 18 8f 40 03 00 00    prefetcht0 0x340(%rdi)
    0.00 :	   84a52:       0f 18 8f 80 03 00 00    prefetcht0 0x380(%rdi)
    0.00 :	   84a59:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a5c:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a60:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a64:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a68:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a6c:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a70:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a74:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a78:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a7c:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a80:       0f 85 4a ff ff ff       jne    849d0 <memcpy+0x280>
    0.00 :	   84a86:       48 8b 5c 24 d8          mov    -0x28(%rsp),%rbx
    0.00 :	   84a8b:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84a90:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84a95:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84a9a:       4c 29 c2                sub    %r8,%rdx
    0.00 :	   84a9d:       48 f7 c2 c0 ff ff ff    test   $0xffffffffffffffc0,%rdx
    0.00 :	   84aa4:       75 1a                   jne    84ac0 <memcpy+0x370>
    0.00 :	   84aa6:       83 e2 3f                and    $0x3f,%edx
    0.00 :	   84aa9:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84aae:       0f 85 a5 fc ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84ab4:       f3 c3                   repz retq 
    0.00 :	   84ab6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   84abd:       00 00 00 
    0.00 :	   84ac0:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   84ac3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   84ac7:       0f 84 d8 00 00 00       je     84ba5 <memcpy+0x455>
    0.00 :	   84acd:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   84ad2:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   84ad7:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   84adc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   84ae0:       0f 18 86 00 03 00 00    prefetchnta 0x300(%rsi)
    0.00 :	   84ae7:       0f 18 86 40 03 00 00    prefetchnta 0x340(%rsi)
    0.00 :	   84aee:       48 ff c9                dec    %rcx
    0.00 :	   84af1:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84af4:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84af8:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84afc:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84b00:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84b04:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84b08:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84b0c:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84b10:       48 0f c3 07             movnti %rax,(%rdi)
    0.00 :	   84b14:       4c 0f c3 47 08          movnti %r8,0x8(%rdi)
    0.00 :	   84b19:       4c 0f c3 4f 10          movnti %r9,0x10(%rdi)
    0.00 :	   84b1e:       4c 0f c3 57 18          movnti %r10,0x18(%rdi)
    0.00 :	   84b23:       4c 0f c3 5f 20          movnti %r11,0x20(%rdi)
    0.00 :	   84b28:       4c 0f c3 67 28          movnti %r12,0x28(%rdi)
    0.00 :	   84b2d:       4c 0f c3 6f 30          movnti %r13,0x30(%rdi)
    0.00 :	   84b32:       4c 0f c3 77 38          movnti %r14,0x38(%rdi)
    0.00 :	   84b37:       48 8b 46 40             mov    0x40(%rsi),%rax
    0.00 :	   84b3b:       4c 8b 46 48             mov    0x48(%rsi),%r8
    0.00 :	   84b3f:       4c 8b 4e 50             mov    0x50(%rsi),%r9
    0.00 :	   84b43:       4c 8b 56 58             mov    0x58(%rsi),%r10
    0.00 :	   84b47:       4c 8b 5e 60             mov    0x60(%rsi),%r11
    0.00 :	   84b4b:       4c 8b 66 68             mov    0x68(%rsi),%r12
    0.00 :	   84b4f:       4c 8b 6e 70             mov    0x70(%rsi),%r13
    0.00 :	   84b53:       4c 8b 76 78             mov    0x78(%rsi),%r14
    0.00 :	   84b57:       48 0f c3 47 40          movnti %rax,0x40(%rdi)
    0.00 :	   84b5c:       4c 0f c3 47 48          movnti %r8,0x48(%rdi)
    0.00 :	   84b61:       4c 0f c3 4f 50          movnti %r9,0x50(%rdi)
    0.00 :	   84b66:       4c 0f c3 57 58          movnti %r10,0x58(%rdi)
    0.00 :	   84b6b:       4c 0f c3 5f 60          movnti %r11,0x60(%rdi)
    0.00 :	   84b70:       4c 0f c3 67 68          movnti %r12,0x68(%rdi)
    0.00 :	   84b75:       4c 0f c3 6f 70          movnti %r13,0x70(%rdi)
    0.00 :	   84b7a:       4c 0f c3 77 78          movnti %r14,0x78(%rdi)
    0.00 :	   84b7f:       48 8d b6 80 00 00 00    lea    0x80(%rsi),%rsi
    0.00 :	   84b86:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   84b8d:       0f 85 4d ff ff ff       jne    84ae0 <memcpy+0x390>
    0.00 :	   84b93:       0f ae f8                sfence 
    0.00 :	   84b96:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84b9b:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84ba0:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84ba5:       83 e2 7f                and    $0x7f,%edx
    0.00 :	   84ba8:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84bad:       0f 85 a6 fb ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84bb3:       f3 c3                   repz retq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:984
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:985
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:923
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:943
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:970
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:941
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbe90 <ExecHashGetHashValue>:
         :	                                         ExprContext *econtext,
         :	                                         List *hashkeys,
         :	                                         bool outer_tuple,
         :	                                         bool keep_nulls,
         :	                                         uint32 *hashvalue)
         :	{
    0.00 :	  5bbe90:       55                      push   %rbp
    0.00 :	  5bbe91:       48 89 e5                mov    %rsp,%rbp
    8.33 :	  5bbe94:       41 57                   push   %r15
    0.00 :	  5bbe96:       49 89 ff                mov    %rdi,%r15
    0.00 :	  5bbe99:       41 56                   push   %r14
    0.00 :	  5bbe9b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5bbe9e:       41 55                   push   %r13
    0.00 :	  5bbea0:       41 54                   push   %r12
    0.00 :	  5bbea2:       49 89 d4                mov    %rdx,%r12
    0.00 :	  5bbea5:       53                      push   %rbx
    0.00 :	  5bbea6:       89 cb                   mov    %ecx,%ebx
    0.00 :	  5bbea8:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  5bbeac:       4c 89 4d a8             mov    %r9,-0x58(%rbp)
    0.00 :	  5bbeb0:       44 88 45 b7             mov    %r8b,-0x49(%rbp)
         :
         :	        /*
         :	         * We reset the eval context each time to reclaim any memory leaked in the
         :	         * hashkey expressions.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5bbeb4:       48 8b 7e 28             mov    0x28(%rsi),%rdi
    0.00 :	  5bbeb8:       e8 f3 ca 1d 00          callq  7989b0 <MemoryContextReset>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5bbebd:       48 8b 05 9c e9 5f 00    mov    0x5fe99c(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
    0.00 :	  5bbec4:       84 db                   test   %bl,%bl
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    8.33 :	  5bbec6:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5bbeca:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5bbece:       48 89 05 8b e9 5f 00    mov    %rax,0x5fe98b(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5bbed5:       0f 84 d5 00 00 00       je     5bbfb0 <ExecHashGetHashValue+0x120>
         :	                hashfunctions = hashtable->outer_hashfunctions;
    0.00 :	  5bbedb:       49 8b 47 78             mov    0x78(%r15),%rax
    0.00 :	  5bbedf:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5bbee3:       4d 85 e4                test   %r12,%r12
    0.00 :	  5bbee6:       0f 84 94 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    0.00 :	  5bbeec:       49 8b 5c 24 08          mov    0x8(%r12),%rbx
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:943
    8.33 :	  5bbef1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbef4:       0f 84 86 00 00 00       je     5bbf80 <ExecHashGetHashValue+0xf0>
    0.00 :	  5bbefa:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbefd:       45 31 e4                xor    %r12d,%r12d
         :	        {
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
    0.00 :	  5bbf00:       48 8b 03                mov    (%rbx),%rax
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:955
    8.33 :	  5bbf03:       31 c9                   xor    %ecx,%ecx
         :	                ExprState  *keyexpr = (ExprState *) lfirst(hk);
         :	                Datum           keyval;
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
    0.00 :	  5bbf05:       41 d1 c5                rol    %r13d
         :
         :	                /*
         :	                 * Get the join attribute value of the tuple
         :	                 */
         :	                keyval = ExecEvalExpr(keyexpr, econtext, &isNull, NULL);
    0.00 :	  5bbf08:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    8.33 :	  5bbf0c:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5bbf0f:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bbf12:       ff 50 10                callq  *0x10(%rax)
         :	                 *
         :	                 * Note: currently, all hashjoinable operators must be strict since
         :	                 * the hash index AM assumes that.  However, it takes so little extra
         :	                 * code here to allow non-strict that we may as well do it.
         :	                 */
         :	                if (isNull)
    0.00 :	  5bbf15:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:970
    8.33 :	  5bbf19:       74 35                   je     5bbf50 <ExecHashGetHashValue+0xc0>
         :	                {
         :	                        if (hashtable->hashStrict[i] && !keep_nulls)
    0.00 :	  5bbf1b:       49 8b 87 88 00 00 00    mov    0x88(%r15),%rax
    0.00 :	  5bbf22:       49 63 d4                movslq %r12d,%rdx
    0.00 :	  5bbf25:       80 3c 10 00             cmpb   $0x0,(%rax,%rdx,1)
    0.00 :	  5bbf29:       74 41                   je     5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf2b:       80 7d b7 00             cmpb   $0x0,-0x49(%rbp)
    0.00 :	  5bbf2f:       75 3b                   jne    5bbf6c <ExecHashGetHashValue+0xdc>
    0.00 :	  5bbf31:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf35:       48 89 05 24 e9 5f 00    mov    %rax,0x5fe924(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
         :	        return true;
         :	}
    0.00 :	  5bbf3c:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5bbf40:       31 c0                   xor    %eax,%eax
    0.00 :	  5bbf42:       5b                      pop    %rbx
    0.00 :	  5bbf43:       41 5c                   pop    %r12
    0.00 :	  5bbf45:       41 5d                   pop    %r13
    0.00 :	  5bbf47:       41 5e                   pop    %r14
    0.00 :	  5bbf49:       41 5f                   pop    %r15
    0.00 :	  5bbf4b:       c9                      leaveq 
    0.00 :	  5bbf4c:       c3                      retq   
    0.00 :	  5bbf4d:       0f 1f 00                nopl   (%rax)
         :	                else
         :	                {
         :	                        /* Compute the hash function */
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
    0.00 :	  5bbf50:       49 63 fc                movslq %r12d,%rdi
    0.00 :	  5bbf53:       48 89 c2                mov    %rax,%rdx
    0.00 :	  5bbf56:       31 f6                   xor    %esi,%esi
    0.00 :	  5bbf58:       48 8d 3c 7f             lea    (%rdi,%rdi,2),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:984
   16.67 :	  5bbf5c:       48 c1 e7 04             shl    $0x4,%rdi
    0.00 :	  5bbf60:       48 03 7d b8             add    -0x48(%rbp),%rdi
    0.00 :	  5bbf64:       e8 67 21 1c 00          callq  77e0d0 <FunctionCall1Coll>
         :	                        hashkey ^= hkey;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:985
   16.67 :	  5bbf69:       41 31 c5                xor    %eax,%r13d
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
         :
         :	        foreach(hk, hashkeys)
    0.00 :	  5bbf6c:       48 8b 5b 08             mov    0x8(%rbx),%rbx
    0.00 :	  5bbf70:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bbf73:       74 13                   je     5bbf88 <ExecHashGetHashValue+0xf8>
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i], keyval));
         :	                        hashkey ^= hkey;
         :	                }
         :
         :	                i++;
    0.00 :	  5bbf75:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  5bbf79:       eb 85                   jmp    5bbf00 <ExecHashGetHashValue+0x70>
    0.00 :	  5bbf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5bbf80:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5bbf83:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    8.33 :	  5bbf88:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bbf8c:       48 89 05 cd e8 5f 00    mov    %rax,0x5fe8cd(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf93:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  5bbf97:       44 89 28                mov    %r13d,(%rax)
         :	        return true;
         :	}
    0.00 :	  5bbf9a:       48 83 c4 38             add    $0x38,%rsp
         :	                i++;
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        *hashvalue = hashkey;
    0.00 :	  5bbf9e:       b8 01 00 00 00          mov    $0x1,%eax
         :	        return true;
         :	}
    0.00 :	  5bbfa3:       5b                      pop    %rbx
    0.00 :	  5bbfa4:       41 5c                   pop    %r12
    0.00 :	  5bbfa6:       41 5d                   pop    %r13
    0.00 :	  5bbfa8:       41 5e                   pop    %r14
    0.00 :	  5bbfaa:       41 5f                   pop    %r15
    0.00 :	  5bbfac:       c9                      leaveq 
    0.00 :	  5bbfad:       c3                      retq   
    0.00 :	  5bbfae:       66 90                   xchg   %ax,%ax
         :	        oldContext = MemoryContextSwitchTo(econtext->ecxt_per_tuple_memory);
         :
         :	        if (outer_tuple)
         :	                hashfunctions = hashtable->outer_hashfunctions;
         :	        else
         :	                hashfunctions = hashtable->inner_hashfunctions;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:941
    8.33 :	  5bbfb0:       49 8b 87 80 00 00 00    mov    0x80(%r15),%rax
    0.00 :	  5bbfb7:       48 89 45 b8             mov    %rax,-0x48(%rbp)
    0.00 :	  5bbfbb:       e9 23 ff ff ff          jmpq   5bbee3 <ExecHashGetHashValue+0x53>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1669
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1692
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1624
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1629
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1629
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1669
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1669
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1688
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1693
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1693
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bbfc0 <dense_alloc>:
         :	/*
         :	 * Allocate 'size' bytes from the currently active HashMemoryChunk
         :	 */
         :	static void *
         :	dense_alloc(HashJoinTable hashtable, Size size)
         :	{
    0.00 :	  5bbfc0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1624
    8.33 :	  5bbfc1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bbfc4:       41 54                   push   %r12
    0.00 :	  5bbfc6:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5bbfc9:       53                      push   %rbx
         :	        HashMemoryChunk newChunk;
         :	        char       *ptr;
         :
         :	        /* just in case the size is not already aligned properly */
         :	        size = MAXALIGN(size);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1629
    8.33 :	  5bbfca:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    8.33 :	  5bbfce:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :
         :	        /*
         :	         * If tuple size is larger than of 1/4 of chunk size, allocate a separate
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
    0.00 :	  5bbfd2:       48 81 fb 00 20 00 00    cmp    $0x2000,%rbx
    0.00 :	  5bbfd9:       0f 87 89 00 00 00       ja     5bc068 <dense_alloc+0xa8>
         :
         :	        /*
         :	         * See if we have enough space for it in the current chunk (if any).
         :	         * If not, allocate a fresh chunk.
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
    0.00 :	  5bbfdf:       48 8b 97 c8 00 00 00    mov    0xc8(%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1669
    8.33 :	  5bbfe6:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bbfe9:       74 35                   je     5bc020 <dense_alloc+0x60>
    0.00 :	  5bbfeb:       48 8b 4a 10             mov    0x10(%rdx),%rcx
   16.67 :	  5bbfef:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5bbff3:       48 29 c8                sub    %rcx,%rax
    8.33 :	  5bbff6:       48 39 c3                cmp    %rax,%rbx
    0.00 :	  5bbff9:       77 25                   ja     5bc020 <dense_alloc+0x60>
         :	                return newChunk->data;
         :	        }
         :
         :	        /* There is enough space in the current chunk, let's add the tuple */
         :	        ptr = hashtable->chunks->data + hashtable->chunks->used;
         :	        hashtable->chunks->used += size;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1688
    8.33 :	  5bbffb:       48 8d 04 0b             lea    (%rbx,%rcx,1),%rax
    0.00 :	  5bbfff:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	        hashtable->chunks->ntuples += 1;
    0.00 :	  5bc003:       48 8b 87 c8 00 00 00    mov    0xc8(%rdi),%rax
    0.00 :	  5bc00a:       83 00 01                addl   $0x1,(%rax)
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1692
   16.67 :	  5bc00d:       48 8d 44 0a 20          lea    0x20(%rdx,%rcx,1),%rax
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:1693
    8.33 :	  5bc012:       5b                      pop    %rbx
    8.33 :	  5bc013:       41 5c                   pop    %r12
    0.00 :	  5bc015:       c9                      leaveq 
    0.00 :	  5bc016:       c3                      retq   
    0.00 :	  5bc017:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bc01e:       00 00 
         :	         */
         :	        if ((hashtable->chunks == NULL) ||
         :	                (hashtable->chunks->maxlen - hashtable->chunks->used) < size)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc020:       49 8b bc 24 c0 00 00    mov    0xc0(%r12),%rdi
    0.00 :	  5bc027:       00 
    0.00 :	  5bc028:       be 20 80 00 00          mov    $0x8020,%esi
    0.00 :	  5bc02d:       e8 5e ce 1d 00          callq  798e90 <MemoryContextAlloc>
         :	                                           offsetof(HashMemoryChunkData, data) + HASH_CHUNK_SIZE);
         :
         :	                newChunk->maxlen = HASH_CHUNK_SIZE;
    0.00 :	  5bc032:       48 c7 40 08 00 80 00    movq   $0x8000,0x8(%rax)
    0.00 :	  5bc039:       00 
         :	                newChunk->used = size;
    0.00 :	  5bc03a:       48 89 58 10             mov    %rbx,0x10(%rax)
         :	                newChunk->ntuples = 1;
    0.00 :	  5bc03e:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :
         :	                newChunk->next = hashtable->chunks;
    0.00 :	  5bc044:       49 8b 94 24 c8 00 00    mov    0xc8(%r12),%rdx
    0.00 :	  5bc04b:       00 
    0.00 :	  5bc04c:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                hashtable->chunks = newChunk;
    0.00 :	  5bc050:       49 89 84 24 c8 00 00    mov    %rax,0xc8(%r12)
    0.00 :	  5bc057:       00 
         :
         :	                return newChunk->data;
    0.00 :	  5bc058:       48 83 c0 20             add    $0x20,%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc05c:       5b                      pop    %rbx
    0.00 :	  5bc05d:       41 5c                   pop    %r12
    0.00 :	  5bc05f:       c9                      leaveq 
    0.00 :	  5bc060:       c3                      retq   
    0.00 :	  5bc061:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * chunk.
         :	         */
         :	        if (size > HASH_CHUNK_THRESHOLD)
         :	        {
         :	                /* allocate new chunk and put it at the beginning of the list */
         :	                newChunk = (HashMemoryChunk) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bc068:       48 8b bf c0 00 00 00    mov    0xc0(%rdi),%rdi
    0.00 :	  5bc06f:       48 8d 73 20             lea    0x20(%rbx),%rsi
    0.00 :	  5bc073:       e8 18 ce 1d 00          callq  798e90 <MemoryContextAlloc>
    0.00 :	  5bc078:       48 89 c2                mov    %rax,%rdx
         :	                                                                  offsetof(HashMemoryChunkData, data) + size);
         :	                newChunk->maxlen = size;
    0.00 :	  5bc07b:       48 89 58 08             mov    %rbx,0x8(%rax)
         :	                newChunk->used = 0;
    0.00 :	  5bc07f:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5bc086:       00 
         :	                newChunk->ntuples = 0;
    0.00 :	  5bc087:       c7 00 00 00 00 00       movl   $0x0,(%rax)
         :
         :	                /*
         :	                 * Add this chunk to the list after the first existing chunk, so that
         :	                 * we don't lose the remaining space in the "current" chunk.
         :	                 */
         :	                if (hashtable->chunks != NULL)
    0.00 :	  5bc08d:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc094:       00 
    0.00 :	  5bc095:       48 85 c0                test   %rax,%rax
    0.00 :	  5bc098:       74 26                   je     5bc0c0 <dense_alloc+0x100>
         :	                {
         :	                        newChunk->next = hashtable->chunks->next;
    0.00 :	  5bc09a:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	  5bc09e:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                        hashtable->chunks->next = newChunk;
    0.00 :	  5bc0a2:       49 8b 84 24 c8 00 00    mov    0xc8(%r12),%rax
    0.00 :	  5bc0a9:       00 
    0.00 :	  5bc0aa:       48 89 50 18             mov    %rdx,0x18(%rax)
         :	                {
         :	                        newChunk->next = hashtable->chunks;
         :	                        hashtable->chunks = newChunk;
         :	                }
         :
         :	                newChunk->used += size;
    0.00 :	  5bc0ae:       48 01 5a 10             add    %rbx,0x10(%rdx)
         :	                newChunk->ntuples += 1;
    0.00 :	  5bc0b2:       83 02 01                addl   $0x1,(%rdx)
         :
         :	                return newChunk->data;
    0.00 :	  5bc0b5:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	        hashtable->chunks->used += size;
         :	        hashtable->chunks->ntuples += 1;
         :
         :	        /* return pointer to the start of the tuple memory */
         :	        return ptr;
         :	}
    0.00 :	  5bc0b9:       5b                      pop    %rbx
    0.00 :	  5bc0ba:       41 5c                   pop    %r12
    0.00 :	  5bc0bc:       c9                      leaveq 
    0.00 :	  5bc0bd:       c3                      retq   
    0.00 :	  5bc0be:       66 90                   xchg   %ax,%ax
         :	                        newChunk->next = hashtable->chunks->next;
         :	                        hashtable->chunks->next = newChunk;
         :	                }
         :	                else
         :	                {
         :	                        newChunk->next = hashtable->chunks;
    0.00 :	  5bc0c0:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  5bc0c7:       00 
         :	                        hashtable->chunks = newChunk;
    0.00 :	  5bc0c8:       49 89 94 24 c8 00 00    mov    %rdx,0xc8(%r12)
    0.00 :	  5bc0cf:       00 
    0.00 :	  5bc0d0:       eb dc                   jmp    5bc0ae <dense_alloc+0xee>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:105
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:128
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:105
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:116
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:126
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:126
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bd030 <MultiExecHash>:
         :	 *              than one batch is required.
         :	 * ----------------------------------------------------------------
         :	 */
         :	Node *
         :	MultiExecHash(HashState *node)
         :	{
    0.00 :	  5bd030:       55                      push   %rbp
    0.00 :	  5bd031:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bd034:       41 57                   push   %r15
    0.00 :	  5bd036:       41 56                   push   %r14
    0.00 :	  5bd038:       41 55                   push   %r13
    0.00 :	  5bd03a:       41 54                   push   %r12
    0.00 :	  5bd03c:       53                      push   %rbx
    0.00 :	  5bd03d:       48 83 ec 58             sub    $0x58,%rsp
    0.00 :	  5bd041:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
         :	        TupleTableSlot *slot;
         :	        ExprContext *econtext;
         :	        uint32          hashvalue;
         :
         :	        /* must provide our own instrumentation support */
         :	        if (node->ps.instrument)
    0.00 :	  5bd045:       48 8b 7f 18             mov    0x18(%rdi),%rdi
    0.00 :	  5bd049:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd04c:       74 05                   je     5bd053 <MultiExecHash+0x23>
         :	                InstrStartNode(node->ps.instrument);
    0.00 :	  5bd04e:       e8 ad ae ff ff          callq  5b7f00 <InstrStartNode>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bd053:       48 8b 55 80             mov    -0x80(%rbp),%rdx
         :	        hashtable = node->hashtable;
    0.00 :	  5bd057:       48 8b 45 80             mov    -0x80(%rbp),%rax
         :	                InstrStartNode(node->ps.instrument);
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bd05b:       48 8b 52 30             mov    0x30(%rdx),%rdx
    0.00 :	  5bd05f:       48 89 55 88             mov    %rdx,-0x78(%rbp)
         :	        hashtable = node->hashtable;
         :
         :	        /*
         :	         * set expression context
         :	         */
         :	        hashkeys = node->hashkeys;
    0.00 :	  5bd063:       48 8b 90 80 00 00 00    mov    0x80(%rax),%rdx
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerNode = outerPlanState(node);
         :	        hashtable = node->hashtable;
    0.00 :	  5bd06a:       4c 8b 78 78             mov    0x78(%rax),%r15
         :
         :	        /*
         :	         * set expression context
         :	         */
         :	        hashkeys = node->hashkeys;
    0.00 :	  5bd06e:       48 89 55 90             mov    %rdx,-0x70(%rbp)
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5bd072:       48 8b 40 60             mov    0x60(%rax),%rax
    0.00 :	  5bd076:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5bd07a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * get all inner tuples and insert into the hash table (or temp files)
         :	         */
         :	        for (;;)
         :	        {
         :	                slot = ExecProcNode(outerNode);
    0.00 :	  5bd080:       48 8b 7d 88             mov    -0x78(%rbp),%rdi
    0.00 :	  5bd084:       e8 17 f4 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:105
   20.00 :	  5bd089:       48 85 c0                test   %rax,%rax
         :	        /*
         :	         * get all inner tuples and insert into the hash table (or temp files)
         :	         */
         :	        for (;;)
         :	        {
         :	                slot = ExecProcNode(outerNode);
    0.00 :	  5bd08c:       49 89 c4                mov    %rax,%r12
         :	                if (TupIsNull(slot))
    0.00 :	  5bd08f:       0f 84 9e 02 00 00       je     5bd333 <MultiExecHash+0x303>
    0.00 :	  5bd095:       80 78 04 00             cmpb   $0x0,0x4(%rax)
   10.00 :	  5bd099:       0f 85 94 02 00 00       jne    5bd333 <MultiExecHash+0x303>
         :	                        break;
         :	                /* We have to compute the hash value */
         :	                econtext->ecxt_innertuple = slot;
    0.00 :	  5bd09f:       48 8b 55 98             mov    -0x68(%rbp),%rdx
         :	                if (ExecHashGetHashValue(hashtable, econtext, hashkeys,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:109
   10.00 :	  5bd0a3:       4c 8d 4d d4             lea    -0x2c(%rbp),%r9
    0.00 :	  5bd0a7:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bd0a9:       4c 89 ff                mov    %r15,%rdi
         :	        {
         :	                slot = ExecProcNode(outerNode);
         :	                if (TupIsNull(slot))
         :	                        break;
         :	                /* We have to compute the hash value */
         :	                econtext->ecxt_innertuple = slot;
    0.00 :	  5bd0ac:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                if (ExecHashGetHashValue(hashtable, econtext, hashkeys,
   10.00 :	  5bd0b0:       45 0f be 47 20          movsbl 0x20(%r15),%r8d
    0.00 :	  5bd0b5:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5bd0b9:       48 8b 75 98             mov    -0x68(%rbp),%rsi
    0.00 :	  5bd0bd:       e8 ce ed ff ff          callq  5bbe90 <ExecHashGetHashValue>
    0.00 :	  5bd0c2:       84 c0                   test   %al,%al
    0.00 :	  5bd0c4:       74 ba                   je     5bd080 <MultiExecHash+0x50>
         :	                                                                 false, hashtable->keepNulls,
         :	                                                                 &hashvalue))
         :	                {
         :	                        int                     bucketNumber;
         :
         :	                        bucketNumber = ExecHashGetSkewBucket(hashtable, hashvalue);
    0.00 :	  5bd0c6:       8b 75 d4                mov    -0x2c(%rbp),%esi
    0.00 :	  5bd0c9:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bd0cc:       e8 df ea ff ff          callq  5bbbb0 <ExecHashGetSkewBucket>
    0.00 :	  5bd0d1:       89 45 a0                mov    %eax,-0x60(%rbp)
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:116
   10.00 :	  5bd0d4:       83 c0 01                add    $0x1,%eax
    0.00 :	  5bd0d7:       0f 84 b0 02 00 00       je     5bd38d <MultiExecHash+0x35d>
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0dd:       4c 89 e7                mov    %r12,%rdi
         :
         :	                        bucketNumber = ExecHashGetSkewBucket(hashtable, hashvalue);
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
         :	                        {
         :	                                /* It's a skew tuple, so put it into that hash table */
         :	                                ExecHashSkewTableInsert(hashtable, slot, hashvalue,
    0.00 :	  5bd0e0:       8b 5d d4                mov    -0x2c(%rbp),%ebx
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0e3:       e8 68 6e ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd0e8:       44 8b 20                mov    (%rax),%r12d
    0.00 :	  5bd0eb:       49 8b bf c0 00 00 00    mov    0xc0(%r15),%rdi
         :	ExecHashSkewTableInsert(HashJoinTable hashtable,
         :	                                                TupleTableSlot *slot,
         :	                                                uint32 hashvalue,
         :	                                                int bucketNumber)
         :	{
         :	        MinimalTuple tuple = ExecFetchSlotMinimalTuple(slot);
    0.00 :	  5bd0f2:       49 89 c6                mov    %rax,%r14
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd0f5:       41 83 c4 10             add    $0x10,%r12d
    0.00 :	  5bd0f9:       4d 63 e4                movslq %r12d,%r12
    0.00 :	  5bd0fc:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5bd0ff:       e8 8c bd 1d 00          callq  798e90 <MemoryContextAlloc>
         :	                                                                                                   hashTupleSize);
         :	        hashTuple->hashvalue = hashvalue;
    0.00 :	  5bd104:       89 58 08                mov    %ebx,0x8(%rax)
         :	        memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bd107:       41 8b 16                mov    (%r14),%edx
    0.00 :	  5bd10a:       48 8d 58 10             lea    0x10(%rax),%rbx
    0.00 :	  5bd10e:       4c 89 f6                mov    %r14,%rsi
         :	        HashJoinTuple hashTuple;
         :	        int                     hashTupleSize;
         :
         :	        /* Create the HashJoinTuple */
         :	        hashTupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
         :	        hashTuple = (HashJoinTuple) MemoryContextAlloc(hashtable->batchCxt,
    0.00 :	  5bd111:       49 89 c5                mov    %rax,%r13
         :	                                                                                                   hashTupleSize);
         :	        hashTuple->hashvalue = hashvalue;
         :	        memcpy(HJTUPLE_MINTUPLE(hashTuple), tuple, tuple->t_len);
    0.00 :	  5bd114:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bd117:       e8 d4 ca ea ff          callq  469bf0 <memcpy@plt>
         :	        HeapTupleHeaderClearMatch(HJTUPLE_MINTUPLE(hashTuple));
    0.00 :	  5bd11c:       66 81 63 0a ff 7f       andw   $0x7fff,0xa(%rbx)
         :
         :	        /* Push it onto the front of the skew bucket's list */
         :	        hashTuple->next = hashtable->skewBucket[bucketNumber]->tuples;
    0.00 :	  5bd122:       48 63 55 a0             movslq -0x60(%rbp),%rdx
    0.00 :	  5bd126:       49 8b 47 28             mov    0x28(%r15),%rax
    0.00 :	  5bd12a:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd12e:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5bd132:       49 89 45 00             mov    %rax,0x0(%r13)
         :	        hashtable->skewBucket[bucketNumber]->tuples = hashTuple;
    0.00 :	  5bd136:       49 8b 47 28             mov    0x28(%r15),%rax
    0.00 :	  5bd13a:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd13e:       4c 89 68 08             mov    %r13,0x8(%rax)
         :
         :	        /* Account for space used, and back off if we've used too much */
         :	        hashtable->spaceUsed += hashTupleSize;
    0.00 :	  5bd142:       4d 01 a7 90 00 00 00    add    %r12,0x90(%r15)
         :	        hashtable->spaceUsedSkew += hashTupleSize;
    0.00 :	  5bd149:       4d 01 a7 a8 00 00 00    add    %r12,0xa8(%r15)
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd150:       49 8b 87 90 00 00 00    mov    0x90(%r15),%rax
    0.00 :	  5bd157:       49 3b 87 a0 00 00 00    cmp    0xa0(%r15),%rax
    0.00 :	  5bd15e:       76 10                   jbe    5bd170 <MultiExecHash+0x140>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bd160:       49 89 87 a0 00 00 00    mov    %rax,0xa0(%r15)
    0.00 :	  5bd167:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bd16e:       00 00 
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
    0.00 :	  5bd170:       49 8b 87 b0 00 00 00    mov    0xb0(%r15),%rax
    0.00 :	  5bd177:       49 39 87 a8 00 00 00    cmp    %rax,0xa8(%r15)
    0.00 :	  5bd17e:       0f 86 72 01 00 00       jbe    5bd2f6 <MultiExecHash+0x2c6>
         :	        int                     batchno;
         :	        HashJoinTuple hashTuple;
         :
         :	        /* Locate the bucket to remove */
         :	        bucketToRemove = hashtable->skewBucketNums[hashtable->nSkewBuckets - 1];
         :	        bucket = hashtable->skewBucket[bucketToRemove];
    0.00 :	  5bd184:       49 63 47 34             movslq 0x34(%r15),%rax
    0.00 :	  5bd188:       49 8b 57 38             mov    0x38(%r15),%rdx
    0.00 :	  5bd18c:       48 63 44 82 fc          movslq -0x4(%rdx,%rax,4),%rax
    0.00 :	  5bd191:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd195:       48 89 45 c0             mov    %rax,-0x40(%rbp)
    0.00 :	  5bd199:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5bd19c:       49 03 77 28             add    0x28(%r15),%rsi
    0.00 :	  5bd1a0:       48 8b 06                mov    (%rsi),%rax
    0.00 :	  5bd1a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	         * Calculate which bucket and batch the tuples belong to in the main
         :	         * hashtable.  They all have the same hash value, so it's the same for all
         :	         * of them.  Also note that it's not possible for nbatch to increase while
         :	         * we are processing the tuples.
         :	         */
         :	        hashvalue = bucket->hashvalue;
    0.00 :	  5bd1a7:       8b 10                   mov    (%rax),%edx
    0.00 :	  5bd1a9:       89 55 a4                mov    %edx,-0x5c(%rbp)
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
    0.00 :	  5bd1ac:       41 8b 47 40             mov    0x40(%r15),%eax
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bd1b0:       41 8b 17                mov    (%r15),%edx
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
    0.00 :	  5bd1b3:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  5bd1b6:       0f 86 2c 01 00 00       jbe    5bd2e8 <MultiExecHash+0x2b8>
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bd1bc:       44 8d 70 ff             lea    -0x1(%rax),%r14d
    0.00 :	  5bd1c0:       41 8b 4f 04             mov    0x4(%r15),%ecx
    0.00 :	  5bd1c4:       8b 45 a4                mov    -0x5c(%rbp),%eax
         :	        uint32          nbatch = (uint32) hashtable->nbatch;
         :
         :	        if (nbatch > 1)
         :	        {
         :	                /* we can do MOD by masking, DIV by shifting */
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd1c7:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bd1ca:       23 55 a4                and    -0x5c(%rbp),%edx
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
    0.00 :	  5bd1cd:       d3 e8                   shr    %cl,%eax
    0.00 :	  5bd1cf:       41 21 c6                and    %eax,%r14d
         :	         */
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
    0.00 :	  5bd1d2:       48 8b 45 a8             mov    -0x58(%rbp),%rax
    0.00 :	  5bd1d6:       48 8b 58 08             mov    0x8(%rax),%rbx
         :	        while (hashTuple != NULL)
    0.00 :	  5bd1da:       48 85 db                test   %rbx,%rbx
    0.00 :	  5bd1dd:       0f 84 8a 00 00 00       je     5bd26d <MultiExecHash+0x23d>
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
         :	                {
         :	                        /* Move the tuple to the main hash table */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd1e3:       48 63 c2                movslq %edx,%rax
    0.00 :	  5bd1e6:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd1ea:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                }
         :	                else
         :	                {
         :	                        /* Put the tuple into a temp file for later batches */
         :	                        Assert(batchno > hashtable->curbatch);
         :	                        ExecHashJoinSaveTuple(tuple, hashvalue,
    0.00 :	  5bd1ee:       49 63 c6                movslq %r14d,%rax
    0.00 :	  5bd1f1:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd1f5:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  5bd1f9:       eb 2b                   jmp    5bd226 <MultiExecHash+0x1f6>
    0.00 :	  5bd1fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
         :	                {
         :	                        /* Move the tuple to the main hash table */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd200:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5bd204:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd208:       48 8b 04 10             mov    (%rax,%rdx,1),%rax
    0.00 :	  5bd20c:       48 89 03                mov    %rax,(%rbx)
         :	                        hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bd20f:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd213:       48 89 1c 10             mov    %rbx,(%rax,%rdx,1)
         :	                        /* We have reduced skew space, but overall space doesn't change */
         :	                        hashtable->spaceUsedSkew -= tupleSize;
    0.00 :	  5bd217:       4d 29 a7 a8 00 00 00    sub    %r12,0xa8(%r15)
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
    0.00 :	  5bd21e:       4d 85 ed                test   %r13,%r13
    0.00 :	  5bd221:       74 42                   je     5bd265 <MultiExecHash+0x235>
    0.00 :	  5bd223:       4c 89 eb                mov    %r13,%rbx
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
         :	                tupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
    0.00 :	  5bd226:       8b 43 10                mov    0x10(%rbx),%eax
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
    0.00 :	  5bd229:       45 39 77 44             cmp    %r14d,0x44(%r15)
         :	                /*
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
    0.00 :	  5bd22d:       48 8d 7b 10             lea    0x10(%rbx),%rdi
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
         :	        {
         :	                HashJoinTuple nextHashTuple = hashTuple->next;
    0.00 :	  5bd231:       4c 8b 2b                mov    (%rbx),%r13
         :	                 * This code must agree with ExecHashTableInsert.  We do not use
         :	                 * ExecHashTableInsert directly as ExecHashTableInsert expects a
         :	                 * TupleTableSlot while we already have HashJoinTuples.
         :	                 */
         :	                tuple = HJTUPLE_MINTUPLE(hashTuple);
         :	                tupleSize = HJTUPLE_OVERHEAD + tuple->t_len;
    0.00 :	  5bd234:       4c 8d 60 10             lea    0x10(%rax),%r12
         :
         :	                /* Decide whether to put the tuple in the hash table or a temp file */
         :	                if (batchno == hashtable->curbatch)
    0.00 :	  5bd238:       74 c6                   je     5bd200 <MultiExecHash+0x1d0>
         :	                }
         :	                else
         :	                {
         :	                        /* Put the tuple into a temp file for later batches */
         :	                        Assert(batchno > hashtable->curbatch);
         :	                        ExecHashJoinSaveTuple(tuple, hashvalue,
    0.00 :	  5bd23a:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5bd23e:       49 03 57 68             add    0x68(%r15),%rdx
    0.00 :	  5bd242:       8b 75 a4                mov    -0x5c(%rbp),%esi
    0.00 :	  5bd245:       e8 16 03 00 00          callq  5bd560 <ExecHashJoinSaveTuple>
         :	                                                                  &hashtable->innerBatchFile[batchno]);
         :	                        pfree(hashTuple);
    0.00 :	  5bd24a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5bd24d:       e8 2e b9 1d 00          callq  798b80 <pfree>
         :	                        hashtable->spaceUsed -= tupleSize;
    0.00 :	  5bd252:       4d 29 a7 90 00 00 00    sub    %r12,0x90(%r15)
         :	                        hashtable->spaceUsedSkew -= tupleSize;
    0.00 :	  5bd259:       4d 29 a7 a8 00 00 00    sub    %r12,0xa8(%r15)
         :	        hashvalue = bucket->hashvalue;
         :	        ExecHashGetBucketAndBatch(hashtable, hashvalue, &bucketno, &batchno);
         :
         :	        /* Process all tuples in the bucket */
         :	        hashTuple = bucket->tuples;
         :	        while (hashTuple != NULL)
    0.00 :	  5bd260:       4d 85 ed                test   %r13,%r13
    0.00 :	  5bd263:       75 be                   jne    5bd223 <MultiExecHash+0x1f3>
    0.00 :	  5bd265:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  5bd269:       49 03 77 28             add    0x28(%r15),%rsi
         :	         * to remove A first then ExecHashGetSkewBucket would mistakenly start
         :	         * reporting that B is not in the hashtable, because it would hit the NULL
         :	         * before finding B.  However, we always remove entries in the reverse
         :	         * order of creation, so this failure cannot happen.
         :	         */
         :	        hashtable->skewBucket[bucketToRemove] = NULL;
    0.00 :	  5bd26d:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        hashtable->nSkewBuckets--;
    0.00 :	  5bd274:       41 83 6f 34 01          subl   $0x1,0x34(%r15)
         :	        pfree(bucket);
    0.00 :	  5bd279:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bd27d:       e8 fe b8 1d 00          callq  798b80 <pfree>
         :
         :	        /*
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
    0.00 :	  5bd282:       41 8b 4f 34             mov    0x34(%r15),%ecx
         :	         * order of creation, so this failure cannot happen.
         :	         */
         :	        hashtable->skewBucket[bucketToRemove] = NULL;
         :	        hashtable->nSkewBuckets--;
         :	        pfree(bucket);
         :	        hashtable->spaceUsed -= SKEW_BUCKET_OVERHEAD;
    0.00 :	  5bd286:       49 83 af 90 00 00 00    subq   $0x10,0x90(%r15)
    0.00 :	  5bd28d:       10 
         :	        hashtable->spaceUsedSkew -= SKEW_BUCKET_OVERHEAD;
    0.00 :	  5bd28e:       49 83 af a8 00 00 00    subq   $0x10,0xa8(%r15)
    0.00 :	  5bd295:       10 
         :
         :	        /*
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
    0.00 :	  5bd296:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bd298:       0f 85 d2 fe ff ff       jne    5bd170 <MultiExecHash+0x140>
         :	        {
         :	                hashtable->skewEnabled = false;
         :	                pfree(hashtable->skewBucket);
    0.00 :	  5bd29e:       49 8b 7f 28             mov    0x28(%r15),%rdi
         :	         * If we have removed all skew buckets then give up on skew optimization.
         :	         * Release the arrays since they aren't useful any more.
         :	         */
         :	        if (hashtable->nSkewBuckets == 0)
         :	        {
         :	                hashtable->skewEnabled = false;
    0.00 :	  5bd2a2:       41 c6 47 21 00          movb   $0x0,0x21(%r15)
         :	                pfree(hashtable->skewBucket);
    0.00 :	  5bd2a7:       e8 d4 b8 1d 00          callq  798b80 <pfree>
         :	                pfree(hashtable->skewBucketNums);
    0.00 :	  5bd2ac:       49 8b 7f 38             mov    0x38(%r15),%rdi
    0.00 :	  5bd2b0:       e8 cb b8 1d 00          callq  798b80 <pfree>
         :	                hashtable->skewBucket = NULL;
         :	                hashtable->skewBucketNums = NULL;
         :	                hashtable->spaceUsed -= hashtable->spaceUsedSkew;
    0.00 :	  5bd2b5:       49 8b 87 a8 00 00 00    mov    0xa8(%r15),%rax
         :	        if (hashtable->nSkewBuckets == 0)
         :	        {
         :	                hashtable->skewEnabled = false;
         :	                pfree(hashtable->skewBucket);
         :	                pfree(hashtable->skewBucketNums);
         :	                hashtable->skewBucket = NULL;
    0.00 :	  5bd2bc:       49 c7 47 28 00 00 00    movq   $0x0,0x28(%r15)
    0.00 :	  5bd2c3:       00 
         :	                hashtable->skewBucketNums = NULL;
    0.00 :	  5bd2c4:       49 c7 47 38 00 00 00    movq   $0x0,0x38(%r15)
    0.00 :	  5bd2cb:       00 
         :	                hashtable->spaceUsed -= hashtable->spaceUsedSkew;
    0.00 :	  5bd2cc:       49 29 87 90 00 00 00    sub    %rax,0x90(%r15)
         :	                hashtable->spaceUsedSkew = 0;
    0.00 :	  5bd2d3:       49 c7 87 a8 00 00 00    movq   $0x0,0xa8(%r15)
    0.00 :	  5bd2da:       00 00 00 00 
    0.00 :	  5bd2de:       e9 8d fe ff ff          jmpq   5bd170 <MultiExecHash+0x140>
    0.00 :	  5bd2e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd2e8:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bd2eb:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5bd2ee:       23 55 a4                and    -0x5c(%rbp),%edx
    0.00 :	  5bd2f1:       e9 dc fe ff ff          jmpq   5bd1d2 <MultiExecHash+0x1a2>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
         :	                ExecHashRemoveNextSkewBucket(hashtable);
         :
         :	        /* Check we are not over the total spaceAllowed, either */
         :	        if (hashtable->spaceUsed > hashtable->spaceAllowed)
    0.00 :	  5bd2f6:       49 8b 97 98 00 00 00    mov    0x98(%r15),%rdx
    0.00 :	  5bd2fd:       49 39 97 90 00 00 00    cmp    %rdx,0x90(%r15)
    0.00 :	  5bd304:       0f 87 40 01 00 00       ja     5bd44a <MultiExecHash+0x41a>
         :	                        if (bucketNumber != INVALID_SKEW_BUCKET_NO)
         :	                        {
         :	                                /* It's a skew tuple, so put it into that hash table */
         :	                                ExecHashSkewTableInsert(hashtable, slot, hashvalue,
         :	                                                                                bucketNumber);
         :	                                hashtable->skewTuples += 1;
    0.00 :	  5bd30a:       f2 0f 10 0d 46 1e 1f    movsd  0x1f1e46(%rip),%xmm1        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bd311:       00 
    0.00 :	  5bd312:       66 0f 28 c1             movapd %xmm1,%xmm0
    0.00 :	  5bd316:       f2 41 0f 58 47 60       addsd  0x60(%r15),%xmm0
    0.00 :	  5bd31c:       f2 41 0f 11 47 60       movsd  %xmm0,0x60(%r15)
         :	                        else
         :	                        {
         :	                                /* Not subject to skew optimization, so insert normally */
         :	                                ExecHashTableInsert(hashtable, slot, hashvalue);
         :	                        }
         :	                        hashtable->totalTuples += 1;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:128
   20.00 :	  5bd322:       f2 41 0f 58 4f 58       addsd  0x58(%r15),%xmm1
    0.00 :	  5bd328:       f2 41 0f 11 4f 58       movsd  %xmm1,0x58(%r15)
    0.00 :	  5bd32e:       e9 4d fd ff ff          jmpq   5bd080 <MultiExecHash+0x50>
         :	                }
         :	        }
         :
         :	        /* resize the hash table if needed (NTUP_PER_BUCKET exceeded) */
         :	        if (hashtable->nbuckets != hashtable->nbuckets_optimal)
    0.00 :	  5bd333:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bd336:       41 8b 57 0c             mov    0xc(%r15),%edx
    0.00 :	  5bd33a:       39 d0                   cmp    %edx,%eax
    0.00 :	  5bd33c:       74 02                   je     5bd340 <MultiExecHash+0x310>
         :	ExecHashIncreaseNumBuckets(HashJoinTable hashtable)
         :	{
         :	        HashMemoryChunk chunk;
         :
         :	        /* do nothing if not an increase (it's called increase for a reason) */
         :	        if (hashtable->nbuckets >= hashtable->nbuckets_optimal)
    0.00 :	  5bd33e:       7c 68                   jl     5bd3a8 <MultiExecHash+0x378>
         :
         :	                ExecHashIncreaseNumBuckets(hashtable);
         :	        }
         :
         :	        /* Account for the buckets in spaceUsed (reported in EXPLAIN ANALYZE) */
         :	        hashtable->spaceUsed += hashtable->nbuckets * sizeof(HashJoinTuple);
    0.00 :	  5bd340:       48 98                   cltq   
    0.00 :	  5bd342:       48 c1 e0 03             shl    $0x3,%rax
    0.00 :	  5bd346:       49 03 87 90 00 00 00    add    0x90(%r15),%rax
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd34d:       49 3b 87 a0 00 00 00    cmp    0xa0(%r15),%rax
         :
         :	                ExecHashIncreaseNumBuckets(hashtable);
         :	        }
         :
         :	        /* Account for the buckets in spaceUsed (reported in EXPLAIN ANALYZE) */
         :	        hashtable->spaceUsed += hashtable->nbuckets * sizeof(HashJoinTuple);
    0.00 :	  5bd354:       49 89 87 90 00 00 00    mov    %rax,0x90(%r15)
         :	        if (hashtable->spaceUsed > hashtable->spacePeak)
    0.00 :	  5bd35b:       76 07                   jbe    5bd364 <MultiExecHash+0x334>
         :	                hashtable->spacePeak = hashtable->spaceUsed;
    0.00 :	  5bd35d:       49 89 87 a0 00 00 00    mov    %rax,0xa0(%r15)
         :
         :	        /* must provide our own instrumentation support */
         :	        if (node->ps.instrument)
    0.00 :	  5bd364:       48 8b 45 80             mov    -0x80(%rbp),%rax
    0.00 :	  5bd368:       48 8b 78 18             mov    0x18(%rax),%rdi
    0.00 :	  5bd36c:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd36f:       74 0b                   je     5bd37c <MultiExecHash+0x34c>
         :	                InstrStopNode(node->ps.instrument, hashtable->totalTuples);
    0.00 :	  5bd371:       f2 41 0f 10 47 58       movsd  0x58(%r15),%xmm0
    0.00 :	  5bd377:       e8 54 a8 ff ff          callq  5b7bd0 <InstrStopNode>
         :	         * parent Hashjoin node is expected to know how to fish it out of our node
         :	         * state.  Ugly but not really worth cleaning up, since Hashjoin knows
         :	         * quite a bit more about Hash besides that.
         :	         */
         :	        return NULL;
         :	}
    0.00 :	  5bd37c:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  5bd380:       31 c0                   xor    %eax,%eax
    0.00 :	  5bd382:       5b                      pop    %rbx
    0.00 :	  5bd383:       41 5c                   pop    %r12
    0.00 :	  5bd385:       41 5d                   pop    %r13
    0.00 :	  5bd387:       41 5e                   pop    %r14
    0.00 :	  5bd389:       41 5f                   pop    %r15
    0.00 :	  5bd38b:       c9                      leaveq 
    0.00 :	  5bd38c:       c3                      retq   
         :	                                hashtable->skewTuples += 1;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Not subject to skew optimization, so insert normally */
         :	                                ExecHashTableInsert(hashtable, slot, hashvalue);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHash.c:126
   10.00 :	  5bd38d:       8b 55 d4                mov    -0x2c(%rbp),%edx
   10.00 :	  5bd390:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5bd393:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bd396:       e8 75 f0 ff ff          callq  5bc410 <ExecHashTableInsert>
    0.00 :	  5bd39b:       f2 0f 10 0d b5 1d 1f    movsd  0x1f1db5(%rip),%xmm1        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bd3a2:       00 
    0.00 :	  5bd3a3:       e9 7a ff ff ff          jmpq   5bd322 <MultiExecHash+0x2f2>
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3a8:       48 63 fa                movslq %edx,%rdi
         :
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
    0.00 :	  5bd3ab:       41 89 17                mov    %edx,(%r15)
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3ae:       e8 4d 64 1c 00          callq  783800 <my_log2>
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3b3:       49 63 37                movslq (%r15),%rsi
    0.00 :	  5bd3b6:       49 8b 7f 18             mov    0x18(%r15),%rdi
         :	        /*
         :	         * We already know the optimal number of buckets, so let's just
         :	         * compute the log2_nbuckets for it.
         :	         */
         :	        hashtable->nbuckets = hashtable->nbuckets_optimal;
         :	        hashtable->log2_nbuckets = my_log2(hashtable->nbuckets_optimal);
    0.00 :	  5bd3ba:       41 89 47 04             mov    %eax,0x4(%r15)
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3be:       48 c1 e6 03             shl    $0x3,%rsi
    0.00 :	  5bd3c2:       e8 29 b9 1d 00          callq  798cf0 <repalloc>
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3c7:       49 63 17                movslq (%r15),%rdx
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3ca:       48 89 c7                mov    %rax,%rdi
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3cd:       31 f6                   xor    %esi,%esi
         :	         * Just reallocate the proper number of buckets - we don't need to
         :	         * walk through them - we can walk the dense-allocated chunks
         :	         * (just like in ExecHashIncreaseNumBatches, but without all the
         :	         * copying into new chunks)
         :	         */
         :	        hashtable->buckets =
    0.00 :	  5bd3cf:       49 89 47 18             mov    %rax,0x18(%r15)
         :	                (HashJoinTuple *) repalloc(hashtable->buckets,
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
    0.00 :	  5bd3d3:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :	  5bd3d7:       e8 44 c0 ea ff          callq  469420 <memset@plt>
         :
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
    0.00 :	  5bd3dc:       49 8b bf c8 00 00 00    mov    0xc8(%r15),%rdi
    0.00 :	  5bd3e3:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd3e6:       74 5a                   je     5bd442 <MultiExecHash+0x412>
    0.00 :	  5bd3e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5bd3ef:       00 
         :	        {
         :	                /* process all tuples stored in this chunk */
         :	                size_t idx = 0;
         :	                while (idx < chunk->used)
    0.00 :	  5bd3f0:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5bd3f5:       74 42                   je     5bd439 <MultiExecHash+0x409>
         :	                {
         :	                        HashJoinTuple hashTuple = (HashJoinTuple) (chunk->data + idx);
    0.00 :	  5bd3f7:       4c 8d 47 20             lea    0x20(%rdi),%r8
    0.00 :	  5bd3fb:       31 f6                   xor    %esi,%esi
    0.00 :	  5bd3fd:       0f 1f 00                nopl   (%rax)
    0.00 :	  5bd400:       49 8d 0c 30             lea    (%r8,%rsi,1),%rcx
         :	ExecHashGetBucketAndBatch(HashJoinTable hashtable,
         :	                                                  uint32 hashvalue,
         :	                                                  int *bucketno,
         :	                                                  int *batchno)
         :	{
         :	        uint32          nbuckets = (uint32) hashtable->nbuckets;
    0.00 :	  5bd404:       41 8b 07                mov    (%r15),%eax
         :	                {
         :	                        HashJoinTuple hashTuple = (HashJoinTuple) (chunk->data + idx);
         :	                        int             bucketno;
         :	                        int             batchno;
         :
         :	                        ExecHashGetBucketAndBatch(hashtable, hashTuple->hashvalue,
    0.00 :	  5bd407:       8b 51 08                mov    0x8(%rcx),%edx
         :	                *bucketno = hashvalue & (nbuckets - 1);
         :	                *batchno = (hashvalue >> hashtable->log2_nbuckets) & (nbatch - 1);
         :	        }
         :	        else
         :	        {
         :	                *bucketno = hashvalue & (nbuckets - 1);
    0.00 :	  5bd40a:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bd40d:       21 d0                   and    %edx,%eax
         :
         :	                        ExecHashGetBucketAndBatch(hashtable, hashTuple->hashvalue,
         :	                                                                          &bucketno, &batchno);
         :
         :	                        /* add the tuple to the proper bucket */
         :	                        hashTuple->next = hashtable->buckets[bucketno];
    0.00 :	  5bd40f:       48 63 d0                movslq %eax,%rdx
    0.00 :	  5bd412:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd416:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5bd41a:       48 89 01                mov    %rax,(%rcx)
         :	                        hashtable->buckets[bucketno] = hashTuple;
    0.00 :	  5bd41d:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	  5bd421:       48 89 0c d0             mov    %rcx,(%rax,%rdx,8)
         :
         :	                        /* advance index past the tuple */
         :	                        idx += MAXALIGN(HJTUPLE_OVERHEAD +
    0.00 :	  5bd425:       8b 41 10                mov    0x10(%rcx),%eax
    0.00 :	  5bd428:       48 83 c0 17             add    $0x17,%rax
    0.00 :	  5bd42c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  5bd430:       48 01 c6                add    %rax,%rsi
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
         :	        {
         :	                /* process all tuples stored in this chunk */
         :	                size_t idx = 0;
         :	                while (idx < chunk->used)
    0.00 :	  5bd433:       48 3b 77 10             cmp    0x10(%rdi),%rsi
    0.00 :	  5bd437:       72 c7                   jb     5bd400 <MultiExecHash+0x3d0>
         :	                                                                   hashtable->nbuckets * sizeof(HashJoinTuple));
         :
         :	        memset(hashtable->buckets, 0, sizeof(void *) * hashtable->nbuckets);
         :
         :	        /* scan through all tuples in all chunks to rebuild the hash table */
         :	        for (chunk = hashtable->chunks; chunk != NULL; chunk = chunk->next)
    0.00 :	  5bd439:       48 8b 7f 18             mov    0x18(%rdi),%rdi
    0.00 :	  5bd43d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bd440:       75 ae                   jne    5bd3f0 <MultiExecHash+0x3c0>
    0.00 :	  5bd442:       41 8b 07                mov    (%r15),%eax
    0.00 :	  5bd445:       e9 f6 fe ff ff          jmpq   5bd340 <MultiExecHash+0x310>
         :	        while (hashtable->spaceUsedSkew > hashtable->spaceAllowedSkew)
         :	                ExecHashRemoveNextSkewBucket(hashtable);
         :
         :	        /* Check we are not over the total spaceAllowed, either */
         :	        if (hashtable->spaceUsed > hashtable->spaceAllowed)
         :	                ExecHashIncreaseNumBatches(hashtable);
    0.00 :	  5bd44a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bd44d:       e8 8e ec ff ff          callq  5bc0e0 <ExecHashIncreaseNumBatches>
    0.00 :	  5bd452:       e9 b3 fe ff ff          jmpq   5bd30a <MultiExecHash+0x2da>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000642780 <pgstat_init_function_usage>:
         :	 * Called by the executor before invoking a function.
         :	 */
         :	void
         :	pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
         :	                                                   PgStat_FunctionCallUsage *fcu)
         :	{
    0.00 :	  642780:       55                      push   %rbp
   10.00 :	  642781:       48 89 e5                mov    %rsp,%rbp
   10.00 :	  642784:       41 54                   push   %r12
    0.00 :	  642786:       49 89 fc                mov    %rdi,%r12
   10.00 :	  642789:       53                      push   %rbx
   40.00 :	  64278a:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  64278d:       48 83 ec 70             sub    $0x70,%rsp
         :	        PgStat_BackendFunctionEntry *htabent;
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
    0.00 :	  642791:       48 8b 17                mov    (%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
   10.00 :	  642794:       0f b6 42 10             movzbl 0x10(%rdx),%eax
    0.00 :	  642798:       3b 05 06 94 53 00       cmp    0x539406(%rip),%eax        # b7bba4 <pgstat_track_functions>
   20.00 :	  64279e:       0f 8d ac 00 00 00       jge    642850 <pgstat_init_function_usage+0xd0>
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
         :	                return;
         :	        }
         :
         :	        if (!pgStatFunctions)
    0.00 :	  6427a4:       48 83 3d 04 95 53 00    cmpq   $0x0,0x539504(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427ab:       00 
    0.00 :	  6427ac:       0f 84 de 00 00 00       je     642890 <pgstat_init_function_usage+0x110>
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427b2:       48 8b 3d f7 94 53 00    mov    0x5394f7(%rip),%rdi        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427b9:       48 8d 72 08             lea    0x8(%rdx),%rsi
    0.00 :	  6427bd:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  6427c1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6427c6:       e8 d5 1e 14 00          callq  7846a0 <hash_search>
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427cb:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427cf:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6427d2:       48 8d 40 08             lea    0x8(%rax),%rax
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427d6:       74 40                   je     642818 <pgstat_init_function_usage+0x98>
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
    0.00 :	  6427d8:       48 89 03                mov    %rax,(%rbx)
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427db:       48 8b 42 10             mov    0x10(%rdx),%rax
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  6427df:       48 8d 7b 28             lea    0x28(%rbx),%rdi
    0.00 :	  6427e3:       31 f6                   xor    %esi,%esi
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427e5:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  6427e9:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  6427ed:       48 89 43 10             mov    %rax,0x10(%rbx)
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
    0.00 :	  6427f1:       48 8b 05 28 97 53 00    mov    0x539728(%rip),%rax        # b7bf20 <total_func_time>
    0.00 :	  6427f8:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  6427fc:       48 8b 05 25 97 53 00    mov    0x539725(%rip),%rax        # b7bf28 <total_func_time+0x8>
    0.00 :	  642803:       48 89 43 20             mov    %rax,0x20(%rbx)
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  642807:       e8 b4 6d e2 ff          callq  4695c0 <gettimeofday@plt>
         :	}
    0.00 :	  64280c:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  642810:       5b                      pop    %rbx
    0.00 :	  642811:       41 5c                   pop    %r12
    0.00 :	  642813:       c9                      leaveq 
    0.00 :	  642814:       c3                      retq   
    0.00 :	  642815:       0f 1f 00                nopl   (%rax)
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642818:       a8 07                   test   $0x7,%al
    0.00 :	  64281a:       75 44                   jne    642860 <pgstat_init_function_usage+0xe0>
    0.00 :	  64281c:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642823:       00 
    0.00 :	  642824:       48 c7 42 10 00 00 00    movq   $0x0,0x10(%rdx)
    0.00 :	  64282b:       00 
    0.00 :	  64282c:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  642833:       00 
    0.00 :	  642834:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	  64283b:       00 
    0.00 :	  64283c:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	  642843:       00 
    0.00 :	  642844:       eb 92                   jmp    6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  642846:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64284d:       00 00 00 
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
         :	        {
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
    0.00 :	  642850:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
         :	}
    0.00 :	  642857:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  64285b:       5b                      pop    %rbx
    0.00 :	  64285c:       41 5c                   pop    %r12
    0.00 :	  64285e:       c9                      leaveq 
    0.00 :	  64285f:       c3                      retq   
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642860:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642867:       00 
    0.00 :	  642868:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  64286f:       00 
    0.00 :	  642870:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  642877:       00 
    0.00 :	  642878:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  64287f:       00 
    0.00 :	  642880:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  642887:       00 
    0.00 :	  642888:       e9 4b ff ff ff          jmpq   6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  64288d:       0f 1f 00                nopl   (%rax)
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  642890:       48 8d 55 80             lea    -0x80(%rbp),%rdx
    0.00 :	  642894:       31 c0                   xor    %eax,%eax
    0.00 :	  642896:       b9 0d 00 00 00          mov    $0xd,%ecx
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  64289b:       be 00 02 00 00          mov    $0x200,%esi
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  6428a0:       48 89 d7                mov    %rdx,%rdi
    0.00 :	  6428a3:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                hash_ctl.keysize = sizeof(Oid);
    0.00 :	  6428a6:       48 c7 45 a8 04 00 00    movq   $0x4,-0x58(%rbp)
    0.00 :	  6428ad:       00 
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
    0.00 :	  6428ae:       48 c7 45 b0 30 00 00    movq   $0x30,-0x50(%rbp)
    0.00 :	  6428b5:       00 
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428b6:       bf 1c f0 89 00          mov    $0x89f01c,%edi
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
    0.00 :	  6428bb:       48 c7 45 b8 50 4f 78    movq   $0x784f50,-0x48(%rbp)
    0.00 :	  6428c2:       00 
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428c3:       b1 30                   mov    $0x30,%cl
    0.00 :	  6428c5:       e8 e6 1f 14 00          callq  7848b0 <hash_create>
    0.00 :	  6428ca:       48 89 05 df 93 53 00    mov    %rax,0x5393df(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6428d1:       49 8b 14 24             mov    (%r12),%rdx
    0.00 :	  6428d5:       e9 d8 fe ff ff          jmpq   6427b2 <pgstat_init_function_usage+0x32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1583
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006425d0 <pgstat_end_function_usage>:
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6425d0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   11.11 :	  6425d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6425d4:       41 55                   push   %r13
   33.33 :	  6425d6:       41 89 f5                mov    %esi,%r13d
   11.11 :	  6425d9:       41 54                   push   %r12
   11.11 :	  6425db:       49 89 fc                mov    %rdi,%r12
    0.00 :	  6425de:       53                      push   %rbx
   11.11 :	  6425df:       48 83 ec 18             sub    $0x18,%rsp
         :	        PgStat_FunctionCounts *fs = fcu->fs;
    0.00 :	  6425e3:       48 8b 1f                mov    (%rdi),%rbx
         :	        instr_time      f_total;
         :	        instr_time      f_others;
         :	        instr_time      f_self;
         :
         :	        /* stats not wanted? */
         :	        if (fs == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1583
   11.11 :	  6425e6:       48 85 db                test   %rbx,%rbx
    0.00 :	  6425e9:       0f 84 6f 01 00 00       je     64275e <pgstat_end_function_usage+0x18e>
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
    0.00 :	  6425ef:       48 8d 7d d0             lea    -0x30(%rbp),%rdi
    0.00 :	  6425f3:       31 f6                   xor    %esi,%esi
    0.00 :	  6425f5:       e8 c6 6f e2 ff          callq  4695c0 <gettimeofday@plt>
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  6425fa:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
    0.00 :	  6425fe:       49 2b 4c 24 30          sub    0x30(%r12),%rcx
    0.00 :	  642603:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642607:       49 2b 44 24 28          sub    0x28(%r12),%rax
    0.00 :	  64260c:       48 85 c9                test   %rcx,%rcx
    0.00 :	  64260f:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642613:       49 89 c1                mov    %rax,%r9
    0.00 :	  642616:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  64261a:       79 1c                   jns    642638 <pgstat_end_function_usage+0x68>
    0.00 :	  64261c:       0f 1f 40 00             nopl   0x0(%rax)
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  642620:       48 83 e8 01             sub    $0x1,%rax
         :	        if (fs == NULL)
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  642624:       48 81 c1 40 42 0f 00    add    $0xf4240,%rcx
    0.00 :	  64262b:       78 f3                   js     642620 <pgstat_end_function_usage+0x50>
    0.00 :	  64262d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  642631:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642635:       49 89 c1                mov    %rax,%r9
         :
         :	        /* self usage: elapsed minus anything already charged to other calls */
         :	        f_others = total_func_time;
    0.00 :	  642638:       4c 8b 05 e9 98 53 00    mov    0x5398e9(%rip),%r8        # b7bf28 <total_func_time+0x8>
    0.00 :	  64263f:       4c 8b 15 da 98 53 00    mov    0x5398da(%rip),%r10        # b7bf20 <total_func_time>
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
    0.00 :	  642646:       4c 89 c0                mov    %r8,%rax
    0.00 :	  642649:       4c 89 d2                mov    %r10,%rdx
    0.00 :	  64264c:       49 2b 54 24 18          sub    0x18(%r12),%rdx
    0.00 :	  642651:       49 2b 44 24 20          sub    0x20(%r12),%rax
    0.00 :	  642656:       79 14                   jns    64266c <pgstat_end_function_usage+0x9c>
    0.00 :	  642658:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  64265f:       00 
    0.00 :	  642660:       48 83 ea 01             sub    $0x1,%rdx
    0.00 :	  642664:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  64266a:       78 f4                   js     642660 <pgstat_end_function_usage+0x90>
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
    0.00 :	  64266c:       4c 89 cf                mov    %r9,%rdi
    0.00 :	  64266f:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  642672:       48 29 d7                sub    %rdx,%rdi
    0.00 :	  642675:       48 29 c6                sub    %rax,%rsi
    0.00 :	  642678:       79 13                   jns    64268d <pgstat_end_function_usage+0xbd>
    0.00 :	  64267a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  642680:       48 83 ef 01             sub    $0x1,%rdi
    0.00 :	  642684:       48 81 c6 40 42 0f 00    add    $0xf4240,%rsi
    0.00 :	  64268b:       78 f3                   js     642680 <pgstat_end_function_usage+0xb0>
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  64268d:       4a 8d 04 06             lea    (%rsi,%r8,1),%rax
    0.00 :	  642691:       4a 8d 14 17             lea    (%rdi,%r10,1),%rdx
    0.00 :	  642695:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  64269b:       48 89 15 7e 98 53 00    mov    %rdx,0x53987e(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426a2:       48 89 05 7f 98 53 00    mov    %rax,0x53987f(%rip)        # b7bf28 <total_func_time+0x8>
    0.00 :	  6426a9:       7e 25                   jle    6426d0 <pgstat_end_function_usage+0x100>
    0.00 :	  6426ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6426b0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426b6:       48 83 c2 01             add    $0x1,%rdx
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  6426ba:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426c0:       7f ee                   jg     6426b0 <pgstat_end_function_usage+0xe0>
    0.00 :	  6426c2:       48 89 15 57 98 53 00    mov    %rdx,0x539857(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426c9:       48 89 05 58 98 53 00    mov    %rax,0x539858(%rip)        # b7bf28 <total_func_time+0x8>
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426d0:       48 89 c8                mov    %rcx,%rax
    0.00 :	  6426d3:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	  6426d8:       4c 89 ca                mov    %r9,%rdx
    0.00 :	  6426db:       49 03 54 24 08          add    0x8(%r12),%rdx
    0.00 :	  6426e0:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426e6:       48 89 45 d8             mov    %rax,-0x28(%rbp)
    0.00 :	  6426ea:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  6426ee:       7e 1a                   jle    64270a <pgstat_end_function_usage+0x13a>
    0.00 :	  6426f0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426f6:       48 83 c2 01             add    $0x1,%rdx
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426fa:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642700:       7f ee                   jg     6426f0 <pgstat_end_function_usage+0x120>
    0.00 :	  642702:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  642706:       48 89 45 d8             mov    %rax,-0x28(%rbp)
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
    0.00 :	  64270a:       45 84 ed                test   %r13b,%r13b
    0.00 :	  64270d:       75 61                   jne    642770 <pgstat_end_function_usage+0x1a0>
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64270f:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642713:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  642717:       48 8b 45 d8             mov    -0x28(%rbp),%rax
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  64271b:       48 01 7b 18             add    %rdi,0x18(%rbx)
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64271f:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  642723:       48 89 f0                mov    %rsi,%rax
    0.00 :	  642726:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	  64272a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642730:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642734:       7e 21                   jle    642757 <pgstat_end_function_usage+0x187>
    0.00 :	  642736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64273d:       00 00 00 
    0.00 :	  642740:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  642746:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  64274b:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642751:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642755:       7f e9                   jg     642740 <pgstat_end_function_usage+0x170>
         :
         :	        /* indicate that we have something to send */
         :	        have_function_stats = true;
    0.00 :	  642757:       c6 05 4a 95 53 00 01    movb   $0x1,0x53954a(%rip)        # b7bca8 <have_function_stats>
         :	}
    0.00 :	  64275e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  642762:       5b                      pop    %rbx
    0.00 :	  642763:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
   11.11 :	  642765:       41 5d                   pop    %r13
    0.00 :	  642767:       c9                      leaveq 
    0.00 :	  642768:       c3                      retq   
    0.00 :	  642769:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
    0.00 :	  642770:       48 83 03 01             addq   $0x1,(%rbx)
    0.00 :	  642774:       eb 99                   jmp    64270f <pgstat_end_function_usage+0x13f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:654
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:736
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798110 <AllocSetAlloc>:
         :	 *              MAXALIGN_DOWN(SIZE_MAX) - ALLOC_BLOCKHDRSZ - ALLOC_CHUNKHDRSZ
         :	 * All callers use a much-lower limit.
         :	 */
         :	static void *
         :	AllocSetAlloc(MemoryContext context, Size size)
         :	{
    0.00 :	  798110:       55                      push   %rbp
    0.00 :	  798111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798114:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  798118:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  79811c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79811f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:654
   22.22 :	  798123:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  798127:       49 89 f6                mov    %rsi,%r14
    0.00 :	  79812a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  79812e:       48 83 ec 30             sub    $0x30,%rsp
         :
         :	        /*
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
    0.00 :	  798132:       48 39 b7 b0 00 00 00    cmp    %rsi,0xb0(%rdi)
    0.00 :	  798139:       72 6d                   jb     7981a8 <AllocSetAlloc+0x98>
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  79813b:       31 f6                   xor    %esi,%esi
    0.00 :	  79813d:       49 83 fe 08             cmp    $0x8,%r14
    0.00 :	  798141:       77 3d                   ja     798180 <AllocSetAlloc+0x70>
         :	         * corresponding free list to see if there is a free chunk we could reuse.
         :	         * If one is found, remove it from the free list, make it again a member
         :	         * of the alloc set and return its data address.
         :	         */
         :	        fidx = AllocSetFreeIndex(size);
         :	        chunk = set->freelist[fidx];
    0.00 :	  798143:       48 63 c6                movslq %esi,%rax
    0.00 :	  798146:       48 8d 48 08             lea    0x8(%rax),%rcx
    0.00 :	  79814a:       49 8b 14 cc             mov    (%r12,%rcx,8),%rdx
         :	        if (chunk != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:736
   22.22 :	  79814e:       48 85 d2                test   %rdx,%rdx
    0.00 :	  798151:       0f 84 c9 00 00 00       je     798220 <AllocSetAlloc+0x110>
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:740
   11.11 :	  798157:       48 8b 02                mov    (%rdx),%rax
   22.22 :	  79815a:       49 89 04 cc             mov    %rax,(%r12,%rcx,8)
         :	                /* fill the allocated space with junk */
         :	                randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	                AllocAllocInfo(set, chunk);
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  79815e:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
         :
         :	                chunk->aset = (void *) set;
    0.00 :	  798162:       4c 89 22                mov    %r12,(%rdx)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
   11.11 :	  798165:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
   11.11 :	  798169:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  79816d:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  798171:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  798175:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  798179:       c9                      leaveq 
    0.00 :	  79817a:       c3                      retq   
    0.00 :	  79817b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798180:       49 8d 46 ff             lea    -0x1(%r14),%rax
    0.00 :	  798184:       48 89 c2                mov    %rax,%rdx
    0.00 :	  798187:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  79818b:       89 d0                   mov    %edx,%eax
    0.00 :	  79818d:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798190:       85 c0                   test   %eax,%eax
    0.00 :	  798192:       74 7c                   je     798210 <AllocSetAlloc+0x100>
    0.00 :	  798194:       89 c0                   mov    %eax,%eax
    0.00 :	  798196:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  79819d:       8d 70 08                lea    0x8(%rax),%esi
    0.00 :	  7981a0:       eb a1                   jmp    798143 <AllocSetAlloc+0x33>
    0.00 :	  7981a2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
    0.00 :	  7981a8:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  7981ac:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  7981b0:       4c 8d 6b 30             lea    0x30(%rbx),%r13
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981b4:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7981b7:       e8 74 14 cd ff          callq  469630 <malloc@plt>
         :	                if (block == NULL)
    0.00 :	  7981bc:       48 85 c0                test   %rax,%rax
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981bf:       48 89 c2                mov    %rax,%rdx
         :	                if (block == NULL)
    0.00 :	  7981c2:       0f 84 2e 02 00 00       je     7983f6 <AllocSetAlloc+0x2e6>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
    0.00 :	  7981c8:       4c 89 20                mov    %r12,(%rax)
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
    0.00 :	  7981cb:       48 8d 72 20             lea    0x20(%rdx),%rsi
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981cf:       4a 8d 04 28             lea    (%rax,%r13,1),%rax
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
    0.00 :	  7981d3:       4c 89 62 20             mov    %r12,0x20(%rdx)
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981d7:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	  7981db:       48 89 42 10             mov    %rax,0x10(%rdx)
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
         :	                chunk->size = chunk_size;
    0.00 :	  7981df:       48 89 5e 08             mov    %rbx,0x8(%rsi)
         :
         :	                /*
         :	                 * Stick the new block underneath the active allocation block, so that
         :	                 * we don't lose the use of the space remaining therein.
         :	                 */
         :	                if (set->blocks != NULL)
    0.00 :	  7981e3:       49 8b 4c 24 38          mov    0x38(%r12),%rcx
    0.00 :	  7981e8:       48 85 c9                test   %rcx,%rcx
    0.00 :	  7981eb:       0f 84 cf 01 00 00       je     7983c0 <AllocSetAlloc+0x2b0>
         :	                {
         :	                        block->next = set->blocks->next;
    0.00 :	  7981f1:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  7981f5:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                        set->blocks->next = block;
    0.00 :	  7981f9:       48 89 51 08             mov    %rdx,0x8(%rcx)
         :	                 * if any, NOACCESS.
         :	                 */
         :	                VALGRIND_MAKE_MEM_NOACCESS((char *) chunk + ALLOC_CHUNK_PUBLIC,
         :	                                                 chunk_size + ALLOC_CHUNKHDRSZ - ALLOC_CHUNK_PUBLIC);
         :
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  7981fd:       48 8d 46 10             lea    0x10(%rsi),%rax
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798201:       e9 5f ff ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  798206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  79820d:       00 00 00 
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798210:       89 d0                   mov    %edx,%eax
    0.00 :	  798212:       0f b6 b0 80 1e 8e 00    movzbl 0x8e1e80(%rax),%esi
    0.00 :	  798219:       e9 25 ff ff ff          jmpq   798143 <AllocSetAlloc+0x33>
    0.00 :	  79821e:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798220:       4d 8b 4c 24 38          mov    0x38(%r12),%r9
         :	        }
         :
         :	        /*
         :	         * Choose the actual chunk size to allocate.
         :	         */
         :	        chunk_size = (1 << ALLOC_MINBITS) << fidx;
    0.00 :	  798225:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  79822a:       89 f1                   mov    %esi,%ecx
    0.00 :	  79822c:       d3 e0                   shl    %cl,%eax
    0.00 :	  79822e:       4c 63 f8                movslq %eax,%r15
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798231:       4d 85 c9                test   %r9,%r9
    0.00 :	  798234:       0f 84 ce 00 00 00       je     798308 <AllocSetAlloc+0x1f8>
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  79823a:       49 8b 79 10             mov    0x10(%r9),%rdi
    0.00 :	  79823e:       4d 8b 41 18             mov    0x18(%r9),%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798242:       49 8d 47 10             lea    0x10(%r15),%rax
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  798246:       49 29 f8                sub    %rdi,%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798249:       49 39 c0                cmp    %rax,%r8
    0.00 :	  79824c:       0f 83 52 01 00 00       jae    7983a4 <AllocSetAlloc+0x294>
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  798252:       49 83 f8 17             cmp    $0x17,%r8
    0.00 :	  798256:       0f 86 ac 00 00 00       jbe    798308 <AllocSetAlloc+0x1f8>
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  79825c:       41 ba 01 00 00 00       mov    $0x1,%r10d
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798262:       49 c7 c3 f0 ff ff ff    mov    $0xfffffffffffffff0,%r11
    0.00 :	  798269:       eb 5d                   jmp    7982c8 <AllocSetAlloc+0x1b8>
    0.00 :	  79826b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798270:       89 c0                   mov    %eax,%eax
    0.00 :	  798272:       0f b6 88 80 1e 8e 00    movzbl 0x8e1e80(%rax),%ecx
    0.00 :	  798279:       4c 89 d0                mov    %r10,%rax
    0.00 :	  79827c:       8d 51 08                lea    0x8(%rcx),%edx
    0.00 :	  79827f:       83 c1 0b                add    $0xb,%ecx
    0.00 :	  798282:       48 d3 e0                shl    %cl,%rax
         :	                                /*
         :	                                 * In most cases, we'll get back the index of the next larger
         :	                                 * freelist than the one we need to put this chunk on.  The
         :	                                 * exception is when availchunk is exactly a power of 2.
         :	                                 */
         :	                                if (availchunk != ((Size) 1 << (a_fidx + ALLOC_MINBITS)))
    0.00 :	  798285:       48 39 c6                cmp    %rax,%rsi
    0.00 :	  798288:       74 0c                   je     798296 <AllocSetAlloc+0x186>
         :	                                {
         :	                                        a_fidx--;
    0.00 :	  79828a:       83 ea 01                sub    $0x1,%edx
         :	                                        Assert(a_fidx >= 0);
         :	                                        availchunk = ((Size) 1 << (a_fidx + ALLOC_MINBITS));
    0.00 :	  79828d:       4c 89 d6                mov    %r10,%rsi
    0.00 :	  798290:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  798293:       48 d3 e6                shl    %cl,%rsi
         :	                                chunk = (AllocChunk) (block->freeptr);
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798296:       48 8d 44 37 10          lea    0x10(%rdi,%rsi,1),%rax
    0.00 :	  79829b:       49 89 41 10             mov    %rax,0x10(%r9)
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  79829f:       4c 89 d8                mov    %r11,%rax
         :
         :	                                chunk->size = availchunk;
    0.00 :	  7982a2:       48 89 77 08             mov    %rsi,0x8(%rdi)
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  7982a6:       48 29 f0                sub    %rsi,%rax
    0.00 :	  7982a9:       49 01 c0                add    %rax,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982ac:       48 63 c2                movslq %edx,%rax
    0.00 :	  7982af:       48 83 c0 08             add    $0x8,%rax
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982b3:       49 83 f8 17             cmp    $0x17,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982b7:       49 8b 14 c4             mov    (%r12,%rax,8),%rdx
    0.00 :	  7982bb:       48 89 17                mov    %rdx,(%rdi)
         :	                                set->freelist[a_fidx] = chunk;
    0.00 :	  7982be:       49 89 3c c4             mov    %rdi,(%r12,%rax,8)
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982c2:       76 44                   jbe    798308 <AllocSetAlloc+0x1f8>
    0.00 :	  7982c4:       49 8b 79 10             mov    0x10(%r9),%rdi
         :	                        {
         :	                                Size            availchunk = availspace - ALLOC_CHUNKHDRSZ;
    0.00 :	  7982c8:       49 8d 70 f0             lea    -0x10(%r8),%rsi
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  7982cc:       31 d2                   xor    %edx,%edx
    0.00 :	  7982ce:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  7982d3:       48 83 fe 08             cmp    $0x8,%rsi
    0.00 :	  7982d7:       76 ac                   jbe    798285 <AllocSetAlloc+0x175>
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  7982d9:       49 8d 40 ef             lea    -0x11(%r8),%rax
    0.00 :	  7982dd:       48 89 c2                mov    %rax,%rdx
    0.00 :	  7982e0:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  7982e4:       89 d0                   mov    %edx,%eax
    0.00 :	  7982e6:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7982e9:       85 c0                   test   %eax,%eax
    0.00 :	  7982eb:       75 83                   jne    798270 <AllocSetAlloc+0x160>
    0.00 :	  7982ed:       89 d0                   mov    %edx,%eax
    0.00 :	  7982ef:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
    0.00 :	  7982f6:       4c 89 d0                mov    %r10,%rax
    0.00 :	  7982f9:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  7982fc:       48 d3 e0                shl    %cl,%rax
    0.00 :	  7982ff:       eb 84                   jmp    798285 <AllocSetAlloc+0x175>
    0.00 :	  798301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
    0.00 :	  798308:       49 8b 94 24 a8 00 00    mov    0xa8(%r12),%rdx
    0.00 :	  79830f:       00 
         :	                set->nextBlockSize <<= 1;
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798310:       49 8b 8c 24 a0 00 00    mov    0xa0(%r12),%rcx
    0.00 :	  798317:       00 
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  798318:       48 8d 04 12             lea    (%rdx,%rdx,1),%rax
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  79831c:       48 39 c8                cmp    %rcx,%rax
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  79831f:       49 89 84 24 a8 00 00    mov    %rax,0xa8(%r12)
    0.00 :	  798326:       00 
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798327:       76 08                   jbe    798331 <AllocSetAlloc+0x221>
         :	                        set->nextBlockSize = set->maxBlockSize;
    0.00 :	  798329:       49 89 8c 24 a8 00 00    mov    %rcx,0xa8(%r12)
    0.00 :	  798330:       00 
         :
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  798331:       4d 8d 6f 30             lea    0x30(%r15),%r13
         :	                while (blksize < required_size)
    0.00 :	  798335:       4c 39 ea                cmp    %r13,%rdx
    0.00 :	  798338:       73 0e                   jae    798348 <AllocSetAlloc+0x238>
    0.00 :	  79833a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        blksize <<= 1;
    0.00 :	  798340:       48 01 d2                add    %rdx,%rdx
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                while (blksize < required_size)
    0.00 :	  798343:       49 39 d5                cmp    %rdx,%r13
    0.00 :	  798346:       77 f8                   ja     798340 <AllocSetAlloc+0x230>
    0.00 :	  798348:       48 89 d3                mov    %rdx,%rbx
    0.00 :	  79834b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                while (block == NULL && blksize > 1024 * 1024)
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  798350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  798353:       e8 d8 12 cd ff          callq  469630 <malloc@plt>
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798358:       48 85 c0                test   %rax,%rax
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  79835b:       48 89 c2                mov    %rax,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  79835e:       74 78                   je     7983d8 <AllocSetAlloc+0x2c8>
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798360:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798363:       49 89 d1                mov    %rdx,%r9
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798366:       0f 84 10 01 00 00       je     79847c <AllocSetAlloc+0x36c>
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  79836c:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
    0.00 :	  798370:       4c 89 22                mov    %r12,(%rdx)
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  798373:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                block->endptr = ((char *) block) + blksize;
    0.00 :	  798377:       48 8d 04 1a             lea    (%rdx,%rbx,1),%rax
    0.00 :	  79837b:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  79837f:       49 83 bc 24 b8 00 00    cmpq   $0x0,0xb8(%r12)
    0.00 :	  798386:       00 00 
    0.00 :	  798388:       0f 84 99 00 00 00       je     798427 <AllocSetAlloc+0x317>
         :
         :	                /* Mark unallocated space NOACCESS. */
         :	                VALGRIND_MAKE_MEM_NOACCESS(block->freeptr,
         :	                                                                   blksize - ALLOC_BLOCKHDRSZ);
         :
         :	                block->next = set->blocks;
    0.00 :	  79838e:       49 8b 44 24 38          mov    0x38(%r12),%rax
    0.00 :	  798393:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                set->blocks = block;
    0.00 :	  798397:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  79839c:       49 8d 47 10             lea    0x10(%r15),%rax
    0.00 :	  7983a0:       48 8b 7a 10             mov    0x10(%rdx),%rdi
         :	        chunk = (AllocChunk) (block->freeptr);
         :
         :	        /* Prepare to initialize the chunk header. */
         :	        VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
    0.00 :	  7983a4:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  7983a8:       49 89 41 10             mov    %rax,0x10(%r9)
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
    0.00 :	  7983ac:       4c 89 27                mov    %r12,(%rdi)
         :	        /* fill the allocated space with junk */
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
    0.00 :	  7983af:       48 8d 47 10             lea    0x10(%rdi),%rax
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
         :	        chunk->size = chunk_size;
    0.00 :	  7983b3:       4c 89 7f 08             mov    %r15,0x8(%rdi)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  7983b7:       e9 a9 fd ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  7983bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        block->next = set->blocks->next;
         :	                        set->blocks->next = block;
         :	                }
         :	                else
         :	                {
         :	                        block->next = NULL;
    0.00 :	  7983c0:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  7983c7:       00 
         :	                        set->blocks = block;
    0.00 :	  7983c8:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  7983cd:       e9 2b fe ff ff          jmpq   7981fd <AllocSetAlloc+0xed>
    0.00 :	  7983d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  7983d8:       48 81 fb 00 00 10 00    cmp    $0x100000,%rbx
    0.00 :	  7983df:       0f 86 7b ff ff ff       jbe    798360 <AllocSetAlloc+0x250>
         :	                {
         :	                        blksize >>= 1;
    0.00 :	  7983e5:       48 d1 eb                shr    %rbx
         :	                        if (blksize < required_size)
    0.00 :	  7983e8:       49 39 dd                cmp    %rbx,%r13
    0.00 :	  7983eb:       0f 86 5f ff ff ff       jbe    798350 <AllocSetAlloc+0x240>
    0.00 :	  7983f1:       e9 6a ff ff ff          jmpq   798360 <AllocSetAlloc+0x250>
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  7983f6:       48 8b 3d 6b 24 42 00    mov    0x42246b(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  7983fd:       e8 3e 07 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798402:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  798405:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  79840a:       ba a7 02 00 00          mov    $0x2a7,%edx
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  79840f:       be 6d 1d 8e 00          mov    $0x8e1d6d,%esi
    0.00 :	  798414:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798419:       e8 a2 26 fe ff          callq  77aac0 <errstart>
    0.00 :	  79841e:       84 c0                   test   %al,%al
    0.00 :	  798420:       75 20                   jne    798442 <AllocSetAlloc+0x332>
    0.00 :	  798422:       e8 a9 10 cd ff          callq  4694d0 <abort@plt>
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  798427:       49 39 9c 24 98 00 00    cmp    %rbx,0x98(%r12)
    0.00 :	  79842e:       00 
    0.00 :	  79842f:       0f 85 59 ff ff ff       jne    79838e <AllocSetAlloc+0x27e>
         :	                        set->keeper = block;
    0.00 :	  798435:       49 89 94 24 b8 00 00    mov    %rdx,0xb8(%r12)
    0.00 :	  79843c:       00 
    0.00 :	  79843d:       e9 4c ff ff ff          jmpq   79838e <AllocSetAlloc+0x27e>
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  798442:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  798445:       bf a8 1d 8e 00          mov    $0x8e1da8,%edi
    0.00 :	  79844a:       31 c0                   xor    %eax,%eax
    0.00 :	  79844c:       e8 df 40 fe ff          callq  77c530 <errdetail>
    0.00 :	  798451:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  798456:       41 89 c4                mov    %eax,%r12d
    0.00 :	  798459:       31 c0                   xor    %eax,%eax
    0.00 :	  79845b:       e8 40 44 fe ff          callq  77c8a0 <errmsg>
    0.00 :	  798460:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  798465:       89 c3                   mov    %eax,%ebx
    0.00 :	  798467:       e8 e4 48 fe ff          callq  77cd50 <errcode>
    0.00 :	  79846c:       44 89 e2                mov    %r12d,%edx
    0.00 :	  79846f:       89 c7                   mov    %eax,%edi
    0.00 :	  798471:       89 de                   mov    %ebx,%esi
    0.00 :	  798473:       31 c0                   xor    %eax,%eax
    0.00 :	  798475:       e8 66 21 fe ff          callq  77a5e0 <errfinish>
    0.00 :	  79847a:       eb a6                   jmp    798422 <AllocSetAlloc+0x312>
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  79847c:       48 8b 3d e5 23 42 00    mov    0x4223e5(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  798483:       e8 b8 06 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798488:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  79848b:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  798490:       ba 69 03 00 00          mov    $0x369,%edx
    0.00 :	  798495:       e9 75 ff ff ff          jmpq   79840f <AllocSetAlloc+0x2ff>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:544
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000677560 <StrategyGetBuffer>:
         :	 *      To ensure that no one else can pin the buffer before we do, we must
         :	 *      return the buffer with the buffer header spinlock still held.
         :	 */
         :	volatile BufferDesc *
         :	StrategyGetBuffer(BufferAccessStrategy strategy)
         :	{
    0.00 :	  677560:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
   12.50 :	  677561:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  677564:       41 57                   push   %r15
   12.50 :	  677566:       41 56                   push   %r14
    0.00 :	  677568:       41 55                   push   %r13
    0.00 :	  67756a:       49 89 fd                mov    %rdi,%r13
    0.00 :	  67756d:       41 54                   push   %r12
    0.00 :	  67756f:       53                      push   %rbx
    0.00 :	  677570:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * If given a strategy object, see whether it can select a buffer. We
         :	         * assume strategy objects don't need buffer_strategy_lock.
         :	         */
         :	        if (strategy != NULL)
    0.00 :	  677574:       48 85 ff                test   %rdi,%rdi
    0.00 :	  677577:       74 65                   je     6775de <StrategyGetBuffer+0x7e>
         :	{
         :	        volatile BufferDesc *buf;
         :	        Buffer          bufnum;
         :
         :	        /* Advance to next ring slot */
         :	        if (++strategy->current >= strategy->ring_size)
    0.00 :	  677579:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  67757c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67757f:       3b 47 04                cmp    0x4(%rdi),%eax
    0.00 :	  677582:       89 47 08                mov    %eax,0x8(%rdi)
    0.00 :	  677585:       7c 09                   jl     677590 <StrategyGetBuffer+0x30>
         :	                strategy->current = 0;
    0.00 :	  677587:       c7 47 08 00 00 00 00    movl   $0x0,0x8(%rdi)
    0.00 :	  67758e:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * If the slot hasn't been filled yet, tell the caller to allocate a new
         :	         * buffer with the normal allocation strategy.  He will then fill this
         :	         * slot by calling AddBufferToRing with the new buffer.
         :	         */
         :	        bufnum = strategy->buffers[strategy->current];
    0.00 :	  677590:       48 98                   cltq   
    0.00 :	  677592:       41 8b 44 85 10          mov    0x10(%r13,%rax,4),%eax
         :	        if (bufnum == InvalidBuffer)
    0.00 :	  677597:       85 c0                   test   %eax,%eax
    0.00 :	  677599:       74 3e                   je     6775d9 <StrategyGetBuffer+0x79>
         :	         * since our own previous usage of the ring element would have left it
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
    0.00 :	  67759b:       48 98                   cltq   
    0.00 :	  67759d:       48 8d 58 ff             lea    -0x1(%rax),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6775a1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6775a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6775aa:       48 03 1d 4f 85 54 00    add    0x54854f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	        LockBufHdr(buf);
    0.00 :	  6775b1:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6775b5:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:544
   12.50 :	  6775b8:       84 c0                   test   %al,%al
    0.00 :	  6775ba:       0f 85 b8 02 00 00       jne    677878 <StrategyGetBuffer+0x318>
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
    0.00 :	  6775c0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6775c3:       85 c0                   test   %eax,%eax
    0.00 :	  6775c5:       75 0e                   jne    6775d5 <StrategyGetBuffer+0x75>
    0.00 :	  6775c7:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  6775cb:       66 83 f8 01             cmp    $0x1,%ax
    0.00 :	  6775cf:       0f 86 92 02 00 00       jbe    677867 <StrategyGetBuffer+0x307>
         :	        {
         :	                strategy->current_was_in_ring = true;
         :	                return buf;
         :	        }
         :	        UnlockBufHdr(buf);
    0.00 :	  6775d5:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Tell caller to allocate a new buffer with the normal allocation
         :	         * strategy.  He'll then replace this ring element via AddBufferToRing.
         :	         */
         :	        strategy->current_was_in_ring = false;
    0.00 :	  6775d9:       41 c6 45 0c 00          movb   $0x0,0xc(%r13)
         :	        /*
         :	         * We count buffer allocation requests so that the bgwriter can estimate
         :	         * the rate of buffer consumption.  Note that buffers recycled by a
         :	         * strategy object are intentionally not counted here.
         :	         */
         :	        pg_atomic_fetch_add_u32(&StrategyControl->numBufferAllocs, 1);
    0.00 :	  6775de:       48 8b 05 1b 5b 50 00    mov    0x505b1b(%rip),%rax        # b7d100 <StrategyControl>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  6775e5:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6775ea:       48 83 c0 14             add    $0x14,%rax
    0.00 :	  6775ee:       f0 0f c1 10             lock xadd %edx,(%rax)
         :	         * Since we're not guaranteed atomic 8 byte reads we need to acquire the
         :	         * spinlock if not null to be sure we get a correct pointer. Because we
         :	         * don't want to set the latch while holding the buffer_strategy_lock we
         :	         * just grab the lock to read and reset the pointer.
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
   12.50 :	  6775f2:       48 8b 15 07 5b 50 00    mov    0x505b07(%rip),%rdx        # b7d100 <StrategyControl>
         :	        if (bgwriterLatch)
    0.00 :	  6775f9:       48 83 7a 18 00          cmpq   $0x0,0x18(%rdx)
    0.00 :	  6775fe:       74 3e                   je     67763e <StrategyGetBuffer+0xde>
    0.00 :	  677600:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  677605:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677608:       84 c0                   test   %al,%al
    0.00 :	  67760a:       0f 85 21 02 00 00       jne    677831 <StrategyGetBuffer+0x2d1>
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
    0.00 :	  677610:       48 8b 05 e9 5a 50 00    mov    0x505ae9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677617:       48 8b 78 18             mov    0x18(%rax),%rdi
         :	                StrategyControl->bgwriterLatch = NULL;
    0.00 :	  67761b:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  677622:       00 
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677623:       48 8b 05 d6 5a 50 00    mov    0x505ad6(%rip),%rax        # b7d100 <StrategyControl>
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  67762a:       48 85 ff                test   %rdi,%rdi
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	                StrategyControl->bgwriterLatch = NULL;
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67762d:       c6 00 00                movb   $0x0,(%rax)
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  677630:       74 05                   je     677637 <StrategyGetBuffer+0xd7>
         :	                        SetLatch(bgwriterLatch);
    0.00 :	  677632:       e8 89 1a fc ff          callq  6390c0 <SetLatch>
    0.00 :	  677637:       48 8b 15 c2 5a 50 00    mov    0x505ac2(%rip),%rdx        # b7d100 <StrategyControl>
         :	         *
         :	         * Note that the freeNext fields are considered to be protected by
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
    0.00 :	  67763e:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  677641:       85 c0                   test   %eax,%eax
    0.00 :	  677643:       0f 88 08 01 00 00       js     677751 <StrategyGetBuffer+0x1f1>
    0.00 :	  677649:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  67764e:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677651:       84 c0                   test   %al,%al
    0.00 :	  677653:       0f 85 f3 01 00 00       jne    67784c <StrategyGetBuffer+0x2ec>
    0.00 :	  677659:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67765f:       eb 30                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677661:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
         :	                        if (buf->refcount == 0 && buf->usage_count == 0)
    0.00 :	  677668:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  67766b:       85 c0                   test   %eax,%eax
    0.00 :	  67766d:       75 0d                   jne    67767c <StrategyGetBuffer+0x11c>
    0.00 :	  67766f:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677673:       66 85 c0                test   %ax,%ax
    0.00 :	  677676:       0f 84 94 00 00 00       je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
    0.00 :	  67767c:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  677680:       44 89 e0                mov    %r12d,%eax
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677683:       48 8b 15 76 5a 50 00    mov    0x505a76(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  67768a:       f0 86 02                lock xchg %al,(%rdx)
    0.00 :	  67768d:       84 c0                   test   %al,%al
    0.00 :	  67768f:       75 5f                   jne    6776f0 <StrategyGetBuffer+0x190>
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :
         :	                while (StrategyControl->firstFreeBuffer >= 0)
    0.00 :	  677691:       48 8b 15 68 5a 50 00    mov    0x505a68(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  677698:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67769b:       85 c0                   test   %eax,%eax
    0.00 :	  67769d:       0f 88 9d 00 00 00       js     677740 <StrategyGetBuffer+0x1e0>
         :	                {
         :	                        buf = &BufferDescriptors[StrategyControl->firstFreeBuffer];
    0.00 :	  6776a3:       48 63 d8                movslq %eax,%rbx
    0.00 :	  6776a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6776aa:       48 03 1d 4f 84 54 00    add    0x54844f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        Assert(buf->freeNext != FREENEXT_NOT_IN_LIST);
         :
         :	                        /* Unconditionally remove buffer from freelist */
         :	                        StrategyControl->firstFreeBuffer = buf->freeNext;
    0.00 :	  6776b1:       8b 43 28                mov    0x28(%rbx),%eax
    0.00 :	  6776b4:       89 42 08                mov    %eax,0x8(%rdx)
         :	                        buf->freeNext = FREENEXT_NOT_IN_LIST;
    0.00 :	  6776b7:       c7 43 28 fe ff ff ff    movl   $0xfffffffe,0x28(%rbx)
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776be:       48 8b 05 3b 5a 50 00    mov    0x505a3b(%rip),%rax        # b7d100 <StrategyControl>
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776c5:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776c9:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  6776cc:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6776cf:       f0 86 07                lock xchg %al,(%rdi)
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776d2:       84 c0                   test   %al,%al
    0.00 :	  6776d4:       74 92                   je     677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776d6:       ba d0 00 00 00          mov    $0xd0,%edx
    0.00 :	  6776db:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  6776e0:       e8 5b 89 01 00          callq  690040 <s_lock>
    0.00 :	  6776e5:       eb 81                   jmp    677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6776ee:       00 00 
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776f0:       48 8b 3d 09 5a 50 00    mov    0x505a09(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  6776f7:       ba da 00 00 00          mov    $0xda,%edx
    0.00 :	  6776fc:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677701:       e8 3a 89 01 00          callq  690040 <s_lock>
    0.00 :	  677706:       eb 89                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677708:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67770f:       00 
         :	                                trycounter = NBuffers;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Found a usable buffer */
         :	                                if (strategy != NULL)
    0.00 :	  677710:       4d 85 ed                test   %r13,%r13
    0.00 :	  677713:       74 0f                   je     677724 <StrategyGetBuffer+0x1c4>
         :	 * is called with the spinlock held, it had better be quite cheap.
         :	 */
         :	static void
         :	AddBufferToRing(BufferAccessStrategy strategy, volatile BufferDesc *buf)
         :	{
         :	        strategy->buffers[strategy->current] = BufferDescriptorGetBuffer(buf);
    0.00 :	  677715:       8b 43 24                mov    0x24(%rbx),%eax
    0.00 :	  677718:       49 63 55 08             movslq 0x8(%r13),%rdx
    0.00 :	  67771c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67771f:       41 89 44 95 10          mov    %eax,0x10(%r13,%rdx,4)
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
         :	        }
         :	}
    0.00 :	  677724:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  677728:       48 89 d8                mov    %rbx,%rax
    0.00 :	  67772b:       5b                      pop    %rbx
    0.00 :	  67772c:       41 5c                   pop    %r12
    0.00 :	  67772e:       41 5d                   pop    %r13
    0.00 :	  677730:       41 5e                   pop    %r14
    0.00 :	  677732:       41 5f                   pop    %r15
    0.00 :	  677734:       c9                      leaveq 
    0.00 :	  677735:       c3                      retq   
    0.00 :	  677736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67773d:       00 00 00 
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                }
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677740:       48 8b 05 b9 59 50 00    mov    0x5059b9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677747:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  67774a:       48 8b 15 af 59 50 00    mov    0x5059af(%rip),%rdx        # b7d100 <StrategyControl>
         :	        }
         :
         :	        /* Nothing on the freelist, so run the "clock sweep" algorithm */
         :	        trycounter = NBuffers;
    0.00 :	  677751:       44 8b 25 c8 13 4f 00    mov    0x4f13c8(%rip),%r12d        # b68b20 <NBuffers>
    0.00 :	  677758:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  67775e:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  677764:       eb 30                   jmp    677796 <StrategyGetBuffer+0x236>
    0.00 :	  677766:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67776d:       00 00 00 
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
         :	                if (buf->refcount == 0)
         :	                {
         :	                        if (buf->usage_count > 0)
    0.00 :	  677770:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677774:       66 85 c0                test   %ax,%ax
    0.00 :	  677777:       74 97                   je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                buf->usage_count--;
    0.00 :	  677779:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  67777d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  677780:       66 89 43 16             mov    %ax,0x16(%rbx)
         :	                                trycounter = NBuffers;
    0.00 :	  677784:       44 8b 25 95 13 4f 00    mov    0x4f1395(%rip),%r12d        # b68b20 <NBuffers>
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
    0.00 :	  67778b:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  67778f:       48 8b 15 6a 59 50 00    mov    0x50596a(%rip),%rdx        # b7d100 <StrategyControl>
         :	        trycounter = NBuffers;
         :	        for (;;)
         :	        {
         :	                int victim;
         :
         :	                victim = pg_atomic_fetch_add_u32(&StrategyControl->nextVictimBuffer, 1);
    0.00 :	  677796:       48 8d 42 04             lea    0x4(%rdx),%rax
    0.00 :	  67779a:       44 89 f2                mov    %r14d,%edx
    0.00 :	  67779d:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                buf = &BufferDescriptors[victim % NBuffers];
    0.00 :	  6777a1:       89 d0                   mov    %edx,%eax
    0.00 :	  6777a3:       c1 fa 1f                sar    $0x1f,%edx
    0.00 :	  6777a6:       f7 3d 74 13 4f 00       idivl  0x4f1374(%rip)        # b68b20 <NBuffers>
    0.00 :	  6777ac:       48 63 da                movslq %edx,%rbx
    0.00 :	  6777af:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6777b3:       48 03 1d 46 83 54 00    add    0x548346(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                if (victim % NBuffers == 0)
    0.00 :	  6777ba:       85 d2                   test   %edx,%edx
    0.00 :	  6777bc:       75 12                   jne    6777d0 <StrategyGetBuffer+0x270>
         :	                {
         :	                        pg_atomic_add_fetch_u32(&StrategyControl->completePasses, 1);
    0.00 :	  6777be:       48 8b 05 3b 59 50 00    mov    0x50593b(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  6777c5:       44 89 f2                mov    %r14d,%edx
    0.00 :	  6777c8:       48 83 c0 10             add    $0x10,%rax
    0.00 :	  6777cc:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6777d0:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6777d4:       44 89 f8                mov    %r15d,%eax
    0.00 :	  6777d7:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   50.00 :	  6777da:       84 c0                   test   %al,%al
    0.00 :	  6777dc:       75 42                   jne    677820 <StrategyGetBuffer+0x2c0>
         :	                if (buf->refcount == 0)
    0.00 :	  6777de:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6777e1:       85 c0                   test   %eax,%eax
    0.00 :	  6777e3:       74 8b                   je     677770 <StrategyGetBuffer+0x210>
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                }
         :	                else if (--trycounter == 0)
    0.00 :	  6777e5:       41 83 ec 01             sub    $0x1,%r12d
    0.00 :	  6777e9:       75 a0                   jne    67778b <StrategyGetBuffer+0x22b>
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777eb:       ba 80 a1 8a 00          mov    $0x8aa180,%edx
    0.00 :	  6777f0:       be 0c 01 00 00          mov    $0x10c,%esi
    0.00 :	  6777f5:       bf ec a0 8a 00          mov    $0x8aa0ec,%edi
         :	                         * so all the buffers are pinned (or were when we looked at them).
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
    0.00 :	  6777fa:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777fe:       e8 1d 3c 10 00          callq  77b420 <elog_start>
    0.00 :	  677803:       be 0e a1 8a 00          mov    $0x8aa10e,%esi
    0.00 :	  677808:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67780d:       31 c0                   xor    %eax,%eax
    0.00 :	  67780f:       e8 1c 3a 10 00          callq  77b230 <elog_finish>
    0.00 :	  677814:       e8 b7 1c df ff          callq  4694d0 <abort@plt>
    0.00 :	  677819:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  677820:       ba f2 00 00 00          mov    $0xf2,%edx
    0.00 :	  677825:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67782a:       e8 11 88 01 00          callq  690040 <s_lock>
    0.00 :	  67782f:       eb ad                   jmp    6777de <StrategyGetBuffer+0x27e>
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	        if (bgwriterLatch)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677831:       48 8b 3d c8 58 50 00    mov    0x5058c8(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677838:       ba 9f 00 00 00          mov    $0x9f,%edx
    0.00 :	  67783d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677842:       e8 f9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677847:       e9 c4 fd ff ff          jmpq   677610 <StrategyGetBuffer+0xb0>
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67784c:       48 8b 3d ad 58 50 00    mov    0x5058ad(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677853:       ba b8 00 00 00          mov    $0xb8,%edx
    0.00 :	  677858:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67785d:       e8 de 87 01 00          callq  690040 <s_lock>
    0.00 :	  677862:       e9 f2 fd ff ff          jmpq   677659 <StrategyGetBuffer+0xf9>
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
         :	        {
         :	                strategy->current_was_in_ring = true;
    0.00 :	  677867:       41 c6 45 0c 01          movb   $0x1,0xc(%r13)
    0.00 :	  67786c:       e9 b3 fe ff ff          jmpq   677724 <StrategyGetBuffer+0x1c4>
    0.00 :	  677871:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
    0.00 :	  677878:       ba 20 02 00 00          mov    $0x220,%edx
    0.00 :	  67787d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677882:       e8 b9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677887:       e9 34 fd ff ff          jmpq   6775c0 <StrategyGetBuffer+0x60>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:313
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004bffe0 <TransactionIdPrecedes>:
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
    0.00 :	  4bffe0:       55                      push   %rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   14.29 :	  4bffe1:       83 ff 02                cmp    $0x2,%edi
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   14.29 :	  4bffe4:       48 89 e5                mov    %rsp,%rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   14.29 :	  4bffe7:       76 17                   jbe    4c0000 <TransactionIdPrecedes+0x20>
    0.00 :	  4bffe9:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  4bffec:       76 12                   jbe    4c0000 <TransactionIdPrecedes+0x20>
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   14.29 :	  4bffee:       29 f7                   sub    %esi,%edi
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:313
   14.29 :	  4bfff0:       c9                      leaveq 
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   28.57 :	  4bfff1:       89 f8                   mov    %edi,%eax
    0.00 :	  4bfff3:       c1 e8 1f                shr    $0x1f,%eax
         :	}
    0.00 :	  4bfff6:       c3                      retq   
    0.00 :	  4bfff7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4bfffe:       00 00 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0000:       39 f7                   cmp    %esi,%edi
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
         :	}
    0.00 :	  4c0002:       c9                      leaveq 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0003:       0f 92 c0                setb   %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   42.86 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675260 <SyncOneBuffer>:
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675260:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675261:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675266:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
   28.57 :	  675269:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  67526d:       48 63 df                movslq %edi,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675270:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  675274:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
   14.29 :	  675278:       48 c1 e3 06             shl    $0x6,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  67527c:       48 83 ec 20             sub    $0x20,%rsp
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  675280:       48 03 1d 79 a8 54 00    add    0x54a879(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675287:       41 89 f5                mov    %esi,%r13d
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
    0.00 :	  67528a:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  67528e:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
   42.86 :	  675291:       84 c0                   test   %al,%al
    0.00 :	  675293:       75 5b                   jne    6752f0 <SyncOneBuffer+0x90>
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  675295:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  675298:       85 c0                   test   %eax,%eax
    0.00 :	  67529a:       75 0f                   jne    6752ab <SyncOneBuffer+0x4b>
    0.00 :	  67529c:       0f b7 43 16             movzwl 0x16(%rbx),%eax
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752a0:       41 bc 02 00 00 00       mov    $0x2,%r12d
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  6752a6:       66 85 c0                test   %ax,%ax
    0.00 :	  6752a9:       74 08                   je     6752b3 <SyncOneBuffer+0x53>
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
    0.00 :	  6752ab:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752ae:       45 84 ed                test   %r13b,%r13b
    0.00 :	  6752b1:       75 2d                   jne    6752e0 <SyncOneBuffer+0x80>
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
         :	                return result;
         :	        }
         :
         :	        if (!(bufHdr->flags & BM_VALID) || !(bufHdr->flags & BM_DIRTY))
    0.00 :	  6752b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752b7:       a8 02                   test   $0x2,%al
    0.00 :	  6752b9:       74 08                   je     6752c3 <SyncOneBuffer+0x63>
    0.00 :	  6752bb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752bf:       a8 01                   test   $0x1,%al
    0.00 :	  6752c1:       75 45                   jne    675308 <SyncOneBuffer+0xa8>
         :	        {
         :	                /* It's clean, so nothing to do */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752c3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752c7:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6752ca:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6752ce:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6752d2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
   14.29 :	  6752d6:       c9                      leaveq 
    0.00 :	  6752d7:       c3                      retq   
    0.00 :	  6752d8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  6752df:       00 
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752e0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752e3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752e7:       eb de                   jmp    6752c7 <SyncOneBuffer+0x67>
    0.00 :	  6752e9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
    0.00 :	  6752f0:       ba 4e 07 00 00          mov    $0x74e,%edx
    0.00 :	  6752f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6752fa:       e8 41 ad 01 00          callq  690040 <s_lock>
    0.00 :	  6752ff:       eb 94                   jmp    675295 <SyncOneBuffer+0x35>
    0.00 :	  675301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  675308:       48 89 df                mov    %rbx,%rdi
         :	        FlushBuffer(bufHdr, NULL);
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
    0.00 :	  67530b:       41 83 cc 01             or     $0x1,%r12d
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  67530f:       e8 bc f8 ff ff          callq  674bd0 <PinBuffer_Locked>
         :	        LWLockAcquire(bufHdr->content_lock, LW_SHARED);
    0.00 :	  675314:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675318:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67531d:       e8 ce a7 01 00          callq  68faf0 <LWLockAcquire>
         :
         :	        FlushBuffer(bufHdr, NULL);
    0.00 :	  675322:       31 f6                   xor    %esi,%esi
    0.00 :	  675324:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675327:       e8 24 fc ff ff          callq  674f50 <FlushBuffer>
         :
         :	        LWLockRelease(bufHdr->content_lock);
    0.00 :	  67532c:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675330:       e8 6b a0 01 00          callq  68f3a0 <LWLockRelease>
         :	        UnpinBuffer(bufHdr, true);
    0.00 :	  675335:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67533a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  67533d:       e8 ee f9 ff ff          callq  674d30 <UnpinBuffer>
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  675342:       eb 83                   jmp    6752c7 <SyncOneBuffer+0x67>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   42.86 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2237
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2237
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2242
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077ed10 <pg_detoast_datum>:
         :	 *-------------------------------------------------------------------------
         :	 */
         :
         :	struct varlena *
         :	pg_detoast_datum(struct varlena * datum)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2237
   28.57 :	  77ed10:       55                      push   %rbp
         :	        if (VARATT_IS_EXTENDED(datum))
    0.00 :	  77ed11:       f6 07 03                testb  $0x3,(%rdi)
         :	 *-------------------------------------------------------------------------
         :	 */
         :
         :	struct varlena *
         :	pg_detoast_datum(struct varlena * datum)
         :	{
   42.86 :	  77ed14:       48 89 e5                mov    %rsp,%rbp
         :	        if (VARATT_IS_EXTENDED(datum))
    0.00 :	  77ed17:       75 07                   jne    77ed20 <pg_detoast_datum+0x10>
         :	                return heap_tuple_untoast_attr(datum);
         :	        else
         :	                return datum;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2242
   28.57 :	  77ed19:       48 89 f8                mov    %rdi,%rax
    0.00 :	  77ed1c:       c9                      leaveq 
    0.00 :	  77ed1d:       c3                      retq   
    0.00 :	  77ed1e:       66 90                   xchg   %ax,%ax
    0.00 :	  77ed20:       c9                      leaveq 
         :
         :	struct varlena *
         :	pg_detoast_datum(struct varlena * datum)
         :	{
         :	        if (VARATT_IS_EXTENDED(datum))
         :	                return heap_tuple_untoast_attr(datum);
    0.00 :	  77ed21:       e9 2a 41 d2 ff          jmpq   4a2e50 <heap_tuple_untoast_attr>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   71.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782c50 <CHashAddToGarbage>:
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c50:       0f b6 4f 14             movzbl 0x14(%rdi),%ecx
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c54:       89 d0                   mov    %edx,%eax
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c56:       55                      push   %rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c57:       d1 e8                   shr    %eax
    0.00 :	  782c59:       41 89 c0                mov    %eax,%r8d
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c5c:       48 89 e5                mov    %rsp,%rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c5f:       44 0f af 47 1c          imul   0x1c(%rdi),%r8d
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c64:       d3 ee                   shr    %cl,%esi
    0.00 :	  782c66:       0f b6 4f 15             movzbl 0x15(%rdi),%ecx
    0.00 :	  782c6a:       89 f0                   mov    %esi,%eax
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c6c:       4c 03 47 30             add    0x30(%rdi),%r8
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c70:       d3 e8                   shr    %cl,%eax
    0.00 :	  782c72:       01 f0                   add    %esi,%eax
    0.00 :	  782c74:       48 8d 0c 85 00 00 00    lea    0x0(,%rax,4),%rcx
    0.00 :	  782c7b:       00 
    0.00 :	  782c7c:       48 03 4f 28             add    0x28(%rdi),%rcx
    0.00 :	  782c80:       eb 0e                   jmp    782c90 <CHashAddToGarbage+0x40>
    0.00 :	  782c82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                g = *garbage;
         :	                n->un.gcnext = g;
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
    0.00 :	  782c88:       48 83 87 a8 00 00 00    addq   $0x1,0xa8(%rdi)
    0.00 :	  782c8f:       01 
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
         :
         :	        while (1)
         :	        {
         :	                g = *garbage;
    0.00 :	  782c90:       8b 01                   mov    (%rcx),%eax
         :	                n->un.gcnext = g;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
   71.43 :	  782c92:       41 89 40 04             mov    %eax,0x4(%r8)
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
    0.00 :	  782c96:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
   28.57 :	  782c9a:       75 ec                   jne    782c88 <CHashAddToGarbage+0x38>
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
         :	        }
         :	}
    0.00 :	  782c9c:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1319
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1296
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1320
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1328
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f260 <slot_getsomeattrs>:
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f260:       55                      push   %rbp
    0.00 :	  46f261:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46f264:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  46f268:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  46f26c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  46f26f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1296
   16.67 :	  46f273:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f277:       39 77 24                cmp    %esi,0x24(%rdi)
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f27a:       41 89 f5                mov    %esi,%r13d
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f27d:       7d 67                   jge    46f2e6 <slot_getsomeattrs+0x86>
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
    0.00 :	  46f27f:       85 f6                   test   %esi,%esi
    0.00 :	  46f281:       7e 75                   jle    46f2f8 <slot_getsomeattrs+0x98>
    0.00 :	  46f283:       48 8b 47 10             mov    0x10(%rdi),%rax
    0.00 :	  46f287:       3b 30                   cmp    (%rax),%esi
    0.00 :	  46f289:       7f 6d                   jg     46f2f8 <slot_getsomeattrs+0x98>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
    0.00 :	  46f28b:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        if (tuple == NULL)                      /* internal error */
    0.00 :	  46f28f:       48 85 c0                test   %rax,%rax
    0.00 :	  46f292:       0f 84 8d 00 00 00       je     46f325 <slot_getsomeattrs+0xc5>
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
         :
         :	        /*
         :	         * load up any slots available from physical tuple
         :	         */
         :	        attno = HeapTupleHeaderGetNatts(tuple->t_data);
    0.00 :	  46f298:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  46f29c:       0f b7 40 12             movzwl 0x12(%rax),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1319
   33.33 :	  46f2a0:       25 ff 07 00 00          and    $0x7ff,%eax
         :	        attno = Min(attno, attnum);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1320
   16.67 :	  46f2a5:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f2a7:       89 c3                   mov    %eax,%ebx
    0.00 :	  46f2a9:       0f 4e de                cmovle %esi,%ebx
         :
         :	        slot_deform_tuple(slot, attno);
    0.00 :	  46f2ac:       89 de                   mov    %ebx,%esi
    0.00 :	  46f2ae:       e8 5d fc ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1328
   16.67 :	  46f2b3:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  46f2b6:       7e 29                   jle    46f2e1 <slot_getsomeattrs+0x81>
    0.00 :	  46f2b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f2bf:       00 
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2c0:       49 8b 54 24 28          mov    0x28(%r12),%rdx
    0.00 :	  46f2c5:       48 63 c3                movslq %ebx,%rax
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2c8:       83 c3 01                add    $0x1,%ebx
    0.00 :	  46f2cb:       41 39 dd                cmp    %ebx,%r13d
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2ce:       48 c7 04 c2 00 00 00    movq   $0x0,(%rdx,%rax,8)
    0.00 :	  46f2d5:       00 
         :	                slot->tts_isnull[attno] = true;
    0.00 :	  46f2d6:       49 8b 54 24 30          mov    0x30(%r12),%rdx
    0.00 :	  46f2db:       c6 04 02 01             movb   $0x1,(%rdx,%rax,1)
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2df:       7f df                   jg     46f2c0 <slot_getsomeattrs+0x60>
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
         :	                slot->tts_isnull[attno] = true;
         :	        }
         :	        slot->tts_nvalid = attnum;
    0.00 :	  46f2e1:       45 89 6c 24 24          mov    %r13d,0x24(%r12)
         :	}
    0.00 :	  46f2e6:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  46f2ea:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  46f2ee:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
   16.67 :	  46f2f2:       c9                      leaveq 
    0.00 :	  46f2f3:       c3                      retq   
    0.00 :	  46f2f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        if (slot->tts_nvalid >= attnum)
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
         :	                elog(ERROR, "invalid attribute number %d", attnum);
    0.00 :	  46f2f8:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f2fd:       be 1a 05 00 00          mov    $0x51a,%esi
    0.00 :	  46f302:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f307:       e8 14 c1 30 00          callq  77b420 <elog_start>
    0.00 :	  46f30c:       44 89 ea                mov    %r13d,%edx
    0.00 :	  46f30f:       be 13 f6 7a 00          mov    $0x7af613,%esi
    0.00 :	  46f314:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f319:       31 c0                   xor    %eax,%eax
    0.00 :	  46f31b:       e8 10 bf 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f320:       e8 ab a1 ff ff          callq  4694d0 <abort@plt>
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f325:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f32a:       be 22 05 00 00          mov    $0x522,%esi
    0.00 :	  46f32f:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f334:       e8 e7 c0 30 00          callq  77b420 <elog_start>
    0.00 :	  46f339:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f33e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f343:       31 c0                   xor    %eax,%eax
    0.00 :	  46f345:       e8 e6 be 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f34a:       e8 81 a1 ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:113
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:227
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:400
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:426
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:299
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005bdaa0 <ExecHashJoin>:
         :	 *                        the other one is "outer".
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: a tuple or NULL */
         :	ExecHashJoin(HashJoinState *node)
         :	{
    0.00 :	  5bdaa0:       55                      push   %rbp
    0.00 :	  5bdaa1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5bdaa4:       41 57                   push   %r15
    0.00 :	  5bdaa6:       41 56                   push   %r14
    0.00 :	  5bdaa8:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5bdaab:       41 55                   push   %r13
    0.00 :	  5bdaad:       41 54                   push   %r12
    0.00 :	  5bdaaf:       53                      push   %rbx
    0.00 :	  5bdab0:       48 83 ec 58             sub    $0x58,%rsp
         :	        int                     batchno;
         :
         :	        /*
         :	         * get information from HashJoin node
         :	         */
         :	        joinqual = node->js.joinqual;
    0.00 :	  5bdab4:       48 8b 87 80 00 00 00    mov    0x80(%rdi),%rax
    0.00 :	  5bdabb:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :	        otherqual = node->js.ps.qual;
    0.00 :	  5bdabf:       48 8b 57 28             mov    0x28(%rdi),%rdx
    0.00 :	  5bdac3:       48 89 55 a8             mov    %rdx,-0x58(%rbp)
         :	        hashNode = (HashState *) innerPlanState(node);
    0.00 :	  5bdac7:       48 8b 4f 38             mov    0x38(%rdi),%rcx
    0.00 :	  5bdacb:       48 89 4d 98             mov    %rcx,-0x68(%rbp)
         :	        outerNode = outerPlanState(node);
    0.00 :	  5bdacf:       48 8b 47 30             mov    0x30(%rdi),%rax
    0.00 :	  5bdad3:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	        hashtable = node->hj_HashTable;
    0.00 :	  5bdad7:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
    0.00 :	  5bdade:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        econtext = node->js.ps.ps_ExprContext;
    0.00 :	  5bdae2:       48 8b 4f 60             mov    0x60(%rdi),%rcx
    0.00 :	  5bdae6:       48 89 4d b0             mov    %rcx,-0x50(%rbp)
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous join
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->js.ps.ps_TupFromTlist)
    0.00 :	  5bdaea:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5bdaee:       74 1c                   je     5bdb0c <ExecHashJoin+0x6c>
         :	        {
         :	                TupleTableSlot *result;
         :
         :	                result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5bdaf0:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5bdaf4:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5bdaf8:       e8 03 f5 fe ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5bdafd:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5bdb01:       0f 84 91 04 00 00       je     5bdf98 <ExecHashJoin+0x4f8>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->js.ps.ps_TupFromTlist = false;
    0.00 :	  5bdb07:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a join tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5bdb0c:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5bdb10:       48 8b 78 28             mov    0x28(%rax),%rdi
    0.00 :	  5bdb14:       e8 97 ae 1d 00          callq  7989b0 <MemoryContextReset>
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
    0.00 :	  5bdb19:       49 8d 96 b4 00 00 00    lea    0xb4(%r14),%rdx
    0.00 :	  5bdb20:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5bdb24:       0f 1f 40 00             nopl   0x0(%rax)
         :	        /*
         :	         * run the hash join state machine
         :	         */
         :	        for (;;)
         :	        {
         :	                switch (node->hj_JoinState)
    0.00 :	  5bdb28:       41 83 be f0 00 00 00    cmpl   $0x6,0xf0(%r14)
    0.00 :	  5bdb2f:       06 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:113
   16.67 :	  5bdb30:       76 36                   jbe    5bdb68 <ExecHashJoin+0xc8>
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :	                                break;
         :
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
    0.00 :	  5bdb32:       ba c1 ba 88 00          mov    $0x88bac1,%edx
    0.00 :	  5bdb37:       be a7 01 00 00          mov    $0x1a7,%esi
    0.00 :	  5bdb3c:       bf 58 b9 88 00          mov    $0x88b958,%edi
    0.00 :	  5bdb41:       e8 da d8 1b 00          callq  77b420 <elog_start>
    0.00 :	  5bdb46:       41 8b 96 f0 00 00 00    mov    0xf0(%r14),%edx
    0.00 :	  5bdb4d:       be 00 ba 88 00          mov    $0x88ba00,%esi
    0.00 :	  5bdb52:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bdb57:       31 c0                   xor    %eax,%eax
    0.00 :	  5bdb59:       e8 d2 d6 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bdb5e:       e8 6d b9 ea ff          callq  4694d0 <abort@plt>
    0.00 :	  5bdb63:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /*
         :	         * run the hash join state machine
         :	         */
         :	        for (;;)
         :	        {
         :	                switch (node->hj_JoinState)
    0.00 :	  5bdb68:       41 8b 86 f0 00 00 00    mov    0xf0(%r14),%eax
    0.00 :	  5bdb6f:       ff 24 c5 50 ba 88 00    jmpq   *0x88ba50(,%rax,8)
    0.00 :	  5bdb76:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bdb7d:       00 00 00 
         :	                                 *
         :	                                 * The only way to make the check is to try to fetch a tuple
         :	                                 * from the outer plan node.  If we succeed, we have to stash
         :	                                 * it away for later consumption by ExecHashJoinOuterGetTuple.
         :	                                 */
         :	                                if (HJ_FILL_INNER(node))
    0.00 :	  5bdb80:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdb87:       00 
    0.00 :	  5bdb88:       0f 84 da 05 00 00       je     5be168 <ExecHashJoin+0x6c8>
         :	                                        }
         :	                                        else
         :	                                                node->hj_OuterNotEmpty = true;
         :	                                }
         :	                                else
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
    0.00 :	  5bdb8e:       49 c7 86 e8 00 00 00    movq   $0x0,0xe8(%r14)
    0.00 :	  5bdb95:       00 00 00 00 
         :
         :	                                /*
         :	                                 * create the hash table
         :	                                 */
         :	                                hashtable = ExecHashTableCreate((Hash *) hashNode->ps.plan,
    0.00 :	  5bdb99:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5bdb9d:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdb9f:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdba6:       00 
    0.00 :	  5bdba7:       49 8b b6 a0 00 00 00    mov    0xa0(%r14),%rsi
    0.00 :	  5bdbae:       48 8b 78 08             mov    0x8(%rax),%rdi
    0.00 :	  5bdbb2:       0f 95 c2                setne  %dl
    0.00 :	  5bdbb5:       e8 e6 ec ff ff          callq  5bc8a0 <ExecHashTableCreate>
         :	                                node->hj_HashTable = hashtable;
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
    0.00 :	  5bdbba:       48 8b 55 98             mov    -0x68(%rbp),%rdx
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :
         :	                                /*
         :	                                 * create the hash table
         :	                                 */
         :	                                hashtable = ExecHashTableCreate((Hash *) hashNode->ps.plan,
    0.00 :	  5bdbbe:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                                                                                                node->hj_HashOperators,
         :	                                                                                                HJ_FILL_INNER(node));
         :	                                node->hj_HashTable = hashtable;
    0.00 :	  5bdbc2:       49 89 86 a8 00 00 00    mov    %rax,0xa8(%r14)
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
         :	                                (void) MultiExecProcNode((PlanState *) hashNode);
    0.00 :	  5bdbc9:       48 89 d7                mov    %rdx,%rdi
         :	                                node->hj_HashTable = hashtable;
         :
         :	                                /*
         :	                                 * execute the Hash node, to build the hash table
         :	                                 */
         :	                                hashNode->hashtable = hashtable;
    0.00 :	  5bdbcc:       48 89 42 78             mov    %rax,0x78(%rdx)
         :	                                (void) MultiExecProcNode((PlanState *) hashNode);
    0.00 :	  5bdbd0:       e8 fb e7 fe ff          callq  5ac3d0 <MultiExecProcNode>
         :	                                /*
         :	                                 * If the inner relation is completely empty, and we're not
         :	                                 * doing a left outer join, we can quit without scanning the
         :	                                 * outer relation.
         :	                                 */
         :	                                if (hashtable->totalTuples == 0 && !HJ_FILL_OUTER(node))
    0.00 :	  5bdbd5:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5bdbd9:       48 8b 4d b8             mov    -0x48(%rbp),%rcx
    0.00 :	  5bdbdd:       66 0f 2e 41 58          ucomisd 0x58(%rcx),%xmm0
    0.00 :	  5bdbe2:       0f 84 6b 06 00 00       je     5be253 <ExecHashJoin+0x7b3>
         :
         :	                                /*
         :	                                 * need to remember whether nbatch has increased since we
         :	                                 * began scanning the outer relation
         :	                                 */
         :	                                hashtable->nbatch_outstart = hashtable->nbatch;
    0.00 :	  5bdbe8:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5bdbec:       8b 42 40                mov    0x40(%rdx),%eax
    0.00 :	  5bdbef:       89 42 4c                mov    %eax,0x4c(%rdx)
         :	                                /*
         :	                                 * Reset OuterNotEmpty for scan.  (It's OK if we fetched a
         :	                                 * tuple above, because ExecHashJoinOuterGetTuple will
         :	                                 * immediately set it again.)
         :	                                 */
         :	                                node->hj_OuterNotEmpty = false;
    0.00 :	  5bdbf2:       41 c6 86 f5 00 00 00    movb   $0x0,0xf5(%r14)
    0.00 :	  5bdbf9:       00 
         :
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5bdbfa:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5bdc01:       02 00 00 00 
         :	static TupleTableSlot *
         :	ExecHashJoinOuterGetTuple(PlanState *outerNode,
         :	                                                  HashJoinState *hjstate,
         :	                                                  uint32 *hashvalue)
         :	{
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
    0.00 :	  5bdc05:       49 8b 9e a8 00 00 00    mov    0xa8(%r14),%rbx
         :	        int                     curbatch = hashtable->curbatch;
    0.00 :	  5bdc0c:       8b 43 44                mov    0x44(%rbx),%eax
         :	        TupleTableSlot *slot;
         :
         :	        if (curbatch == 0)                      /* if it is the first pass */
    0.00 :	  5bdc0f:       85 c0                   test   %eax,%eax
    0.00 :	  5bdc11:       0f 85 a9 00 00 00       jne    5bdcc0 <ExecHashJoin+0x220>
         :	        {
         :	                /*
         :	                 * Check to see if first outer tuple was already fetched by
         :	                 * ExecHashJoin() and not used yet.
         :	                 */
         :	                slot = hjstate->hj_FirstOuterTupleSlot;
    0.00 :	  5bdc17:       4d 8b a6 e8 00 00 00    mov    0xe8(%r14),%r12
         :	                if (!TupIsNull(slot))
    0.00 :	  5bdc1e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5bdc21:       74 5d                   je     5bdc80 <ExecHashJoin+0x1e0>
    0.00 :	  5bdc23:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
    0.00 :	  5bdc29:       75 55                   jne    5bdc80 <ExecHashJoin+0x1e0>
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
    0.00 :	  5bdc2b:       49 c7 86 e8 00 00 00    movq   $0x0,0xe8(%r14)
    0.00 :	  5bdc32:       00 00 00 00 
    0.00 :	  5bdc36:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bdc3d:       00 00 00 
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:667
   16.67 :	  5bdc40:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
    0.00 :	  5bdc46:       75 50                   jne    5bdc98 <ExecHashJoin+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have to compute the tuple's hash value.
         :	                         */
         :	                        ExprContext *econtext = hjstate->js.ps.ps_ExprContext;
    0.00 :	  5bdc48:       49 8b 76 60             mov    0x60(%r14),%rsi
         :
         :	                        econtext->ecxt_outertuple = slot;
         :	                        if (ExecHashGetHashValue(hashtable, econtext,
    0.00 :	  5bdc4c:       4c 8d 4d d0             lea    -0x30(%rbp),%r9
    0.00 :	  5bdc50:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5bdc55:       48 89 df                mov    %rbx,%rdi
         :	                        /*
         :	                         * We have to compute the tuple's hash value.
         :	                         */
         :	                        ExprContext *econtext = hjstate->js.ps.ps_ExprContext;
         :
         :	                        econtext->ecxt_outertuple = slot;
    0.00 :	  5bdc58:       4c 89 66 18             mov    %r12,0x18(%rsi)
         :	                        if (ExecHashGetHashValue(hashtable, econtext,
    0.00 :	  5bdc5c:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5bdc63:       00 
    0.00 :	  5bdc64:       49 8b 96 90 00 00 00    mov    0x90(%r14),%rdx
    0.00 :	  5bdc6b:       41 0f 95 c0             setne  %r8b
    0.00 :	  5bdc6f:       41 83 e0 01             and    $0x1,%r8d
    0.00 :	  5bdc73:       e8 18 e2 ff ff          callq  5bbe90 <ExecHashGetHashValue>
    0.00 :	  5bdc78:       84 c0                   test   %al,%al
    0.00 :	  5bdc7a:       0f 85 90 04 00 00       jne    5be110 <ExecHashJoin+0x670>
         :
         :	                        /*
         :	                         * That tuple couldn't match because of a NULL, so discard it and
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
    0.00 :	  5bdc80:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  5bdc84:       e8 17 e8 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                if (!TupIsNull(slot))
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
    0.00 :	  5bdc89:       48 85 c0                test   %rax,%rax
         :
         :	                        /*
         :	                         * That tuple couldn't match because of a NULL, so discard it and
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
    0.00 :	  5bdc8c:       49 89 c4                mov    %rax,%r12
         :	                if (!TupIsNull(slot))
         :	                        hjstate->hj_FirstOuterTupleSlot = NULL;
         :	                else
         :	                        slot = ExecProcNode(outerNode);
         :
         :	                while (!TupIsNull(slot))
    0.00 :	  5bdc8f:       75 af                   jne    5bdc40 <ExecHashJoin+0x1a0>
    0.00 :	  5bdc91:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                                                                   node,
         :	                                                                                                                   &hashvalue);
         :	                                if (TupIsNull(outerTupleSlot))
         :	                                {
         :	                                        /* end of batch, or maybe whole join */
         :	                                        if (HJ_FILL_INNER(node))
    0.00 :	  5bdc98:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bdc9f:       00 
    0.00 :	  5bdca0:       0f 84 0a 03 00 00       je     5bdfb0 <ExecHashJoin+0x510>
         :	                                        {
         :	                                                /* set up to scan for unmatched inner tuples */
         :	                                                ExecPrepHashTableForUnmatched(node);
    0.00 :	  5bdca6:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdca9:       e8 52 de ff ff          callq  5bbb00 <ExecPrepHashTableForUnmatched>
         :	                                                node->hj_JoinState = HJ_FILL_INNER_TUPLES;
    0.00 :	  5bdcae:       41 c7 86 f0 00 00 00    movl   $0x5,0xf0(%r14)
    0.00 :	  5bdcb5:       05 00 00 00 
    0.00 :	  5bdcb9:       e9 6a fe ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdcbe:       66 90                   xchg   %ax,%ax
         :	                         * continue with the next one.
         :	                         */
         :	                        slot = ExecProcNode(outerNode);
         :	                }
         :	        }
         :	        else if (curbatch < hashtable->nbatch)
    0.00 :	  5bdcc0:       3b 43 40                cmp    0x40(%rbx),%eax
    0.00 :	  5bdcc3:       7d d3                   jge    5bdc98 <ExecHashJoin+0x1f8>
         :	        {
         :	                BufFile    *file = hashtable->outerBatchFile[curbatch];
    0.00 :	  5bdcc5:       48 63 d0                movslq %eax,%rdx
    0.00 :	  5bdcc8:       48 8b 43 70             mov    0x70(%rbx),%rax
    0.00 :	  5bdccc:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
         :
         :	                /*
         :	                 * In outer-join cases, we could get here even though the batch file
         :	                 * is empty.
         :	                 */
         :	                if (file == NULL)
    0.00 :	  5bdcd0:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5bdcd3:       74 c3                   je     5bdc98 <ExecHashJoin+0x1f8>
         :	                        return NULL;
         :
         :	                slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5bdcd5:       49 8b 8e c8 00 00 00    mov    0xc8(%r14),%rcx
    0.00 :	  5bdcdc:       48 8d 55 d0             lea    -0x30(%rbp),%rdx
    0.00 :	  5bdce0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdce3:       e8 c8 fc ff ff          callq  5bd9b0 <ExecHashJoinGetSavedTuple>
         :	                                                                                 file,
         :	                                                                                 hashvalue,
         :	                                                                                 hjstate->hj_OuterTupleSlot);
         :	                if (!TupIsNull(slot))
    0.00 :	  5bdce8:       48 85 c0                test   %rax,%rax
         :	                 * is empty.
         :	                 */
         :	                if (file == NULL)
         :	                        return NULL;
         :
         :	                slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5bdceb:       49 89 c4                mov    %rax,%r12
         :	                                                                                 file,
         :	                                                                                 hashvalue,
         :	                                                                                 hjstate->hj_OuterTupleSlot);
         :	                if (!TupIsNull(slot))
    0.00 :	  5bdcee:       74 a8                   je     5bdc98 <ExecHashJoin+0x1f8>
    0.00 :	  5bdcf0:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5bdcf4:       75 a2                   jne    5bdc98 <ExecHashJoin+0x1f8>
         :	                                        else
         :	                                                node->hj_JoinState = HJ_NEED_NEW_BATCH;
         :	                                        continue;
         :	                                }
         :
         :	                                econtext->ecxt_outertuple = outerTupleSlot;
    0.00 :	  5bdcf6:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:227
   16.67 :	  5bdcfa:       4c 89 61 18             mov    %r12,0x18(%rcx)
         :
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
    0.00 :	  5bdcfe:       8b 75 d0                mov    -0x30(%rbp),%esi
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
    0.00 :	  5bdd01:       48 8d 4d cc             lea    -0x34(%rbp),%rcx
    0.00 :	  5bdd05:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	  5bdd09:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
         :	                                                node->hj_JoinState = HJ_NEED_NEW_BATCH;
         :	                                        continue;
         :	                                }
         :
         :	                                econtext->ecxt_outertuple = outerTupleSlot;
         :	                                node->hj_MatchedOuter = false;
    0.00 :	  5bdd0d:       41 c6 86 f4 00 00 00    movb   $0x0,0xf4(%r14)
    0.00 :	  5bdd14:       00 
         :
         :	                                /*
         :	                                 * Find the corresponding bucket for this tuple in the main
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
    0.00 :	  5bdd15:       41 89 b6 b0 00 00 00    mov    %esi,0xb0(%r14)
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
    0.00 :	  5bdd1c:       e8 9f dd ff ff          callq  5bbac0 <ExecHashGetBucketAndBatch>
         :	                                                                                  &node->hj_CurBucketNo, &batchno);
         :	                                node->hj_CurSkewBucketNo = ExecHashGetSkewBucket(hashtable,
    0.00 :	  5bdd21:       8b 75 d0                mov    -0x30(%rbp),%esi
    0.00 :	  5bdd24:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5bdd28:       e8 83 de ff ff          callq  5bbbb0 <ExecHashGetSkewBucket>
         :
         :	                                /*
         :	                                 * The tuple might not belong to the current batch (where
         :	                                 * "current batch" includes the skew buckets if any).
         :	                                 */
         :	                                if (batchno != hashtable->curbatch &&
    0.00 :	  5bdd2d:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :	                                 * hash table or skew hash table.
         :	                                 */
         :	                                node->hj_CurHashValue = hashvalue;
         :	                                ExecHashGetBucketAndBatch(hashtable, hashvalue,
         :	                                                                                  &node->hj_CurBucketNo, &batchno);
         :	                                node->hj_CurSkewBucketNo = ExecHashGetSkewBucket(hashtable,
    0.00 :	  5bdd31:       41 89 86 b8 00 00 00    mov    %eax,0xb8(%r14)
         :	                                                                                                                                 hashvalue);
         :	                                node->hj_CurTuple = NULL;
    0.00 :	  5bdd38:       49 c7 86 c0 00 00 00    movq   $0x0,0xc0(%r14)
    0.00 :	  5bdd3f:       00 00 00 00 
         :
         :	                                /*
         :	                                 * The tuple might not belong to the current batch (where
         :	                                 * "current batch" includes the skew buckets if any).
         :	                                 */
         :	                                if (batchno != hashtable->curbatch &&
    0.00 :	  5bdd43:       8b 45 cc                mov    -0x34(%rbp),%eax
    0.00 :	  5bdd46:       39 42 44                cmp    %eax,0x44(%rdx)
    0.00 :	  5bdd49:       74 0e                   je     5bdd59 <ExecHashJoin+0x2b9>
    0.00 :	  5bdd4b:       41 83 be b8 00 00 00    cmpl   $0xffffffff,0xb8(%r14)
    0.00 :	  5bdd52:       ff 
    0.00 :	  5bdd53:       0f 84 4d 04 00 00       je     5be1a6 <ExecHashJoin+0x706>
         :	                                        /* Loop around, staying in HJ_NEED_NEW_OUTER state */
         :	                                        continue;
         :	                                }
         :
         :	                                /* OK, let's scan the bucket for matches */
         :	                                node->hj_JoinState = HJ_SCAN_BUCKET;
    0.00 :	  5bdd59:       41 c7 86 f0 00 00 00    movl   $0x3,0xf0(%r14)
    0.00 :	  5bdd60:       03 00 00 00 
         :	                                /*
         :	                                 * We check for interrupts here because this corresponds to
         :	                                 * where we'd fetch a row from a child plan node in other join
         :	                                 * types.
         :	                                 */
         :	                                CHECK_FOR_INTERRUPTS();
    0.00 :	  5bdd64:       0f b6 05 25 c3 5f 00    movzbl 0x5fc325(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5bdd6b:       84 c0                   test   %al,%al
    0.00 :	  5bdd6d:       0f 85 8d 03 00 00       jne    5be100 <ExecHashJoin+0x660>
         :
         :	                                /*
         :	                                 * Scan the selected hash bucket for matches to current outer
         :	                                 */
         :	                                if (!ExecScanHashBucket(node, econtext))
    0.00 :	  5bdd73:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdd77:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdd7a:       e8 21 e0 ff ff          callq  5bbda0 <ExecScanHashBucket>
    0.00 :	  5bdd7f:       84 c0                   test   %al,%al
    0.00 :	  5bdd81:       0f 85 39 02 00 00       jne    5bdfc0 <ExecHashJoin+0x520>
         :	                                {
         :	                                        /* out of matches; check for possible outer-join fill */
         :	                                        node->hj_JoinState = HJ_FILL_OUTER_TUPLE;
    0.00 :	  5bdd87:       41 c7 86 f0 00 00 00    movl   $0x4,0xf0(%r14)
    0.00 :	  5bdd8e:       04 00 00 00 
         :	                                        continue;
    0.00 :	  5bdd92:       e9 91 fd ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdd97:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bdd9e:       00 00 
         :	 * Returns true if successful, false if there are no more batches.
         :	 */
         :	static bool
         :	ExecHashJoinNewBatch(HashJoinState *hjstate)
         :	{
         :	        HashJoinTable hashtable = hjstate->hj_HashTable;
    0.00 :	  5bdda0:       4d 8b a6 a8 00 00 00    mov    0xa8(%r14),%r12
         :	        BufFile    *innerFile;
         :	        TupleTableSlot *slot;
         :	        uint32          hashvalue;
         :
         :	        nbatch = hashtable->nbatch;
         :	        curbatch = hashtable->curbatch;
    0.00 :	  5bdda7:       41 8b 5c 24 44          mov    0x44(%r12),%ebx
         :	        int                     curbatch;
         :	        BufFile    *innerFile;
         :	        TupleTableSlot *slot;
         :	        uint32          hashvalue;
         :
         :	        nbatch = hashtable->nbatch;
    0.00 :	  5bddac:       45 8b 7c 24 40          mov    0x40(%r12),%r15d
         :	        curbatch = hashtable->curbatch;
         :
         :	        if (curbatch > 0)
    0.00 :	  5bddb1:       85 db                   test   %ebx,%ebx
    0.00 :	  5bddb3:       0f 8e 77 03 00 00       jle    5be130 <ExecHashJoin+0x690>
         :	        {
         :	                /*
         :	                 * We no longer need the previous outer batch file; close it right
         :	                 * away to free disk space.
         :	                 */
         :	                if (hashtable->outerBatchFile[curbatch])
    0.00 :	  5bddb9:       48 63 c3                movslq %ebx,%rax
    0.00 :	  5bddbc:       4c 8d 2c c5 00 00 00    lea    0x0(,%rax,8),%r13
    0.00 :	  5bddc3:       00 
    0.00 :	  5bddc4:       4c 89 e8                mov    %r13,%rax
    0.00 :	  5bddc7:       49 03 44 24 70          add    0x70(%r12),%rax
    0.00 :	  5bddcc:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5bddcf:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bddd2:       74 0d                   je     5bdde1 <ExecHashJoin+0x341>
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
    0.00 :	  5bddd4:       e8 d7 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bddd9:       4c 89 e8                mov    %r13,%rax
    0.00 :	  5bdddc:       49 03 44 24 70          add    0x70(%r12),%rax
         :	                hashtable->outerBatchFile[curbatch] = NULL;
    0.00 :	  5bdde1:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
         :	         *
         :	         * 3. Similarly, if we have increased nbatch since starting the outer
         :	         * scan, we have to rescan outer batches in case they contain tuples that
         :	         * need to be reassigned.
         :	         */
         :	        curbatch++;
    0.00 :	  5bdde8:       44 8d 6b 01             lea    0x1(%rbx),%r13d
         :	        while (curbatch < nbatch &&
    0.00 :	  5bddec:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  5bddef:       7f 73                   jg     5bde64 <ExecHashJoin+0x3c4>
    0.00 :	  5bddf1:       e9 7a 04 00 00          jmpq   5be270 <ExecHashJoin+0x7d0>
    0.00 :	  5bddf6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5bddfd:       00 00 00 
    0.00 :	  5bde00:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bde05:       48 83 3c d8 00          cmpq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde0a:       0f 85 38 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                   (hashtable->outerBatchFile[curbatch] == NULL ||
         :	                        hashtable->innerBatchFile[curbatch] == NULL))
         :	        {
         :	                if (hashtable->outerBatchFile[curbatch] &&
    0.00 :	  5bde10:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5bde17:       00 
    0.00 :	  5bde18:       0f 85 2a 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        HJ_FILL_INNER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
         :	                        nbatch != hashtable->nbatch_original)
         :	                        break;                          /* must process due to rule 2 */
         :	                if (hashtable->outerBatchFile[curbatch] &&
    0.00 :	  5bde1e:       45 3b 7c 24 4c          cmp    0x4c(%r12),%r15d
    0.00 :	  5bde23:       0f 85 1f 02 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        break;                          /* must process due to rule 3 */
         :	                /* We can ignore this batch. */
         :	                /* Release associated temp files right away. */
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
         :	                hashtable->innerBatchFile[curbatch] = NULL;
    0.00 :	  5bde29:       48 c7 04 d8 00 00 00    movq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde30:       00 
         :	                if (hashtable->outerBatchFile[curbatch])
    0.00 :	  5bde31:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bde35:       49 03 44 24 70          add    0x70(%r12),%rax
    0.00 :	  5bde3a:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5bde3d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bde40:       74 0e                   je     5bde50 <ExecHashJoin+0x3b0>
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
    0.00 :	  5bde42:       e8 69 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bde47:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  5bde4b:       49 03 44 24 70          add    0x70(%r12),%rax
         :	                hashtable->outerBatchFile[curbatch] = NULL;
         :	                curbatch++;
    0.00 :	  5bde50:       41 83 c5 01             add    $0x1,%r13d
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
         :	                hashtable->innerBatchFile[curbatch] = NULL;
         :	                if (hashtable->outerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->outerBatchFile[curbatch]);
         :	                hashtable->outerBatchFile[curbatch] = NULL;
    0.00 :	  5bde54:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
         :	         * 3. Similarly, if we have increased nbatch since starting the outer
         :	         * scan, we have to rescan outer batches in case they contain tuples that
         :	         * need to be reassigned.
         :	         */
         :	        curbatch++;
         :	        while (curbatch < nbatch &&
    0.00 :	  5bde5b:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  5bde5e:       0f 8e 0c 04 00 00       jle    5be270 <ExecHashJoin+0x7d0>
    0.00 :	  5bde64:       49 63 dd                movslq %r13d,%rbx
    0.00 :	  5bde67:       48 8d 0c dd 00 00 00    lea    0x0(,%rbx,8),%rcx
    0.00 :	  5bde6e:       00 
    0.00 :	  5bde6f:       48 89 4d c0             mov    %rcx,-0x40(%rbp)
    0.00 :	  5bde73:       49 8b 44 24 70          mov    0x70(%r12),%rax
    0.00 :	  5bde78:       48 83 3c d8 00          cmpq   $0x0,(%rax,%rbx,8)
    0.00 :	  5bde7d:       75 81                   jne    5bde00 <ExecHashJoin+0x360>
         :	                        hashtable->innerBatchFile[curbatch] == NULL))
         :	        {
         :	                if (hashtable->outerBatchFile[curbatch] &&
         :	                        HJ_FILL_OUTER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
    0.00 :	  5bde7f:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bde84:       48 8b 3c d8             mov    (%rax,%rbx,8),%rdi
    0.00 :	  5bde88:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5bde8b:       74 9c                   je     5bde29 <ExecHashJoin+0x389>
    0.00 :	  5bde8d:       49 83 be d8 00 00 00    cmpq   $0x0,0xd8(%r14)
    0.00 :	  5bde94:       00 
    0.00 :	  5bde95:       0f 85 ad 01 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        HJ_FILL_INNER(hjstate))
         :	                        break;                          /* must process due to rule 1 */
         :	                if (hashtable->innerBatchFile[curbatch] &&
    0.00 :	  5bde9b:       45 3b 7c 24 48          cmp    0x48(%r12),%r15d
    0.00 :	  5bdea0:       0f 85 a2 01 00 00       jne    5be048 <ExecHashJoin+0x5a8>
         :	                        nbatch != hashtable->nbatch_outstart)
         :	                        break;                          /* must process due to rule 3 */
         :	                /* We can ignore this batch. */
         :	                /* Release associated temp files right away. */
         :	                if (hashtable->innerBatchFile[curbatch])
         :	                        BufFileClose(hashtable->innerBatchFile[curbatch]);
    0.00 :	  5bdea6:       e8 05 d1 0b 00          callq  67afb0 <BufFileClose>
    0.00 :	  5bdeab:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5bdeb0:       e9 74 ff ff ff          jmpq   5bde29 <ExecHashJoin+0x389>
    0.00 :	  5bdeb5:       0f 1f 00                nopl   (%rax)
         :	                                /*
         :	                                 * We have finished a batch, but we are doing right/full join,
         :	                                 * so any unmatched inner tuples in the hashtable have to be
         :	                                 * emitted before we continue to the next batch.
         :	                                 */
         :	                                if (!ExecScanHashTableForUnmatched(node, econtext))
    0.00 :	  5bdeb8:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdebc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5bdebf:       e8 ec dd ff ff          callq  5bbcb0 <ExecScanHashTableForUnmatched>
    0.00 :	  5bdec4:       84 c0                   test   %al,%al
    0.00 :	  5bdec6:       0f 84 e4 00 00 00       je     5bdfb0 <ExecHashJoin+0x510>
         :
         :	                                /*
         :	                                 * Generate a fake join tuple with nulls for the outer tuple,
         :	                                 * and return it if it passes the non-join quals.
         :	                                 */
         :	                                econtext->ecxt_outertuple = node->hj_NullOuterTupleSlot;
    0.00 :	  5bdecc:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
    0.00 :	  5bded3:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5bded7:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                                if (otherqual == NIL ||
    0.00 :	  5bdedb:       48 83 7d a8 00          cmpq   $0x0,-0x58(%rbp)
    0.00 :	  5bdee0:       0f 84 8c 00 00 00       je     5bdf72 <ExecHashJoin+0x4d2>
    0.00 :	  5bdee6:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdeea:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bdeee:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdef0:       e8 1b f0 fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdef5:       84 c0                   test   %al,%al
    0.00 :	  5bdef7:       75 79                   jne    5bdf72 <ExecHashJoin+0x4d2>
         :	                                                        (isDone == ExprMultipleResult);
         :	                                                return result;
         :	                                        }
         :	                                }
         :	                                else
         :	                                        InstrCountFiltered2(node, 1);
    0.00 :	  5bdef9:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5bdefd:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdf00:       0f 84 22 fc ff ff       je     5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf06:       f2 0f 10 05 4a 12 1f    movsd  0x1f124a(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bdf0d:       00 
    0.00 :	  5bdf0e:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bdf15:       00 
    0.00 :	  5bdf16:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bdf1d:       00 
    0.00 :	  5bdf1e:       e9 05 fc ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf23:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                 * whether to emit a dummy outer-join tuple.  Whether we emit
         :	                                 * one or not, the next state is NEED_NEW_OUTER.
         :	                                 */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :
         :	                                if (!node->hj_MatchedOuter &&
    0.00 :	  5bdf28:       41 80 be f4 00 00 00    cmpb   $0x0,0xf4(%r14)
    0.00 :	  5bdf2f:       00 
         :	                                /*
         :	                                 * The current outer tuple has run out of matches, so check
         :	                                 * whether to emit a dummy outer-join tuple.  Whether we emit
         :	                                 * one or not, the next state is NEED_NEW_OUTER.
         :	                                 */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5bdf30:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5bdf37:       02 00 00 00 
         :
         :	                                if (!node->hj_MatchedOuter &&
    0.00 :	  5bdf3b:       0f 85 e7 fb ff ff       jne    5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdf41:       49 8b 86 e0 00 00 00    mov    0xe0(%r14),%rax
    0.00 :	  5bdf48:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdf4b:       0f 84 d7 fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
         :	                                {
         :	                                        /*
         :	                                         * Generate a fake join tuple with nulls for the inner
         :	                                         * tuple, and return it if it passes the non-join quals.
         :	                                         */
         :	                                        econtext->ecxt_innertuple = node->hj_NullInnerTupleSlot;
    0.00 :	  5bdf51:       48 8b 4d b0             mov    -0x50(%rbp),%rcx
    0.00 :	  5bdf55:       48 89 41 10             mov    %rax,0x10(%rcx)
         :
         :	                                        if (otherqual == NIL ||
    0.00 :	  5bdf59:       48 83 7d a8 00          cmpq   $0x0,-0x58(%rbp)
    0.00 :	  5bdf5e:       74 12                   je     5bdf72 <ExecHashJoin+0x4d2>
    0.00 :	  5bdf60:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5bdf64:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdf66:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  5bdf69:       e8 a2 ef fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdf6e:       84 c0                   test   %al,%al
    0.00 :	  5bdf70:       74 87                   je     5bdef9 <ExecHashJoin+0x459>
         :	                                if (otherqual == NIL ||
         :	                                        ExecQual(otherqual, econtext, false))
         :	                                {
         :	                                        TupleTableSlot *result;
         :
         :	                                        result = ExecProject(node->js.ps.ps_ProjInfo, &isDone);
    0.00 :	  5bdf72:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5bdf76:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5bdf7a:       e8 81 f0 fe ff          callq  5ad000 <ExecProject>
         :
         :	                                        if (isDone != ExprEndResult)
    0.00 :	  5bdf7f:       8b 55 d4                mov    -0x2c(%rbp),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:400
   16.67 :	  5bdf82:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5bdf85:       0f 84 9d fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
         :	                                        {
         :	                                                node->js.ps.ps_TupFromTlist =
    0.00 :	  5bdf8b:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5bdf8e:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5bdf93:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
         :	                                         (int) node->hj_JoinState);
         :	                }
         :	        }
         :	}
    0.00 :	  5bdf98:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  5bdf9c:       5b                      pop    %rbx
    0.00 :	  5bdf9d:       41 5c                   pop    %r12
    0.00 :	  5bdf9f:       41 5d                   pop    %r13
    0.00 :	  5bdfa1:       41 5e                   pop    %r14
    0.00 :	  5bdfa3:       41 5f                   pop    %r15
    0.00 :	  5bdfa5:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:426
   16.67 :	  5bdfa6:       c3                      retq   
    0.00 :	  5bdfa7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bdfae:       00 00 
         :	                                 * emitted before we continue to the next batch.
         :	                                 */
         :	                                if (!ExecScanHashTableForUnmatched(node, econtext))
         :	                                {
         :	                                        /* no more unmatched tuples */
         :	                                        node->hj_JoinState = HJ_NEED_NEW_BATCH;
    0.00 :	  5bdfb0:       41 c7 86 f0 00 00 00    movl   $0x6,0xf0(%r14)
    0.00 :	  5bdfb7:       06 00 00 00 
         :	                                        continue;
    0.00 :	  5bdfbb:       e9 68 fb ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
         :	                                 * table, and return the slot.
         :	                                 *
         :	                                 * Only the joinquals determine tuple match status, but all
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
    0.00 :	  5bdfc0:       48 83 7d a0 00          cmpq   $0x0,-0x60(%rbp)
    0.00 :	  5bdfc5:       74 41                   je     5be008 <ExecHashJoin+0x568>
    0.00 :	  5bdfc7:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
    0.00 :	  5bdfcb:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  5bdfcf:       31 d2                   xor    %edx,%edx
    0.00 :	  5bdfd1:       e8 3a ef fe ff          callq  5acf10 <ExecQual>
    0.00 :	  5bdfd6:       84 c0                   test   %al,%al
    0.00 :	  5bdfd8:       75 2e                   jne    5be008 <ExecHashJoin+0x568>
         :	                                        }
         :	                                        else
         :	                                                InstrCountFiltered2(node, 1);
         :	                                }
         :	                                else
         :	                                        InstrCountFiltered1(node, 1);
    0.00 :	  5bdfda:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5bdfde:       48 85 c0                test   %rax,%rax
    0.00 :	  5bdfe1:       0f 84 41 fb ff ff       je     5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5bdfe7:       f2 0f 10 05 69 11 1f    movsd  0x1f1169(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bdfee:       00 
    0.00 :	  5bdfef:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5bdff6:       00 
    0.00 :	  5bdff7:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5bdffe:       00 
    0.00 :	  5bdfff:       e9 24 fb ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5be004:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
         :	                                {
         :	                                        node->hj_MatchedOuter = true;
         :	                                        HeapTupleHeaderSetMatch(HJTUPLE_MINTUPLE(node->hj_CurTuple));
    0.00 :	  5be008:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	                                 * Only the joinquals determine tuple match status, but all
         :	                                 * quals must pass to actually return the tuple.
         :	                                 */
         :	                                if (joinqual == NIL || ExecQual(joinqual, econtext, false))
         :	                                {
         :	                                        node->hj_MatchedOuter = true;
    0.00 :	  5be00f:       41 c6 86 f4 00 00 00    movb   $0x1,0xf4(%r14)
    0.00 :	  5be016:       01 
         :	                                        HeapTupleHeaderSetMatch(HJTUPLE_MINTUPLE(node->hj_CurTuple));
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeHashjoin.c:299
   16.67 :	  5be017:       66 81 48 1a 00 80       orw    $0x8000,0x1a(%rax)
         :
         :	                                        /* In an antijoin, we never return a matched tuple */
         :	                                        if (node->js.jointype == JOIN_ANTI)
    0.00 :	  5be01d:       41 8b 46 78             mov    0x78(%r14),%eax
    0.00 :	  5be021:       83 f8 05                cmp    $0x5,%eax
    0.00 :	  5be024:       0f 84 bd 00 00 00       je     5be0e7 <ExecHashJoin+0x647>
         :
         :	                                        /*
         :	                                         * In a semijoin, we'll consider returning the first
         :	                                         * match, but after that we're done with this outer tuple.
         :	                                         */
         :	                                        if (node->js.jointype == JOIN_SEMI)
    0.00 :	  5be02a:       83 f8 04                cmp    $0x4,%eax
    0.00 :	  5be02d:       0f 85 a8 fe ff ff       jne    5bdedb <ExecHashJoin+0x43b>
         :	                                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5be033:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5be03a:       02 00 00 00 
    0.00 :	  5be03e:       e9 98 fe ff ff          jmpq   5bdedb <ExecHashJoin+0x43b>
    0.00 :	  5be043:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        }
         :
         :	        if (curbatch >= nbatch)
         :	                return false;                   /* no more batches */
         :
         :	        hashtable->curbatch = curbatch;
    0.00 :	  5be048:       45 89 6c 24 44          mov    %r13d,0x44(%r12)
         :
         :	        /*
         :	         * Reload the hash table with the new inner batch (which could be empty)
         :	         */
         :	        ExecHashTableReset(hashtable);
    0.00 :	  5be04d:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be050:       e8 db db ff ff          callq  5bbc30 <ExecHashTableReset>
         :
         :	        innerFile = hashtable->innerBatchFile[curbatch];
    0.00 :	  5be055:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5be05a:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5be05e:       48 8b 1c 10             mov    (%rax,%rdx,1),%rbx
         :
         :	        if (innerFile != NULL)
    0.00 :	  5be062:       48 85 db                test   %rbx,%rbx
    0.00 :	  5be065:       74 5b                   je     5be0c2 <ExecHashJoin+0x622>
         :	        {
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
    0.00 :	  5be067:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5be069:       31 d2                   xor    %edx,%edx
    0.00 :	  5be06b:       31 f6                   xor    %esi,%esi
    0.00 :	  5be06d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5be070:       e8 8b ca 0b 00          callq  67ab00 <BufFileSeek>
    0.00 :	  5be075:       85 c0                   test   %eax,%eax
    0.00 :	  5be077:       74 15                   je     5be08e <ExecHashJoin+0x5ee>
    0.00 :	  5be079:       e9 08 02 00 00          jmpq   5be286 <ExecHashJoin+0x7e6>
    0.00 :	  5be07e:       66 90                   xchg   %ax,%ax
         :	                {
         :	                        /*
         :	                         * NOTE: some tuples may be sent to future batches.  Also, it is
         :	                         * possible for hashtable->nbatch to be increased here!
         :	                         */
         :	                        ExecHashTableInsert(hashtable, slot, hashvalue);
    0.00 :	  5be080:       8b 55 c8                mov    -0x38(%rbp),%edx
    0.00 :	  5be083:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5be086:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be089:       e8 82 e3 ff ff          callq  5bc410 <ExecHashTableInsert>
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
         :	                                        (errcode_for_file_access(),
         :	                                   errmsg("could not rewind hash-join temporary file: %m")));
         :
         :	                while ((slot = ExecHashJoinGetSavedTuple(hjstate,
    0.00 :	  5be08e:       49 8b 8e d0 00 00 00    mov    0xd0(%r14),%rcx
    0.00 :	  5be095:       48 8d 55 c8             lea    -0x38(%rbp),%rdx
    0.00 :	  5be099:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5be09c:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5be09f:       e8 0c f9 ff ff          callq  5bd9b0 <ExecHashJoinGetSavedTuple>
    0.00 :	  5be0a4:       48 85 c0                test   %rax,%rax
    0.00 :	  5be0a7:       75 d7                   jne    5be080 <ExecHashJoin+0x5e0>
         :
         :	                /*
         :	                 * after we build the hash table, the inner batch file is no longer
         :	                 * needed
         :	                 */
         :	                BufFileClose(innerFile);
    0.00 :	  5be0a9:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5be0ac:       e8 ff ce 0b 00          callq  67afb0 <BufFileClose>
         :	                hashtable->innerBatchFile[curbatch] = NULL;
    0.00 :	  5be0b1:       49 8b 44 24 68          mov    0x68(%r12),%rax
    0.00 :	  5be0b6:       48 8b 4d c0             mov    -0x40(%rbp),%rcx
    0.00 :	  5be0ba:       48 c7 04 08 00 00 00    movq   $0x0,(%rax,%rcx,1)
    0.00 :	  5be0c1:       00 
         :	        }
         :
         :	        /*
         :	         * Rewind outer batch file (if present), so that we can start reading it.
         :	         */
         :	        if (hashtable->outerBatchFile[curbatch] != NULL)
    0.00 :	  5be0c2:       49 8b 44 24 70          mov    0x70(%r12),%rax
    0.00 :	  5be0c7:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5be0cb:       48 8b 3c 10             mov    (%rax,%rdx,1),%rdi
    0.00 :	  5be0cf:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5be0d2:       74 13                   je     5be0e7 <ExecHashJoin+0x647>
         :	        {
         :	                if (BufFileSeek(hashtable->outerBatchFile[curbatch], 0, 0L, SEEK_SET))
    0.00 :	  5be0d4:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5be0d6:       31 d2                   xor    %edx,%edx
    0.00 :	  5be0d8:       31 f6                   xor    %esi,%esi
    0.00 :	  5be0da:       e8 21 ca 0b 00          callq  67ab00 <BufFileSeek>
    0.00 :	  5be0df:       85 c0                   test   %eax,%eax
    0.00 :	  5be0e1:       0f 85 ea 00 00 00       jne    5be1d1 <ExecHashJoin+0x731>
         :	                                /*
         :	                                 * Try to advance to next batch.  Done if there are no more.
         :	                                 */
         :	                                if (!ExecHashJoinNewBatch(node))
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
    0.00 :	  5be0e7:       41 c7 86 f0 00 00 00    movl   $0x2,0xf0(%r14)
    0.00 :	  5be0ee:       02 00 00 00 
    0.00 :	  5be0f2:       e9 31 fa ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
    0.00 :	  5be0f7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5be0fe:       00 00 
         :	                                /*
         :	                                 * We check for interrupts here because this corresponds to
         :	                                 * where we'd fetch a row from a child plan node in other join
         :	                                 * types.
         :	                                 */
         :	                                CHECK_FOR_INTERRUPTS();
    0.00 :	  5be100:       e8 9b e1 0d 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5be105:       e9 69 fc ff ff          jmpq   5bdd73 <ExecHashJoin+0x2d3>
    0.00 :	  5be10a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                                                         true,          /* outer tuple */
         :	                                                                         HJ_FILL_OUTER(hjstate),
         :	                                                                         hashvalue))
         :	                        {
         :	                                /* remember outer relation is not empty for possible rescan */
         :	                                hjstate->hj_OuterNotEmpty = true;
    0.00 :	  5be110:       41 c6 86 f5 00 00 00    movb   $0x1,0xf5(%r14)
    0.00 :	  5be117:       01 
         :	                                 * We don't have an outer tuple, try to get the next one
         :	                                 */
         :	                                outerTupleSlot = ExecHashJoinOuterGetTuple(outerNode,
         :	                                                                                                                   node,
         :	                                                                                                                   &hashvalue);
         :	                                if (TupIsNull(outerTupleSlot))
    0.00 :	  5be118:       41 80 7c 24 04 00       cmpb   $0x0,0x4(%r12)
    0.00 :	  5be11e:       0f 85 74 fb ff ff       jne    5bdc98 <ExecHashJoin+0x1f8>
    0.00 :	  5be124:       e9 cd fb ff ff          jmpq   5bdcf6 <ExecHashJoin+0x256>
    0.00 :	  5be129:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                 * Reset some of the skew optimization state variables, since we no
         :	                 * longer need to consider skew tuples after the first batch. The
         :	                 * memory context reset we are about to do will release the skew
         :	                 * hashtable itself.
         :	                 */
         :	                hashtable->skewEnabled = false;
    0.00 :	  5be130:       41 c6 44 24 21 00       movb   $0x0,0x21(%r12)
         :	                hashtable->skewBucket = NULL;
    0.00 :	  5be136:       49 c7 44 24 28 00 00    movq   $0x0,0x28(%r12)
    0.00 :	  5be13d:       00 00 
         :	                hashtable->skewBucketNums = NULL;
    0.00 :	  5be13f:       49 c7 44 24 38 00 00    movq   $0x0,0x38(%r12)
    0.00 :	  5be146:       00 00 
         :	                hashtable->nSkewBuckets = 0;
    0.00 :	  5be148:       41 c7 44 24 34 00 00    movl   $0x0,0x34(%r12)
    0.00 :	  5be14f:       00 00 
         :	                hashtable->spaceUsedSkew = 0;
    0.00 :	  5be151:       49 c7 84 24 a8 00 00    movq   $0x0,0xa8(%r12)
    0.00 :	  5be158:       00 00 00 00 00 
    0.00 :	  5be15d:       e9 86 fc ff ff          jmpq   5bdde8 <ExecHashJoin+0x348>
    0.00 :	  5be162:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be168:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5be16f:       00 
    0.00 :	  5be170:       0f 84 aa 00 00 00       je     5be220 <ExecHashJoin+0x780>
         :	                                                 (outerNode->plan->startup_cost < hashNode->ps.plan->total_cost &&
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
    0.00 :	  5be176:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  5be17a:       e8 21 e3 fe ff          callq  5ac4a0 <ExecProcNode>
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
    0.00 :	  5be17f:       48 85 c0                test   %rax,%rax
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
         :	                                                 (outerNode->plan->startup_cost < hashNode->ps.plan->total_cost &&
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
    0.00 :	  5be182:       49 89 86 e8 00 00 00    mov    %rax,0xe8(%r14)
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
    0.00 :	  5be189:       0f 84 e8 00 00 00       je     5be277 <ExecHashJoin+0x7d7>
    0.00 :	  5be18f:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5be193:       0f 85 de 00 00 00       jne    5be277 <ExecHashJoin+0x7d7>
         :	                                        {
         :	                                                node->hj_OuterNotEmpty = false;
         :	                                                return NULL;
         :	                                        }
         :	                                        else
         :	                                                node->hj_OuterNotEmpty = true;
    0.00 :	  5be199:       41 c6 86 f5 00 00 00    movb   $0x1,0xf5(%r14)
    0.00 :	  5be1a0:       01 
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be1a1:       e9 f3 f9 ff ff          jmpq   5bdb99 <ExecHashJoin+0xf9>
         :	                                        /*
         :	                                         * Need to postpone this outer tuple to a later batch.
         :	                                         * Save it in the corresponding outer-batch file.
         :	                                         */
         :	                                        Assert(batchno > hashtable->curbatch);
         :	                                        ExecHashJoinSaveTuple(ExecFetchSlotMinimalTuple(outerTupleSlot),
    0.00 :	  5be1a6:       48 98                   cltq   
    0.00 :	  5be1a8:       8b 5d d0                mov    -0x30(%rbp),%ebx
    0.00 :	  5be1ab:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5be1ae:       4c 8d 2c c5 00 00 00    lea    0x0(,%rax,8),%r13
    0.00 :	  5be1b5:       00 
    0.00 :	  5be1b6:       4c 03 6a 70             add    0x70(%rdx),%r13
    0.00 :	  5be1ba:       e8 91 5d ff ff          callq  5b3f50 <ExecFetchSlotMinimalTuple>
    0.00 :	  5be1bf:       89 de                   mov    %ebx,%esi
    0.00 :	  5be1c1:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5be1c4:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  5be1c7:       e8 94 f3 ff ff          callq  5bd560 <ExecHashJoinSaveTuple>
         :	                                                                                  hashvalue,
         :	                                                                                &hashtable->outerBatchFile[batchno]);
         :	                                        /* Loop around, staying in HJ_NEED_NEW_OUTER state */
         :	                                        continue;
    0.00 :	  5be1cc:       e9 57 f9 ff ff          jmpq   5bdb28 <ExecHashJoin+0x88>
         :	         * Rewind outer batch file (if present), so that we can start reading it.
         :	         */
         :	        if (hashtable->outerBatchFile[curbatch] != NULL)
         :	        {
         :	                if (BufFileSeek(hashtable->outerBatchFile[curbatch], 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
    0.00 :	  5be1d1:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5be1d4:       b9 f0 ba 88 00          mov    $0x88baf0,%ecx
    0.00 :	  5be1d9:       ba 55 03 00 00          mov    $0x355,%edx
    0.00 :	  5be1de:       be 58 b9 88 00          mov    $0x88b958,%esi
    0.00 :	  5be1e3:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5be1e8:       e8 d3 c8 1b 00          callq  77aac0 <errstart>
    0.00 :	  5be1ed:       84 c0                   test   %al,%al
    0.00 :	  5be1ef:       0f 84 69 f9 ff ff       je     5bdb5e <ExecHashJoin+0xbe>
    0.00 :	  5be1f5:       bf d0 b9 88 00          mov    $0x88b9d0,%edi
    0.00 :	  5be1fa:       31 c0                   xor    %eax,%eax
    0.00 :	  5be1fc:       e8 9f e6 1b 00          callq  77c8a0 <errmsg>
    0.00 :	  5be201:       89 c3                   mov    %eax,%ebx
    0.00 :	  5be203:       e8 e8 e8 1b 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  5be208:       89 de                   mov    %ebx,%esi
    0.00 :	  5be20a:       89 c7                   mov    %eax,%edi
    0.00 :	  5be20c:       31 c0                   xor    %eax,%eax
    0.00 :	  5be20e:       e8 cd c3 1b 00          callq  77a5e0 <errfinish>
    0.00 :	  5be213:       e9 46 f9 ff ff          jmpq   5bdb5e <ExecHashJoin+0xbe>
    0.00 :	  5be218:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5be21f:       00 
         :	                                if (HJ_FILL_INNER(node))
         :	                                {
         :	                                        /* no chance to not build the hash table */
         :	                                        node->hj_FirstOuterTupleSlot = NULL;
         :	                                }
         :	                                else if (HJ_FILL_OUTER(node) ||
    0.00 :	  5be220:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5be224:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  5be228:       48 8b 4d 98             mov    -0x68(%rbp),%rcx
    0.00 :	  5be22c:       48 8b 51 08             mov    0x8(%rcx),%rdx
    0.00 :	  5be230:       f2 0f 10 42 10          movsd  0x10(%rdx),%xmm0
    0.00 :	  5be235:       66 0f 2e 40 08          ucomisd 0x8(%rax),%xmm0
    0.00 :	  5be23a:       0f 86 4e f9 ff ff       jbe    5bdb8e <ExecHashJoin+0xee>
    0.00 :	  5be240:       41 80 be f5 00 00 00    cmpb   $0x0,0xf5(%r14)
    0.00 :	  5be247:       00 
    0.00 :	  5be248:       0f 85 40 f9 ff ff       jne    5bdb8e <ExecHashJoin+0xee>
    0.00 :	  5be24e:       e9 23 ff ff ff          jmpq   5be176 <ExecHashJoin+0x6d6>
         :	                                /*
         :	                                 * If the inner relation is completely empty, and we're not
         :	                                 * doing a left outer join, we can quit without scanning the
         :	                                 * outer relation.
         :	                                 */
         :	                                if (hashtable->totalTuples == 0 && !HJ_FILL_OUTER(node))
    0.00 :	  5be253:       0f 8a 8f f9 ff ff       jp     5bdbe8 <ExecHashJoin+0x148>
    0.00 :	  5be259:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5be260:       00 
    0.00 :	  5be261:       0f 85 81 f9 ff ff       jne    5bdbe8 <ExecHashJoin+0x148>
    0.00 :	  5be267:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5be26e:       00 00 
         :	                                        return NULL;    /* end of join */
         :	                                node->hj_JoinState = HJ_NEED_NEW_OUTER;
         :	                                break;
         :
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
    0.00 :	  5be270:       31 c0                   xor    %eax,%eax
    0.00 :	  5be272:       e9 21 fd ff ff          jmpq   5bdf98 <ExecHashJoin+0x4f8>
         :	                                                  !node->hj_OuterNotEmpty))
         :	                                {
         :	                                        node->hj_FirstOuterTupleSlot = ExecProcNode(outerNode);
         :	                                        if (TupIsNull(node->hj_FirstOuterTupleSlot))
         :	                                        {
         :	                                                node->hj_OuterNotEmpty = false;
    0.00 :	  5be277:       41 c6 86 f5 00 00 00    movb   $0x0,0xf5(%r14)
    0.00 :	  5be27e:       00 
    0.00 :	  5be27f:       31 c0                   xor    %eax,%eax
         :	                        default:
         :	                                elog(ERROR, "unrecognized hashjoin state: %d",
         :	                                         (int) node->hj_JoinState);
         :	                }
         :	        }
         :	}
    0.00 :	  5be281:       e9 12 fd ff ff          jmpq   5bdf98 <ExecHashJoin+0x4f8>
         :	        innerFile = hashtable->innerBatchFile[curbatch];
         :
         :	        if (innerFile != NULL)
         :	        {
         :	                if (BufFileSeek(innerFile, 0, 0L, SEEK_SET))
         :	                        ereport(ERROR,
    0.00 :	  5be286:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5be289:       b9 f0 ba 88 00          mov    $0x88baf0,%ecx
    0.00 :	  5be28e:       ba 37 03 00 00          mov    $0x337,%edx
    0.00 :	  5be293:       e9 46 ff ff ff          jmpq   5be1de <ExecHashJoin+0x73e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:445
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:445
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:453
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007832f0 <CHashSearch>:
         :	 * from the data in the hash table and return true.  If not, it will return
         :	 * false.
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
    0.00 :	  7832f0:       55                      push   %rbp
    0.00 :	  7832f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7832f4:       41 54                   push   %r12
    0.00 :	  7832f6:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7832f9:       53                      push   %rbx
    0.00 :	  7832fa:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7832fd:       48 83 ec 20             sub    $0x20,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  783301:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:445
   16.67 :	  783305:       4c 89 e7                mov    %r12,%rdi
   16.67 :	  783308:       e8 43 d0 d0 ff          callq  490350 <hash_any>
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  78330d:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  783311:       8b 7b 10                mov    0x10(%rbx),%edi
    0.00 :	  783314:       21 c7                   and    %eax,%edi
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783316:       89 fe                   mov    %edi,%esi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783318:       d3 ef                   shr    %cl,%edi
    0.00 :	  78331a:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  78331e:       89 fa                   mov    %edi,%edx
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783320:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  783324:       48 03 73 20             add    0x20(%rbx),%rsi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783328:       d3 ea                   shr    %cl,%edx
    0.00 :	  78332a:       48 8b 0d 17 a6 3f 00    mov    0x3fa617(%rip),%rcx        # b7d948 <MyProc>
    0.00 :	  783331:       01 fa                   add    %edi,%edx
    0.00 :	  783333:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	  783337:       48 03 53 28             add    0x28(%rbx),%rdx
    0.00 :	  78333b:       48 89 91 e8 02 00 00    mov    %rdx,0x2e8(%rcx)
         :	        pg_memory_barrier();
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:453
   16.67 :	  783342:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
   16.67 :	  783347:       4c 8d 45 d0             lea    -0x30(%rbp),%r8
    0.00 :	  78334b:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  78334e:       89 c2                   mov    %eax,%edx
    0.00 :	  783350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  783353:       e8 48 f9 ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  783358:       80 7d e8 00             cmpb   $0x0,-0x18(%rbp)
    0.00 :	  78335c:       75 32                   jne    783390 <CHashSearch+0xa0>
         :	                           CHashNodeGetItem(scan.target_node) + table->desc.key_size,
         :	                           table->desc.element_size - table->desc.key_size);
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  78335e:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
   33.33 :	  783363:       48 8b 05 de a5 3f 00    mov    0x3fa5de(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  78336a:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  783371:       00 00 00 00 
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
         :	        if (!scan.found)
    0.00 :	  783375:       0f b6 45 e8             movzbl -0x18(%rbp),%eax
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
    0.00 :	  783379:       48 83 43 40 01          addq   $0x1,0x40(%rbx)
         :	        if (!scan.found)
    0.00 :	  78337e:       84 c0                   test   %al,%al
    0.00 :	  783380:       75 05                   jne    783387 <CHashSearch+0x97>
         :	                CHashTableIncrementStatistic(table, CHS_Search_Failed);
    0.00 :	  783382:       48 83 43 48 01          addq   $0x1,0x48(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  783387:       48 83 c4 20             add    $0x20,%rsp
    0.00 :	  78338b:       5b                      pop    %rbx
    0.00 :	  78338c:       41 5c                   pop    %r12
    0.00 :	  78338e:       c9                      leaveq 
    0.00 :	  78338f:       c3                      retq   
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
         :	        if (scan.found)
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  783390:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  783394:       0f b7 53 0c             movzwl 0xc(%rbx),%edx
    0.00 :	  783398:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  78339b:       29 c2                   sub    %eax,%edx
    0.00 :	  78339d:       49 8d 3c 34             lea    (%r12,%rsi,1),%rdi
    0.00 :	  7833a1:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7833a5:       48 03 75 e0             add    -0x20(%rbp),%rsi
    0.00 :	  7833a9:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7833ac:       e8 3f 68 ce ff          callq  469bf0 <memcpy@plt>
    0.00 :	  7833b1:       eb ab                   jmp    78335e <CHashSearch+0x6e>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   33.33 ??:0
   16.67 ??:0
   16.67 ??:0
   16.67 ??:0
   16.67 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000083470 <__GI_memset>:
 ??:0
   16.67 :	   83470:       48 83 fa 01             cmp    $0x1,%rdx
    0.00 :	   83474:       48 89 f8                mov    %rdi,%rax
    0.00 :	   83477:       75 04                   jne    8347d <__GI_memset+0xd>
    0.00 :	   83479:       40 88 37                mov    %sil,(%rdi)
    0.00 :	   8347c:       c3                      retq   
    0.00 :	   8347d:       49 b9 01 01 01 01 01    movabs $0x101010101010101,%r9
    0.00 :	   83484:       01 01 01 
    0.00 :	   83487:       49 89 d0                mov    %rdx,%r8
    0.00 :	   8348a:       48 0f b6 d6             movzbq %sil,%rdx
    0.00 :	   8348e:       49 0f af d1             imul   %r9,%rdx
    0.00 :	   83492:       49 81 f8 90 00 00 00    cmp    $0x90,%r8
    0.00 :	   83499:       0f 87 e1 02 00 00       ja     83780 <__GI_memset+0x310>
    0.00 :	   8349f:       4c 01 c7                add    %r8,%rdi
    0.00 :	   834a2:       4c 8d 1d 13 00 00 00    lea    0x13(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   834a9:       48 8d 0d 60 2d 0b 00    lea    0xb2d60(%rip),%rcx        # 136210 <next_state.9261+0x8c>
   33.33 :	   834b0:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   834b5:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   834b9:       41 ff e3                jmpq   *%r11
    0.00 :	   834bc:       c3                      retq   
    0.00 :	   834bd:       0f 1f 00                nopl   (%rax)
    0.00 :	   834c0:       48 89 97 77 ff ff ff    mov    %rdx,-0x89(%rdi)
    0.00 :	   834c7:       48 89 97 7f ff ff ff    mov    %rdx,-0x81(%rdi)
    0.00 :	   834ce:       48 89 57 87             mov    %rdx,-0x79(%rdi)
    0.00 :	   834d2:       48 89 57 8f             mov    %rdx,-0x71(%rdi)
    0.00 :	   834d6:       48 89 57 97             mov    %rdx,-0x69(%rdi)
    0.00 :	   834da:       48 89 57 9f             mov    %rdx,-0x61(%rdi)
    0.00 :	   834de:       48 89 57 a7             mov    %rdx,-0x59(%rdi)
    0.00 :	   834e2:       48 89 57 af             mov    %rdx,-0x51(%rdi)
    0.00 :	   834e6:       48 89 57 b7             mov    %rdx,-0x49(%rdi)
    0.00 :	   834ea:       48 89 57 bf             mov    %rdx,-0x41(%rdi)
    0.00 :	   834ee:       48 89 57 c7             mov    %rdx,-0x39(%rdi)
    0.00 :	   834f2:       48 89 57 cf             mov    %rdx,-0x31(%rdi)
    0.00 :	   834f6:       48 89 57 d7             mov    %rdx,-0x29(%rdi)
    0.00 :	   834fa:       48 89 57 df             mov    %rdx,-0x21(%rdi)
    0.00 :	   834fe:       48 89 57 e7             mov    %rdx,-0x19(%rdi)
    0.00 :	   83502:       48 89 57 ef             mov    %rdx,-0x11(%rdi)
    0.00 :	   83506:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   8350a:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   8350d:       c3                      retq   
    0.00 :	   8350e:       66 90                   xchg   %ax,%ax
    0.00 :	   83510:       48 89 97 70 ff ff ff    mov    %rdx,-0x90(%rdi)
    0.00 :	   83517:       48 89 97 78 ff ff ff    mov    %rdx,-0x88(%rdi)
    0.00 :	   8351e:       48 89 57 80             mov    %rdx,-0x80(%rdi)
    0.00 :	   83522:       48 89 57 88             mov    %rdx,-0x78(%rdi)
    0.00 :	   83526:       48 89 57 90             mov    %rdx,-0x70(%rdi)
    0.00 :	   8352a:       48 89 57 98             mov    %rdx,-0x68(%rdi)
    0.00 :	   8352e:       48 89 57 a0             mov    %rdx,-0x60(%rdi)
    0.00 :	   83532:       48 89 57 a8             mov    %rdx,-0x58(%rdi)
    0.00 :	   83536:       48 89 57 b0             mov    %rdx,-0x50(%rdi)
    0.00 :	   8353a:       48 89 57 b8             mov    %rdx,-0x48(%rdi)
    0.00 :	   8353e:       48 89 57 c0             mov    %rdx,-0x40(%rdi)
    0.00 :	   83542:       48 89 57 c8             mov    %rdx,-0x38(%rdi)
    0.00 :	   83546:       48 89 57 d0             mov    %rdx,-0x30(%rdi)
    0.00 :	   8354a:       48 89 57 d8             mov    %rdx,-0x28(%rdi)
    0.00 :	   8354e:       48 89 57 e0             mov    %rdx,-0x20(%rdi)
    0.00 :	   83552:       48 89 57 e8             mov    %rdx,-0x18(%rdi)
    0.00 :	   83556:       48 89 57 f0             mov    %rdx,-0x10(%rdi)
    0.00 :	   8355a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8355e:       c3                      retq   
    0.00 :	   8355f:       90                      nop
    0.00 :	   83560:       48 89 97 76 ff ff ff    mov    %rdx,-0x8a(%rdi)
    0.00 :	   83567:       48 89 97 7e ff ff ff    mov    %rdx,-0x82(%rdi)
    0.00 :	   8356e:       48 89 57 86             mov    %rdx,-0x7a(%rdi)
    0.00 :	   83572:       48 89 57 8e             mov    %rdx,-0x72(%rdi)
    0.00 :	   83576:       48 89 57 96             mov    %rdx,-0x6a(%rdi)
    0.00 :	   8357a:       48 89 57 9e             mov    %rdx,-0x62(%rdi)
    0.00 :	   8357e:       48 89 57 a6             mov    %rdx,-0x5a(%rdi)
    0.00 :	   83582:       48 89 57 ae             mov    %rdx,-0x52(%rdi)
    0.00 :	   83586:       48 89 57 b6             mov    %rdx,-0x4a(%rdi)
    0.00 :	   8358a:       48 89 57 be             mov    %rdx,-0x42(%rdi)
    0.00 :	   8358e:       48 89 57 c6             mov    %rdx,-0x3a(%rdi)
    0.00 :	   83592:       48 89 57 ce             mov    %rdx,-0x32(%rdi)
    0.00 :	   83596:       48 89 57 d6             mov    %rdx,-0x2a(%rdi)
    0.00 :	   8359a:       48 89 57 de             mov    %rdx,-0x22(%rdi)
    0.00 :	   8359e:       48 89 57 e6             mov    %rdx,-0x1a(%rdi)
    0.00 :	   835a2:       48 89 57 ee             mov    %rdx,-0x12(%rdi)
    0.00 :	   835a6:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   835aa:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   835ae:       c3                      retq   
    0.00 :	   835af:       90                      nop
    0.00 :	   835b0:       48 89 97 75 ff ff ff    mov    %rdx,-0x8b(%rdi)
    0.00 :	   835b7:       48 89 97 7d ff ff ff    mov    %rdx,-0x83(%rdi)
    0.00 :	   835be:       48 89 57 85             mov    %rdx,-0x7b(%rdi)
    0.00 :	   835c2:       48 89 57 8d             mov    %rdx,-0x73(%rdi)
    0.00 :	   835c6:       48 89 57 95             mov    %rdx,-0x6b(%rdi)
    0.00 :	   835ca:       48 89 57 9d             mov    %rdx,-0x63(%rdi)
    0.00 :	   835ce:       48 89 57 a5             mov    %rdx,-0x5b(%rdi)
    0.00 :	   835d2:       48 89 57 ad             mov    %rdx,-0x53(%rdi)
    0.00 :	   835d6:       48 89 57 b5             mov    %rdx,-0x4b(%rdi)
    0.00 :	   835da:       48 89 57 bd             mov    %rdx,-0x43(%rdi)
    0.00 :	   835de:       48 89 57 c5             mov    %rdx,-0x3b(%rdi)
    0.00 :	   835e2:       48 89 57 cd             mov    %rdx,-0x33(%rdi)
    0.00 :	   835e6:       48 89 57 d5             mov    %rdx,-0x2b(%rdi)
    0.00 :	   835ea:       48 89 57 dd             mov    %rdx,-0x23(%rdi)
    0.00 :	   835ee:       48 89 57 e5             mov    %rdx,-0x1b(%rdi)
    0.00 :	   835f2:       48 89 57 ed             mov    %rdx,-0x13(%rdi)
    0.00 :	   835f6:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   835fa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   835fe:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83601:       c3                      retq   
    0.00 :	   83602:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83609:       1f 84 00 00 00 00 00 
    0.00 :	   83610:       48 89 97 74 ff ff ff    mov    %rdx,-0x8c(%rdi)
    0.00 :	   83617:       48 89 97 7c ff ff ff    mov    %rdx,-0x84(%rdi)
    0.00 :	   8361e:       48 89 57 84             mov    %rdx,-0x7c(%rdi)
    0.00 :	   83622:       48 89 57 8c             mov    %rdx,-0x74(%rdi)
    0.00 :	   83626:       48 89 57 94             mov    %rdx,-0x6c(%rdi)
    0.00 :	   8362a:       48 89 57 9c             mov    %rdx,-0x64(%rdi)
    0.00 :	   8362e:       48 89 57 a4             mov    %rdx,-0x5c(%rdi)
    0.00 :	   83632:       48 89 57 ac             mov    %rdx,-0x54(%rdi)
    0.00 :	   83636:       48 89 57 b4             mov    %rdx,-0x4c(%rdi)
    0.00 :	   8363a:       48 89 57 bc             mov    %rdx,-0x44(%rdi)
    0.00 :	   8363e:       48 89 57 c4             mov    %rdx,-0x3c(%rdi)
    0.00 :	   83642:       48 89 57 cc             mov    %rdx,-0x34(%rdi)
    0.00 :	   83646:       48 89 57 d4             mov    %rdx,-0x2c(%rdi)
    0.00 :	   8364a:       48 89 57 dc             mov    %rdx,-0x24(%rdi)
    0.00 :	   8364e:       48 89 57 e4             mov    %rdx,-0x1c(%rdi)
   16.67 :	   83652:       48 89 57 ec             mov    %rdx,-0x14(%rdi)
    0.00 :	   83656:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   8365a:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8365d:       c3                      retq   
    0.00 :	   8365e:       66 90                   xchg   %ax,%ax
    0.00 :	   83660:       48 89 97 73 ff ff ff    mov    %rdx,-0x8d(%rdi)
    0.00 :	   83667:       48 89 97 7b ff ff ff    mov    %rdx,-0x85(%rdi)
    0.00 :	   8366e:       48 89 57 83             mov    %rdx,-0x7d(%rdi)
    0.00 :	   83672:       48 89 57 8b             mov    %rdx,-0x75(%rdi)
    0.00 :	   83676:       48 89 57 93             mov    %rdx,-0x6d(%rdi)
    0.00 :	   8367a:       48 89 57 9b             mov    %rdx,-0x65(%rdi)
    0.00 :	   8367e:       48 89 57 a3             mov    %rdx,-0x5d(%rdi)
    0.00 :	   83682:       48 89 57 ab             mov    %rdx,-0x55(%rdi)
    0.00 :	   83686:       48 89 57 b3             mov    %rdx,-0x4d(%rdi)
    0.00 :	   8368a:       48 89 57 bb             mov    %rdx,-0x45(%rdi)
    0.00 :	   8368e:       48 89 57 c3             mov    %rdx,-0x3d(%rdi)
    0.00 :	   83692:       48 89 57 cb             mov    %rdx,-0x35(%rdi)
    0.00 :	   83696:       48 89 57 d3             mov    %rdx,-0x2d(%rdi)
    0.00 :	   8369a:       48 89 57 db             mov    %rdx,-0x25(%rdi)
    0.00 :	   8369e:       48 89 57 e3             mov    %rdx,-0x1d(%rdi)
    0.00 :	   836a2:       48 89 57 eb             mov    %rdx,-0x15(%rdi)
    0.00 :	   836a6:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   836aa:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   836ad:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   836b0:       c3                      retq   
    0.00 :	   836b1:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   836b8:       0f 1f 84 00 00 00 00 
    0.00 :	   836bf:       00 
    0.00 :	   836c0:       48 89 97 72 ff ff ff    mov    %rdx,-0x8e(%rdi)
    0.00 :	   836c7:       48 89 97 7a ff ff ff    mov    %rdx,-0x86(%rdi)
    0.00 :	   836ce:       48 89 57 82             mov    %rdx,-0x7e(%rdi)
    0.00 :	   836d2:       48 89 57 8a             mov    %rdx,-0x76(%rdi)
    0.00 :	   836d6:       48 89 57 92             mov    %rdx,-0x6e(%rdi)
    0.00 :	   836da:       48 89 57 9a             mov    %rdx,-0x66(%rdi)
    0.00 :	   836de:       48 89 57 a2             mov    %rdx,-0x5e(%rdi)
    0.00 :	   836e2:       48 89 57 aa             mov    %rdx,-0x56(%rdi)
    0.00 :	   836e6:       48 89 57 b2             mov    %rdx,-0x4e(%rdi)
    0.00 :	   836ea:       48 89 57 ba             mov    %rdx,-0x46(%rdi)
    0.00 :	   836ee:       48 89 57 c2             mov    %rdx,-0x3e(%rdi)
    0.00 :	   836f2:       48 89 57 ca             mov    %rdx,-0x36(%rdi)
    0.00 :	   836f6:       48 89 57 d2             mov    %rdx,-0x2e(%rdi)
    0.00 :	   836fa:       48 89 57 da             mov    %rdx,-0x26(%rdi)
    0.00 :	   836fe:       48 89 57 e2             mov    %rdx,-0x1e(%rdi)
    0.00 :	   83702:       48 89 57 ea             mov    %rdx,-0x16(%rdi)
    0.00 :	   83706:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   8370a:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   8370d:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83711:       c3                      retq   
    0.00 :	   83712:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   83719:       1f 84 00 00 00 00 00 
    0.00 :	   83720:       48 89 97 71 ff ff ff    mov    %rdx,-0x8f(%rdi)
    0.00 :	   83727:       48 89 97 79 ff ff ff    mov    %rdx,-0x87(%rdi)
    0.00 :	   8372e:       48 89 57 81             mov    %rdx,-0x7f(%rdi)
    0.00 :	   83732:       48 89 57 89             mov    %rdx,-0x77(%rdi)
    0.00 :	   83736:       48 89 57 91             mov    %rdx,-0x6f(%rdi)
    0.00 :	   8373a:       48 89 57 99             mov    %rdx,-0x67(%rdi)
    0.00 :	   8373e:       48 89 57 a1             mov    %rdx,-0x5f(%rdi)
    0.00 :	   83742:       48 89 57 a9             mov    %rdx,-0x57(%rdi)
    0.00 :	   83746:       48 89 57 b1             mov    %rdx,-0x4f(%rdi)
    0.00 :	   8374a:       48 89 57 b9             mov    %rdx,-0x47(%rdi)
    0.00 :	   8374e:       48 89 57 c1             mov    %rdx,-0x3f(%rdi)
    0.00 :	   83752:       48 89 57 c9             mov    %rdx,-0x37(%rdi)
    0.00 :	   83756:       48 89 57 d1             mov    %rdx,-0x2f(%rdi)
    0.00 :	   8375a:       48 89 57 d9             mov    %rdx,-0x27(%rdi)
    0.00 :	   8375e:       48 89 57 e1             mov    %rdx,-0x1f(%rdi)
    0.00 :	   83762:       48 89 57 e9             mov    %rdx,-0x17(%rdi)
    0.00 :	   83766:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   8376a:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   8376d:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83771:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83774:       c3                      retq   
    0.00 :	   83775:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8377c:       00 00 00 00 
    0.00 :	   83780:       49 c7 c2 10 00 00 00    mov    $0x10,%r10
    0.00 :	   83787:       49 89 f9                mov    %rdi,%r9
    0.00 :	   8378a:       49 83 e1 0f             and    $0xf,%r9
    0.00 :	   8378e:       4d 29 ca                sub    %r9,%r10
    0.00 :	   83791:       49 83 e2 0f             and    $0xf,%r10
    0.00 :	   83795:       4c 01 d7                add    %r10,%rdi
    0.00 :	   83798:       4d 29 d0                sub    %r10,%r8
    0.00 :	   8379b:       4c 8d 1d 98 00 00 00    lea    0x98(%rip),%r11        # 8383a <__GI_memset+0x3ca>
    0.00 :	   837a2:       48 8d 0d 97 2b 0b 00    lea    0xb2b97(%rip),%rcx        # 136340 <next_state.9261+0x1bc>
    0.00 :	   837a9:       4a 0f bf 0c 51          movswq (%rcx,%r10,2),%rcx
    0.00 :	   837ae:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   837b2:       41 ff e3                jmpq   *%r11
    0.00 :	   837b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837bc:       00 00 00 00 
    0.00 :	   837c0:       88 57 f3                mov    %dl,-0xd(%rdi)
    0.00 :	   837c3:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   837c6:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837ca:       eb 6e                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   837d0:       88 57 f7                mov    %dl,-0x9(%rdi)
    0.00 :	   837d3:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837d7:       eb 61                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   837e0:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   837e3:       eb 55                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837e5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   837ec:       00 00 00 00 
    0.00 :	   837f0:       88 57 f5                mov    %dl,-0xb(%rdi)
    0.00 :	   837f3:       66 89 57 f6             mov    %dx,-0xa(%rdi)
    0.00 :	   837f7:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   837fb:       eb 3d                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   837fd:       0f 1f 00                nopl   (%rax)
    0.00 :	   83800:       88 57 fd                mov    %dl,-0x3(%rdi)
    0.00 :	   83803:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83807:       eb 31                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83809:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83810:       88 57 fb                mov    %dl,-0x5(%rdi)
    0.00 :	   83813:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83816:       eb 22                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83818:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   8381f:       00 
    0.00 :	   83820:       88 57 f1                mov    %dl,-0xf(%rdi)
    0.00 :	   83823:       66 89 57 f2             mov    %dx,-0xe(%rdi)
    0.00 :	   83827:       89 57 f4                mov    %edx,-0xc(%rdi)
    0.00 :	   8382a:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   8382e:       eb 0a                   jmp    8383a <__GI_memset+0x3ca>
    0.00 :	   83830:       88 57 f9                mov    %dl,-0x7(%rdi)
    0.00 :	   83833:       66 89 57 fa             mov    %dx,-0x6(%rdi)
    0.00 :	   83837:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   8383a:       66 48 0f 6e c2          movq   %rdx,%xmm0
    0.00 :	   8383f:       66 0f 6c c0             punpcklqdq %xmm0,%xmm0
    0.00 :	   83843:       49 81 f8 b0 00 00 00    cmp    $0xb0,%r8
    0.00 :	   8384a:       0f 83 d0 04 00 00       jae    83d20 <__GI_memset+0x8b0>
    0.00 :	   83850:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83853:       4c 8d 0d 53 00 00 00    lea    0x53(%rip),%r9        # 838ad <__GI_memset+0x43d>
    0.00 :	   8385a:       48 8d 0d ff 2a 0b 00    lea    0xb2aff(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83861:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83866:       4e 8d 0c 09             lea    (%rcx,%r9,1),%r9
    0.00 :	   8386a:       41 ff e1                jmpq   *%r9
    0.00 :	   8386d:       66 0f 7f 87 50 ff ff    movdqa %xmm0,-0xb0(%rdi)
    0.00 :	   83874:       ff 
    0.00 :	   83875:       66 0f 7f 87 60 ff ff    movdqa %xmm0,-0xa0(%rdi)
    0.00 :	   8387c:       ff 
    0.00 :	   8387d:       66 0f 7f 87 70 ff ff    movdqa %xmm0,-0x90(%rdi)
    0.00 :	   83884:       ff 
    0.00 :	   83885:       66 0f 7f 47 80          movdqa %xmm0,-0x80(%rdi)
    0.00 :	   8388a:       66 0f 7f 47 90          movdqa %xmm0,-0x70(%rdi)
    0.00 :	   8388f:       66 0f 7f 47 a0          movdqa %xmm0,-0x60(%rdi)
    0.00 :	   83894:       66 0f 7f 47 b0          movdqa %xmm0,-0x50(%rdi)
    0.00 :	   83899:       66 0f 7f 47 c0          movdqa %xmm0,-0x40(%rdi)
    0.00 :	   8389e:       66 0f 7f 47 d0          movdqa %xmm0,-0x30(%rdi)
    0.00 :	   838a3:       66 0f 7f 47 e0          movdqa %xmm0,-0x20(%rdi)
    0.00 :	   838a8:       66 0f 7f 47 f0          movdqa %xmm0,-0x10(%rdi)
    0.00 :	   838ad:       c3                      retq   
    0.00 :	   838ae:       66 0f 7f 87 4f ff ff    movdqa %xmm0,-0xb1(%rdi)
    0.00 :	   838b5:       ff 
    0.00 :	   838b6:       66 0f 7f 87 5f ff ff    movdqa %xmm0,-0xa1(%rdi)
    0.00 :	   838bd:       ff 
    0.00 :	   838be:       66 0f 7f 87 6f ff ff    movdqa %xmm0,-0x91(%rdi)
    0.00 :	   838c5:       ff 
    0.00 :	   838c6:       66 0f 7f 87 7f ff ff    movdqa %xmm0,-0x81(%rdi)
    0.00 :	   838cd:       ff 
    0.00 :	   838ce:       66 0f 7f 47 8f          movdqa %xmm0,-0x71(%rdi)
    0.00 :	   838d3:       66 0f 7f 47 9f          movdqa %xmm0,-0x61(%rdi)
    0.00 :	   838d8:       66 0f 7f 47 af          movdqa %xmm0,-0x51(%rdi)
    0.00 :	   838dd:       66 0f 7f 47 bf          movdqa %xmm0,-0x41(%rdi)
    0.00 :	   838e2:       66 0f 7f 47 cf          movdqa %xmm0,-0x31(%rdi)
    0.00 :	   838e7:       66 0f 7f 47 df          movdqa %xmm0,-0x21(%rdi)
    0.00 :	   838ec:       66 0f 7f 47 ef          movdqa %xmm0,-0x11(%rdi)
    0.00 :	   838f1:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   838f4:       c3                      retq   
    0.00 :	   838f5:       66 0f 7f 87 4e ff ff    movdqa %xmm0,-0xb2(%rdi)
    0.00 :	   838fc:       ff 
    0.00 :	   838fd:       66 0f 7f 87 5e ff ff    movdqa %xmm0,-0xa2(%rdi)
    0.00 :	   83904:       ff 
    0.00 :	   83905:       66 0f 7f 87 6e ff ff    movdqa %xmm0,-0x92(%rdi)
    0.00 :	   8390c:       ff 
    0.00 :	   8390d:       66 0f 7f 87 7e ff ff    movdqa %xmm0,-0x82(%rdi)
    0.00 :	   83914:       ff 
    0.00 :	   83915:       66 0f 7f 47 8e          movdqa %xmm0,-0x72(%rdi)
    0.00 :	   8391a:       66 0f 7f 47 9e          movdqa %xmm0,-0x62(%rdi)
    0.00 :	   8391f:       66 0f 7f 47 ae          movdqa %xmm0,-0x52(%rdi)
    0.00 :	   83924:       66 0f 7f 47 be          movdqa %xmm0,-0x42(%rdi)
    0.00 :	   83929:       66 0f 7f 47 ce          movdqa %xmm0,-0x32(%rdi)
    0.00 :	   8392e:       66 0f 7f 47 de          movdqa %xmm0,-0x22(%rdi)
    0.00 :	   83933:       66 0f 7f 47 ee          movdqa %xmm0,-0x12(%rdi)
    0.00 :	   83938:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   8393c:       c3                      retq   
    0.00 :	   8393d:       66 0f 7f 87 4d ff ff    movdqa %xmm0,-0xb3(%rdi)
    0.00 :	   83944:       ff 
    0.00 :	   83945:       66 0f 7f 87 5d ff ff    movdqa %xmm0,-0xa3(%rdi)
    0.00 :	   8394c:       ff 
    0.00 :	   8394d:       66 0f 7f 87 6d ff ff    movdqa %xmm0,-0x93(%rdi)
    0.00 :	   83954:       ff 
    0.00 :	   83955:       66 0f 7f 87 7d ff ff    movdqa %xmm0,-0x83(%rdi)
    0.00 :	   8395c:       ff 
    0.00 :	   8395d:       66 0f 7f 47 8d          movdqa %xmm0,-0x73(%rdi)
    0.00 :	   83962:       66 0f 7f 47 9d          movdqa %xmm0,-0x63(%rdi)
    0.00 :	   83967:       66 0f 7f 47 ad          movdqa %xmm0,-0x53(%rdi)
    0.00 :	   8396c:       66 0f 7f 47 bd          movdqa %xmm0,-0x43(%rdi)
    0.00 :	   83971:       66 0f 7f 47 cd          movdqa %xmm0,-0x33(%rdi)
    0.00 :	   83976:       66 0f 7f 47 dd          movdqa %xmm0,-0x23(%rdi)
    0.00 :	   8397b:       66 0f 7f 47 ed          movdqa %xmm0,-0x13(%rdi)
    0.00 :	   83980:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83984:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83987:       c3                      retq   
    0.00 :	   83988:       66 0f 7f 87 4c ff ff    movdqa %xmm0,-0xb4(%rdi)
    0.00 :	   8398f:       ff 
    0.00 :	   83990:       66 0f 7f 87 5c ff ff    movdqa %xmm0,-0xa4(%rdi)
    0.00 :	   83997:       ff 
    0.00 :	   83998:       66 0f 7f 87 6c ff ff    movdqa %xmm0,-0x94(%rdi)
    0.00 :	   8399f:       ff 
    0.00 :	   839a0:       66 0f 7f 87 7c ff ff    movdqa %xmm0,-0x84(%rdi)
    0.00 :	   839a7:       ff 
    0.00 :	   839a8:       66 0f 7f 47 8c          movdqa %xmm0,-0x74(%rdi)
    0.00 :	   839ad:       66 0f 7f 47 9c          movdqa %xmm0,-0x64(%rdi)
    0.00 :	   839b2:       66 0f 7f 47 ac          movdqa %xmm0,-0x54(%rdi)
    0.00 :	   839b7:       66 0f 7f 47 bc          movdqa %xmm0,-0x44(%rdi)
    0.00 :	   839bc:       66 0f 7f 47 cc          movdqa %xmm0,-0x34(%rdi)
    0.00 :	   839c1:       66 0f 7f 47 dc          movdqa %xmm0,-0x24(%rdi)
    0.00 :	   839c6:       66 0f 7f 47 ec          movdqa %xmm0,-0x14(%rdi)
    0.00 :	   839cb:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   839ce:       c3                      retq   
    0.00 :	   839cf:       66 0f 7f 87 4b ff ff    movdqa %xmm0,-0xb5(%rdi)
    0.00 :	   839d6:       ff 
    0.00 :	   839d7:       66 0f 7f 87 5b ff ff    movdqa %xmm0,-0xa5(%rdi)
    0.00 :	   839de:       ff 
    0.00 :	   839df:       66 0f 7f 87 6b ff ff    movdqa %xmm0,-0x95(%rdi)
    0.00 :	   839e6:       ff 
    0.00 :	   839e7:       66 0f 7f 87 7b ff ff    movdqa %xmm0,-0x85(%rdi)
    0.00 :	   839ee:       ff 
    0.00 :	   839ef:       66 0f 7f 47 8b          movdqa %xmm0,-0x75(%rdi)
    0.00 :	   839f4:       66 0f 7f 47 9b          movdqa %xmm0,-0x65(%rdi)
    0.00 :	   839f9:       66 0f 7f 47 ab          movdqa %xmm0,-0x55(%rdi)
    0.00 :	   839fe:       66 0f 7f 47 bb          movdqa %xmm0,-0x45(%rdi)
    0.00 :	   83a03:       66 0f 7f 47 cb          movdqa %xmm0,-0x35(%rdi)
    0.00 :	   83a08:       66 0f 7f 47 db          movdqa %xmm0,-0x25(%rdi)
    0.00 :	   83a0d:       66 0f 7f 47 eb          movdqa %xmm0,-0x15(%rdi)
    0.00 :	   83a12:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83a15:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83a18:       c3                      retq   
    0.00 :	   83a19:       66 0f 7f 87 4a ff ff    movdqa %xmm0,-0xb6(%rdi)
    0.00 :	   83a20:       ff 
    0.00 :	   83a21:       66 0f 7f 87 5a ff ff    movdqa %xmm0,-0xa6(%rdi)
    0.00 :	   83a28:       ff 
    0.00 :	   83a29:       66 0f 7f 87 6a ff ff    movdqa %xmm0,-0x96(%rdi)
    0.00 :	   83a30:       ff 
    0.00 :	   83a31:       66 0f 7f 87 7a ff ff    movdqa %xmm0,-0x86(%rdi)
    0.00 :	   83a38:       ff 
    0.00 :	   83a39:       66 0f 7f 47 8a          movdqa %xmm0,-0x76(%rdi)
    0.00 :	   83a3e:       66 0f 7f 47 9a          movdqa %xmm0,-0x66(%rdi)
    0.00 :	   83a43:       66 0f 7f 47 aa          movdqa %xmm0,-0x56(%rdi)
    0.00 :	   83a48:       66 0f 7f 47 ba          movdqa %xmm0,-0x46(%rdi)
    0.00 :	   83a4d:       66 0f 7f 47 ca          movdqa %xmm0,-0x36(%rdi)
    0.00 :	   83a52:       66 0f 7f 47 da          movdqa %xmm0,-0x26(%rdi)
    0.00 :	   83a57:       66 0f 7f 47 ea          movdqa %xmm0,-0x16(%rdi)
    0.00 :	   83a5c:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83a5f:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83a63:       c3                      retq   
    0.00 :	   83a64:       66 0f 7f 87 49 ff ff    movdqa %xmm0,-0xb7(%rdi)
    0.00 :	   83a6b:       ff 
    0.00 :	   83a6c:       66 0f 7f 87 59 ff ff    movdqa %xmm0,-0xa7(%rdi)
    0.00 :	   83a73:       ff 
    0.00 :	   83a74:       66 0f 7f 87 69 ff ff    movdqa %xmm0,-0x97(%rdi)
    0.00 :	   83a7b:       ff 
    0.00 :	   83a7c:       66 0f 7f 87 79 ff ff    movdqa %xmm0,-0x87(%rdi)
    0.00 :	   83a83:       ff 
    0.00 :	   83a84:       66 0f 7f 47 89          movdqa %xmm0,-0x77(%rdi)
    0.00 :	   83a89:       66 0f 7f 47 99          movdqa %xmm0,-0x67(%rdi)
    0.00 :	   83a8e:       66 0f 7f 47 a9          movdqa %xmm0,-0x57(%rdi)
    0.00 :	   83a93:       66 0f 7f 47 b9          movdqa %xmm0,-0x47(%rdi)
    0.00 :	   83a98:       66 0f 7f 47 c9          movdqa %xmm0,-0x37(%rdi)
    0.00 :	   83a9d:       66 0f 7f 47 d9          movdqa %xmm0,-0x27(%rdi)
    0.00 :	   83aa2:       66 0f 7f 47 e9          movdqa %xmm0,-0x17(%rdi)
    0.00 :	   83aa7:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83aaa:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83aae:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83ab1:       c3                      retq   
    0.00 :	   83ab2:       66 0f 7f 87 48 ff ff    movdqa %xmm0,-0xb8(%rdi)
    0.00 :	   83ab9:       ff 
    0.00 :	   83aba:       66 0f 7f 87 58 ff ff    movdqa %xmm0,-0xa8(%rdi)
    0.00 :	   83ac1:       ff 
    0.00 :	   83ac2:       66 0f 7f 87 68 ff ff    movdqa %xmm0,-0x98(%rdi)
    0.00 :	   83ac9:       ff 
    0.00 :	   83aca:       66 0f 7f 87 78 ff ff    movdqa %xmm0,-0x88(%rdi)
    0.00 :	   83ad1:       ff 
    0.00 :	   83ad2:       66 0f 7f 47 88          movdqa %xmm0,-0x78(%rdi)
    0.00 :	   83ad7:       66 0f 7f 47 98          movdqa %xmm0,-0x68(%rdi)
    0.00 :	   83adc:       66 0f 7f 47 a8          movdqa %xmm0,-0x58(%rdi)
    0.00 :	   83ae1:       66 0f 7f 47 b8          movdqa %xmm0,-0x48(%rdi)
    0.00 :	   83ae6:       66 0f 7f 47 c8          movdqa %xmm0,-0x38(%rdi)
    0.00 :	   83aeb:       66 0f 7f 47 d8          movdqa %xmm0,-0x28(%rdi)
    0.00 :	   83af0:       66 0f 7f 47 e8          movdqa %xmm0,-0x18(%rdi)
    0.00 :	   83af5:       48 89 57 f8             mov    %rdx,-0x8(%rdi)
    0.00 :	   83af9:       c3                      retq   
    0.00 :	   83afa:       66 0f 7f 87 47 ff ff    movdqa %xmm0,-0xb9(%rdi)
    0.00 :	   83b01:       ff 
    0.00 :	   83b02:       66 0f 7f 87 57 ff ff    movdqa %xmm0,-0xa9(%rdi)
    0.00 :	   83b09:       ff 
    0.00 :	   83b0a:       66 0f 7f 87 67 ff ff    movdqa %xmm0,-0x99(%rdi)
    0.00 :	   83b11:       ff 
    0.00 :	   83b12:       66 0f 7f 87 77 ff ff    movdqa %xmm0,-0x89(%rdi)
    0.00 :	   83b19:       ff 
    0.00 :	   83b1a:       66 0f 7f 47 87          movdqa %xmm0,-0x79(%rdi)
    0.00 :	   83b1f:       66 0f 7f 47 97          movdqa %xmm0,-0x69(%rdi)
    0.00 :	   83b24:       66 0f 7f 47 a7          movdqa %xmm0,-0x59(%rdi)
    0.00 :	   83b29:       66 0f 7f 47 b7          movdqa %xmm0,-0x49(%rdi)
    0.00 :	   83b2e:       66 0f 7f 47 c7          movdqa %xmm0,-0x39(%rdi)
    0.00 :	   83b33:       66 0f 7f 47 d7          movdqa %xmm0,-0x29(%rdi)
    0.00 :	   83b38:       66 0f 7f 47 e7          movdqa %xmm0,-0x19(%rdi)
    0.00 :	   83b3d:       48 89 57 f7             mov    %rdx,-0x9(%rdi)
    0.00 :	   83b41:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83b44:       c3                      retq   
    0.00 :	   83b45:       66 0f 7f 87 46 ff ff    movdqa %xmm0,-0xba(%rdi)
    0.00 :	   83b4c:       ff 
    0.00 :	   83b4d:       66 0f 7f 87 56 ff ff    movdqa %xmm0,-0xaa(%rdi)
    0.00 :	   83b54:       ff 
    0.00 :	   83b55:       66 0f 7f 87 66 ff ff    movdqa %xmm0,-0x9a(%rdi)
    0.00 :	   83b5c:       ff 
    0.00 :	   83b5d:       66 0f 7f 87 76 ff ff    movdqa %xmm0,-0x8a(%rdi)
    0.00 :	   83b64:       ff 
    0.00 :	   83b65:       66 0f 7f 47 86          movdqa %xmm0,-0x7a(%rdi)
    0.00 :	   83b6a:       66 0f 7f 47 96          movdqa %xmm0,-0x6a(%rdi)
    0.00 :	   83b6f:       66 0f 7f 47 a6          movdqa %xmm0,-0x5a(%rdi)
    0.00 :	   83b74:       66 0f 7f 47 b6          movdqa %xmm0,-0x4a(%rdi)
    0.00 :	   83b79:       66 0f 7f 47 c6          movdqa %xmm0,-0x3a(%rdi)
    0.00 :	   83b7e:       66 0f 7f 47 d6          movdqa %xmm0,-0x2a(%rdi)
    0.00 :	   83b83:       66 0f 7f 47 e6          movdqa %xmm0,-0x1a(%rdi)
    0.00 :	   83b88:       48 89 57 f6             mov    %rdx,-0xa(%rdi)
    0.00 :	   83b8c:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83b90:       c3                      retq   
    0.00 :	   83b91:       66 0f 7f 87 45 ff ff    movdqa %xmm0,-0xbb(%rdi)
    0.00 :	   83b98:       ff 
    0.00 :	   83b99:       66 0f 7f 87 55 ff ff    movdqa %xmm0,-0xab(%rdi)
    0.00 :	   83ba0:       ff 
    0.00 :	   83ba1:       66 0f 7f 87 65 ff ff    movdqa %xmm0,-0x9b(%rdi)
    0.00 :	   83ba8:       ff 
    0.00 :	   83ba9:       66 0f 7f 87 75 ff ff    movdqa %xmm0,-0x8b(%rdi)
    0.00 :	   83bb0:       ff 
    0.00 :	   83bb1:       66 0f 7f 47 85          movdqa %xmm0,-0x7b(%rdi)
    0.00 :	   83bb6:       66 0f 7f 47 95          movdqa %xmm0,-0x6b(%rdi)
    0.00 :	   83bbb:       66 0f 7f 47 a5          movdqa %xmm0,-0x5b(%rdi)
    0.00 :	   83bc0:       66 0f 7f 47 b5          movdqa %xmm0,-0x4b(%rdi)
    0.00 :	   83bc5:       66 0f 7f 47 c5          movdqa %xmm0,-0x3b(%rdi)
    0.00 :	   83bca:       66 0f 7f 47 d5          movdqa %xmm0,-0x2b(%rdi)
    0.00 :	   83bcf:       66 0f 7f 47 e5          movdqa %xmm0,-0x1b(%rdi)
    0.00 :	   83bd4:       48 89 57 f5             mov    %rdx,-0xb(%rdi)
    0.00 :	   83bd8:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83bdc:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83bdf:       c3                      retq   
    0.00 :	   83be0:       66 0f 7f 87 44 ff ff    movdqa %xmm0,-0xbc(%rdi)
    0.00 :	   83be7:       ff 
    0.00 :	   83be8:       66 0f 7f 87 54 ff ff    movdqa %xmm0,-0xac(%rdi)
    0.00 :	   83bef:       ff 
    0.00 :	   83bf0:       66 0f 7f 87 64 ff ff    movdqa %xmm0,-0x9c(%rdi)
    0.00 :	   83bf7:       ff 
    0.00 :	   83bf8:       66 0f 7f 87 74 ff ff    movdqa %xmm0,-0x8c(%rdi)
    0.00 :	   83bff:       ff 
    0.00 :	   83c00:       66 0f 7f 47 84          movdqa %xmm0,-0x7c(%rdi)
    0.00 :	   83c05:       66 0f 7f 47 94          movdqa %xmm0,-0x6c(%rdi)
    0.00 :	   83c0a:       66 0f 7f 47 a4          movdqa %xmm0,-0x5c(%rdi)
    0.00 :	   83c0f:       66 0f 7f 47 b4          movdqa %xmm0,-0x4c(%rdi)
    0.00 :	   83c14:       66 0f 7f 47 c4          movdqa %xmm0,-0x3c(%rdi)
    0.00 :	   83c19:       66 0f 7f 47 d4          movdqa %xmm0,-0x2c(%rdi)
    0.00 :	   83c1e:       66 0f 7f 47 e4          movdqa %xmm0,-0x1c(%rdi)
    0.00 :	   83c23:       48 89 57 f4             mov    %rdx,-0xc(%rdi)
    0.00 :	   83c27:       89 57 fc                mov    %edx,-0x4(%rdi)
    0.00 :	   83c2a:       c3                      retq   
    0.00 :	   83c2b:       66 0f 7f 87 43 ff ff    movdqa %xmm0,-0xbd(%rdi)
    0.00 :	   83c32:       ff 
    0.00 :	   83c33:       66 0f 7f 87 53 ff ff    movdqa %xmm0,-0xad(%rdi)
    0.00 :	   83c3a:       ff 
    0.00 :	   83c3b:       66 0f 7f 87 63 ff ff    movdqa %xmm0,-0x9d(%rdi)
    0.00 :	   83c42:       ff 
    0.00 :	   83c43:       66 0f 7f 87 73 ff ff    movdqa %xmm0,-0x8d(%rdi)
    0.00 :	   83c4a:       ff 
    0.00 :	   83c4b:       66 0f 7f 47 83          movdqa %xmm0,-0x7d(%rdi)
    0.00 :	   83c50:       66 0f 7f 47 93          movdqa %xmm0,-0x6d(%rdi)
    0.00 :	   83c55:       66 0f 7f 47 a3          movdqa %xmm0,-0x5d(%rdi)
    0.00 :	   83c5a:       66 0f 7f 47 b3          movdqa %xmm0,-0x4d(%rdi)
    0.00 :	   83c5f:       66 0f 7f 47 c3          movdqa %xmm0,-0x3d(%rdi)
    0.00 :	   83c64:       66 0f 7f 47 d3          movdqa %xmm0,-0x2d(%rdi)
    0.00 :	   83c69:       66 0f 7f 47 e3          movdqa %xmm0,-0x1d(%rdi)
    0.00 :	   83c6e:       48 89 57 f3             mov    %rdx,-0xd(%rdi)
    0.00 :	   83c72:       89 57 fb                mov    %edx,-0x5(%rdi)
    0.00 :	   83c75:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83c78:       c3                      retq   
    0.00 :	   83c79:       66 0f 7f 87 42 ff ff    movdqa %xmm0,-0xbe(%rdi)
    0.00 :	   83c80:       ff 
    0.00 :	   83c81:       66 0f 7f 87 52 ff ff    movdqa %xmm0,-0xae(%rdi)
    0.00 :	   83c88:       ff 
    0.00 :	   83c89:       66 0f 7f 87 62 ff ff    movdqa %xmm0,-0x9e(%rdi)
    0.00 :	   83c90:       ff 
    0.00 :	   83c91:       66 0f 7f 87 72 ff ff    movdqa %xmm0,-0x8e(%rdi)
    0.00 :	   83c98:       ff 
    0.00 :	   83c99:       66 0f 7f 47 82          movdqa %xmm0,-0x7e(%rdi)
    0.00 :	   83c9e:       66 0f 7f 47 92          movdqa %xmm0,-0x6e(%rdi)
    0.00 :	   83ca3:       66 0f 7f 47 a2          movdqa %xmm0,-0x5e(%rdi)
    0.00 :	   83ca8:       66 0f 7f 47 b2          movdqa %xmm0,-0x4e(%rdi)
    0.00 :	   83cad:       66 0f 7f 47 c2          movdqa %xmm0,-0x3e(%rdi)
    0.00 :	   83cb2:       66 0f 7f 47 d2          movdqa %xmm0,-0x2e(%rdi)
    0.00 :	   83cb7:       66 0f 7f 47 e2          movdqa %xmm0,-0x1e(%rdi)
    0.00 :	   83cbc:       48 89 57 f2             mov    %rdx,-0xe(%rdi)
    0.00 :	   83cc0:       89 57 fa                mov    %edx,-0x6(%rdi)
    0.00 :	   83cc3:       66 89 57 fe             mov    %dx,-0x2(%rdi)
    0.00 :	   83cc7:       c3                      retq   
    0.00 :	   83cc8:       66 0f 7f 87 41 ff ff    movdqa %xmm0,-0xbf(%rdi)
    0.00 :	   83ccf:       ff 
    0.00 :	   83cd0:       66 0f 7f 87 51 ff ff    movdqa %xmm0,-0xaf(%rdi)
    0.00 :	   83cd7:       ff 
    0.00 :	   83cd8:       66 0f 7f 87 61 ff ff    movdqa %xmm0,-0x9f(%rdi)
    0.00 :	   83cdf:       ff 
    0.00 :	   83ce0:       66 0f 7f 87 71 ff ff    movdqa %xmm0,-0x8f(%rdi)
    0.00 :	   83ce7:       ff 
    0.00 :	   83ce8:       66 0f 7f 47 81          movdqa %xmm0,-0x7f(%rdi)
    0.00 :	   83ced:       66 0f 7f 47 91          movdqa %xmm0,-0x6f(%rdi)
    0.00 :	   83cf2:       66 0f 7f 47 a1          movdqa %xmm0,-0x5f(%rdi)
    0.00 :	   83cf7:       66 0f 7f 47 b1          movdqa %xmm0,-0x4f(%rdi)
    0.00 :	   83cfc:       66 0f 7f 47 c1          movdqa %xmm0,-0x3f(%rdi)
    0.00 :	   83d01:       66 0f 7f 47 d1          movdqa %xmm0,-0x2f(%rdi)
    0.00 :	   83d06:       66 0f 7f 47 e1          movdqa %xmm0,-0x1f(%rdi)
    0.00 :	   83d0b:       48 89 57 f1             mov    %rdx,-0xf(%rdi)
    0.00 :	   83d0f:       89 57 f9                mov    %edx,-0x7(%rdi)
    0.00 :	   83d12:       66 89 57 fd             mov    %dx,-0x3(%rdi)
    0.00 :	   83d16:       88 57 ff                mov    %dl,-0x1(%rdi)
    0.00 :	   83d19:       c3                      retq   
    0.00 :	   83d1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   83d20:       44 8b 0d 11 e4 2e 00    mov    0x2ee411(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83d27:       4d 39 c8                cmp    %r9,%r8
    0.00 :	   83d2a:       77 64                   ja     83d90 <__GI_memset+0x920>
    0.00 :	   83d2c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   83d30:       4d 8d 40 80             lea    -0x80(%r8),%r8
    0.00 :	   83d34:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
    0.00 :	   83d3b:       66 0f 7f 07             movdqa %xmm0,(%rdi)
    0.00 :	   83d3f:       66 0f 7f 47 10          movdqa %xmm0,0x10(%rdi)
    0.00 :	   83d44:       66 0f 7f 47 20          movdqa %xmm0,0x20(%rdi)
    0.00 :	   83d49:       66 0f 7f 47 30          movdqa %xmm0,0x30(%rdi)
    0.00 :	   83d4e:       66 0f 7f 47 40          movdqa %xmm0,0x40(%rdi)
    0.00 :	   83d53:       66 0f 7f 47 50          movdqa %xmm0,0x50(%rdi)
    0.00 :	   83d58:       66 0f 7f 47 60          movdqa %xmm0,0x60(%rdi)
    0.00 :	   83d5d:       66 0f 7f 47 70          movdqa %xmm0,0x70(%rdi)
    0.00 :	   83d62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83d69:       73 c5                   jae    83d30 <__GI_memset+0x8c0>
    0.00 :	   83d6b:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83d6e:       4c 8d 1d 38 fb ff ff    lea    -0x4c8(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83d75:       48 8d 0d e4 25 0b 00    lea    0xb25e4(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83d7c:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83d81:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83d85:       41 ff e3                jmpq   *%r11
    0.00 :	   83d88:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d8f:       00 
    0.00 :	   83d90:       49 83 f9 00             cmp    $0x0,%r9
    0.00 :	   83d94:       74 9a                   je     83d30 <__GI_memset+0x8c0>
    0.00 :	   83d96:       eb 08                   jmp    83da0 <__GI_memset+0x930>
    0.00 :	   83d98:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   83d9f:       00 
    0.00 :	   83da0:       4d 8d 40 80             lea    -0x80(%r8),%r8
   16.67 :	   83da4:       49 81 f8 80 00 00 00    cmp    $0x80,%r8
   16.67 :	   83dab:       66 0f e7 07             movntdq %xmm0,(%rdi)
    0.00 :	   83daf:       66 0f e7 47 10          movntdq %xmm0,0x10(%rdi)
    0.00 :	   83db4:       66 0f e7 47 20          movntdq %xmm0,0x20(%rdi)
    0.00 :	   83db9:       66 0f e7 47 30          movntdq %xmm0,0x30(%rdi)
    0.00 :	   83dbe:       66 0f e7 47 40          movntdq %xmm0,0x40(%rdi)
    0.00 :	   83dc3:       66 0f e7 47 50          movntdq %xmm0,0x50(%rdi)
    0.00 :	   83dc8:       66 0f e7 47 60          movntdq %xmm0,0x60(%rdi)
    0.00 :	   83dcd:       66 0f e7 47 70          movntdq %xmm0,0x70(%rdi)
    0.00 :	   83dd2:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83dd9:       73 c5                   jae    83da0 <__GI_memset+0x930>
    0.00 :	   83ddb:       0f ae f8                sfence 
    0.00 :	   83dde:       4c 01 c7                add    %r8,%rdi
    0.00 :	   83de1:       4c 8d 1d c5 fa ff ff    lea    -0x53b(%rip),%r11        # 838ad <__GI_memset+0x43d>
    0.00 :	   83de8:       48 8d 0d 71 25 0b 00    lea    0xb2571(%rip),%rcx        # 136360 <next_state.9261+0x1dc>
    0.00 :	   83def:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83df4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83df8:       41 ff e3                jmpq   *%r11
    0.00 :	   83dfb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83e00:       49 81 f8 00 20 00 00    cmp    $0x2000,%r8
    0.00 :	   83e07:       0f 83 83 00 00 00       jae    83e90 <__GI_memset+0xa20>
    0.00 :	   83e0d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e10:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83e13:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83e17:       74 52                   je     83e6b <__GI_memset+0x9fb>
    0.00 :	   83e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83e20:       48 ff c9                dec    %rcx
    0.00 :	   83e23:       48 89 17                mov    %rdx,(%rdi)
    0.00 :	   83e26:       48 89 57 08             mov    %rdx,0x8(%rdi)
    0.00 :	   83e2a:       48 89 57 10             mov    %rdx,0x10(%rdi)
    0.00 :	   83e2e:       48 89 57 18             mov    %rdx,0x18(%rdi)
    0.00 :	   83e32:       48 89 57 20             mov    %rdx,0x20(%rdi)
    0.00 :	   83e36:       48 89 57 28             mov    %rdx,0x28(%rdi)
    0.00 :	   83e3a:       48 89 57 30             mov    %rdx,0x30(%rdi)
    0.00 :	   83e3e:       48 89 57 38             mov    %rdx,0x38(%rdi)
    0.00 :	   83e42:       48 89 57 40             mov    %rdx,0x40(%rdi)
    0.00 :	   83e46:       48 89 57 48             mov    %rdx,0x48(%rdi)
    0.00 :	   83e4a:       48 89 57 50             mov    %rdx,0x50(%rdi)
    0.00 :	   83e4e:       48 89 57 58             mov    %rdx,0x58(%rdi)
    0.00 :	   83e52:       48 89 57 60             mov    %rdx,0x60(%rdi)
    0.00 :	   83e56:       48 89 57 68             mov    %rdx,0x68(%rdi)
    0.00 :	   83e5a:       48 89 57 70             mov    %rdx,0x70(%rdi)
    0.00 :	   83e5e:       48 89 57 78             mov    %rdx,0x78(%rdi)
    0.00 :	   83e62:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83e69:       75 b5                   jne    83e20 <__GI_memset+0x9b0>
    0.00 :	   83e6b:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83e6f:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83e73:       4c 8d 1d 42 f6 ff ff    lea    -0x9be(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83e7a:       48 8d 0d 8f 23 0b 00    lea    0xb238f(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83e81:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83e86:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83e8a:       41 ff e3                jmpq   *%r11
    0.00 :	   83e8d:       0f 1f 00                nopl   (%rax)
    0.00 :	   83e90:       44 8b 0d a1 e2 2e 00    mov    0x2ee2a1(%rip),%r9d        # 372138 <__x86_64_shared_cache_size>
    0.00 :	   83e97:       4d 39 c1                cmp    %r8,%r9
    0.00 :	   83e9a:       4d 0f 47 c8             cmova  %r8,%r9
    0.00 :	   83e9e:       76 10                   jbe    83eb0 <__GI_memset+0xa40>
    0.00 :	   83ea0:       49 81 f8 00 00 01 00    cmp    $0x10000,%r8
    0.00 :	   83ea7:       0f 83 63 ff ff ff       jae    83e10 <__GI_memset+0x9a0>
    0.00 :	   83ead:       0f 1f 00                nopl   (%rax)
    0.00 :	   83eb0:       4c 89 c9                mov    %r9,%rcx
    0.00 :	   83eb3:       49 83 e1 f8             and    $0xfffffffffffffff8,%r9
    0.00 :	   83eb7:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   83ebb:       74 07                   je     83ec4 <__GI_memset+0xa54>
    0.00 :	   83ebd:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ebf:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	   83ec2:       48 92                   xchg   %rax,%rdx
    0.00 :	   83ec4:       4d 29 c8                sub    %r9,%r8
    0.00 :	   83ec7:       77 27                   ja     83ef0 <__GI_memset+0xa80>
    0.00 :	   83ec9:       41 83 e0 07             and    $0x7,%r8d
    0.00 :	   83ecd:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83ed1:       4c 8d 1d e4 f5 ff ff    lea    -0xa1c(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83ed8:       48 8d 0d 31 23 0b 00    lea    0xb2331(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83edf:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83ee4:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83ee8:       41 ff e3                jmpq   *%r11
    0.00 :	   83eeb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   83ef0:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   83ef3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   83ef7:       74 65                   je     83f5e <__GI_memset+0xaee>
    0.00 :	   83ef9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   83f00:       48 ff c9                dec    %rcx
    0.00 :	   83f03:       48 0f c3 17             movnti %rdx,(%rdi)
    0.00 :	   83f07:       48 0f c3 57 08          movnti %rdx,0x8(%rdi)
    0.00 :	   83f0c:       48 0f c3 57 10          movnti %rdx,0x10(%rdi)
    0.00 :	   83f11:       48 0f c3 57 18          movnti %rdx,0x18(%rdi)
    0.00 :	   83f16:       48 0f c3 57 20          movnti %rdx,0x20(%rdi)
    0.00 :	   83f1b:       48 0f c3 57 28          movnti %rdx,0x28(%rdi)
    0.00 :	   83f20:       48 0f c3 57 30          movnti %rdx,0x30(%rdi)
    0.00 :	   83f25:       48 0f c3 57 38          movnti %rdx,0x38(%rdi)
    0.00 :	   83f2a:       48 0f c3 57 40          movnti %rdx,0x40(%rdi)
    0.00 :	   83f2f:       48 0f c3 57 48          movnti %rdx,0x48(%rdi)
    0.00 :	   83f34:       48 0f c3 57 50          movnti %rdx,0x50(%rdi)
    0.00 :	   83f39:       48 0f c3 57 58          movnti %rdx,0x58(%rdi)
    0.00 :	   83f3e:       48 0f c3 57 60          movnti %rdx,0x60(%rdi)
    0.00 :	   83f43:       48 0f c3 57 68          movnti %rdx,0x68(%rdi)
    0.00 :	   83f48:       48 0f c3 57 70          movnti %rdx,0x70(%rdi)
    0.00 :	   83f4d:       48 0f c3 57 78          movnti %rdx,0x78(%rdi)
    0.00 :	   83f52:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   83f59:       75 a5                   jne    83f00 <__GI_memset+0xa90>
    0.00 :	   83f5b:       0f ae f8                sfence 
    0.00 :	   83f5e:       41 83 e0 7f             and    $0x7f,%r8d
    0.00 :	   83f62:       4a 8d 3c 07             lea    (%rdi,%r8,1),%rdi
    0.00 :	   83f66:       4c 8d 1d 4f f5 ff ff    lea    -0xab1(%rip),%r11        # 834bc <__GI_memset+0x4c>
    0.00 :	   83f6d:       48 8d 0d 9c 22 0b 00    lea    0xb229c(%rip),%rcx        # 136210 <next_state.9261+0x8c>
    0.00 :	   83f74:       4a 0f bf 0c 41          movswq (%rcx,%r8,2),%rcx
    0.00 :	   83f79:       4e 8d 1c 19             lea    (%rcx,%r11,1),%r11
    0.00 :	   83f7d:       41 ff e3                jmpq   *%r11

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   66.67 ??:0
   33.33 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000099390 <__gettimeofday>:
   66.67 :	   99390:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   99394:       48 8b 05 ad de 2d 00    mov    0x2ddead(%rip),%rax        # 377248 <__vdso_gettimeofday>
    0.00 :	   9939b:       48 c1 c8 11             ror    $0x11,%rax
   33.33 :	   9939f:       64 48 33 04 25 30 00    xor    %fs:0x30,%rax
    0.00 :	   993a6:       00 00 
    0.00 :	   993a8:       ff d0                   callq  *%rax
    0.00 :	   993aa:       3d 01 f0 ff ff          cmp    $0xfffff001,%eax
    0.00 :	   993af:       73 05                   jae    993b6 <__gettimeofday+0x26>
    0.00 :	   993b1:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   993b5:       c3                      retq   
    0.00 :	   993b6:       48 8b 0d 7b 8a 2d 00    mov    0x2d8a7b(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   993bd:       31 d2                   xor    %edx,%edx
    0.00 :	   993bf:       48 29 c2                sub    %rax,%rdx
    0.00 :	   993c2:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   993c5:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   993c9:       eb e6                   jmp    993b1 <__gettimeofday+0x21>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   60.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:754
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:735
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:754
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798b80 <pfree>:
         :	 * pfree
         :	 *              Release an allocated chunk.
         :	 */
         :	void
         :	pfree(void *pointer)
         :	{
    0.00 :	  798b80:       55                      push   %rbp
    0.00 :	  798b81:       48 89 f8                mov    %rdi,%rax
         :	        Assert(pointer == (void *) MAXALIGN(pointer));
         :
         :	        /*
         :	         * OK, it's probably safe to look at the chunk header.
         :	         */
         :	        context = ((StandardChunkHeader *)
    0.00 :	  798b84:       48 8b 7f f0             mov    -0x10(%rdi),%rdi
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
    0.00 :	  798b88:       48 89 c6                mov    %rax,%rsi
         :	 * pfree
         :	 *              Release an allocated chunk.
         :	 */
         :	void
         :	pfree(void *pointer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:735
   20.00 :	  798b8b:       48 89 e5                mov    %rsp,%rbp
         :	        context = ((StandardChunkHeader *)
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:754
   60.00 :	  798b8e:       48 8b 57 08             mov    0x8(%rdi),%rdx
   20.00 :	  798b92:       4c 8b 5a 08             mov    0x8(%rdx),%r11
         :	        VALGRIND_MEMPOOL_FREE(context, pointer);
         :	}
    0.00 :	  798b96:       c9                      leaveq 
         :	        context = ((StandardChunkHeader *)
         :	                           ((char *) pointer - STANDARDCHUNKHEADERSIZE))->context;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        (*context->methods->free_p) (context, pointer);
    0.00 :	  798b97:       41 ff e3                jmpq   *%r11

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490660 <hash_uint32>:
         :	        register uint32 a,
         :	                                b,
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
    0.00 :	  490660:       81 ef ac a9 8c 61       sub    $0x618ca9ac,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490666:       55                      push   %rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490667:       81 f7 64 d8 6a 2a       xor    $0x2a6ad864,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   25.00 :	  49066d:       81 ef 53 21 c3 56       sub    $0x56c32153,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490673:       48 89 e5                mov    %rsp,%rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490676:       89 fe                   mov    %edi,%esi
    0.00 :	  490678:       89 f8                   mov    %edi,%eax
    0.00 :	  49067a:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49067d:       81 f6 54 56 73 9e       xor    $0x9e735654,%esi
    0.00 :	  490683:       29 c6                   sub    %eax,%esi
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490685:       c9                      leaveq 
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490686:       89 f0                   mov    %esi,%eax
    0.00 :	  490688:       89 f2                   mov    %esi,%edx
    0.00 :	  49068a:       c1 ca 10                ror    $0x10,%edx
    0.00 :	  49068d:       35 64 d8 6a 2a          xor    $0x2a6ad864,%eax
    0.00 :	  490692:       29 d0                   sub    %edx,%eax
    0.00 :	  490694:       89 c2                   mov    %eax,%edx
   25.00 :	  490696:       89 c1                   mov    %eax,%ecx
    0.00 :	  490698:       c1 c9 1c                ror    $0x1c,%ecx
   25.00 :	  49069b:       31 fa                   xor    %edi,%edx
    0.00 :	  49069d:       29 ca                   sub    %ecx,%edx
    0.00 :	  49069f:       89 d1                   mov    %edx,%ecx
    0.00 :	  4906a1:       c1 ca 12                ror    $0x12,%edx
   25.00 :	  4906a4:       31 f1                   xor    %esi,%ecx
    0.00 :	  4906a6:       29 d1                   sub    %edx,%ecx
    0.00 :	  4906a8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4906aa:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  4906ad:       29 c8                   sub    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2745
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2727
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2750
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005aca90 <ExecEvalOr>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalOr(BoolExprState *orExpr, ExprContext *econtext,
         :	                   bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5aca90:       55                      push   %rbp
         :	        List       *clauses = orExpr->args;
         :	        ListCell   *clause;
         :	        bool            AnyNull;
         :
         :	        if (isDone)
   25.00 :	  5aca91:       48 85 c9                test   %rcx,%rcx
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalOr(BoolExprState *orExpr, ExprContext *econtext,
         :	                   bool *isNull, ExprDoneCond *isDone)
         :	{
    0.00 :	  5aca94:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5aca97:       41 56                   push   %r14
    0.00 :	  5aca99:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5aca9c:       41 55                   push   %r13
    0.00 :	  5aca9e:       41 54                   push   %r12
    0.00 :	  5acaa0:       49 89 d4                mov    %rdx,%r12
    0.00 :	  5acaa3:       53                      push   %rbx
         :	        List       *clauses = orExpr->args;
    0.00 :	  5acaa4:       48 8b 47 18             mov    0x18(%rdi),%rax
         :	        ListCell   *clause;
         :	        bool            AnyNull;
         :
         :	        if (isDone)
    0.00 :	  5acaa8:       74 06                   je     5acab0 <ExecEvalOr+0x20>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5acaaa:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5acab0:       48 85 c0                test   %rax,%rax
    0.00 :	  5acab3:       74 4b                   je     5acb00 <ExecEvalOr+0x70>
    0.00 :	  5acab5:       48 8b 58 08             mov    0x8(%rax),%rbx
         :	         * that we "don't know" what the OR's result should be --- perhaps one of
         :	         * the "don't knows" would have been TRUE if we'd known its value.  Only
         :	         * when all the inputs are known to be FALSE can we state confidently that
         :	         * the OR's result is FALSE.
         :	         */
         :	        foreach(clause, clauses)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2745
   50.00 :	  5acab9:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acabc:       74 42                   je     5acb00 <ExecEvalOr+0x70>
    0.00 :	  5acabe:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5acac1:       eb 14                   jmp    5acad7 <ExecEvalOr+0x47>
    0.00 :	  5acac3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                clause_value = ExecEvalExpr(clausestate, econtext, isNull, NULL);
         :
         :	                /*
         :	                 * if we have a non-null true result, then return it.
         :	                 */
         :	                if (*isNull)
    0.00 :	  5acac8:       41 bd 01 00 00 00       mov    $0x1,%r13d
         :	         * that we "don't know" what the OR's result should be --- perhaps one of
         :	         * the "don't knows" would have been TRUE if we'd known its value.  Only
         :	         * when all the inputs are known to be FALSE can we state confidently that
         :	         * the OR's result is FALSE.
         :	         */
         :	        foreach(clause, clauses)
    0.00 :	  5acace:       48 8b 5b 08             mov    0x8(%rbx),%rbx
    0.00 :	  5acad2:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acad5:       74 31                   je     5acb08 <ExecEvalOr+0x78>
         :	        {
         :	                ExprState  *clausestate = (ExprState *) lfirst(clause);
    0.00 :	  5acad7:       48 8b 03                mov    (%rbx),%rax
         :	                Datum           clause_value;
         :
         :	                clause_value = ExecEvalExpr(clausestate, econtext, isNull, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:2750
   25.00 :	  5acada:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5acadc:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  5acadf:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5acae2:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5acae5:       ff 50 10                callq  *0x10(%rax)
         :
         :	                /*
         :	                 * if we have a non-null true result, then return it.
         :	                 */
         :	                if (*isNull)
    0.00 :	  5acae8:       41 80 3c 24 00          cmpb   $0x0,(%r12)
    0.00 :	  5acaed:       75 d9                   jne    5acac8 <ExecEvalOr+0x38>
         :	                        AnyNull = true;         /* remember we got a null */
         :	                else if (DatumGetBool(clause_value))
    0.00 :	  5acaef:       84 c0                   test   %al,%al
    0.00 :	  5acaf1:       74 db                   je     5acace <ExecEvalOr+0x3e>
         :	        }
         :
         :	        /* AnyNull is true if at least one clause evaluated to NULL */
         :	        *isNull = AnyNull;
         :	        return BoolGetDatum(false);
         :	}
    0.00 :	  5acaf3:       5b                      pop    %rbx
    0.00 :	  5acaf4:       41 5c                   pop    %r12
    0.00 :	  5acaf6:       41 5d                   pop    %r13
    0.00 :	  5acaf8:       41 5e                   pop    %r14
    0.00 :	  5acafa:       c9                      leaveq 
    0.00 :	  5acafb:       c3                      retq   
    0.00 :	  5acafc:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * that we "don't know" what the OR's result should be --- perhaps one of
         :	         * the "don't knows" would have been TRUE if we'd known its value.  Only
         :	         * when all the inputs are known to be FALSE can we state confidently that
         :	         * the OR's result is FALSE.
         :	         */
         :	        foreach(clause, clauses)
    0.00 :	  5acb00:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5acb03:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                else if (DatumGetBool(clause_value))
         :	                        return clause_value;
         :	        }
         :
         :	        /* AnyNull is true if at least one clause evaluated to NULL */
         :	        *isNull = AnyNull;
    0.00 :	  5acb08:       45 88 2c 24             mov    %r13b,(%r12)
    0.00 :	  5acb0c:       31 c0                   xor    %eax,%eax
         :	        return BoolGetDatum(false);
         :	}
    0.00 :	  5acb0e:       5b                      pop    %rbx
    0.00 :	  5acb0f:       41 5c                   pop    %r12
    0.00 :	  5acb11:       41 5d                   pop    %r13
    0.00 :	  5acb13:       41 5e                   pop    %r14
    0.00 :	  5acb15:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4110 <ExecClearTuple>:
         :	 *              NB: only the tuple is cleared, not the tuple descriptor (if any).
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: slot passed */
         :	ExecClearTuple(TupleTableSlot *slot)    /* slot in which to store tuple */
         :	{
    0.00 :	  5b4110:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   25.00 :	  5b4111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4114:       53                      push   %rbx
    0.00 :	  5b4115:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b4118:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(slot != NULL);
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b411c:       80 7f 05 00             cmpb   $0x0,0x5(%rdi)
    0.00 :	  5b4120:       75 5e                   jne    5b4180 <ExecClearTuple+0x70>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b4122:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4126:       75 48                   jne    5b4170 <ExecClearTuple+0x60>
         :	        slot->tts_shouldFreeMin = false;
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
   50.00 :	  5b4128:       8b 7b 20                mov    0x20(%rbx),%edi
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        slot->tts_tuple = NULL;
    0.00 :	  5b412b:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b4132:       00 
         :	        slot->tts_mintuple = NULL;
    0.00 :	  5b4133:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b413a:       00 
         :	        slot->tts_shouldFree = false;
    0.00 :	  5b413b:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b413f:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4143:       85 ff                   test   %edi,%edi
    0.00 :	  5b4145:       74 05                   je     5b414c <ExecClearTuple+0x3c>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4147:       e8 14 0d 0c 00          callq  674e60 <ReleaseBuffer>
         :
         :	        slot->tts_buffer = InvalidBuffer;
    0.00 :	  5b414c:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
    0.00 :	  5b4153:       c6 43 04 01             movb   $0x1,0x4(%rbx)
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b4157:       48 89 d8                mov    %rbx,%rax
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b415a:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :
         :	        return slot;
         :	}
    0.00 :	  5b4161:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5b4165:       5b                      pop    %rbx
    0.00 :	  5b4166:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
   25.00 :	  5b4167:       c3                      retq   
    0.00 :	  5b4168:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b416f:       00 
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4170:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4174:       e8 37 ab eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4179:       eb ad                   jmp    5b4128 <ExecClearTuple+0x18>
    0.00 :	  5b417b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4180:       48 8b 7f 08             mov    0x8(%rdi),%rdi
    0.00 :	  5b4184:       e8 37 ab eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4189:       eb 97                   jmp    5b4122 <ExecClearTuple+0x12>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1350
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1057
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9d80 <ExecAgg>:
         :	 *        stored in the expression context to be used when ExecProject evaluates
         :	 *        the result tuple.
         :	 */
         :	TupleTableSlot *
         :	ExecAgg(AggState *node)
         :	{
    0.00 :	  5b9d80:       55                      push   %rbp
    0.00 :	  5b9d81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9d84:       41 57                   push   %r15
    0.00 :	  5b9d86:       41 56                   push   %r14
    0.00 :	  5b9d88:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b9d8b:       41 55                   push   %r13
    0.00 :	  5b9d8d:       41 54                   push   %r12
    0.00 :	  5b9d8f:       53                      push   %rbx
    0.00 :	  5b9d90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous agg
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ss.ps.ps_TupFromTlist)
    0.00 :	  5b9d97:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5b9d9b:       74 1c                   je     5b9db9 <ExecAgg+0x39>
         :	        {
         :	                TupleTableSlot *result;
         :	                ExprDoneCond isDone;
         :
         :	                result = ExecProject(node->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5b9d9d:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5b9da1:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b9da5:       e8 56 32 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b9daa:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5b9dae:       0f 84 04 02 00 00       je     5b9fb8 <ExecAgg+0x238>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->ss.ps.ps_TupFromTlist = false;
    0.00 :	  5b9db4:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Exit if nothing left to do.  (We must do the ps_TupFromTlist check
         :	         * first, because in some cases agg_done gets set before we emit the final
         :	         * aggregate tuple, and we have to finish running SRFs for it.)
         :	         */
         :	        if (node->agg_done)
    0.00 :	  5b9db9:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9dbb:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9dc2:       00 
    0.00 :	  5b9dc3:       0f 85 ef 01 00 00       jne    5b9fb8 <ExecAgg+0x238>
         :	                return NULL;
         :
         :	        /* Dispatch based on strategy */
         :	        if (((Agg *) node->ss.ps.plan)->aggstrategy == AGG_HASHED)
    0.00 :	  5b9dc9:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  5b9dcd:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	  5b9dd4:       83 78 60 02             cmpl   $0x2,0x60(%rax)
    0.00 :	  5b9dd8:       0f 85 ec 01 00 00       jne    5b9fca <ExecAgg+0x24a>
         :	        {
         :	                if (!node->table_filled)
    0.00 :	  5b9dde:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9de0:       41 80 be 00 01 00 00    cmpb   $0x0,0x100(%r14)
    0.00 :	  5b9de7:       00 
    0.00 :	  5b9de8:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5b9def:       0f 84 5d 07 00 00       je     5ba552 <ExecAgg+0x7d2>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9df5:       4d 8b 6e 60             mov    0x60(%r14),%r13
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9df9:       49 8b 55 40             mov    0x40(%r13),%rdx
    0.00 :	  5b9dfd:       48 89 95 30 ff ff ff    mov    %rdx,-0xd0(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9e04:       49 8b 55 48             mov    0x48(%r13),%rdx
    0.00 :	  5b9e08:       48 89 95 28 ff ff ff    mov    %rdx,-0xd8(%rbp)
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9e0f:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
    0.00 :	  5b9e16:       48 89 95 20 ff ff ff    mov    %rdx,-0xe0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5b9e1d:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
    0.00 :	  5b9e24:       48 89 95 18 ff ff ff    mov    %rdx,-0xe8(%rbp)
         :
         :	        /*
         :	         * We loop retrieving groups until we find one satisfying
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9e2b:       84 c0                   test   %al,%al
    0.00 :	  5b9e2d:       0f 85 83 01 00 00       jne    5b9fb6 <ExecAgg+0x236>
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e33:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9e36:       e8 85 9c 1c 00          callq  783ac0 <hash_seq_search>
         :	                if (entry == NULL)
    0.00 :	  5b9e3b:       48 85 c0                test   %rax,%rax
         :	        while (!aggstate->agg_done)
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e3e:       49 89 c4                mov    %rax,%r12
         :	                if (entry == NULL)
    0.00 :	  5b9e41:       0f 84 fc 06 00 00       je     5ba543 <ExecAgg+0x7c3>
         :	                 *
         :	                 * We intentionally don't use ReScanExprContext here; if any aggs have
         :	                 * registered shutdown callbacks, they mustn't be called yet, since we
         :	                 * might not be done with that agg.
         :	                 */
         :	                ResetExprContext(econtext);
    0.00 :	  5b9e47:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b9e4b:       e8 60 eb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                /*
         :	                 * Store the copied first input tuple in the tuple table slot reserved
         :	                 * for it, so that it can be used in ExecProject.
         :	                 */
         :	                ExecStoreMinimalTuple(entry->shared.firstTuple,
    0.00 :	  5b9e50:       48 8b b5 18 ff ff ff    mov    -0xe8(%rbp),%rsi
    0.00 :	  5b9e57:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5b9e5b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9e5d:       e8 7e a5 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e62:       41 8b 96 98 00 00 00    mov    0x98(%r14),%edx
    0.00 :	  5b9e69:       85 d2                   test   %edx,%edx
    0.00 :	  5b9e6b:       7e 49                   jle    5b9eb6 <ExecAgg+0x136>
    0.00 :	  5b9e6d:       31 db                   xor    %ebx,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e6f:       48 8b 85 30 ff ff ff    mov    -0xd0(%rbp),%rax
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b9e76:       48 63 fb                movslq %ebx,%rdi
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e79:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e7c:       48 69 f7 a8 04 00 00    imul   $0x4a8,%rdi,%rsi
    0.00 :	  5b9e83:       48 03 b5 20 ff ff ff    add    -0xe0(%rbp),%rsi
    0.00 :	  5b9e8a:       48 8d 0c f8             lea    (%rax,%rdi,8),%rcx
    0.00 :	  5b9e8e:       48 89 f8                mov    %rdi,%rax
    0.00 :	  5b9e91:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5b9e95:       49 8d 54 04 08          lea    0x8(%r12,%rax,1),%rdx
    0.00 :	  5b9e9a:       48 8b 85 28 ff ff ff    mov    -0xd8(%rbp),%rax
    0.00 :	  5b9ea1:       4c 8d 04 38             lea    (%rax,%rdi,1),%r8
    0.00 :	  5b9ea5:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9ea8:       e8 13 fc ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9ead:       41 3b 9e 98 00 00 00    cmp    0x98(%r14),%ebx
    0.00 :	  5b9eb4:       7c b9                   jl     5b9e6f <ExecAgg+0xef>
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9eb6:       48 8b 95 18 ff ff ff    mov    -0xe8(%rbp),%rdx
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ebd:       4c 89 ee                mov    %r13,%rsi
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9ec0:       49 89 55 18             mov    %rdx,0x18(%r13)
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ec4:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9ec8:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9eca:       e8 41 30 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9ecf:       84 c0                   test   %al,%al
    0.00 :	  5b9ed1:       0f 85 4e 06 00 00       jne    5ba525 <ExecAgg+0x7a5>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9ed7:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9edb:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9ede:       74 18                   je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5b9ee0:       f2 0f 10 05 70 52 1f    movsd  0x1f5270(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9ee7:       00 
    0.00 :	  5b9ee8:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9eef:       00 
    0.00 :	  5b9ef0:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9ef7:       00 
    0.00 :	  5b9ef8:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5b9eff:       00 
    0.00 :	  5b9f00:       e9 26 ff ff ff          jmpq   5b9e2b <ExecAgg+0xab>
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
         :	        }
         :
         :	        if (slot2)
    0.00 :	  5b9f05:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b9f08:       74 08                   je     5b9f12 <ExecAgg+0x192>
         :	                ExecClearTuple(slot2);
    0.00 :	  5b9f0a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9f0d:       e8 fe a1 ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        tuplesort_end(peraggstate->sortstate);
    0.00 :	  5b9f12:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5b9f19:       00 
    0.00 :	  5b9f1a:       e8 c1 52 1e 00          callq  79f1e0 <tuplesort_end>
         :	        peraggstate->sortstate = NULL;
    0.00 :	  5b9f1f:       49 c7 84 24 f8 00 00    movq   $0x0,0xf8(%r12)
    0.00 :	  5b9f26:       00 00 00 00 00 
         :	                                        process_ordered_aggregate_multi(aggstate,
         :	                                                                                                        peraggstate,
         :	                                                                                                        pergroupstate);
         :	                        }
         :
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9f2b:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	  5b9f2f:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5b9f36:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5b9f39:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9f3c:       48 8d 0c d0             lea    (%rax,%rdx,8),%rcx
    0.00 :	  5b9f40:       48 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%rax
    0.00 :	  5b9f47:       4c 8d 04 10             lea    (%rax,%rdx,1),%r8
    0.00 :	  5b9f4b:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5b9f52:       e8 69 fb ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9f57:       83 85 44 ff ff ff 01    addl   $0x1,-0xbc(%rbp)
    0.00 :	  5b9f5e:       8b 95 44 ff ff ff       mov    -0xbc(%rbp),%edx
    0.00 :	  5b9f64:       41 3b 96 98 00 00 00    cmp    0x98(%r14),%edx
    0.00 :	  5b9f6b:       0f 8c f6 01 00 00       jl     5ba167 <ExecAgg+0x3e7>
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9f71:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9f75:       48 8b b5 78 ff ff ff    mov    -0x88(%rbp),%rsi
    0.00 :	  5b9f7c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9f7e:       e8 8d 2f ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9f83:       84 c0                   test   %al,%al
    0.00 :	  5b9f85:       0f 85 18 05 00 00       jne    5ba4a3 <ExecAgg+0x723>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9f8b:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9f8f:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9f92:       74 18                   je     5b9fac <ExecAgg+0x22c>
    0.00 :	  5b9f94:       f2 0f 10 05 bc 51 1f    movsd  0x1f51bc(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9f9b:       00 
    0.00 :	  5b9f9c:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9fa3:       00 
    0.00 :	  5b9fa4:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9fab:       00 
         :
         :	        /*
         :	         * We loop retrieving groups until we find one matching
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9fac:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9fb3:       00 
    0.00 :	  5b9fb4:       74 75                   je     5ba02b <ExecAgg+0x2ab>
    0.00 :	  5b9fb6:       31 c0                   xor    %eax,%eax
         :	                        agg_fill_hash_table(node);
         :	                return agg_retrieve_hash_table(node);
         :	        }
         :	        else
         :	                return agg_retrieve_direct(node);
         :	}
    0.00 :	  5b9fb8:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5b9fbf:       5b                      pop    %rbx
    0.00 :	  5b9fc0:       41 5c                   pop    %r12
    0.00 :	  5b9fc2:       41 5d                   pop    %r13
    0.00 :	  5b9fc4:       41 5e                   pop    %r14
    0.00 :	  5b9fc6:       41 5f                   pop    %r15
    0.00 :	  5b9fc8:       c9                      leaveq 
    0.00 :	  5b9fc9:       c3                      retq   
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fca:       49 8b 56 60             mov    0x60(%r14),%rdx
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fce:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fd2:       48 89 95 78 ff ff ff    mov    %rdx,-0x88(%rbp)
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fd9:       48 89 45 80             mov    %rax,-0x80(%rbp)
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9fdd:       48 8b 42 40             mov    0x40(%rdx),%rax
    0.00 :	  5b9fe1:       48 89 85 68 ff ff ff    mov    %rax,-0x98(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9fe8:       48 8b 52 48             mov    0x48(%rdx),%rdx
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5b9fec:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9ff3:       48 89 95 60 ff ff ff    mov    %rdx,-0xa0(%rbp)
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9ffa:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba001:       48 89 85 70 ff ff ff    mov    %rax,-0x90(%rbp)
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba008:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5ba00f:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        pergroup = aggstate->pergroup;
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba016:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba01d:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba024:       48 89 95 48 ff ff ff    mov    %rdx,-0xb8(%rbp)
         :	        {
         :	                /*
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
    0.00 :	  5ba02b:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5ba032:       00 
    0.00 :	  5ba033:       0f 84 a4 04 00 00       je     5ba4dd <ExecAgg+0x75d>
         :	                 * We use ReScanExprContext not just ResetExprContext because we want
         :	                 * any registered shutdown callbacks to be called.  That allows
         :	                 * aggregate functions to ensure they've cleaned up any non-memory
         :	                 * resources.
         :	                 */
         :	                ReScanExprContext(econtext);
    0.00 :	  5ba039:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5ba040:       e8 3b b1 ff ff          callq  5b5180 <ReScanExprContext>
         :
         :	                MemoryContextResetAndDeleteChildren(aggstate->aggcontext);
    0.00 :	  5ba045:       49 8b be b8 00 00 00    mov    0xb8(%r14),%rdi
    0.00 :	  5ba04c:       e8 bf eb 1d 00          callq  798c10 <MemoryContextResetAndDeleteChildren>
         :
         :	                /*
         :	                 * Initialize working state for a new input tuple group
         :	                 */
         :	                initialize_aggregates(aggstate, peragg, pergroup);
    0.00 :	  5ba051:       48 8b 95 50 ff ff ff    mov    -0xb0(%rbp),%rdx
    0.00 :	  5ba058:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
    0.00 :	  5ba05f:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba062:       e8 69 f5 ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                if (aggstate->grp_firstTuple != NULL)
    0.00 :	  5ba067:       49 8b be e0 00 00 00    mov    0xe0(%r14),%rdi
    0.00 :	  5ba06e:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ba071:       0f 84 c5 00 00 00       je     5ba13c <ExecAgg+0x3bc>
         :	                        /*
         :	                         * Store the copied first input tuple in the tuple table slot
         :	                         * reserved for it.  The tuple will be deleted when it is cleared
         :	                         * from the slot.
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
    0.00 :	  5ba077:       48 8b b5 48 ff ff ff    mov    -0xb8(%rbp),%rsi
    0.00 :	  5ba07e:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba080:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5ba085:       e8 f6 a3 ff ff          callq  5b4480 <ExecStoreTuple>
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba08a:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba091:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
         :	                                                   firstSlot,
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
    0.00 :	  5ba098:       49 c7 86 e0 00 00 00    movq   $0x0,0xe0(%r14)
    0.00 :	  5ba09f:       00 00 00 00 
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba0a3:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                         * Process each outer-plan tuple, and then fetch the next one,
         :	                         * until we exhaust the outer plan or cross a group boundary.
         :	                         */
         :	                        for (;;)
         :	                        {
         :	                                advance_aggregates(aggstate, pergroup);
    0.00 :	  5ba0a7:       48 8b b5 50 ff ff ff    mov    -0xb0(%rbp),%rsi
    0.00 :	  5ba0ae:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba0b1:       e8 9a f8 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
    0.00 :	  5ba0b6:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5ba0bd:       48 8b 7a 28             mov    0x28(%rdx),%rdi
    0.00 :	  5ba0c1:       e8 ea e8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0c6:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba0ca:       e8 d1 23 ff ff          callq  5ac4a0 <ExecProcNode>
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0cf:       48 85 c0                test   %rax,%rax
         :	                                advance_aggregates(aggstate, pergroup);
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0d2:       48 89 c3                mov    %rax,%rbx
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0d5:       0f 84 f5 03 00 00       je     5ba4d0 <ExecAgg+0x750>
    0.00 :	  5ba0db:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba0df:       0f 85 eb 03 00 00       jne    5ba4d0 <ExecAgg+0x750>
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
         :	                                        break;
         :	                                }
         :	                                /* set up for next advance_aggregates call */
         :	                                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba0e5:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba0ec:       48 89 58 18             mov    %rbx,0x18(%rax)
         :
         :	                                /*
         :	                                 * If we are grouping, check whether we've crossed a group
         :	                                 * boundary.
         :	                                 */
         :	                                if (node->aggstrategy == AGG_SORTED)
    0.00 :	  5ba0f0:       48 8b 95 10 ff ff ff    mov    -0xf0(%rbp),%rdx
    0.00 :	  5ba0f7:       83 7a 60 01             cmpl   $0x1,0x60(%rdx)
    0.00 :	  5ba0fb:       75 aa                   jne    5ba0a7 <ExecAgg+0x327>
         :	                                {
         :	                                        if (!execTuplesMatch(firstSlot,
    0.00 :	  5ba0fd:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba104:       48 8b 4a 68             mov    0x68(%rdx),%rcx
    0.00 :	  5ba108:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba10b:       8b 52 64                mov    0x64(%rdx),%edx
    0.00 :	  5ba10e:       4d 8b 86 a0 00 00 00    mov    0xa0(%r14),%r8
    0.00 :	  5ba115:       48 8b bd 48 ff ff ff    mov    -0xb8(%rbp),%rdi
    0.00 :	  5ba11c:       4c 8b 48 28             mov    0x28(%rax),%r9
    0.00 :	  5ba120:       e8 1b f3 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba125:       84 c0                   test   %al,%al
    0.00 :	  5ba127:       0f 85 7a ff ff ff       jne    5ba0a7 <ExecAgg+0x327>
         :	                                                                                 tmpcontext->ecxt_per_tuple_memory))
         :	                                        {
         :	                                                /*
         :	                                                 * Save the first input tuple of the next group.
         :	                                                 */
         :	                                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba12d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba130:       e8 7b 9e ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba135:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
         :	                 * qual, and the tlist.  (If we are not grouping, and there are no
         :	                 * input rows at all, we will come here with an empty firstSlot ...
         :	                 * but if not grouping, there can't be any references to
         :	                 * non-aggregated input columns, so no problem.)
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba13c:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba143:       48 8b 95 78 ff ff ff    mov    -0x88(%rbp),%rdx
    0.00 :	  5ba14a:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5ba14e:       41 8b 86 98 00 00 00    mov    0x98(%r14),%eax
    0.00 :	  5ba155:       85 c0                   test   %eax,%eax
    0.00 :	  5ba157:       0f 8e 14 fe ff ff       jle    5b9f71 <ExecAgg+0x1f1>
    0.00 :	  5ba15d:       c7 85 44 ff ff ff 00    movl   $0x0,-0xbc(%rbp)
    0.00 :	  5ba164:       00 00 00 
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5ba167:       48 63 95 44 ff ff ff    movslq -0xbc(%rbp),%rdx
    0.00 :	  5ba16e:       4c 8b a5 58 ff ff ff    mov    -0xa8(%rbp),%r12
    0.00 :	  5ba175:       48 69 c2 a8 04 00 00    imul   $0x4a8,%rdx,%rax
    0.00 :	  5ba17c:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5ba180:       49 01 c4                add    %rax,%r12
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5ba183:       48 89 d0                mov    %rdx,%rax
    0.00 :	  5ba186:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5ba18a:       48 03 85 50 ff ff ff    add    -0xb0(%rbp),%rax
    0.00 :	  5ba191:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :
         :	                        if (peraggstate->numSortCols > 0)
    0.00 :	  5ba198:       41 8b 84 24 8c 00 00    mov    0x8c(%r12),%eax
    0.00 :	  5ba19f:       00 
    0.00 :	  5ba1a0:       85 c0                   test   %eax,%eax
    0.00 :	  5ba1a2:       0f 8e 83 fd ff ff       jle    5b9f2b <ExecAgg+0x1ab>
         :	                        {
         :	                                if (peraggstate->numInputs == 1)
    0.00 :	  5ba1a8:       41 83 7c 24 14 01       cmpl   $0x1,0x14(%r12)
    0.00 :	  5ba1ae:       0f 84 3e 01 00 00       je     5ba2f2 <ExecAgg+0x572>
         :	static void
         :	process_ordered_aggregate_multi(AggState *aggstate,
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba1b4:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
    0.00 :	  5ba1bb:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba1bf:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
         :	        int                     numTransInputs = peraggstate->numTransInputs;
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1c3:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba1ca:       00 
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
    0.00 :	  5ba1cb:       49 8b 9c 24 e8 00 00    mov    0xe8(%r12),%rbx
    0.00 :	  5ba1d2:       00 
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
    0.00 :	  5ba1d3:       4d 8b bc 24 f0 00 00    mov    0xf0(%r12),%r15
    0.00 :	  5ba1da:       00 
         :	        int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5ba1db:       45 8b 6c 24 18          mov    0x18(%r12),%r13d
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1e0:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	        bool            haveOldValue = false;
         :	        int                     i;
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba1e3:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba1ea:       00 
    0.00 :	  5ba1eb:       e8 00 7e 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        ExecClearTuple(slot1);
    0.00 :	  5ba1f0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba1f3:       e8 18 9f ff ff          callq  5b4110 <ExecClearTuple>
         :	        if (slot2)
    0.00 :	  5ba1f8:       4d 85 ff                test   %r15,%r15
    0.00 :	  5ba1fb:       74 08                   je     5ba205 <ExecAgg+0x485>
         :	                ExecClearTuple(slot2);
    0.00 :	  5ba1fd:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba200:       e8 0b 9f ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5ba205:       c6 45 bb 00             movb   $0x0,-0x45(%rbp)
    0.00 :	  5ba209:       eb 3d                   jmp    5ba248 <ExecAgg+0x4c8>
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba20b:       80 7d bb 00             cmpb   $0x0,-0x45(%rbp)
    0.00 :	  5ba20f:       90                      nop
    0.00 :	  5ba210:       74 6c                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba212:       49 8b 8c 24 98 00 00    mov    0x98(%r12),%rcx
    0.00 :	  5ba219:       00 
    0.00 :	  5ba21a:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  5ba21e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5ba221:       4d 8b 84 24 b8 00 00    mov    0xb8(%r12),%r8
    0.00 :	  5ba228:       00 
    0.00 :	  5ba229:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  5ba22c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba22f:       e8 0c f2 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba234:       84 c0                   test   %al,%al
    0.00 :	  5ba236:       74 46                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba238:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba23c:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
    0.00 :	  5ba240:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba243:       e8 c8 9e ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        ExecClearTuple(slot1);
         :	        if (slot2)
         :	                ExecClearTuple(slot2);
         :
         :	        while (tuplesort_gettupleslot(peraggstate->sortstate, true, slot1))
    0.00 :	  5ba248:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba24f:       00 
    0.00 :	  5ba250:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba253:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba258:       e8 33 40 1e 00          callq  79e290 <tuplesort_gettupleslot>
    0.00 :	  5ba25d:       84 c0                   test   %al,%al
    0.00 :	  5ba25f:       0f 84 a0 fc ff ff       je     5b9f05 <ExecAgg+0x185>
         :	                /*
         :	                 * Extract the first numTransInputs columns as datums to pass to the
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
    0.00 :	  5ba265:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5ba268:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba26b:       e8 f0 4f eb ff          callq  46f260 <slot_getsomeattrs>
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba270:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba273:       85 c0                   test   %eax,%eax
    0.00 :	  5ba275:       0f 94 85 0f ff ff ff    sete   -0xf1(%rbp)
    0.00 :	  5ba27c:       75 8d                   jne    5ba20b <ExecAgg+0x48b>
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba27e:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5ba281:       7e 2e                   jle    5ba2b1 <ExecAgg+0x531>
    0.00 :	  5ba283:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba285:       0f 1f 00                nopl   (%rax)
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
    0.00 :	  5ba288:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  5ba28c:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5ba290:       49 89 84 d4 28 01 00    mov    %rax,0x128(%r12,%rdx,8)
    0.00 :	  5ba297:       00 
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
    0.00 :	  5ba298:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  5ba29c:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5ba2a0:       41 88 84 14 41 04 00    mov    %al,0x441(%r12,%rdx,1)
    0.00 :	  5ba2a7:       00 
    0.00 :	  5ba2a8:       48 83 c2 01             add    $0x1,%rdx
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba2ac:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  5ba2af:       7f d7                   jg     5ba288 <ExecAgg+0x508>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba2b1:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba2b8:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba2bb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba2be:       e8 cd f4 ff ff          callq  5b9790 <advance_transition_function>
         :
         :	                        if (numDistinctCols > 0)
    0.00 :	  5ba2c3:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba2c6:       85 c0                   test   %eax,%eax
    0.00 :	  5ba2c8:       7e 0d                   jle    5ba2d7 <ExecAgg+0x557>
    0.00 :	  5ba2ca:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba2cd:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba2d1:       4c 89 fb                mov    %r15,%rbx
    0.00 :	  5ba2d4:       49 89 ff                mov    %rdi,%r15
         :	                                haveOldValue = true;
         :	                        }
         :	                }
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
    0.00 :	  5ba2d7:       80 bd 0f ff ff ff 00    cmpb   $0x0,-0xf1(%rbp)
    0.00 :	  5ba2de:       0f 84 5c ff ff ff       je     5ba240 <ExecAgg+0x4c0>
         :	                        MemoryContextReset(workcontext);
    0.00 :	  5ba2e4:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5ba2e8:       e8 c3 e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba2ed:       e9 4e ff ff ff          jmpq   5ba240 <ExecAgg+0x4c0>
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba2f2:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba2f9:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5ba2fc:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5ba301:       45 31 ff                xor    %r15d,%r15d
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba304:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba308:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            isDistinct = (peraggstate->numDistinctCols > 0);
    0.00 :	  5ba30c:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba313:       00 
    0.00 :	  5ba314:       89 45 b4                mov    %eax,-0x4c(%rbp)
         :	        Datum      *newVal;
         :	        bool       *isNull;
         :
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba317:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba31e:       00 
    0.00 :	  5ba31f:       e8 cc 7c 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba324:       49 8d 94 24 28 01 00    lea    0x128(%r12),%rdx
    0.00 :	  5ba32b:       00 
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba32c:       49 8d 84 24 41 04 00    lea    0x441(%r12),%rax
    0.00 :	  5ba333:       00 
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba334:       48 89 55 98             mov    %rdx,-0x68(%rbp)
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba338:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  5ba33c:       eb 3c                   jmp    5ba37a <ExecAgg+0x5fa>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba33e:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba345:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba348:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba34b:       e8 40 f4 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba350:       84 db                   test   %bl,%bl
    0.00 :	  5ba352:       0f 84 98 00 00 00       je     5ba3f0 <ExecAgg+0x670>
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
         :	                        oldIsNull = *isNull;
    0.00 :	  5ba358:       41 0f b6 9c 24 41 04    movzbl 0x441(%r12),%ebx
    0.00 :	  5ba35f:       00 00 
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
    0.00 :	  5ba361:       4d 8b bc 24 28 01 00    mov    0x128(%r12),%r15
    0.00 :	  5ba368:       00 
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba369:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ba36d:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  5ba373:       48 89 15 e6 04 60 00    mov    %rdx,0x6004e6(%rip)        # bba860 <CurrentMemoryContext>
         :	         * Note: if input type is pass-by-ref, the datums returned by the sort are
         :	         * freshly palloc'd in the per-query context, so we must be careful to
         :	         * pfree them when they are no longer needed.
         :	         */
         :
         :	        while (tuplesort_getdatum(peraggstate->sortstate, true,
    0.00 :	  5ba37a:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba381:       00 
    0.00 :	  5ba382:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5ba386:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba38b:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ba38f:       e8 2c 3e 1e 00          callq  79e1c0 <tuplesort_getdatum>
    0.00 :	  5ba394:       84 c0                   test   %al,%al
    0.00 :	  5ba396:       0f 84 e0 00 00 00       je     5ba47c <ExecAgg+0x6fc>
         :	        {
         :	                /*
         :	                 * Clear and select the working context for evaluation of the equality
         :	                 * function and transition function.
         :	                 */
         :	                MemoryContextReset(workcontext);
    0.00 :	  5ba39c:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5ba3a0:       e8 0b e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba3a5:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3a9:       48 8b 15 b0 04 60 00    mov    0x6004b0(%rip),%rdx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba3b0:       48 89 05 a9 04 60 00    mov    %rax,0x6004a9(%rip)        # bba860 <CurrentMemoryContext>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba3b7:       8b 45 b4                mov    -0x4c(%rbp),%eax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3ba:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
    0.00 :	  5ba3be:       85 c0                   test   %eax,%eax
    0.00 :	  5ba3c0:       0f 8e 78 ff ff ff       jle    5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3c6:       45 84 ed                test   %r13b,%r13b
    0.00 :	  5ba3c9:       0f 84 6f ff ff ff       je     5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3cf:       84 db                   test   %bl,%bl
    0.00 :	  5ba3d1:       75 39                   jne    5ba40c <ExecAgg+0x68c>
    0.00 :	  5ba3d3:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba3da:       00 00 
    0.00 :	  5ba3dc:       74 50                   je     5ba42e <ExecAgg+0x6ae>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba3de:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba3e5:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba3e8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba3eb:       e8 a0 f3 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba3f0:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba3f7:       00 00 
    0.00 :	  5ba3f9:       0f 85 59 ff ff ff       jne    5ba358 <ExecAgg+0x5d8>
         :	                                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba3ff:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba402:       e8 79 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba407:       e9 4c ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba40c:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba413:       00 00 
    0.00 :	  5ba415:       75 35                   jne    5ba44c <ExecAgg+0x6cc>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba417:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba41e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba421:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba424:       e8 67 f3 ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5ba429:       e9 2a ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba42e:       49 8b 8c 24 28 01 00    mov    0x128(%r12),%rcx
    0.00 :	  5ba435:       00 
    0.00 :	  5ba436:       49 8b bc 24 b8 00 00    mov    0xb8(%r12),%rdi
    0.00 :	  5ba43d:       00 
    0.00 :	  5ba43e:       31 f6                   xor    %esi,%esi
    0.00 :	  5ba440:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  5ba443:       e8 e8 3b 1c 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  5ba448:       84 c0                   test   %al,%al
    0.00 :	  5ba44a:       74 92                   je     5ba3de <ExecAgg+0x65e>
         :	                         (!oldIsNull && !*isNull &&
         :	                          DatumGetBool(FunctionCall2(&peraggstate->equalfns[0],
         :	                                                                                 oldVal, *newVal)))))
         :	                {
         :	                        /* equal to prior, so forget this one */
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
    0.00 :	  5ba44c:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba453:       00 00 
    0.00 :	  5ba455:       0f 85 0e ff ff ff       jne    5ba369 <ExecAgg+0x5e9>
    0.00 :	  5ba45b:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba462:       00 00 
    0.00 :	  5ba464:       0f 85 ff fe ff ff       jne    5ba369 <ExecAgg+0x5e9>
         :	                                pfree(DatumGetPointer(*newVal));
    0.00 :	  5ba46a:       49 8b bc 24 28 01 00    mov    0x128(%r12),%rdi
    0.00 :	  5ba471:       00 
    0.00 :	  5ba472:       e8 09 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba477:       e9 ed fe ff ff          jmpq   5ba369 <ExecAgg+0x5e9>
         :	                }
         :
         :	                MemoryContextSwitchTo(oldContext);
         :	        }
         :
         :	        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba47c:       84 db                   test   %bl,%bl
    0.00 :	  5ba47e:       0f 85 8e fa ff ff       jne    5b9f12 <ExecAgg+0x192>
    0.00 :	  5ba484:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba48b:       00 00 
    0.00 :	  5ba48d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5ba490:       0f 85 7c fa ff ff       jne    5b9f12 <ExecAgg+0x192>
         :	                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba496:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba499:       e8 e2 e6 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba49e:       e9 6f fa ff ff          jmpq   5b9f12 <ExecAgg+0x192>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba4a3:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba4a7:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba4ab:       e8 50 2b ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba4b0:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba4b3:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba4b6:       0f 84 f0 fa ff ff       je     5b9fac <ExecAgg+0x22c>
         :	                        {
         :	                                aggstate->ss.ps.ps_TupFromTlist =
    0.00 :	  5ba4bc:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5ba4bf:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5ba4c4:       e9 ef fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
    0.00 :	  5ba4c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                                outerslot = ExecProcNode(outerPlan);
         :	                                if (TupIsNull(outerslot))
         :	                                {
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
    0.00 :	  5ba4d0:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba4d7:       01 
    0.00 :	  5ba4d8:       e9 5f fc ff ff          jmpq   5ba13c <ExecAgg+0x3bc>
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4dd:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba4e1:       e8 ba 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4e6:       48 85 c0                test   %rax,%rax
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4e9:       48 89 c7                mov    %rax,%rdi
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4ec:       74 06                   je     5ba4f4 <ExecAgg+0x774>
    0.00 :	  5ba4ee:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba4f2:       74 1f                   je     5ba513 <ExecAgg+0x793>
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba4f4:       48 8b 85 10 ff ff ff    mov    -0xf0(%rbp),%rax
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
    0.00 :	  5ba4fb:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba502:       01 
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba503:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5ba506:       85 c0                   test   %eax,%eax
    0.00 :	  5ba508:       0f 84 2b fb ff ff       je     5ba039 <ExecAgg+0x2b9>
    0.00 :	  5ba50e:       e9 a3 fa ff ff          jmpq   5b9fb6 <ExecAgg+0x236>
         :	                        {
         :	                                /*
         :	                                 * Make a copy of the first input tuple; we will use this for
         :	                                 * comparisons (in group mode) and for projection.
         :	                                 */
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba513:       e8 98 9a ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba518:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
    0.00 :	  5ba51f:       90                      nop
    0.00 :	  5ba520:       e9 14 fb ff ff          jmpq   5ba039 <ExecAgg+0x2b9>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba525:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba529:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba52d:       e8 ce 2a ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba532:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba535:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba538:       0f 84 ba f9 ff ff       je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5ba53e:       e9 79 ff ff ff          jmpq   5ba4bc <ExecAgg+0x73c>
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
         :	                if (entry == NULL)
         :	                {
         :	                        /* No more entries in hashtable, so done */
         :	                        aggstate->agg_done = TRUE;
    0.00 :	  5ba543:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba54a:       01 
    0.00 :	  5ba54b:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba54d:       e9 66 fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
         :	        TupleTableSlot *outerslot;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5ba552:       4d 8b 6e 30             mov    0x30(%r14),%r13
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba556:       4d 8b be c0 00 00 00    mov    0xc0(%r14),%r15
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba55d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5ba560:       e8 3b 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(outerslot))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1350
   25.00 :	  5ba565:       48 85 c0                test   %rax,%rax
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba568:       48 89 c3                mov    %rax,%rbx
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba56b:       0f 84 db 00 00 00       je     5ba64c <ExecAgg+0x8cc>
    0.00 :	  5ba571:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba575:       0f 85 d1 00 00 00       jne    5ba64c <ExecAgg+0x8cc>
         :	                        break;
         :	                /* set up for advance_aggregates call */
         :	                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba57b:       49 89 47 18             mov    %rax,0x18(%r15)
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static AggHashEntry
         :	lookup_hash_entry(AggState *aggstate, TupleTableSlot *inputslot)
         :	{
         :	        TupleTableSlot *hashslot = aggstate->hashslot;
    0.00 :	  5ba57f:       4d 8b a6 f0 00 00 00    mov    0xf0(%r14),%r12
         :	        ListCell   *l;
         :	        AggHashEntry entry;
         :	        bool            isnew;
         :
         :	        /* if first time through, initialize hashslot by cloning input slot */
         :	        if (hashslot->tts_tupleDescriptor == NULL)
    0.00 :	  5ba586:       49 83 7c 24 10 00       cmpq   $0x0,0x10(%r12)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   50.00 :	  5ba58c:       75 14                   jne    5ba5a2 <ExecAgg+0x822>
         :	        {
         :	                ExecSetSlotDescriptor(hashslot, inputslot->tts_tupleDescriptor);
    0.00 :	  5ba58e:       48 8b 70 10             mov    0x10(%rax),%rsi
    0.00 :	  5ba592:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba595:       e8 16 a0 ff ff          callq  5b45b0 <ExecSetSlotDescriptor>
         :	                /* Make sure all unused columns are NULLs */
         :	                ExecStoreAllNullTuple(hashslot);
    0.00 :	  5ba59a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba59d:       e8 1e 9d ff ff          callq  5b42c0 <ExecStoreAllNullTuple>
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
    0.00 :	  5ba5a2:       49 8b 96 f8 00 00 00    mov    0xf8(%r14),%rdx
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ba5a9:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba5ab:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5ba5ae:       74 04                   je     5ba5b4 <ExecAgg+0x834>
    0.00 :	  5ba5b0:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ba5b4:       8b 30                   mov    (%rax),%esi
    0.00 :	  5ba5b6:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba5b9:       e8 a2 4c eb ff          callq  46f260 <slot_getsomeattrs>
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5be:       49 8b 86 f8 00 00 00    mov    0xf8(%r14),%rax
    0.00 :	  5ba5c5:       48 85 c0                test   %rax,%rax
    0.00 :	  5ba5c8:       74 3a                   je     5ba604 <ExecAgg+0x884>
    0.00 :	  5ba5ca:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  5ba5ce:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba5d1:       74 31                   je     5ba604 <ExecAgg+0x884>
         :	        {
         :	                int                     varNumber = lfirst_int(l) - 1;
         :
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
    0.00 :	  5ba5d3:       8b 06                   mov    (%rsi),%eax
    0.00 :	  5ba5d5:       48 8b 53 28             mov    0x28(%rbx),%rdx
    0.00 :	  5ba5d9:       49 8b 4c 24 28          mov    0x28(%r12),%rcx
    0.00 :	  5ba5de:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ba5e1:       48 98                   cltq   
    0.00 :	  5ba5e3:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ba5e7:       48 89 14 c1             mov    %rdx,(%rcx,%rax,8)
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
    0.00 :	  5ba5eb:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  5ba5ef:       49 8b 4c 24 30          mov    0x30(%r12),%rcx
    0.00 :	  5ba5f4:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	  5ba5f8:       88 14 01                mov    %dl,(%rcx,%rax,1)
         :	                ExecStoreAllNullTuple(hashslot);
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5fb:       48 8b 76 08             mov    0x8(%rsi),%rsi
    0.00 :	  5ba5ff:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba602:       75 cf                   jne    5ba5d3 <ExecAgg+0x853>
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
         :	        }
         :
         :	        /* find or create the hashtable entry using the filtered tuple */
         :	        entry = (AggHashEntry) LookupTupleHashEntry(aggstate->hashtable,
    0.00 :	  5ba604:       49 8b be e8 00 00 00    mov    0xe8(%r14),%rdi
    0.00 :	  5ba60b:       48 8d 55 d4             lea    -0x2c(%rbp),%rdx
    0.00 :	  5ba60f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba612:       e8 59 e8 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                                                                                                hashslot,
         :	                                                                                                &isnew);
         :
         :	        if (isnew)
    0.00 :	  5ba617:       80 7d d4 00             cmpb   $0x0,-0x2c(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1057
   25.00 :	  5ba61b:       48 8d 58 08             lea    0x8(%rax),%rbx
    0.00 :	  5ba61f:       74 12                   je     5ba633 <ExecAgg+0x8b3>
         :	        {
         :	                /* initialize aggregates for new tuple group */
         :	                initialize_aggregates(aggstate, aggstate->peragg, entry->pergroup);
    0.00 :	  5ba621:       49 8b b6 b0 00 00 00    mov    0xb0(%r14),%rsi
    0.00 :	  5ba628:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba62b:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba62e:       e8 9d ef ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                /* Find or build hashtable entry for this tuple's group */
         :	                entry = lookup_hash_entry(aggstate, outerslot);
         :
         :	                /* Advance the aggregates */
         :	                advance_aggregates(aggstate, entry->pergroup);
    0.00 :	  5ba633:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba636:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba639:       e8 12 f3 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
    0.00 :	  5ba63e:       49 8b 7f 28             mov    0x28(%r15),%rdi
    0.00 :	  5ba642:       e8 69 e3 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba647:       e9 11 ff ff ff          jmpq   5ba55d <ExecAgg+0x7dd>
         :	        }
         :
         :	        aggstate->table_filled = true;
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba64c:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
         :	        }
         :
         :	        aggstate->table_filled = true;
    0.00 :	  5ba653:       41 c6 86 00 01 00 00    movb   $0x1,0x100(%r14)
    0.00 :	  5ba65a:       01 
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba65b:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5ba662:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5ba665:       e8 f6 92 1c 00          callq  783960 <hash_freeze>
    0.00 :	  5ba66a:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
    0.00 :	  5ba671:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba674:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5ba677:       e8 b4 97 1c 00          callq  783e30 <hash_seq_init>
    0.00 :	  5ba67c:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5ba683:       00 
    0.00 :	  5ba684:       e9 6c f7 ff ff          jmpq   5b9df5 <ExecAgg+0x75>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674520 <GetPrivateRefCountEntry>:
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674520:       55                      push   %rbp
    0.00 :	  674521:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
   25.00 :	  674524:       41 57                   push   %r15
    0.00 :	  674526:       41 89 f7                mov    %esi,%r15d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674529:       89 fe                   mov    %edi,%esi
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67452b:       41 56                   push   %r14
    0.00 :	  67452d:       41 55                   push   %r13
    0.00 :	  67452f:       41 54                   push   %r12
    0.00 :	  674531:       41 89 d4                mov    %edx,%r12d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674534:       ba c0 d0 b7 00          mov    $0xb7d0c0,%edx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674539:       53                      push   %rbx
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  67453a:       31 db                   xor    %ebx,%ebx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67453c:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  674540:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	        PrivateRefCountEntry *res;
         :	        PrivateRefCountEntry *free = NULL;
         :	        bool            found = false;
    0.00 :	  674543:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
   25.00 :	  674547:       eb 14                   jmp    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674549:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                if (res->buffer == buffer)
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
    0.00 :	  674550:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
    0.00 :	  674554:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  67455b:       74 2b                   je     674588 <GetPrivateRefCountEntry+0x68>
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  67455d:       8b 0a                   mov    (%rdx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
   25.00 :	  67455f:       48 89 d0                mov    %rdx,%rax
    0.00 :	  674562:       39 f1                   cmp    %esi,%ecx
    0.00 :	  674564:       0f 84 c8 00 00 00       je     674632 <GetPrivateRefCountEntry+0x112>
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
    0.00 :	  67456a:       48 85 db                test   %rbx,%rbx
    0.00 :	  67456d:       75 e1                   jne    674550 <GetPrivateRefCountEntry+0x30>
    0.00 :	  67456f:       85 c9                   test   %ecx,%ecx
    0.00 :	  674571:       48 0f 44 da             cmove  %rdx,%rbx
    0.00 :	  674575:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
    0.00 :	  674579:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  674580:       75 db                   jne    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674582:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674588:       8b 05 e2 8a 50 00       mov    0x508ae2(%rip),%eax        # b7d070 <PrivateRefCountOverflowed>
         :	        /*
         :	         * By here we know that the buffer, if already pinned, isn't residing in
         :	         * the array.
         :	         */
         :	        res = NULL;
         :	        found = false;
    0.00 :	  67458e:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674592:       85 c0                   test   %eax,%eax
    0.00 :	  674594:       0f 8e ee 00 00 00       jle    674688 <GetPrivateRefCountEntry+0x168>
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  67459a:       4c 8d 75 d7             lea    -0x29(%rbp),%r14
    0.00 :	  67459e:       48 8b 3d d3 8a 50 00    mov    0x508ad3(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745a5:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  6745a9:       31 d2                   xor    %edx,%edx
    0.00 :	  6745ab:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745ae:       e8 ed 00 11 00          callq  7846a0 <hash_search>
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  6745b7:       49 89 c5                mov    %rax,%r13
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745ba:       0f 84 c8 00 00 00       je     674688 <GetPrivateRefCountEntry+0x168>
         :
         :	                }
         :	        }
         :	        else
         :	        {
         :	                if (!do_move)
    0.00 :	  6745c0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  6745c3:       74 6d                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        return res;
         :	                }
         :	                else if (found && free != NULL)
    0.00 :	  6745c5:       48 85 db                test   %rbx,%rbx
    0.00 :	  6745c8:       75 7e                   jne    674648 <GetPrivateRefCountEntry+0x128>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745ca:       8b 05 b0 8a 50 00       mov    0x508ab0(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745d0:       48 8b 3d a1 8a 50 00    mov    0x508aa1(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745d7:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745da:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745df:       49 89 c4                mov    %rax,%r12
    0.00 :	  6745e2:       83 c0 01                add    $0x1,%eax
    0.00 :	  6745e5:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6745e9:       89 05 91 8a 50 00       mov    %eax,0x508a91(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6745ef:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6745f6:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745f7:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6745fa:       e8 a1 00 11 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6745ff:       8b 53 04                mov    0x4(%rbx),%edx
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674602:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674605:       48 89 de                mov    %rbx,%rsi
         :	                        hashent = hash_search(PrivateRefCountHash,
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  674608:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  67460b:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67460f:       ba 02 00 00 00          mov    $0x2,%edx
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  674614:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  67461b:       00 
         :	                        arrayent->refcount = res->refcount;
    0.00 :	  67461c:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674620:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674623:       48 8b 3d 4e 8a 50 00    mov    0x508a4e(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  67462a:       e8 71 00 11 00          callq  7846a0 <hash_search>
    0.00 :	  67462f:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674632:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  674636:       5b                      pop    %rbx
    0.00 :	  674637:       41 5c                   pop    %r12
    0.00 :	  674639:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
   25.00 :	  67463b:       41 5e                   pop    %r14
    0.00 :	  67463d:       41 5f                   pop    %r15
    0.00 :	  67463f:       c9                      leaveq 
    0.00 :	  674640:       c3                      retq   
    0.00 :	  674641:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674648:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = res->refcount;
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67464b:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  67464f:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674652:       ba 02 00 00 00          mov    $0x2,%edx
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674657:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = res->refcount;
    0.00 :	  674659:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  67465d:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674660:       48 8b 3d 11 8a 50 00    mov    0x508a11(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674667:       e8 34 00 11 00          callq  7846a0 <hash_search>
         :	                                                (void *) &buffer,
         :	                                                HASH_REMOVE,
         :	                                                &found);
         :	                        Assert(found);
         :	                        Assert(PrivateRefCountOverflowed > 0);
         :	                        PrivateRefCountOverflowed--;
    0.00 :	  67466c:       83 2d fd 89 50 00 01    subl   $0x1,0x5089fd(%rip)        # b7d070 <PrivateRefCountOverflowed>
    0.00 :	  674673:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674676:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  67467a:       5b                      pop    %rbx
    0.00 :	  67467b:       41 5c                   pop    %r12
    0.00 :	  67467d:       41 5d                   pop    %r13
    0.00 :	  67467f:       41 5e                   pop    %r14
    0.00 :	  674681:       41 5f                   pop    %r15
    0.00 :	  674683:       c9                      leaveq 
    0.00 :	  674684:       c3                      retq   
    0.00 :	  674685:       0f 1f 00                nopl   (%rax)
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
         :	        {
         :	                if (!create)
    0.00 :	  674688:       31 c0                   xor    %eax,%eax
    0.00 :	  67468a:       45 84 ff                test   %r15b,%r15b
    0.00 :	  67468d:       74 a3                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        /* Neither array nor hash have an entry and no new entry is needed */
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
    0.00 :	  67468f:       48 85 db                test   %rbx,%rbx
    0.00 :	  674692:       74 11                   je     6746a5 <GetPrivateRefCountEntry+0x185>
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674694:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = 0;
    0.00 :	  674697:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  67469e:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = 0;
    0.00 :	  6746a0:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746a3:       eb 8d                   jmp    674632 <GetPrivateRefCountEntry+0x112>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746a5:       8b 05 d5 89 50 00       mov    0x5089d5(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746ab:       48 8b 3d c6 89 50 00    mov    0x5089c6(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6746b2:       48 8d 4d d7             lea    -0x29(%rbp),%rcx
    0.00 :	  6746b6:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746bb:       49 89 c4                mov    %rax,%r12
    0.00 :	  6746be:       83 c0 01                add    $0x1,%eax
    0.00 :	  6746c1:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6746c5:       89 05 b5 89 50 00       mov    %eax,0x5089b5(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6746cb:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6746d2:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746d3:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6746d6:       e8 c5 ff 10 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6746db:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  6746de:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill the now free array slot */
         :	                        arrayent->buffer = buffer;
    0.00 :	  6746e1:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  6746e4:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  6746eb:       00 
         :	                        arrayent->refcount = 0;
    0.00 :	  6746ec:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :
         :	                        PrivateRefCountOverflowed++;
    0.00 :	  6746f3:       48 89 d8                mov    %rbx,%rax
    0.00 :	  6746f6:       83 05 73 89 50 00 01    addl   $0x1,0x508973(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746fd:       e9 30 ff ff ff          jmpq   674632 <GetPrivateRefCountEntry+0x112>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674e60 <ReleaseBuffer>:
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
   25.00 :	  674e60:       55                      push   %rbp
    0.00 :	  674e61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674e64:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  674e68:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
   25.00 :	  674e6c:       48 83 ec 10             sub    $0x10,%rsp
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
    0.00 :	  674e70:       85 ff                   test   %edi,%edi
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
    0.00 :	  674e72:       89 fb                   mov    %edi,%ebx
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
    0.00 :	  674e74:       74 7f                   je     674ef5 <ReleaseBuffer+0x95>
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
         :
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
    0.00 :	  674e76:       89 fe                   mov    %edi,%esi
    0.00 :	  674e78:       48 8b 3d 41 5a 54 00    mov    0x545a41(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e7f:       e8 7c 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
         :
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674e84:       85 db                   test   %ebx,%ebx
    0.00 :	  674e86:       78 38                   js     674ec0 <ReleaseBuffer+0x60>
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
    0.00 :	  674e88:       31 d2                   xor    %edx,%edx
    0.00 :	  674e8a:       31 f6                   xor    %esi,%esi
    0.00 :	  674e8c:       89 df                   mov    %ebx,%edi
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
    0.00 :	  674e8e:       4c 8b 25 6b ac 54 00    mov    0x54ac6b(%rip),%r12        # bbfb00 <BufferDescriptors>
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
   25.00 :	  674e95:       e8 86 f6 ff ff          callq  674520 <GetPrivateRefCountEntry>
    0.00 :	  674e9a:       48 89 c2                mov    %rax,%rdx
         :	        Assert(ref != NULL);
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
    0.00 :	  674e9d:       8b 40 04                mov    0x4(%rax),%eax
    0.00 :	  674ea0:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  674ea3:       7e 33                   jle    674ed8 <ReleaseBuffer+0x78>
         :	                ref->refcount--;
    0.00 :	  674ea5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674ea8:       89 42 04                mov    %eax,0x4(%rdx)
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
    0.00 :	  674eab:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  674eaf:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eb4:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
   25.00 :	  674eb5:       c3                      retq   
    0.00 :	  674eb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  674ebd:       00 00 00 
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
         :
         :	        if (BufferIsLocal(buffer))
         :	        {
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
    0.00 :	  674ec0:       f7 d3                   not    %ebx
    0.00 :	  674ec2:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674ec5:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674ec9:       48 03 05 50 82 50 00    add    0x508250(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674ed0:       83 28 01                subl   $0x1,(%rax)
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
    0.00 :	  674ed3:       eb d6                   jmp    674eab <ReleaseBuffer+0x4b>
    0.00 :	  674ed5:       0f 1f 00                nopl   (%rax)
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ed8:       48 63 c3                movslq %ebx,%rax
         :	}
    0.00 :	  674edb:       48 8b 1c 24             mov    (%rsp),%rbx
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674edf:       31 f6                   xor    %esi,%esi
    0.00 :	  674ee1:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  674ee5:       49 8d 7c 04 c0          lea    -0x40(%r12,%rax,1),%rdi
         :	}
    0.00 :	  674eea:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eef:       c9                      leaveq 
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ef0:       e9 3b fe ff ff          jmpq   674d30 <UnpinBuffer>
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
    0.00 :	  674ef5:       ba 34 a0 8a 00          mov    $0x8aa034,%edx
    0.00 :	  674efa:       be cf 0a 00 00          mov    $0xacf,%esi
    0.00 :	  674eff:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674f04:       e8 17 65 10 00          callq  77b420 <elog_start>
    0.00 :	  674f09:       31 d2                   xor    %edx,%edx
    0.00 :	  674f0b:       be 5c 9d 8a 00          mov    $0x8a9d5c,%esi
    0.00 :	  674f10:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  674f15:       31 c0                   xor    %eax,%eax
    0.00 :	  674f17:       e8 14 63 10 00          callq  77b230 <elog_finish>
    0.00 :	  674f1c:       e8 af 45 df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:521
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:531
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000676570 <ReadBufferExtended>:
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676570:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   25.00 :	  676571:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  676574:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  676578:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  67657c:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67657f:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  676583:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  676587:       41 89 cd                mov    %ecx,%r13d
    0.00 :	  67658a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  67658e:       48 83 ec 40             sub    $0x40,%rsp
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676592:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676597:       41 89 f7                mov    %esi,%r15d
    0.00 :	  67659a:       41 89 d6                mov    %edx,%r14d
    0.00 :	  67659d:       4d 89 c4                mov    %r8,%r12
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6765a0:       0f 84 aa 00 00 00       je     676650 <ReadBufferExtended+0xe0>
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6765a6:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765aa:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:521
   50.00 :	  6765ae:       80 fa 74                cmp    $0x74,%dl
    0.00 :	  6765b1:       74 6d                   je     676620 <ReadBufferExtended+0xb0>
         :
         :	        /*
         :	         * Read the buffer, and update pgstat counters to reflect a cache hit or
         :	         * miss.
         :	         */
         :	        pgstat_count_buffer_read(reln);
    0.00 :	  6765b3:       48 8b 83 38 01 00 00    mov    0x138(%rbx),%rax
    0.00 :	  6765ba:       48 85 c0                test   %rax,%rax
    0.00 :	  6765bd:       74 0d                   je     6765cc <ReadBufferExtended+0x5c>
    0.00 :	  6765bf:       48 83 40 60 01          addq   $0x1,0x60(%rax)
    0.00 :	  6765c4:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765c8:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
         :	        buf = ReadBuffer_common(reln->rd_smgr, reln->rd_rel->relpersistence,
    0.00 :	  6765cc:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  6765d0:       48 8d 45 d7             lea    -0x29(%rbp),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:531
   25.00 :	  6765d4:       0f be f2                movsbl %dl,%esi
    0.00 :	  6765d7:       4d 89 e1                mov    %r12,%r9
    0.00 :	  6765da:       45 89 e8                mov    %r13d,%r8d
    0.00 :	  6765dd:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  6765e0:       44 89 fa                mov    %r15d,%edx
    0.00 :	  6765e3:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  6765e7:       e8 b4 f6 ff ff          callq  675ca0 <ReadBuffer_common>
         :	                                                        forkNum, blockNum, mode, strategy, &hit);
         :	        if (hit)
    0.00 :	  6765ec:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  6765f0:       74 11                   je     676603 <ReadBufferExtended+0x93>
         :	                pgstat_count_buffer_hit(reln);
    0.00 :	  6765f2:       48 8b 93 38 01 00 00    mov    0x138(%rbx),%rdx
    0.00 :	  6765f9:       48 85 d2                test   %rdx,%rdx
    0.00 :	  6765fc:       74 05                   je     676603 <ReadBufferExtended+0x93>
    0.00 :	  6765fe:       48 83 42 68 01          addq   $0x1,0x68(%rdx)
         :	        return buf;
         :	}
    0.00 :	  676603:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  676607:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  67660b:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  67660f:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  676613:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  676617:       c9                      leaveq 
    0.00 :	  676618:       c3                      retq   
    0.00 :	  676619:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  676620:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676624:       75 8d                   jne    6765b3 <ReadBufferExtended+0x43>
         :	                ereport(ERROR,
    0.00 :	  676626:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676629:       b9 c0 a0 8a 00          mov    $0x8aa0c0,%ecx
    0.00 :	  67662e:       ba 0c 02 00 00          mov    $0x20c,%edx
    0.00 :	  676633:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676638:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67663d:       e8 7e 44 10 00          callq  77aac0 <errstart>
    0.00 :	  676642:       84 c0                   test   %al,%al
    0.00 :	  676644:       75 29                   jne    67666f <ReadBufferExtended+0xff>
    0.00 :	  676646:       e8 85 2e df ff          callq  4694d0 <abort@plt>
    0.00 :	  67664b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	{
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676650:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676653:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676656:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676659:       e8 d2 33 02 00          callq  699a30 <smgropen>
    0.00 :	  67665e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676662:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676665:       e8 96 2c 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67666a:       e9 37 ff ff ff          jmpq   6765a6 <ReadBufferExtended+0x36>
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
         :	                ereport(ERROR,
    0.00 :	  67666f:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  676674:       31 c0                   xor    %eax,%eax
    0.00 :	  676676:       e8 25 62 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67667b:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  676680:       89 c3                   mov    %eax,%ebx
    0.00 :	  676682:       e8 c9 66 10 00          callq  77cd50 <errcode>
    0.00 :	  676687:       89 de                   mov    %ebx,%esi
    0.00 :	  676689:       89 c7                   mov    %eax,%edi
    0.00 :	  67668b:       31 c0                   xor    %eax,%eax
    0.00 :	  67668d:       e8 4e 3f 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676692:       eb b2                   jmp    676646 <ReadBufferExtended+0xd6>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1305
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077e0d0 <FunctionCall1Coll>:
         :	 * directly-computed parameter list.  Note that neither arguments nor result
         :	 * are allowed to be NULL.
         :	 */
         :	Datum
         :	FunctionCall1Coll(FmgrInfo *flinfo, Oid collation, Datum arg1)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1289
   25.00 :	  77e0d0:       55                      push   %rbp
    0.00 :	  77e0d1:       48 89 f8                mov    %rdi,%rax
    0.00 :	  77e0d4:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  77e0d7:       48 81 ec b0 03 00 00    sub    $0x3b0,%rsp
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 1, collation, NULL, NULL);
    0.00 :	  77e0de:       48 89 bd 50 fc ff ff    mov    %rdi,-0x3b0(%rbp)
    0.00 :	  77e0e5:       48 c7 85 58 fc ff ff    movq   $0x0,-0x3a8(%rbp)
    0.00 :	  77e0ec:       00 00 00 00 
         :
         :	        fcinfo.arg[0] = arg1;
         :	        fcinfo.argnull[0] = false;
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e0f0:       48 8d bd 50 fc ff ff    lea    -0x3b0(%rbp),%rdi
         :	FunctionCall1Coll(FmgrInfo *flinfo, Oid collation, Datum arg1)
         :	{
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 1, collation, NULL, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1293
   50.00 :	  77e0f7:       48 c7 85 60 fc ff ff    movq   $0x0,-0x3a0(%rbp)
    0.00 :	  77e0fe:       00 00 00 00 
    0.00 :	  77e102:       89 b5 68 fc ff ff       mov    %esi,-0x398(%rbp)
    0.00 :	  77e108:       c6 85 6c fc ff ff 00    movb   $0x0,-0x394(%rbp)
    0.00 :	  77e10f:       66 c7 85 6e fc ff ff    movw   $0x1,-0x392(%rbp)
    0.00 :	  77e116:       01 00 
         :
         :	        fcinfo.arg[0] = arg1;
    0.00 :	  77e118:       48 89 95 70 fc ff ff    mov    %rdx,-0x390(%rbp)
         :	        fcinfo.argnull[0] = false;
    0.00 :	  77e11f:       c6 45 90 00             movb   $0x0,-0x70(%rbp)
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e123:       ff 10                   callq  *(%rax)
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
    0.00 :	  77e125:       80 bd 6c fc ff ff 00    cmpb   $0x0,-0x394(%rbp)
    0.00 :	  77e12c:       75 02                   jne    77e130 <FunctionCall1Coll+0x60>
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1305
   25.00 :	  77e12e:       c9                      leaveq 
    0.00 :	  77e12f:       c3                      retq   
         :
         :	        result = FunctionCallInvoke(&fcinfo);
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
    0.00 :	  77e130:       ba 60 52 8d 00          mov    $0x8d5260,%edx
    0.00 :	  77e135:       be 16 05 00 00          mov    $0x516,%esi
    0.00 :	  77e13a:       bf b3 47 8d 00          mov    $0x8d47b3,%edi
    0.00 :	  77e13f:       e8 dc d2 ff ff          callq  77b420 <elog_start>
    0.00 :	  77e144:       48 8b 85 50 fc ff ff    mov    -0x3b0(%rbp),%rax
    0.00 :	  77e14b:       be 97 4c 8d 00          mov    $0x8d4c97,%esi
    0.00 :	  77e150:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  77e155:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	  77e158:       31 c0                   xor    %eax,%eax
    0.00 :	  77e15a:       e8 d1 d0 ff ff          callq  77b230 <elog_finish>
    0.00 :	  77e15f:       e8 6c b3 ce ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5600 <XidInMVCCSnapshot>:
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
    0.00 :	  7a5600:       55                      push   %rbp
    0.00 :	  7a5601:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5604:       41 54                   push   %r12
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   50.00 :	  7a5606:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7a5609:       53                      push   %rbx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560a:       8b 76 08                mov    0x8(%rsi),%esi
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
   25.00 :	  7a560d:       89 fb                   mov    %edi,%ebx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560f:       e8 cc a9 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5614:       84 c0                   test   %al,%al
    0.00 :	  7a5616:       74 08                   je     7a5620 <XidInMVCCSnapshot+0x20>
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a5618:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5619:       31 c0                   xor    %eax,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a561b:       41 5c                   pop    %r12
    0.00 :	  7a561d:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
   25.00 :	  7a561e:       c3                      retq   
    0.00 :	  7a561f:       90                      nop
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                return false;
         :	        /* Any xid >= xmax is in-progress */
         :	        if (TransactionIdFollowsOrEquals(xid, snapshot->xmax))
    0.00 :	  7a5620:       41 8b 74 24 0c          mov    0xc(%r12),%esi
    0.00 :	  7a5625:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5627:       e8 44 aa d1 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  7a562c:       84 c0                   test   %al,%al
    0.00 :	  7a562e:       0f 85 7c 00 00 00       jne    7a56b0 <XidInMVCCSnapshot+0xb0>
         :
         :	        /*
         :	         * Snapshot information is stored slightly differently in snapshots taken
         :	         * during recovery.
         :	         */
         :	        if (!snapshot->takenDuringRecovery)
    0.00 :	  7a5634:       41 80 7c 24 29 00       cmpb   $0x0,0x29(%r12)
    0.00 :	  7a563a:       0f 85 80 00 00 00       jne    7a56c0 <XidInMVCCSnapshot+0xc0>
         :	                 * check things is just to compare the given XID against both subxact
         :	                 * XIDs and top-level XIDs.  If the snapshot overflowed, we have to
         :	                 * use pg_subtrans to convert a subxact XID to its parent XID, but
         :	                 * then we need only look at top-level XIDs not subxacts.
         :	                 */
         :	                if (!snapshot->suboverflowed)
    0.00 :	  7a5640:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a5646:       0f 85 b4 00 00 00       jne    7a5700 <XidInMVCCSnapshot+0x100>
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a564c:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a5651:       85 f6                   test   %esi,%esi
    0.00 :	  7a5653:       7e 25                   jle    7a567a <XidInMVCCSnapshot+0x7a>
         :	                        {
         :	                                if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a5655:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a565a:       31 d2                   xor    %edx,%edx
    0.00 :	  7a565c:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a565e:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a5661:       75 10                   jne    7a5673 <XidInMVCCSnapshot+0x73>
    0.00 :	  7a5663:       eb 4b                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5665:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a5668:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a566b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a566f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a5671:       74 3d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                if (!snapshot->suboverflowed)
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5673:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a5676:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a5678:       7c ee                   jl     7a5668 <XidInMVCCSnapshot+0x68>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a567a:       41 8b 74 24 18          mov    0x18(%r12),%esi
    0.00 :	  7a567f:       85 f6                   test   %esi,%esi
    0.00 :	  7a5681:       74 95                   je     7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->xip[i]))
    0.00 :	  7a5683:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  7a5688:       31 d2                   xor    %edx,%edx
    0.00 :	  7a568a:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a568c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a568f:       75 12                   jne    7a56a3 <XidInMVCCSnapshot+0xa3>
    0.00 :	  7a5691:       eb 1d                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5693:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a5698:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a569b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a569f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56a1:       74 0d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a56a3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56a6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56a8:       72 ee                   jb     7a5698 <XidInMVCCSnapshot+0x98>
    0.00 :	  7a56aa:       e9 69 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56af:       90                      nop
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b0:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56b1:       b8 01 00 00 00          mov    $0x1,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b6:       41 5c                   pop    %r12
    0.00 :	  7a56b8:       c9                      leaveq 
    0.00 :	  7a56b9:       c3                      retq   
    0.00 :	  7a56ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * far the bigger array, and we mostly don't know which xids are
         :	                 * top-level and which are subxacts. The xip array is empty.
         :	                 *
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
    0.00 :	  7a56c0:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a56c6:       75 60                   jne    7a5728 <XidInMVCCSnapshot+0x128>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56c8:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a56cd:       85 f6                   test   %esi,%esi
    0.00 :	  7a56cf:       0f 8e 43 ff ff ff       jle    7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a56d5:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a56da:       31 d2                   xor    %edx,%edx
    0.00 :	  7a56dc:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a56de:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a56e1:       75 10                   jne    7a56f3 <XidInMVCCSnapshot+0xf3>
    0.00 :	  7a56e3:       eb cb                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a56e5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a56e8:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a56eb:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a56ef:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56f1:       74 bd                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56f3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56f6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56f8:       7c ee                   jl     7a56e8 <XidInMVCCSnapshot+0xe8>
    0.00 :	  7a56fa:       e9 19 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56ff:       90                      nop
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5700:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5702:       e8 e9 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5707:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a570c:       89 c7                   mov    %eax,%edi
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a570e:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5710:       e8 cb a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5715:       84 c0                   test   %al,%al
    0.00 :	  7a5717:       0f 84 5d ff ff ff       je     7a567a <XidInMVCCSnapshot+0x7a>
    0.00 :	  7a571d:       e9 f6 fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a5722:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5728:       89 df                   mov    %ebx,%edi
    0.00 :	  7a572a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5730:       e8 bb 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5735:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a573a:       89 c7                   mov    %eax,%edi
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a573c:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a573e:       e8 9d a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5743:       84 c0                   test   %al,%al
    0.00 :	  7a5745:       74 81                   je     7a56c8 <XidInMVCCSnapshot+0xc8>
    0.00 :	  7a5747:       e9 cc fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:588
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:607
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:607
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3f00 <ExecCopySlotMinimalTuple>:
         :	 *                      The slot itself is undisturbed.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecCopySlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f00:       55                      push   %rbp
    0.00 :	  5b3f01:       48 89 f8                mov    %rdi,%rax
         :
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f04:       48 8b 7f 38             mov    0x38(%rdi),%rdi
         :	 *                      The slot itself is undisturbed.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecCopySlotMinimalTuple(TupleTableSlot *slot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:588
   33.33 :	  5b3f08:       48 89 e5                mov    %rsp,%rbp
         :
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f0b:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3f0e:       74 10                   je     5b3f20 <ExecCopySlotMinimalTuple+0x20>
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f10:       c9                      leaveq 
         :	        /*
         :	         * If we have a physical tuple then just copy it.  Prefer to copy
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
         :	                return heap_copy_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b3f11:       e9 ca ab eb ff          jmpq   46eae0 <heap_copy_minimal_tuple>
    0.00 :	  5b3f16:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b3f1d:       00 00 00 
         :	        if (slot->tts_tuple)
    0.00 :	  5b3f20:       48 8b 78 08             mov    0x8(%rax),%rdi
    0.00 :	  5b3f24:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3f27:       74 07                   je     5b3f30 <ExecCopySlotMinimalTuple+0x30>
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f29:       c9                      leaveq 
         :	         * tts_mintuple since that's a tad cheaper.
         :	         */
         :	        if (slot->tts_mintuple)
         :	                return heap_copy_minimal_tuple(slot->tts_mintuple);
         :	        if (slot->tts_tuple)
         :	                return minimal_tuple_from_heap_tuple(slot->tts_tuple);
    0.00 :	  5b3f2a:       e9 51 ab eb ff          jmpq   46ea80 <minimal_tuple_from_heap_tuple>
    0.00 :	  5b3f2f:       90                      nop
         :
         :	        /*
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:607
   33.33 :	  5b3f30:       48 8b 50 30             mov    0x30(%rax),%rdx
    0.00 :	  5b3f34:       48 8b 70 28             mov    0x28(%rax),%rsi
    0.00 :	  5b3f38:       48 8b 78 10             mov    0x10(%rax),%rdi
         :	                                                                   slot->tts_values,
         :	                                                                   slot->tts_isnull);
         :	}
    0.00 :	  5b3f3c:       c9                      leaveq 
         :	                return minimal_tuple_from_heap_tuple(slot->tts_tuple);
         :
         :	        /*
         :	         * Otherwise we need to build a tuple from the Datum array.
         :	         */
         :	        return heap_form_minimal_tuple(slot->tts_tupleDescriptor,
   33.33 :	  5b3f3d:       e9 9e c5 eb ff          jmpq   4704e0 <heap_form_minimal_tuple>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:687
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:698
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3f50 <ExecFetchSlotMinimalTuple>:
         :	 * As above, the result must be treated as read-only.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecFetchSlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f50:       55                      push   %rbp
    0.00 :	  5b3f51:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b3f54:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  5b3f58:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  5b3f5c:       48 83 ec 10             sub    $0x10,%rsp
         :	        Assert(!slot->tts_isempty);
         :
         :	        /*
         :	         * If we have a minimal physical tuple (local or not) then just return it.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f60:       48 8b 47 38             mov    0x38(%rdi),%rax
         :	 * As above, the result must be treated as read-only.
         :	 * --------------------------------
         :	 */
         :	MinimalTuple
         :	ExecFetchSlotMinimalTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3f64:       49 89 fc                mov    %rdi,%r12
         :	        Assert(!slot->tts_isempty);
         :
         :	        /*
         :	         * If we have a minimal physical tuple (local or not) then just return it.
         :	         */
         :	        if (slot->tts_mintuple)
    0.00 :	  5b3f67:       48 85 c0                test   %rax,%rax
    0.00 :	  5b3f6a:       74 14                   je     5b3f80 <ExecFetchSlotMinimalTuple+0x30>
         :	         * in that at the moment, but if any materializes, we should change this
         :	         * function to force the slot into minimal-tuple-only state.
         :	         */
         :
         :	        return slot->tts_mintuple;
         :	}
    0.00 :	  5b3f6c:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  5b3f70:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:698
   33.33 :	  5b3f75:       c9                      leaveq 
    0.00 :	  5b3f76:       c3                      retq   
    0.00 :	  5b3f77:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b3f7e:       00 00 
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5b3f80:       48 8b 1d d9 68 60 00    mov    0x6068d9(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b3f87:       48 8b 47 18             mov    0x18(%rdi),%rax
    0.00 :	  5b3f8b:       48 89 05 ce 68 60 00    mov    %rax,0x6068ce(%rip)        # bba860 <CurrentMemoryContext>
         :	         * We may be called in a context that is shorter-lived than the tuple
         :	         * slot, but we have to ensure that the materialized tuple will survive
         :	         * anyway.
         :	         */
         :	        oldContext = MemoryContextSwitchTo(slot->tts_mcxt);
         :	        slot->tts_mintuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  5b3f92:       e8 69 ff ff ff          callq  5b3f00 <ExecCopySlotMinimalTuple>
         :	        slot->tts_shouldFreeMin = true;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:687
   66.67 :	  5b3f97:       41 c6 44 24 06 01       movb   $0x1,0x6(%r12)
         :	         * We may be called in a context that is shorter-lived than the tuple
         :	         * slot, but we have to ensure that the materialized tuple will survive
         :	         * anyway.
         :	         */
         :	        oldContext = MemoryContextSwitchTo(slot->tts_mcxt);
         :	        slot->tts_mintuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  5b3f9d:       49 89 44 24 38          mov    %rax,0x38(%r12)
    0.00 :	  5b3fa2:       48 89 1d b7 68 60 00    mov    %rbx,0x6068b7(%rip)        # bba860 <CurrentMemoryContext>
         :	         * attached to a virtual or non-local physical tuple.  There seems no harm
         :	         * in that at the moment, but if any materializes, we should change this
         :	         * function to force the slot into minimal-tuple-only state.
         :	         */
         :
         :	        return slot->tts_mintuple;
    0.00 :	  5b3fa9:       49 8b 44 24 38          mov    0x38(%r12),%rax
         :	}
    0.00 :	  5b3fae:       eb bc                   jmp    5b3f6c <ExecFetchSlotMinimalTuple+0x1c>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1039
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1064
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:773
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675ca0 <ReadBuffer_common>:
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  675ca0:       55                      push   %rbp
    0.00 :	  675ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  675ca4:       41 57                   push   %r15
    0.00 :	  675ca6:       4d 89 cf                mov    %r9,%r15
    0.00 :	  675ca9:       41 56                   push   %r14
    0.00 :	  675cab:       41 55                   push   %r13
    0.00 :	  675cad:       41 54                   push   %r12
    0.00 :	  675caf:       53                      push   %rbx
    0.00 :	  675cb0:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  675cb4:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
    0.00 :	  675cb8:       89 95 78 ff ff ff       mov    %edx,-0x88(%rbp)
    0.00 :	  675cbe:       89 8d 74 ff ff ff       mov    %ecx,-0x8c(%rbp)
    0.00 :	  675cc4:       44 89 85 70 ff ff ff    mov    %r8d,-0x90(%rbp)
    0.00 :	  675ccb:       40 88 b5 7f ff ff ff    mov    %sil,-0x81(%rbp)
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cd2:       83 7f 0c ff             cmpl   $0xffffffff,0xc(%rdi)
         :
         :	        *hit = false;
    0.00 :	  675cd6:       48 8b 45 10             mov    0x10(%rbp),%rax
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cda:       0f 95 45 8f             setne  -0x71(%rbp)
         :
         :	        *hit = false;
    0.00 :	  675cde:       c6 00 00                movb   $0x0,(%rax)
         :
         :	        /* Make sure we will have room to remember the buffer pin */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  675ce1:       48 8b 3d d8 4b 54 00    mov    0x544bd8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  675ce8:       e8 83 51 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :
         :	        isExtend = (blockNum == P_NEW);
    0.00 :	  675ced:       83 bd 74 ff ff ff ff    cmpl   $0xffffffff,-0x8c(%rbp)
         :	                                                                           smgr->smgr_rnode.node.relNode,
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
    0.00 :	  675cf4:       0f 94 45 8e             sete   -0x72(%rbp)
    0.00 :	  675cf8:       0f 84 2f 05 00 00       je     67622d <ReadBuffer_common+0x58d>
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
    0.00 :	  675cfe:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675d02:       74 7b                   je     675d7f <ReadBuffer_common+0xdf>
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d04:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d0a:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675d10:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  675d14:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675d18:       e8 c3 20 00 00          callq  677de0 <LocalBufferAlloc>
         :	                if (found)
    0.00 :	  675d1d:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d21:       49 89 c6                mov    %rax,%r14
         :	                if (found)
    0.00 :	  675d24:       0f 85 1b 04 00 00       jne    676145 <ReadBuffer_common+0x4a5>
         :	                        pgBufferUsage.local_blks_hit++;
         :	                else
         :	                        pgBufferUsage.local_blks_read++;
    0.00 :	  675d2a:       48 83 05 56 9a 54 00    addq   $0x1,0x549a56(%rip)        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  675d31:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675d32:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675d36:       0f 84 fa 00 00 00       je     675e36 <ReadBuffer_common+0x196>
         :	        {
         :	                if (!isExtend)
    0.00 :	  675d3c:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  675d40:       0f 85 01 05 00 00       jne    676247 <ReadBuffer_common+0x5a7>
         :	                {
         :	                        /* Just need to update stats before we exit */
         :	                        *hit = true;
    0.00 :	  675d46:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	  675d4a:       c6 00 01                movb   $0x1,(%rax)
         :	                        VacuumPageHit++;
    0.00 :	  675d4d:       83 05 80 43 54 00 01    addl   $0x1,0x544380(%rip)        # bba0d4 <VacuumPageHit>
         :
         :	                        if (VacuumCostActive)
    0.00 :	  675d54:       80 3d 89 43 54 00 00    cmpb   $0x0,0x544389(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675d5b:       74 0c                   je     675d69 <ReadBuffer_common+0xc9>
         :	                                VacuumCostBalance += VacuumCostPageHit;
    0.00 :	  675d5d:       8b 05 c9 2d 4f 00       mov    0x4f2dc9(%rip),%eax        # b68b2c <VacuumCostPageHit>
    0.00 :	  675d63:       01 05 77 43 54 00       add    %eax,0x544377(%rip)        # bba0e0 <VacuumCostBalance>
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d69:       41 8b 46 24             mov    0x24(%r14),%eax
         :	}
    0.00 :	  675d6d:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  675d71:       5b                      pop    %rbx
    0.00 :	  675d72:       41 5c                   pop    %r12
    0.00 :	  675d74:       41 5d                   pop    %r13
    0.00 :	  675d76:       41 5e                   pop    %r14
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d78:       83 c0 01                add    $0x1,%eax
         :	}
    0.00 :	  675d7b:       41 5f                   pop    %r15
    0.00 :	  675d7d:       c9                      leaveq 
    0.00 :	  675d7e:       c3                      retq   
         :	        int                     buf_id;
         :	        volatile BufferDesc *buf;
         :	        bool            valid;
         :
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
    0.00 :	  675d7f:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  675d83:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  675d86:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  675d8a:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  675d8d:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d93:       89 45 b8                mov    %eax,-0x48(%rbp)
    0.00 :	  675d96:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  675d9c:       89 55 c0                mov    %edx,-0x40(%rbp)
    0.00 :	  675d9f:       89 45 bc                mov    %eax,-0x44(%rbp)
    0.00 :	  675da2:       eb 11                   jmp    675db5 <ReadBuffer_common+0x115>
    0.00 :	  675da4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                valid = PinBuffer(foundbuf, strategy);
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
    0.00 :	  675da8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675dad:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675db0:       e8 7b ef ff ff          callq  674d30 <UnpinBuffer>
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
         :
         :	        /* see if the block is in the buffer pool already */
         :	start:
         :	        buf_id = BufTableLookup(&newTag);
    0.00 :	  675db5:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675db9:       e8 22 e0 ff ff          callq  673de0 <BufTableLookup>
         :	        if (buf_id >= 0)
    0.00 :	  675dbe:       85 c0                   test   %eax,%eax
    0.00 :	  675dc0:       0f 88 bb 01 00 00       js     675f81 <ReadBuffer_common+0x2e1>
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dc6:       48 63 d8                movslq %eax,%rbx
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dc9:       4c 89 fe                mov    %r15,%rsi
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dcc:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675dd0:       48 03 1d 29 9d 54 00    add    0x549d29(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dd7:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675dda:       49 89 dc                mov    %rbx,%r12
    0.00 :	  675ddd:       e8 4e ee ff ff          callq  674c30 <PinBuffer>
    0.00 :	  675de2:       89 c2                   mov    %eax,%edx
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  675de4:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  675de7:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  675dea:       75 bc                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dec:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  675def:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  675df2:       75 b4                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675df4:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  675df7:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  675df9:       75 ad                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dfb:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  675dfe:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  675e01:       75 a5                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675e03:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  675e06:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  675e09:       75 9d                   jne    675da8 <ReadBuffer_common+0x108>
         :	                }
         :
         :	                *foundPtr = TRUE;
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e0b:       84 d2                   test   %dl,%dl
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
         :	                        goto start;
         :	                }
         :
         :	                *foundPtr = TRUE;
    0.00 :	  675e0d:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e11:       0f 84 33 02 00 00       je     67604a <ReadBuffer_common+0x3aa>
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e17:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e1b:       4d 89 e6                mov    %r12,%r14
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e1e:       0f 84 9a 03 00 00       je     6761be <ReadBuffer_common+0x51e>
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e24:       48 83 05 34 99 54 00    addq   $0x1,0x549934(%rip)        # bbf760 <pgBufferUsage>
    0.00 :	  675e2b:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675e2c:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675e30:       0f 85 06 ff ff ff       jne    675d3c <ReadBuffer_common+0x9c>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e36:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675e3a:       0f 84 8b 03 00 00       je     6761cb <ReadBuffer_common+0x52b>
    0.00 :	  675e40:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  675e44:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  675e49:       29 c2                   sub    %eax,%edx
         :
         :	        if (isExtend)
    0.00 :	  675e4b:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e4f:       48 8b 05 c2 72 50 00    mov    0x5072c2(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  675e56:       48 63 d2                movslq %edx,%rdx
    0.00 :	  675e59:       4c 8b 24 d0             mov    (%rax,%rdx,8),%r12
         :
         :	        if (isExtend)
    0.00 :	  675e5d:       0f 85 84 03 00 00       jne    6761e7 <ReadBuffer_common+0x547>
         :	        {
         :	                /*
         :	                 * Read in the page, unless the caller intends to overwrite it and
         :	                 * just wants us to allocate a buffer.
         :	                 */
         :	                if (mode == RBM_ZERO)
    0.00 :	  675e63:       83 bd 70 ff ff ff 01    cmpl   $0x1,-0x90(%rbp)
    0.00 :	  675e6a:       74 7e                   je     675eea <ReadBuffer_common+0x24a>
         :	                else
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
    0.00 :	  675e6c:       80 3d ee 71 50 00 00    cmpb   $0x0,0x5071ee(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e73:       0f 85 d1 04 00 00       jne    67634a <ReadBuffer_common+0x6aa>
         :	                                INSTR_TIME_SET_CURRENT(io_start);
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
    0.00 :	  675e79:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675e7f:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675e85:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  675e88:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675e8c:       e8 7f 35 02 00          callq  699410 <smgrread>
         :
         :	                        if (track_io_timing)
    0.00 :	  675e91:       80 3d c9 71 50 00 00    cmpb   $0x0,0x5071c9(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e98:       0f 85 bc 04 00 00       jne    67635a <ReadBuffer_common+0x6ba>
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
         :	                        }
         :
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
    0.00 :	  675e9e:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  675ea4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ea7:       e8 24 f0 01 00          callq  694ed0 <PageIsVerified>
    0.00 :	  675eac:       84 c0                   test   %al,%al
    0.00 :	  675eae:       75 47                   jne    675ef7 <ReadBuffer_common+0x257>
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
    0.00 :	  675eb0:       83 bd 70 ff ff ff 02    cmpl   $0x2,-0x90(%rbp)
    0.00 :	  675eb7:       74 0d                   je     675ec6 <ReadBuffer_common+0x226>
    0.00 :	  675eb9:       80 3d a0 71 50 00 00    cmpb   $0x0,0x5071a0(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  675ec0:       0f 84 51 05 00 00       je     676417 <ReadBuffer_common+0x777>
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  675ec6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  675ec9:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  675ece:       ba f0 02 00 00          mov    $0x2f0,%edx
    0.00 :	  675ed3:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  675ed8:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  675edd:       e8 de 4b 10 00          callq  77aac0 <errstart>
    0.00 :	  675ee2:       84 c0                   test   %al,%al
    0.00 :	  675ee4:       0f 85 11 04 00 00       jne    6762fb <ReadBuffer_common+0x65b>
         :	                                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                                         errmsg("invalid page in block %u of relation %s; zeroing out page",
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  675eea:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  675eef:       31 c0                   xor    %eax,%eax
    0.00 :	  675ef1:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ef4:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  675ef7:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675efb:       0f 84 18 03 00 00       je     676219 <ReadBuffer_common+0x579>
         :	        {
         :	                /* Only need to adjust flags */
         :	                bufHdr->flags |= BM_VALID;
    0.00 :	  675f01:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  675f06:       83 c8 02                or     $0x2,%eax
    0.00 :	  675f09:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
         :	        }
         :
         :	        VacuumPageMiss++;
    0.00 :	  675f0e:       83 05 c3 41 54 00 01    addl   $0x1,0x5441c3(%rip)        # bba0d8 <VacuumPageMiss>
         :	        if (VacuumCostActive)
    0.00 :	  675f15:       80 3d c8 41 54 00 00    cmpb   $0x0,0x5441c8(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675f1c:       0f 84 47 fe ff ff       je     675d69 <ReadBuffer_common+0xc9>
         :	                VacuumCostBalance += VacuumCostPageMiss;
    0.00 :	  675f22:       8b 05 08 2c 4f 00       mov    0x4f2c08(%rip),%eax        # b68b30 <VacuumCostPageMiss>
    0.00 :	  675f28:       01 05 b2 41 54 00       add    %eax,0x5441b2(%rip)        # bba0e0 <VacuumCostBalance>
    0.00 :	  675f2e:       e9 36 fe ff ff          jmpq   675d69 <ReadBuffer_common+0xc9>
    0.00 :	  675f33:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  675f38:       49 8d 5e 20             lea    0x20(%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675f3c:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675f41:       f0 86 03                lock xchg %al,(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1039
   33.33 :	  675f44:       84 c0                   test   %al,%al
    0.00 :	  675f46:       0f 85 a4 01 00 00       jne    6760f0 <ReadBuffer_common+0x450>
         :	                 * Somebody could have pinned or re-dirtied the buffer while we were
         :	                 * doing the I/O and making the new hashtable entry.  If so, we can't
         :	                 * recycle this buffer; we must undo everything we've done and start
         :	                 * over with a new victim buffer.
         :	                 */
         :	                oldFlags = buf->flags;
    0.00 :	  675f4c:       41 0f b7 56 14          movzwl 0x14(%r14),%edx
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
    0.00 :	  675f51:       41 8b 46 18             mov    0x18(%r14),%eax
    0.00 :	  675f55:       83 e8 01                sub    $0x1,%eax
    0.00 :	  675f58:       75 0c                   jne    675f66 <ReadBuffer_common+0x2c6>
    0.00 :	  675f5a:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  675f5d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675f60:       0f 84 ec 01 00 00       je     676152 <ReadBuffer_common+0x4b2>
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
         :	                BufTableDelete(&newTag);
    0.00 :	  675f66:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
         :	                 */
         :	                oldFlags = buf->flags;
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
    0.00 :	  675f6a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                BufTableDelete(&newTag);
    0.00 :	  675f6f:       e8 dc dd ff ff          callq  673d50 <BufTableDelete>
         :	                UnpinBuffer(buf, true);
    0.00 :	  675f74:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675f79:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  675f7c:       e8 af ed ff ff          callq  674d30 <UnpinBuffer>
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f81:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  675f84:       e8 d7 15 00 00          callq  677560 <StrategyGetBuffer>
         :
         :	                Assert(buf->refcount == 0);
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
    0.00 :	  675f89:       0f b7 58 14             movzwl 0x14(%rax),%ebx
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f8d:       48 89 c7                mov    %rax,%rdi
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f90:       49 89 c6                mov    %rax,%r14
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f93:       e8 38 ec ff ff          callq  674bd0 <PinBuffer_Locked>
         :	                 * condition here, in that someone might dirty it after we released it
         :	                 * above, or even while we are writing it out (since our share-lock
         :	                 * won't prevent hint-bit updates).  We will recheck the dirty bit
         :	                 * after re-locking the buffer header.
         :	                 */
         :	                if (oldFlags & BM_DIRTY)
    0.00 :	  675f98:       0f b7 db                movzwl %bx,%ebx
    0.00 :	  675f9b:       f6 c3 01                test   $0x1,%bl
    0.00 :	  675f9e:       0f 85 cc 00 00 00       jne    676070 <ReadBuffer_common+0x3d0>
         :
         :	                /*
         :	                 * To change the association of a valid buffer, we'll need to have
         :	                 * exclusive lock on both the old and new mapping partitions.
         :	                 */
         :	                if (oldFlags & BM_TAG_VALID)
    0.00 :	  675fa4:       83 e3 04                and    $0x4,%ebx
    0.00 :	  675fa7:       74 2c                   je     675fd5 <ReadBuffer_common+0x335>
         :	                {
         :	                        /* Save old tag. */
         :	                        oldTag = buf->tag;
    0.00 :	  675fa9:       49 8b 06                mov    (%r14),%rax
    0.00 :	  675fac:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  675fb0:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  675fb4:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  675fb8:       41 8b 46 10             mov    0x10(%r14),%eax
    0.00 :	  675fbc:       89 45 a0                mov    %eax,-0x60(%rbp)
    0.00 :	  675fbf:       eb 14                   jmp    675fd5 <ReadBuffer_common+0x335>
    0.00 :	  675fc1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
         :	                        valid = PinBuffer(foundbuf, strategy);
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                        {
         :	                                UnpinBuffer(foundbuf, true);
    0.00 :	  675fc8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675fcd:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675fd0:       e8 5b ed ff ff          callq  674d30 <UnpinBuffer>
         :	                 * allocated another buffer for the same block we want to read in.
         :	                 * Note that we have not yet removed the hashtable entry for the old
         :	                 * tag.
         :	                 */
         :	enter:
         :	                buf_id = BufTableInsert(&newTag, buf->buf_id);
    0.00 :	  675fd5:       41 8b 76 24             mov    0x24(%r14),%esi
    0.00 :	  675fd9:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675fdd:       e8 be dd ff ff          callq  673da0 <BufTableInsert>
         :
         :	                if (buf_id >= 0)
    0.00 :	  675fe2:       85 c0                   test   %eax,%eax
    0.00 :	  675fe4:       0f 88 4e ff ff ff       js     675f38 <ReadBuffer_common+0x298>
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675fea:       48 63 d8                movslq %eax,%rbx
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675fed:       4c 89 fe                mov    %r15,%rsi
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675ff0:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675ff4:       48 03 1d 05 9b 54 00    add    0x549b05(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675ffb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675ffe:       49 89 dc                mov    %rbx,%r12
    0.00 :	  676001:       e8 2a ec ff ff          callq  674c30 <PinBuffer>
    0.00 :	  676006:       41 89 c5                mov    %eax,%r13d
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  676009:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  67600c:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  67600f:       75 b7                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676011:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  676014:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  676017:       75 af                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676019:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  67601c:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  67601e:       75 a8                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676020:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676023:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  676026:       75 a0                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676028:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  67602b:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  67602e:       75 98                   jne    675fc8 <ReadBuffer_common+0x328>
         :
         :	                        /*
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
    0.00 :	  676030:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676035:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676038:       e8 f3 ec ff ff          callq  674d30 <UnpinBuffer>
         :
         :	                        *foundPtr = TRUE;
         :
         :	                        if (!valid)
    0.00 :	  67603d:       45 84 ed                test   %r13b,%r13b
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
         :
         :	                        *foundPtr = TRUE;
    0.00 :	  676040:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                        if (!valid)
    0.00 :	  676044:       0f 85 cd fd ff ff       jne    675e17 <ReadBuffer_common+0x177>
         :	                                 * in the page, or (b) a previous read attempt failed.  We
         :	                                 * have to wait for any active read attempt to finish, and
         :	                                 * then set up our own read attempt if the page is still not
         :	                                 * BM_VALID.  StartBufferIO does it all.
         :	                                 */
         :	                                if (StartBufferIO(foundbuf, true))
    0.00 :	  67604a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67604f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  676052:       e8 e9 e3 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  676057:       84 c0                   test   %al,%al
    0.00 :	  676059:       0f 84 b8 fd ff ff       je     675e17 <ReadBuffer_common+0x177>
         :	                                {
         :	                                        /*
         :	                                         * If we get here, previous attempts to read the buffer
         :	                                         * must have failed ... but we shall bravely try again.
         :	                                         */
         :	                                        *foundPtr = FALSE;
    0.00 :	  67605f:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
    0.00 :	  676063:       e9 af fd ff ff          jmpq   675e17 <ReadBuffer_common+0x177>
    0.00 :	  676068:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67606f:       00 
         :	                         * (This has been observed to happen when two backends are both
         :	                         * trying to split btree index pages, and the second one just
         :	                         * happens to be trying to split the page the first one got from
         :	                         * StrategyGetBuffer.)
         :	                         */
         :	                        if (LWLockConditionalAcquire(buf->content_lock, LW_SHARED))
    0.00 :	  676070:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  676074:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676079:       e8 22 8f 01 00          callq  68efa0 <LWLockConditionalAcquire>
    0.00 :	  67607e:       84 c0                   test   %al,%al
    0.00 :	  676080:       0f 84 ee fe ff ff       je     675f74 <ReadBuffer_common+0x2d4>
         :	                                 * would require a WAL flush, let the strategy decide whether
         :	                                 * to go ahead and write/reuse the buffer or to choose another
         :	                                 * victim.  We need lock to inspect the page LSN, so this
         :	                                 * can't be done inside StrategyGetBuffer.
         :	                                 */
         :	                                if (strategy != NULL)
    0.00 :	  676086:       4d 85 ff                test   %r15,%r15
    0.00 :	  676089:       74 4c                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  67608b:       49 8d 7e 20             lea    0x20(%r14),%rdi
    0.00 :	  67608f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  676094:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  676097:       84 c0                   test   %al,%al
    0.00 :	  676099:       0f 85 92 00 00 00       jne    676131 <ReadBuffer_common+0x491>
         :	                                        lsn = BufferGetLSN(buf);
    0.00 :	  67609f:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6760a3:       41 8b 56 24             mov    0x24(%r14),%edx
    0.00 :	  6760a7:       48 8b 0d 4a 9a 54 00    mov    0x549a4a(%rip),%rcx        # bbfaf8 <BufferBlocks>
    0.00 :	  6760ae:       48 98                   cltq   
    0.00 :	  6760b0:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6760b3:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  6760b7:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  6760bb:       8b 3c 01                mov    (%rcx,%rax,1),%edi
    0.00 :	  6760be:       8b 44 11 04             mov    0x4(%rcx,%rdx,1),%eax
    0.00 :	  6760c2:       48 c1 e7 20             shl    $0x20,%rdi
    0.00 :	  6760c6:       48 09 c7                or     %rax,%rdi
         :	                                        UnlockBufHdr(buf);
    0.00 :	  6760c9:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  6760ce:       e8 dd dc e5 ff          callq  4d3db0 <XLogNeedsFlush>
    0.00 :	  6760d3:       84 c0                   test   %al,%al
    0.00 :	  6760d5:       75 30                   jne    676107 <ReadBuffer_common+0x467>
         :	                                TRACE_POSTGRESQL_BUFFER_WRITE_DIRTY_START(forkNum, blockNum,
         :	                                                                                           smgr->smgr_rnode.node.spcNode,
         :	                                                                                                smgr->smgr_rnode.node.dbNode,
         :	                                                                                          smgr->smgr_rnode.node.relNode);
         :
         :	                                FlushBuffer(buf, NULL);
    0.00 :	  6760d7:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6760da:       31 f6                   xor    %esi,%esi
    0.00 :	  6760dc:       e8 6f ee ff ff          callq  674f50 <FlushBuffer>
         :	                                LWLockRelease(buf->content_lock);
    0.00 :	  6760e1:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  6760e5:       e8 b6 92 01 00          callq  68f3a0 <LWLockRelease>
    0.00 :	  6760ea:       e9 b5 fe ff ff          jmpq   675fa4 <ReadBuffer_common+0x304>
    0.00 :	  6760ef:       90                      nop
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6760f0:       ba 0f 04 00 00          mov    $0x40f,%edx
    0.00 :	  6760f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6760fa:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6760fd:       e8 3e 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676102:       e9 45 fe ff ff          jmpq   675f4c <ReadBuffer_common+0x2ac>
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
         :	                                        lsn = BufferGetLSN(buf);
         :	                                        UnlockBufHdr(buf);
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  676107:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  67610a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  67610d:       e8 0e 11 00 00          callq  677220 <StrategyRejectBuffer>
    0.00 :	  676112:       84 c0                   test   %al,%al
    0.00 :	  676114:       74 c1                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                                StrategyRejectBuffer(strategy, buf))
         :	                                        {
         :	                                                /* Drop lock/pin and loop around for another buffer */
         :	                                                LWLockRelease(buf->content_lock);
    0.00 :	  676116:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  67611a:       e8 81 92 01 00          callq  68f3a0 <LWLockRelease>
         :	                                                UnpinBuffer(buf, true);
    0.00 :	  67611f:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676124:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676127:       e8 04 ec ff ff          callq  674d30 <UnpinBuffer>
    0.00 :	  67612c:       e9 50 fe ff ff          jmpq   675f81 <ReadBuffer_common+0x2e1>
         :	                                if (strategy != NULL)
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  676131:       ba a0 03 00 00          mov    $0x3a0,%edx
    0.00 :	  676136:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67613b:       e8 00 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676140:       e9 5a ff ff ff          jmpq   67609f <ReadBuffer_common+0x3ff>
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
         :	                if (found)
         :	                        pgBufferUsage.local_blks_hit++;
    0.00 :	  676145:       48 83 05 33 96 54 00    addq   $0x1,0x549633(%rip)        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  67614c:       01 
    0.00 :	  67614d:       e9 e0 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * Clearing BM_VALID here is necessary, clearing the dirtybits is just
         :	         * paranoia.  We also reset the usage_count since any recency of use of
         :	         * the old content is no longer relevant.  (The usage_count starts out at
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
    0.00 :	  676152:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676156:       49 89 06                mov    %rax,(%r14)
    0.00 :	  676159:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  67615d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	  676161:       8b 45 c0                mov    -0x40(%rbp),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1064
   33.33 :	  676164:       41 89 46 10             mov    %eax,0x10(%r14)
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
    0.00 :	  676168:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  67616d:       66 25 4c fe             and    $0xfe4c,%ax
    0.00 :	  676171:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
    0.00 :	  676176:       80 bd 7f ff ff ff 70    cmpb   $0x70,-0x81(%rbp)
    0.00 :	  67617d:       0f 84 73 02 00 00       je     6763f6 <ReadBuffer_common+0x756>
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
    0.00 :	  676183:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676188:       83 c8 04                or     $0x4,%eax
    0.00 :	  67618b:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        buf->usage_count = 1;
    0.00 :	  676190:       66 41 c7 46 16 01 00    movw   $0x1,0x16(%r14)
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  676197:       83 e2 04                and    $0x4,%edx
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67619a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  67619f:       0f 85 64 02 00 00       jne    676409 <ReadBuffer_common+0x769>
         :	        /*
         :	         * Buffer contents are currently invalid.  Try to get the io_in_progress
         :	         * lock.  If StartBufferIO returns false, then someone else managed to
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
    0.00 :	  6761a5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6761aa:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6761ad:       e8 8e e2 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6761b2:       84 c0                   test   %al,%al
    0.00 :	  6761b4:       0f 84 d5 00 00 00       je     67628f <ReadBuffer_common+0x5ef>
         :	                *foundPtr = FALSE;
    0.00 :	  6761ba:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
         :	                        pgBufferUsage.shared_blks_hit++;
         :	                else
         :	                        pgBufferUsage.shared_blks_read++;
    0.00 :	  6761be:       48 83 05 a2 95 54 00    addq   $0x1,0x5495a2(%rip)        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  6761c5:       01 
    0.00 :	  6761c6:       e9 67 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6761cb:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6761cf:       4c 63 e0                movslq %eax,%r12
    0.00 :	  6761d2:       49 c1 e4 0d             shl    $0xd,%r12
    0.00 :	  6761d6:       4c 03 25 1b 99 54 00    add    0x54991b(%rip),%r12        # bbfaf8 <BufferBlocks>
         :
         :	        if (isExtend)
    0.00 :	  6761dd:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  6761e1:       0f 84 7c fc ff ff       je     675e63 <ReadBuffer_common+0x1c3>
         :	        {
         :	                /* new buffers are zero-filled */
         :	                MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  6761e7:       31 c0                   xor    %eax,%eax
    0.00 :	  6761e9:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  6761ee:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6761f1:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                /* don't set checksum for all-zero page */
         :	                smgrextend(smgr, forkNum, blockNum, (char *) bufBlock, false);
    0.00 :	  6761f4:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6761f7:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  6761fa:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  676200:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676206:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  67620a:       e8 c1 31 02 00          callq  6993d0 <smgrextend>
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  67620f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676213:       0f 85 e8 fc ff ff       jne    675f01 <ReadBuffer_common+0x261>
         :	                bufHdr->flags |= BM_VALID;
         :	        }
         :	        else
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
    0.00 :	  676219:       ba 02 00 00 00          mov    $0x2,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:773
   33.33 :	  67621e:       31 f6                   xor    %esi,%esi
    0.00 :	  676220:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676223:       e8 a8 df ff ff          callq  6741d0 <TerminateBufferIO>
    0.00 :	  676228:       e9 e1 fc ff ff          jmpq   675f0e <ReadBuffer_common+0x26e>
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
    0.00 :	  67622d:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676233:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  676237:       e8 14 32 02 00          callq  699450 <smgrnblocks>
    0.00 :	  67623c:       89 85 74 ff ff ff       mov    %eax,-0x8c(%rbp)
    0.00 :	  676242:       e9 b7 fa ff ff          jmpq   675cfe <ReadBuffer_common+0x5e>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  676247:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  67624b:       0f 85 8c 00 00 00       jne    6762dd <ReadBuffer_common+0x63d>
    0.00 :	  676251:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  676255:       48 98                   cltq   
    0.00 :	  676257:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  67625b:       48 03 05 96 98 54 00    add    0x549896(%rip),%rax        # bbfaf8 <BufferBlocks>
         :	                if (!PageIsNew((Page) bufBlock))
    0.00 :	  676262:       66 83 78 0e 00          cmpw   $0x0,0xe(%rax)
    0.00 :	  676267:       0f 85 19 02 00 00       jne    676486 <ReadBuffer_common+0x7e6>
         :	                 * We *must* do smgrextend before succeeding, else the page will not
         :	                 * be reserved by the kernel, and the next P_NEW call will decide to
         :	                 * return the same page.  Clear the BM_VALID bit, do the StartBufferIO
         :	                 * call that BufferAlloc didn't, and proceed.
         :	                 */
         :	                if (isLocalBuf)
    0.00 :	  67626d:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676271:       49 8d 5e 20             lea    0x20(%r14),%rbx
    0.00 :	  676275:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67627b:       74 54                   je     6762d1 <ReadBuffer_common+0x631>
         :	                {
         :	                        /* Only need to adjust flags */
         :	                        Assert(bufHdr->flags & BM_VALID);
         :	                        bufHdr->flags &= ~BM_VALID;
    0.00 :	  67627d:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676282:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  676285:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  67628a:       e9 b1 fb ff ff          jmpq   675e40 <ReadBuffer_common+0x1a0>
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
         :	                *foundPtr = FALSE;
         :	        else
         :	                *foundPtr = TRUE;
    0.00 :	  67628f:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
    0.00 :	  676293:       e9 8c fb ff ff          jmpq   675e24 <ReadBuffer_common+0x184>
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  676298:       ba ae 02 00 00          mov    $0x2ae,%edx
    0.00 :	  67629d:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6762a2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6762a5:       e8 96 9d 01 00          callq  690040 <s_lock>
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
    0.00 :	  6762aa:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6762af:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  6762b2:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	                                UnlockBufHdr(bufHdr);
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762b7:       be 01 00 00 00          mov    $0x1,%esi
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
         :	                                UnlockBufHdr(bufHdr);
    0.00 :	  6762bc:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762c1:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6762c4:       e8 77 e1 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6762c9:       84 c0                   test   %al,%al
    0.00 :	  6762cb:       0f 85 fa fe ff ff       jne    6761cb <ReadBuffer_common+0x52b>
    0.00 :	  6762d1:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6762d4:       f0 86 03                lock xchg %al,(%rbx)
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  6762d7:       84 c0                   test   %al,%al
    0.00 :	  6762d9:       74 cf                   je     6762aa <ReadBuffer_common+0x60a>
    0.00 :	  6762db:       eb bb                   jmp    676298 <ReadBuffer_common+0x5f8>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6762dd:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6762e1:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  6762e6:       29 c2                   sub    %eax,%edx
    0.00 :	  6762e8:       48 8b 05 29 6e 50 00    mov    0x506e29(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  6762ef:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6762f2:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  6762f6:       e9 67 ff ff ff          jmpq   676262 <ReadBuffer_common+0x5c2>
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  6762fb:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6762ff:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676306:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676309:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  67630c:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67630f:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  676312:       8b 30                   mov    (%rax),%esi
    0.00 :	  676314:       e8 b7 82 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676319:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67631f:       48 89 c2                mov    %rax,%rdx
    0.00 :	  676322:       bf c8 9e 8a 00          mov    $0x8a9ec8,%edi
    0.00 :	  676327:       31 c0                   xor    %eax,%eax
    0.00 :	  676329:       e8 72 65 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67632e:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  676333:       89 c3                   mov    %eax,%ebx
    0.00 :	  676335:       e8 16 6a 10 00          callq  77cd50 <errcode>
    0.00 :	  67633a:       89 de                   mov    %ebx,%esi
    0.00 :	  67633c:       89 c7                   mov    %eax,%edi
    0.00 :	  67633e:       31 c0                   xor    %eax,%eax
    0.00 :	  676340:       e8 9b 42 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676345:       e9 a0 fb ff ff          jmpq   675eea <ReadBuffer_common+0x24a>
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
         :	                                INSTR_TIME_SET_CURRENT(io_start);
    0.00 :	  67634a:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67634e:       31 f6                   xor    %esi,%esi
    0.00 :	  676350:       e8 6b 32 df ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  676355:       e9 1f fb ff ff          jmpq   675e79 <ReadBuffer_common+0x1d9>
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
    0.00 :	  67635a:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  67635e:       31 f6                   xor    %esi,%esi
    0.00 :	  676360:       e8 5b 32 df ff          callq  4695c0 <gettimeofday@plt>
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676365:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  676369:       48 2b 55 98             sub    -0x68(%rbp),%rdx
    0.00 :	  67636d:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676371:       48 2b 45 90             sub    -0x70(%rbp),%rax
    0.00 :	  676375:       48 85 d2                test   %rdx,%rdx
    0.00 :	  676378:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67637c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  67637f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676383:       79 18                   jns    67639d <ReadBuffer_common+0x6fd>
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  676385:       48 83 e8 01             sub    $0x1,%rax
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676389:       48 81 c2 40 42 0f 00    add    $0xf4240,%rdx
    0.00 :	  676390:       78 f3                   js     676385 <ReadBuffer_common+0x6e5>
    0.00 :	  676392:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676396:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67639a:       48 89 c1                mov    %rax,%rcx
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  67639d:       48 69 c1 40 42 0f 00    imul   $0xf4240,%rcx,%rax
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763a4:       48 01 0d 05 94 54 00    add    %rcx,0x549405(%rip)        # bbf7b0 <pgBufferUsage+0x50>
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  6763ab:       48 8d 04 02             lea    (%rdx,%rax,1),%rax
    0.00 :	  6763af:       48 01 05 0a 58 50 00    add    %rax,0x50580a(%rip)        # b7bbc0 <pgStatBlockReadTime>
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763b6:       48 8b 05 fb 93 54 00    mov    0x5493fb(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763bd:       48 03 45 b8             add    -0x48(%rbp),%rax
    0.00 :	  6763c1:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763c7:       48 89 05 ea 93 54 00    mov    %rax,0x5493ea(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ce:       0f 8e ca fa ff ff       jle    675e9e <ReadBuffer_common+0x1fe>
    0.00 :	  6763d4:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  6763da:       48 83 05 ce 93 54 00    addq   $0x1,0x5493ce(%rip)        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  6763e1:       01 
    0.00 :	  6763e2:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763e8:       48 89 05 c9 93 54 00    mov    %rax,0x5493c9(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ef:       7f e3                   jg     6763d4 <ReadBuffer_common+0x734>
    0.00 :	  6763f1:       e9 a8 fa ff ff          jmpq   675e9e <ReadBuffer_common+0x1fe>
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
    0.00 :	  6763f6:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6763fb:       66 0d 04 01             or     $0x104,%ax
    0.00 :	  6763ff:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  676404:       e9 87 fd ff ff          jmpq   676190 <ReadBuffer_common+0x4f0>
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
         :	                BufTableDelete(&oldTag);
    0.00 :	  676409:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67640d:       e8 3e d9 ff ff          callq  673d50 <BufTableDelete>
    0.00 :	  676412:       e9 8e fd ff ff          jmpq   6761a5 <ReadBuffer_common+0x505>
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
         :	                                }
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  676417:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  67641a:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67641f:       ba f8 02 00 00          mov    $0x2f8,%edx
    0.00 :	  676424:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676429:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67642e:       e8 8d 46 10 00          callq  77aac0 <errstart>
    0.00 :	  676433:       84 c0                   test   %al,%al
    0.00 :	  676435:       74 4a                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  676437:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  67643b:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676442:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676445:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  676448:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67644b:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  67644e:       8b 30                   mov    (%rax),%esi
    0.00 :	  676450:       e8 7b 81 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676455:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67645b:       48 89 c2                mov    %rax,%rdx
    0.00 :	  67645e:       bf 48 28 88 00          mov    $0x882848,%edi
    0.00 :	  676463:       31 c0                   xor    %eax,%eax
    0.00 :	  676465:       e8 36 64 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67646a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  67646f:       89 c3                   mov    %eax,%ebx
    0.00 :	  676471:       e8 da 68 10 00          callq  77cd50 <errcode>
    0.00 :	  676476:       89 de                   mov    %ebx,%esi
    0.00 :	  676478:       89 c7                   mov    %eax,%edi
    0.00 :	  67647a:       31 c0                   xor    %eax,%eax
    0.00 :	  67647c:       e8 5f 41 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676481:       e8 4a 30 df ff          callq  4694d0 <abort@plt>
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
         :	                if (!PageIsNew((Page) bufBlock))
         :	                        ereport(ERROR,
    0.00 :	  676486:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676489:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67648e:       ba 97 02 00 00          mov    $0x297,%edx
    0.00 :	  676493:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676498:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67649d:       e8 1e 46 10 00          callq  77aac0 <errstart>
    0.00 :	  6764a2:       84 c0                   test   %al,%al
    0.00 :	  6764a4:       74 db                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  6764a6:       bf 40 9e 8a 00          mov    $0x8a9e40,%edi
    0.00 :	  6764ab:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ad:       e8 ee 57 10 00          callq  77bca0 <errhint>
    0.00 :	  6764b2:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6764b6:       89 c3                   mov    %eax,%ebx
    0.00 :	  6764b8:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  6764bf:       48 89 d0                mov    %rdx,%rax
    0.00 :	  6764c2:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  6764c5:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  6764c8:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  6764cb:       8b 30                   mov    (%rax),%esi
    0.00 :	  6764cd:       e8 fe 80 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  6764d2:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  6764d8:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6764db:       bf 90 9e 8a 00          mov    $0x8a9e90,%edi
    0.00 :	  6764e0:       31 c0                   xor    %eax,%eax
    0.00 :	  6764e2:       e8 b9 63 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6764e7:       89 de                   mov    %ebx,%esi
    0.00 :	  6764e9:       89 c7                   mov    %eax,%edi
    0.00 :	  6764eb:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ed:       e8 ee 40 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6764f2:       eb 8d                   jmp    676481 <ReadBuffer_common+0x7e1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1587
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068f3a0 <LWLockRelease>:
         :	/*
         :	 * LWLockRelease - release a previously acquired lock
         :	 */
         :	void
         :	LWLockRelease(LWLock *lock)
         :	{
    0.00 :	  68f3a0:       55                      push   %rbp
    0.00 :	  68f3a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68f3a4:       41 55                   push   %r13
    0.00 :	  68f3a6:       41 54                   push   %r12
    0.00 :	  68f3a8:       49 89 fc                mov    %rdi,%r12
    0.00 :	  68f3ab:       53                      push   %rbx
    0.00 :	  68f3ac:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f3b0:       8b 35 52 e6 4e 00       mov    0x4ee652(%rip),%esi        # b7da08 <num_held_lwlocks>
    0.00 :	  68f3b6:       89 f0                   mov    %esi,%eax
    0.00 :	  68f3b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68f3bf:       00 
    0.00 :	  68f3c0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f3c3:       0f 88 1f 02 00 00       js     68f5e8 <LWLockRelease+0x248>
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
    0.00 :	  68f3c9:       48 63 d0                movslq %eax,%rdx
    0.00 :	  68f3cc:       41 b9 40 da b7 00       mov    $0xb7da40,%r9d
    0.00 :	  68f3d2:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f3d5:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f3d9:       48 8b 99 40 da b7 00    mov    0xb7da40(%rcx),%rbx
    0.00 :	  68f3e0:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	  68f3e3:       75 db                   jne    68f3c0 <LWLockRelease+0x20>
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3e5:       44 8d 46 ff             lea    -0x1(%rsi),%r8d
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
         :	                {
         :	                        mode = held_lwlocks[i].mode;
    0.00 :	  68f3e9:       44 8b 91 48 da b7 00    mov    0xb7da48(%rcx),%r10d
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3f0:       41 39 c0                cmp    %eax,%r8d
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3f3:       44 89 05 0e e6 4e 00    mov    %r8d,0x4ee60e(%rip)        # b7da08 <num_held_lwlocks>
         :	        for (; i < num_held_lwlocks; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1587
   33.33 :	  68f3fa:       7f 09                   jg     68f405 <LWLockRelease+0x65>
    0.00 :	  68f3fc:       eb 3a                   jmp    68f438 <LWLockRelease+0x98>
    0.00 :	  68f3fe:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f400:       89 f0                   mov    %esi,%eax
    0.00 :	  68f402:       48 89 fa                mov    %rdi,%rdx
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f405:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  68f408:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f40b:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f40f:       48 63 fe                movslq %esi,%rdi
    0.00 :	  68f412:       48 89 fa                mov    %rdi,%rdx
    0.00 :	  68f415:       48 c1 e2 04             shl    $0x4,%rdx
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f419:       41 39 f0                cmp    %esi,%r8d
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f41c:       48 8b 82 40 da b7 00    mov    0xb7da40(%rdx),%rax
    0.00 :	  68f423:       48 89 81 40 da b7 00    mov    %rax,0xb7da40(%rcx)
    0.00 :	  68f42a:       48 8b 82 48 da b7 00    mov    0xb7da48(%rdx),%rax
    0.00 :	  68f431:       49 89 44 09 08          mov    %rax,0x8(%r9,%rcx,1)
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f436:       7f c8                   jg     68f400 <LWLockRelease+0x60>
         :
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68f438:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f43b:       0f 84 77 01 00 00       je     68f5b8 <LWLockRelease+0x218>
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
         :	        else
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, 1);
    0.00 :	  68f441:       49 8d 54 24 04          lea    0x4(%r12),%rdx
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68f446:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68f44b:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   33.33 :	  68f44f:       8d 50 ff                lea    -0x1(%rax),%edx
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68f452:       8b 43 08                mov    0x8(%rbx),%eax
         :	        /*
         :	         * Anybody we need to wakeup needs to have started queueing before we
         :	         * removed ourselves from the queue and the atomic operations above are
         :	         * full barriers. So we can just do plain read.
         :	         */
         :	        if (pg_atomic_read_u32(&lock->nwaiters) > 0)
    0.00 :	  68f455:       85 c0                   test   %eax,%eax
    0.00 :	  68f457:       0f 84 3a 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	        /*
         :	         * If we just released an exclusive lock always wakeup waiters, even if
         :	         * lockcount is still > 0. A shared acquisition temporarily (and
         :	         * spuriously) might have increased the value.
         :	         */
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
    0.00 :	  68f45d:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f460:       0f 85 fc 01 00 00       jne    68f662 <LWLockRelease+0x2c2>
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f466:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  68f46a:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f46e:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
         :	        /*
         :	         * We're still waiting for backends to get scheduled, don't wake them up
         :	         * again.
         :	         */
         :	        pg_read_barrier(); /* pairs with nwaiters-- */
         :	        if (!BOOL_ACCESS_ONCE(lock->releaseOK))
    0.00 :	  68f472:       0f b6 43 01             movzbl 0x1(%rbx),%eax
    0.00 :	  68f476:       84 c0                   test   %al,%al
    0.00 :	  68f478:       0f 84 19 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  68f47e:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68f483:       f0 86 03                lock xchg %al,(%rbx)
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f486:       84 c0                   test   %al,%al
    0.00 :	  68f488:       0f 85 b2 01 00 00       jne    68f640 <LWLockRelease+0x2a0>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f48e:       48 8b 53 18             mov    0x18(%rbx),%rdx
    0.00 :	  68f492:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68f495:       0f 84 bc 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f49b:       4d 8d 4c 24 10          lea    0x10(%r12),%r9
    0.00 :	  68f4a0:       48 8b 72 08             mov    0x8(%rdx),%rsi
    0.00 :	  68f4a4:       49 39 d1                cmp    %rdx,%r9
    0.00 :	  68f4a7:       0f 84 aa 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f4ad:       31 ff                   xor    %edi,%edi
    0.00 :	  68f4af:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f4b5:       eb 23                   jmp    68f4da <LWLockRelease+0x13a>
    0.00 :	  68f4b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  68f4be:       00 00 
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4c0:       80 7a fa 00             cmpb   $0x0,-0x6(%rdx)
    0.00 :	  68f4c4:       75 1d                   jne    68f4e3 <LWLockRelease+0x143>
    0.00 :	  68f4c6:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f4cb:       49 39 f1                cmp    %rsi,%r9
    0.00 :	  68f4ce:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f4d2:       74 6a                   je     68f53e <LWLockRelease+0x19e>
    0.00 :	  68f4d4:       48 89 f2                mov    %rsi,%rdx
    0.00 :	  68f4d7:       48 89 c6                mov    %rax,%rsi
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4da:       40 84 ff                test   %dil,%dil
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f4dd:       48 8d 4a b8             lea    -0x48(%rdx),%rcx
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4e1:       75 dd                   jne    68f4c0 <LWLockRelease+0x120>
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f4e3:       48 8b 51 48             mov    0x48(%rcx),%rdx
    0.00 :	  68f4e7:       48 8b 41 50             mov    0x50(%rcx),%rax
    0.00 :	  68f4eb:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f4ef:       48 8b 51 50             mov    0x50(%rcx),%rdx
    0.00 :	  68f4f3:       48 8b 41 48             mov    0x48(%rcx),%rax
    0.00 :	  68f4f7:       48 89 02                mov    %rax,(%rdx)
         :	 * Insert a node at the end of the list.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_push_tail(dlist_head *head, dlist_node *node)
         :	{
         :	        if (head->head.next == NULL)    /* convert NULL header to circular */
    0.00 :	  68f4fa:       48 83 7d d8 00          cmpq   $0x0,-0x28(%rbp)
         :	                        continue;
         :
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                dlist_push_tail(&wakeup, &waiter->lwWaitLink);
    0.00 :	  68f4ff:       48 8d 51 48             lea    0x48(%rcx),%rdx
    0.00 :	  68f503:       0f 84 cf 00 00 00       je     68f5d8 <LWLockRelease+0x238>
         :	                dlist_init(head);
         :
         :	        node->next = &head->head;
    0.00 :	  68f509:       4c 89 69 50             mov    %r13,0x50(%rcx)
         :	        node->prev = head->head.prev;
    0.00 :	  68f50d:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68f511:       48 89 41 48             mov    %rax,0x48(%rcx)
         :	        node->prev->next = node;
    0.00 :	  68f515:       48 89 50 08             mov    %rdx,0x8(%rax)
         :	        head->head.prev = node;
    0.00 :	  68f519:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
         :
         :	                if (waiter->lwWaitMode != LW_WAIT_UNTIL_FREE)
    0.00 :	  68f51d:       0f b6 41 42             movzbl 0x42(%rcx),%eax
    0.00 :	  68f521:       3c 02                   cmp    $0x2,%al
    0.00 :	  68f523:       74 a6                   je     68f4cb <LWLockRelease+0x12b>
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f525:       84 c0                   test   %al,%al
    0.00 :	  68f527:       0f 84 0b 01 00 00       je     68f638 <LWLockRelease+0x298>
    0.00 :	  68f52d:       45 31 c0                xor    %r8d,%r8d
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f530:       49 39 f1                cmp    %rsi,%r9
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f533:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f538:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f53c:       75 96                   jne    68f4d4 <LWLockRelease+0x134>
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
         :	                        break;
         :	        }
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
    0.00 :	  68f53e:       44 88 43 01             mov    %r8b,0x1(%rbx)
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f542:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
         :
         :	        /* We are done updating shared state of the lock queue. */
         :	        SpinLockRelease(&lock->mutex);
    0.00 :	  68f546:       41 c6 04 24 00          movb   $0x0,(%r12)
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f54b:       48 85 c9                test   %rcx,%rcx
    0.00 :	  68f54e:       74 47                   je     68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f550:       4c 39 e9                cmp    %r13,%rcx
    0.00 :	  68f553:       48 8b 59 08             mov    0x8(%rcx),%rbx
    0.00 :	  68f557:       75 0d                   jne    68f566 <LWLockRelease+0x1c6>
    0.00 :	  68f559:       eb 3c                   jmp    68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f55b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  68f560:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  68f563:       48 89 c3                mov    %rax,%rbx
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f566:       48 8d 79 b8             lea    -0x48(%rcx),%rdi
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f56a:       48 8b 57 48             mov    0x48(%rdi),%rdx
    0.00 :	  68f56e:       48 8b 47 50             mov    0x50(%rdi),%rax
    0.00 :	  68f572:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f576:       48 8b 57 50             mov    0x50(%rdi),%rdx
    0.00 :	  68f57a:       48 8b 47 48             mov    0x48(%rdi),%rax
    0.00 :	  68f57e:       48 89 02                mov    %rax,(%rdx)
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f581:       48 83 c7 10             add    $0x10,%rdi
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
    0.00 :	  68f585:       c6 41 f9 00             movb   $0x0,-0x7(%rcx)
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f589:       e8 02 8b fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f58e:       4c 39 eb                cmp    %r13,%rbx
    0.00 :	  68f591:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  68f595:       75 c9                   jne    68f560 <LWLockRelease+0x1c0>
         :	        TRACE_POSTGRESQL_LWLOCK_RELEASE(T_NAME(lock), T_ID(lock));
         :
         :	        /*
         :	         * Now okay to allow cancel/die interrupts.
         :	         */
         :	        RESUME_INTERRUPTS();
    0.00 :	  68f597:       8b 05 fb aa 52 00       mov    0x52aafb(%rip),%eax        # bba098 <InterruptHoldoffCount>
    0.00 :	  68f59d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f5a0:       89 05 f2 aa 52 00       mov    %eax,0x52aaf2(%rip)        # bba098 <InterruptHoldoffCount>
         :	}
    0.00 :	  68f5a6:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68f5aa:       5b                      pop    %rbx
    0.00 :	  68f5ab:       41 5c                   pop    %r12
    0.00 :	  68f5ad:       41 5d                   pop    %r13
    0.00 :	  68f5af:       c9                      leaveq 
    0.00 :	  68f5b0:       c3                      retq   
    0.00 :	  68f5b1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
    0.00 :	  68f5b8:       49 8d 54 24 04          lea    0x4(%r12),%rdx
    0.00 :	  68f5bd:       b8 00 00 00 c0          mov    $0xc0000000,%eax
    0.00 :	  68f5c2:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
   33.33 :	  68f5c6:       8d 90 00 00 00 c0       lea    -0x40000000(%rax),%edx
    0.00 :	  68f5cc:       e9 81 fe ff ff          jmpq   68f452 <LWLockRelease+0xb2>
    0.00 :	  68f5d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f5d8:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f5dc:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
    0.00 :	  68f5e0:       e9 24 ff ff ff          jmpq   68f509 <LWLockRelease+0x169>
    0.00 :	  68f5e5:       0f 1f 00                nopl   (%rax)
         :	                        mode = held_lwlocks[i].mode;
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
    0.00 :	  68f5e8:       ba 10 d1 8a 00          mov    $0x8ad110,%edx
    0.00 :	  68f5ed:       be 31 06 00 00          mov    $0x631,%esi
    0.00 :	  68f5f2:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68f5f7:       e8 24 be 0e 00          callq  77b420 <elog_start>
    0.00 :	  68f5fc:       49 63 54 24 0c          movslq 0xc(%r12),%rdx
    0.00 :	  68f601:       48 8b 05 08 e4 4e 00    mov    0x4ee408(%rip),%rax        # b7da10 <LWLockTrancheArray>
    0.00 :	  68f608:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68f60d:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
    0.00 :	  68f611:       31 d2                   xor    %edx,%edx
    0.00 :	  68f613:       4c 2b 66 08             sub    0x8(%rsi),%r12
    0.00 :	  68f617:       4c 89 e0                mov    %r12,%rax
    0.00 :	  68f61a:       48 f7 76 10             divq   0x10(%rsi)
    0.00 :	  68f61e:       48 8b 16                mov    (%rsi),%rdx
    0.00 :	  68f621:       be bf d0 8a 00          mov    $0x8ad0bf,%esi
    0.00 :	  68f626:       89 c1                   mov    %eax,%ecx
    0.00 :	  68f628:       31 c0                   xor    %eax,%eax
    0.00 :	  68f62a:       e8 01 bc 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68f62f:       e8 9c 9e dd ff          callq  4694d0 <abort@plt>
    0.00 :	  68f634:       0f 1f 40 00             nopl   0x0(%rax)
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f638:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  68f63b:       e9 fe fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f640:       ba e1 02 00 00          mov    $0x2e1,%edx
    0.00 :	  68f645:       be 85 d0 8a 00          mov    $0x8ad085,%esi
    0.00 :	  68f64a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  68f64d:       e8 ee 09 00 00          callq  690040 <s_lock>
    0.00 :	  68f652:       e9 37 fe ff ff          jmpq   68f48e <LWLockRelease+0xee>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f657:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f65d:       e9 dc fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
         :	                check_waiters = true;
         :	        /*
         :	         * nobody has this locked anymore, potential exclusive lockers get a chance
         :	         */
         :	        else if (lockcount == 0 && have_waiters)
    0.00 :	  68f662:       85 d2                   test   %edx,%edx
    0.00 :	  68f664:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  68f668:       0f 84 f8 fd ff ff       je     68f466 <LWLockRelease+0xc6>
    0.00 :	  68f66e:       66 90                   xchg   %ax,%ax
    0.00 :	  68f670:       e9 22 ff ff ff          jmpq   68f597 <LWLockRelease+0x1f7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000697940 <mdopen>:
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697940:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   66.67 :	  697941:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  697944:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697948:       4c 63 ee                movslq %esi,%r13
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  69794b:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  69794f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  697953:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  697957:       49 89 fc                mov    %rdi,%r12
    0.00 :	  69795a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  69795e:       48 83 ec 30             sub    $0x30,%rsp
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697962:       4a 8b 5c ef 28          mov    0x28(%rdi,%r13,8),%rbx
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697967:       41 89 d7                mov    %edx,%r15d
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  69796a:       48 85 db                test   %rbx,%rbx
    0.00 :	  69796d:       74 21                   je     697990 <mdopen+0x50>
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  69796f:       48 89 d8                mov    %rbx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
   33.33 :	  697972:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  697976:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  69797a:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  69797e:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  697982:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  697986:       c9                      leaveq 
    0.00 :	  697987:       c3                      retq   
    0.00 :	  697988:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  69798f:       00 
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  697990:       8b 4f 0c                mov    0xc(%rdi),%ecx
    0.00 :	  697993:       8b 57 08                mov    0x8(%rdi),%edx
    0.00 :	  697996:       41 89 f0                mov    %esi,%r8d
    0.00 :	  697999:       8b 7f 04                mov    0x4(%rdi),%edi
    0.00 :	  69799c:       41 8b 34 24             mov    (%r12),%esi
    0.00 :	  6979a0:       e8 2b 6c 11 00          callq  7ae5d0 <GetRelationPath>
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979a5:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  6979aa:       be 02 00 00 00          mov    $0x2,%esi
    0.00 :	  6979af:       48 89 c7                mov    %rax,%rdi
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  6979b2:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979b6:       e8 45 25 fe ff          callq  679f00 <PathNameOpenFile>
         :
         :	        if (fd < 0)
    0.00 :	  6979bb:       85 c0                   test   %eax,%eax
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979bd:       41 89 c6                mov    %eax,%r14d
         :
         :	        if (fd < 0)
    0.00 :	  6979c0:       78 3e                   js     697a00 <mdopen+0xc0>
         :	                                        (errcode_for_file_access(),
         :	                                         errmsg("could not open file \"%s\": %m", path)));
         :	                }
         :	        }
         :
         :	        pfree(path);
    0.00 :	  6979c2:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  6979c6:       e8 b5 11 10 00          callq  798b80 <pfree>
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979cb:       48 8b 3d de 6d 4e 00    mov    0x4e6dde(%rip),%rdi        # b7e7b0 <MdCxt>
    0.00 :	  6979d2:       be 10 00 00 00          mov    $0x10,%esi
    0.00 :	  6979d7:       e8 b4 14 10 00          callq  798e90 <MemoryContextAlloc>
         :	                }
         :	        }
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
    0.00 :	  6979dc:       4b 89 44 ec 28          mov    %rax,0x28(%r12,%r13,8)
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979e1:       48 89 c3                mov    %rax,%rbx
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
         :
         :	        mdfd->mdfd_vfd = fd;
    0.00 :	  6979e4:       44 89 30                mov    %r14d,(%rax)
         :	        mdfd->mdfd_segno = 0;
    0.00 :	  6979e7:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%rax)
         :	        mdfd->mdfd_chain = NULL;
    0.00 :	  6979ee:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  6979f5:       00 
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  6979f6:       e9 74 ff ff ff          jmpq   69796f <mdopen+0x2f>
    0.00 :	  6979fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * During bootstrap, there are cases where a system relation will be
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
    0.00 :	  697a00:       8b 05 36 11 4d 00       mov    0x4d1136(%rip),%eax        # b68b3c <Mode>
    0.00 :	  697a06:       85 c0                   test   %eax,%eax
    0.00 :	  697a08:       74 36                   je     697a40 <mdopen+0x100>
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
    0.00 :	  697a0a:       41 83 ef 01             sub    $0x1,%r15d
    0.00 :	  697a0e:       75 0a                   jne    697a1a <mdopen+0xda>
    0.00 :	  697a10:       e8 ab 22 dd ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  697a15:       83 38 02                cmpl   $0x2,(%rax)
    0.00 :	  697a18:       74 6a                   je     697a84 <mdopen+0x144>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a1a:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  697a1d:       b9 7f e3 8a 00          mov    $0x8ae37f,%ecx
    0.00 :	  697a22:       ba 5b 02 00 00          mov    $0x25b,%edx
    0.00 :	  697a27:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  697a2c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  697a31:       e8 8a 30 0e 00          callq  77aac0 <errstart>
    0.00 :	  697a36:       84 c0                   test   %al,%al
    0.00 :	  697a38:       75 26                   jne    697a60 <mdopen+0x120>
    0.00 :	  697a3a:       e8 91 1a dd ff          callq  4694d0 <abort@plt>
    0.00 :	  697a3f:       90                      nop
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a40:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a44:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  697a49:       be c2 00 00 00          mov    $0xc2,%esi
    0.00 :	  697a4e:       e8 ad 24 fe ff          callq  679f00 <PathNameOpenFile>
         :	                if (fd < 0)
    0.00 :	  697a53:       85 c0                   test   %eax,%eax
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a55:       41 89 c6                mov    %eax,%r14d
         :	                if (fd < 0)
    0.00 :	  697a58:       0f 89 64 ff ff ff       jns    6979c2 <mdopen+0x82>
    0.00 :	  697a5e:       eb aa                   jmp    697a0a <mdopen+0xca>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a60:       48 8b 75 d0             mov    -0x30(%rbp),%rsi
    0.00 :	  697a64:       bf 53 31 7b 00          mov    $0x7b3153,%edi
    0.00 :	  697a69:       31 c0                   xor    %eax,%eax
    0.00 :	  697a6b:       e8 30 4e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  697a70:       89 c3                   mov    %eax,%ebx
    0.00 :	  697a72:       e8 79 50 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  697a77:       89 de                   mov    %ebx,%esi
    0.00 :	  697a79:       89 c7                   mov    %eax,%edi
    0.00 :	  697a7b:       31 c0                   xor    %eax,%eax
    0.00 :	  697a7d:       e8 5e 2b 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  697a82:       eb b6                   jmp    697a3a <mdopen+0xfa>
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
    0.00 :	  697a84:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a88:       e8 f3 10 10 00          callq  798b80 <pfree>
    0.00 :	  697a8d:       0f 1f 00                nopl   (%rax)
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  697a90:       e9 da fe ff ff          jmpq   69796f <mdopen+0x2f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:731
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:690
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000698c00 <mdread>:
         :	 *      mdread() -- Read the specified block from a relation.
         :	 */
         :	void
         :	mdread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	           char *buffer)
         :	{
    0.00 :	  698c00:       55                      push   %rbp
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c01:       45 31 c0                xor    %r8d,%r8d
         :	 *      mdread() -- Read the specified block from a relation.
         :	 */
         :	void
         :	mdread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	           char *buffer)
         :	{
    0.00 :	  698c04:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  698c07:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  698c0b:       41 89 d6                mov    %edx,%r14d
    0.00 :	  698c0e:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  698c12:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  698c16:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  698c1a:       49 89 cc                mov    %rcx,%r12
    0.00 :	  698c1d:       48 83 ec 20             sub    $0x20,%rsp
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c21:       31 c9                   xor    %ecx,%ecx
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c23:       4c 89 f3                mov    %r14,%rbx
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c26:       e8 a5 f7 ff ff          callq  6983d0 <_mdfd_getseg>
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c2b:       81 e3 ff ff 01 00       and    $0x1ffff,%ebx
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
    0.00 :	  698c31:       8b 38                   mov    (%rax),%edi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:690
   33.33 :	  698c33:       31 d2                   xor    %edx,%edx
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c35:       48 c1 e3 0d             shl    $0xd,%rbx
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c39:       49 89 c5                mov    %rax,%r13
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
    0.00 :	  698c3c:       48 89 de                mov    %rbx,%rsi
    0.00 :	  698c3f:       e8 4c 0e fe ff          callq  679a90 <FileSeek>
    0.00 :	  698c44:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  698c47:       75 56                   jne    698c9f <mdread+0x9f>
         :	                ereport(ERROR,
         :	                                (errcode_for_file_access(),
         :	                                 errmsg("could not seek to block %u in file \"%s\": %m",
         :	                                                blocknum, FilePathName(v->mdfd_vfd))));
         :
         :	        nbytes = FileRead(v->mdfd_vfd, buffer, BLCKSZ);
    0.00 :	  698c49:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698c4d:       ba 00 20 00 00          mov    $0x2000,%edx
    0.00 :	  698c52:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  698c55:       e8 96 11 fe ff          callq  679df0 <FileRead>
         :	                                                                           reln->smgr_rnode.node.relNode,
         :	                                                                           reln->smgr_rnode.backend,
         :	                                                                           nbytes,
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
    0.00 :	  698c5a:       3d 00 20 00 00          cmp    $0x2000,%eax
         :	                ereport(ERROR,
         :	                                (errcode_for_file_access(),
         :	                                 errmsg("could not seek to block %u in file \"%s\": %m",
         :	                                                blocknum, FilePathName(v->mdfd_vfd))));
         :
         :	        nbytes = FileRead(v->mdfd_vfd, buffer, BLCKSZ);
    0.00 :	  698c5f:       89 c3                   mov    %eax,%ebx
         :	                                                                           reln->smgr_rnode.node.relNode,
         :	                                                                           reln->smgr_rnode.backend,
         :	                                                                           nbytes,
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
    0.00 :	  698c61:       74 27                   je     698c8a <mdread+0x8a>
         :	        {
         :	                if (nbytes < 0)
    0.00 :	  698c63:       85 c0                   test   %eax,%eax
    0.00 :	  698c65:       78 61                   js     698cc8 <mdread+0xc8>
         :	                 * read a nonexistent block.  However, if zero_damaged_pages is ON or
         :	                 * we are InRecovery, we should instead return zeroes without
         :	                 * complaining.  This allows, for example, the case of trying to
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
    0.00 :	  698c67:       80 3d f2 43 4e 00 00    cmpb   $0x0,0x4e43f2(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  698c6e:       75 0d                   jne    698c7d <mdread+0x7d>
    0.00 :	  698c70:       80 3d f1 04 4e 00 00    cmpb   $0x0,0x4e04f1(%rip)        # b79168 <InRecovery>
    0.00 :	  698c77:       0f 84 9a 00 00 00       je     698d17 <mdread+0x117>
         :	                        MemSet(buffer, 0, BLCKSZ);
    0.00 :	  698c7d:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  698c82:       31 c0                   xor    %eax,%eax
    0.00 :	  698c84:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  698c87:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                         errmsg("could not read block %u in file \"%s\": read only %d of %d bytes",
         :	                                                        blocknum, FilePathName(v->mdfd_vfd),
         :	                                                        nbytes, BLCKSZ)));
         :	        }
         :	}
    0.00 :	  698c8a:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:731
   66.67 :	  698c8e:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  698c93:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  698c98:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  698c9d:       c9                      leaveq 
    0.00 :	  698c9e:       c3                      retq   
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
         :	                ereport(ERROR,
    0.00 :	  698c9f:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698ca2:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698ca7:       ba b6 02 00 00          mov    $0x2b6,%edx
    0.00 :	  698cac:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698cb1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698cb6:       e8 05 1e 0e 00          callq  77aac0 <errstart>
    0.00 :	  698cbb:       84 c0                   test   %al,%al
    0.00 :	  698cbd:       0f 85 b3 00 00 00       jne    698d76 <mdread+0x176>
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
         :	                        MemSet(buffer, 0, BLCKSZ);
         :	                else
         :	                        ereport(ERROR,
    0.00 :	  698cc3:       e8 08 08 dd ff          callq  4694d0 <abort@plt>
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
         :	        {
         :	                if (nbytes < 0)
         :	                        ereport(ERROR,
    0.00 :	  698cc8:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698ccb:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698cd0:       ba c8 02 00 00          mov    $0x2c8,%edx
    0.00 :	  698cd5:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698cda:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698cdf:       e8 dc 1d 0e 00          callq  77aac0 <errstart>
    0.00 :	  698ce4:       84 c0                   test   %al,%al
    0.00 :	  698ce6:       74 db                   je     698cc3 <mdread+0xc3>
    0.00 :	  698ce8:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698cec:       e8 bf f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698cf1:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698cf4:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698cf7:       bf e8 e2 8a 00          mov    $0x8ae2e8,%edi
    0.00 :	  698cfc:       31 c0                   xor    %eax,%eax
    0.00 :	  698cfe:       e8 9d 3b 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698d03:       89 c3                   mov    %eax,%ebx
    0.00 :	  698d05:       e8 e6 3d 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  698d0a:       89 de                   mov    %ebx,%esi
    0.00 :	  698d0c:       89 c7                   mov    %eax,%edi
    0.00 :	  698d0e:       31 c0                   xor    %eax,%eax
    0.00 :	  698d10:       e8 cb 18 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  698d15:       eb ac                   jmp    698cc3 <mdread+0xc3>
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
         :	                        MemSet(buffer, 0, BLCKSZ);
         :	                else
         :	                        ereport(ERROR,
    0.00 :	  698d17:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698d1a:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698d1f:       ba d9 02 00 00          mov    $0x2d9,%edx
    0.00 :	  698d24:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698d29:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698d2e:       e8 8d 1d 0e 00          callq  77aac0 <errstart>
    0.00 :	  698d33:       84 c0                   test   %al,%al
    0.00 :	  698d35:       74 8c                   je     698cc3 <mdread+0xc3>
    0.00 :	  698d37:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698d3b:       e8 70 f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698d40:       89 d9                   mov    %ebx,%ecx
    0.00 :	  698d42:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698d45:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698d48:       41 b8 00 20 00 00       mov    $0x2000,%r8d
    0.00 :	  698d4e:       bf 18 e3 8a 00          mov    $0x8ae318,%edi
    0.00 :	  698d53:       31 c0                   xor    %eax,%eax
    0.00 :	  698d55:       e8 46 3b 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698d5a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  698d5f:       89 c3                   mov    %eax,%ebx
    0.00 :	  698d61:       e8 ea 3f 0e 00          callq  77cd50 <errcode>
    0.00 :	  698d66:       89 de                   mov    %ebx,%esi
    0.00 :	  698d68:       89 c7                   mov    %eax,%edi
    0.00 :	  698d6a:       31 c0                   xor    %eax,%eax
    0.00 :	  698d6c:       e8 6f 18 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  698d71:       e9 4d ff ff ff          jmpq   698cc3 <mdread+0xc3>
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
         :	                ereport(ERROR,
    0.00 :	  698d76:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698d7a:       e8 31 f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698d7f:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698d82:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698d85:       bf 18 e1 8a 00          mov    $0x8ae118,%edi
    0.00 :	  698d8a:       e9 6d ff ff ff          jmpq   698cfc <mdread+0xfc>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:731
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:739
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:748
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000758160 <bpcharne>:
         :	        PG_RETURN_BOOL(result);
         :	}
         :
         :	Datum
         :	bpcharne(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  758160:       55                      push   %rbp
    0.00 :	  758161:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  758164:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:731
   33.33 :	  758168:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  75816c:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  758170:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  758174:       49 89 fd                mov    %rdi,%r13
    0.00 :	  758177:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  75817b:       48 83 ec 30             sub    $0x30,%rsp
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  75817f:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
    0.00 :	  758183:       41 be 01 00 00 00       mov    $0x1,%r14d
         :	}
         :
         :	Datum
         :	bpcharne(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  758189:       e8 52 6b 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  75818e:       49 8b 7d 28             mov    0x28(%r13),%rdi
         :	}
         :
         :	Datum
         :	bpcharne(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
    0.00 :	  758192:       49 89 c4                mov    %rax,%r12
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  758195:       e8 46 6b 02 00          callq  77ece0 <pg_detoast_datum_packed>
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  75819a:       4c 89 e7                mov    %r12,%rdi
         :
         :	Datum
         :	bpcharne(PG_FUNCTION_ARGS)
         :	{
         :	        BpChar     *arg1 = PG_GETARG_BPCHAR_PP(0);
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
    0.00 :	  75819d:       48 89 c3                mov    %rax,%rbx
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  7581a0:       e8 eb fb ff ff          callq  757d90 <bcTruelen>
         :	        len2 = bcTruelen(arg2);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:739
   33.33 :	  7581a5:       48 89 df                mov    %rbx,%rdi
         :	        BpChar     *arg2 = PG_GETARG_BPCHAR_PP(1);
         :	        int                     len1,
         :	                                len2;
         :	        bool            result;
         :
         :	        len1 = bcTruelen(arg1);
    0.00 :	  7581a8:       41 89 c7                mov    %eax,%r15d
         :	        len2 = bcTruelen(arg2);
    0.00 :	  7581ab:       e8 e0 fb ff ff          callq  757d90 <bcTruelen>
         :
         :	        /*
         :	         * Since we only care about equality or not-equality, we can avoid all the
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
    0.00 :	  7581b0:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  7581b3:       74 3b                   je     7581f0 <bpcharne+0x90>
         :	                result = true;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) != 0);
         :
         :	        PG_FREE_IF_COPY(arg1, 0);
    0.00 :	  7581b5:       4d 3b 65 20             cmp    0x20(%r13),%r12
    0.00 :	  7581b9:       74 0a                   je     7581c5 <bpcharne+0x65>
    0.00 :	  7581bb:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  7581be:       66 90                   xchg   %ax,%ax
    0.00 :	  7581c0:       e8 bb 09 04 00          callq  798b80 <pfree>
         :	        PG_FREE_IF_COPY(arg2, 1);
    0.00 :	  7581c5:       49 3b 5d 28             cmp    0x28(%r13),%rbx
    0.00 :	  7581c9:       74 08                   je     7581d3 <bpcharne+0x73>
    0.00 :	  7581cb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7581ce:       e8 ad 09 04 00          callq  798b80 <pfree>
         :
         :	        PG_RETURN_BOOL(result);
         :	}
    0.00 :	  7581d3:       4c 89 f0                mov    %r14,%rax
    0.00 :	  7581d6:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  7581da:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  7581de:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  7581e2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  7581e6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  7581ea:       c9                      leaveq 
    0.00 :	  7581eb:       c3                      retq   
    0.00 :	  7581ec:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * expense of strcoll() here, and just do bitwise comparison.
         :	         */
         :	        if (len1 != len2)
         :	                result = true;
         :	        else
         :	                result = (memcmp(VARDATA_ANY(arg1), VARDATA_ANY(arg2), len1) != 0);
    0.00 :	  7581f0:       f6 03 01                testb  $0x1,(%rbx)
    0.00 :	  7581f3:       48 8d 43 04             lea    0x4(%rbx),%rax
    0.00 :	  7581f7:       48 8d 7b 01             lea    0x1(%rbx),%rdi
    0.00 :	  7581fb:       49 8d 74 24 01          lea    0x1(%r12),%rsi
    0.00 :	  758200:       49 63 cf                movslq %r15d,%rcx
    0.00 :	  758203:       48 0f 44 f8             cmove  %rax,%rdi
    0.00 :	  758207:       41 f6 04 24 01          testb  $0x1,(%r12)
    0.00 :	  75820c:       49 8d 44 24 04          lea    0x4(%r12),%rax
    0.00 :	  758211:       48 0f 44 f0             cmove  %rax,%rsi
    0.00 :	  758215:       48 39 c9                cmp    %rcx,%rcx
    0.00 :	  758218:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/varchar.c:748
   33.33 :	  75821a:       0f 97 c2                seta   %dl
    0.00 :	  75821d:       0f 92 c0                setb   %al
    0.00 :	  758220:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  758223:       38 c2                   cmp    %al,%dl
    0.00 :	  758225:       41 0f 95 c6             setne  %r14b
    0.00 :	  758229:       eb 8a                   jmp    7581b5 <bpcharne+0x55>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784050 <hash_search_with_hash_value>:
         :	hash_search_with_hash_value(HTAB *hashp,
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
    0.00 :	  784050:       55                      push   %rbp
    0.00 :	  784051:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  784054:       41 57                   push   %r15
    0.00 :	  784056:       41 89 d7                mov    %edx,%r15d
    0.00 :	  784059:       41 56                   push   %r14
    0.00 :	  78405b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  78405e:       41 55                   push   %r13
    0.00 :	  784060:       41 54                   push   %r12
    0.00 :	  784062:       53                      push   %rbx
    0.00 :	  784063:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  784067:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  78406d:       48 89 75 80             mov    %rsi,-0x80(%rbp)
    0.00 :	  784071:       4c 89 85 70 ff ff ff    mov    %r8,-0x90(%rbp)
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784078:       48 8b 07                mov    (%rdi),%rax
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  78407b:       83 f9 03                cmp    $0x3,%ecx
    0.00 :	  78407e:       0f 94 45 8f             sete   -0x71(%rbp)
    0.00 :	  784082:       83 e9 01                sub    $0x1,%ecx
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784085:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  784089:       0f 84 d9 00 00 00       je     784168 <hash_search_with_hash_value+0x118>
    0.00 :	  78408f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  784093:       0f 85 cf 00 00 00       jne    784168 <hash_search_with_hash_value+0x118>
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
         :	        *newlink = NULL;
    0.00 :	  784099:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78409c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  7840a0:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7840a4:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  7840a8:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  7840ac:       44 89 fb                mov    %r15d,%ebx
    0.00 :	  7840af:       23 5a 2c                and    0x2c(%rdx),%ebx
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7840b2:       39 f3                   cmp    %esi,%ebx
    0.00 :	  7840b4:       76 03                   jbe    7840b9 <hash_search_with_hash_value+0x69>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7840b6:       23 5a 30                and    0x30(%rdx),%ebx
         :	        bucket = calc_bucket(hctl, hashvalue);
         :
         :	        segment_num = bucket >> hashp->sshift;
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
    0.00 :	  7840b9:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840bb:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	  7840bf:       d3 e8                   shr    %cl,%eax
    0.00 :	  7840c1:       89 c0                   mov    %eax,%eax
    0.00 :	  7840c3:       4c 8b 24 c2             mov    (%rdx,%rax,8),%r12
         :
         :	        if (segp == NULL)
    0.00 :	  7840c7:       4d 85 e4                test   %r12,%r12
    0.00 :	  7840ca:       0f 84 b7 02 00 00       je     784387 <hash_search_with_hash_value+0x337>
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840d2:       44 21 e8                and    %r13d,%eax
         :	        currBucket = *prevBucketPtr;
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
    0.00 :	  7840d5:       4d 8b 6e 18             mov    0x18(%r14),%r13
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d9:       4d 8d 24 c4             lea    (%r12,%rax,8),%r12
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
    0.00 :	  7840dd:       49 8b 46 48             mov    0x48(%r14),%rax
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
         :	        currBucket = *prevBucketPtr;
    0.00 :	  7840e1:       49 8b 1c 24             mov    (%r12),%rbx
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
    0.00 :	  7840e5:       48 89 45 98             mov    %rax,-0x68(%rbp)
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840e9:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840ec:       75 0d                   jne    7840fb <hash_search_with_hash_value+0xab>
    0.00 :	  7840ee:       eb 28                   jmp    784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
         :	                        match(ELEMENTKEY(currBucket), keyPtr, keysize) == 0)
         :	                        break;
         :	                prevBucketPtr = &(currBucket->link);
    0.00 :	  7840f0:       49 89 dc                mov    %rbx,%r12
         :	                currBucket = *prevBucketPtr;
    0.00 :	  7840f3:       48 8b 1b                mov    (%rbx),%rbx
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840f6:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840f9:       74 1d                   je     784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
    0.00 :	  7840fb:       44 39 7b 08             cmp    %r15d,0x8(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
   66.67 :	  7840ff:       90                      nop
    0.00 :	  784100:       75 ee                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784102:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  784106:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  78410a:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78410e:       41 ff d5                callq  *%r13
    0.00 :	  784111:       85 c0                   test   %eax,%eax
    0.00 :	  784113:       75 db                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784115:       0f 1f 00                nopl   (%rax)
         :	                hash_collisions++;
         :	                hctl->collisions++;
         :	#endif
         :	        }
         :
         :	        if (foundPtr)
    0.00 :	  784118:       48 83 bd 70 ff ff ff    cmpq   $0x0,-0x90(%rbp)
    0.00 :	  78411f:       00 
    0.00 :	  784120:       74 0d                   je     78412f <hash_search_with_hash_value+0xdf>
         :	                *foundPtr = (bool) (currBucket != NULL);
    0.00 :	  784122:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  784129:       48 85 db                test   %rbx,%rbx
    0.00 :	  78412c:       0f 95 02                setne  (%rdx)
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  78412f:       83 bd 7c ff ff ff 01    cmpl   $0x1,-0x84(%rbp)
    0.00 :	  784136:       0f 84 5c 01 00 00       je     784298 <hash_search_with_hash_value+0x248>
    0.00 :	  78413c:       0f 83 ee 00 00 00       jae    784230 <hash_search_with_hash_value+0x1e0>
         :	        {
         :	                case HASH_FIND:
         :	                        if (currBucket != NULL)
    0.00 :	  784142:       48 85 db                test   %rbx,%rbx
    0.00 :	  784145:       0f 84 35 02 00 00       je     784380 <hash_search_with_hash_value+0x330>
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
    0.00 :	  78414b:       48 83 c3 10             add    $0x10,%rbx
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  78414f:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  784153:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784156:       5b                      pop    %rbx
    0.00 :	  784157:       41 5c                   pop    %r12
    0.00 :	  784159:       41 5d                   pop    %r13
    0.00 :	  78415b:       41 5e                   pop    %r14
    0.00 :	  78415d:       41 5f                   pop    %r15
    0.00 :	  78415f:       c9                      leaveq 
    0.00 :	  784160:       c3                      retq   
    0.00 :	  784161:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784168:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78416c:       48 83 7a 48 00          cmpq   $0x0,0x48(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
   33.33 :	  784171:       0f 85 09 01 00 00       jne    784280 <hash_search_with_hash_value+0x230>
    0.00 :	  784177:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  78417c:       0f 85 e6 01 00 00       jne    784368 <hash_search_with_hash_value+0x318>
    0.00 :	  784182:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784186:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78418a:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78418d:       8d 56 01                lea    0x1(%rsi),%edx
    0.00 :	  784190:       41 89 f0                mov    %esi,%r8d
    0.00 :	  784193:       89 55 d4                mov    %edx,-0x2c(%rbp)
    0.00 :	  784196:       41 89 d4                mov    %edx,%r12d
    0.00 :	  784199:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	  78419d:       48 89 d0                mov    %rdx,%rax
    0.00 :	  7841a0:       48 c1 fa 3f             sar    $0x3f,%rdx
    0.00 :	  7841a4:       49 f7 fc                idiv   %r12
    0.00 :	  7841a7:       48 3b 43 50             cmp    0x50(%rbx),%rax
    0.00 :	  7841ab:       0f 8c eb fe ff ff       jl     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841b1:       8b 3d 09 5a 43 00       mov    0x435a09(%rip),%edi        # bb9bc0 <num_seq_scans>
    0.00 :	  7841b7:       85 ff                   test   %edi,%edi
    0.00 :	  7841b9:       7e 2c                   jle    7841e7 <hash_search_with_hash_value+0x197>
         :	        {
         :	                if (seq_scan_tables[i] == hashp)
    0.00 :	  7841bb:       31 d2                   xor    %edx,%edx
    0.00 :	  7841bd:       4c 3b 35 1c 5a 43 00    cmp    0x435a1c(%rip),%r14        # bb9be0 <seq_scan_tables>
    0.00 :	  7841c4:       b9 e8 9b bb 00          mov    $0xbb9be8,%ecx
    0.00 :	  7841c9:       75 15                   jne    7841e0 <hash_search_with_hash_value+0x190>
    0.00 :	  7841cb:       e9 cc fe ff ff          jmpq   78409c <hash_search_with_hash_value+0x4c>
    0.00 :	  7841d0:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  7841d3:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  7841d7:       49 39 c6                cmp    %rax,%r14
    0.00 :	  7841da:       0f 84 bc fe ff ff       je     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841e0:       83 c2 01                add    $0x1,%edx
    0.00 :	  7841e3:       39 fa                   cmp    %edi,%edx
    0.00 :	  7841e5:       7c e9                   jl     7841d0 <hash_search_with_hash_value+0x180>
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841e7:       49 8b 46 50             mov    0x50(%r14),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841eb:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7841ef:       4c 89 e3                mov    %r12,%rbx
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841f2:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  7841f6:       48 8b 45 90             mov    -0x70(%rbp),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841fa:       48 d3 fb                sar    %cl,%rbx
    0.00 :	  7841fd:       48 89 5d c0             mov    %rbx,-0x40(%rbp)
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784201:       48 3b 58 20             cmp    0x20(%rax),%rbx
    0.00 :	  784205:       0f 8c 05 02 00 00       jl     784410 <hash_search_with_hash_value+0x3c0>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
    0.00 :	  78420b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  78420f:       48 8b 58 18             mov    0x18(%rax),%rbx
    0.00 :	  784213:       48 39 5d c0             cmp    %rbx,-0x40(%rbp)
    0.00 :	  784217:       0f 8c 1d 03 00 00       jl     78453a <hash_search_with_hash_value+0x4ea>
         :	        HASHSEGMENT *old_p;
         :	        long            new_dsize;
         :	        long            old_dirsize;
         :	        long            new_dirsize;
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
    0.00 :	  78421d:       48 83 78 58 ff          cmpq   $0xffffffffffffffff,0x58(%rax)
    0.00 :	  784222:       0f 84 4a 03 00 00       je     784572 <hash_search_with_hash_value+0x522>
         :	                hashp->dir = p;
         :	                hashp->hctl->dsize = new_dsize;
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784228:       44 89 c6                mov    %r8d,%esi
    0.00 :	  78422b:       e9 78 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                *foundPtr = (bool) (currBucket != NULL);
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  784230:       83 bd 7c ff ff ff 02    cmpl   $0x2,-0x84(%rbp)
    0.00 :	  784237:       0f 84 d6 00 00 00       je     784313 <hash_search_with_hash_value+0x2c3>
    0.00 :	  78423d:       83 bd 7c ff ff ff 03    cmpl   $0x3,-0x84(%rbp)
    0.00 :	  784244:       74 52                   je     784298 <hash_search_with_hash_value+0x248>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784246:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  78424b:       be df 03 00 00          mov    $0x3df,%esi
    0.00 :	  784250:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  784255:       e8 c6 71 ff ff          callq  77b420 <elog_start>
    0.00 :	  78425a:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  784260:       be f0 5a 8d 00          mov    $0x8d5af0,%esi
    0.00 :	  784265:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78426a:       31 c0                   xor    %eax,%eax
    0.00 :	  78426c:       e8 bf 6f ff ff          callq  77b230 <elog_finish>
    0.00 :	  784271:       e8 5a 52 ce ff          callq  4694d0 <abort@plt>
    0.00 :	  784276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78427d:       00 00 00 
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784280:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784284:       8b 72 28                mov    0x28(%rdx),%esi
    0.00 :	  784287:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  78428b:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78428f:       e9 14 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
    0.00 :	  784294:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        Assert(hashp->alloc != DynaHashAlloc);
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
    0.00 :	  784298:       48 85 db                test   %rbx,%rbx
    0.00 :	  78429b:       0f 85 aa fe ff ff       jne    78414b <hash_search_with_hash_value+0xfb>
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
    0.00 :	  7842a1:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  7842a6:       0f 85 a3 03 00 00       jne    78464f <hash_search_with_hash_value+0x5ff>
         :	 */
         :	static HASHBUCKET
         :	get_hash_entry(HTAB *hashp)
         :	{
         :	        /* use volatile pointer to prevent code rearrangement */
         :	        volatile HASHHDR *hctlv = hashp->hctl;
    0.00 :	  7842ac:       49 8b 1e                mov    (%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  7842af:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  7842b5:       eb 35                   jmp    7842ec <hash_search_with_hash_value+0x29c>
    0.00 :	  7842b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7842be:       00 00 
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
         :	                        SpinLockAcquire(&hctlv->mutex);
         :
         :	                /* try to get an entry from the freelist */
         :	                newElement = hctlv->freeList;
    0.00 :	  7842c0:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                if (newElement != NULL)
    0.00 :	  7842c4:       48 85 d2                test   %rdx,%rdx
    0.00 :	  7842c7:       0f 85 04 02 00 00       jne    7844d1 <hash_search_with_hash_value+0x481>
         :	                        break;
         :
         :	                /* no free elements.  allocate another chunk of buckets */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842cd:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842d1:       48 85 c0                test   %rax,%rax
    0.00 :	  7842d4:       74 03                   je     7842d9 <hash_search_with_hash_value+0x289>
         :	                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  7842d6:       c6 03 00                movb   $0x0,(%rbx)
         :
         :	                if (!element_alloc(hashp, hctlv->nelem_alloc))
    0.00 :	  7842d9:       8b 73 6c                mov    0x6c(%rbx),%esi
    0.00 :	  7842dc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  7842df:       e8 dc fb ff ff          callq  783ec0 <element_alloc>
    0.00 :	  7842e4:       84 c0                   test   %al,%al
    0.00 :	  7842e6:       0f 84 be 00 00 00       je     7843aa <hash_search_with_hash_value+0x35a>
         :	        HASHBUCKET      newElement;
         :
         :	        for (;;)
         :	        {
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842ec:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842f0:       48 85 c0                test   %rax,%rax
    0.00 :	  7842f3:       74 cb                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842f5:       44 89 e8                mov    %r13d,%eax
    0.00 :	  7842f8:       f0 86 03                lock xchg %al,(%rbx)
         :	                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  7842fb:       84 c0                   test   %al,%al
    0.00 :	  7842fd:       74 c1                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842ff:       ba 87 04 00 00          mov    $0x487,%edx
    0.00 :	  784304:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  784309:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78430c:       e8 2f bd f0 ff          callq  690040 <s_lock>
    0.00 :	  784311:       eb ad                   jmp    7842c0 <hash_search_with_hash_value+0x270>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :	                        return NULL;
         :
         :	                case HASH_REMOVE:
         :	                        if (currBucket != NULL)
    0.00 :	  784313:       48 85 db                test   %rbx,%rbx
    0.00 :	  784316:       74 68                   je     784380 <hash_search_with_hash_value+0x330>
         :	                        {
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784318:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78431c:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784320:       48 85 c0                test   %rax,%rax
    0.00 :	  784323:       74 0c                   je     784331 <hash_search_with_hash_value+0x2e1>
    0.00 :	  784325:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  78432a:       f0 86 02                lock xchg %al,(%rdx)
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  78432d:       84 c0                   test   %al,%al
    0.00 :	  78432f:       75 64                   jne    784395 <hash_search_with_hash_value+0x345>
         :
         :	                                Assert(hctlv->nentries > 0);
         :	                                hctlv->nentries--;
    0.00 :	  784331:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784335:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  784339:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78433d:       48 89 42 08             mov    %rax,0x8(%rdx)
         :
         :	                                /* remove record from hash bucket's chain. */
         :	                                *prevBucketPtr = currBucket->link;
    0.00 :	  784341:       48 8b 03                mov    (%rbx),%rax
    0.00 :	  784344:       49 89 04 24             mov    %rax,(%r12)
         :
         :	                                /* add the record to the freelist for this table.  */
         :	                                currBucket->link = hctlv->freeList;
    0.00 :	  784348:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	  78434c:       48 89 03                mov    %rax,(%rbx)
         :	                                hctlv->freeList = currBucket;
    0.00 :	  78434f:       48 89 5a 10             mov    %rbx,0x10(%rdx)
         :
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784353:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784357:       48 85 c0                test   %rax,%rax
    0.00 :	  78435a:       0f 84 eb fd ff ff       je     78414b <hash_search_with_hash_value+0xfb>
         :	                                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  784360:       c6 02 00                movb   $0x0,(%rdx)
    0.00 :	  784363:       e9 e3 fd ff ff          jmpq   78414b <hash_search_with_hash_value+0xfb>
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784368:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78436c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784370:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784374:       8b 73 28                mov    0x28(%rbx),%esi
    0.00 :	  784377:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78437b:       e9 28 fd ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784380:       31 db                   xor    %ebx,%ebx
    0.00 :	  784382:       e9 c8 fd ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
    0.00 :	  784387:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  78438a:       e8 01 f8 ff ff          callq  783b90 <hash_corrupted>
    0.00 :	  78438f:       90                      nop
    0.00 :	  784390:       e9 3b fd ff ff          jmpq   7840d0 <hash_search_with_hash_value+0x80>
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  784395:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  784399:       ba 95 03 00 00          mov    $0x395,%edx
    0.00 :	  78439e:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843a3:       e8 98 bc f0 ff          callq  690040 <s_lock>
    0.00 :	  7843a8:       eb 87                   jmp    784331 <hash_search_with_hash_value+0x2e1>
         :
         :	                        currBucket = get_hash_entry(hashp);
         :	                        if (currBucket == NULL)
         :	                        {
         :	                                /* out of memory */
         :	                                if (action == HASH_ENTER_NULL)
    0.00 :	  7843aa:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  7843ae:       75 d0                   jne    784380 <hash_search_with_hash_value+0x330>
         :	                                        return NULL;
         :	                                /* report a generic message */
         :	                                if (hashp->isshared)
    0.00 :	  7843b0:       41 80 7e 40 00          cmpb   $0x0,0x40(%r14)
    0.00 :	  7843b5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7843b8:       0f 84 4a 02 00 00       je     784608 <hash_search_with_hash_value+0x5b8>
         :	                                        ereport(ERROR,
    0.00 :	  7843be:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  7843c1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  7843c6:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  7843cb:       ba c6 03 00 00          mov    $0x3c6,%edx
    0.00 :	  7843d0:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843d5:       e8 e6 66 ff ff          callq  77aac0 <errstart>
    0.00 :	  7843da:       84 c0                   test   %al,%al
    0.00 :	  7843dc:       bf 47 ba 8a 00          mov    $0x8aba47,%edi
    0.00 :	  7843e1:       0f 84 8a fe ff ff       je     784271 <hash_search_with_hash_value+0x221>
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  7843e7:       31 c0                   xor    %eax,%eax
    0.00 :	  7843e9:       e8 b2 84 ff ff          callq  77c8a0 <errmsg>
    0.00 :	  7843ee:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  7843f3:       89 c3                   mov    %eax,%ebx
    0.00 :	  7843f5:       e8 56 89 ff ff          callq  77cd50 <errcode>
    0.00 :	  7843fa:       89 de                   mov    %ebx,%esi
    0.00 :	  7843fc:       89 c7                   mov    %eax,%edi
    0.00 :	  7843fe:       31 c0                   xor    %eax,%eax
    0.00 :	  784400:       e8 db 61 ff ff          callq  77a5e0 <errfinish>
    0.00 :	  784405:       e9 67 fe ff ff          jmpq   784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78440a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784410:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  784413:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784417:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  78441b:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  78441f:       4d 89 e1                mov    %r12,%r9
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  784422:       89 43 28                mov    %eax,0x28(%rbx)
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  784425:       8b 43 30                mov    0x30(%rbx),%eax
    0.00 :	  784428:       49 21 c1                and    %rax,%r9
         :
         :	        /*
         :	         * If we crossed a power of 2, readjust masks.
         :	         */
         :	        if ((uint32) new_bucket > hctl->high_mask)
    0.00 :	  78442b:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  78442e:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  784431:       76 0c                   jbe    78443f <hash_search_with_hash_value+0x3ef>
         :	        {
         :	                hctl->low_mask = hctl->high_mask;
    0.00 :	  784433:       89 43 30                mov    %eax,0x30(%rbx)
         :	                hctl->high_mask = (uint32) new_bucket | hctl->low_mask;
    0.00 :	  784436:       09 45 d4                or     %eax,-0x2c(%rbp)
    0.00 :	  784439:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  78443c:       89 43 2c                mov    %eax,0x2c(%rbx)
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  78443f:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784443:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784447:       4c 89 ca                mov    %r9,%rdx
         :	         * that might not be true!
         :	         */
         :	        old_segnum = old_bucket >> hashp->sshift;
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
    0.00 :	  78444a:       49 8b 76 08             mov    0x8(%r14),%rsi
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78444e:       4d 21 ec                and    %r13,%r12
    0.00 :	  784451:       4a 8d 3c e5 00 00 00    lea    0x0(,%r12,8),%rdi
    0.00 :	  784458:       00 
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  784459:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78445d:       48 d3 fa                sar    %cl,%rdx
    0.00 :	  784460:       4c 21 c8                and    %r9,%rax
    0.00 :	  784463:       4c 8d 04 c5 00 00 00    lea    0x0(,%rax,8),%r8
    0.00 :	  78446a:       00 
    0.00 :	  78446b:       4c 03 04 d6             add    (%rsi,%rdx,8),%r8
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78446f:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  784473:       48 03 3c 16             add    (%rsi,%rdx,1),%rdi
         :
         :	        for (currElement = *oldlink;
    0.00 :	  784477:       49 8b 10                mov    (%r8),%rdx
         :	                 currElement != NULL;
    0.00 :	  78447a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  78447d:       75 17                   jne    784496 <hash_search_with_hash_value+0x446>
    0.00 :	  78447f:       eb 39                   jmp    7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784481:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        *oldlink = currElement;
         :	                        oldlink = &currElement->link;
         :	                }
         :	                else
         :	                {
         :	                        *newlink = currElement;
    0.00 :	  784488:       48 89 17                mov    %rdx,(%rdi)
         :	                        newlink = &currElement->link;
    0.00 :	  78448b:       48 89 d7                mov    %rdx,%rdi
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
    0.00 :	  78448e:       48 85 c9                test   %rcx,%rcx
    0.00 :	  784491:       74 27                   je     7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784493:       48 89 ca                mov    %rcx,%rdx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  784496:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
    0.00 :	  78449a:       48 8b 0a                mov    (%rdx),%rcx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  78449d:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  7844a0:       23 42 08                and    0x8(%rdx),%eax
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7844a3:       3b 43 28                cmp    0x28(%rbx),%eax
    0.00 :	  7844a6:       76 03                   jbe    7844ab <hash_search_with_hash_value+0x45b>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7844a8:       23 43 30                and    0x30(%rbx),%eax
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
         :	                if ((long) calc_bucket(hctl, currElement->hashvalue) == old_bucket)
    0.00 :	  7844ab:       89 c0                   mov    %eax,%eax
    0.00 :	  7844ad:       49 39 c1                cmp    %rax,%r9
    0.00 :	  7844b0:       75 d6                   jne    784488 <hash_search_with_hash_value+0x438>
         :	                {
         :	                        *oldlink = currElement;
    0.00 :	  7844b2:       49 89 10                mov    %rdx,(%r8)
         :	                        oldlink = &currElement->link;
    0.00 :	  7844b5:       49 89 d0                mov    %rdx,%r8
    0.00 :	  7844b8:       eb d4                   jmp    78448e <hash_search_with_hash_value+0x43e>
         :	                        *newlink = currElement;
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
    0.00 :	  7844ba:       49 c7 00 00 00 00 00    movq   $0x0,(%r8)
         :	        *newlink = NULL;
    0.00 :	  7844c1:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7844c8:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  7844cc:       e9 c8 fb ff ff          jmpq   784099 <hash_search_with_hash_value+0x49>
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* remove entry from freelist, bump nentries */
         :	        hctlv->freeList = newElement->link;
    0.00 :	  7844d1:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  7844d4:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        hctlv->nentries++;
    0.00 :	  7844d8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7844dc:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  7844e0:       48 89 43 08             mov    %rax,0x8(%rbx)
         :
         :	        if (IS_PARTITIONED(hctlv))
    0.00 :	  7844e4:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7844e8:       48 85 c0                test   %rax,%rax
    0.00 :	  7844eb:       74 03                   je     7844f0 <hash_search_with_hash_value+0x4a0>
         :	                SpinLockRelease(&hctlv->mutex);
    0.00 :	  7844ed:       c6 03 00                movb   $0x0,(%rbx)
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  7844f0:       48 8d 5a 10             lea    0x10(%rdx),%rbx
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
    0.00 :	  7844f4:       49 89 14 24             mov    %rdx,(%r12)
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
    0.00 :	  7844f8:       44 89 7a 08             mov    %r15d,0x8(%rdx)
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
    0.00 :	  7844fc:       48 c7 02 00 00 00 00    movq   $0x0,(%rdx)
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  784503:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  784507:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78450b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78450e:       41 ff 56 20             callq  *0x20(%r14)
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  784512:       e9 38 fc ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  784517:       31 f6                   xor    %esi,%esi
    0.00 :	  784519:       e8 02 4f ce ff          callq  469420 <memset@plt>
         :	                hashp->dir = p;
    0.00 :	  78451e:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  784522:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
         :	                hashp->dir = p;
    0.00 :	  784526:       49 89 46 08             mov    %rax,0x8(%r14)
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  78452a:       49 8b 06                mov    (%r14),%rax
    0.00 :	  78452d:       48 89 50 18             mov    %rdx,0x18(%rax)
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784531:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  784535:       e8 46 46 01 00          callq  798b80 <pfree>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78453a:       48 8b 5d c0             mov    -0x40(%rbp),%rbx
    0.00 :	  78453e:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  784541:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784545:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
    0.00 :	  784549:       49 03 5e 08             add    0x8(%r14),%rbx
    0.00 :	  78454d:       e8 7e fa ff ff          callq  783fd0 <seg_alloc>
    0.00 :	  784552:       48 85 c0                test   %rax,%rax
    0.00 :	  784555:       48 89 03                mov    %rax,(%rbx)
    0.00 :	  784558:       0f 84 1f 01 00 00       je     78467d <hash_search_with_hash_value+0x62d>
         :	                        return false;
         :	                hctl->nsegs++;
    0.00 :	  78455e:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784562:       8b 42 28                mov    0x28(%rdx),%eax
    0.00 :	  784565:       48 83 42 20 01          addq   $0x1,0x20(%rdx)
    0.00 :	  78456a:       83 c0 01                add    $0x1,%eax
    0.00 :	  78456d:       e9 a9 fe ff ff          jmpq   78441b <hash_search_with_hash_value+0x3cb>
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784572:       48 8d 14 1b             lea    (%rbx,%rbx,1),%rdx
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
    0.00 :	  784576:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784579:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  78457d:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784581:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784585:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784589:       49 8b 56 08             mov    0x8(%r14),%rdx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78458d:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784591:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784595:       48 89 05 2c 56 43 00    mov    %rax,0x43562c(%rip)        # bb9bc8 <CurrentDynaHashCxt>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78459c:       41 ff 56 28             callq  *0x28(%r14)
         :
         :	        if (p != NULL)
    0.00 :	  7845a0:       48 85 c0                test   %rax,%rax
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  7845a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        if (p != NULL)
    0.00 :	  7845a7:       0f 84 89 00 00 00       je     784636 <hash_search_with_hash_value+0x5e6>
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845ad:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845b1:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
    0.00 :	  7845b5:       48 c1 e3 03             shl    $0x3,%rbx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845b9:       48 89 da                mov    %rbx,%rdx
    0.00 :	  7845bc:       e8 2f 56 ce ff          callq  469bf0 <memcpy@plt>
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  7845c1:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845c5:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  7845c9:       48 01 df                add    %rbx,%rdi
    0.00 :	  7845cc:       48 29 da                sub    %rbx,%rdx
    0.00 :	  7845cf:       40 f6 c7 07             test   $0x7,%dil
    0.00 :	  7845d3:       0f 85 3e ff ff ff       jne    784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845d9:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  7845e0:       0f 87 31 ff ff ff       ja     784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845e6:       48 8d 04 17             lea    (%rdi,%rdx,1),%rax
    0.00 :	  7845ea:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  7845ed:       0f 83 2b ff ff ff       jae    78451e <hash_search_with_hash_value+0x4ce>
    0.00 :	  7845f3:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7845fa:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	  7845fe:       48 39 f8                cmp    %rdi,%rax
    0.00 :	  784601:       77 f0                   ja     7845f3 <hash_search_with_hash_value+0x5a3>
    0.00 :	  784603:       e9 16 ff ff ff          jmpq   78451e <hash_search_with_hash_value+0x4ce>
         :	                                if (hashp->isshared)
         :	                                        ereport(ERROR,
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  784608:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  78460b:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  784610:       ba ca 03 00 00          mov    $0x3ca,%edx
    0.00 :	  784615:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  78461a:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78461f:       e8 9c 64 ff ff          callq  77aac0 <errstart>
    0.00 :	  784624:       84 c0                   test   %al,%al
    0.00 :	  784626:       0f 84 45 fc ff ff       je     784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78462c:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  784631:       e9 b1 fd ff ff          jmpq   7843e7 <hash_search_with_hash_value+0x397>
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
    0.00 :	  784636:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78463a:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78463e:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784642:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784646:       44 8b 43 28             mov    0x28(%rbx),%r8d
    0.00 :	  78464a:       e9 d9 fb ff ff          jmpq   784228 <hash_search_with_hash_value+0x1d8>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
         :	                                elog(ERROR, "cannot insert into frozen hashtable \"%s\"",
    0.00 :	  78464f:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  784654:       be ba 03 00 00          mov    $0x3ba,%esi
    0.00 :	  784659:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  78465e:       e8 bd 6d ff ff          callq  77b420 <elog_start>
    0.00 :	  784663:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  784667:       be c0 5a 8d 00          mov    $0x8d5ac0,%esi
    0.00 :	  78466c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  784671:       31 c0                   xor    %eax,%eax
    0.00 :	  784673:       e8 b8 6b ff ff          callq  77b230 <elog_finish>
    0.00 :	  784678:       e8 53 4e ce ff          callq  4694d0 <abort@plt>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78467d:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784681:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784685:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  784688:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78468c:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784690:       e9 13 fa ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:721
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:724
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798f70 <palloc0>:
         :	        return ret;
         :	}
         :
         :	void *
         :	palloc0(Size size)
         :	{
    0.00 :	  798f70:       55                      push   %rbp
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798f71:       48 81 ff ff ff ff 3f    cmp    $0x3fffffff,%rdi
         :	        return ret;
         :	}
         :
         :	void *
         :	palloc0(Size size)
         :	{
    0.00 :	  798f78:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798f7b:       41 54                   push   %r12
    0.00 :	  798f7d:       53                      push   %rbx
    0.00 :	  798f7e:       48 89 fb                mov    %rdi,%rbx
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798f81:       77 6d                   ja     798ff0 <palloc0+0x80>
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798f83:       48 8b 05 d6 18 42 00    mov    0x4218d6(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:721
   66.67 :	  798f8a:       48 89 de                mov    %rbx,%rsi
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798f8d:       c6 40 30 00             movb   $0x0,0x30(%rax)
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798f91:       48 8b 3d c8 18 42 00    mov    0x4218c8(%rip),%rdi        # bba860 <CurrentMemoryContext>
    0.00 :	  798f98:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  798f9c:       ff 10                   callq  *(%rax)
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798f9e:       f6 c3 07                test   $0x7,%bl
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798fa1:       49 89 c4                mov    %rax,%r12
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798fa4:       75 09                   jne    798faf <palloc0+0x3f>
    0.00 :	  798fa6:       48 81 fb 00 04 00 00    cmp    $0x400,%rbx
    0.00 :	  798fad:       76 19                   jbe    798fc8 <palloc0+0x58>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:724
   33.33 :	  798faf:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798fb2:       31 f6                   xor    %esi,%esi
    0.00 :	  798fb4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  798fb7:       e8 64 04 cd ff          callq  469420 <memset@plt>
         :
         :	        return ret;
         :	}
    0.00 :	  798fbc:       5b                      pop    %rbx
    0.00 :	  798fbd:       4c 89 e0                mov    %r12,%rax
    0.00 :	  798fc0:       41 5c                   pop    %r12
    0.00 :	  798fc2:       c9                      leaveq 
    0.00 :	  798fc3:       c3                      retq   
    0.00 :	  798fc4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        CurrentMemoryContext->isReset = false;
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798fc8:       49 8d 14 1c             lea    (%r12,%rbx,1),%rdx
    0.00 :	  798fcc:       49 39 d4                cmp    %rdx,%r12
    0.00 :	  798fcf:       73 eb                   jae    798fbc <palloc0+0x4c>
    0.00 :	  798fd1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  798fd8:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  798fdf:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  798fe3:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  798fe6:       77 f0                   ja     798fd8 <palloc0+0x68>
         :
         :	        return ret;
         :	}
    0.00 :	  798fe8:       5b                      pop    %rbx
    0.00 :	  798fe9:       4c 89 e0                mov    %r12,%rax
    0.00 :	  798fec:       41 5c                   pop    %r12
    0.00 :	  798fee:       c9                      leaveq 
    0.00 :	  798fef:       c3                      retq   
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
    0.00 :	  798ff0:       ba 10 20 8e 00          mov    $0x8e2010,%edx
    0.00 :	  798ff5:       be cd 02 00 00          mov    $0x2cd,%esi
    0.00 :	  798ffa:       bf 8e 1f 8e 00          mov    $0x8e1f8e,%edi
    0.00 :	  798fff:       e8 1c 24 fe ff          callq  77b420 <elog_start>
    0.00 :	  799004:       48 89 da                mov    %rbx,%rdx
    0.00 :	  799007:       be b8 1f 8e 00          mov    $0x8e1fb8,%esi
    0.00 :	  79900c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  799011:       31 c0                   xor    %eax,%eax
    0.00 :	  799013:       e8 18 22 fe ff          callq  77b230 <elog_finish>
    0.00 :	  799018:       e8 b3 04 cd ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:641
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a900 <ResourceOwnerForgetBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a900:       55                      push   %rbp
         :	        if (owner != NULL)
    0.00 :	  79a901:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a904:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  79a907:       41 54                   push   %r12
    0.00 :	  79a909:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79a90c:       53                      push   %rbx
    0.00 :	  79a90d:       89 f3                   mov    %esi,%ebx
         :	        if (owner != NULL)
    0.00 :	  79a90f:       74 4d                   je     79a95e <ResourceOwnerForgetBuffer+0x5e>
         :	        {
         :	                Buffer     *buffers = owner->buffers;
         :	                int                     nb1 = owner->nbuffers - 1;
    0.00 :	  79a911:       8b 47 20                mov    0x20(%rdi),%eax
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
         :	        if (owner != NULL)
         :	        {
         :	                Buffer     *buffers = owner->buffers;
    0.00 :	  79a914:       48 8b 77 28             mov    0x28(%rdi),%rsi
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
   66.67 :	  79a918:       89 c7                   mov    %eax,%edi
    0.00 :	  79a91a:       83 ef 01                sub    $0x1,%edi
    0.00 :	  79a91d:       78 49                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a91f:       48 63 c7                movslq %edi,%rax
         :	                                while (i < nb1)
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
    0.00 :	  79a922:       89 fa                   mov    %edi,%edx
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a924:       39 1c 86                cmp    %ebx,(%rsi,%rax,4)
    0.00 :	  79a927:       74 30                   je     79a959 <ResourceOwnerForgetBuffer+0x59>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:641
   33.33 :	  79a929:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
    0.00 :	  79a930:       83 ea 01                sub    $0x1,%edx
    0.00 :	  79a933:       78 33                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a935:       48 63 ca                movslq %edx,%rcx
    0.00 :	  79a938:       39 1c 8e                cmp    %ebx,(%rsi,%rcx,4)
    0.00 :	  79a93b:       75 f3                   jne    79a930 <ResourceOwnerForgetBuffer+0x30>
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a93d:       39 d7                   cmp    %edx,%edi
    0.00 :	  79a93f:       90                      nop
    0.00 :	  79a940:       7f 09                   jg     79a94b <ResourceOwnerForgetBuffer+0x4b>
    0.00 :	  79a942:       eb 15                   jmp    79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a944:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  79a948:       48 63 ca                movslq %edx,%rcx
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a94b:       8b 44 8e 04             mov    0x4(%rsi,%rcx,4),%eax
         :	                                        i++;
    0.00 :	  79a94f:       83 c2 01                add    $0x1,%edx
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a952:       39 d7                   cmp    %edx,%edi
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a954:       89 04 8e                mov    %eax,(%rsi,%rcx,4)
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a957:       7f ef                   jg     79a948 <ResourceOwnerForgetBuffer+0x48>
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
    0.00 :	  79a959:       41 89 7c 24 20          mov    %edi,0x20(%r12)
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
         :	                         buffer, owner->name);
         :	        }
         :	}
    0.00 :	  79a95e:       5b                      pop    %rbx
    0.00 :	  79a95f:       41 5c                   pop    %r12
    0.00 :	  79a961:       c9                      leaveq 
    0.00 :	  79a962:       c3                      retq   
    0.00 :	  79a963:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                }
         :	                                owner->nbuffers = nb1;
         :	                                return;
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
    0.00 :	  79a968:       ba 70 27 8e 00          mov    $0x8e2770,%edx
    0.00 :	  79a96d:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  79a972:       bf 90 22 8e 00          mov    $0x8e2290,%edi
    0.00 :	  79a977:       e8 a4 0a fe ff          callq  77b420 <elog_start>
    0.00 :	  79a97c:       49 8b 4c 24 18          mov    0x18(%r12),%rcx
    0.00 :	  79a981:       89 da                   mov    %ebx,%edx
    0.00 :	  79a983:       be b8 24 8e 00          mov    $0x8e24b8,%esi
    0.00 :	  79a988:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  79a98d:       31 c0                   xor    %eax,%eax
    0.00 :	  79a98f:       e8 9c 08 fe ff          callq  77b230 <elog_finish>
    0.00 :	  79a994:       e8 37 eb cc ff          callq  4694d0 <abort@plt>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	00000000004695c0 <gettimeofday@plt>:
 ??:0
  100.00 :	  4695c0:       ff 25 82 db 6f 00       jmpq   *0x6fdb82(%rip)        # b67148 <_GLOBAL_OFFSET_TABLE_+0x148>
    0.00 :	  4695c6:       68 26 00 00 00          pushq  $0x26
    0.00 :	  4695cb:       e9 80 fd ff ff          jmpq   469350 <_init+0x20>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:7339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004cd4c0 <RecoveryInProgress>:
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4c0:       31 c0                   xor    %eax,%eax
    0.00 :	  4cd4c2:       80 3d 97 a9 69 00 00    cmpb   $0x0,0x69a997(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	 * As a side-effect, we initialize the local TimeLineID and RedoRecPtr
         :	 * variables the first time we see that recovery is finished.
         :	 */
         :	bool
         :	RecoveryInProgress(void)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:7339
  100.00 :	  4cd4c9:       55                      push   %rbp
    0.00 :	  4cd4ca:       48 89 e5                mov    %rsp,%rbp
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4cd:       74 1f                   je     4cd4ee <RecoveryInProgress+0x2e>
         :	        {
         :	                /*
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
    0.00 :	  4cd4cf:       48 8b 05 c2 bc 6a 00    mov    0x6abcc2(%rip),%rax        # b79198 <XLogCtl>
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4d6:       0f b6 80 5c 05 00 00    movzbl 0x55c(%rax),%eax
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4dd:       84 c0                   test   %al,%al
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4df:       88 05 7b a9 69 00       mov    %al,0x69a97b(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4e5:       74 09                   je     4cd4f0 <RecoveryInProgress+0x30>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4e7:       0f b6 05 72 a9 69 00    movzbl 0x69a972(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
         :	        }
         :	}
    0.00 :	  4cd4ee:       c9                      leaveq 
    0.00 :	  4cd4ef:       c3                      retq   
         :	                        /*
         :	                         * If we just exited recovery, make sure we read TimeLineID and
         :	                         * RedoRecPtr after SharedRecoveryInProgress (for machines with
         :	                         * weak memory ordering).
         :	                         */
         :	                        pg_memory_barrier();
    0.00 :	  4cd4f0:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                        InitXLOGAccess();
    0.00 :	  4cd4f5:       e8 a6 ff ff ff          callq  4cd4a0 <InitXLOGAccess>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4fa:       0f b6 05 5f a9 69 00    movzbl 0x69a95f(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
    0.00 :	  4cd501:       eb eb                   jmp    4cd4ee <RecoveryInProgress+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673de0 <BufTableLookup>:
         :	 * BufTableLookup
         :	 *              Lookup the given BufferTag; return buffer ID, or -1 if not found
         :	 */
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
    0.00 :	  673de0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
  100.00 :	  673de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  673de4:       48 83 ec 20             sub    $0x20,%rsp
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673de8:       48 8b 07                mov    (%rdi),%rax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673deb:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673def:       48 89 45 e0             mov    %rax,-0x20(%rbp)
    0.00 :	  673df3:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  673df7:       48 89 45 e8             mov    %rax,-0x18(%rbp)
    0.00 :	  673dfb:       8b 47 10                mov    0x10(%rdi),%eax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673dfe:       48 8b 3d 53 92 50 00    mov    0x509253(%rip),%rdi        # b7d058 <SharedBufHash>
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673e05:       89 45 f0                mov    %eax,-0x10(%rbp)
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673e08:       e8 e3 f4 10 00          callq  7832f0 <CHashSearch>
    0.00 :	  673e0d:       89 c2                   mov    %eax,%edx
    0.00 :	  673e0f:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  673e14:       84 d2                   test   %dl,%dl
    0.00 :	  673e16:       0f 45 45 f4             cmovne -0xc(%rbp),%eax
         :	                return -1;
         :
         :	        return ent.id;
         :	}
    0.00 :	  673e1a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:895
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1075
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068faf0 <LWLockAcquire>:
         :	 *
         :	 * Side effect: cancel/die interrupts are held off until lock release.
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
    0.00 :	  68faf0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:895
   50.00 :	  68faf1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68faf4:       41 57                   push   %r15
    0.00 :	  68faf6:       41 89 f7                mov    %esi,%r15d
    0.00 :	  68faf9:       41 56                   push   %r14
    0.00 :	  68fafb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  68fafe:       41 55                   push   %r13
    0.00 :	  68fb00:       41 54                   push   %r12
    0.00 :	  68fb02:       53                      push   %rbx
    0.00 :	  68fb03:       48 83 ec 18             sub    $0x18,%rsp
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb07:       81 3d f7 de 4e 00 c7    cmpl   $0xc7,0x4edef7(%rip)        # b7da08 <num_held_lwlocks>
    0.00 :	  68fb0e:       00 00 00 
         :
         :	/* internal function to implement LWLockAcquire and LWLockAcquireWithVar */
         :	static inline bool
         :	LWLockAcquireCommon(LWLock *lock, LWLockMode mode, uint64 *valptr, uint64 val)
         :	{
         :	        PGPROC     *proc = MyProc;
    0.00 :	  68fb11:       4c 8b 25 30 de 4e 00    mov    0x4ede30(%rip),%r12        # b7d948 <MyProc>
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb18:       0f 8f 0c 01 00 00       jg     68fc2a <LWLockAcquire+0x13a>
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb1e:       8b 05 74 a5 52 00       mov    0x52a574(%rip),%eax        # bba098 <InterruptHoldoffCount>
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb24:       48 8d 57 08             lea    0x8(%rdi),%rdx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb28:       4d 8d 6c 24 10          lea    0x10(%r12),%r13
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb2d:       31 db                   xor    %ebx,%ebx
    0.00 :	  68fb2f:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1075
   50.00 :	  68fb33:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb37:       83 c0 01                add    $0x1,%eax
    0.00 :	  68fb3a:       89 05 58 a5 52 00       mov    %eax,0x52a558(%rip)        # bba098 <InterruptHoldoffCount>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb40:       48 8d 47 01             lea    0x1(%rdi),%rax
    0.00 :	  68fb44:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  68fb48:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68fb4f:       00 
         :	                bool            mustwait;
         :
         :	                /*
         :	                 * try to grab the lock the first time, we're not in the waitqueue yet.
         :	                 */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb50:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb52:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb55:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb58:       e8 63 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                if (!mustwait)
    0.00 :	  68fb5d:       84 c0                   test   %al,%al
    0.00 :	  68fb5f:       74 79                   je     68fbda <LWLockAcquire+0xea>
         :	                 * other lock will see our queue entries when releasing since they
         :	                 * existed before we checked for the lock.
         :	                 */
         :
         :	                /* add to the queue */
         :	                LWLockQueueSelf(lock, mode);
    0.00 :	  68fb61:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb64:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb67:       e8 14 f5 ff ff          callq  68f080 <LWLockQueueSelf>
         :
         :	                /* we're now guaranteed to be woken up if necessary */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb6c:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb6e:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb71:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb74:       e8 47 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                /* ok, grabbed the lock the second time round, need to undo queueing */
         :	                if (!mustwait)
    0.00 :	  68fb79:       84 c0                   test   %al,%al
    0.00 :	  68fb7b:       75 06                   jne    68fb83 <LWLockAcquire+0x93>
    0.00 :	  68fb7d:       eb 30                   jmp    68fbaf <LWLockAcquire+0xbf>
    0.00 :	  68fb7f:       90                      nop
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
         :	                        if (!proc->lwWaiting)
         :	                                break;
         :	                        extraWaits++;
    0.00 :	  68fb80:       83 c3 01                add    $0x1,%ebx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb83:       31 f6                   xor    %esi,%esi
    0.00 :	  68fb85:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fb88:       e8 93 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                        if (!proc->lwWaiting)
    0.00 :	  68fb8d:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fb93:       75 eb                   jne    68fb80 <LWLockAcquire+0x90>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb95:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68fb99:       c6 00 01                movb   $0x1,(%rax)
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68fb9c:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68fba1:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  68fba5:       f0 0f c1 02             lock xadd %eax,(%rdx)
    0.00 :	  68fba9:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  68fbad:       eb a1                   jmp    68fb50 <LWLockAcquire+0x60>
         :	                        LOG_LWDEBUG("LWLockAcquire", lock, "acquired, undoing queue");
         :
         :	#ifdef LWLOCK_STATS
         :	                        lwstats->dequeue_self_count++;
         :	#endif
         :	                        if (!LWLockDequeueSelf(lock))
    0.00 :	  68fbaf:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fbb2:       e8 19 f6 ff ff          callq  68f1d0 <LWLockDequeueSelf>
    0.00 :	  68fbb7:       84 c0                   test   %al,%al
    0.00 :	  68fbb9:       75 1f                   jne    68fbda <LWLockAcquire+0xea>
    0.00 :	  68fbbb:       eb 06                   jmp    68fbc3 <LWLockAcquire+0xd3>
    0.00 :	  68fbbd:       0f 1f 00                nopl   (%rax)
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
         :	                                        if (!proc->lwWaiting)
         :	                                                break;
         :	                                        extraWaits++;
    0.00 :	  68fbc0:       83 c3 01                add    $0x1,%ebx
         :	                                 * reset at some inconvenient point later, and releaseOk
         :	                                 * wouldn't be managed correctly.
         :	                                 */
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fbc3:       31 f6                   xor    %esi,%esi
    0.00 :	  68fbc5:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fbc8:       e8 53 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                                        if (!proc->lwWaiting)
    0.00 :	  68fbcd:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fbd3:       75 eb                   jne    68fbc0 <LWLockAcquire+0xd0>
         :	                                /*
         :	                                 * Reset releaseOk - if somebody woke us they'll have set it
         :	                                 * to false. No need for a barrier here - we got the lock and
         :	                                 * will perform wakeup if necessary.
         :	                                 */
         :	                                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fbd5:       41 c6 46 01 01          movb   $0x1,0x1(%r14)
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbda:       8b 15 28 de 4e 00       mov    0x4ede28(%rip),%edx        # b7da08 <num_held_lwlocks>
    0.00 :	  68fbe0:       48 63 c2                movslq %edx,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbe3:       83 c2 01                add    $0x1,%edx
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbe6:       48 c1 e0 04             shl    $0x4,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fbea:       85 db                   test   %ebx,%ebx
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbec:       89 15 16 de 4e 00       mov    %edx,0x4ede16(%rip)        # b7da08 <num_held_lwlocks>
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbf2:       4c 89 b0 40 da b7 00    mov    %r14,0xb7da40(%rax)
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbf9:       44 89 b8 48 da b7 00    mov    %r15d,0xb7da48(%rax)
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc00:       7e 15                   jle    68fc17 <LWLockAcquire+0x127>
    0.00 :	  68fc02:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                PGSemaphoreUnlock(&proc->sem);
    0.00 :	  68fc08:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fc0b:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  68fc0e:       e8 7d 84 fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc13:       85 db                   test   %ebx,%ebx
    0.00 :	  68fc15:       7f f1                   jg     68fc08 <LWLockAcquire+0x118>
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
         :	        return LWLockAcquireCommon(l, mode, NULL, 0);
         :	}
    0.00 :	  68fc17:       0f b6 45 c7             movzbl -0x39(%rbp),%eax
    0.00 :	  68fc1b:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68fc1f:       5b                      pop    %rbx
    0.00 :	  68fc20:       41 5c                   pop    %r12
    0.00 :	  68fc22:       41 5d                   pop    %r13
    0.00 :	  68fc24:       41 5e                   pop    %r14
    0.00 :	  68fc26:       41 5f                   pop    %r15
    0.00 :	  68fc28:       c9                      leaveq 
    0.00 :	  68fc29:       c3                      retq   
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
         :	                elog(ERROR, "too many LWLocks taken");
    0.00 :	  68fc2a:       ba 70 d1 8a 00          mov    $0x8ad170,%edx
    0.00 :	  68fc2f:       be b0 03 00 00          mov    $0x3b0,%esi
    0.00 :	  68fc34:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68fc39:       e8 e2 b7 0e 00          callq  77b420 <elog_start>
    0.00 :	  68fc3e:       be 8e d0 8a 00          mov    $0x8ad08e,%esi
    0.00 :	  68fc43:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68fc48:       31 c0                   xor    %eax,%eax
    0.00 :	  68fc4a:       e8 e1 b5 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68fc4f:       e8 7c 98 dd ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:593
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c9880 <date_lt_timestamp>:
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) != 0);
         :	}
         :
         :	Datum
         :	date_lt_timestamp(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6c9880:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
   50.00 :	  6c9881:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6c9884:       53                      push   %rbx
    0.00 :	  6c9885:       48 83 ec 08             sub    $0x8,%rsp
         :	        DateADT         dateVal = PG_GETARG_DATEADT(0);
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
    0.00 :	  6c9889:       48 8b 5f 28             mov    0x28(%rdi),%rbx
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
    0.00 :	  6c988d:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6c9891:       e8 7a dd ff ff          callq  6c7610 <date2timestamp>
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
    0.00 :	  6c9896:       48 89 de                mov    %rbx,%rsi
         :	{
         :	        DateADT         dateVal = PG_GETARG_DATEADT(0);
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
    0.00 :	  6c9899:       48 89 c7                mov    %rax,%rdi
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
    0.00 :	  6c989c:       e8 cf 6f 07 00          callq  740870 <timestamp_cmp_internal>
    0.00 :	  6c98a1:       48 98                   cltq   
         :	}
    0.00 :	  6c98a3:       48 83 c4 08             add    $0x8,%rsp
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
    0.00 :	  6c98a7:       48 c1 e8 3f             shr    $0x3f,%rax
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:593
   50.00 :	  6c98ab:       5b                      pop    %rbx
    0.00 :	  6c98ac:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079ae70 <ResourceOwnerEnlargeBuffers>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae70:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   50.00 :	  79ae71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  79ae74:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
   50.00 :	  79ae78:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  79ae7c:       48 83 ec 10             sub    $0x10,%rsp
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae80:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae83:       49 89 fc                mov    %rdi,%r12
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae86:       74 2a                   je     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
    0.00 :	  79ae88:       8b 47 30                mov    0x30(%rdi),%eax
    0.00 :	  79ae8b:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  79ae8e:       7c 22                   jl     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
         :	                owner->nbuffers < owner->maxbuffers)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
    0.00 :	  79ae90:       48 8b 7f 28             mov    0x28(%rdi),%rdi
    0.00 :	  79ae94:       48 85 ff                test   %rdi,%rdi
    0.00 :	  79ae97:       74 27                   je     79aec0 <ResourceOwnerEnlargeBuffers+0x50>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
    0.00 :	  79ae99:       8d 1c 00                lea    (%rax,%rax,1),%ebx
         :	                owner->buffers = (Buffer *)
    0.00 :	  79ae9c:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  79ae9f:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  79aea3:       e8 48 de ff ff          callq  798cf0 <repalloc>
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aea8:       41 89 5c 24 30          mov    %ebx,0x30(%r12)
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aead:       49 89 44 24 28          mov    %rax,0x28(%r12)
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	}
    0.00 :	  79aeb2:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  79aeb6:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  79aebb:       c9                      leaveq 
    0.00 :	  79aebc:       c3                      retq   
    0.00 :	  79aebd:       0f 1f 00                nopl   (%rax)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aec0:       48 8b 3d a1 f9 41 00    mov    0x41f9a1(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  79aec7:       be 40 00 00 00          mov    $0x40,%esi
    0.00 :	  79aecc:       e8 bf df ff ff          callq  798e90 <MemoryContextAlloc>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aed1:       41 c7 44 24 30 10 00    movl   $0x10,0x30(%r12)
    0.00 :	  79aed8:       00 00 
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aeda:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	  79aedf:       eb d1                   jmp    79aeb2 <ResourceOwnerEnlargeBuffers+0x42>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000001f0f0 <__errno_location>:
    0.00 :	   1f0f0:       48 8b 05 41 2d 35 00    mov    0x352d41(%rip),%rax        # 371e38 <_DYNAMIC+0x2d8>
  100.00 :	   1f0f7:       64 48 03 04 25 00 00    add    %fs:0x0,%rax
    0.00 :	   1f0fe:       00 00 

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000078e20 <_int_malloc>:
    0.00 :	   78e20:       41 57                   push   %r15
    0.00 :	   78e22:       41 56                   push   %r14
    0.00 :	   78e24:       41 55                   push   %r13
    0.00 :	   78e26:       41 54                   push   %r12
    0.00 :	   78e28:       55                      push   %rbp
    0.00 :	   78e29:       53                      push   %rbx
    0.00 :	   78e2a:       48 83 ec 78             sub    $0x78,%rsp
    0.00 :	   78e2e:       48 83 fe bf             cmp    $0xffffffffffffffbf,%rsi
    0.00 :	   78e32:       48 89 7c 24 20          mov    %rdi,0x20(%rsp)
    0.00 :	   78e37:       48 89 74 24 18          mov    %rsi,0x18(%rsp)
    0.00 :	   78e3c:       0f 87 bd 09 00 00       ja     797ff <_int_malloc+0x9df>
    0.00 :	   78e42:       48 8b 44 24 18          mov    0x18(%rsp),%rax
    0.00 :	   78e47:       48 c7 44 24 28 20 00    movq   $0x20,0x28(%rsp)
    0.00 :	   78e4e:       00 00 
    0.00 :	   78e50:       48 83 c0 17             add    $0x17,%rax
    0.00 :	   78e54:       48 89 c2                mov    %rax,%rdx
    0.00 :	   78e57:       48 83 e2 f0             and    $0xfffffffffffffff0,%rdx
    0.00 :	   78e5b:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   78e5f:       48 0f 46 54 24 28       cmovbe 0x28(%rsp),%rdx
    0.00 :	   78e65:       48 3b 15 0c b9 2f 00    cmp    0x2fb90c(%rip),%rdx        # 374778 <global_max_fast>
    0.00 :	   78e6c:       48 89 54 24 28          mov    %rdx,0x28(%rsp)
    0.00 :	   78e71:       77 6d                   ja     78ee0 <_int_malloc+0xc0>
    0.00 :	   78e73:       8b 44 24 28             mov    0x28(%rsp),%eax
    0.00 :	   78e77:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   78e7c:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   78e81:       c1 e8 04                shr    $0x4,%eax
    0.00 :	   78e84:       8d 50 fe                lea    -0x2(%rax),%edx
    0.00 :	   78e87:       89 d0                   mov    %edx,%eax
    0.00 :	   78e89:       48 8d 4c c1 08          lea    0x8(%rcx,%rax,8),%rcx
    0.00 :	   78e8e:       48 89 4c 24 38          mov    %rcx,0x38(%rsp)
    0.00 :	   78e93:       4c 8b 7c c3 08          mov    0x8(%rbx,%rax,8),%r15
    0.00 :	   78e98:       4d 85 ff                test   %r15,%r15
    0.00 :	   78e9b:       74 43                   je     78ee0 <_int_malloc+0xc0>
    0.00 :	   78e9d:       49 8b 47 08             mov    0x8(%r15),%rax
    0.00 :	   78ea1:       49 8d 5f 10             lea    0x10(%r15),%rbx
    0.00 :	   78ea5:       c1 e8 04                shr    $0x4,%eax
    0.00 :	   78ea8:       83 e8 02                sub    $0x2,%eax
    0.00 :	   78eab:       39 d0                   cmp    %edx,%eax
    0.00 :	   78ead:       0f 85 91 0d 00 00       jne    79c44 <_int_malloc+0xe24>
    0.00 :	   78eb3:       49 8b 47 10             mov    0x10(%r15),%rax
    0.00 :	   78eb7:       48 8b 54 24 38          mov    0x38(%rsp),%rdx
    0.00 :	   78ebc:       48 89 02                mov    %rax,(%rdx)
    0.00 :	   78ebf:       8b 05 bb b8 2f 00       mov    0x2fb8bb(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   78ec5:       85 c0                   test   %eax,%eax
    0.00 :	   78ec7:       0f 85 60 0d 00 00       jne    79c2d <_int_malloc+0xe0d>
    0.00 :	   78ecd:       48 83 c4 78             add    $0x78,%rsp
    0.00 :	   78ed1:       48 89 d8                mov    %rbx,%rax
    0.00 :	   78ed4:       5b                      pop    %rbx
    0.00 :	   78ed5:       5d                      pop    %rbp
    0.00 :	   78ed6:       41 5c                   pop    %r12
    0.00 :	   78ed8:       41 5d                   pop    %r13
    0.00 :	   78eda:       41 5e                   pop    %r14
    0.00 :	   78edc:       41 5f                   pop    %r15
    0.00 :	   78ede:       c3                      retq   
    0.00 :	   78edf:       90                      nop
    0.00 :	   78ee0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   78ee7:       00 00 
    0.00 :	   78ee9:       0f 87 b1 00 00 00       ja     78fa0 <_int_malloc+0x180>
    0.00 :	   78eef:       8b 4c 24 28             mov    0x28(%rsp),%ecx
    0.00 :	   78ef3:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   78ef8:       c1 e9 04                shr    $0x4,%ecx
    0.00 :	   78efb:       48 83 c3 68             add    $0x68,%rbx
    0.00 :	   78eff:       8d 44 09 fe             lea    -0x2(%rcx,%rcx,1),%eax
    0.00 :	   78f03:       89 4c 24 34             mov    %ecx,0x34(%rsp)
    0.00 :	   78f07:       48 89 5c 24 10          mov    %rbx,0x10(%rsp)
    0.00 :	   78f0c:       89 c0                   mov    %eax,%eax
    0.00 :	   78f0e:       48 8d 4c c3 f0          lea    -0x10(%rbx,%rax,8),%rcx
    0.00 :	   78f13:       4c 8b 79 18             mov    0x18(%rcx),%r15
    0.00 :	   78f17:       49 39 cf                cmp    %rcx,%r15
    0.00 :	   78f1a:       0f 84 ce 00 00 00       je     78fee <_int_malloc+0x1ce>
    0.00 :	   78f20:       4d 85 ff                test   %r15,%r15
    0.00 :	   78f23:       0f 84 c7 08 00 00       je     797f0 <_int_malloc+0x9d0>
    0.00 :	   78f29:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   78f2d:       48 8d 35 5c 65 0c 00    lea    0xc655c(%rip),%rsi        # 13f490 <__PRETTY_FUNCTION__.11129+0x1ab7>
    0.00 :	   78f34:       48 8b 50 10             mov    0x10(%rax),%rdx
    0.00 :	   78f38:       4c 39 fa                cmp    %r15,%rdx
    0.00 :	   78f3b:       0f 85 0a 0d 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   78f41:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   78f46:       48 83 4c 1a 08 01       orq    $0x1,0x8(%rdx,%rbx,1)
    0.00 :	   78f4c:       48 89 41 18             mov    %rax,0x18(%rcx)
    0.00 :	   78f50:       48 89 48 10             mov    %rcx,0x10(%rax)
    0.00 :	   78f54:       48 8d 05 45 af 2f 00    lea    0x2faf45(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   78f5b:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   78f60:       74 05                   je     78f67 <_int_malloc+0x147>
    0.00 :	   78f62:       48 83 4a 08 04          orq    $0x4,0x8(%rdx)
    0.00 :	   78f67:       8b 05 13 b8 2f 00       mov    0x2fb813(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   78f6d:       48 8d 6a 10             lea    0x10(%rdx),%rbp
    0.00 :	   78f71:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   78f74:       85 c0                   test   %eax,%eax
    0.00 :	   78f76:       0f 84 51 ff ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   78f7c:       48 8b 54 24 18          mov    0x18(%rsp),%rdx
    0.00 :	   78f81:       f7 d0                   not    %eax
    0.00 :	   78f83:       48 89 ef                mov    %rbp,%rdi
    0.00 :	   78f86:       0f b6 f0                movzbl %al,%esi
    0.00 :	   78f89:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   78f8c:       e8 df a4 00 00          callq  83470 <__GI_memset>
    0.00 :	   78f91:       e9 37 ff ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   78f96:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   78f9d:       00 00 00 
    0.00 :	   78fa0:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78fa5:       48 c1 e8 06             shr    $0x6,%rax
    0.00 :	   78fa9:       48 83 f8 30             cmp    $0x30,%rax
    0.00 :	   78fad:       0f 86 26 06 00 00       jbe    795d9 <_int_malloc+0x7b9>
    0.00 :	   78fb3:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78fb8:       48 c1 e8 09             shr    $0x9,%rax
    0.00 :	   78fbc:       48 83 f8 14             cmp    $0x14,%rax
    0.00 :	   78fc0:       0f 87 d6 06 00 00       ja     7969c <_int_malloc+0x87c>
    0.00 :	   78fc6:       83 c0 5b                add    $0x5b,%eax
    0.00 :	   78fc9:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   78fcd:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   78fd2:       48 8b 54 24 20          mov    0x20(%rsp),%rdx
    0.00 :	   78fd7:       48 83 c0 68             add    $0x68,%rax
    0.00 :	   78fdb:       48 89 44 24 10          mov    %rax,0x10(%rsp)
    0.00 :	   78fe0:       f6 42 04 01             testb  $0x1,0x4(%rdx)
    0.00 :	   78fe4:       75 08                   jne    78fee <_int_malloc+0x1ce>
    0.00 :	   78fe6:       48 89 d7                mov    %rdx,%rdi
    0.00 :	   78fe9:       e8 52 d8 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   78fee:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   78ff3:       8b 5c 24 28             mov    0x28(%rsp),%ebx
    0.00 :	   78ff7:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   78ffc:       48 83 c1 58             add    $0x58,%rcx
    0.00 :	   79000:       c1 eb 04                shr    $0x4,%ebx
    0.00 :	   79003:       48 83 c0 20             add    $0x20,%rax
    0.00 :	   79007:       48 89 4c 24 60          mov    %rcx,0x60(%rsp)
    0.00 :	   7900c:       89 5c 24 6c             mov    %ebx,0x6c(%rsp)
    0.00 :	   79010:       48 89 44 24 08          mov    %rax,0x8(%rsp)
    0.00 :	   79015:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   79018:       eb 67                   jmp    79081 <_int_malloc+0x261>
    0.00 :	   7901a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79020:       41 89 d5                mov    %edx,%r13d
    0.00 :	   79023:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   79028:       41 c1 ed 04             shr    $0x4,%r13d
    0.00 :	   7902c:       43 8d 44 2d fe          lea    -0x2(%r13,%r13,1),%eax
    0.00 :	   79031:       48 98                   cltq   
    0.00 :	   79033:       48 8d 74 c2 f0          lea    -0x10(%rdx,%rax,8),%rsi
    0.00 :	   79038:       48 8b 5e 10             mov    0x10(%rsi),%rbx
    0.00 :	   7903c:       44 89 e8                mov    %r13d,%eax
    0.00 :	   7903f:       41 83 e5 1f             and    $0x1f,%r13d
    0.00 :	   79043:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	   79048:       44 89 e9                mov    %r13d,%ecx
    0.00 :	   7904b:       c1 f8 05                sar    $0x5,%eax
    0.00 :	   7904e:       41 83 c7 01             add    $0x1,%r15d
    0.00 :	   79052:       d3 e2                   shl    %cl,%edx
    0.00 :	   79054:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79059:       48 98                   cltq   
    0.00 :	   7905b:       09 94 81 58 08 00 00    or     %edx,0x858(%rcx,%rax,4)
    0.00 :	   79062:       41 81 ff 10 27 00 00    cmp    $0x2710,%r15d
    0.00 :	   79069:       49 89 74 24 18          mov    %rsi,0x18(%r12)
    0.00 :	   7906e:       49 89 5c 24 10          mov    %rbx,0x10(%r12)
    0.00 :	   79073:       4c 89 63 18             mov    %r12,0x18(%rbx)
    0.00 :	   79077:       4c 89 66 10             mov    %r12,0x10(%rsi)
    0.00 :	   7907b:       0f 84 3f 03 00 00       je     793c0 <_int_malloc+0x5a0>
    0.00 :	   79081:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79086:       4c 8b 63 18             mov    0x18(%rbx),%r12
    0.00 :	   7908a:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	   7908d:       0f 84 2d 03 00 00       je     793c0 <_int_malloc+0x5a0>
    0.00 :	   79093:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	   79098:       49 8b 5c 24 18          mov    0x18(%r12),%rbx
    0.00 :	   7909d:       48 83 f8 10             cmp    $0x10,%rax
    0.00 :	   790a1:       0f 86 11 05 00 00       jbe    795b8 <_int_malloc+0x798>
    0.00 :	   790a7:       48 8b 54 24 20          mov    0x20(%rsp),%rdx
    0.00 :	   790ac:       48 3b 82 70 08 00 00    cmp    0x870(%rdx),%rax
    0.00 :	   790b3:       0f 87 ff 04 00 00       ja     795b8 <_int_malloc+0x798>
    0.00 :	   790b9:       48 89 c2                mov    %rax,%rdx
    0.00 :	   790bc:       48 83 e2 f8             and    $0xfffffffffffffff8,%rdx
    0.00 :	   790c0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   790c7:       00 00 
    0.00 :	   790c9:       77 0b                   ja     790d6 <_int_malloc+0x2b6>
    0.00 :	   790cb:       48 39 5c 24 60          cmp    %rbx,0x60(%rsp)
    0.00 :	   790d0:       0f 84 aa 01 00 00       je     79280 <_int_malloc+0x460>
    0.00 :	   790d6:       48 8b 4c 24 60          mov    0x60(%rsp),%rcx
    0.00 :	   790db:       48 89 59 18             mov    %rbx,0x18(%rcx)
    0.00 :	   790df:       48 89 4b 10             mov    %rcx,0x10(%rbx)
    0.00 :	   790e3:       48 39 54 24 28          cmp    %rdx,0x28(%rsp)
    0.00 :	   790e8:       0f 84 8a 04 00 00       je     79578 <_int_malloc+0x758>
    0.00 :	   790ee:       48 81 fa ff 03 00 00    cmp    $0x3ff,%rdx
    0.00 :	   790f5:       0f 86 25 ff ff ff       jbe    79020 <_int_malloc+0x200>
    0.00 :	   790fb:       48 89 d0                mov    %rdx,%rax
    0.00 :	   790fe:       48 c1 e8 06             shr    $0x6,%rax
    0.00 :	   79102:       48 83 f8 30             cmp    $0x30,%rax
    0.00 :	   79106:       77 70                   ja     79178 <_int_malloc+0x358>
    0.00 :	   79108:       44 8d 68 30             lea    0x30(%rax),%r13d
    0.00 :	   7910c:       8d 44 00 5e             lea    0x5e(%rax,%rax,1),%eax
    0.00 :	   79110:       48 98                   cltq   
    0.00 :	   79112:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79119:       ff 
    0.00 :	   7911a:       48 8b 6c 24 10          mov    0x10(%rsp),%rbp
    0.00 :	   7911f:       48 01 c5                add    %rax,%rbp
    0.00 :	   79122:       48 8b 5d 10             mov    0x10(%rbp),%rbx
    0.00 :	   79126:       48 39 eb                cmp    %rbp,%rbx
    0.00 :	   79129:       0f 84 11 02 00 00       je     79340 <_int_malloc+0x520>
    0.00 :	   7912f:       48 8b 75 18             mov    0x18(%rbp),%rsi
    0.00 :	   79133:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79136:       49 83 ce 01             or     $0x1,%r14
    0.00 :	   7913a:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	   7913e:       a8 04                   test   $0x4,%al
    0.00 :	   79140:       0f 85 da 00 00 00       jne    79220 <_int_malloc+0x400>
    0.00 :	   79146:       49 39 c6                cmp    %rax,%r14
    0.00 :	   79149:       73 5d                   jae    791a8 <_int_malloc+0x388>
    0.00 :	   7914b:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	   7914f:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   79152:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	   79157:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	   7915b:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   7915f:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   79164:       48 8b 55 10             mov    0x10(%rbp),%rdx
    0.00 :	   79168:       4c 89 60 20             mov    %r12,0x20(%rax)
    0.00 :	   7916c:       4c 89 62 28             mov    %r12,0x28(%rdx)
    0.00 :	   79170:       e9 c7 fe ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   79175:       0f 1f 00                nopl   (%rax)
    0.00 :	   79178:       48 89 d0                mov    %rdx,%rax
    0.00 :	   7917b:       48 c1 e8 09             shr    $0x9,%rax
    0.00 :	   7917f:       48 83 f8 14             cmp    $0x14,%rax
    0.00 :	   79183:       0f 87 c7 00 00 00       ja     79250 <_int_malloc+0x430>
    0.00 :	   79189:       44 8d 68 5b             lea    0x5b(%rax),%r13d
    0.00 :	   7918d:       8d 84 00 b4 00 00 00    lea    0xb4(%rax,%rax,1),%eax
    0.00 :	   79194:       48 98                   cltq   
    0.00 :	   79196:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   7919d:       ff 
    0.00 :	   7919e:       e9 77 ff ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   791a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   791a8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791ac:       a8 04                   test   $0x4,%al
    0.00 :	   791ae:       0f 85 b4 01 00 00       jne    79368 <_int_malloc+0x548>
    0.00 :	   791b4:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   791b8:       49 39 c6                cmp    %rax,%r14
    0.00 :	   791bb:       73 34                   jae    791f1 <_int_malloc+0x3d1>
    0.00 :	   791bd:       48 8b 5b 20             mov    0x20(%rbx),%rbx
    0.00 :	   791c1:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791c5:       a8 04                   test   $0x4,%al
    0.00 :	   791c7:       74 ef                   je     791b8 <_int_malloc+0x398>
    0.00 :	   791c9:       48 8d 0d 57 2c 0c 00    lea    0xc2c57(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   791d0:       48 8d 35 6b 29 0c 00    lea    0xc296b(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   791d7:       48 8d 3d 82 2a 0c 00    lea    0xc2a82(%rip),%rdi        # 13bc60 <__PRETTY_FUNCTION__.14063+0x1f9>
    0.00 :	   791de:       ba 94 11 00 00          mov    $0x1194,%edx
    0.00 :	   791e3:       e8 d8 d5 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   791e8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   791ec:       49 39 c6                cmp    %rax,%r14
    0.00 :	   791ef:       72 cc                   jb     791bd <_int_malloc+0x39d>
    0.00 :	   791f1:       0f 84 61 01 00 00       je     79358 <_int_malloc+0x538>
    0.00 :	   791f7:       49 89 5c 24 20          mov    %rbx,0x20(%r12)
    0.00 :	   791fc:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	   79200:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	   79205:       4c 89 63 28             mov    %r12,0x28(%rbx)
    0.00 :	   79209:       49 8b 44 24 28          mov    0x28(%r12),%rax
    0.00 :	   7920e:       4c 89 60 20             mov    %r12,0x20(%rax)
    0.00 :	   79212:       48 8b 73 18             mov    0x18(%rbx),%rsi
    0.00 :	   79216:       e9 21 fe ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   7921b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   79220:       48 8d 35 1b 29 0c 00    lea    0xc291b(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79227:       48 8d 0d f9 2b 0c 00    lea    0xc2bf9(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7922e:       48 8d 3d 10 2a 0c 00    lea    0xc2a10(%rip),%rdi        # 13bc45 <__PRETTY_FUNCTION__.14063+0x1de>
    0.00 :	   79235:       ba 86 11 00 00          mov    $0x1186,%edx
    0.00 :	   7923a:       e8 81 d5 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7923f:       48 8b 75 18             mov    0x18(%rbp),%rsi
    0.00 :	   79243:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	   79247:       e9 fa fe ff ff          jmpq   79146 <_int_malloc+0x326>
    0.00 :	   7924c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   79250:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79253:       48 c1 e8 0c             shr    $0xc,%rax
    0.00 :	   79257:       48 83 f8 0a             cmp    $0xa,%rax
    0.00 :	   7925b:       0f 87 2f 01 00 00       ja     79390 <_int_malloc+0x570>
    0.00 :	   79261:       44 8d 68 6e             lea    0x6e(%rax),%r13d
    0.00 :	   79265:       8d 84 00 da 00 00 00    lea    0xda(%rax,%rax,1),%eax
    0.00 :	   7926c:       48 98                   cltq   
    0.00 :	   7926e:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79275:       ff 
    0.00 :	   79276:       e9 9f fe ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   7927b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   79280:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79285:       48 8b 48 60             mov    0x60(%rax),%rcx
    0.00 :	   79289:       4c 39 e1                cmp    %r12,%rcx
    0.00 :	   7928c:       0f 85 44 fe ff ff       jne    790d6 <_int_malloc+0x2b6>
    0.00 :	   79292:       48 3b 54 24 08          cmp    0x8(%rsp),%rdx
    0.00 :	   79297:       0f 86 39 fe ff ff       jbe    790d6 <_int_malloc+0x2b6>
    0.00 :	   7929d:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   792a2:       48 8b 44 24 60          mov    0x60(%rsp),%rax
    0.00 :	   792a7:       48 89 d6                mov    %rdx,%rsi
    0.00 :	   792aa:       48 2b 74 24 28          sub    0x28(%rsp),%rsi
    0.00 :	   792af:       49 8d 14 1c             lea    (%r12,%rbx,1),%rdx
    0.00 :	   792b3:       48 89 50 10             mov    %rdx,0x10(%rax)
    0.00 :	   792b7:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   792bb:       48 81 fe ff 03 00 00    cmp    $0x3ff,%rsi
    0.00 :	   792c2:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   792c7:       48 89 53 60             mov    %rdx,0x60(%rbx)
    0.00 :	   792cb:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   792cf:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	   792d3:       76 10                   jbe    792e5 <_int_malloc+0x4c5>
    0.00 :	   792d5:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   792dc:       00 
    0.00 :	   792dd:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   792e4:       00 
    0.00 :	   792e5:       48 8d 05 b4 ab 2f 00    lea    0x2fabb4(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   792ec:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   792f1:       48 8d 69 10             lea    0x10(%rcx),%rbp
    0.00 :	   792f5:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   792f8:       0f 95 c0                setne  %al
    0.00 :	   792fb:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   79301:       0f b6 c0                movzbl %al,%eax
    0.00 :	   79304:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   79308:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   7930d:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79312:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   79316:       48 89 f0                mov    %rsi,%rax
    0.00 :	   79319:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7931d:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   79321:       48 89 34 32             mov    %rsi,(%rdx,%rsi,1)
    0.00 :	   79325:       8b 05 55 b4 2f 00       mov    0x2fb455(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7932b:       85 c0                   test   %eax,%eax
    0.00 :	   7932d:       0f 84 9a fb ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79333:       e9 44 fc ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   79338:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   7933f:       00 
    0.00 :	   79340:       4d 89 64 24 28          mov    %r12,0x28(%r12)
    0.00 :	   79345:       4d 89 64 24 20          mov    %r12,0x20(%r12)
    0.00 :	   7934a:       48 89 de                mov    %rbx,%rsi
    0.00 :	   7934d:       e9 ea fc ff ff          jmpq   7903c <_int_malloc+0x21c>
    0.00 :	   79352:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79358:       48 8b 5b 10             mov    0x10(%rbx),%rbx
    0.00 :	   7935c:       e9 b1 fe ff ff          jmpq   79212 <_int_malloc+0x3f2>
    0.00 :	   79361:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   79368:       48 8d 0d b8 2a 0c 00    lea    0xc2ab8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7936f:       48 8d 35 cc 27 0c 00    lea    0xc27cc(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79376:       48 8d 3d e3 28 0c 00    lea    0xc28e3(%rip),%rdi        # 13bc60 <__PRETTY_FUNCTION__.14063+0x1f9>
    0.00 :	   7937d:       ba 90 11 00 00          mov    $0x1190,%edx
    0.00 :	   79382:       e8 39 d4 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79387:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	   7938b:       e9 28 fe ff ff          jmpq   791b8 <_int_malloc+0x398>
    0.00 :	   79390:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79393:       48 c1 e8 0f             shr    $0xf,%rax
    0.00 :	   79397:       48 83 f8 04             cmp    $0x4,%rax
    0.00 :	   7939b:       0f 87 47 01 00 00       ja     794e8 <_int_malloc+0x6c8>
    0.00 :	   793a1:       44 8d 68 77             lea    0x77(%rax),%r13d
    0.00 :	   793a5:       8d 84 00 ec 00 00 00    lea    0xec(%rax,%rax,1),%eax
    0.00 :	   793ac:       48 98                   cltq   
    0.00 :	   793ae:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   793b5:       ff 
    0.00 :	   793b6:       e9 5f fd ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   793bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	   793c0:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   793c7:       00 00 
    0.00 :	   793c9:       76 2c                   jbe    793f7 <_int_malloc+0x5d7>
    0.00 :	   793cb:       8b 54 24 34             mov    0x34(%rsp),%edx
    0.00 :	   793cf:       48 8b 4c 24 10          mov    0x10(%rsp),%rcx
    0.00 :	   793d4:       8d 44 12 fe             lea    -0x2(%rdx,%rdx,1),%eax
    0.00 :	   793d8:       89 c0                   mov    %eax,%eax
    0.00 :	   793da:       48 8d 54 c1 f0          lea    -0x10(%rcx,%rax,8),%rdx
    0.00 :	   793df:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	   793e3:       48 39 d0                cmp    %rdx,%rax
    0.00 :	   793e6:       74 0f                   je     793f7 <_int_malloc+0x5d7>
    0.00 :	   793e8:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   793ed:       48 3b 58 08             cmp    0x8(%rax),%rbx
    0.00 :	   793f1:       0f 86 df 02 00 00       jbe    796d6 <_int_malloc+0x8b6>
    0.00 :	   793f7:       8b 4c 24 34             mov    0x34(%rsp),%ecx
    0.00 :	   793fb:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79400:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   79405:       83 c1 01                add    $0x1,%ecx
    0.00 :	   79408:       8d 44 09 fe             lea    -0x2(%rcx,%rcx,1),%eax
    0.00 :	   7940c:       41 89 cd                mov    %ecx,%r13d
    0.00 :	   7940f:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	   79412:       41 c1 ed 05             shr    $0x5,%r13d
    0.00 :	   79416:       89 c0                   mov    %eax,%eax
    0.00 :	   79418:       45 89 ee                mov    %r13d,%r14d
    0.00 :	   7941b:       46 8b a4 b3 58 08 00    mov    0x858(%rbx,%r14,4),%r12d
    0.00 :	   79422:       00 
    0.00 :	   79423:       48 8d 6c c2 f0          lea    -0x10(%rdx,%rax,8),%rbp
    0.00 :	   79428:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	   7942d:       d3 e3                   shl    %cl,%ebx
    0.00 :	   7942f:       90                      nop
    0.00 :	   79430:       44 39 e3                cmp    %r12d,%ebx
    0.00 :	   79433:       77 0b                   ja     79440 <_int_malloc+0x620>
    0.00 :	   79435:       85 db                   test   %ebx,%ebx
    0.00 :	   79437:       0f 85 9a 00 00 00       jne    794d7 <_int_malloc+0x6b7>
    0.00 :	   7943d:       0f 1f 00                nopl   (%rax)
    0.00 :	   79440:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	   79444:       41 83 fd 03             cmp    $0x3,%r13d
    0.00 :	   79448:       0f 87 d2 00 00 00       ja     79520 <_int_malloc+0x700>
    0.00 :	   7944e:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79453:       45 89 ee                mov    %r13d,%r14d
    0.00 :	   79456:       46 8b a4 b0 58 08 00    mov    0x858(%rax,%r14,4),%r12d
    0.00 :	   7945d:       00 
    0.00 :	   7945e:       45 85 e4                test   %r12d,%r12d
    0.00 :	   79461:       74 dd                   je     79440 <_int_malloc+0x620>
    0.00 :	   79463:       44 89 e8                mov    %r13d,%eax
    0.00 :	   79466:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	   7946b:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	   79470:       c1 e0 06                shl    $0x6,%eax
    0.00 :	   79473:       83 e8 02                sub    $0x2,%eax
    0.00 :	   79476:       44 85 e3                test   %r12d,%ebx
    0.00 :	   79479:       89 c0                   mov    %eax,%eax
    0.00 :	   7947b:       48 8d 6c c2 f0          lea    -0x10(%rdx,%rax,8),%rbp
    0.00 :	   79480:       74 5a                   je     794dc <_int_malloc+0x6bc>
    0.00 :	   79482:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79488:       4c 8b 7d 18             mov    0x18(%rbp),%r15
    0.00 :	   7948c:       49 39 ef                cmp    %rbp,%r15
    0.00 :	   7948f:       0f 85 50 01 00 00       jne    795e5 <_int_malloc+0x7c5>
    0.00 :	   79495:       89 d8                   mov    %ebx,%eax
    0.00 :	   79497:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   7949c:       48 83 c5 10             add    $0x10,%rbp
    0.00 :	   794a0:       f7 d0                   not    %eax
    0.00 :	   794a2:       01 db                   add    %ebx,%ebx
    0.00 :	   794a4:       41 21 c4                and    %eax,%r12d
    0.00 :	   794a7:       46 89 a4 b1 58 08 00    mov    %r12d,0x858(%rcx,%r14,4)
    0.00 :	   794ae:       00 
    0.00 :	   794af:       e9 7c ff ff ff          jmpq   79430 <_int_malloc+0x610>
    0.00 :	   794b4:       48 8d 0d 6c 29 0c 00    lea    0xc296c(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   794bb:       48 8d 35 80 26 0c 00    lea    0xc2680(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   794c2:       48 8d 3d ae 27 0c 00    lea    0xc27ae(%rip),%rdi        # 13bc77 <__PRETTY_FUNCTION__.14063+0x210>
    0.00 :	   794c9:       ba 15 12 00 00          mov    $0x1215,%edx
    0.00 :	   794ce:       e8 ed d2 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   794d3:       48 83 c5 10             add    $0x10,%rbp
    0.00 :	   794d7:       44 85 e3                test   %r12d,%ebx
    0.00 :	   794da:       75 ac                   jne    79488 <_int_malloc+0x668>
    0.00 :	   794dc:       01 db                   add    %ebx,%ebx
    0.00 :	   794de:       75 f3                   jne    794d3 <_int_malloc+0x6b3>
    0.00 :	   794e0:       eb d2                   jmp    794b4 <_int_malloc+0x694>
    0.00 :	   794e2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   794e8:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   794eb:       41 bd 7e 00 00 00       mov    $0x7e,%r13d
    0.00 :	   794f1:       b8 c0 07 00 00          mov    $0x7c0,%eax
    0.00 :	   794f6:       48 c1 e9 12             shr    $0x12,%rcx
    0.00 :	   794fa:       48 83 f9 02             cmp    $0x2,%rcx
    0.00 :	   794fe:       0f 87 16 fc ff ff       ja     7911a <_int_malloc+0x2fa>
    0.00 :	   79504:       8d 84 09 f6 00 00 00    lea    0xf6(%rcx,%rcx,1),%eax
    0.00 :	   7950b:       44 8d 69 7c             lea    0x7c(%rcx),%r13d
    0.00 :	   7950f:       48 98                   cltq   
    0.00 :	   79511:       48 8d 04 c5 f0 ff ff    lea    -0x10(,%rax,8),%rax
    0.00 :	   79518:       ff 
    0.00 :	   79519:       e9 fc fb ff ff          jmpq   7911a <_int_malloc+0x2fa>
    0.00 :	   7951e:       66 90                   xchg   %ax,%ax
    0.00 :	   79520:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79525:       4c 8b 6b 58             mov    0x58(%rbx),%r13
    0.00 :	   79529:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   7952d:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79530:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79534:       4c 3b 74 24 08          cmp    0x8(%rsp),%r14
    0.00 :	   79539:       0f 83 53 04 00 00       jae    79992 <_int_malloc+0xb72>
    0.00 :	   7953f:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79544:       f6 41 04 01             testb  $0x1,0x4(%rcx)
    0.00 :	   79548:       0f 85 a2 04 00 00       jne    799f0 <_int_malloc+0xbd0>
    0.00 :	   7954e:       48 81 7c 24 28 ff 03    cmpq   $0x3ff,0x28(%rsp)
    0.00 :	   79555:       00 00 
    0.00 :	   79557:       0f 87 1b 01 00 00       ja     79678 <_int_malloc+0x858>
    0.00 :	   7955d:       48 8b 7c 24 20          mov    0x20(%rsp),%rdi
    0.00 :	   79562:       e8 d9 d2 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   79567:       8b 5c 24 6c             mov    0x6c(%rsp),%ebx
    0.00 :	   7956b:       89 5c 24 34             mov    %ebx,0x34(%rsp)
    0.00 :	   7956f:       e9 a1 fa ff ff          jmpq   79015 <_int_malloc+0x1f5>
    0.00 :	   79574:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   79578:       48 8b 5c 24 28          mov    0x28(%rsp),%rbx
    0.00 :	   7957d:       48 8d 05 1c a9 2f 00    lea    0x2fa91c(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   79584:       49 83 4c 1c 08 01       orq    $0x1,0x8(%r12,%rbx,1)
    0.00 :	   7958a:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   7958f:       74 06                   je     79597 <_int_malloc+0x777>
    0.00 :	   79591:       49 83 4c 24 08 04       orq    $0x4,0x8(%r12)
    0.00 :	   79597:       8b 05 e3 b1 2f 00       mov    0x2fb1e3(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7959d:       49 8d 6c 24 10          lea    0x10(%r12),%rbp
    0.00 :	   795a2:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   795a5:       85 c0                   test   %eax,%eax
    0.00 :	   795a7:       0f 84 20 f9 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   795ad:       e9 ca f9 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   795b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   795b8:       8b 3d 4a 8b 2f 00       mov    0x2f8b4a(%rip),%edi        # 372108 <check_action>
    0.00 :	   795be:       49 8d 54 24 10          lea    0x10(%r12),%rdx
    0.00 :	   795c3:       48 8d 35 5f 26 0c 00    lea    0xc265f(%rip),%rsi        # 13bc29 <__PRETTY_FUNCTION__.14063+0x1c2>
    0.00 :	   795ca:       e8 91 cf ff ff          callq  76560 <malloc_printerr>
    0.00 :	   795cf:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	   795d4:       e9 e0 fa ff ff          jmpq   790b9 <_int_malloc+0x299>
    0.00 :	   795d9:       83 c0 30                add    $0x30,%eax
    0.00 :	   795dc:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   795e0:       e9 e8 f9 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   795e5:       4d 8b 67 08             mov    0x8(%r15),%r12
    0.00 :	   795e9:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   795ed:       4c 39 64 24 28          cmp    %r12,0x28(%rsp)
    0.00 :	   795f2:       0f 87 50 03 00 00       ja     79948 <_int_malloc+0xb28>
    0.00 :	   795f8:       49 8b 5f 10             mov    0x10(%r15),%rbx
    0.00 :	   795fc:       4d 89 e5                mov    %r12,%r13
    0.00 :	   795ff:       4c 2b 6c 24 28          sub    0x28(%rsp),%r13
    0.00 :	   79604:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   79608:       48 8b 6b 18             mov    0x18(%rbx),%rbp
    0.00 :	   7960c:       4c 39 fd                cmp    %r15,%rbp
    0.00 :	   7960f:       0f 85 de 06 00 00       jne    79cf3 <_int_malloc+0xed3>
    0.00 :	   79615:       4c 3b 78 10             cmp    0x10(%rax),%r15
    0.00 :	   79619:       0f 85 d4 06 00 00       jne    79cf3 <_int_malloc+0xed3>
    0.00 :	   7961f:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	   79623:       48 89 58 10             mov    %rbx,0x10(%rax)
    0.00 :	   79627:       49 81 7f 08 ff 03 00    cmpq   $0x3ff,0x8(%r15)
    0.00 :	   7962e:       00 
    0.00 :	   7962f:       0f 87 89 02 00 00       ja     798be <_int_malloc+0xa9e>
    0.00 :	   79635:       49 83 fd 1f             cmp    $0x1f,%r13
    0.00 :	   79639:       0f 87 de 01 00 00       ja     7981d <_int_malloc+0x9fd>
    0.00 :	   7963f:       4b 83 4c 27 08 01       orq    $0x1,0x8(%r15,%r12,1)
    0.00 :	   79645:       48 8d 05 54 a8 2f 00    lea    0x2fa854(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   7964c:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   79651:       74 05                   je     79658 <_int_malloc+0x838>
    0.00 :	   79653:       49 83 4f 08 04          orq    $0x4,0x8(%r15)
    0.00 :	   79658:       8b 05 22 b1 2f 00       mov    0x2fb122(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   7965e:       49 8d 6f 10             lea    0x10(%r15),%rbp
    0.00 :	   79662:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   79665:       85 c0                   test   %eax,%eax
    0.00 :	   79667:       0f 84 60 f8 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   7966d:       e9 0a f9 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   79672:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   79678:       48 8d 0d a8 27 0c 00    lea    0xc27a8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7967f:       48 8d 35 bc 24 0c 00    lea    0xc24bc(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79686:       48 8d 3d 13 5f 0c 00    lea    0xc5f13(%rip),%rdi        # 13f5a0 <__PRETTY_FUNCTION__.11129+0x1bc7>
    0.00 :	   7968d:       ba 90 12 00 00          mov    $0x1290,%edx
    0.00 :	   79692:       e8 29 d1 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79697:       e9 c1 fe ff ff          jmpq   7955d <_int_malloc+0x73d>
    0.00 :	   7969c:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   796a1:       48 c1 e8 0c             shr    $0xc,%rax
    0.00 :	   796a5:       48 83 f8 0a             cmp    $0xa,%rax
    0.00 :	   796a9:       76 1f                   jbe    796ca <_int_malloc+0x8aa>
    0.00 :	   796ab:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   796b0:       48 c1 e8 0f             shr    $0xf,%rax
    0.00 :	   796b4:       48 83 f8 04             cmp    $0x4,%rax
    0.00 :	   796b8:       0f 87 ae 02 00 00       ja     7996c <_int_malloc+0xb4c>
    0.00 :	   796be:       83 c0 77                add    $0x77,%eax
    0.00 :	   796c1:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   796c5:       e9 03 f9 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   796ca:       83 c0 6e                add    $0x6e,%eax
    0.00 :	   796cd:       89 44 24 34             mov    %eax,0x34(%rsp)
    0.00 :	   796d1:       e9 f7 f8 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   796d6:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   796da:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	   796de:       49 89 cc                mov    %rcx,%r12
    0.00 :	   796e1:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   796e5:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	   796e8:       76 16                   jbe    79700 <_int_malloc+0x8e0>
    0.00 :	   796ea:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	   796ee:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	   796f2:       49 89 cc                mov    %rcx,%r12
    0.00 :	   796f5:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	   796f9:       4c 39 64 24 28          cmp    %r12,0x28(%rsp)
    0.00 :	   796fe:       77 ea                   ja     796ea <_int_malloc+0x8ca>
    0.00 :	   79700:       48 39 42 18             cmp    %rax,0x18(%rdx)
    0.00 :	   79704:       0f 84 9a 0a 00 00       je     7a1a4 <_int_malloc+0x1384>
    0.00 :	   7970a:       4c 8b 78 10             mov    0x10(%rax),%r15
    0.00 :	   7970e:       49 39 4f 08             cmp    %rcx,0x8(%r15)
    0.00 :	   79712:       0f 84 83 0a 00 00       je     7a19b <_int_malloc+0x137b>
    0.00 :	   79718:       4c 89 fb                mov    %r15,%rbx
    0.00 :	   7971b:       49 89 c7                mov    %rax,%r15
    0.00 :	   7971e:       48 8b 6b 18             mov    0x18(%rbx),%rbp
    0.00 :	   79722:       4d 89 e5                mov    %r12,%r13
    0.00 :	   79725:       4c 2b 6c 24 28          sub    0x28(%rsp),%r13
    0.00 :	   7972a:       49 8b 47 18             mov    0x18(%r15),%rax
    0.00 :	   7972e:       4c 39 fd                cmp    %r15,%rbp
    0.00 :	   79731:       0f 85 20 0a 00 00       jne    7a157 <_int_malloc+0x1337>
    0.00 :	   79737:       4c 3b 78 10             cmp    0x10(%rax),%r15
    0.00 :	   7973b:       0f 85 16 0a 00 00       jne    7a157 <_int_malloc+0x1337>
    0.00 :	   79741:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	   79745:       48 89 58 10             mov    %rbx,0x10(%rax)
    0.00 :	   79749:       49 81 7f 08 ff 03 00    cmpq   $0x3ff,0x8(%r15)
    0.00 :	   79750:       00 
    0.00 :	   79751:       0f 87 81 09 00 00       ja     7a0d8 <_int_malloc+0x12b8>
    0.00 :	   79757:       49 83 fd 1f             cmp    $0x1f,%r13
    0.00 :	   7975b:       0f 86 de fe ff ff       jbe    7963f <_int_malloc+0x81f>
    0.00 :	   79761:       48 8b 54 24 60          mov    0x60(%rsp),%rdx
    0.00 :	   79766:       48 8d 35 b3 5d 0c 00    lea    0xc5db3(%rip),%rsi        # 13f520 <__PRETTY_FUNCTION__.11129+0x1b47>
    0.00 :	   7976d:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	   79771:       48 3b 50 18             cmp    0x18(%rax),%rdx
    0.00 :	   79775:       0f 85 d0 04 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   7977b:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   79780:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79785:       49 81 fd ff 03 00 00    cmp    $0x3ff,%r13
    0.00 :	   7978c:       49 8d 14 0f             lea    (%r15,%rcx,1),%rdx
    0.00 :	   79790:       48 89 5a 18             mov    %rbx,0x18(%rdx)
    0.00 :	   79794:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   79798:       48 89 53 10             mov    %rdx,0x10(%rbx)
    0.00 :	   7979c:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   797a0:       76 10                   jbe    797b2 <_int_malloc+0x992>
    0.00 :	   797a2:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   797a9:       00 
    0.00 :	   797aa:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   797b1:       00 
    0.00 :	   797b2:       48 8d 05 e7 a6 2f 00    lea    0x2fa6e7(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   797b9:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   797be:       0f 95 c0                setne  %al
    0.00 :	   797c1:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   797c7:       0f b6 c0                movzbl %al,%eax
    0.00 :	   797ca:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   797ce:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   797d3:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   797d8:       49 89 47 08             mov    %rax,0x8(%r15)
    0.00 :	   797dc:       4c 89 e8                mov    %r13,%rax
    0.00 :	   797df:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   797e3:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   797e7:       4e 89 2c 2a             mov    %r13,(%rdx,%r13,1)
    0.00 :	   797eb:       e9 68 fe ff ff          jmpq   79658 <_int_malloc+0x838>
    0.00 :	   797f0:       48 8b 7c 24 20          mov    0x20(%rsp),%rdi
    0.00 :	   797f5:       e8 46 d0 ff ff          callq  76840 <malloc_consolidate>
    0.00 :	   797fa:       e9 ef f7 ff ff          jmpq   78fee <_int_malloc+0x1ce>
    0.00 :	   797ff:       48 8b 15 32 86 2f 00    mov    0x2f8632(%rip),%rdx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   79806:       64 48 8b 04 25 00 00    mov    %fs:0x0,%rax
    0.00 :	   7980d:       00 00 
    0.00 :	   7980f:       31 db                   xor    %ebx,%ebx
    0.00 :	   79811:       c7 04 10 0c 00 00 00    movl   $0xc,(%rax,%rdx,1)
    0.00 :	   79818:       e9 b0 f6 ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   7981d:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79822:       48 8d 35 4f 5d 0c 00    lea    0xc5d4f(%rip),%rsi        # 13f578 <__PRETTY_FUNCTION__.11129+0x1b9f>
    0.00 :	   79829:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	   7982d:       48 3b 58 18             cmp    0x18(%rax),%rbx
    0.00 :	   79831:       0f 85 14 04 00 00       jne    79c4b <_int_malloc+0xe2b>
    0.00 :	   79837:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   7983c:       48 8b 5c 24 60          mov    0x60(%rsp),%rbx
    0.00 :	   79841:       49 8d 14 0f             lea    (%r15,%rcx,1),%rdx
    0.00 :	   79845:       48 81 f9 ff 03 00 00    cmp    $0x3ff,%rcx
    0.00 :	   7984c:       48 89 5a 18             mov    %rbx,0x18(%rdx)
    0.00 :	   79850:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	   79854:       48 89 53 10             mov    %rdx,0x10(%rbx)
    0.00 :	   79858:       48 89 50 18             mov    %rdx,0x18(%rax)
    0.00 :	   7985c:       77 09                   ja     79867 <_int_malloc+0xa47>
    0.00 :	   7985e:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79863:       48 89 50 60             mov    %rdx,0x60(%rax)
    0.00 :	   79867:       49 81 fd ff 03 00 00    cmp    $0x3ff,%r13
    0.00 :	   7986e:       76 10                   jbe    79880 <_int_malloc+0xa60>
    0.00 :	   79870:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	   79877:       00 
    0.00 :	   79878:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	   7987f:       00 
    0.00 :	   79880:       48 8d 05 19 a6 2f 00    lea    0x2fa619(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   79887:       48 39 44 24 20          cmp    %rax,0x20(%rsp)
    0.00 :	   7988c:       0f 95 c0                setne  %al
    0.00 :	   7988f:       48 83 4c 24 28 01       orq    $0x1,0x28(%rsp)
    0.00 :	   79895:       0f b6 c0                movzbl %al,%eax
    0.00 :	   79898:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	   7989c:       48 09 44 24 28          or     %rax,0x28(%rsp)
    0.00 :	   798a1:       4c 89 e8                mov    %r13,%rax
    0.00 :	   798a4:       48 8b 4c 24 28          mov    0x28(%rsp),%rcx
    0.00 :	   798a9:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   798ad:       49 89 4f 08             mov    %rcx,0x8(%r15)
    0.00 :	   798b1:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   798b5:       4e 89 2c 2a             mov    %r13,(%rdx,%r13,1)
    0.00 :	   798b9:       e9 9a fd ff ff          jmpq   79658 <_int_malloc+0x838>
    0.00 :	   798be:       49 8b 47 20             mov    0x20(%r15),%rax
    0.00 :	   798c2:       48 85 c0                test   %rax,%rax
    0.00 :	   798c5:       0f 84 6a fd ff ff       je     79635 <_int_malloc+0x815>
    0.00 :	   798cb:       4c 3b 78 28             cmp    0x28(%rax),%r15
    0.00 :	   798cf:       74 1f                   je     798f0 <_int_malloc+0xad0>
    0.00 :	   798d1:       48 8d 0d 4f 25 0c 00    lea    0xc254f(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   798d8:       48 8d 35 63 22 0c 00    lea    0xc2263(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   798df:       48 8d 3d da 5b 0c 00    lea    0xc5bda(%rip),%rdi        # 13f4c0 <__PRETTY_FUNCTION__.11129+0x1ae7>
    0.00 :	   798e6:       ba 2b 12 00 00          mov    $0x122b,%edx
    0.00 :	   798eb:       e8 d0 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   798f0:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   798f4:       48 3b 68 20             cmp    0x20(%rax),%rbp
    0.00 :	   798f8:       74 1f                   je     79919 <_int_malloc+0xaf9>
    0.00 :	   798fa:       48 8d 0d 26 25 0c 00    lea    0xc2526(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   79901:       48 8d 35 3a 22 0c 00    lea    0xc223a(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79908:       48 8d 3d e1 5b 0c 00    lea    0xc5be1(%rip),%rdi        # 13f4f0 <__PRETTY_FUNCTION__.11129+0x1b17>
    0.00 :	   7990f:       ba 2b 12 00 00          mov    $0x122b,%edx
    0.00 :	   79914:       e8 a7 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79919:       48 83 7b 20 00          cmpq   $0x0,0x20(%rbx)
    0.00 :	   7991e:       0f 84 e9 03 00 00       je     79d0d <_int_malloc+0xeed>
    0.00 :	   79924:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	   79928:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7992c:       48 89 42 28             mov    %rax,0x28(%rdx)
    0.00 :	   79930:       48 8b 55 28             mov    0x28(%rbp),%rdx
    0.00 :	   79934:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79938:       48 89 42 20             mov    %rax,0x20(%rdx)
    0.00 :	   7993c:       e9 f4 fc ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79941:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   79948:       48 8d 0d d8 24 0c 00    lea    0xc24d8(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7994f:       48 8d 35 ec 21 0c 00    lea    0xc21ec(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79956:       48 8d 3d eb 5b 0c 00    lea    0xc5beb(%rip),%rdi        # 13f548 <__PRETTY_FUNCTION__.11129+0x1b6f>
    0.00 :	   7995d:       ba 26 12 00 00          mov    $0x1226,%edx
    0.00 :	   79962:       e8 59 ce ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79967:       e9 8c fc ff ff          jmpq   795f8 <_int_malloc+0x7d8>
    0.00 :	   7996c:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79971:       c7 44 24 34 7e 00 00    movl   $0x7e,0x34(%rsp)
    0.00 :	   79978:       00 
    0.00 :	   79979:       48 c1 e8 12             shr    $0x12,%rax
    0.00 :	   7997d:       8d 50 7c                lea    0x7c(%rax),%edx
    0.00 :	   79980:       48 83 f8 03             cmp    $0x3,%rax
    0.00 :	   79984:       0f 43 54 24 34          cmovae 0x34(%rsp),%edx
    0.00 :	   79989:       89 54 24 34             mov    %edx,0x34(%rsp)
    0.00 :	   7998d:       e9 3b f6 ff ff          jmpq   78fcd <_int_malloc+0x1ad>
    0.00 :	   79992:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79997:       31 d2                   xor    %edx,%edx
    0.00 :	   79999:       49 8d 6d 10             lea    0x10(%r13),%rbp
    0.00 :	   7999d:       49 8d 4c 05 00          lea    0x0(%r13,%rax,1),%rcx
    0.00 :	   799a2:       48 8d 05 f7 a4 2f 00    lea    0x2fa4f7(%rip),%rax        # 373ea0 <main_arena>
    0.00 :	   799a9:       48 89 4b 58             mov    %rcx,0x58(%rbx)
    0.00 :	   799ad:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   799b0:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   799b5:       0f 95 c2                setne  %dl
    0.00 :	   799b8:       48 89 eb                mov    %rbp,%rbx
    0.00 :	   799bb:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   799bf:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   799c3:       48 09 d0                or     %rdx,%rax
    0.00 :	   799c6:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   799ca:       4c 2b 74 24 28          sub    0x28(%rsp),%r14
    0.00 :	   799cf:       49 83 ce 01             or     $0x1,%r14
 ??:0
  100.00 :	   799d3:       4c 89 71 08             mov    %r14,0x8(%rcx)
    0.00 :	   799d7:       8b 05 a3 ad 2f 00       mov    0x2fada3(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   799dd:       85 c0                   test   %eax,%eax
    0.00 :	   799df:       0f 84 e8 f4 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   799e5:       e9 92 f5 ff ff          jmpq   78f7c <_int_malloc+0x15c>
    0.00 :	   799ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	   799f0:       8b 05 5a ad 2f 00       mov    0x2fad5a(%rip),%eax        # 374750 <mp_+0x30>
    0.00 :	   799f6:       83 e8 01                sub    $0x1,%eax
    0.00 :	   799f9:       48 89 44 24 40          mov    %rax,0x40(%rsp)
    0.00 :	   799fe:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79a03:       48 3b 05 26 ad 2f 00    cmp    0x2fad26(%rip),%rax        # 374730 <mp_+0x10>
    0.00 :	   79a0a:       0f 82 db 02 00 00       jb     79ceb <_int_malloc+0xecb>
    0.00 :	   79a10:       8b 05 2a ad 2f 00       mov    0x2fad2a(%rip),%eax        # 374740 <mp_+0x20>
    0.00 :	   79a16:       3b 05 28 ad 2f 00       cmp    0x2fad28(%rip),%eax        # 374744 <mp_+0x24>
    0.00 :	   79a1c:       0f 8d c9 02 00 00       jge    79ceb <_int_malloc+0xecb>
    0.00 :	   79a22:       48 8b 4c 24 40          mov    0x40(%rsp),%rcx
    0.00 :	   79a27:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79a2c:       48 89 c8                mov    %rcx,%rax
    0.00 :	   79a2f:       48 8d 6c 11 08          lea    0x8(%rcx,%rdx,1),%rbp
    0.00 :	   79a34:       48 f7 d0                not    %rax
    0.00 :	   79a37:       48 21 c5                and    %rax,%rbp
    0.00 :	   79a3a:       48 39 ea                cmp    %rbp,%rdx
    0.00 :	   79a3d:       0f 82 68 03 00 00       jb     79dab <_int_malloc+0xf8b>
    0.00 :	   79a43:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79a48:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79a4e:       4c 8b 6b 58             mov    0x58(%rbx),%r13
    0.00 :	   79a52:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   79a56:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79a59:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79a5d:       4d 85 f6                test   %r14,%r14
    0.00 :	   79a60:       4b 8d 4c 35 00          lea    0x0(%r13,%r14,1),%rcx
    0.00 :	   79a65:       0f 95 44 24 5f          setne  0x5f(%rsp)
    0.00 :	   79a6a:       4c 39 6c 24 60          cmp    %r13,0x60(%rsp)
    0.00 :	   79a6f:       48 89 4c 24 50          mov    %rcx,0x50(%rsp)
    0.00 :	   79a74:       0f 84 c6 07 00 00       je     7a240 <_int_malloc+0x1420>
    0.00 :	   79a7a:       49 83 fe 1f             cmp    $0x1f,%r14
    0.00 :	   79a7e:       76 11                   jbe    79a91 <_int_malloc+0xc71>
    0.00 :	   79a80:       83 e2 01                and    $0x1,%edx
    0.00 :	   79a83:       74 0c                   je     79a91 <_int_malloc+0xc71>
    0.00 :	   79a85:       48 8b 5c 24 40          mov    0x40(%rsp),%rbx
    0.00 :	   79a8a:       48 85 5c 24 50          test   %rbx,0x50(%rsp)
    0.00 :	   79a8f:       74 1f                   je     79ab0 <_int_malloc+0xc90>
    0.00 :	   79a91:       48 8d 0d 9b 23 0c 00    lea    0xc239b(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79a98:       48 8d 35 a3 20 0c 00    lea    0xc20a3(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79a9f:       48 8d 3d a2 5b 0c 00    lea    0xc5ba2(%rip),%rdi        # 13f648 <__PRETTY_FUNCTION__.11129+0x1c6f>
    0.00 :	   79aa6:       ba 13 0c 00 00          mov    $0xc13,%edx
    0.00 :	   79aab:       e8 10 cd ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79ab0:       4c 39 74 24 08          cmp    %r14,0x8(%rsp)
    0.00 :	   79ab5:       77 1f                   ja     79ad6 <_int_malloc+0xcb6>
    0.00 :	   79ab7:       48 8d 0d 75 23 0c 00    lea    0xc2375(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79abe:       48 8d 35 7d 20 0c 00    lea    0xc207d(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79ac5:       48 8d 3d fc 5c 0c 00    lea    0xc5cfc(%rip),%rdi        # 13f7c8 <__PRETTY_FUNCTION__.11129+0x1def>
    0.00 :	   79acc:       ba 16 0c 00 00          mov    $0xc16,%edx
    0.00 :	   79ad1:       e8 ea cc ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79ad6:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79adb:       f6 40 04 01             testb  $0x1,0x4(%rax)
    0.00 :	   79adf:       75 1f                   jne    79b00 <_int_malloc+0xce0>
    0.00 :	   79ae1:       48 8d 0d 4b 23 0c 00    lea    0xc234b(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79ae8:       48 8d 35 53 20 0c 00    lea    0xc2053(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79aef:       48 8d 3d 8a 21 0c 00    lea    0xc218a(%rip),%rdi        # 13bc80 <__PRETTY_FUNCTION__.14063+0x219>
    0.00 :	   79af6:       ba 1a 0c 00 00          mov    $0xc1a,%edx
    0.00 :	   79afb:       e8 c0 cc ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79b00:       48 8d 15 99 a3 2f 00    lea    0x2fa399(%rip),%rdx        # 373ea0 <main_arena>
    0.00 :	   79b07:       48 39 54 24 20          cmp    %rdx,0x20(%rsp)
    0.00 :	   79b0c:       0f 84 58 03 00 00       je     79e6a <_int_malloc+0x104a>
    0.00 :	   79b12:       48 8b 5c 24 08          mov    0x8(%rsp),%rbx
    0.00 :	   79b17:       4c 89 ed                mov    %r13,%rbp
    0.00 :	   79b1a:       48 81 e5 00 00 00 fc    and    $0xfffffffffc000000,%rbp
    0.00 :	   79b21:       4c 8b 65 10             mov    0x10(%rbp),%r12
    0.00 :	   79b25:       4c 29 f3                sub    %r14,%rbx
    0.00 :	   79b28:       48 85 db                test   %rbx,%rbx
    0.00 :	   79b2b:       0f 8e 31 01 00 00       jle    79c62 <_int_malloc+0xe42>
    0.00 :	   79b31:       e8 4a a6 05 00          callq  d4180 <__getpagesize>
    0.00 :	   79b36:       83 e8 01                sub    $0x1,%eax
    0.00 :	   79b39:       48 98                   cltq   
    0.00 :	   79b3b:       48 8d 14 03             lea    (%rbx,%rax,1),%rdx
    0.00 :	   79b3f:       48 f7 d0                not    %rax
    0.00 :	   79b42:       48 21 c2                and    %rax,%rdx
    0.00 :	   79b45:       4a 8d 1c 22             lea    (%rdx,%r12,1),%rbx
    0.00 :	   79b49:       48 81 fb 00 00 00 04    cmp    $0x4000000,%rbx
    0.00 :	   79b50:       0f 87 0c 01 00 00       ja     79c62 <_int_malloc+0xe42>
    0.00 :	   79b56:       48 8b 45 18             mov    0x18(%rbp),%rax
    0.00 :	   79b5a:       48 39 c3                cmp    %rax,%rbx
    0.00 :	   79b5d:       0f 87 22 02 00 00       ja     79d85 <_int_malloc+0xf65>
    0.00 :	   79b63:       48 89 5d 10             mov    %rbx,0x10(%rbp)
    0.00 :	   79b67:       48 8b 4c 24 20          mov    0x20(%rsp),%rcx
    0.00 :	   79b6c:       4c 29 e3                sub    %r12,%rbx
    0.00 :	   79b6f:       48 01 99 70 08 00 00    add    %rbx,0x870(%rcx)
    0.00 :	   79b76:       48 8b 05 13 ac 2f 00    mov    0x2fac13(%rip),%rax        # 374790 <arena_mem>
    0.00 :	   79b7d:       48 03 45 10             add    0x10(%rbp),%rax
    0.00 :	   79b81:       4c 29 e0                sub    %r12,%rax
    0.00 :	   79b84:       48 89 05 05 ac 2f 00    mov    %rax,0x2fac05(%rip)        # 374790 <arena_mem>
    0.00 :	   79b8b:       48 03 6d 10             add    0x10(%rbp),%rbp
    0.00 :	   79b8f:       4c 29 ed                sub    %r13,%rbp
    0.00 :	   79b92:       48 83 cd 01             or     $0x1,%rbp
    0.00 :	   79b96:       49 89 6d 08             mov    %rbp,0x8(%r13)
    0.00 :	   79b9a:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79b9f:       48 8b 83 70 08 00 00    mov    0x870(%rbx),%rax
    0.00 :	   79ba6:       48 3b 83 78 08 00 00    cmp    0x878(%rbx),%rax
    0.00 :	   79bad:       76 07                   jbe    79bb6 <_int_malloc+0xd96>
    0.00 :	   79baf:       48 89 83 78 08 00 00    mov    %rax,0x878(%rbx)
    0.00 :	   79bb6:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79bbb:       48 8b 78 58             mov    0x58(%rax),%rdi
    0.00 :	   79bbf:       48 8b 77 08             mov    0x8(%rdi),%rsi
    0.00 :	   79bc3:       48 83 e6 f8             and    $0xfffffffffffffff8,%rsi
    0.00 :	   79bc7:       48 39 74 24 08          cmp    %rsi,0x8(%rsp)
    0.00 :	   79bcc:       0f 87 2d fc ff ff       ja     797ff <_int_malloc+0x9df>
    0.00 :	   79bd2:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79bd7:       48 8d 1d c2 a2 2f 00    lea    0x2fa2c2(%rip),%rbx        # 373ea0 <main_arena>
    0.00 :	   79bde:       48 8d 0c 17             lea    (%rdi,%rdx,1),%rcx
    0.00 :	   79be2:       31 d2                   xor    %edx,%edx
    0.00 :	   79be4:       48 39 d8                cmp    %rbx,%rax
    0.00 :	   79be7:       0f 95 c2                setne  %dl
    0.00 :	   79bea:       48 8d 5f 10             lea    0x10(%rdi),%rbx
    0.00 :	   79bee:       48 89 48 58             mov    %rcx,0x58(%rax)
    0.00 :	   79bf2:       48 8b 44 24 28          mov    0x28(%rsp),%rax
    0.00 :	   79bf7:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	   79bfb:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79bff:       48 09 d0                or     %rdx,%rax
    0.00 :	   79c02:       48 89 47 08             mov    %rax,0x8(%rdi)
    0.00 :	   79c06:       48 89 f0                mov    %rsi,%rax
    0.00 :	   79c09:       48 2b 44 24 28          sub    0x28(%rsp),%rax
    0.00 :	   79c0e:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79c12:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   79c16:       48 85 db                test   %rbx,%rbx
    0.00 :	   79c19:       0f 84 ae f2 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79c1f:       8b 05 5b ab 2f 00       mov    0x2fab5b(%rip),%eax        # 374780 <perturb_byte>
    0.00 :	   79c25:       85 c0                   test   %eax,%eax
    0.00 :	   79c27:       0f 84 a0 f2 ff ff       je     78ecd <_int_malloc+0xad>
    0.00 :	   79c2d:       48 8b 54 24 18          mov    0x18(%rsp),%rdx
    0.00 :	   79c32:       f7 d0                   not    %eax
    0.00 :	   79c34:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79c37:       0f b6 f0                movzbl %al,%esi
    0.00 :	   79c3a:       e8 31 98 00 00          callq  83470 <__GI_memset>
    0.00 :	   79c3f:       e9 89 f2 ff ff          jmpq   78ecd <_int_malloc+0xad>
    0.00 :	   79c44:       48 8d 35 1d 58 0c 00    lea    0xc581d(%rip),%rsi        # 13f468 <__PRETTY_FUNCTION__.11129+0x1a8f>
    0.00 :	   79c4b:       49 8d 5f 10             lea    0x10(%r15),%rbx
    0.00 :	   79c4f:       8b 3d b3 84 2f 00       mov    0x2f84b3(%rip),%edi        # 372108 <check_action>
    0.00 :	   79c55:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79c58:       e8 03 c9 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   79c5d:       e9 51 f2 ff ff          jmpq   78eb3 <_int_malloc+0x93>
    0.00 :	   79c62:       48 8b 7c 24 28          mov    0x28(%rsp),%rdi
    0.00 :	   79c67:       48 8b 35 ba aa 2f 00    mov    0x2faaba(%rip),%rsi        # 374728 <mp_+0x8>
    0.00 :	   79c6e:       48 83 c7 40             add    $0x40,%rdi
    0.00 :	   79c72:       e8 69 ec ff ff          callq  788e0 <new_heap>
    0.00 :	   79c77:       48 85 c0                test   %rax,%rax
    0.00 :	   79c7a:       48 89 c1                mov    %rax,%rcx
    0.00 :	   79c7d:       0f 84 dc 00 00 00       je     79d5f <_int_malloc+0xf3f>
    0.00 :	   79c83:       48 8b 5c 24 20          mov    0x20(%rsp),%rbx
    0.00 :	   79c88:       48 8d 51 20             lea    0x20(%rcx),%rdx
    0.00 :	   79c8c:       48 89 68 08             mov    %rbp,0x8(%rax)
    0.00 :	   79c90:       48 89 18                mov    %rbx,(%rax)
    0.00 :	   79c93:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	   79c97:       48 01 83 70 08 00 00    add    %rax,0x870(%rbx)
    0.00 :	   79c9e:       48 8b 41 10             mov    0x10(%rcx),%rax
    0.00 :	   79ca2:       48 01 05 e7 aa 2f 00    add    %rax,0x2faae7(%rip)        # 374790 <arena_mem>
    0.00 :	   79ca9:       48 89 53 58             mov    %rdx,0x58(%rbx)
    0.00 :	   79cad:       48 8b 41 10             mov    0x10(%rcx),%rax
    0.00 :	   79cb1:       48 83 e8 20             sub    $0x20,%rax
    0.00 :	   79cb5:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79cb9:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :	   79cbd:       49 8d 46 e0             lea    -0x20(%r14),%rax
    0.00 :	   79cc1:       48 8d 50 10             lea    0x10(%rax),%rdx
    0.00 :	   79cc5:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   79cc9:       49 8d 4c 15 00          lea    0x0(%r13,%rdx,1),%rcx
    0.00 :	   79cce:       48 c7 41 08 01 00 00    movq   $0x1,0x8(%rcx)
    0.00 :	   79cd5:       00 
    0.00 :	   79cd6:       77 5f                   ja     79d37 <_int_malloc+0xf17>
    0.00 :	   79cd8:       48 89 d0                mov    %rdx,%rax
    0.00 :	   79cdb:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   79cdf:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   79ce3:       48 89 11                mov    %rdx,(%rcx)
    0.00 :	   79ce6:       e9 af fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79ceb:       45 31 ff                xor    %r15d,%r15d
    0.00 :	   79cee:       e9 6a fd ff ff          jmpq   79a5d <_int_malloc+0xc3d>
    0.00 :	   79cf3:       8b 3d 0f 84 2f 00       mov    0x2f840f(%rip),%edi        # 372108 <check_action>
    0.00 :	   79cf9:       48 8d 35 25 1e 0c 00    lea    0xc1e25(%rip),%rsi        # 13bb25 <__PRETTY_FUNCTION__.14063+0xbe>
    0.00 :	   79d00:       4c 89 fa                mov    %r15,%rdx
    0.00 :	   79d03:       e8 58 c8 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   79d08:       e9 28 f9 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d0d:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79d11:       48 39 c5                cmp    %rax,%rbp
    0.00 :	   79d14:       74 5f                   je     79d75 <_int_malloc+0xf55>
    0.00 :	   79d16:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	   79d1a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   79d1e:       48 89 43 28             mov    %rax,0x28(%rbx)
    0.00 :	   79d22:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   79d26:       48 89 58 28             mov    %rbx,0x28(%rax)
    0.00 :	   79d2a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   79d2e:       48 89 58 20             mov    %rbx,0x20(%rax)
    0.00 :	   79d32:       e9 fe f8 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d37:       48 83 c8 05             or     $0x5,%rax
    0.00 :	   79d3b:       4b c7 44 35 e8 11 00    movq   $0x11,-0x18(%r13,%r14,1)
    0.00 :	   79d42:       00 00 
    0.00 :	   79d44:       4c 89 ee                mov    %r13,%rsi
    0.00 :	   79d47:       48 c7 01 10 00 00 00    movq   $0x10,(%rcx)
    0.00 :	   79d4e:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79d51:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   79d55:       e8 46 dd ff ff          callq  77aa0 <_int_free>
    0.00 :	   79d5a:       e9 3b fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79d5f:       45 84 ff                test   %r15b,%r15b
    0.00 :	   79d62:       0f 84 ba fc ff ff       je     79a22 <_int_malloc+0xc02>
    0.00 :	   79d68:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	   79d6f:       00 
    0.00 :	   79d70:       e9 25 fe ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   79d75:       48 89 5b 28             mov    %rbx,0x28(%rbx)
    0.00 :	   79d79:       48 89 5b 20             mov    %rbx,0x20(%rbx)
    0.00 :	   79d7d:       0f 1f 00                nopl   (%rax)
    0.00 :	   79d80:       e9 b0 f8 ff ff          jmpq   79635 <_int_malloc+0x815>
    0.00 :	   79d85:       48 89 de                mov    %rbx,%rsi
    0.00 :	   79d88:       48 8d 7c 05 00          lea    0x0(%rbp,%rax,1),%rdi
    0.00 :	   79d8d:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   79d92:       48 29 c6                sub    %rax,%rsi
    0.00 :	   79d95:       e8 16 df 05 00          callq  d7cb0 <mprotect>
    0.00 :	   79d9a:       85 c0                   test   %eax,%eax
    0.00 :	   79d9c:       0f 85 c0 fe ff ff       jne    79c62 <_int_malloc+0xe42>
    0.00 :	   79da2:       48 89 5d 18             mov    %rbx,0x18(%rbp)
    0.00 :	   79da6:       e9 b8 fd ff ff          jmpq   79b63 <_int_malloc+0xd43>
    0.00 :	   79dab:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   79dae:       31 ff                   xor    %edi,%edi
    0.00 :	   79db0:       41 b8 ff ff ff ff       mov    $0xffffffff,%r8d
    0.00 :	   79db6:       b9 22 00 00 00          mov    $0x22,%ecx
    0.00 :	   79dbb:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   79dc0:       48 89 ee                mov    %rbp,%rsi
    0.00 :	   79dc3:       e8 88 de 05 00          callq  d7c50 <mmap>
    0.00 :	   79dc8:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   79dcc:       48 89 c3                mov    %rax,%rbx
    0.00 :	   79dcf:       74 7a                   je     79e4b <_int_malloc+0x102b>
    0.00 :	   79dd1:       4c 8d 60 10             lea    0x10(%rax),%r12
    0.00 :	   79dd5:       41 f6 c4 0f             test   $0xf,%r12b
    0.00 :	   79dd9:       74 1f                   je     79dfa <_int_malloc+0xfda>
    0.00 :	   79ddb:       48 8d 0d 51 20 0c 00    lea    0xc2051(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79de2:       48 8d 35 59 1d 0c 00    lea    0xc1d59(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79de9:       48 8d 3d f8 57 0c 00    lea    0xc57f8(%rip),%rdi        # 13f5e8 <__PRETTY_FUNCTION__.11129+0x1c0f>
    0.00 :	   79df0:       ba dd 0b 00 00          mov    $0xbdd,%edx
    0.00 :	   79df5:       e8 c6 c9 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79dfa:       48 89 e8                mov    %rbp,%rax
    0.00 :	   79dfd:       48 83 c8 02             or     $0x2,%rax
    0.00 :	   79e01:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	   79e05:       8b 05 35 a9 2f 00       mov    0x2fa935(%rip),%eax        # 374740 <mp_+0x20>
    0.00 :	   79e0b:       83 c0 01                add    $0x1,%eax
    0.00 :	   79e0e:       3b 05 34 a9 2f 00       cmp    0x2fa934(%rip),%eax        # 374748 <mp_+0x28>
    0.00 :	   79e14:       89 05 26 a9 2f 00       mov    %eax,0x2fa926(%rip)        # 374740 <mp_+0x20>
    0.00 :	   79e1a:       7e 06                   jle    79e22 <_int_malloc+0x1002>
    0.00 :	   79e1c:       89 05 26 a9 2f 00       mov    %eax,0x2fa926(%rip)        # 374748 <mp_+0x28>
    0.00 :	   79e22:       48 89 e8                mov    %rbp,%rax
    0.00 :	   79e25:       48 03 05 2c a9 2f 00    add    0x2fa92c(%rip),%rax        # 374758 <mp_+0x38>
    0.00 :	   79e2c:       48 3b 05 2d a9 2f 00    cmp    0x2fa92d(%rip),%rax        # 374760 <mp_+0x40>
    0.00 :	   79e33:       48 89 05 1e a9 2f 00    mov    %rax,0x2fa91e(%rip)        # 374758 <mp_+0x38>
    0.00 :	   79e3a:       76 07                   jbe    79e43 <_int_malloc+0x1023>
    0.00 :	   79e3c:       48 89 05 1d a9 2f 00    mov    %rax,0x2fa91d(%rip)        # 374760 <mp_+0x40>
    0.00 :	   79e43:       4c 89 e3                mov    %r12,%rbx
    0.00 :	   79e46:       e9 cb fd ff ff          jmpq   79c16 <_int_malloc+0xdf6>
    0.00 :	   79e4b:       48 8b 44 24 20          mov    0x20(%rsp),%rax
    0.00 :	   79e50:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79e56:       4c 8b 68 58             mov    0x58(%rax),%r13
    0.00 :	   79e5a:       49 8b 55 08             mov    0x8(%r13),%rdx
    0.00 :	   79e5e:       49 89 d6                mov    %rdx,%r14
    0.00 :	   79e61:       49 83 e6 f8             and    $0xfffffffffffffff8,%r14
    0.00 :	   79e65:       e9 f3 fb ff ff          jmpq   79a5d <_int_malloc+0xc3d>
    0.00 :	   79e6a:       48 8b 54 24 28          mov    0x28(%rsp),%rdx
    0.00 :	   79e6f:       48 8b 05 b2 a8 2f 00    mov    0x2fa8b2(%rip),%rax        # 374728 <mp_+0x8>
    0.00 :	   79e76:       48 8b 5c 24 40          mov    0x40(%rsp),%rbx
    0.00 :	   79e7b:       48 8d 44 02 20          lea    0x20(%rdx,%rax,1),%rax
    0.00 :	   79e80:       8b 15 1e a0 2f 00       mov    0x2fa01e(%rip),%edx        # 373ea4 <main_arena+0x4>
    0.00 :	   79e86:       48 89 c1                mov    %rax,%rcx
    0.00 :	   79e89:       4c 29 f1                sub    %r14,%rcx
    0.00 :	   79e8c:       83 e2 02                and    $0x2,%edx
    0.00 :	   79e8f:       48 0f 44 c1             cmove  %rcx,%rax
    0.00 :	   79e93:       48 8b 4c 24 40          mov    0x40(%rsp),%rcx
    0.00 :	   79e98:       48 8d 2c 18             lea    (%rax,%rbx,1),%rbp
    0.00 :	   79e9c:       48 f7 d1                not    %rcx
    0.00 :	   79e9f:       48 21 cd                and    %rcx,%rbp
    0.00 :	   79ea2:       48 89 4c 24 70          mov    %rcx,0x70(%rsp)
    0.00 :	   79ea7:       48 85 ed                test   %rbp,%rbp
    0.00 :	   79eaa:       49 89 ec                mov    %rbp,%r12
    0.00 :	   79ead:       0f 8e 13 03 00 00       jle    7a1c6 <_int_malloc+0x13a6>
    0.00 :	   79eb3:       48 8b 05 c6 7e 2f 00    mov    0x2f7ec6(%rip),%rax        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   79eba:       48 89 ef                mov    %rbp,%rdi
    0.00 :	   79ebd:       ff 10                   callq  *(%rax)
    0.00 :	   79ebf:       48 85 c0                test   %rax,%rax
    0.00 :	   79ec2:       48 89 c3                mov    %rax,%rbx
    0.00 :	   79ec5:       0f 84 f2 02 00 00       je     7a1bd <_int_malloc+0x139d>
    0.00 :	   79ecb:       48 8b 05 9e 7f 2f 00    mov    0x2f7f9e(%rip),%rax        # 371e70 <_DYNAMIC+0x310>
    0.00 :	   79ed2:       48 8b 00                mov    (%rax),%rax
    0.00 :	   79ed5:       48 85 c0                test   %rax,%rax
    0.00 :	   79ed8:       74 02                   je     79edc <_int_malloc+0x10bc>
    0.00 :	   79eda:       ff d0                   callq  *%rax
    0.00 :	   79edc:       45 31 e4                xor    %r12d,%r12d
    0.00 :	   79edf:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	   79ee5:       48 83 3d 83 a8 2f 00    cmpq   $0x0,0x2fa883(%rip)        # 374770 <mp_+0x50>
    0.00 :	   79eec:       00 
    0.00 :	   79eed:       75 07                   jne    79ef6 <_int_malloc+0x10d6>
    0.00 :	   79eef:       48 89 1d 7a a8 2f 00    mov    %rbx,0x2fa87a(%rip)        # 374770 <mp_+0x50>
    0.00 :	   79ef6:       48 89 ea                mov    %rbp,%rdx
    0.00 :	   79ef9:       48 03 15 10 a8 2f 00    add    0x2fa810(%rip),%rdx        # 374710 <main_arena+0x870>
    0.00 :	   79f00:       45 84 ff                test   %r15b,%r15b
    0.00 :	   79f03:       48 89 15 06 a8 2f 00    mov    %rdx,0x2fa806(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   79f0a:       74 0b                   je     79f17 <_int_malloc+0x10f7>
    0.00 :	   79f0c:       48 39 5c 24 50          cmp    %rbx,0x50(%rsp)
    0.00 :	   79f11:       0f 84 39 03 00 00       je     7a250 <_int_malloc+0x1430>
    0.00 :	   79f17:       8b 05 87 9f 2f 00       mov    0x2f9f87(%rip),%eax        # 373ea4 <main_arena+0x4>
    0.00 :	   79f1d:       d1 e8                   shr    %eax
    0.00 :	   79f1f:       83 f0 01                xor    $0x1,%eax
    0.00 :	   79f22:       83 e0 01                and    $0x1,%eax
    0.00 :	   79f25:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   79f2a:       0f 84 5c 01 00 00       je     7a08c <_int_malloc+0x126c>
    0.00 :	   79f30:       84 c0                   test   %al,%al
    0.00 :	   79f32:       0f 84 5c 01 00 00       je     7a094 <_int_malloc+0x1274>
    0.00 :	   79f38:       48 39 5c 24 50          cmp    %rbx,0x50(%rsp)
    0.00 :	   79f3d:       0f 87 30 01 00 00       ja     7a073 <_int_malloc+0x1253>
    0.00 :	   79f43:       48 89 d8                mov    %rbx,%rax
    0.00 :	   79f46:       48 2b 44 24 50          sub    0x50(%rsp),%rax
    0.00 :	   79f4b:       48 01 d0                add    %rdx,%rax
    0.00 :	   79f4e:       48 89 05 bb a7 2f 00    mov    %rax,0x2fa7bb(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   79f55:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79f58:       31 c0                   xor    %eax,%eax
    0.00 :	   79f5a:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   79f5f:       83 e2 0f                and    $0xf,%edx
    0.00 :	   79f62:       74 11                   je     79f75 <_int_malloc+0x1155>
    0.00 :	   79f64:       b8 10 00 00 00          mov    $0x10,%eax
    0.00 :	   79f69:       48 29 d0                sub    %rdx,%rax
    0.00 :	   79f6c:       48 8d 0c 03             lea    (%rbx,%rax,1),%rcx
    0.00 :	   79f70:       48 89 4c 24 48          mov    %rcx,0x48(%rsp)
    0.00 :	   79f75:       4a 8d 14 30             lea    (%rax,%r14,1),%rdx
    0.00 :	   79f79:       48 8d 04 2a             lea    (%rdx,%rbp,1),%rax
    0.00 :	   79f7d:       48 8d 04 03             lea    (%rbx,%rax,1),%rax
    0.00 :	   79f81:       48 29 c2                sub    %rax,%rdx
    0.00 :	   79f84:       48 03 44 24 40          add    0x40(%rsp),%rax
    0.00 :	   79f89:       48 23 44 24 70          and    0x70(%rsp),%rax
    0.00 :	   79f8e:       48 89 d3                mov    %rdx,%rbx
    0.00 :	   79f91:       48 01 c3                add    %rax,%rbx
    0.00 :	   79f94:       79 1f                   jns    79fb5 <_int_malloc+0x1195>
    0.00 :	   79f96:       48 8d 0d 96 1e 0c 00    lea    0xc1e96(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   79f9d:       48 8d 35 9e 1b 0c 00    lea    0xc1b9e(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   79fa4:       48 8d 3d f2 1c 0c 00    lea    0xc1cf2(%rip),%rdi        # 13bc9d <__PRETTY_FUNCTION__.14063+0x236>
    0.00 :	   79fab:       ba f6 0c 00 00          mov    $0xcf6,%edx
    0.00 :	   79fb0:       e8 0b c8 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   79fb5:       48 8b 2d c4 7d 2f 00    mov    0x2f7dc4(%rip),%rbp        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   79fbc:       48 89 df                mov    %rbx,%rdi
    0.00 :	   79fbf:       ff 55 00                callq  *0x0(%rbp)
    0.00 :	   79fc2:       48 85 c0                test   %rax,%rax
    0.00 :	   79fc5:       49 89 c4                mov    %rax,%r12
    0.00 :	   79fc8:       0f 84 8b 00 00 00       je     7a059 <_int_malloc+0x1239>
    0.00 :	   79fce:       48 8b 05 9b 7e 2f 00    mov    0x2f7e9b(%rip),%rax        # 371e70 <_DYNAMIC+0x310>
    0.00 :	   79fd5:       48 8b 00                mov    (%rax),%rax
    0.00 :	   79fd8:       48 85 c0                test   %rax,%rax
    0.00 :	   79fdb:       74 02                   je     79fdf <_int_malloc+0x11bf>
    0.00 :	   79fdd:       ff d0                   callq  *%rax
    0.00 :	   79fdf:       48 89 da                mov    %rbx,%rdx
    0.00 :	   79fe2:       48 8b 44 24 48          mov    0x48(%rsp),%rax
    0.00 :	   79fe7:       48 8b 4c 24 48          mov    0x48(%rsp),%rcx
    0.00 :	   79fec:       48 89 05 05 9f 2f 00    mov    %rax,0x2f9f05(%rip)        # 373ef8 <main_arena+0x58>
    0.00 :	   79ff3:       49 8d 04 1c             lea    (%r12,%rbx,1),%rax
    0.00 :	   79ff7:       48 2b 44 24 48          sub    0x48(%rsp),%rax
    0.00 :	   79ffc:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7a000:       48 89 41 08             mov    %rax,0x8(%rcx)
    0.00 :	   7a004:       48 01 15 05 a7 2f 00    add    %rdx,0x2fa705(%rip)        # 374710 <main_arena+0x870>
    0.00 :	   7a00b:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   7a010:       0f 84 84 fb ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a016:       49 8d 46 e0             lea    -0x20(%r14),%rax
    0.00 :	   7a01a:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	   7a01e:       48 89 c2                mov    %rax,%rdx
    0.00 :	   7a021:       48 83 ca 01             or     $0x1,%rdx
    0.00 :	   7a025:       48 83 f8 1f             cmp    $0x1f,%rax
    0.00 :	   7a029:       49 89 55 08             mov    %rdx,0x8(%r13)
    0.00 :	   7a02d:       49 c7 44 05 08 11 00    movq   $0x11,0x8(%r13,%rax,1)
    0.00 :	   7a034:       00 00 
    0.00 :	   7a036:       49 c7 44 05 18 11 00    movq   $0x11,0x18(%r13,%rax,1)
    0.00 :	   7a03d:       00 00 
    0.00 :	   7a03f:       0f 86 55 fb ff ff       jbe    79b9a <_int_malloc+0xd7a>
    0.00 :	   7a045:       48 8d 3d 54 9e 2f 00    lea    0x2f9e54(%rip),%rdi        # 373ea0 <main_arena>
    0.00 :	   7a04c:       4c 89 ee                mov    %r13,%rsi
    0.00 :	   7a04f:       e8 4c da ff ff          callq  77aa0 <_int_free>
    0.00 :	   7a054:       e9 41 fb ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   7a059:       31 ff                   xor    %edi,%edi
    0.00 :	   7a05b:       ff 55 00                callq  *0x0(%rbp)
    0.00 :	   7a05e:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a061:       4d 85 e4                test   %r12,%r12
    0.00 :	   7a064:       0f 84 30 fb ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a06a:       31 db                   xor    %ebx,%ebx
    0.00 :	   7a06c:       31 d2                   xor    %edx,%edx
    0.00 :	   7a06e:       e9 6f ff ff ff          jmpq   79fe2 <_int_malloc+0x11c2>
    0.00 :	   7a073:       48 8d 35 0e 58 0c 00    lea    0xc580e(%rip),%rsi        # 13f888 <__PRETTY_FUNCTION__.11129+0x1eaf>
    0.00 :	   7a07a:       48 89 da                mov    %rbx,%rdx
    0.00 :	   7a07d:       bf 03 00 00 00          mov    $0x3,%edi
    0.00 :	   7a082:       e8 d9 c4 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   7a087:       e9 0e fb ff ff          jmpq   79b9a <_int_malloc+0xd7a>
    0.00 :	   7a08c:       84 c0                   test   %al,%al
    0.00 :	   7a08e:       0f 85 c1 fe ff ff       jne    79f55 <_int_malloc+0x1135>
    0.00 :	   7a094:       f6 c3 0f                test   $0xf,%bl
    0.00 :	   7a097:       90                      nop
    0.00 :	   7a098:       74 1f                   je     7a0b9 <_int_malloc+0x1299>
    0.00 :	   7a09a:       48 8d 0d 92 1d 0c 00    lea    0xc1d92(%rip),%rcx        # 13be33 <__func__.13350>
    0.00 :	   7a0a1:       48 8d 35 9a 1a 0c 00    lea    0xc1a9a(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a0a8:       48 8d 3d 01 58 0c 00    lea    0xc5801(%rip),%rdi        # 13f8b0 <__PRETTY_FUNCTION__.11129+0x1ed7>
    0.00 :	   7a0af:       ba 11 0d 00 00          mov    $0xd11,%edx
    0.00 :	   7a0b4:       e8 07 c7 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a0b9:       45 84 ff                test   %r15b,%r15b
    0.00 :	   7a0bc:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   7a0c1:       74 9e                   je     7a061 <_int_malloc+0x1241>
    0.00 :	   7a0c3:       48 8b 05 b6 7c 2f 00    mov    0x2f7cb6(%rip),%rax        # 371d80 <_DYNAMIC+0x220>
    0.00 :	   7a0ca:       31 ff                   xor    %edi,%edi
    0.00 :	   7a0cc:       ff 10                   callq  *(%rax)
    0.00 :	   7a0ce:       48 89 5c 24 48          mov    %rbx,0x48(%rsp)
    0.00 :	   7a0d3:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a0d6:       eb 89                   jmp    7a061 <_int_malloc+0x1241>
    0.00 :	   7a0d8:       49 8b 47 20             mov    0x20(%r15),%rax
    0.00 :	   7a0dc:       48 85 c0                test   %rax,%rax
    0.00 :	   7a0df:       0f 84 72 f6 ff ff       je     79757 <_int_malloc+0x937>
    0.00 :	   7a0e5:       4c 3b 78 28             cmp    0x28(%rax),%r15
    0.00 :	   7a0e9:       74 1f                   je     7a10a <_int_malloc+0x12ea>
    0.00 :	   7a0eb:       48 8d 0d 35 1d 0c 00    lea    0xc1d35(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7a0f2:       48 8d 35 49 1a 0c 00    lea    0xc1a49(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a0f9:       48 8d 3d c0 53 0c 00    lea    0xc53c0(%rip),%rdi        # 13f4c0 <__PRETTY_FUNCTION__.11129+0x1ae7>
    0.00 :	   7a100:       ba c9 11 00 00          mov    $0x11c9,%edx
    0.00 :	   7a105:       e8 b6 c6 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a10a:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a10e:       48 3b 68 20             cmp    0x20(%rax),%rbp
    0.00 :	   7a112:       74 1f                   je     7a133 <_int_malloc+0x1313>
    0.00 :	   7a114:       48 8d 0d 0c 1d 0c 00    lea    0xc1d0c(%rip),%rcx        # 13be27 <__func__.14106>
    0.00 :	   7a11b:       48 8d 35 20 1a 0c 00    lea    0xc1a20(%rip),%rsi        # 13bb42 <__PRETTY_FUNCTION__.14063+0xdb>
    0.00 :	   7a122:       48 8d 3d c7 53 0c 00    lea    0xc53c7(%rip),%rdi        # 13f4f0 <__PRETTY_FUNCTION__.11129+0x1b17>
    0.00 :	   7a129:       ba c9 11 00 00          mov    $0x11c9,%edx
    0.00 :	   7a12e:       e8 8d c6 ff ff          callq  767c0 <__malloc_assert>
    0.00 :	   7a133:       48 83 7b 20 00          cmpq   $0x0,0x20(%rbx)
    0.00 :	   7a138:       74 37                   je     7a171 <_int_malloc+0x1351>
    0.00 :	   7a13a:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	   7a13e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a142:       48 89 42 28             mov    %rax,0x28(%rdx)
    0.00 :	   7a146:       48 8b 55 28             mov    0x28(%rbp),%rdx
    0.00 :	   7a14a:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a14e:       48 89 42 20             mov    %rax,0x20(%rdx)
    0.00 :	   7a152:       e9 00 f6 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a157:       8b 3d ab 7f 2f 00       mov    0x2f7fab(%rip),%edi        # 372108 <check_action>
    0.00 :	   7a15d:       48 8d 35 c1 19 0c 00    lea    0xc19c1(%rip),%rsi        # 13bb25 <__PRETTY_FUNCTION__.14063+0xbe>
    0.00 :	   7a164:       4c 89 fa                mov    %r15,%rdx
    0.00 :	   7a167:       e8 f4 c3 ff ff          callq  76560 <malloc_printerr>
    0.00 :	   7a16c:       e9 e6 f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a171:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a175:       48 39 c5                cmp    %rax,%rbp
    0.00 :	   7a178:       74 36                   je     7a1b0 <_int_malloc+0x1390>
    0.00 :	   7a17a:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	   7a17e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a182:       48 89 43 28             mov    %rax,0x28(%rbx)
    0.00 :	   7a186:       48 8b 45 20             mov    0x20(%rbp),%rax
    0.00 :	   7a18a:       48 89 58 28             mov    %rbx,0x28(%rax)
    0.00 :	   7a18e:       48 8b 45 28             mov    0x28(%rbp),%rax
    0.00 :	   7a192:       48 89 58 20             mov    %rbx,0x20(%rax)
    0.00 :	   7a196:       e9 bc f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a19b:       49 8b 5f 10             mov    0x10(%r15),%rbx
    0.00 :	   7a19f:       e9 7a f5 ff ff          jmpq   7971e <_int_malloc+0x8fe>
    0.00 :	   7a1a4:       48 8b 58 10             mov    0x10(%rax),%rbx
    0.00 :	   7a1a8:       49 89 c7                mov    %rax,%r15
    0.00 :	   7a1ab:       e9 6e f5 ff ff          jmpq   7971e <_int_malloc+0x8fe>
    0.00 :	   7a1b0:       48 89 5b 28             mov    %rbx,0x28(%rbx)
    0.00 :	   7a1b4:       48 89 5b 20             mov    %rbx,0x20(%rbx)
    0.00 :	   7a1b8:       e9 9a f5 ff ff          jmpq   79757 <_int_malloc+0x937>
    0.00 :	   7a1bd:       8b 15 e1 9c 2f 00       mov    0x2f9ce1(%rip),%edx        # 373ea4 <main_arena+0x4>
    0.00 :	   7a1c3:       83 e2 02                and    $0x2,%edx
    0.00 :	   7a1c6:       85 d2                   test   %edx,%edx
    0.00 :	   7a1c8:       75 12                   jne    7a1dc <_int_malloc+0x13bc>
    0.00 :	   7a1ca:       48 8b 54 24 40          mov    0x40(%rsp),%rdx
    0.00 :	   7a1cf:       49 8d 04 16             lea    (%r14,%rdx,1),%rax
    0.00 :	   7a1d3:       4c 8d 24 28             lea    (%rax,%rbp,1),%r12
    0.00 :	   7a1d7:       4c 23 64 24 70          and    0x70(%rsp),%r12
    0.00 :	   7a1dc:       49 81 fc ff ff 0f 00    cmp    $0xfffff,%r12
    0.00 :	   7a1e3:       bd 00 00 10 00          mov    $0x100000,%ebp
    0.00 :	   7a1e8:       49 0f 47 ec             cmova  %r12,%rbp
    0.00 :	   7a1ec:       48 39 6c 24 28          cmp    %rbp,0x28(%rsp)
    0.00 :	   7a1f1:       0f 83 a3 f9 ff ff       jae    79b9a <_int_malloc+0xd7a>
    0.00 :	   7a1f7:       45 31 c9                xor    %r9d,%r9d
    0.00 :	   7a1fa:       31 ff                   xor    %edi,%edi
    0.00 :	   7a1fc:       41 b8 ff ff ff ff       mov    $0xffffffff,%r8d
    0.00 :	   7a202:       b9 22 00 00 00          mov    $0x22,%ecx
    0.00 :	   7a207:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	   7a20c:       48 89 ee                mov    %rbp,%rsi
    0.00 :	   7a20f:       e8 3c da 05 00          callq  d7c50 <mmap>
    0.00 :	   7a214:       48 83 f8 ff             cmp    $0xffffffffffffffff,%rax
    0.00 :	   7a218:       48 89 c3                mov    %rax,%rbx
    0.00 :	   7a21b:       0f 84 79 f9 ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a221:       83 0d 7c 9c 2f 00 02    orl    $0x2,0x2f9c7c(%rip)        # 373ea4 <main_arena+0x4>
    0.00 :	   7a228:       48 85 c0                test   %rax,%rax
    0.00 :	   7a22b:       0f 84 69 f9 ff ff       je     79b9a <_int_malloc+0xd7a>
    0.00 :	   7a231:       49 89 c4                mov    %rax,%r12
    0.00 :	   7a234:       49 01 ec                add    %rbp,%r12
    0.00 :	   7a237:       41 0f 94 c7             sete   %r15b
    0.00 :	   7a23b:       e9 a5 fc ff ff          jmpq   79ee5 <_int_malloc+0x10c5>
    0.00 :	   7a240:       80 7c 24 5f 00          cmpb   $0x0,0x5f(%rsp)
    0.00 :	   7a245:       0f 84 8b f8 ff ff       je     79ad6 <_int_malloc+0xcb6>
    0.00 :	   7a24b:       e9 2a f8 ff ff          jmpq   79a7a <_int_malloc+0xc5a>
    0.00 :	   7a250:       4a 8d 44 35 00          lea    0x0(%rbp,%r14,1),%rax
    0.00 :	   7a255:       48 83 c8 01             or     $0x1,%rax
    0.00 :	   7a259:       49 89 45 08             mov    %rax,0x8(%r13)
    0.00 :	   7a25d:       e9 38 f9 ff ff          jmpq   79b9a <_int_malloc+0xd7a>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000001800 <ixgbe_update_stats>:
         :	/**
         :	 * ixgbe_update_stats - Update the board statistics counters.
         :	 * @adapter: board private structure
         :	 **/
         :	void ixgbe_update_stats(struct ixgbe_adapter *adapter)
         :	{
    0.00 :	    1800:       41 57                   push   %r15
    0.00 :	    1802:       41 56                   push   %r14
    0.00 :	    1804:       41 55                   push   %r13
    0.00 :	    1806:       41 54                   push   %r12
    0.00 :	    1808:       55                      push   %rbp
    0.00 :	    1809:       53                      push   %rbx
    0.00 :	    180a:       48 89 fb                mov    %rdi,%rbx
    0.00 :	    180d:       48 83 ec 28             sub    $0x28,%rsp
         :	        return oldbit;
         :	}
         :
         :	static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)
         :	{
         :	        return ((1UL << (nr % BITS_PER_LONG)) &
    0.00 :	    1811:       48 8b 87 10 02 00 00    mov    0x210(%rdi),%rax
         :	#ifdef HAVE_NETDEV_STATS_IN_NETDEV
         :	        struct net_device_stats *net_stats = &adapter->netdev->stats;
    0.00 :	    1818:       4c 8b bf 00 02 00 00    mov    0x200(%rdi),%r15
         :	        u64 bytes = 0, packets = 0, hw_csum_rx_error = 0;
         :	#ifndef IXGBE_NO_LRO
         :	        u32 flushed = 0, coal = 0;
         :	#endif
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state) ||
    0.00 :	    181f:       a8 04                   test   $0x4,%al
    0.00 :	    1821:       0f 85 b9 09 00 00       jne    21e0 <ixgbe_update_stats+0x9e0>
    0.00 :	    1827:       48 8b 87 10 02 00 00    mov    0x210(%rdi),%rax
    0.00 :	    182e:       a8 02                   test   $0x2,%al
    0.00 :	    1830:       0f 85 aa 09 00 00       jne    21e0 <ixgbe_update_stats+0x9e0>
         :	            test_bit(__IXGBE_RESETTING, &adapter->state))
         :	                return;
         :
         :	        if (adapter->flags2 & IXGBE_FLAG2_RSC_ENABLED) {
    0.00 :	    1836:       f6 87 1c 02 00 00 02    testb  $0x2,0x21c(%rdi)
    0.00 :	    183d:       0f 85 ac 09 00 00       jne    21ef <ixgbe_update_stats+0x9ef>
    0.00 :	    1843:       44 8b 9f 28 02 00 00    mov    0x228(%rdi),%r11d
         :	                adapter->rsc_total_count = rsc_count;
         :	                adapter->rsc_total_flush = rsc_flush;
         :	        }
         :
         :	#ifndef IXGBE_NO_LRO
         :	        for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    184a:       8b 83 c0 0b 00 00       mov    0xbc0(%rbx),%eax
    0.00 :	    1850:       31 f6                   xor    %esi,%esi
    0.00 :	    1852:       31 c9                   xor    %ecx,%ecx
    0.00 :	    1854:       85 c0                   test   %eax,%eax
    0.00 :	    1856:       74 3a                   je     1892 <ixgbe_update_stats+0x92>
    0.00 :	    1858:       83 e8 01                sub    $0x1,%eax
    0.00 :	    185b:       31 f6                   xor    %esi,%esi
    0.00 :	    185d:       31 c9                   xor    %ecx,%ecx
    0.00 :	    185f:       48 8d 3c c5 08 00 00    lea    0x8(,%rax,8),%rdi
    0.00 :	    1866:       00 
    0.00 :	    1867:       31 d2                   xor    %edx,%edx
    0.00 :	    1869:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                struct ixgbe_q_vector *q_vector = adapter->q_vector[i];
    0.00 :	    1870:       48 8b 84 13 50 07 00    mov    0x750(%rbx,%rdx,1),%rax
    0.00 :	    1877:       00 
         :	                if (!q_vector)
    0.00 :	    1878:       48 85 c0                test   %rax,%rax
    0.00 :	    187b:       74 0c                   je     1889 <ixgbe_update_stats+0x89>
         :	                        continue;
         :	                flushed += q_vector->lrolist.stats.flushed;
    0.00 :	    187d:       03 b0 b8 02 00 00       add    0x2b8(%rax),%esi
         :	                coal += q_vector->lrolist.stats.coal;
    0.00 :	    1883:       03 88 bc 02 00 00       add    0x2bc(%rax),%ecx
    0.00 :	    1889:       48 83 c2 08             add    $0x8,%rdx
         :	                adapter->rsc_total_count = rsc_count;
         :	                adapter->rsc_total_flush = rsc_flush;
         :	        }
         :
         :	#ifndef IXGBE_NO_LRO
         :	        for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    188d:       48 39 fa                cmp    %rdi,%rdx
    0.00 :	    1890:       75 de                   jne    1870 <ixgbe_update_stats+0x70>
         :	        }
         :	        adapter->lro_stats.flushed = flushed;
         :	        adapter->lro_stats.coal = coal;
         :
         :	#endif
         :	        for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    1892:       45 85 db                test   %r11d,%r11d
         :	                if (!q_vector)
         :	                        continue;
         :	                flushed += q_vector->lrolist.stats.flushed;
         :	                coal += q_vector->lrolist.stats.coal;
         :	        }
         :	        adapter->lro_stats.flushed = flushed;
    0.00 :	    1895:       89 b3 f8 0b 00 00       mov    %esi,0xbf8(%rbx)
         :	        adapter->lro_stats.coal = coal;
    0.00 :	    189b:       89 8b fc 0b 00 00       mov    %ecx,0xbfc(%rbx)
         :
         :	#endif
         :	        for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    18a1:       0f 84 6b 0f 00 00       je     2812 <ixgbe_update_stats+0x1012>
    0.00 :	    18a7:       41 8d 43 ff             lea    -0x1(%r11),%eax
    0.00 :	    18ab:       45 31 d2                xor    %r10d,%r10d
    0.00 :	    18ae:       31 f6                   xor    %esi,%esi
    0.00 :	    18b0:       31 c9                   xor    %ecx,%ecx
    0.00 :	    18b2:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    18b5:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    18b8:       4c 8d 1c c5 08 00 00    lea    0x8(,%rax,8),%r11
    0.00 :	    18bf:       00 
    0.00 :	    18c0:       31 ff                   xor    %edi,%edi
    0.00 :	    18c2:       31 d2                   xor    %edx,%edx
    0.00 :	    18c4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                struct ixgbe_ring *rx_ring = adapter->rx_ring[i];
    0.00 :	    18c8:       48 8b 84 13 d8 04 00    mov    0x4d8(%rbx,%rdx,1),%rax
    0.00 :	    18cf:       00 
         :	                non_eop_descs += rx_ring->rx_stats.non_eop_descs;
         :	                alloc_rx_page_failed += rx_ring->rx_stats.alloc_rx_page_failed;
         :	                alloc_rx_buff_failed += rx_ring->rx_stats.alloc_rx_buff_failed;
         :	                hw_csum_rx_error += rx_ring->rx_stats.csum_err;
         :	                bytes += rx_ring->stats.bytes;
         :	                packets += rx_ring->stats.packets;
    0.00 :	    18d0:       48 83 c2 08             add    $0x8,%rdx
         :	        adapter->lro_stats.coal = coal;
         :
         :	#endif
         :	        for (i = 0; i < adapter->num_rx_queues; i++) {
         :	                struct ixgbe_ring *rx_ring = adapter->rx_ring[i];
         :	                non_eop_descs += rx_ring->rx_stats.non_eop_descs;
    0.00 :	    18d4:       4c 03 50 78             add    0x78(%rax),%r10
         :	                alloc_rx_page_failed += rx_ring->rx_stats.alloc_rx_page_failed;
    0.00 :	    18d8:       48 03 b0 80 00 00 00    add    0x80(%rax),%rsi
         :	                alloc_rx_buff_failed += rx_ring->rx_stats.alloc_rx_buff_failed;
    0.00 :	    18df:       48 03 88 88 00 00 00    add    0x88(%rax),%rcx
         :	                hw_csum_rx_error += rx_ring->rx_stats.csum_err;
    0.00 :	    18e6:       48 03 b8 90 00 00 00    add    0x90(%rax),%rdi
         :	                bytes += rx_ring->stats.bytes;
    0.00 :	    18ed:       4c 03 48 60             add    0x60(%rax),%r9
         :	                packets += rx_ring->stats.packets;
    0.00 :	    18f1:       4c 03 40 58             add    0x58(%rax),%r8
         :	        }
         :	        adapter->lro_stats.flushed = flushed;
         :	        adapter->lro_stats.coal = coal;
         :
         :	#endif
         :	        for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    18f5:       4c 39 da                cmp    %r11,%rdx
    0.00 :	    18f8:       75 ce                   jne    18c8 <ixgbe_update_stats+0xc8>
    0.00 :	    18fa:       89 f2                   mov    %esi,%edx
    0.00 :	    18fc:       89 c8                   mov    %ecx,%eax
         :	                packets += rx_ring->stats.packets;
         :
         :	        }
         :	        adapter->non_eop_descs = non_eop_descs;
         :	        adapter->alloc_rx_page_failed = alloc_rx_page_failed;
         :	        adapter->alloc_rx_buff_failed = alloc_rx_buff_failed;
    0.00 :	    18fe:       89 83 4c 07 00 00       mov    %eax,0x74c(%rbx)
         :	                hw_csum_rx_error += rx_ring->rx_stats.csum_err;
         :	                bytes += rx_ring->stats.bytes;
         :	                packets += rx_ring->stats.packets;
         :
         :	        }
         :	        adapter->non_eop_descs = non_eop_descs;
    0.00 :	    1904:       4c 89 93 40 07 00 00    mov    %r10,0x740(%rbx)
         :	        adapter->alloc_rx_page_failed = alloc_rx_page_failed;
    0.00 :	    190b:       89 93 48 07 00 00       mov    %edx,0x748(%rbx)
         :	        adapter->alloc_rx_buff_failed = alloc_rx_buff_failed;
         :	        adapter->hw_csum_rx_error = hw_csum_rx_error;
    0.00 :	    1911:       48 89 bb 20 07 00 00    mov    %rdi,0x720(%rbx)
         :	        net_stats->rx_bytes = bytes;
    0.00 :	    1918:       4d 89 8f d8 00 00 00    mov    %r9,0xd8(%r15)
         :	        net_stats->rx_packets = packets;
    0.00 :	    191f:       4d 89 87 c8 00 00 00    mov    %r8,0xc8(%r15)
         :
         :	        bytes = 0;
         :	        packets = 0;
         :	        /* gather some stats to the adapter struct that are per queue */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
    0.00 :	    1926:       8b 83 20 02 00 00       mov    0x220(%rbx),%eax
    0.00 :	    192c:       85 c0                   test   %eax,%eax
    0.00 :	    192e:       0f 84 f2 0e 00 00       je     2826 <ixgbe_update_stats+0x1026>
    0.00 :	    1934:       83 e8 01                sub    $0x1,%eax
    0.00 :	    1937:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    193a:       31 ff                   xor    %edi,%edi
    0.00 :	    193c:       4c 8d 0c c5 08 00 00    lea    0x8(,%rax,8),%r9
    0.00 :	    1943:       00 
    0.00 :	    1944:       31 f6                   xor    %esi,%esi
    0.00 :	    1946:       31 c9                   xor    %ecx,%ecx
    0.00 :	    1948:       31 d2                   xor    %edx,%edx
    0.00 :	    194a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
    0.00 :	    1950:       48 8b 84 13 80 02 00    mov    0x280(%rbx,%rdx,1),%rax
    0.00 :	    1957:       00 
         :	                restart_queue += tx_ring->tx_stats.restart_queue;
         :	                tx_busy += tx_ring->tx_stats.tx_busy;
         :	                bytes += tx_ring->stats.bytes;
         :	                packets += tx_ring->stats.packets;
    0.00 :	    1958:       48 83 c2 08             add    $0x8,%rdx
         :	        bytes = 0;
         :	        packets = 0;
         :	        /* gather some stats to the adapter struct that are per queue */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
         :	                struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
         :	                restart_queue += tx_ring->tx_stats.restart_queue;
    0.00 :	    195c:       4c 03 40 68             add    0x68(%rax),%r8
         :	                tx_busy += tx_ring->tx_stats.tx_busy;
    0.00 :	    1960:       48 03 78 70             add    0x70(%rax),%rdi
         :	                bytes += tx_ring->stats.bytes;
    0.00 :	    1964:       48 03 70 60             add    0x60(%rax),%rsi
         :	                packets += tx_ring->stats.packets;
    0.00 :	    1968:       48 03 48 58             add    0x58(%rax),%rcx
         :	        net_stats->rx_packets = packets;
         :
         :	        bytes = 0;
         :	        packets = 0;
         :	        /* gather some stats to the adapter struct that are per queue */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
    0.00 :	    196c:       4c 39 ca                cmp    %r9,%rdx
    0.00 :	    196f:       75 df                   jne    1950 <ixgbe_update_stats+0x150>
         :	                restart_queue += tx_ring->tx_stats.restart_queue;
         :	                tx_busy += tx_ring->tx_stats.tx_busy;
         :	                bytes += tx_ring->stats.bytes;
         :	                packets += tx_ring->stats.packets;
         :	        }
         :	        adapter->restart_queue = restart_queue;
    0.00 :	    1971:       4c 89 83 c0 04 00 00    mov    %r8,0x4c0(%rbx)
         :	        adapter->tx_busy = tx_busy;
    0.00 :	    1978:       48 89 bb 08 1b 00 00    mov    %rdi,0x1b08(%rbx)
         :	        net_stats->tx_bytes = bytes;
    0.00 :	    197f:       49 89 b7 e0 00 00 00    mov    %rsi,0xe0(%r15)
         :	        net_stats->tx_packets = packets;
    0.00 :	    1986:       49 89 8f d0 00 00 00    mov    %rcx,0xd0(%r15)
         :	{ asm volatile("mov" size " %0,%1": :reg (val), \
         :	"m" (*(volatile type __force *)addr) barrier); }
         :
         :	build_mmio_read(readb, "b", unsigned char, "=q", :"memory")
         :	build_mmio_read(readw, "w", unsigned short, "=r", :"memory")
         :	build_mmio_read(readl, "l", unsigned int, "=r", :"memory")
    0.00 :	    198d:       48 8b 93 80 0e 00 00    mov    0xe80(%rbx),%rdx
         :
         :	        hwstats->crcerrs += IXGBE_READ_REG(hw, IXGBE_CRCERRS);
    0.00 :	    1994:       48 8b 83 b0 14 00 00    mov    0x14b0(%rbx),%rax
    0.00 :	    199b:       48 81 c2 00 40 00 00    add    $0x4000,%rdx
    0.00 :	    19a2:       8b 12                   mov    (%rdx),%edx
    0.00 :	    19a4:       89 d2                   mov    %edx,%edx
    0.00 :	    19a6:       48 89 df                mov    %rbx,%rdi
    0.00 :	    19a9:       48 89 d9                mov    %rbx,%rcx
    0.00 :	    19ac:       48 01 c2                add    %rax,%rdx
    0.00 :	    19af:       45 31 f6                xor    %r14d,%r14d
    0.00 :	    19b2:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    19b5:       48 89 93 b0 14 00 00    mov    %rdx,0x14b0(%rbx)
    0.00 :	    19bc:       be a0 3f 00 00          mov    $0x3fa0,%esi
    0.00 :	    19c1:       41 b8 34 60 00 00       mov    $0x6034,%r8d
    0.00 :	    19c7:       eb 4a                   jmp    1a13 <ixgbe_update_stats+0x213>
    0.00 :	    19c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                missed_rx += mpc;
         :	                hwstats->mpc[i] += mpc;
         :	                total_mpc += hwstats->mpc[i];
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
         :	                switch (hw->mac.type) {
    0.00 :	    19d0:       72 28                   jb     19fa <ixgbe_update_stats+0x1fa>
    0.00 :	    19d2:       83 f8 03                cmp    $0x3,%eax
    0.00 :	    19d5:       77 23                   ja     19fa <ixgbe_update_stats+0x1fa>
    0.00 :	    19d7:       48 8d 96 a0 01 00 00    lea    0x1a0(%rsi),%rdx
         :	                        hwstats->pxonrxc[i] +=
         :	                                IXGBE_READ_REG(hw, IXGBE_PXONRXC(i));
         :	                        break;
         :	                case ixgbe_mac_82599EB:
         :	                case ixgbe_mac_X540:
         :	                        hwstats->pxonrxc[i] +=
    0.00 :	    19de:       48 8b 81 90 15 00 00    mov    0x1590(%rcx),%rax
    0.00 :	    19e5:       48 03 93 80 0e 00 00    add    0xe80(%rbx),%rdx
    0.00 :	    19ec:       8b 12                   mov    (%rdx),%edx
    0.00 :	    19ee:       89 d2                   mov    %edx,%edx
    0.00 :	    19f0:       48 01 c2                add    %rax,%rdx
    0.00 :	    19f3:       48 89 91 90 15 00 00    mov    %rdx,0x1590(%rcx)
    0.00 :	    19fa:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	    19fe:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	    1a02:       49 83 c0 40             add    $0x40,%r8
         :	        net_stats->tx_packets = packets;
         :
         :	        hwstats->crcerrs += IXGBE_READ_REG(hw, IXGBE_CRCERRS);
         :
         :	        /* 8 register reads */
         :	        for (i = 0; i < 8; i++) {
    0.00 :	    1a06:       48 81 fe c0 3f 00 00    cmp    $0x3fc0,%rsi
    0.00 :	    1a0d:       0f 84 35 08 00 00       je     2248 <ixgbe_update_stats+0xa48>
    0.00 :	    1a13:       48 89 f0                mov    %rsi,%rax
    0.00 :	    1a16:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1a1d:       8b 00                   mov    (%rax),%eax
         :	                /* for packet buffers not used, the register should read 0 */
         :	                mpc = IXGBE_READ_REG(hw, IXGBE_MPC(i));
         :	                missed_rx += mpc;
    0.00 :	    1a1f:       41 01 c1                add    %eax,%r9d
         :	                hwstats->mpc[i] += mpc;
    0.00 :	    1a22:       89 c0                   mov    %eax,%eax
    0.00 :	    1a24:       48 03 81 d8 14 00 00    add    0x14d8(%rcx),%rax
         :	                total_mpc += hwstats->mpc[i];
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
    0.00 :	    1a2b:       48 8b 91 50 15 00 00    mov    0x1550(%rcx),%rdx
         :	        /* 8 register reads */
         :	        for (i = 0; i < 8; i++) {
         :	                /* for packet buffers not used, the register should read 0 */
         :	                mpc = IXGBE_READ_REG(hw, IXGBE_MPC(i));
         :	                missed_rx += mpc;
         :	                hwstats->mpc[i] += mpc;
    0.00 :	    1a32:       48 89 81 d8 14 00 00    mov    %rax,0x14d8(%rcx)
         :	                total_mpc += hwstats->mpc[i];
    0.00 :	    1a39:       49 01 c6                add    %rax,%r14
    0.00 :	    1a3c:       48 8d 86 60 ff ff ff    lea    -0xa0(%rsi),%rax
    0.00 :	    1a43:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1a4a:       8b 00                   mov    (%rax),%eax
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
    0.00 :	    1a4c:       89 c0                   mov    %eax,%eax
    0.00 :	    1a4e:       48 01 d0                add    %rdx,%rax
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
    0.00 :	    1a51:       48 8b 91 d0 15 00 00    mov    0x15d0(%rcx),%rdx
         :	                /* for packet buffers not used, the register should read 0 */
         :	                mpc = IXGBE_READ_REG(hw, IXGBE_MPC(i));
         :	                missed_rx += mpc;
         :	                hwstats->mpc[i] += mpc;
         :	                total_mpc += hwstats->mpc[i];
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
    0.00 :	    1a58:       48 89 81 50 15 00 00    mov    %rax,0x1550(%rcx)
    0.00 :	    1a5f:       48 8d 46 80             lea    -0x80(%rsi),%rax
    0.00 :	    1a63:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1a6a:       8b 00                   mov    (%rax),%eax
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
 ??:0
   50.00 :	    1a6c:       89 c0                   mov    %eax,%eax
    0.00 :	    1a6e:       48 01 d0                add    %rdx,%rax
    0.00 :	    1a71:       48 89 81 d0 15 00 00    mov    %rax,0x15d0(%rcx)
         :	                switch (hw->mac.type) {
    0.00 :	    1a78:       8b 83 50 10 00 00       mov    0x1050(%rbx),%eax
    0.00 :	    1a7e:       83 f8 01                cmp    $0x1,%eax
    0.00 :	    1a81:       0f 85 49 ff ff ff       jne    19d0 <ixgbe_update_stats+0x1d0>
    0.00 :	    1a87:       48 8d 46 20             lea    0x20(%rsi),%rax
         :	                case ixgbe_mac_82598EB:
         :	                        hwstats->rnbc[i] += IXGBE_READ_REG(hw, IXGBE_RNBC(i));
    0.00 :	    1a8b:       48 8b 91 b0 16 00 00    mov    0x16b0(%rcx),%rdx
    0.00 :	    1a92:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1a99:       8b 00                   mov    (%rax),%eax
    0.00 :	    1a9b:       89 c0                   mov    %eax,%eax
    0.00 :	    1a9d:       48 01 d0                add    %rdx,%rax
         :	                        hwstats->qbtc[i] += IXGBE_READ_REG(hw, IXGBE_QBTC(i));
    0.00 :	    1aa0:       48 8b 91 08 19 00 00    mov    0x1908(%rcx),%rdx
         :	                total_mpc += hwstats->mpc[i];
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
         :	                switch (hw->mac.type) {
         :	                case ixgbe_mac_82598EB:
         :	                        hwstats->rnbc[i] += IXGBE_READ_REG(hw, IXGBE_RNBC(i));
    0.00 :	    1aa7:       48 89 81 b0 16 00 00    mov    %rax,0x16b0(%rcx)
    0.00 :	    1aae:       4c 89 c0                mov    %r8,%rax
    0.00 :	    1ab1:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1ab8:       8b 00                   mov    (%rax),%eax
         :	                        hwstats->qbtc[i] += IXGBE_READ_REG(hw, IXGBE_QBTC(i));
    0.00 :	    1aba:       89 c0                   mov    %eax,%eax
    0.00 :	    1abc:       48 01 d0                add    %rdx,%rax
         :	                        hwstats->qbrc[i] += IXGBE_READ_REG(hw, IXGBE_QBRC(i));
    0.00 :	    1abf:       48 8b 91 88 18 00 00    mov    0x1888(%rcx),%rdx
         :	                hwstats->pxontxc[i] += IXGBE_READ_REG(hw, IXGBE_PXONTXC(i));
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
         :	                switch (hw->mac.type) {
         :	                case ixgbe_mac_82598EB:
         :	                        hwstats->rnbc[i] += IXGBE_READ_REG(hw, IXGBE_RNBC(i));
         :	                        hwstats->qbtc[i] += IXGBE_READ_REG(hw, IXGBE_QBTC(i));
    0.00 :	    1ac6:       48 89 81 08 19 00 00    mov    %rax,0x1908(%rcx)
    0.00 :	    1acd:       49 8d 80 00 b0 ff ff    lea    -0x5000(%r8),%rax
    0.00 :	    1ad4:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1adb:       8b 00                   mov    (%rax),%eax
         :	                        hwstats->qbrc[i] += IXGBE_READ_REG(hw, IXGBE_QBRC(i));
    0.00 :	    1add:       89 c0                   mov    %eax,%eax
    0.00 :	    1adf:       48 01 d0                add    %rdx,%rax
         :	                        hwstats->pxonrxc[i] +=
    0.00 :	    1ae2:       48 8b 91 90 15 00 00    mov    0x1590(%rcx),%rdx
         :	                hwstats->pxofftxc[i] += IXGBE_READ_REG(hw, IXGBE_PXOFFTXC(i));
         :	                switch (hw->mac.type) {
         :	                case ixgbe_mac_82598EB:
         :	                        hwstats->rnbc[i] += IXGBE_READ_REG(hw, IXGBE_RNBC(i));
         :	                        hwstats->qbtc[i] += IXGBE_READ_REG(hw, IXGBE_QBTC(i));
         :	                        hwstats->qbrc[i] += IXGBE_READ_REG(hw, IXGBE_QBRC(i));
    0.00 :	    1ae9:       48 89 81 88 18 00 00    mov    %rax,0x1888(%rcx)
    0.00 :	    1af0:       48 8d 86 60 8f 00 00    lea    0x8f60(%rsi),%rax
    0.00 :	    1af7:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1afe:       8b 00                   mov    (%rax),%eax
         :	                        hwstats->pxonrxc[i] +=
    0.00 :	    1b00:       89 c0                   mov    %eax,%eax
    0.00 :	    1b02:       48 01 d0                add    %rdx,%rax
    0.00 :	    1b05:       48 89 81 90 15 00 00    mov    %rax,0x1590(%rcx)
         :	                                IXGBE_READ_REG(hw, IXGBE_PXONRXC(i));
         :	                        break;
    0.00 :	    1b0c:       e9 e9 fe ff ff          jmpq   19fa <ixgbe_update_stats+0x1fa>
    0.00 :	    1b11:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        struct ixgbe_hw_stats *hwstats = &adapter->stats;
         :	        int i;
         :	        u32 data;
         :
         :	        if ((hw->fc.current_mode != ixgbe_fc_full) &&
    0.00 :	    1b18:       8b 83 0c 13 00 00       mov    0x130c(%rbx),%eax
    0.00 :	    1b1e:       83 f8 03                cmp    $0x3,%eax
    0.00 :	    1b21:       0f 84 1c 0c 00 00       je     2743 <ixgbe_update_stats+0xf43>
    0.00 :	    1b27:       83 e8 01                sub    $0x1,%eax
    0.00 :	    1b2a:       0f 84 13 0c 00 00       je     2743 <ixgbe_update_stats+0xf43>
         :	        hwstats->gprc -= missed_rx;
         :
         :	        ixgbe_update_xoff_received(adapter);
         :
         :	        /* 82598 hardware only has a 32 bit counter in the high register */
         :	        switch (hw->mac.type) {
    0.00 :	    1b30:       8b 83 50 10 00 00       mov    0x1050(%rbx),%eax
    0.00 :	    1b36:       83 f8 02                cmp    $0x2,%eax
    0.00 :	    1b39:       0f 84 7a 09 00 00       je     24b9 <ixgbe_update_stats+0xcb9>
    0.00 :	    1b3f:       83 f8 03                cmp    $0x3,%eax
    0.00 :	    1b42:       0f 84 e9 08 00 00       je     2431 <ixgbe_update_stats+0xc31>
    0.00 :	    1b48:       83 e8 01                sub    $0x1,%eax
    0.00 :	    1b4b:       0f 85 88 00 00 00       jne    1bd9 <ixgbe_update_stats+0x3d9>
    0.00 :	    1b51:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	        case ixgbe_mac_82598EB:
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXC);
    0.00 :	    1b58:       48 8b 93 38 15 00 00    mov    0x1538(%rbx),%rdx
    0.00 :	    1b5f:       48 05 60 cf 00 00       add    $0xcf60,%rax
    0.00 :	    1b65:       8b 00                   mov    (%rax),%eax
    0.00 :	    1b67:       89 c0                   mov    %eax,%eax
    0.00 :	    1b69:       48 01 d0                add    %rdx,%rax
         :	                hwstats->gorc += IXGBE_READ_REG(hw, IXGBE_GORCH);
    0.00 :	    1b6c:       48 8b 93 a0 16 00 00    mov    0x16a0(%rbx),%rdx
         :	        ixgbe_update_xoff_received(adapter);
         :
         :	        /* 82598 hardware only has a 32 bit counter in the high register */
         :	        switch (hw->mac.type) {
         :	        case ixgbe_mac_82598EB:
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXC);
    0.00 :	    1b73:       48 89 83 38 15 00 00    mov    %rax,0x1538(%rbx)
    0.00 :	    1b7a:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1b81:       48 05 8c 40 00 00       add    $0x408c,%rax
    0.00 :	    1b87:       8b 00                   mov    (%rax),%eax
         :	                hwstats->gorc += IXGBE_READ_REG(hw, IXGBE_GORCH);
    0.00 :	    1b89:       89 c0                   mov    %eax,%eax
    0.00 :	    1b8b:       48 01 d0                add    %rdx,%rax
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCH);
    0.00 :	    1b8e:       48 8b 93 a8 16 00 00    mov    0x16a8(%rbx),%rdx
         :
         :	        /* 82598 hardware only has a 32 bit counter in the high register */
         :	        switch (hw->mac.type) {
         :	        case ixgbe_mac_82598EB:
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXC);
         :	                hwstats->gorc += IXGBE_READ_REG(hw, IXGBE_GORCH);
    0.00 :	    1b95:       48 89 83 a0 16 00 00    mov    %rax,0x16a0(%rbx)
    0.00 :	    1b9c:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1ba3:       48 05 94 40 00 00       add    $0x4094,%rax
    0.00 :	    1ba9:       8b 00                   mov    (%rax),%eax
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCH);
    0.00 :	    1bab:       89 c0                   mov    %eax,%eax
    0.00 :	    1bad:       48 01 d0                add    %rdx,%rax
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORH);
    0.00 :	    1bb0:       48 8b 93 28 17 00 00    mov    0x1728(%rbx),%rdx
         :	        /* 82598 hardware only has a 32 bit counter in the high register */
         :	        switch (hw->mac.type) {
         :	        case ixgbe_mac_82598EB:
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXC);
         :	                hwstats->gorc += IXGBE_READ_REG(hw, IXGBE_GORCH);
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCH);
    0.00 :	    1bb7:       48 89 83 a8 16 00 00    mov    %rax,0x16a8(%rbx)
    0.00 :	    1bbe:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1bc5:       48 05 c4 40 00 00       add    $0x40c4,%rax
    0.00 :	    1bcb:       8b 00                   mov    (%rax),%eax
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORH);
    0.00 :	    1bcd:       89 c0                   mov    %eax,%eax
    0.00 :	    1bcf:       48 01 d0                add    %rdx,%rax
    0.00 :	    1bd2:       48 89 83 28 17 00 00    mov    %rax,0x1728(%rbx)
    0.00 :	    1bd9:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1be0:       48 05 78 40 00 00       add    $0x4078,%rax
    0.00 :	    1be6:       8b 00                   mov    (%rax),%eax
         :	                break;
         :	        default:
         :	                break;
         :	        }
         :	        bprc = IXGBE_READ_REG(hw, IXGBE_BPRC);
         :	        hwstats->bprc += bprc;
    0.00 :	    1be8:       89 c1                   mov    %eax,%ecx
    0.00 :	    1bea:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1bf1:       48 01 8b 88 16 00 00    add    %rcx,0x1688(%rbx)
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
    0.00 :	    1bf8:       48 8b 93 90 16 00 00    mov    0x1690(%rbx),%rdx
    0.00 :	    1bff:       48 05 7c 40 00 00       add    $0x407c,%rax
    0.00 :	    1c05:       8b 00                   mov    (%rax),%eax
    0.00 :	    1c07:       89 c0                   mov    %eax,%eax
    0.00 :	    1c09:       48 01 d0                add    %rdx,%rax
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
    0.00 :	    1c0c:       83 bb 50 10 00 00 01    cmpl   $0x1,0x1050(%rbx)
         :	        default:
         :	                break;
         :	        }
         :	        bprc = IXGBE_READ_REG(hw, IXGBE_BPRC);
         :	        hwstats->bprc += bprc;
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
    0.00 :	    1c13:       48 89 83 90 16 00 00    mov    %rax,0x1690(%rbx)
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
    0.00 :	    1c1a:       0f 84 84 0b 00 00       je     27a4 <ixgbe_update_stats+0xfa4>
    0.00 :	    1c20:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
    0.00 :	    1c27:       48 8b 93 00 17 00 00    mov    0x1700(%rbx),%rdx
    0.00 :	    1c2e:       48 05 ac 40 00 00       add    $0x40ac,%rax
    0.00 :	    1c34:       8b 00                   mov    (%rax),%eax
    0.00 :	    1c36:       89 c0                   mov    %eax,%eax
    0.00 :	    1c38:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
    0.00 :	    1c3b:       48 8b 93 50 16 00 00    mov    0x1650(%rbx),%rdx
         :	        bprc = IXGBE_READ_REG(hw, IXGBE_BPRC);
         :	        hwstats->bprc += bprc;
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
    0.00 :	    1c42:       48 89 83 00 17 00 00    mov    %rax,0x1700(%rbx)
    0.00 :	    1c49:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1c50:       48 05 5c 40 00 00       add    $0x405c,%rax
    0.00 :	    1c56:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
    0.00 :	    1c58:       89 c0                   mov    %eax,%eax
    0.00 :	    1c5a:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
    0.00 :	    1c5d:       48 8b 93 58 16 00 00    mov    0x1658(%rbx),%rdx
         :	        hwstats->bprc += bprc;
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
    0.00 :	    1c64:       48 89 83 50 16 00 00    mov    %rax,0x1650(%rbx)
    0.00 :	    1c6b:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1c72:       48 05 60 40 00 00       add    $0x4060,%rax
    0.00 :	    1c78:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
    0.00 :	    1c7a:       89 c0                   mov    %eax,%eax
    0.00 :	    1c7c:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
    0.00 :	    1c7f:       48 8b 93 60 16 00 00    mov    0x1660(%rbx),%rdx
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
    0.00 :	    1c86:       48 89 83 58 16 00 00    mov    %rax,0x1658(%rbx)
    0.00 :	    1c8d:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1c94:       48 05 64 40 00 00       add    $0x4064,%rax
    0.00 :	    1c9a:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
    0.00 :	    1c9c:       89 c0                   mov    %eax,%eax
    0.00 :	    1c9e:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc511 += IXGBE_READ_REG(hw, IXGBE_PRC511);
    0.00 :	    1ca1:       48 8b 93 68 16 00 00    mov    0x1668(%rbx),%rdx
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
    0.00 :	    1ca8:       48 89 83 60 16 00 00    mov    %rax,0x1660(%rbx)
    0.00 :	    1caf:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1cb6:       48 05 68 40 00 00       add    $0x4068,%rax
    0.00 :	    1cbc:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc511 += IXGBE_READ_REG(hw, IXGBE_PRC511);
    0.00 :	    1cbe:       89 c0                   mov    %eax,%eax
    0.00 :	    1cc0:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc1023 += IXGBE_READ_REG(hw, IXGBE_PRC1023);
    0.00 :	    1cc3:       48 8b 93 70 16 00 00    mov    0x1670(%rbx),%rdx
         :	                hwstats->mprc -= bprc;
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
         :	        hwstats->prc511 += IXGBE_READ_REG(hw, IXGBE_PRC511);
    0.00 :	    1cca:       48 89 83 68 16 00 00    mov    %rax,0x1668(%rbx)
    0.00 :	    1cd1:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1cd8:       48 05 6c 40 00 00       add    $0x406c,%rax
    0.00 :	    1cde:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc1023 += IXGBE_READ_REG(hw, IXGBE_PRC1023);
    0.00 :	    1ce0:       89 c0                   mov    %eax,%eax
    0.00 :	    1ce2:       48 01 d0                add    %rdx,%rax
         :	        hwstats->prc1522 += IXGBE_READ_REG(hw, IXGBE_PRC1522);
    0.00 :	    1ce5:       48 8b 93 78 16 00 00    mov    0x1678(%rbx),%rdx
         :	        hwstats->roc += IXGBE_READ_REG(hw, IXGBE_ROC);
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
         :	        hwstats->prc511 += IXGBE_READ_REG(hw, IXGBE_PRC511);
         :	        hwstats->prc1023 += IXGBE_READ_REG(hw, IXGBE_PRC1023);
    0.00 :	    1cec:       48 89 83 70 16 00 00    mov    %rax,0x1670(%rbx)
    0.00 :	    1cf3:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1cfa:       48 05 70 40 00 00       add    $0x4070,%rax
    0.00 :	    1d00:       8b 00                   mov    (%rax),%eax
         :	        hwstats->prc1522 += IXGBE_READ_REG(hw, IXGBE_PRC1522);
    0.00 :	    1d02:       89 c0                   mov    %eax,%eax
    0.00 :	    1d04:       48 01 d0                add    %rdx,%rax
         :	        hwstats->rlec += IXGBE_READ_REG(hw, IXGBE_RLEC);
    0.00 :	    1d07:       48 8b 93 28 15 00 00    mov    0x1528(%rbx),%rdx
         :	        hwstats->prc64 += IXGBE_READ_REG(hw, IXGBE_PRC64);
         :	        hwstats->prc127 += IXGBE_READ_REG(hw, IXGBE_PRC127);
         :	        hwstats->prc255 += IXGBE_READ_REG(hw, IXGBE_PRC255);
         :	        hwstats->prc511 += IXGBE_READ_REG(hw, IXGBE_PRC511);
         :	        hwstats->prc1023 += IXGBE_READ_REG(hw, IXGBE_PRC1023);
         :	        hwstats->prc1522 += IXGBE_READ_REG(hw, IXGBE_PRC1522);
    0.00 :	    1d0e:       48 89 83 78 16 00 00    mov    %rax,0x1678(%rbx)
    0.00 :	    1d15:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1d1c:       48 05 40 40 00 00       add    $0x4040,%rax
    0.00 :	    1d22:       8b 00                   mov    (%rax),%eax
         :	        hwstats->rlec += IXGBE_READ_REG(hw, IXGBE_RLEC);
    0.00 :	    1d24:       89 c0                   mov    %eax,%eax
    0.00 :	    1d26:       48 01 d0                add    %rdx,%rax
    0.00 :	    1d29:       48 89 83 28 15 00 00    mov    %rax,0x1528(%rbx)
    0.00 :	    1d30:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1d37:       48 05 60 3f 00 00       add    $0x3f60,%rax
    0.00 :	    1d3d:       8b 30                   mov    (%rax),%esi
         :	        lxon = IXGBE_READ_REG(hw, IXGBE_LXONTXC);
         :	        hwstats->lxontxc += lxon;
    0.00 :	    1d3f:       89 f0                   mov    %esi,%eax
    0.00 :	    1d41:       48 01 83 30 15 00 00    add    %rax,0x1530(%rbx)
    0.00 :	    1d48:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1d4f:       48 05 68 3f 00 00       add    $0x3f68,%rax
    0.00 :	    1d55:       8b 10                   mov    (%rax),%edx
         :	        lxoff = IXGBE_READ_REG(hw, IXGBE_LXOFFTXC);
         :	        hwstats->lxofftxc += lxoff;
    0.00 :	    1d57:       89 d0                   mov    %edx,%eax
    0.00 :	    1d59:       48 01 83 40 15 00 00    add    %rax,0x1540(%rbx)
    0.00 :	    1d60:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	        hwstats->gptc += IXGBE_READ_REG(hw, IXGBE_GPTC);
    0.00 :	    1d67:       48 8b 8b 98 16 00 00    mov    0x1698(%rbx),%rcx
    0.00 :	    1d6e:       48 05 80 40 00 00       add    $0x4080,%rax
    0.00 :	    1d74:       8b 00                   mov    (%rax),%eax
    0.00 :	    1d76:       89 c0                   mov    %eax,%eax
    0.00 :	    1d78:       48 01 c8                add    %rcx,%rax
         :	        hwstats->mptc += IXGBE_READ_REG(hw, IXGBE_MPTC);
    0.00 :	    1d7b:       48 8b 8b 70 17 00 00    mov    0x1770(%rbx),%rcx
         :	        hwstats->rlec += IXGBE_READ_REG(hw, IXGBE_RLEC);
         :	        lxon = IXGBE_READ_REG(hw, IXGBE_LXONTXC);
         :	        hwstats->lxontxc += lxon;
         :	        lxoff = IXGBE_READ_REG(hw, IXGBE_LXOFFTXC);
         :	        hwstats->lxofftxc += lxoff;
         :	        hwstats->gptc += IXGBE_READ_REG(hw, IXGBE_GPTC);
    0.00 :	    1d82:       48 89 83 98 16 00 00    mov    %rax,0x1698(%rbx)
    0.00 :	    1d89:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1d90:       48 05 f0 40 00 00       add    $0x40f0,%rax
    0.00 :	    1d96:       8b 00                   mov    (%rax),%eax
         :	        hwstats->mptc += IXGBE_READ_REG(hw, IXGBE_MPTC);
    0.00 :	    1d98:       89 c0                   mov    %eax,%eax
         :	        /*
         :	         * 82598 errata - tx of flow control packets is included in tx counters
         :	         */
         :	        xon_off_tot = lxon + lxoff;
    0.00 :	    1d9a:       01 f2                   add    %esi,%edx
         :	        lxon = IXGBE_READ_REG(hw, IXGBE_LXONTXC);
         :	        hwstats->lxontxc += lxon;
         :	        lxoff = IXGBE_READ_REG(hw, IXGBE_LXOFFTXC);
         :	        hwstats->lxofftxc += lxoff;
         :	        hwstats->gptc += IXGBE_READ_REG(hw, IXGBE_GPTC);
         :	        hwstats->mptc += IXGBE_READ_REG(hw, IXGBE_MPTC);
    0.00 :	    1d9c:       48 01 c8                add    %rcx,%rax
         :	        /*
         :	         * 82598 errata - tx of flow control packets is included in tx counters
         :	         */
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
    0.00 :	    1d9f:       89 d1                   mov    %edx,%ecx
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
    0.00 :	    1da1:       c1 e2 06                shl    $0x6,%edx
         :	        lxon = IXGBE_READ_REG(hw, IXGBE_LXONTXC);
         :	        hwstats->lxontxc += lxon;
         :	        lxoff = IXGBE_READ_REG(hw, IXGBE_LXOFFTXC);
         :	        hwstats->lxofftxc += lxoff;
         :	        hwstats->gptc += IXGBE_READ_REG(hw, IXGBE_GPTC);
         :	        hwstats->mptc += IXGBE_READ_REG(hw, IXGBE_MPTC);
    0.00 :	    1da4:       48 89 83 70 17 00 00    mov    %rax,0x1770(%rbx)
    0.00 :	    1dab:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	         * 82598 errata - tx of flow control packets is included in tx counters
         :	         */
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
    0.00 :	    1db2:       89 d2                   mov    %edx,%edx
         :	        hwstats->mptc += IXGBE_READ_REG(hw, IXGBE_MPTC);
         :	        /*
         :	         * 82598 errata - tx of flow control packets is included in tx counters
         :	         */
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
    0.00 :	    1db4:       48 29 8b 98 16 00 00    sub    %rcx,0x1698(%rbx)
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
    0.00 :	    1dbb:       48 29 93 a8 16 00 00    sub    %rdx,0x16a8(%rbx)
         :	        /*
         :	         * 82598 errata - tx of flow control packets is included in tx counters
         :	         */
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
         :	        hwstats->mptc -= xon_off_tot;
    0.00 :	    1dc2:       48 29 8b 70 17 00 00    sub    %rcx,0x1770(%rbx)
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
    0.00 :	    1dc9:       48 8b 93 f0 16 00 00    mov    0x16f0(%rbx),%rdx
    0.00 :	    1dd0:       48 05 a4 40 00 00       add    $0x40a4,%rax
    0.00 :	    1dd6:       8b 00                   mov    (%rax),%eax
    0.00 :	    1dd8:       89 c0                   mov    %eax,%eax
    0.00 :	    1dda:       48 01 d0                add    %rdx,%rax
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
    0.00 :	    1ddd:       48 8b 93 f8 16 00 00    mov    0x16f8(%rbx),%rdx
         :	         */
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
    0.00 :	    1de4:       48 89 83 f0 16 00 00    mov    %rax,0x16f0(%rbx)
    0.00 :	    1deb:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1df2:       48 05 a8 40 00 00       add    $0x40a8,%rax
    0.00 :	    1df8:       8b 00                   mov    (%rax),%eax
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
    0.00 :	    1dfa:       89 c0                   mov    %eax,%eax
    0.00 :	    1dfc:       48 01 d0                add    %rdx,%rax
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
    0.00 :	    1dff:       48 8b 93 08 17 00 00    mov    0x1708(%rbx),%rdx
         :	        xon_off_tot = lxon + lxoff;
         :	        hwstats->gptc -= xon_off_tot;
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
    0.00 :	    1e06:       48 89 83 f8 16 00 00    mov    %rax,0x16f8(%rbx)
    0.00 :	    1e0d:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1e14:       48 05 b0 40 00 00       add    $0x40b0,%rax
    0.00 :	    1e1a:       8b 00                   mov    (%rax),%eax
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
    0.00 :	    1e1c:       89 c0                   mov    %eax,%eax
    0.00 :	    1e1e:       48 01 d0                add    %rdx,%rax
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
    0.00 :	    1e21:       48 8b 93 30 17 00 00    mov    0x1730(%rbx),%rdx
         :	        hwstats->gptc -= xon_off_tot;
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
    0.00 :	    1e28:       48 89 83 08 17 00 00    mov    %rax,0x1708(%rbx)
    0.00 :	    1e2f:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1e36:       48 05 d0 40 00 00       add    $0x40d0,%rax
    0.00 :	    1e3c:       8b 00                   mov    (%rax),%eax
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
    0.00 :	    1e3e:       89 c0                   mov    %eax,%eax
    0.00 :	    1e40:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
    0.00 :	    1e43:       48 8b 93 40 17 00 00    mov    0x1740(%rbx),%rdx
         :	        hwstats->mptc -= xon_off_tot;
         :	        hwstats->gotc -= (xon_off_tot * (ETH_ZLEN + ETH_FCS_LEN));
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
    0.00 :	    1e4a:       48 89 83 30 17 00 00    mov    %rax,0x1730(%rbx)
    0.00 :	    1e51:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1e58:       48 05 d8 40 00 00       add    $0x40d8,%rax
    0.00 :	    1e5e:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
    0.00 :	    1e60:       89 c0                   mov    %eax,%eax
    0.00 :	    1e62:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
    0.00 :	    1e65:       48 8b 93 48 17 00 00    mov    0x1748(%rbx),%rdx
         :	        hwstats->ruc += IXGBE_READ_REG(hw, IXGBE_RUC);
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
    0.00 :	    1e6c:       48 29 c8                sub    %rcx,%rax
    0.00 :	    1e6f:       48 89 83 40 17 00 00    mov    %rax,0x1740(%rbx)
    0.00 :	    1e76:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1e7d:       48 05 dc 40 00 00       add    $0x40dc,%rax
    0.00 :	    1e83:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
    0.00 :	    1e85:       89 c0                   mov    %eax,%eax
    0.00 :	    1e87:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
    0.00 :	    1e8a:       48 8b 93 50 17 00 00    mov    0x1750(%rbx),%rdx
         :	        hwstats->rfc += IXGBE_READ_REG(hw, IXGBE_RFC);
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
    0.00 :	    1e91:       48 89 83 48 17 00 00    mov    %rax,0x1748(%rbx)
    0.00 :	    1e98:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1e9f:       48 05 e0 40 00 00       add    $0x40e0,%rax
    0.00 :	    1ea5:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
    0.00 :	    1ea7:       89 c0                   mov    %eax,%eax
    0.00 :	    1ea9:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc511 += IXGBE_READ_REG(hw, IXGBE_PTC511);
    0.00 :	    1eac:       48 8b 93 58 17 00 00    mov    0x1758(%rbx),%rdx
         :	        hwstats->rjc += IXGBE_READ_REG(hw, IXGBE_RJC);
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
    0.00 :	    1eb3:       48 89 83 50 17 00 00    mov    %rax,0x1750(%rbx)
    0.00 :	    1eba:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1ec1:       48 05 e4 40 00 00       add    $0x40e4,%rax
    0.00 :	    1ec7:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc511 += IXGBE_READ_REG(hw, IXGBE_PTC511);
    0.00 :	    1ec9:       89 c0                   mov    %eax,%eax
    0.00 :	    1ecb:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc1023 += IXGBE_READ_REG(hw, IXGBE_PTC1023);
    0.00 :	    1ece:       48 8b 93 60 17 00 00    mov    0x1760(%rbx),%rdx
         :	        hwstats->tpr += IXGBE_READ_REG(hw, IXGBE_TPR);
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
         :	        hwstats->ptc511 += IXGBE_READ_REG(hw, IXGBE_PTC511);
    0.00 :	    1ed5:       48 89 83 58 17 00 00    mov    %rax,0x1758(%rbx)
    0.00 :	    1edc:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1ee3:       48 05 e8 40 00 00       add    $0x40e8,%rax
    0.00 :	    1ee9:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc1023 += IXGBE_READ_REG(hw, IXGBE_PTC1023);
    0.00 :	    1eeb:       89 c0                   mov    %eax,%eax
    0.00 :	    1eed:       48 01 d0                add    %rdx,%rax
         :	        hwstats->ptc1522 += IXGBE_READ_REG(hw, IXGBE_PTC1522);
    0.00 :	    1ef0:       48 8b 93 68 17 00 00    mov    0x1768(%rbx),%rdx
         :	        hwstats->ptc64 += IXGBE_READ_REG(hw, IXGBE_PTC64);
         :	        hwstats->ptc64 -= xon_off_tot;
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
         :	        hwstats->ptc511 += IXGBE_READ_REG(hw, IXGBE_PTC511);
         :	        hwstats->ptc1023 += IXGBE_READ_REG(hw, IXGBE_PTC1023);
    0.00 :	    1ef7:       48 89 83 60 17 00 00    mov    %rax,0x1760(%rbx)
    0.00 :	    1efe:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1f05:       48 05 ec 40 00 00       add    $0x40ec,%rax
    0.00 :	    1f0b:       8b 00                   mov    (%rax),%eax
         :	        hwstats->ptc1522 += IXGBE_READ_REG(hw, IXGBE_PTC1522);
    0.00 :	    1f0d:       89 c0                   mov    %eax,%eax
    0.00 :	    1f0f:       48 01 d0                add    %rdx,%rax
         :	        hwstats->bptc += IXGBE_READ_REG(hw, IXGBE_BPTC);
    0.00 :	    1f12:       48 8b 93 78 17 00 00    mov    0x1778(%rbx),%rdx
         :	        hwstats->ptc64 -= xon_off_tot;
         :	        hwstats->ptc127 += IXGBE_READ_REG(hw, IXGBE_PTC127);
         :	        hwstats->ptc255 += IXGBE_READ_REG(hw, IXGBE_PTC255);
         :	        hwstats->ptc511 += IXGBE_READ_REG(hw, IXGBE_PTC511);
         :	        hwstats->ptc1023 += IXGBE_READ_REG(hw, IXGBE_PTC1023);
         :	        hwstats->ptc1522 += IXGBE_READ_REG(hw, IXGBE_PTC1522);
    0.00 :	    1f19:       48 89 83 68 17 00 00    mov    %rax,0x1768(%rbx)
    0.00 :	    1f20:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    1f27:       48 05 f4 40 00 00       add    $0x40f4,%rax
    0.00 :	    1f2d:       8b 00                   mov    (%rax),%eax
         :	        hwstats->bptc += IXGBE_READ_REG(hw, IXGBE_BPTC);
    0.00 :	    1f2f:       89 c0                   mov    %eax,%eax
    0.00 :	    1f31:       48 01 d0                add    %rdx,%rax
    0.00 :	    1f34:       48 89 83 78 17 00 00    mov    %rax,0x1778(%rbx)
         :	        /* Fill out the OS statistics structure */
         :	        net_stats->multicast = hwstats->mprc;
    0.00 :	    1f3b:       48 8b 83 90 16 00 00    mov    0x1690(%rbx),%rax
    0.00 :	    1f42:       49 89 87 08 01 00 00    mov    %rax,0x108(%r15)
         :
         :	        /* Rx Errors */
         :	        net_stats->rx_errors = hwstats->crcerrs +
    0.00 :	    1f49:       48 8b 83 28 15 00 00    mov    0x1528(%rbx),%rax
    0.00 :	    1f50:       48 03 83 b0 14 00 00    add    0x14b0(%rbx),%rax
         :	                                       hwstats->rlec;
         :	        net_stats->rx_dropped = 0;
    0.00 :	    1f57:       49 c7 87 f8 00 00 00    movq   $0x0,0xf8(%r15)
    0.00 :	    1f5e:       00 00 00 00 
         :	        hwstats->bptc += IXGBE_READ_REG(hw, IXGBE_BPTC);
         :	        /* Fill out the OS statistics structure */
         :	        net_stats->multicast = hwstats->mprc;
         :
         :	        /* Rx Errors */
         :	        net_stats->rx_errors = hwstats->crcerrs +
    0.00 :	    1f62:       49 89 87 e8 00 00 00    mov    %rax,0xe8(%r15)
         :	                                       hwstats->rlec;
         :	        net_stats->rx_dropped = 0;
         :	        net_stats->rx_length_errors = hwstats->rlec;
    0.00 :	    1f69:       48 8b 83 28 15 00 00    mov    0x1528(%rbx),%rax
    0.00 :	    1f70:       49 89 87 18 01 00 00    mov    %rax,0x118(%r15)
         :	        net_stats->rx_crc_errors = hwstats->crcerrs;
    0.00 :	    1f77:       48 8b 83 b0 14 00 00    mov    0x14b0(%rbx),%rax
         :	        net_stats->rx_missed_errors = total_mpc;
    0.00 :	    1f7e:       4d 89 b7 40 01 00 00    mov    %r14,0x140(%r15)
         :	        /* Rx Errors */
         :	        net_stats->rx_errors = hwstats->crcerrs +
         :	                                       hwstats->rlec;
         :	        net_stats->rx_dropped = 0;
         :	        net_stats->rx_length_errors = hwstats->rlec;
         :	        net_stats->rx_crc_errors = hwstats->crcerrs;
    0.00 :	    1f85:       49 89 87 28 01 00 00    mov    %rax,0x128(%r15)
    0.00 :	    1f8c:       48 8b 83 10 02 00 00    mov    0x210(%rbx),%rax
         :	        /*
         :	         * VF Stats Collection - skip while resetting because these
         :	         * are not clear on read and otherwise you'll sometimes get
         :	         * crazy values.
         :	         */
         :	        if (!test_bit(__IXGBE_RESETTING, &adapter->state)) {
    0.00 :	    1f93:       a8 02                   test   $0x2,%al
    0.00 :	    1f95:       0f 85 45 02 00 00       jne    21e0 <ixgbe_update_stats+0x9e0>
         :	                for (i = 0; i < adapter->num_vfs; i++) {
    0.00 :	    1f9b:       8b 83 58 7c 00 00       mov    0x7c58(%rbx),%eax
    0.00 :	    1fa1:       85 c0                   test   %eax,%eax
    0.00 :	    1fa3:       0f 84 37 02 00 00       je     21e0 <ixgbe_update_stats+0x9e0>
    0.00 :	    1fa9:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    1fac:       bf 1c 10 00 00          mov    $0x101c,%edi
    0.00 :	    1fb1:       41 b8 00 84 00 00       mov    $0x8400,%r8d
    0.00 :	    1fb7:       41 ba 00 83 00 00       mov    $0x8300,%r10d
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFGPRC(i),             \
    0.00 :	    1fbd:       48 bd 00 00 00 00 01    movabs $0x100000000,%rbp
    0.00 :	    1fc4:       00 00 00 
    0.00 :	    1fc7:       49 bb 00 00 00 00 ff    movabs $0xffffffff00000000,%r11
    0.00 :	    1fce:       ff ff ff 
         :	                                        adapter->vfinfo[i].last_vfstats.gprc, \
         :	                                        adapter->vfinfo[i].vfstats.gprc);
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFGPTC(i),             \
         :	                                        adapter->vfinfo[i].last_vfstats.gptc, \
         :	                                        adapter->vfinfo[i].vfstats.gptc);
         :	                        UPDATE_VF_COUNTER_36bit(IXGBE_PVFGORC_LSB(i),         \
    0.00 :	    1fd1:       49 bd 00 00 00 00 10    movabs $0x1000000000,%r13
    0.00 :	    1fd8:       00 00 00 
    0.00 :	    1fdb:       49 bc 00 00 00 00 f0    movabs $0xfffffff000000000,%r12
    0.00 :	    1fe2:       ff ff ff 
    0.00 :	    1fe5:       0f 1f 00                nopl   (%rax)
    0.00 :	    1fe8:       89 f8                   mov    %edi,%eax
    0.00 :	    1fea:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    1ff1:       8b 00                   mov    (%rax),%eax
         :	         * are not clear on read and otherwise you'll sometimes get
         :	         * crazy values.
         :	         */
         :	        if (!test_bit(__IXGBE_RESETTING, &adapter->state)) {
         :	                for (i = 0; i < adapter->num_vfs; i++) {
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFGPRC(i),             \
    0.00 :	    1ff3:       89 c2                   mov    %eax,%edx
    0.00 :	    1ff5:       44 89 c8                mov    %r9d,%eax
    0.00 :	    1ff8:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	    1ffc:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	    2000:       48 8d 0c c5 00 00 00    lea    0x0(,%rax,8),%rcx
    0.00 :	    2007:       00 
    0.00 :	    2008:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    200f:       48 01 c8                add    %rcx,%rax
    0.00 :	    2012:       48 3b 50 78             cmp    0x78(%rax),%rdx
    0.00 :	    2016:       73 0e                   jae    2026 <ixgbe_update_stats+0x826>
    0.00 :	    2018:       48 01 68 50             add    %rbp,0x50(%rax)
    0.00 :	    201c:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2023:       48 01 c8                add    %rcx,%rax
    0.00 :	    2026:       48 89 50 78             mov    %rdx,0x78(%rax)
    0.00 :	    202a:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2031:       48 01 c8                add    %rcx,%rax
    0.00 :	    2034:       4c 21 58 50             and    %r11,0x50(%rax)
    0.00 :	    2038:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    203f:       48 01 c8                add    %rcx,%rax
    0.00 :	    2042:       48 09 50 50             or     %rdx,0x50(%rax)
    0.00 :	    2046:       44 89 d0                mov    %r10d,%eax
    0.00 :	    2049:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    2050:       8b 00                   mov    (%rax),%eax
         :	                                        adapter->vfinfo[i].last_vfstats.gprc, \
         :	                                        adapter->vfinfo[i].vfstats.gprc);
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFGPTC(i),             \
    0.00 :	    2052:       89 c2                   mov    %eax,%edx
    0.00 :	    2054:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    205b:       48 01 c8                add    %rcx,%rax
    0.00 :	    205e:       48 3b 90 88 00 00 00    cmp    0x88(%rax),%rdx
    0.00 :	    2065:       73 0e                   jae    2075 <ixgbe_update_stats+0x875>
    0.00 :	    2067:       48 01 68 60             add    %rbp,0x60(%rax)
    0.00 :	    206b:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2072:       48 01 c8                add    %rcx,%rax
    0.00 :	    2075:       48 89 90 88 00 00 00    mov    %rdx,0x88(%rax)
    0.00 :	    207c:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2083:       48 01 c8                add    %rcx,%rax
    0.00 :	    2086:       4c 21 58 60             and    %r11,0x60(%rax)
    0.00 :	    208a:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2091:       48 01 c8                add    %rcx,%rax
    0.00 :	    2094:       48 09 50 60             or     %rdx,0x60(%rax)
    0.00 :	    2098:       8d 47 04                lea    0x4(%rdi),%eax
    0.00 :	    209b:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    20a2:       8b 10                   mov    (%rax),%edx
    0.00 :	    20a4:       8d 87 04 c0 00 00       lea    0xc004(%rdi),%eax
    0.00 :	    20aa:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    20b1:       8b 00                   mov    (%rax),%eax
         :	                                        adapter->vfinfo[i].last_vfstats.gptc, \
         :	                                        adapter->vfinfo[i].vfstats.gptc);
         :	                        UPDATE_VF_COUNTER_36bit(IXGBE_PVFGORC_LSB(i),         \
    0.00 :	    20b3:       48 89 c6                mov    %rax,%rsi
    0.00 :	    20b6:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    20bd:       89 d2                   mov    %edx,%edx
    0.00 :	    20bf:       48 c1 e6 20             shl    $0x20,%rsi
    0.00 :	    20c3:       48 09 d6                or     %rdx,%rsi
    0.00 :	    20c6:       48 01 c8                add    %rcx,%rax
    0.00 :	    20c9:       48 3b b0 80 00 00 00    cmp    0x80(%rax),%rsi
    0.00 :	    20d0:       73 0e                   jae    20e0 <ixgbe_update_stats+0x8e0>
    0.00 :	    20d2:       4c 01 68 58             add    %r13,0x58(%rax)
    0.00 :	    20d6:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    20dd:       48 01 c8                add    %rcx,%rax
    0.00 :	    20e0:       48 89 b0 80 00 00 00    mov    %rsi,0x80(%rax)
    0.00 :	    20e7:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    20ee:       48 01 c8                add    %rcx,%rax
    0.00 :	    20f1:       4c 21 60 58             and    %r12,0x58(%rax)
    0.00 :	    20f5:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    20fc:       48 01 c8                add    %rcx,%rax
    0.00 :	    20ff:       48 09 70 58             or     %rsi,0x58(%rax)
    0.00 :	    2103:       44 89 c0                mov    %r8d,%eax
    0.00 :	    2106:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    210d:       8b 10                   mov    (%rax),%edx
    0.00 :	    210f:       41 8d 40 04             lea    0x4(%r8),%eax
    0.00 :	    2113:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    211a:       8b 00                   mov    (%rax),%eax
         :	                                        IXGBE_PVFGORC_MSB(i),                 \
         :	                                        adapter->vfinfo[i].last_vfstats.gorc, \
         :	                                        adapter->vfinfo[i].vfstats.gorc);
         :	                        UPDATE_VF_COUNTER_36bit(IXGBE_PVFGOTC_LSB(i),         \
    0.00 :	    211c:       48 89 c6                mov    %rax,%rsi
    0.00 :	    211f:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2126:       89 d2                   mov    %edx,%edx
    0.00 :	    2128:       48 c1 e6 20             shl    $0x20,%rsi
    0.00 :	    212c:       48 09 d6                or     %rdx,%rsi
    0.00 :	    212f:       48 01 c8                add    %rcx,%rax
    0.00 :	    2132:       48 3b b0 90 00 00 00    cmp    0x90(%rax),%rsi
    0.00 :	    2139:       73 0e                   jae    2149 <ixgbe_update_stats+0x949>
    0.00 :	    213b:       4c 01 68 68             add    %r13,0x68(%rax)
    0.00 :	    213f:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2146:       48 01 c8                add    %rcx,%rax
    0.00 :	    2149:       48 89 b0 90 00 00 00    mov    %rsi,0x90(%rax)
    0.00 :	    2150:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2157:       48 01 c8                add    %rcx,%rax
    0.00 :	    215a:       4c 21 60 68             and    %r12,0x68(%rax)
    0.00 :	    215e:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2165:       48 01 c8                add    %rcx,%rax
    0.00 :	    2168:       48 09 70 68             or     %rsi,0x68(%rax)
    0.00 :	    216c:       8d 87 00 c0 00 00       lea    0xc000(%rdi),%eax
    0.00 :	    2172:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    2179:       8b 00                   mov    (%rax),%eax
         :	                                        IXGBE_PVFGOTC_MSB(i),                 \
         :	                                        adapter->vfinfo[i].last_vfstats.gotc, \
         :	                                        adapter->vfinfo[i].vfstats.gotc);
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFMPRC(i),             \
    0.00 :	    217b:       89 c2                   mov    %eax,%edx
    0.00 :	    217d:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    2184:       48 01 c8                add    %rcx,%rax
    0.00 :	    2187:       48 3b 90 98 00 00 00    cmp    0x98(%rax),%rdx
    0.00 :	    218e:       73 0e                   jae    219e <ixgbe_update_stats+0x99e>
    0.00 :	    2190:       48 01 68 70             add    %rbp,0x70(%rax)
    0.00 :	    2194:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
    0.00 :	    219b:       48 01 c8                add    %rcx,%rax
    0.00 :	    219e:       48 89 90 98 00 00 00    mov    %rdx,0x98(%rax)
    0.00 :	    21a5:       48 8b 83 60 7c 00 00    mov    0x7c60(%rbx),%rax
         :	         * VF Stats Collection - skip while resetting because these
         :	         * are not clear on read and otherwise you'll sometimes get
         :	         * crazy values.
         :	         */
         :	        if (!test_bit(__IXGBE_RESETTING, &adapter->state)) {
         :	                for (i = 0; i < adapter->num_vfs; i++) {
    0.00 :	    21ac:       41 83 c1 01             add    $0x1,%r9d
    0.00 :	    21b0:       83 c7 40                add    $0x40,%edi
    0.00 :	    21b3:       41 83 c0 08             add    $0x8,%r8d
    0.00 :	    21b7:       41 83 c2 04             add    $0x4,%r10d
         :	                                        adapter->vfinfo[i].vfstats.gorc);
         :	                        UPDATE_VF_COUNTER_36bit(IXGBE_PVFGOTC_LSB(i),         \
         :	                                        IXGBE_PVFGOTC_MSB(i),                 \
         :	                                        adapter->vfinfo[i].last_vfstats.gotc, \
         :	                                        adapter->vfinfo[i].vfstats.gotc);
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFMPRC(i),             \
    0.00 :	    21bb:       48 01 c8                add    %rcx,%rax
    0.00 :	    21be:       4c 21 58 70             and    %r11,0x70(%rax)
    0.00 :	    21c2:       48 89 c8                mov    %rcx,%rax
    0.00 :	    21c5:       48 03 83 60 7c 00 00    add    0x7c60(%rbx),%rax
    0.00 :	    21cc:       48 09 50 70             or     %rdx,0x70(%rax)
         :	         * VF Stats Collection - skip while resetting because these
         :	         * are not clear on read and otherwise you'll sometimes get
         :	         * crazy values.
         :	         */
         :	        if (!test_bit(__IXGBE_RESETTING, &adapter->state)) {
         :	                for (i = 0; i < adapter->num_vfs; i++) {
    0.00 :	    21d0:       44 39 8b 58 7c 00 00    cmp    %r9d,0x7c58(%rbx)
    0.00 :	    21d7:       0f 87 0b fe ff ff       ja     1fe8 <ixgbe_update_stats+0x7e8>
    0.00 :	    21dd:       0f 1f 00                nopl   (%rax)
         :	                        UPDATE_VF_COUNTER_32bit(IXGBE_PVFMPRC(i),             \
         :	                                        adapter->vfinfo[i].last_vfstats.mprc, \
         :	                                        adapter->vfinfo[i].vfstats.mprc);
         :	                }
         :	        }
         :	}
    0.00 :	    21e0:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	    21e4:       5b                      pop    %rbx
    0.00 :	    21e5:       5d                      pop    %rbp
    0.00 :	    21e6:       41 5c                   pop    %r12
    0.00 :	    21e8:       41 5d                   pop    %r13
    0.00 :	    21ea:       41 5e                   pop    %r14
    0.00 :	    21ec:       41 5f                   pop    %r15
    0.00 :	    21ee:       c3                      retq   
         :	                return;
         :
         :	        if (adapter->flags2 & IXGBE_FLAG2_RSC_ENABLED) {
         :	                u64 rsc_count = 0;
         :	                u64 rsc_flush = 0;
         :	                for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    21ef:       44 8b 9f 28 02 00 00    mov    0x228(%rdi),%r11d
    0.00 :	    21f6:       31 f6                   xor    %esi,%esi
    0.00 :	    21f8:       31 c9                   xor    %ecx,%ecx
    0.00 :	    21fa:       45 85 db                test   %r11d,%r11d
    0.00 :	    21fd:       74 32                   je     2231 <ixgbe_update_stats+0xa31>
    0.00 :	    21ff:       41 8d 43 ff             lea    -0x1(%r11),%eax
    0.00 :	    2203:       31 f6                   xor    %esi,%esi
    0.00 :	    2205:       31 c9                   xor    %ecx,%ecx
    0.00 :	    2207:       31 d2                   xor    %edx,%edx
    0.00 :	    2209:       48 8d 3c c5 08 00 00    lea    0x8(,%rax,8),%rdi
    0.00 :	    2210:       00 
    0.00 :	    2211:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        rsc_count += adapter->rx_ring[i]->rx_stats.rsc_count;
    0.00 :	    2218:       48 8b 84 13 d8 04 00    mov    0x4d8(%rbx,%rdx,1),%rax
    0.00 :	    221f:       00 
         :	                        rsc_flush += adapter->rx_ring[i]->rx_stats.rsc_flush;
    0.00 :	    2220:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        if (adapter->flags2 & IXGBE_FLAG2_RSC_ENABLED) {
         :	                u64 rsc_count = 0;
         :	                u64 rsc_flush = 0;
         :	                for (i = 0; i < adapter->num_rx_queues; i++) {
         :	                        rsc_count += adapter->rx_ring[i]->rx_stats.rsc_count;
    0.00 :	    2224:       48 03 70 68             add    0x68(%rax),%rsi
         :	                        rsc_flush += adapter->rx_ring[i]->rx_stats.rsc_flush;
    0.00 :	    2228:       48 03 48 70             add    0x70(%rax),%rcx
         :	                return;
         :
         :	        if (adapter->flags2 & IXGBE_FLAG2_RSC_ENABLED) {
         :	                u64 rsc_count = 0;
         :	                u64 rsc_flush = 0;
         :	                for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    222c:       48 39 fa                cmp    %rdi,%rdx
    0.00 :	    222f:       75 e7                   jne    2218 <ixgbe_update_stats+0xa18>
         :	                        rsc_count += adapter->rx_ring[i]->rx_stats.rsc_count;
         :	                        rsc_flush += adapter->rx_ring[i]->rx_stats.rsc_flush;
         :	                }
         :	                adapter->rsc_total_count = rsc_count;
    0.00 :	    2231:       48 89 b3 30 07 00 00    mov    %rsi,0x730(%rbx)
         :	                adapter->rsc_total_flush = rsc_flush;
    0.00 :	    2238:       48 89 8b 38 07 00 00    mov    %rcx,0x738(%rbx)
    0.00 :	    223f:       e9 06 f6 ff ff          jmpq   184a <ixgbe_update_stats+0x4a>
    0.00 :	    2244:       0f 1f 40 00             nopl   0x0(%rax)
         :	        net_stats->tx_packets = packets;
         :
         :	        hwstats->crcerrs += IXGBE_READ_REG(hw, IXGBE_CRCERRS);
         :
         :	        /* 8 register reads */
         :	        for (i = 0; i < 8; i++) {
    0.00 :	    2248:       66 be 30 60             mov    $0x6030,%si
    0.00 :	    224c:       b9 00 87 00 00          mov    $0x8700,%ecx
    0.00 :	    2251:       eb 1a                   jmp    226d <ixgbe_update_stats+0xa6d>
    0.00 :	    2253:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    2258:       48 83 c6 40             add    $0x40,%rsi
    0.00 :	    225c:       48 83 c1 08             add    $0x8,%rcx
         :	                        break;
         :	                }
         :	        }
         :
         :	        /*16 register reads */
         :	        for (i = 0; i < 16; i++) {
    0.00 :	    2260:       48 81 fe 30 64 00 00    cmp    $0x6430,%rsi
    0.00 :	    2267:       0f 84 c3 00 00 00       je     2330 <ixgbe_update_stats+0xb30>
    0.00 :	    226d:       48 89 f0                mov    %rsi,%rax
         :	                hwstats->qptc[i] += IXGBE_READ_REG(hw, IXGBE_QPTC(i));
    0.00 :	    2270:       48 8b 94 0b 08 91 ff    mov    -0x6ef8(%rbx,%rcx,1),%rdx
    0.00 :	    2277:       ff 
    0.00 :	    2278:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    227f:       8b 00                   mov    (%rax),%eax
    0.00 :	    2281:       89 c0                   mov    %eax,%eax
    0.00 :	    2283:       48 01 d0                add    %rdx,%rax
         :	                hwstats->qprc[i] += IXGBE_READ_REG(hw, IXGBE_QPRC(i));
    0.00 :	    2286:       48 8b 94 0b 88 90 ff    mov    -0x6f78(%rbx,%rcx,1),%rdx
    0.00 :	    228d:       ff 
         :	                }
         :	        }
         :
         :	        /*16 register reads */
         :	        for (i = 0; i < 16; i++) {
         :	                hwstats->qptc[i] += IXGBE_READ_REG(hw, IXGBE_QPTC(i));
    0.00 :	    228e:       48 89 84 0b 08 91 ff    mov    %rax,-0x6ef8(%rbx,%rcx,1)
    0.00 :	    2295:       ff 
    0.00 :	    2296:       48 8d 86 00 b0 ff ff    lea    -0x5000(%rsi),%rax
    0.00 :	    229d:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    22a4:       8b 00                   mov    (%rax),%eax
         :	                hwstats->qprc[i] += IXGBE_READ_REG(hw, IXGBE_QPRC(i));
   50.00 :	    22a6:       89 c0                   mov    %eax,%eax
    0.00 :	    22a8:       48 01 d0                add    %rdx,%rax
    0.00 :	    22ab:       48 89 84 0b 88 90 ff    mov    %rax,-0x6f78(%rbx,%rcx,1)
    0.00 :	    22b2:       ff 
         :	                if ((hw->mac.type == ixgbe_mac_82599EB) ||
    0.00 :	    22b3:       8b 83 50 10 00 00       mov    0x1050(%rbx),%eax
    0.00 :	    22b9:       83 e8 02                sub    $0x2,%eax
    0.00 :	    22bc:       83 f8 01                cmp    $0x1,%eax
    0.00 :	    22bf:       77 97                   ja     2258 <ixgbe_update_stats+0xa58>
    0.00 :	    22c1:       48 89 c8                mov    %rcx,%rax
         :	                    (hw->mac.type == ixgbe_mac_X540)) {
         :	                        hwstats->qbtc[i] += IXGBE_READ_REG(hw, IXGBE_QBTC_L(i));
    0.00 :	    22c4:       48 8b 94 0b 08 92 ff    mov    -0x6df8(%rbx,%rcx,1),%rdx
    0.00 :	    22cb:       ff 
    0.00 :	    22cc:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    22d3:       8b 00                   mov    (%rax),%eax
    0.00 :	    22d5:       89 c0                   mov    %eax,%eax
    0.00 :	    22d7:       48 01 d0                add    %rdx,%rax
    0.00 :	    22da:       48 89 84 0b 08 92 ff    mov    %rax,-0x6df8(%rbx,%rcx,1)
    0.00 :	    22e1:       ff 
    0.00 :	    22e2:       48 8d 41 04             lea    0x4(%rcx),%rax
    0.00 :	    22e6:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    22ed:       8b 00                   mov    (%rax),%eax
    0.00 :	    22ef:       48 8d 86 04 b0 ff ff    lea    -0x4ffc(%rsi),%rax
         :	                        IXGBE_READ_REG(hw, IXGBE_QBTC_H(i)); /* to clear */
         :	                        hwstats->qbrc[i] += IXGBE_READ_REG(hw, IXGBE_QBRC_L(i));
    0.00 :	    22f6:       48 8b 94 0b 88 91 ff    mov    -0x6e78(%rbx,%rcx,1),%rdx
    0.00 :	    22fd:       ff 
    0.00 :	    22fe:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    2305:       8b 00                   mov    (%rax),%eax
    0.00 :	    2307:       89 c0                   mov    %eax,%eax
    0.00 :	    2309:       48 01 d0                add    %rdx,%rax
    0.00 :	    230c:       48 89 84 0b 88 91 ff    mov    %rax,-0x6e78(%rbx,%rcx,1)
    0.00 :	    2313:       ff 
    0.00 :	    2314:       48 8d 86 08 b0 ff ff    lea    -0x4ff8(%rsi),%rax
    0.00 :	    231b:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    2322:       8b 00                   mov    (%rax),%eax
    0.00 :	    2324:       e9 2f ff ff ff          jmpq   2258 <ixgbe_update_stats+0xa58>
    0.00 :	    2329:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    2330:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                        IXGBE_READ_REG(hw, IXGBE_QBRC_H(i)); /* to clear */
         :	                }
         :	        }
         :
         :	        hwstats->gprc += IXGBE_READ_REG(hw, IXGBE_GPRC);
    0.00 :	    2337:       48 8b 8b 80 16 00 00    mov    0x1680(%rbx),%rcx
    0.00 :	    233e:       48 05 74 40 00 00       add    $0x4074,%rax
    0.00 :	    2344:       8b 00                   mov    (%rax),%eax
         :	        /* work around hardware counting issue */
         :	        hwstats->gprc -= missed_rx;
    0.00 :	    2346:       44 89 ca                mov    %r9d,%edx
    0.00 :	    2349:       89 c0                   mov    %eax,%eax
    0.00 :	    234b:       48 29 d1                sub    %rdx,%rcx
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        struct ixgbe_hw_stats *hwstats = &adapter->stats;
         :	        u32 xoff[8] = {0};
         :	        int i;
         :	        bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
    0.00 :	    234e:       0f b6 93 7a 0a 00 00    movzbl 0xa7a(%rbx),%edx
         :	                }
         :	        }
         :
         :	        hwstats->gprc += IXGBE_READ_REG(hw, IXGBE_GPRC);
         :	        /* work around hardware counting issue */
         :	        hwstats->gprc -= missed_rx;
    0.00 :	    2355:       48 01 c1                add    %rax,%rcx
         :	        u32 xoff[8] = {0};
         :	        int i;
         :	        bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
         :
         :	#ifdef HAVE_DCBNL_IEEE
         :	        if (adapter->ixgbe_ieee_pfc)
    0.00 :	    2358:       48 8b 83 50 09 00 00    mov    0x950(%rbx),%rax
         :	                }
         :	        }
         :
         :	        hwstats->gprc += IXGBE_READ_REG(hw, IXGBE_GPRC);
         :	        /* work around hardware counting issue */
         :	        hwstats->gprc -= missed_rx;
    0.00 :	    235f:       48 89 8b 80 16 00 00    mov    %rcx,0x1680(%rbx)
         :	        u32 xoff[8] = {0};
         :	        int i;
         :	        bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
         :
         :	#ifdef HAVE_DCBNL_IEEE
         :	        if (adapter->ixgbe_ieee_pfc)
    0.00 :	    2366:       48 85 c0                test   %rax,%rax
    0.00 :	    2369:       74 12                   je     237d <ixgbe_update_stats+0xb7d>
         :	                pfc_en |= !!(adapter->ixgbe_ieee_pfc->pfc_en);
    0.00 :	    236b:       80 78 01 00             cmpb   $0x0,0x1(%rax)
    0.00 :	    236f:       0f b6 d2                movzbl %dl,%edx
    0.00 :	    2372:       0f 95 c0                setne  %al
    0.00 :	    2375:       0f b6 c0                movzbl %al,%eax
    0.00 :	    2378:       09 d0                   or     %edx,%eax
    0.00 :	    237a:       0f 95 c2                setne  %dl
         :
         :	#endif
         :	        if (!(adapter->flags & IXGBE_FLAG_DCB_ENABLED) || !pfc_en) {
    0.00 :	    237d:       f6 83 19 02 00 00 04    testb  $0x4,0x219(%rbx)
    0.00 :	    2384:       0f 84 8e f7 ff ff       je     1b18 <ixgbe_update_stats+0x318>
    0.00 :	    238a:       84 d2                   test   %dl,%dl
    0.00 :	    238c:       0f 84 86 f7 ff ff       je     1b18 <ixgbe_update_stats+0x318>
         :
         :	static void ixgbe_update_xoff_received(struct ixgbe_adapter *adapter)
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        struct ixgbe_hw_stats *hwstats = &adapter->stats;
         :	        u32 xoff[8] = {0};
    0.00 :	    2392:       48 c7 04 24 00 00 00    movq   $0x0,(%rsp)
    0.00 :	    2399:       00 
    0.00 :	    239a:       48 c7 44 24 08 00 00    movq   $0x0,0x8(%rsp)
    0.00 :	    23a1:       00 00 
    0.00 :	    23a3:       31 c9                   xor    %ecx,%ecx
    0.00 :	    23a5:       48 c7 44 24 10 00 00    movq   $0x0,0x10(%rsp)
    0.00 :	    23ac:       00 00 
    0.00 :	    23ae:       48 c7 44 24 18 00 00    movq   $0x0,0x18(%rsp)
    0.00 :	    23b5:       00 00 
    0.00 :	    23b7:       ba 20 cf 00 00          mov    $0xcf20,%edx
    0.00 :	    23bc:       48 89 e6                mov    %rsp,%rsi
    0.00 :	    23bf:       eb 52                   jmp    2413 <ixgbe_update_stats+0xc13>
    0.00 :	    23c1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    23c8:       48 8d 82 40 72 ff ff    lea    -0x8dc0(%rdx),%rax
    0.00 :	    23cf:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    23d6:       8b 00                   mov    (%rax),%eax
         :	                switch (hw->mac.type) {
         :	                case ixgbe_mac_82598EB:
         :	                        xoff[i] = IXGBE_READ_REG(hw, IXGBE_PXOFFRXC(i));
         :	                        break;
         :	                default:
         :	                        xoff[i] = IXGBE_READ_REG(hw, IXGBE_PXOFFRXCNT(i));
    0.00 :	    23d8:       89 84 16 e0 30 ff ff    mov    %eax,-0xcf20(%rsi,%rdx,1)
         :	                }
         :	                hwstats->pxoffrxc[i] += xoff[i];
    0.00 :	    23df:       8b 84 16 e0 30 ff ff    mov    -0xcf20(%rsi,%rdx,1),%eax
         :	                ixgbe_update_xoff_rx_lfc(adapter);
         :	                return;
         :	        }
         :
         :	        /* update stats for each tc, only valid with PFC enabled */
         :	        for (i = 0; i < MAX_TX_PACKET_BUFFERS; i++) {
    0.00 :	    23e6:       83 c1 01                add    $0x1,%ecx
         :	                        xoff[i] = IXGBE_READ_REG(hw, IXGBE_PXOFFRXC(i));
         :	                        break;
         :	                default:
         :	                        xoff[i] = IXGBE_READ_REG(hw, IXGBE_PXOFFRXCNT(i));
         :	                }
         :	                hwstats->pxoffrxc[i] += xoff[i];
    0.00 :	    23e9:       48 01 84 53 d0 77 fe    add    %rax,-0x18830(%rbx,%rdx,2)
    0.00 :	    23f0:       ff 
         :	                ixgbe_update_xoff_rx_lfc(adapter);
         :	                return;
         :	        }
         :
         :	        /* update stats for each tc, only valid with PFC enabled */
         :	        for (i = 0; i < MAX_TX_PACKET_BUFFERS; i++) {
    0.00 :	    23f1:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    23f7:       25 00 04 00 00          and    $0x400,%eax
    0.00 :	    23fc:       83 f8 01                cmp    $0x1,%eax
    0.00 :	    23ff:       19 c0                   sbb    %eax,%eax
    0.00 :	    2401:       48 83 c2 04             add    $0x4,%rdx
    0.00 :	    2405:       83 e0 f9                and    $0xfffffff9,%eax
    0.00 :	    2408:       83 c0 08                add    $0x8,%eax
    0.00 :	    240b:       39 c8                   cmp    %ecx,%eax
    0.00 :	    240d:       0f 8e a0 03 00 00       jle    27b3 <ixgbe_update_stats+0xfb3>
         :	                switch (hw->mac.type) {
    0.00 :	    2413:       83 bb 50 10 00 00 01    cmpl   $0x1,0x1050(%rbx)
    0.00 :	    241a:       75 ac                   jne    23c8 <ixgbe_update_stats+0xbc8>
    0.00 :	    241c:       48 89 d0                mov    %rdx,%rax
    0.00 :	    241f:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    2426:       8b 00                   mov    (%rax),%eax
         :	                case ixgbe_mac_82598EB:
         :	                        xoff[i] = IXGBE_READ_REG(hw, IXGBE_PXOFFRXC(i));
    0.00 :	    2428:       89 84 16 e0 30 ff ff    mov    %eax,-0xcf20(%rsi,%rdx,1)
    0.00 :	    242f:       eb ae                   jmp    23df <ixgbe_update_stats+0xbdf>
    0.00 :	    2431:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCH);
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORH);
         :	                break;
         :	        case ixgbe_mac_X540:
         :	                /* OS2BMC stats are X540 only*/
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
    0.00 :	    2438:       48 8b 93 e0 1a 00 00    mov    0x1ae0(%rbx),%rdx
    0.00 :	    243f:       48 05 c4 41 00 00       add    $0x41c4,%rax
    0.00 :	    2445:       8b 00                   mov    (%rax),%eax
    0.00 :	    2447:       89 c0                   mov    %eax,%eax
    0.00 :	    2449:       48 01 d0                add    %rdx,%rax
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
    0.00 :	    244c:       48 8b 93 e8 1a 00 00    mov    0x1ae8(%rbx),%rdx
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCH);
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORH);
         :	                break;
         :	        case ixgbe_mac_X540:
         :	                /* OS2BMC stats are X540 only*/
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
    0.00 :	    2453:       48 89 83 e0 1a 00 00    mov    %rax,0x1ae0(%rbx)
    0.00 :	    245a:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2461:       48 05 b0 87 00 00       add    $0x87b0,%rax
    0.00 :	    2467:       8b 00                   mov    (%rax),%eax
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
    0.00 :	    2469:       89 c0                   mov    %eax,%eax
    0.00 :	    246b:       48 01 d0                add    %rdx,%rax
         :	                hwstats->b2ospc += IXGBE_READ_REG(hw, IXGBE_B2OSPC);
    0.00 :	    246e:       48 8b 93 d0 1a 00 00    mov    0x1ad0(%rbx),%rdx
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORH);
         :	                break;
         :	        case ixgbe_mac_X540:
         :	                /* OS2BMC stats are X540 only*/
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
    0.00 :	    2475:       48 89 83 e8 1a 00 00    mov    %rax,0x1ae8(%rbx)
    0.00 :	    247c:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2483:       48 05 c0 41 00 00       add    $0x41c0,%rax
    0.00 :	    2489:       8b 00                   mov    (%rax),%eax
         :	                hwstats->b2ospc += IXGBE_READ_REG(hw, IXGBE_B2OSPC);
    0.00 :	    248b:       89 c0                   mov    %eax,%eax
    0.00 :	    248d:       48 01 d0                add    %rdx,%rax
         :	                hwstats->b2ogprc += IXGBE_READ_REG(hw, IXGBE_B2OGPRC);
    0.00 :	    2490:       48 8b 93 d8 1a 00 00    mov    0x1ad8(%rbx),%rdx
         :	                break;
         :	        case ixgbe_mac_X540:
         :	                /* OS2BMC stats are X540 only*/
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
         :	                hwstats->b2ospc += IXGBE_READ_REG(hw, IXGBE_B2OSPC);
    0.00 :	    2497:       48 89 83 d0 1a 00 00    mov    %rax,0x1ad0(%rbx)
    0.00 :	    249e:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    24a5:       48 05 90 2f 00 00       add    $0x2f90,%rax
    0.00 :	    24ab:       8b 00                   mov    (%rax),%eax
         :	                hwstats->b2ogprc += IXGBE_READ_REG(hw, IXGBE_B2OGPRC);
    0.00 :	    24ad:       89 c0                   mov    %eax,%eax
    0.00 :	    24af:       48 01 d0                add    %rdx,%rax
    0.00 :	    24b2:       48 89 83 d8 1a 00 00    mov    %rax,0x1ad8(%rbx)
    0.00 :	    24b9:       b9 30 14 00 00          mov    $0x1430,%ecx
    0.00 :	    24be:       66 90                   xchg   %ax,%ax
    0.00 :	    24c0:       48 89 c8                mov    %rcx,%rax
         :	        case ixgbe_mac_82599EB:
         :	                for (i = 0; i < 16; i++)
         :	                        adapter->hw_rx_no_dma_resources +=
    0.00 :	    24c3:       48 8b 93 28 07 00 00    mov    0x728(%rbx),%rdx
    0.00 :	    24ca:       48 03 83 80 0e 00 00    add    0xe80(%rbx),%rax
    0.00 :	    24d1:       8b 00                   mov    (%rax),%eax
    0.00 :	    24d3:       89 c0                   mov    %eax,%eax
    0.00 :	    24d5:       48 83 c1 40             add    $0x40,%rcx
    0.00 :	    24d9:       48 01 d0                add    %rdx,%rax
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
         :	                hwstats->b2ospc += IXGBE_READ_REG(hw, IXGBE_B2OSPC);
         :	                hwstats->b2ogprc += IXGBE_READ_REG(hw, IXGBE_B2OGPRC);
         :	        case ixgbe_mac_82599EB:
         :	                for (i = 0; i < 16; i++)
    0.00 :	    24dc:       48 81 f9 30 18 00 00    cmp    $0x1830,%rcx
         :	                        adapter->hw_rx_no_dma_resources +=
    0.00 :	    24e3:       48 89 83 28 07 00 00    mov    %rax,0x728(%rbx)
         :	                hwstats->o2bgptc += IXGBE_READ_REG(hw, IXGBE_O2BGPTC);
         :	                hwstats->o2bspc += IXGBE_READ_REG(hw, IXGBE_O2BSPC);
         :	                hwstats->b2ospc += IXGBE_READ_REG(hw, IXGBE_B2OSPC);
         :	                hwstats->b2ogprc += IXGBE_READ_REG(hw, IXGBE_B2OGPRC);
         :	        case ixgbe_mac_82599EB:
         :	                for (i = 0; i < 16; i++)
    0.00 :	    24ea:       75 d4                   jne    24c0 <ixgbe_update_stats+0xcc0>
    0.00 :	    24ec:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                        adapter->hw_rx_no_dma_resources +=
         :	                                             IXGBE_READ_REG(hw, IXGBE_QPRDC(i));
         :	                hwstats->gorc += IXGBE_READ_REG(hw, IXGBE_GORCL);
    0.00 :	    24f3:       48 8b 93 a0 16 00 00    mov    0x16a0(%rbx),%rdx
    0.00 :	    24fa:       48 05 88 40 00 00       add    $0x4088,%rax
    0.00 :	    2500:       8b 00                   mov    (%rax),%eax
    0.00 :	    2502:       89 c0                   mov    %eax,%eax
    0.00 :	    2504:       48 01 d0                add    %rdx,%rax
    0.00 :	    2507:       48 89 83 a0 16 00 00    mov    %rax,0x16a0(%rbx)
    0.00 :	    250e:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2515:       48 05 8c 40 00 00       add    $0x408c,%rax
    0.00 :	    251b:       8b 00                   mov    (%rax),%eax
    0.00 :	    251d:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                IXGBE_READ_REG(hw, IXGBE_GORCH); /* to clear */
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCL);
    0.00 :	    2524:       48 8b 93 a8 16 00 00    mov    0x16a8(%rbx),%rdx
    0.00 :	    252b:       48 05 90 40 00 00       add    $0x4090,%rax
    0.00 :	    2531:       8b 00                   mov    (%rax),%eax
    0.00 :	    2533:       89 c0                   mov    %eax,%eax
    0.00 :	    2535:       48 01 d0                add    %rdx,%rax
    0.00 :	    2538:       48 89 83 a8 16 00 00    mov    %rax,0x16a8(%rbx)
    0.00 :	    253f:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2546:       48 05 94 40 00 00       add    $0x4094,%rax
    0.00 :	    254c:       8b 00                   mov    (%rax),%eax
    0.00 :	    254e:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                IXGBE_READ_REG(hw, IXGBE_GOTCH); /* to clear */
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORL);
    0.00 :	    2555:       48 8b 93 28 17 00 00    mov    0x1728(%rbx),%rdx
    0.00 :	    255c:       48 05 c0 40 00 00       add    $0x40c0,%rax
    0.00 :	    2562:       8b 00                   mov    (%rax),%eax
    0.00 :	    2564:       89 c0                   mov    %eax,%eax
    0.00 :	    2566:       48 01 d0                add    %rdx,%rax
    0.00 :	    2569:       48 89 83 28 17 00 00    mov    %rax,0x1728(%rbx)
    0.00 :	    2570:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2577:       48 05 c4 40 00 00       add    $0x40c4,%rax
    0.00 :	    257d:       8b 00                   mov    (%rax),%eax
    0.00 :	    257f:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
         :	                IXGBE_READ_REG(hw, IXGBE_TORH); /* to clear */
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXCNT);
    0.00 :	    2586:       48 8b 93 38 15 00 00    mov    0x1538(%rbx),%rdx
    0.00 :	    258d:       48 05 a4 41 00 00       add    $0x41a4,%rax
    0.00 :	    2593:       8b 00                   mov    (%rax),%eax
    0.00 :	    2595:       89 c0                   mov    %eax,%eax
    0.00 :	    2597:       48 01 d0                add    %rdx,%rax
         :	#ifdef HAVE_TX_MQ
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
    0.00 :	    259a:       48 8b 93 68 1a 00 00    mov    0x1a68(%rbx),%rdx
         :	                IXGBE_READ_REG(hw, IXGBE_GORCH); /* to clear */
         :	                hwstats->gotc += IXGBE_READ_REG(hw, IXGBE_GOTCL);
         :	                IXGBE_READ_REG(hw, IXGBE_GOTCH); /* to clear */
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORL);
         :	                IXGBE_READ_REG(hw, IXGBE_TORH); /* to clear */
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXCNT);
    0.00 :	    25a1:       48 89 83 38 15 00 00    mov    %rax,0x1538(%rbx)
    0.00 :	    25a8:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    25af:       48 05 58 ee 00 00       add    $0xee58,%rax
    0.00 :	    25b5:       8b 00                   mov    (%rax),%eax
         :	#ifdef HAVE_TX_MQ
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
    0.00 :	    25b7:       89 c0                   mov    %eax,%eax
    0.00 :	    25b9:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
    0.00 :	    25bc:       48 8b 93 70 1a 00 00    mov    0x1a70(%rbx),%rdx
         :	                IXGBE_READ_REG(hw, IXGBE_GOTCH); /* to clear */
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORL);
         :	                IXGBE_READ_REG(hw, IXGBE_TORH); /* to clear */
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXCNT);
         :	#ifdef HAVE_TX_MQ
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
    0.00 :	    25c3:       48 89 83 68 1a 00 00    mov    %rax,0x1a68(%rbx)
    0.00 :	    25ca:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    25d1:       48 05 5c ee 00 00       add    $0xee5c,%rax
    0.00 :	    25d7:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
    0.00 :	    25d9:       89 c0                   mov    %eax,%eax
    0.00 :	    25db:       48 01 d0                add    %rdx,%rax
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
    0.00 :	    25de:       48 8b 93 78 1a 00 00    mov    0x1a78(%rbx),%rdx
         :	                hwstats->tor += IXGBE_READ_REG(hw, IXGBE_TORL);
         :	                IXGBE_READ_REG(hw, IXGBE_TORH); /* to clear */
         :	                hwstats->lxonrxc += IXGBE_READ_REG(hw, IXGBE_LXONRXCNT);
         :	#ifdef HAVE_TX_MQ
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
    0.00 :	    25e5:       48 89 83 70 1a 00 00    mov    %rax,0x1a70(%rbx)
    0.00 :	    25ec:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    25f3:       48 05 18 51 00 00       add    $0x5118,%rax
    0.00 :	    25f9:       8b 00                   mov    (%rax),%eax
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
    0.00 :	    25fb:       89 c0                   mov    %eax,%eax
    0.00 :	    25fd:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
    0.00 :	    2600:       48 8b 93 80 1a 00 00    mov    0x1a80(%rbx),%rdx
         :	#ifdef HAVE_TX_MQ
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
    0.00 :	    2607:       48 89 83 78 1a 00 00    mov    %rax,0x1a78(%rbx)
    0.00 :	    260e:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2615:       48 05 24 24 00 00       add    $0x2424,%rax
    0.00 :	    261b:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
    0.00 :	    261d:       89 c0                   mov    %eax,%eax
    0.00 :	    261f:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
    0.00 :	    2622:       48 8b 93 88 1a 00 00    mov    0x1a88(%rbx),%rdx
         :	                hwstats->fdirmatch += IXGBE_READ_REG(hw, IXGBE_FDIRMATCH);
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
    0.00 :	    2629:       48 89 83 80 1a 00 00    mov    %rax,0x1a80(%rbx)
    0.00 :	    2630:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2637:       48 05 1c 24 00 00       add    $0x241c,%rax
    0.00 :	    263d:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
    0.00 :	    263f:       89 c0                   mov    %eax,%eax
    0.00 :	    2641:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
    0.00 :	    2644:       48 8b 93 90 1a 00 00    mov    0x1a90(%rbx),%rdx
         :	                hwstats->fdirmiss += IXGBE_READ_REG(hw, IXGBE_FDIRMISS);
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
    0.00 :	    264b:       48 89 83 88 1a 00 00    mov    %rax,0x1a88(%rbx)
    0.00 :	    2652:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2659:       48 05 28 24 00 00       add    $0x2428,%rax
    0.00 :	    265f:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
    0.00 :	    2661:       89 c0                   mov    %eax,%eax
    0.00 :	    2663:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fcoeptc += IXGBE_READ_REG(hw, IXGBE_FCOEPTC);
    0.00 :	    2666:       48 8b 93 98 1a 00 00    mov    0x1a98(%rbx),%rdx
         :	#endif /* HAVE_TX_MQ */
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
    0.00 :	    266d:       48 89 83 90 1a 00 00    mov    %rax,0x1a90(%rbx)
    0.00 :	    2674:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    267b:       48 05 84 87 00 00       add    $0x8784,%rax
    0.00 :	    2681:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fcoeptc += IXGBE_READ_REG(hw, IXGBE_FCOEPTC);
    0.00 :	    2683:       89 c0                   mov    %eax,%eax
    0.00 :	    2685:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fcoedwrc += IXGBE_READ_REG(hw, IXGBE_FCOEDWRC);
    0.00 :	    2688:       48 8b 93 a0 1a 00 00    mov    0x1aa0(%rbx),%rdx
         :	#ifdef IXGBE_FCOE
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
         :	                hwstats->fcoeptc += IXGBE_READ_REG(hw, IXGBE_FCOEPTC);
    0.00 :	    268f:       48 89 83 98 1a 00 00    mov    %rax,0x1a98(%rbx)
    0.00 :	    2696:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    269d:       48 05 2c 24 00 00       add    $0x242c,%rax
    0.00 :	    26a3:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fcoedwrc += IXGBE_READ_REG(hw, IXGBE_FCOEDWRC);
    0.00 :	    26a5:       89 c0                   mov    %eax,%eax
    0.00 :	    26a7:       48 01 d0                add    %rdx,%rax
         :	                hwstats->fcoedwtc += IXGBE_READ_REG(hw, IXGBE_FCOEDWTC);
    0.00 :	    26aa:       48 8b 93 a8 1a 00 00    mov    0x1aa8(%rbx),%rdx
         :	                hwstats->fccrc += IXGBE_READ_REG(hw, IXGBE_FCCRC);
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
         :	                hwstats->fcoeptc += IXGBE_READ_REG(hw, IXGBE_FCOEPTC);
         :	                hwstats->fcoedwrc += IXGBE_READ_REG(hw, IXGBE_FCOEDWRC);
    0.00 :	    26b1:       48 89 83 a0 1a 00 00    mov    %rax,0x1aa0(%rbx)
    0.00 :	    26b8:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    26bf:       48 05 88 87 00 00       add    $0x8788,%rax
    0.00 :	    26c5:       8b 00                   mov    (%rax),%eax
         :	                hwstats->fcoedwtc += IXGBE_READ_REG(hw, IXGBE_FCOEDWTC);
    0.00 :	    26c7:       89 c0                   mov    %eax,%eax
    0.00 :	    26c9:       48 01 d0                add    %rdx,%rax
         :	                /* Add up per cpu counters for total ddp alloc fail */
         :	                if (adapter->fcoe.ddp_pool) {
    0.00 :	    26cc:       48 83 bb e8 1b 00 00    cmpq   $0x0,0x1be8(%rbx)
    0.00 :	    26d3:       00 
         :	                hwstats->fclast += IXGBE_READ_REG(hw, IXGBE_FCLAST);
         :	                hwstats->fcoerpdc += IXGBE_READ_REG(hw, IXGBE_FCOERPDC);
         :	                hwstats->fcoeprc += IXGBE_READ_REG(hw, IXGBE_FCOEPRC);
         :	                hwstats->fcoeptc += IXGBE_READ_REG(hw, IXGBE_FCOEPTC);
         :	                hwstats->fcoedwrc += IXGBE_READ_REG(hw, IXGBE_FCOEDWRC);
         :	                hwstats->fcoedwtc += IXGBE_READ_REG(hw, IXGBE_FCOEDWTC);
    0.00 :	    26d4:       48 89 83 a8 1a 00 00    mov    %rax,0x1aa8(%rbx)
         :	                /* Add up per cpu counters for total ddp alloc fail */
         :	                if (adapter->fcoe.ddp_pool) {
    0.00 :	    26db:       0f 84 f8 f4 ff ff       je     1bd9 <ixgbe_update_stats+0x3d9>
         :	static inline unsigned int cpumask_next(int n, const struct cpumask *srcp)
         :	{
         :	        /* -1 is a legal arg here. */
         :	        if (n != -1)
         :	                cpumask_check(n);
         :	        return find_next_bit(cpumask_bits(srcp), nr_cpumask_bits, n+1);
    0.00 :	    26e1:       4c 8b 2d 00 00 00 00    mov    0x0(%rip),%r13        # 26e8 <ixgbe_update_stats+0xee8>
    0.00 :	    26e8:       b9 ff ff ff ff          mov    $0xffffffff,%ecx
    0.00 :	    26ed:       45 31 e4                xor    %r12d,%r12d
    0.00 :	    26f0:       31 ed                   xor    %ebp,%ebp
    0.00 :	    26f2:       eb 1d                   jmp    2711 <ixgbe_update_stats+0xf11>
    0.00 :	    26f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        struct ixgbe_fcoe *fcoe = &adapter->fcoe;
         :	                        struct ixgbe_fcoe_ddp_pool *ddp_pool;
         :	                        unsigned int cpu;
         :	                        u64 noddp = 0, noddp_ext_buff = 0;
         :	                        for_each_possible_cpu(cpu) {
         :	                                ddp_pool = per_cpu_ptr(fcoe->ddp_pool, cpu);
    0.00 :	    26f8:       89 ca                   mov    %ecx,%edx
    0.00 :	    26fa:       48 8b 83 e8 1b 00 00    mov    0x1be8(%rbx),%rax
    0.00 :	    2701:       48 03 04 d5 00 00 00    add    0x0(,%rdx,8),%rax
    0.00 :	    2708:       00 
         :	                                noddp += ddp_pool->noddp;
    0.00 :	    2709:       4c 03 60 08             add    0x8(%rax),%r12
         :	                                noddp_ext_buff += ddp_pool->noddp_ext_buff;
    0.00 :	    270d:       48 03 68 10             add    0x10(%rax),%rbp
    0.00 :	    2711:       48 63 35 00 00 00 00    movslq 0x0(%rip),%rsi        # 2718 <ixgbe_update_stats+0xf18>
    0.00 :	    2718:       8d 51 01                lea    0x1(%rcx),%edx
    0.00 :	    271b:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    271e:       48 63 d2                movslq %edx,%rdx
    0.00 :	    2721:       e8 00 00 00 00          callq  2726 <ixgbe_update_stats+0xf26>
         :	                if (adapter->fcoe.ddp_pool) {
         :	                        struct ixgbe_fcoe *fcoe = &adapter->fcoe;
         :	                        struct ixgbe_fcoe_ddp_pool *ddp_pool;
         :	                        unsigned int cpu;
         :	                        u64 noddp = 0, noddp_ext_buff = 0;
         :	                        for_each_possible_cpu(cpu) {
    0.00 :	    2726:       39 05 00 00 00 00       cmp    %eax,0x0(%rip)        # 272c <ixgbe_update_stats+0xf2c>
    0.00 :	    272c:       89 c1                   mov    %eax,%ecx
    0.00 :	    272e:       77 c8                   ja     26f8 <ixgbe_update_stats+0xef8>
         :	                                ddp_pool = per_cpu_ptr(fcoe->ddp_pool, cpu);
         :	                                noddp += ddp_pool->noddp;
         :	                                noddp_ext_buff += ddp_pool->noddp_ext_buff;
         :	                        }
         :	                        hwstats->fcoe_noddp = noddp;
    0.00 :	    2730:       4c 89 a3 b0 1a 00 00    mov    %r12,0x1ab0(%rbx)
         :	                        hwstats->fcoe_noddp_ext_buff = noddp_ext_buff;
    0.00 :	    2737:       48 89 ab b8 1a 00 00    mov    %rbp,0x1ab8(%rbx)
    0.00 :	    273e:       e9 96 f4 ff ff          jmpq   1bd9 <ixgbe_update_stats+0x3d9>
         :
         :	        if ((hw->fc.current_mode != ixgbe_fc_full) &&
         :	            (hw->fc.current_mode != ixgbe_fc_rx_pause))
         :	                return;
         :
         :	        switch (hw->mac.type) {
    0.00 :	    2743:       83 bb 50 10 00 00 01    cmpl   $0x1,0x1050(%rbx)
    0.00 :	    274a:       0f 84 ae 00 00 00       je     27fe <ixgbe_update_stats+0xffe>
    0.00 :	    2750:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2757:       48 05 a8 41 00 00       add    $0x41a8,%rax
    0.00 :	    275d:       8b 10                   mov    (%rax),%edx
         :	                data = IXGBE_READ_REG(hw, IXGBE_LXOFFRXC);
         :	                break;
         :	        default:
         :	                data = IXGBE_READ_REG(hw, IXGBE_LXOFFRXCNT);
         :	        }
         :	        hwstats->lxoffrxc += data;
    0.00 :	    275f:       89 d0                   mov    %edx,%eax
    0.00 :	    2761:       48 01 83 48 15 00 00    add    %rax,0x1548(%rbx)
         :
         :	        /* refill credits (no tx hang) if we received xoff */
         :	        if (!data)
    0.00 :	    2768:       85 d2                   test   %edx,%edx
    0.00 :	    276a:       0f 84 c0 f3 ff ff       je     1b30 <ixgbe_update_stats+0x330>
         :	                return;
         :
         :	        for (i = 0; i < adapter->num_tx_queues; i++)
    0.00 :	    2770:       8b 93 20 02 00 00       mov    0x220(%rbx),%edx
    0.00 :	    2776:       85 d2                   test   %edx,%edx
    0.00 :	    2778:       0f 8e b2 f3 ff ff       jle    1b30 <ixgbe_update_stats+0x330>
    0.00 :	    277e:       31 c9                   xor    %ecx,%ecx
         :	 */
         :	static __always_inline void
         :	clear_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        if (IS_IMMEDIATE(nr)) {
         :	                asm volatile(LOCK_PREFIX "andb %1,%0"
    0.00 :	    2780:       48 8b 97 80 02 00 00    mov    0x280(%rdi),%rdx
    0.00 :	    2787:       48 8d 42 30             lea    0x30(%rdx),%rax
    0.00 :	    278b:       f0 80 62 30 fb          lock andb $0xfb,0x30(%rdx)
    0.00 :	    2790:       83 c1 01                add    $0x1,%ecx
    0.00 :	    2793:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	    2797:       3b 8b 20 02 00 00       cmp    0x220(%rbx),%ecx
    0.00 :	    279d:       7c e1                   jl     2780 <ixgbe_update_stats+0xf80>
    0.00 :	    279f:       e9 8c f3 ff ff          jmpq   1b30 <ixgbe_update_stats+0x330>
         :	        }
         :	        bprc = IXGBE_READ_REG(hw, IXGBE_BPRC);
         :	        hwstats->bprc += bprc;
         :	        hwstats->mprc += IXGBE_READ_REG(hw, IXGBE_MPRC);
         :	        if (hw->mac.type == ixgbe_mac_82598EB)
         :	                hwstats->mprc -= bprc;
    0.00 :	    27a4:       48 29 c8                sub    %rcx,%rax
    0.00 :	    27a7:       48 89 83 90 16 00 00    mov    %rax,0x1690(%rbx)
    0.00 :	    27ae:       e9 6d f4 ff ff          jmpq   1c20 <ixgbe_update_stats+0x420>
         :	                }
         :	                hwstats->pxoffrxc[i] += xoff[i];
         :	        }
         :
         :	        /* disarm tx queues that have received xoff frames */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
    0.00 :	    27b3:       8b 83 20 02 00 00       mov    0x220(%rbx),%eax
    0.00 :	    27b9:       85 c0                   test   %eax,%eax
    0.00 :	    27bb:       0f 8e 6f f3 ff ff       jle    1b30 <ixgbe_update_stats+0x330>
    0.00 :	    27c1:       31 c9                   xor    %ecx,%ecx
    0.00 :	    27c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
    0.00 :	    27c8:       48 8b 97 80 02 00 00    mov    0x280(%rdi),%rdx
         :	                u8 tc = tx_ring->dcb_tc;
    0.00 :	    27cf:       0f b6 42 56             movzbl 0x56(%rdx),%eax
         :
         :	                if ((tc <= 7) && (xoff[tc]))
    0.00 :	    27d3:       3c 07                   cmp    $0x7,%al
    0.00 :	    27d5:       77 13                   ja     27ea <ixgbe_update_stats+0xfea>
    0.00 :	    27d7:       0f b6 c0                movzbl %al,%eax
    0.00 :	    27da:       8b 04 84                mov    (%rsp,%rax,4),%eax
    0.00 :	    27dd:       85 c0                   test   %eax,%eax
    0.00 :	    27df:       74 09                   je     27ea <ixgbe_update_stats+0xfea>
    0.00 :	    27e1:       48 8d 42 30             lea    0x30(%rdx),%rax
    0.00 :	    27e5:       f0 80 62 30 fb          lock andb $0xfb,0x30(%rdx)
         :	                }
         :	                hwstats->pxoffrxc[i] += xoff[i];
         :	        }
         :
         :	        /* disarm tx queues that have received xoff frames */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
    0.00 :	    27ea:       83 c1 01                add    $0x1,%ecx
    0.00 :	    27ed:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	    27f1:       3b 8b 20 02 00 00       cmp    0x220(%rbx),%ecx
    0.00 :	    27f7:       7c cf                   jl     27c8 <ixgbe_update_stats+0xfc8>
    0.00 :	    27f9:       e9 32 f3 ff ff          jmpq   1b30 <ixgbe_update_stats+0x330>
    0.00 :	    27fe:       48 8b 83 80 0e 00 00    mov    0xe80(%rbx),%rax
    0.00 :	    2805:       48 05 68 cf 00 00       add    $0xcf68,%rax
    0.00 :	    280b:       8b 10                   mov    (%rax),%edx
    0.00 :	    280d:       e9 4d ff ff ff          jmpq   275f <ixgbe_update_stats+0xf5f>
         :	        }
         :	        adapter->lro_stats.flushed = flushed;
         :	        adapter->lro_stats.coal = coal;
         :
         :	#endif
         :	        for (i = 0; i < adapter->num_rx_queues; i++) {
    0.00 :	    2812:       45 31 d2                xor    %r10d,%r10d
    0.00 :	    2815:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    2818:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    281b:       31 ff                   xor    %edi,%edi
    0.00 :	    281d:       31 d2                   xor    %edx,%edx
    0.00 :	    281f:       31 c0                   xor    %eax,%eax
    0.00 :	    2821:       e9 d8 f0 ff ff          jmpq   18fe <ixgbe_update_stats+0xfe>
         :	        net_stats->rx_packets = packets;
         :
         :	        bytes = 0;
         :	        packets = 0;
         :	        /* gather some stats to the adapter struct that are per queue */
         :	        for (i = 0; i < adapter->num_tx_queues; i++) {
    0.00 :	    2826:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    2829:       31 ff                   xor    %edi,%edi
    0.00 :	    282b:       31 f6                   xor    %esi,%esi
    0.00 :	    282d:       31 c9                   xor    %ecx,%ecx
    0.00 :	    282f:       e9 3d f1 ff ff          jmpq   1971 <ixgbe_update_stats+0x171>
         :
         :	Disassembly of section .devinit.text:
         :
         :	0000000000001800 <ixgbe_check_options+0x40e>:
         :	                        struct ixgbe_option opt = {
         :	                                .type = enable_option,
         :	                                .name = "Enabled/Disable FCoE offload",
         :	                                .err = "defaulting to Enabled",
         :	                                .def = OPTION_ENABLED
         :	                        };
    0.00 :	    1800:       48 c7 44 24 70 00 00    movq   $0x0,0x70(%rsp)
    0.00 :	    1807:       00 00 
    0.00 :	    1809:       c7 44 24 78 01 00 00    movl   $0x1,0x78(%rsp)
    0.00 :	    1810:       00 
         :	#ifdef module_param_array
         :	                        if (num_FCoE > bd) {
    0.00 :	    1811:       0f 82 f7 05 00 00       jb     1e0e <ixgbe_check_options+0xa1c>
         :	                                if (fcoe)
         :	                                        *aflags |= IXGBE_FLAG_FCOE_CAPABLE;
         :	#ifdef module_param_array
         :	                        } else {
         :	                                if (opt.def == OPTION_ENABLED)
         :	                                        *aflags |= IXGBE_FLAG_FCOE_CAPABLE;
    0.00 :	    1817:       81 8b 18 02 00 00 00    orl    $0x20000,0x218(%rbx)
    0.00 :	    181e:       00 02 00 
         :	                        }
         :	#endif
         :	                        DPRINTK(PROBE, INFO, "FCoE Offload feature %sabled\n",
    0.00 :	    1821:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1828:       0f 85 a6 05 00 00       jne    1dd4 <ixgbe_check_options+0x9e2>
         :	                struct ixgbe_option opt = {
         :	                        .type = enable_option,
         :	                        .name = "LRO - Large Receive Offload",
         :	                        .err  = "defaulting to Enabled",
         :	                        .def  = OPTION_ENABLED
         :	                };
    0.00 :	    182e:       48 8d 54 24 30          lea    0x30(%rsp),%rdx
    0.00 :	    1833:       31 c0                   xor    %eax,%eax
    0.00 :	    1835:       b9 06 00 00 00          mov    $0x6,%ecx
         :	                if (!(adapter->flags2 & IXGBE_FLAG2_RSC_CAPABLE))
         :	                        opt.def = OPTION_DISABLED;
         :
         :	#endif
         :	#ifdef module_param_array
         :	                if (num_LRO > bd) {
    0.00 :	    183a:       44 3b 25 00 00 00 00    cmp    0x0(%rip),%r12d        # 1841 <ixgbe_check_options+0x44f>
         :	                struct ixgbe_option opt = {
         :	                        .type = enable_option,
         :	                        .name = "LRO - Large Receive Offload",
         :	                        .err  = "defaulting to Enabled",
         :	                        .def  = OPTION_ENABLED
         :	                };
    0.00 :	    1841:       48 89 d7                mov    %rdx,%rdi
    0.00 :	    1844:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	    1847:       48 c7 44 24 38 00 00    movq   $0x0,0x38(%rsp)
    0.00 :	    184e:       00 00 
    0.00 :	    1850:       48 c7 44 24 40 00 00    movq   $0x0,0x40(%rsp)
    0.00 :	    1857:       00 00 
    0.00 :	    1859:       c7 44 24 48 01 00 00    movl   $0x1,0x48(%rsp)
    0.00 :	    1860:       00 
         :	                struct net_device *netdev = adapter->netdev;
    0.00 :	    1861:       48 8b ab 00 02 00 00    mov    0x200(%rbx),%rbp
         :	                if (!(adapter->flags2 & IXGBE_FLAG2_RSC_CAPABLE))
         :	                        opt.def = OPTION_DISABLED;
         :
         :	#endif
         :	#ifdef module_param_array
         :	                if (num_LRO > bd) {
    0.00 :	    1868:       0f 82 e0 00 00 00       jb     194e <ixgbe_check_options+0x55c>
         :	                                netdev->features |= NETIF_F_LRO;
         :	                        else
         :	                                netdev->features &= ~NETIF_F_LRO;
         :	#ifdef module_param_array
         :	                } else if (opt.def == OPTION_ENABLED) {
         :	                        netdev->features |= NETIF_F_LRO;
    0.00 :	    186e:       81 8d b0 00 00 00 00    orl    $0x8000,0xb0(%rbp)
    0.00 :	    1875:       80 00 00 
         :	        struct ixgbe_option opt = {
         :	                        .type = enable_option,
         :	                        .name = "allow_unsupported_sfp",
         :	                        .err  = "defaulting to Disabled",
         :	                        .def  = OPTION_DISABLED
         :	                };
    0.00 :	    1878:       31 c0                   xor    %eax,%eax
         :	#ifdef module_param_array
         :	                if (num_allow_unsupported_sfp > bd) {
    0.00 :	    187a:       44 3b 25 00 00 00 00    cmp    0x0(%rip),%r12d        # 1881 <ixgbe_check_options+0x48f>
         :	        struct ixgbe_option opt = {
         :	                        .type = enable_option,
         :	                        .name = "allow_unsupported_sfp",
         :	                        .err  = "defaulting to Disabled",
         :	                        .def  = OPTION_DISABLED
         :	                };
    0.00 :	    1881:       b9 06 00 00 00          mov    $0x6,%ecx
    0.00 :	    1886:       48 89 e7                mov    %rsp,%rdi
    0.00 :	    1889:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	    188c:       48 c7 44 24 08 00 00    movq   $0x0,0x8(%rsp)
    0.00 :	    1893:       00 00 
    0.00 :	    1895:       48 c7 44 24 10 00 00    movq   $0x0,0x10(%rsp)
    0.00 :	    189c:       00 00 
         :	#ifdef module_param_array
         :	                if (num_allow_unsupported_sfp > bd) {
    0.00 :	    189e:       72 7a                   jb     191a <ixgbe_check_options+0x528>
         :	                        } else {
         :	                                adapter->hw.allow_unsupported_sfp = false;
         :	                        }
         :	#ifdef module_param_array
         :	                } else if (opt.def == OPTION_ENABLED) {
         :	                                adapter->hw.allow_unsupported_sfp = true;
    0.00 :	    18a0:       83 7c 24 18 01          cmpl   $0x1,0x18(%rsp)
    0.00 :	    18a5:       0f 94 83 a1 14 00 00    sete   0x14a1(%rbx)
         :	                } else {
         :	                                adapter->hw.allow_unsupported_sfp = false;
         :	                }
         :	#endif
         :	        }
         :	}
    0.00 :	    18ac:       48 81 c4 a8 00 00 00    add    $0xa8,%rsp
    0.00 :	    18b3:       5b                      pop    %rbx
    0.00 :	    18b4:       5d                      pop    %rbp
    0.00 :	    18b5:       41 5c                   pop    %r12
    0.00 :	    18b7:       41 5d                   pop    %r13
    0.00 :	    18b9:       c3                      retq   
         :	                        adapter->atr_sample_rate = IXGBE_ATR_SAMPLE_RATE_OFF;
         :	                } else if (num_AtrSampleRate > bd) {
         :	                        adapter->atr_sample_rate = AtrSampleRate[bd];
         :
         :	                        if (adapter->atr_sample_rate) {
         :	                                ixgbe_validate_option(&adapter->atr_sample_rate,
    0.00 :	    18ba:       48 8d bb dc 1b 00 00    lea    0x1bdc(%rbx),%rdi
    0.00 :	    18c1:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    18c8:       e8 23 fa ff ff          callq  12f0 <ixgbe_validate_option>
         :	                                                      &opt);
         :	                                DPRINTK(PROBE, INFO, "%s %d\n", atr_string,
    0.00 :	    18cd:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    18d4:       0f 84 ec fe ff ff       je     17c6 <ixgbe_check_options+0x3d4>
    0.00 :	    18da:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    18e1:       44 8b 83 dc 1b 00 00    mov    0x1bdc(%rbx),%r8d
    0.00 :	    18e8:       48 c7 c1 00 00 00 00    mov    $0x0,%rcx
    0.00 :	    18ef:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    18f6:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    18fd:       31 c0                   xor    %eax,%eax
    0.00 :	    18ff:       e8 00 00 00 00          callq  1904 <ixgbe_check_options+0x512>
    0.00 :	    1904:       e9 bd fe ff ff          jmpq   17c6 <ixgbe_check_options+0x3d4>
         :	                                        adapter->atr_sample_rate);
         :	                        }
         :	                } else {
         :	                        adapter->atr_sample_rate = opt.def;
    0.00 :	    1909:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 190f <ixgbe_check_options+0x51d>
    0.00 :	    190f:       89 83 dc 1b 00 00       mov    %eax,0x1bdc(%rbx)
    0.00 :	    1915:       e9 ac fe ff ff          jmpq   17c6 <ixgbe_check_options+0x3d4>
         :	                };
         :	#ifdef module_param_array
         :	                if (num_allow_unsupported_sfp > bd) {
         :	#endif
         :	                        unsigned int enable_unsupported_sfp =
         :	                                                      allow_unsupported_sfp[bd];
    0.00 :	    191a:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1921:       00 
         :	                        ixgbe_validate_option(&enable_unsupported_sfp, &opt);
    0.00 :	    1922:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1929:       00 
    0.00 :	    192a:       48 89 e6                mov    %rsp,%rsi
         :	                };
         :	#ifdef module_param_array
         :	                if (num_allow_unsupported_sfp > bd) {
         :	#endif
         :	                        unsigned int enable_unsupported_sfp =
         :	                                                      allow_unsupported_sfp[bd];
    0.00 :	    192d:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&enable_unsupported_sfp, &opt);
    0.00 :	    1934:       e8 b7 f9 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (enable_unsupported_sfp) {
         :	                                adapter->hw.allow_unsupported_sfp = true;
    0.00 :	    1939:       8b 84 24 9c 00 00 00    mov    0x9c(%rsp),%eax
    0.00 :	    1940:       85 c0                   test   %eax,%eax
    0.00 :	    1942:       0f 95 83 a1 14 00 00    setne  0x14a1(%rbx)
    0.00 :	    1949:       e9 5e ff ff ff          jmpq   18ac <ixgbe_check_options+0x4ba>
         :
         :	#endif
         :	#ifdef module_param_array
         :	                if (num_LRO > bd) {
         :	#endif
         :	                        unsigned int lro = LRO[bd];
    0.00 :	    194e:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1955:       00 
         :	                        ixgbe_validate_option(&lro, &opt);
    0.00 :	    1956:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    195d:       00 
    0.00 :	    195e:       48 89 d6                mov    %rdx,%rsi
         :
         :	#endif
         :	#ifdef module_param_array
         :	                if (num_LRO > bd) {
         :	#endif
         :	                        unsigned int lro = LRO[bd];
    0.00 :	    1961:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&lro, &opt);
    0.00 :	    1968:       e8 83 f9 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (lro)
    0.00 :	    196d:       8b 94 24 9c 00 00 00    mov    0x9c(%rsp),%edx
    0.00 :	    1974:       85 d2                   test   %edx,%edx
    0.00 :	    1976:       0f 85 f2 fe ff ff       jne    186e <ixgbe_check_options+0x47c>
         :	                                netdev->features |= NETIF_F_LRO;
         :	                        else
         :	                                netdev->features &= ~NETIF_F_LRO;
    0.00 :	    197c:       81 a5 b0 00 00 00 ff    andl   $0xffff7fff,0xb0(%rbp)
    0.00 :	    1983:       7f ff ff 
    0.00 :	    1986:       e9 ed fe ff ff          jmpq   1878 <ixgbe_check_options+0x486>
         :	                };
         :	                static const char atr_string[] =
         :	                                            "ATR Tx Packet sample rate set to";
         :
         :	                if (adapter->hw.mac.type == ixgbe_mac_82598EB) {
         :	                        adapter->atr_sample_rate = IXGBE_ATR_SAMPLE_RATE_OFF;
    0.00 :	    198b:       c7 83 dc 1b 00 00 00    movl   $0x0,0x1bdc(%rbx)
    0.00 :	    1992:       00 00 00 
    0.00 :	    1995:       e9 2c fe ff ff          jmpq   17c6 <ixgbe_check_options+0x3d4>
         :	                char pstring[10];
         :
         :	                if (adapter->hw.mac.type == ixgbe_mac_82598EB) {
         :	                        adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_NONE;
         :	                } else if (num_FdirPballoc > bd) {
         :	                        fdir_pballoc_mode = FdirPballoc[bd];
    0.00 :	    199a:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    19a1:       00 
         :	                        ixgbe_validate_option(&fdir_pballoc_mode, &opt);
    0.00 :	    19a2:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    19a9:       00 
    0.00 :	    19aa:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                char pstring[10];
         :
         :	                if (adapter->hw.mac.type == ixgbe_mac_82598EB) {
         :	                        adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_NONE;
         :	                } else if (num_FdirPballoc > bd) {
         :	                        fdir_pballoc_mode = FdirPballoc[bd];
    0.00 :	    19b1:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&fdir_pballoc_mode, &opt);
    0.00 :	    19b8:       e8 33 f9 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        switch (fdir_pballoc_mode) {
    0.00 :	    19bd:       8b 84 24 9c 00 00 00    mov    0x9c(%rsp),%eax
    0.00 :	    19c4:       83 f8 02                cmp    $0x2,%eax
    0.00 :	    19c7:       0f 84 bf 00 00 00       je     1a8c <ixgbe_check_options+0x69a>
    0.00 :	    19cd:       83 f8 03                cmp    $0x3,%eax
    0.00 :	    19d0:       0f 84 8a 00 00 00       je     1a60 <ixgbe_check_options+0x66e>
         :	                                sprintf(pstring, "128kB");
         :	                                break;
         :	                        case IXGBE_FDIR_PBALLOC_64K:
         :	                        default:
         :	                                adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_64K;
         :	                                sprintf(pstring, "64kB");
    0.00 :	    19d6:       48 8d 8c 24 90 00 00    lea    0x90(%rsp),%rcx
    0.00 :	    19dd:       00 
         :	                                adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_128K;
         :	                                sprintf(pstring, "128kB");
         :	                                break;
         :	                        case IXGBE_FDIR_PBALLOC_64K:
         :	                        default:
         :	                                adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_64K;
    0.00 :	    19de:       c7 83 d8 1b 00 00 01    movl   $0x1,0x1bd8(%rbx)
    0.00 :	    19e5:       00 00 00 
         :	                                sprintf(pstring, "64kB");
    0.00 :	    19e8:       c7 84 24 90 00 00 00    movl   $0x426b3436,0x90(%rsp)
    0.00 :	    19ef:       36 34 6b 42 
    0.00 :	    19f3:       c6 84 24 94 00 00 00    movb   $0x0,0x94(%rsp)
    0.00 :	    19fa:       00 
         :	                                break;
         :	                        }
         :	                        DPRINTK(PROBE, INFO, "Flow Director will be allocated "
    0.00 :	    19fb:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1a02:       0f 84 8e fd ff ff       je     1796 <ixgbe_check_options+0x3a4>
    0.00 :	    1a08:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1a0f:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1a16:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1a1d:       31 c0                   xor    %eax,%eax
    0.00 :	    1a1f:       e8 00 00 00 00          callq  1a24 <ixgbe_check_options+0x632>
    0.00 :	    1a24:       e9 6d fd ff ff          jmpq   1796 <ixgbe_check_options+0x3a4>
         :	                                      .max = IXGBE_FDIR_PBALLOC_256K} }
         :	                };
         :	                char pstring[10];
         :
         :	                if (adapter->hw.mac.type == ixgbe_mac_82598EB) {
         :	                        adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_NONE;
    0.00 :	    1a29:       c7 83 d8 1b 00 00 00    movl   $0x0,0x1bd8(%rbx)
    0.00 :	    1a30:       00 00 00 
    0.00 :	    1a33:       e9 5e fd ff ff          jmpq   1796 <ixgbe_check_options+0x3a4>
         :	                        adapter->lli_vlan_pri = LLIVLANP[bd];
         :	                        if (adapter->lli_vlan_pri) {
         :	                                ixgbe_validate_option(&adapter->lli_vlan_pri,
         :	                                                      &opt);
         :	                        } else {
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
    0.00 :	    1a38:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1a3f:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 1a46 <ixgbe_check_options+0x654>
    0.00 :	    1a46:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1a4d:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1a54:       31 c0                   xor    %eax,%eax
    0.00 :	    1a56:       e8 00 00 00 00          callq  1a5b <ixgbe_check_options+0x669>
    0.00 :	    1a5b:       e9 10 fd ff ff          jmpq   1770 <ixgbe_check_options+0x37e>
         :	                } else if (num_FdirPballoc > bd) {
         :	                        fdir_pballoc_mode = FdirPballoc[bd];
         :	                        ixgbe_validate_option(&fdir_pballoc_mode, &opt);
         :	                        switch (fdir_pballoc_mode) {
         :	                        case IXGBE_FDIR_PBALLOC_256K:
         :	                                adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_256K;
    0.00 :	    1a60:       c7 83 d8 1b 00 00 03    movl   $0x3,0x1bd8(%rbx)
    0.00 :	    1a67:       00 00 00 
         :	                                sprintf(pstring, "256kB");
   50.00 :	    1a6a:       48 8d 8c 24 90 00 00    lea    0x90(%rsp),%rcx
    0.00 :	    1a71:       00 
    0.00 :	    1a72:       c7 84 24 90 00 00 00    movl   $0x6b363532,0x90(%rsp)
    0.00 :	    1a79:       32 35 36 6b 
    0.00 :	    1a7d:       66 c7 84 24 94 00 00    movw   $0x42,0x94(%rsp)
    0.00 :	    1a84:       00 42 00 
         :	                                break;
    0.00 :	    1a87:       e9 6f ff ff ff          jmpq   19fb <ixgbe_check_options+0x609>
         :	                        case IXGBE_FDIR_PBALLOC_128K:
         :	                                adapter->fdir_pballoc = IXGBE_FDIR_PBALLOC_128K;
    0.00 :	    1a8c:       c7 83 d8 1b 00 00 02    movl   $0x2,0x1bd8(%rbx)
    0.00 :	    1a93:       00 00 00 
         :	                                sprintf(pstring, "128kB");
    0.00 :	    1a96:       48 8d 8c 24 90 00 00    lea    0x90(%rsp),%rcx
    0.00 :	    1a9d:       00 
    0.00 :	    1a9e:       c7 84 24 90 00 00 00    movl   $0x6b383231,0x90(%rsp)
    0.00 :	    1aa5:       31 32 38 6b 
    0.00 :	    1aa9:       66 c7 84 24 94 00 00    movw   $0x42,0x94(%rsp)
    0.00 :	    1ab0:       00 42 00 
         :	                                break;
    0.00 :	    1ab3:       e9 43 ff ff ff          jmpq   19fb <ixgbe_check_options+0x609>
         :	#ifdef module_param_array
         :	                if (num_LLIVLANP > bd) {
         :	#endif
         :	                        adapter->lli_vlan_pri = LLIVLANP[bd];
         :	                        if (adapter->lli_vlan_pri) {
         :	                                ixgbe_validate_option(&adapter->lli_vlan_pri,
    0.00 :	    1ab8:       48 8d bb fc 1a 00 00    lea    0x1afc(%rbx),%rdi
    0.00 :	    1abf:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1ac6:       e8 25 f8 ff ff          callq  12f0 <ixgbe_validate_option>
    0.00 :	    1acb:       e9 a0 fc ff ff          jmpq   1770 <ixgbe_check_options+0x37e>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        adapter->lli_vlan_pri = opt.def;
    0.00 :	    1ad0:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1ad6 <ixgbe_check_options+0x6e4>
    0.00 :	    1ad6:       89 83 fc 1a 00 00       mov    %eax,0x1afc(%rbx)
    0.00 :	    1adc:       e9 8f fc ff ff          jmpq   1770 <ixgbe_check_options+0x37e>
         :	                        adapter->lli_etype = LLIEType[bd];
         :	                        if (adapter->lli_etype) {
         :	                                ixgbe_validate_option(&adapter->lli_etype,
         :	                                                      &opt);
         :	                        } else {
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
    0.00 :	    1ae1:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1ae8:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 1aef <ixgbe_check_options+0x6fd>
    0.00 :	    1aef:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1af6:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1afd:       31 c0                   xor    %eax,%eax
    0.00 :	    1aff:       e8 00 00 00 00          callq  1b04 <ixgbe_check_options+0x712>
    0.00 :	    1b04:       e9 37 fc ff ff          jmpq   1740 <ixgbe_check_options+0x34e>
         :	#ifdef module_param_array
         :	                if (num_LLIEType > bd) {
         :	#endif
         :	                        adapter->lli_etype = LLIEType[bd];
         :	                        if (adapter->lli_etype) {
         :	                                ixgbe_validate_option(&adapter->lli_etype,
    0.00 :	    1b09:       48 8d bb f8 1a 00 00    lea    0x1af8(%rbx),%rdi
    0.00 :	    1b10:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1b17:       e8 d4 f7 ff ff          callq  12f0 <ixgbe_validate_option>
    0.00 :	    1b1c:       e9 1f fc ff ff          jmpq   1740 <ixgbe_check_options+0x34e>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        adapter->lli_etype = opt.def;
    0.00 :	    1b21:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1b27 <ixgbe_check_options+0x735>
    0.00 :	    1b27:       89 83 f8 1a 00 00       mov    %eax,0x1af8(%rbx)
    0.00 :	    1b2d:       e9 0e fc ff ff          jmpq   1740 <ixgbe_check_options+0x34e>
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_LLIPush > bd) {
         :	#endif
         :	                        unsigned int lli_push = LLIPush[bd];
    0.00 :	    1b32:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1b39:       00 
         :	                        ixgbe_validate_option(&lli_push, &opt);
    0.00 :	    1b3a:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1b41:       00 
    0.00 :	    1b42:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_LLIPush > bd) {
         :	#endif
         :	                        unsigned int lli_push = LLIPush[bd];
    0.00 :	    1b49:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&lli_push, &opt);
    0.00 :	    1b50:       e8 9b f7 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (lli_push)
    0.00 :	    1b55:       8b b4 24 9c 00 00 00    mov    0x9c(%rsp),%esi
    0.00 :	    1b5c:       85 f6                   test   %esi,%esi
    0.00 :	    1b5e:       0f 84 a5 fb ff ff       je     1709 <ixgbe_check_options+0x317>
         :	                        else
         :	                                *aflags &= ~IXGBE_FLAG_LLI_PUSH;
         :	#ifdef module_param_array
         :	                } else {
         :	                        if (opt.def == OPTION_ENABLED)
         :	                                *aflags |= IXGBE_FLAG_LLI_PUSH;
    0.00 :	    1b64:       83 8b 18 02 00 00 10    orl    $0x10,0x218(%rbx)
    0.00 :	    1b6b:       e9 a0 fb ff ff          jmpq   1710 <ixgbe_check_options+0x31e>
         :	#endif
         :	                        adapter->lli_size = LLISize[bd];
         :	                        if (adapter->lli_size) {
         :	                                ixgbe_validate_option(&adapter->lli_size, &opt);
         :	                        } else {
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
    0.00 :	    1b70:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1b77:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 1b7e <ixgbe_check_options+0x78c>
    0.00 :	    1b7e:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1b85:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1b8c:       31 c0                   xor    %eax,%eax
    0.00 :	    1b8e:       e8 00 00 00 00          callq  1b93 <ixgbe_check_options+0x7a1>
    0.00 :	    1b93:       e9 57 fb ff ff          jmpq   16ef <ixgbe_check_options+0x2fd>
         :	#ifdef module_param_array
         :	                if (num_LLISize > bd) {
         :	#endif
         :	                        adapter->lli_size = LLISize[bd];
         :	                        if (adapter->lli_size) {
         :	                                ixgbe_validate_option(&adapter->lli_size, &opt);
    0.00 :	    1b98:       48 8d bb f4 1a 00 00    lea    0x1af4(%rbx),%rdi
    0.00 :	    1b9f:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1ba6:       e8 45 f7 ff ff          callq  12f0 <ixgbe_validate_option>
    0.00 :	    1bab:       e9 3f fb ff ff          jmpq   16ef <ixgbe_check_options+0x2fd>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        adapter->lli_size = opt.def;
    0.00 :	    1bb0:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1bb6 <ixgbe_check_options+0x7c4>
    0.00 :	    1bb6:       89 83 f4 1a 00 00       mov    %eax,0x1af4(%rbx)
    0.00 :	    1bbc:       e9 2e fb ff ff          jmpq   16ef <ixgbe_check_options+0x2fd>
         :	#endif
         :	                        adapter->lli_port = LLIPort[bd];
         :	                        if (adapter->lli_port) {
         :	                                ixgbe_validate_option(&adapter->lli_port, &opt);
         :	                        } else {
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
    0.00 :	    1bc1:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1bc8:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 1bcf <ixgbe_check_options+0x7dd>
    0.00 :	    1bcf:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1bd6:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1bdd:       31 c0                   xor    %eax,%eax
    0.00 :	    1bdf:       e8 00 00 00 00          callq  1be4 <ixgbe_check_options+0x7f2>
    0.00 :	    1be4:       e9 d6 fa ff ff          jmpq   16bf <ixgbe_check_options+0x2cd>
         :	#ifdef module_param_array
         :	                if (num_LLIPort > bd) {
         :	#endif
         :	                        adapter->lli_port = LLIPort[bd];
         :	                        if (adapter->lli_port) {
         :	                                ixgbe_validate_option(&adapter->lli_port, &opt);
    0.00 :	    1be9:       48 8d bb f0 1a 00 00    lea    0x1af0(%rbx),%rdi
    0.00 :	    1bf0:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1bf7:       e8 f4 f6 ff ff          callq  12f0 <ixgbe_validate_option>
    0.00 :	    1bfc:       e9 be fa ff ff          jmpq   16bf <ixgbe_check_options+0x2cd>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        adapter->lli_port = opt.def;
    0.00 :	    1c01:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1c07 <ixgbe_check_options+0x815>
    0.00 :	    1c07:       89 83 f0 1a 00 00       mov    %eax,0x1af0(%rbx)
    0.00 :	    1c0d:       e9 ad fa ff ff          jmpq   16bf <ixgbe_check_options+0x2cd>
         :	                if (num_InterruptThrottleRate > bd) {
         :	#endif
         :	                        u32 itr = InterruptThrottleRate[bd];
         :	                        switch (itr) {
         :	                        case 0:
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
    0.00 :	    1c12:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1c19:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 1c20 <ixgbe_check_options+0x82e>
    0.00 :	    1c20:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1c27:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1c2e:       31 c0                   xor    %eax,%eax
    0.00 :	    1c30:       e8 00 00 00 00          callq  1c35 <ixgbe_check_options+0x843>
    0.00 :	    1c35:       e9 3e fa ff ff          jmpq   1678 <ixgbe_check_options+0x286>
         :
         :	#ifdef module_param_array
         :	                if (num_InterruptThrottleRate > bd) {
         :	#endif
         :	                        u32 itr = InterruptThrottleRate[bd];
         :	                        switch (itr) {
    0.00 :	    1c3a:       83 e8 01                sub    $0x1,%eax
    0.00 :	    1c3d:       74 50                   je     1c8f <ixgbe_check_options+0x89d>
         :	                                DPRINTK(PROBE, INFO, "dynamic interrupt "
         :	                                        "throttling enabled\n");
         :	                                adapter->rx_itr_setting = 1;
         :	                                break;
         :	                        default:
         :	                                ixgbe_validate_option(&itr, &opt);
    0.00 :	    1c3f:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1c46:       00 
    0.00 :	    1c47:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1c4e:       e8 9d f6 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                                /* the first bit is used as control */
         :	                                adapter->rx_itr_setting = (1000000/itr) << 2;
    0.00 :	    1c53:       b8 40 42 0f 00          mov    $0xf4240,%eax
    0.00 :	    1c58:       31 d2                   xor    %edx,%edx
    0.00 :	    1c5a:       f7 b4 24 9c 00 00 00    divl   0x9c(%rsp)
    0.00 :	    1c61:       c1 e0 02                shl    $0x2,%eax
    0.00 :	    1c64:       66 89 83 2c 02 00 00    mov    %ax,0x22c(%rbx)
    0.00 :	    1c6b:       e9 11 fa ff ff          jmpq   1681 <ixgbe_check_options+0x28f>
         :	                                break;
         :	                        }
         :	                        adapter->tx_itr_setting = adapter->rx_itr_setting;
         :	#ifdef module_param_array
         :	                } else {
         :	                        adapter->rx_itr_setting = opt.def;
    0.00 :	    1c70:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1c76 <ixgbe_check_options+0x884>
    0.00 :	    1c76:       66 89 83 2c 02 00 00    mov    %ax,0x22c(%rbx)
         :	                        adapter->tx_itr_setting = opt.def;
    0.00 :	    1c7d:       8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1c83 <ixgbe_check_options+0x891>
    0.00 :	    1c83:       66 89 83 24 02 00 00    mov    %ax,0x224(%rbx)
    0.00 :	    1c8a:       e9 00 fa ff ff          jmpq   168f <ixgbe_check_options+0x29d>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                                adapter->rx_itr_setting = 0;
         :	                                break;
         :	                        case 1:
         :	                                DPRINTK(PROBE, INFO, "dynamic interrupt "
    0.00 :	    1c8f:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1c96:       0f 85 a5 01 00 00       jne    1e41 <ixgbe_check_options+0xa4f>
         :	                                        "throttling enabled\n");
         :	                                adapter->rx_itr_setting = 1;
    0.00 :	    1c9c:       66 c7 83 2c 02 00 00    movw   $0x1,0x22c(%rbx)
    0.00 :	    1ca3:       01 00 
         :	                                break;
    0.00 :	    1ca5:       e9 d7 f9 ff ff          jmpq   1681 <ixgbe_check_options+0x28f>
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_L2LBen > bd) {
         :	#endif
         :	                        unsigned int l2LBen = L2LBen[bd];
    0.00 :	    1caa:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1cb1:       00 
         :	                        ixgbe_validate_option(&l2LBen, &opt);
    0.00 :	    1cb2:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1cb9:       00 
    0.00 :	    1cba:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_L2LBen > bd) {
         :	#endif
         :	                        unsigned int l2LBen = L2LBen[bd];
    0.00 :	    1cc1:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&l2LBen, &opt);
    0.00 :	    1cc8:       e8 23 f6 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (l2LBen)
    0.00 :	    1ccd:       8b bc 24 9c 00 00 00    mov    0x9c(%rsp),%edi
    0.00 :	    1cd4:       85 ff                   test   %edi,%edi
    0.00 :	    1cd6:       0f 84 6b f9 ff ff       je     1647 <ixgbe_check_options+0x255>
         :	                                adapter->flags |=
         :	                                        IXGBE_FLAG_SRIOV_L2LOOPBACK_ENABLE;
         :	#ifdef module_param_array
         :	                } else {
         :	                        if (opt.def == OPTION_ENABLED)
         :	                                adapter->flags |=
    0.00 :	    1cdc:       81 8b 18 02 00 00 00    orl    $0x800000,0x218(%rbx)
    0.00 :	    1ce3:       00 80 00 
    0.00 :	    1ce6:       e9 5c f9 ff ff          jmpq   1647 <ixgbe_check_options+0x255>
         :	                } else {
         :	                        if (opt.def == OPTION_DISABLED) {
         :	                                adapter->num_vfs = 0;
         :	                                *aflags &= ~IXGBE_FLAG_SRIOV_ENABLED;
         :	                        } else {
         :	                                adapter->num_vfs = opt.def;
    0.00 :	    1ceb:       89 83 58 7c 00 00       mov    %eax,0x7c58(%rbx)
         :	                                *aflags |= IXGBE_FLAG_SRIOV_ENABLED;
    0.00 :	    1cf1:       81 8b 18 02 00 00 00    orl    $0x100000,0x218(%rbx)
    0.00 :	    1cf8:       00 10 00 
    0.00 :	    1cfb:       e9 f3 f8 ff ff          jmpq   15f3 <ixgbe_check_options+0x201>
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_max_vfs > bd) {
         :	#endif
         :	                        unsigned int vfs = max_vfs[bd];
    0.00 :	    1d00:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1d07:       00 
         :	                        if (ixgbe_validate_option(&vfs, &opt)) {
    0.00 :	    1d08:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1d0f:       00 
    0.00 :	    1d10:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_max_vfs > bd) {
         :	#endif
         :	                        unsigned int vfs = max_vfs[bd];
    0.00 :	    1d17:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        if (ixgbe_validate_option(&vfs, &opt)) {
    0.00 :	    1d1e:       e8 cd f5 ff ff          callq  12f0 <ixgbe_validate_option>
    0.00 :	    1d23:       85 c0                   test   %eax,%eax
    0.00 :	    1d25:       74 14                   je     1d3b <ixgbe_check_options+0x949>
         :	                                vfs = 0;
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1d27:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
         :	#ifdef module_param_array
         :	                if (num_max_vfs > bd) {
         :	#endif
         :	                        unsigned int vfs = max_vfs[bd];
         :	                        if (ixgbe_validate_option(&vfs, &opt)) {
         :	                                vfs = 0;
    0.00 :	    1d2e:       c7 84 24 9c 00 00 00    movl   $0x0,0x9c(%rsp)
    0.00 :	    1d35:       00 00 00 00 
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1d39:       75 17                   jne    1d52 <ixgbe_check_options+0x960>
         :	                                        "max_vfs out of range "
         :	                                        "Disabling SR-IOV.\n");
         :	                        }
         :
         :	                        adapter->num_vfs = vfs;
    0.00 :	    1d3b:       8b 84 24 9c 00 00 00    mov    0x9c(%rsp),%eax
         :
         :	                        if (vfs)
    0.00 :	    1d42:       85 c0                   test   %eax,%eax
         :	                                DPRINTK(PROBE, INFO,
         :	                                        "max_vfs out of range "
         :	                                        "Disabling SR-IOV.\n");
         :	                        }
         :
         :	                        adapter->num_vfs = vfs;
    0.00 :	    1d44:       89 83 58 7c 00 00       mov    %eax,0x7c58(%rbx)
         :
         :	                        if (vfs)
    0.00 :	    1d4a:       0f 84 99 f8 ff ff       je     15e9 <ixgbe_check_options+0x1f7>
    0.00 :	    1d50:       eb 9f                   jmp    1cf1 <ixgbe_check_options+0x8ff>
         :	                if (num_max_vfs > bd) {
         :	#endif
         :	                        unsigned int vfs = max_vfs[bd];
         :	                        if (ixgbe_validate_option(&vfs, &opt)) {
         :	                                vfs = 0;
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1d52:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1d59:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1d60:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1d67:       31 c0                   xor    %eax,%eax
    0.00 :	    1d69:       e8 00 00 00 00          callq  1d6e <ixgbe_check_options+0x97c>
    0.00 :	    1d6e:       eb cb                   jmp    1d3b <ixgbe_check_options+0x949>
         :	#endif
         :
         :	                /* Check Interoperability */
         :	                if (*aflags & IXGBE_FLAG_SRIOV_ENABLED) {
         :	                        if (!(*aflags & IXGBE_FLAG_SRIOV_CAPABLE)) {
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1d70:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1d77:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1d7e:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1d85:       31 c0                   xor    %eax,%eax
    0.00 :	    1d87:       e8 00 00 00 00          callq  1d8c <ixgbe_check_options+0x99a>
    0.00 :	    1d8c:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    1d92:       e9 81 f8 ff ff          jmpq   1618 <ixgbe_check_options+0x226>
         :	                                        "IOV is not supported on this "
         :	                                        "hardware.  Disabling IOV.\n");
         :	                                *aflags &= ~IXGBE_FLAG_SRIOV_ENABLED;
         :	                                adapter->num_vfs = 0;
         :	                        } else if (!(*aflags & IXGBE_FLAG_MQ_CAPABLE)) {
    0.00 :	    1d97:       f6 c4 02                test   $0x2,%ah
    0.00 :	    1d9a:       0f 85 8d f8 ff ff       jne    162d <ixgbe_check_options+0x23b>
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1da0:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1da7:       0f 84 6b f8 ff ff       je     1618 <ixgbe_check_options+0x226>
    0.00 :	    1dad:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1db4:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1dbb:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1dc2:       31 c0                   xor    %eax,%eax
    0.00 :	    1dc4:       e8 00 00 00 00          callq  1dc9 <ixgbe_check_options+0x9d7>
    0.00 :	    1dc9:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    1dcf:       e9 44 f8 ff ff          jmpq   1618 <ixgbe_check_options+0x226>
         :	                        } else {
         :	                                if (opt.def == OPTION_ENABLED)
         :	                                        *aflags |= IXGBE_FLAG_FCOE_CAPABLE;
         :	                        }
         :	#endif
         :	                        DPRINTK(PROBE, INFO, "FCoE Offload feature %sabled\n",
    0.00 :	    1dd4:       f6 83 1a 02 00 00 02    testb  $0x2,0x21a(%rbx)
    0.00 :	    1ddb:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1de2:       48 c7 c0 00 00 00 00    mov    $0x0,%rax
    0.00 :	    1de9:       48 c7 c1 00 00 00 00    mov    $0x0,%rcx
    0.00 :	    1df0:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1df7:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1dfe:       48 0f 45 c8             cmovne %rax,%rcx
    0.00 :	    1e02:       31 c0                   xor    %eax,%eax
    0.00 :	    1e04:       e8 00 00 00 00          callq  1e09 <ixgbe_check_options+0xa17>
    0.00 :	    1e09:       e9 20 fa ff ff          jmpq   182e <ixgbe_check_options+0x43c>
         :	                                .def = OPTION_ENABLED
         :	                        };
         :	#ifdef module_param_array
         :	                        if (num_FCoE > bd) {
         :	#endif
         :	                                unsigned int fcoe = FCoE[bd];
    0.00 :	    1e0e:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1e15:       00 
         :
         :	                                ixgbe_validate_option(&fcoe, &opt);
    0.00 :	    1e16:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1e1d:       00 
    0.00 :	    1e1e:       48 89 d6                mov    %rdx,%rsi
         :	                                .def = OPTION_ENABLED
         :	                        };
         :	#ifdef module_param_array
         :	                        if (num_FCoE > bd) {
         :	#endif
         :	                                unsigned int fcoe = FCoE[bd];
    0.00 :	    1e21:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :
         :	                                ixgbe_validate_option(&fcoe, &opt);
    0.00 :	    1e28:       e8 c3 f4 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                                if (fcoe)
    0.00 :	    1e2d:       8b 8c 24 9c 00 00 00    mov    0x9c(%rsp),%ecx
    0.00 :	    1e34:       85 c9                   test   %ecx,%ecx
    0.00 :	    1e36:       0f 84 e5 f9 ff ff       je     1821 <ixgbe_check_options+0x42f>
    0.00 :	    1e3c:       e9 d6 f9 ff ff          jmpq   1817 <ixgbe_check_options+0x425>
         :	                                DPRINTK(PROBE, INFO, "%s turned off\n",
         :	                                        opt.name);
         :	                                adapter->rx_itr_setting = 0;
         :	                                break;
         :	                        case 1:
         :	                                DPRINTK(PROBE, INFO, "dynamic interrupt "
    0.00 :	    1e41:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1e48:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1e4f:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1e56:       31 c0                   xor    %eax,%eax
    0.00 :	    1e58:       e8 00 00 00 00          callq  1e5d <ixgbe_check_options+0xa6b>
    0.00 :	    1e5d:       e9 3a fe ff ff          jmpq   1c9c <ixgbe_check_options+0x8aa>
         :	#ifdef module_param_array
         :	                } else {
         :	                        if (opt.def == OPTION_DISABLED)
         :	                                *aflags &= ~IXGBE_FLAG_VMDQ_ENABLED;
         :	                        else
         :	                                *aflags |= IXGBE_FLAG_VMDQ_ENABLED;
    0.00 :	    1e62:       81 8b 18 02 00 00 00    orl    $0x800,0x218(%rbx)
    0.00 :	    1e69:       08 00 00 
    0.00 :	    1e6c:       e9 17 f7 ff ff          jmpq   1588 <ixgbe_check_options+0x196>
         :	                }
         :
         :	#ifdef module_param_array
         :	                if (num_VMDQ > bd) {
         :	#endif
         :	                        unsigned int vmdq = VMDQ[bd];
    0.00 :	    1e71:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1e78:       00 
         :
         :	                        ixgbe_validate_option(&vmdq, &opt);
    0.00 :	    1e79:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1e80:       00 
    0.00 :	    1e81:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                }
         :
         :	#ifdef module_param_array
         :	                if (num_VMDQ > bd) {
         :	#endif
         :	                        unsigned int vmdq = VMDQ[bd];
    0.00 :	    1e88:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :
         :	                        ixgbe_validate_option(&vmdq, &opt);
    0.00 :	    1e8f:       e8 5c f4 ff ff          callq  12f0 <ixgbe_validate_option>
         :
         :	                        /* zero or one both mean disabled from our driver's
         :	                         * perspective */
         :	                        if (vmdq > 1)
    0.00 :	    1e94:       83 bc 24 9c 00 00 00    cmpl   $0x1,0x9c(%rsp)
    0.00 :	    1e9b:       01 
    0.00 :	    1e9c:       76 6e                   jbe    1f0c <ixgbe_check_options+0xb1a>
         :	                                *aflags |= IXGBE_FLAG_VMDQ_ENABLED;
    0.00 :	    1e9e:       81 8b 18 02 00 00 00    orl    $0x800,0x218(%rbx)
    0.00 :	    1ea5:       08 00 00 
         :	                        else
         :	                                *aflags &= ~IXGBE_FLAG_VMDQ_ENABLED;
         :
         :	                        feature[RING_F_VMDQ].limit = vmdq;
    0.00 :	    1ea8:       8b 84 24 9c 00 00 00    mov    0x9c(%rsp),%eax
    0.00 :	    1eaf:       66 89 83 d0 0b 00 00    mov    %ax,0xbd0(%rbx)
    0.00 :	    1eb6:       e9 da f6 ff ff          jmpq   1595 <ixgbe_check_options+0x1a3>
         :	                                feature[RING_F_FDIR].limit = rss;
         :
         :	                        feature[RING_F_RSS].limit = rss;
         :	#ifdef module_param_array
         :	                } else if (opt.def == 0) {
         :	                        rss = min_t(int, IXGBE_MAX_RSS_INDICES,
    0.00 :	    1ebb:       48 8b 3d 00 00 00 00    mov    0x0(%rip),%rdi        # 1ec2 <ixgbe_check_options+0xad0>
    0.00 :	    1ec2:       e8 00 00 00 00          callq  1ec7 <ixgbe_check_options+0xad5>
    0.00 :	    1ec7:       ba 10 00 00 00          mov    $0x10,%edx
    0.00 :	    1ecc:       83 f8 10                cmp    $0x10,%eax
    0.00 :	    1ecf:       0f 4e d0                cmovle %eax,%edx
    0.00 :	    1ed2:       89 94 24 9c 00 00 00    mov    %edx,0x9c(%rsp)
         :	                                    num_online_cpus());
         :	                        feature[RING_F_RSS].limit = rss;
    0.00 :	    1ed9:       66 89 93 d8 0b 00 00    mov    %dx,0xbd8(%rbx)
    0.00 :	    1ee0:       e9 3a f6 ff ff          jmpq   151f <ixgbe_check_options+0x12d>
         :	                }
         :	#endif
         :	                /* Check Interoperability */
         :	                if (*aflags & IXGBE_FLAG_VMDQ_ENABLED) {
         :	                        if (!(*aflags & IXGBE_FLAG_MQ_CAPABLE)) {
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1ee5:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1eec:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    1ef3:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    1efa:       31 c0                   xor    %eax,%eax
    0.00 :	    1efc:       e8 00 00 00 00          callq  1f01 <ixgbe_check_options+0xb0f>
    0.00 :	    1f01:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    1f07:       e9 a6 f6 ff ff          jmpq   15b2 <ixgbe_check_options+0x1c0>
         :	                        /* zero or one both mean disabled from our driver's
         :	                         * perspective */
         :	                        if (vmdq > 1)
         :	                                *aflags |= IXGBE_FLAG_VMDQ_ENABLED;
         :	                        else
         :	                                *aflags &= ~IXGBE_FLAG_VMDQ_ENABLED;
    0.00 :	    1f0c:       81 a3 18 02 00 00 ff    andl   $0xfffff7ff,0x218(%rbx)
    0.00 :	    1f13:       f7 ff ff 
    0.00 :	    1f16:       eb 90                   jmp    1ea8 <ixgbe_check_options+0xab6>
         :	                unsigned int rss = RSS[bd];
         :
         :	#ifdef module_param_array
         :	                if (num_RSS > bd) {
         :	#endif
         :	                        ixgbe_validate_option(&rss, &opt);
    0.00 :	    1f18:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1f1f:       00 
    0.00 :	    1f20:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    1f27:       e8 c4 f3 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        /* base it off num_online_cpus() with hardware limit */
         :	                        if (!rss)
    0.00 :	    1f2c:       8b 84 24 9c 00 00 00    mov    0x9c(%rsp),%eax
    0.00 :	    1f33:       85 c0                   test   %eax,%eax
    0.00 :	    1f35:       74 22                   je     1f59 <ixgbe_check_options+0xb67>
         :	                                rss = min_t(int, IXGBE_MAX_RSS_INDICES,
         :	                                            num_online_cpus());
         :	                        else
         :	                                feature[RING_F_FDIR].limit = rss;
    0.00 :	    1f37:       66 89 83 e0 0b 00 00    mov    %ax,0xbe0(%rbx)
         :
         :	                        feature[RING_F_RSS].limit = rss;
    0.00 :	    1f3e:       66 89 83 d8 0b 00 00    mov    %ax,0xbd8(%rbx)
    0.00 :	    1f45:       e9 d5 f5 ff ff          jmpq   151f <ixgbe_check_options+0x12d>
         :	                        if (opt.def == OPTION_DISABLED)
         :	                                *aflags &= ~IXGBE_FLAG_DCA_CAPABLE;
         :	                }
         :	#endif
         :	                if (dca == IXGBE_MAX_DCA)
         :	                        adapter->flags |= IXGBE_FLAG_DCA_ENABLED_DATA;
    0.00 :	    1f4a:       81 8b 18 02 00 00 00    orl    $0x100,0x218(%rbx)
    0.00 :	    1f51:       01 00 00 
    0.00 :	    1f54:       e9 9a f5 ff ff          jmpq   14f3 <ixgbe_check_options+0x101>
         :	                if (num_RSS > bd) {
         :	#endif
         :	                        ixgbe_validate_option(&rss, &opt);
         :	                        /* base it off num_online_cpus() with hardware limit */
         :	                        if (!rss)
         :	                                rss = min_t(int, IXGBE_MAX_RSS_INDICES,
    0.00 :	    1f59:       48 8b 3d 00 00 00 00    mov    0x0(%rip),%rdi        # 1f60 <ixgbe_check_options+0xb6e>
    0.00 :	    1f60:       e8 00 00 00 00          callq  1f65 <ixgbe_check_options+0xb73>
    0.00 :	    1f65:       ba 10 00 00 00          mov    $0x10,%edx
    0.00 :	    1f6a:       83 f8 10                cmp    $0x10,%eax
    0.00 :	    1f6d:       0f 4e d0                cmovle %eax,%edx
    0.00 :	    1f70:       89 94 24 9c 00 00 00    mov    %edx,0x9c(%rsp)
    0.00 :	    1f77:       89 d0                   mov    %edx,%eax
    0.00 :	    1f79:       eb c3                   jmp    1f3e <ixgbe_check_options+0xb4c>
         :	                unsigned int dca = opt.def;
         :
         :	#ifdef module_param_array
         :	                if (num_DCA > bd) {
         :	#endif
         :	                        dca = DCA[bd];
    0.00 :	    1f7b:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    1f82:       00 
         :	                        ixgbe_validate_option(&dca, &opt);
    0.00 :	    1f83:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    1f8a:       00 
    0.00 :	    1f8b:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                unsigned int dca = opt.def;
         :
         :	#ifdef module_param_array
         :	                if (num_DCA > bd) {
         :	#endif
         :	                        dca = DCA[bd];
    0.00 :	    1f92:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&dca, &opt);
    0.00 :	    1f99:       e8 52 f3 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (!dca)
    0.00 :	    1f9e:       44 8b 9c 24 9c 00 00    mov    0x9c(%rsp),%r11d
    0.00 :	    1fa5:       00 
    0.00 :	    1fa6:       45 85 db                test   %r11d,%r11d
    0.00 :	    1fa9:       75 0a                   jne    1fb5 <ixgbe_check_options+0xbc3>
         :	                                *aflags &= ~IXGBE_FLAG_DCA_CAPABLE;
    0.00 :	    1fab:       81 a3 18 02 00 00 7f    andl   $0xffffff7f,0x218(%rbx)
    0.00 :	    1fb2:       ff ff ff 
         :
         :	                        /* Check Interoperability */
         :	                        if (!(*aflags & IXGBE_FLAG_DCA_CAPABLE)) {
    0.00 :	    1fb5:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    1fbb:       84 c0                   test   %al,%al
    0.00 :	    1fbd:       78 12                   js     1fd1 <ixgbe_check_options+0xbdf>
         :	                                DPRINTK(PROBE, INFO, "DCA is disabled\n");
    0.00 :	    1fbf:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1fc6:       75 50                   jne    2018 <ixgbe_check_options+0xc26>
         :	                                *aflags &= ~IXGBE_FLAG_DCA_ENABLED;
    0.00 :	    1fc8:       83 e0 bf                and    $0xffffffbf,%eax
    0.00 :	    1fcb:       89 83 18 02 00 00       mov    %eax,0x218(%rbx)
         :	                        }
         :
         :	                        if (dca == IXGBE_MAX_DCA) {
    0.00 :	    1fd1:       83 bc 24 9c 00 00 00    cmpl   $0x2,0x9c(%rsp)
    0.00 :	    1fd8:       02 
    0.00 :	    1fd9:       0f 85 14 f5 ff ff       jne    14f3 <ixgbe_check_options+0x101>
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1fdf:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    1fe6:       75 54                   jne    203c <ixgbe_check_options+0xc4a>
         :	                                        "DCA enabled for rx data\n");
         :	                                adapter->flags |= IXGBE_FLAG_DCA_ENABLED_DATA;
    0.00 :	    1fe8:       81 8b 18 02 00 00 00    orl    $0x100,0x218(%rbx)
    0.00 :	    1fef:       01 00 00 
    0.00 :	    1ff2:       e9 ee f4 ff ff          jmpq   14e5 <ixgbe_check_options+0xf3>
         :	                }
         :	#endif
         :	                /* Check Interoperability */
         :	                if (rss > 1) {
         :	                        if (!(*aflags & IXGBE_FLAG_MQ_CAPABLE)) {
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    1ff7:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    1ffe:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    2005:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    200c:       31 c0                   xor    %eax,%eax
    0.00 :	    200e:       e8 00 00 00 00          callq  2013 <ixgbe_check_options+0xc21>
    0.00 :	    2013:       e9 27 f5 ff ff          jmpq   153f <ixgbe_check_options+0x14d>
         :	                        if (!dca)
         :	                                *aflags &= ~IXGBE_FLAG_DCA_CAPABLE;
         :
         :	                        /* Check Interoperability */
         :	                        if (!(*aflags & IXGBE_FLAG_DCA_CAPABLE)) {
         :	                                DPRINTK(PROBE, INFO, "DCA is disabled\n");
    0.00 :	    2018:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    201f:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    2026:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    202d:       31 c0                   xor    %eax,%eax
    0.00 :	    202f:       e8 00 00 00 00          callq  2034 <ixgbe_check_options+0xc42>
    0.00 :	    2034:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    203a:       eb 8c                   jmp    1fc8 <ixgbe_check_options+0xbd6>
         :	                                *aflags &= ~IXGBE_FLAG_DCA_ENABLED;
         :	                        }
         :
         :	                        if (dca == IXGBE_MAX_DCA) {
         :	                                DPRINTK(PROBE, INFO,
    0.00 :	    203c:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    2043:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    204a:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    2051:       31 c0                   xor    %eax,%eax
    0.00 :	    2053:       e8 00 00 00 00          callq  2058 <ixgbe_check_options+0xc66>
    0.00 :	    2058:       eb 8e                   jmp    1fe8 <ixgbe_check_options+0xbf6>
         :	                }
         :	#endif
         :	                /* Check Interoperability */
         :	                if ((*aflags & IXGBE_FLAG_MQ_CAPABLE) &&
         :	                    !(*aflags & IXGBE_FLAG_MSIX_CAPABLE)) {
         :	                        DPRINTK(PROBE, INFO,
    0.00 :	    205a:       f6 83 a8 14 00 00 02    testb  $0x2,0x14a8(%rbx)
    0.00 :	    2061:       75 4f                   jne    20b2 <ixgbe_check_options+0xcc0>
         :	                                "Multiple queues are not supported while MSI-X "
         :	                                "is disabled.  Disabling Multiple Queues.\n");
         :	                        *aflags &= ~IXGBE_FLAG_MQ_CAPABLE;
    0.00 :	    2063:       80 e6 fd                and    $0xfd,%dh
    0.00 :	    2066:       89 93 18 02 00 00       mov    %edx,0x218(%rbx)
    0.00 :	    206c:       e9 44 f4 ff ff          jmpq   14b5 <ixgbe_check_options+0xc3>
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_MQ > bd) {
         :	#endif
         :	                        unsigned int mq = MQ[bd];
    0.00 :	    2071:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    2078:       00 
         :	                        ixgbe_validate_option(&mq, &opt);
    0.00 :	    2079:       48 8d bc 24 9c 00 00    lea    0x9c(%rsp),%rdi
    0.00 :	    2080:       00 
    0.00 :	    2081:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
         :	                };
         :
         :	#ifdef module_param_array
         :	                if (num_MQ > bd) {
         :	#endif
         :	                        unsigned int mq = MQ[bd];
    0.00 :	    2088:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
         :	                        ixgbe_validate_option(&mq, &opt);
    0.00 :	    208f:       e8 5c f2 ff ff          callq  12f0 <ixgbe_validate_option>
         :	                        if (mq)
    0.00 :	    2094:       8b ac 24 9c 00 00 00    mov    0x9c(%rsp),%ebp
    0.00 :	    209b:       85 ed                   test   %ebp,%ebp
    0.00 :	    209d:       0f 84 f0 f3 ff ff       je     1493 <ixgbe_check_options+0xa1>
         :	                        else
         :	                                *aflags &= ~IXGBE_FLAG_MQ_CAPABLE;
         :	#ifdef module_param_array
         :	                } else {
         :	                        if (opt.def == OPTION_ENABLED)
         :	                                *aflags |= IXGBE_FLAG_MQ_CAPABLE;
    0.00 :	    20a3:       81 8b 18 02 00 00 00    orl    $0x200,0x218(%rbx)
    0.00 :	    20aa:       02 00 00 
    0.00 :	    20ad:       e9 eb f3 ff ff          jmpq   149d <ixgbe_check_options+0xab>
         :	                }
         :	#endif
         :	                /* Check Interoperability */
         :	                if ((*aflags & IXGBE_FLAG_MQ_CAPABLE) &&
         :	                    !(*aflags & IXGBE_FLAG_MSIX_CAPABLE)) {
         :	                        DPRINTK(PROBE, INFO,
    0.00 :	    20b2:       48 8b b3 00 02 00 00    mov    0x200(%rbx),%rsi
    0.00 :	    20b9:       48 c7 c2 00 00 00 00    mov    $0x0,%rdx
    0.00 :	    20c0:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    20c7:       31 c0                   xor    %eax,%eax
    0.00 :	    20c9:       e8 00 00 00 00          callq  20ce <ixgbe_check_options+0xcdc>
    0.00 :	    20ce:       8b 93 18 02 00 00       mov    0x218(%rbx),%edx
    0.00 :	    20d4:       eb 8d                   jmp    2063 <ixgbe_check_options+0xc71>
         :	                        if (int_mode == OPTION_UNSET)
         :	                                int_mode = InterruptType[bd];
         :	                        ixgbe_validate_option(&int_mode, &opt);
         :	                        switch (int_mode) {
         :	                        case IXGBE_INT_MSIX:
         :	                                if (!(*aflags & IXGBE_FLAG_MSIX_CAPABLE))
    0.00 :	    20d6:       f6 83 18 02 00 00 04    testb  $0x4,0x218(%rbx)
    0.00 :	    20dd:       0f 85 96 f3 ff ff       jne    1479 <ixgbe_check_options+0x87>
         :	                                        printk(KERN_INFO
    0.00 :	    20e3:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    20ea:       31 c0                   xor    %eax,%eax
    0.00 :	    20ec:       e8 00 00 00 00          callq  20f1 <ixgbe_check_options+0xcff>
    0.00 :	    20f1:       e9 83 f3 ff ff          jmpq   1479 <ixgbe_check_options+0x87>
         :	                                               "Ignoring MSI-X setting; "
         :	                                               "support unavailable\n");
         :	                                break;
         :	                        case IXGBE_INT_MSI:
         :	                                if (!(*aflags & IXGBE_FLAG_MSI_CAPABLE)) {
    0.00 :	    20f6:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    20fc:       a8 01                   test   $0x1,%al
    0.00 :	    20fe:       74 22                   je     2122 <ixgbe_check_options+0xd30>
         :	                                        printk(KERN_INFO
         :	                                               "Ignoring MSI setting; "
         :	                                               "support unavailable\n");
         :	                                } else {
         :	                                        *aflags &= ~IXGBE_FLAG_MSIX_CAPABLE;
    0.00 :	    2100:       83 e0 fb                and    $0xfffffffb,%eax
    0.00 :	    2103:       89 83 18 02 00 00       mov    %eax,0x218(%rbx)
    0.00 :	    2109:       e9 6b f3 ff ff          jmpq   1479 <ixgbe_check_options+0x87>
         :	#ifdef module_param_array
         :	                if (num_IntMode > bd || num_InterruptType > bd) {
         :	#endif
         :	                        int_mode = IntMode[bd];
         :	                        if (int_mode == OPTION_UNSET)
         :	                                int_mode = InterruptType[bd];
    0.00 :	    210e:       42 8b 04 ad 00 00 00    mov    0x0(,%r13,4),%eax
    0.00 :	    2115:       00 
    0.00 :	    2116:       89 84 24 9c 00 00 00    mov    %eax,0x9c(%rsp)
    0.00 :	    211d:       e9 23 f3 ff ff          jmpq   1445 <ixgbe_check_options+0x53>
         :	                                               "Ignoring MSI-X setting; "
         :	                                               "support unavailable\n");
         :	                                break;
         :	                        case IXGBE_INT_MSI:
         :	                                if (!(*aflags & IXGBE_FLAG_MSI_CAPABLE)) {
         :	                                        printk(KERN_INFO
    0.00 :	    2122:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    2129:       31 c0                   xor    %eax,%eax
    0.00 :	    212b:       e8 00 00 00 00          callq  2130 <ixgbe_check_options+0xd3e>
    0.00 :	    2130:       e9 44 f3 ff ff          jmpq   1479 <ixgbe_check_options+0x87>
         :	        int bd = adapter->bd_number;
         :	        u32 *aflags = &adapter->flags;
         :	        struct ixgbe_ring_feature *feature = adapter->ring_feature;
         :
         :	        if (bd >= IXGBE_MAX_NIC) {
         :	                printk(KERN_NOTICE
    0.00 :	    2135:       44 89 e6                mov    %r12d,%esi
    0.00 :	    2138:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    213f:       31 c0                   xor    %eax,%eax
    0.00 :	    2141:       e8 00 00 00 00          callq  2146 <ixgbe_check_options+0xd54>
         :	                       "Warning: no configuration for board #%d\n", bd);
         :	                printk(KERN_NOTICE "Using defaults for all values\n");
    0.00 :	    2146:       48 c7 c7 00 00 00 00    mov    $0x0,%rdi
    0.00 :	    214d:       31 c0                   xor    %eax,%eax
    0.00 :	    214f:       e8 00 00 00 00          callq  2154 <ixgbe_check_options+0xd62>
    0.00 :	    2154:       e9 bb f2 ff ff          jmpq   1414 <ixgbe_check_options+0x22>
         :	                                break;
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        /* default settings */
         :	                        if (opt.def == IXGBE_INT_MSIX &&
    0.00 :	    2159:       8b 15 00 00 00 00       mov    0x0(%rip),%edx        # 215f <ixgbe_check_options+0xd6d>
    0.00 :	    215f:       83 fa 02                cmp    $0x2,%edx
    0.00 :	    2162:       74 1c                   je     2180 <ixgbe_check_options+0xd8e>
         :	                            *aflags & IXGBE_FLAG_MSIX_CAPABLE) {
         :	                                *aflags |= IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
         :	                        } else if (opt.def == IXGBE_INT_MSI &&
    0.00 :	    2164:       83 ea 01                sub    $0x1,%edx
         :	                                break;
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        /* default settings */
         :	                        if (opt.def == IXGBE_INT_MSIX &&
    0.00 :	    2167:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
         :	                            *aflags & IXGBE_FLAG_MSIX_CAPABLE) {
         :	                                *aflags |= IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
         :	                        } else if (opt.def == IXGBE_INT_MSI &&
    0.00 :	    216d:       74 2c                   je     219b <ixgbe_check_options+0xda9>
         :	                            *aflags & IXGBE_FLAG_MSI_CAPABLE) {
         :	                                *aflags &= ~IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
         :	                        } else {
         :	                                *aflags &= ~IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags &= ~IXGBE_FLAG_MSI_CAPABLE;
    0.00 :	    216f:       83 e0 fa                and    $0xfffffffa,%eax
    0.00 :	    2172:       4d 63 ec                movslq %r12d,%r13
    0.00 :	    2175:       89 83 18 02 00 00       mov    %eax,0x218(%rbx)
    0.00 :	    217b:       e9 f9 f2 ff ff          jmpq   1479 <ixgbe_check_options+0x87>
         :	                                break;
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        /* default settings */
         :	                        if (opt.def == IXGBE_INT_MSIX &&
    0.00 :	    2180:       8b 83 18 02 00 00       mov    0x218(%rbx),%eax
    0.00 :	    2186:       a8 04                   test   $0x4,%al
    0.00 :	    2188:       74 e5                   je     216f <ixgbe_check_options+0xd7d>
         :	                            *aflags & IXGBE_FLAG_MSIX_CAPABLE) {
         :	                                *aflags |= IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
    0.00 :	    218a:       83 c8 05                or     $0x5,%eax
    0.00 :	    218d:       4d 63 ec                movslq %r12d,%r13
    0.00 :	    2190:       89 83 18 02 00 00       mov    %eax,0x218(%rbx)
         :	                                break;
         :	                        }
         :	#ifdef module_param_array
         :	                } else {
         :	                        /* default settings */
         :	                        if (opt.def == IXGBE_INT_MSIX &&
    0.00 :	    2196:       e9 de f2 ff ff          jmpq   1479 <ixgbe_check_options+0x87>
         :	                            *aflags & IXGBE_FLAG_MSIX_CAPABLE) {
         :	                                *aflags |= IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
         :	                        } else if (opt.def == IXGBE_INT_MSI &&
    0.00 :	    219b:       a8 01                   test   $0x1,%al
    0.00 :	    219d:       74 d0                   je     216f <ixgbe_check_options+0xd7d>
         :	                            *aflags & IXGBE_FLAG_MSI_CAPABLE) {
         :	                                *aflags &= ~IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
    0.00 :	    219f:       83 e0 fb                and    $0xfffffffb,%eax
    0.00 :	    21a2:       4d 63 ec                movslq %r12d,%r13
    0.00 :	    21a5:       83 c8 01                or     $0x1,%eax
    0.00 :	    21a8:       89 83 18 02 00 00       mov    %eax,0x218(%rbx)
         :	                        /* default settings */
         :	                        if (opt.def == IXGBE_INT_MSIX &&
         :	                            *aflags & IXGBE_FLAG_MSIX_CAPABLE) {
         :	                                *aflags |= IXGBE_FLAG_MSIX_CAPABLE;
         :	                                *aflags |= IXGBE_FLAG_MSI_CAPABLE;
         :	                        } else if (opt.def == IXGBE_INT_MSI &&
   50.00 :	    21ae:       e9 c6 f2 ff ff          jmpq   1479 <ixgbe_check_options+0x87>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000007700 <tcp_packet>:
    0.00 :	    7700:       41 57                   push   %r15
    0.00 :	    7732:       41 56 41                mov    0x68(%rsi),%eax
    0.00 :	    7735:       55 41 54                sub    0x6c(%rsi),%eax
    0.00 :	    7738:       55 53                   sub    %edx,%eax
    0.00 :	    773a:       48 89 fb                cmp    $0x13,%eax
    0.00 :	    773d:       48 81 ec 98 00 00       jle    7b60 <nf_conntrack_hash_insert+0x7a50>
    0.00 :	    7743:       00 48 89                movslq %edx,%r12
    0.00 :	    7746:       74 24 30 89 54 24 2c    add    0xe0(%rsi),%r12
    0.00 :	    774d:       89 4c 24                test   %r12,%r12
    0.00 :	    7750:       28 44 88 44 24 27       je     7f18 <nf_conntrack_hash_insert+0x7e08>
    0.00 :	    7756:       48 8b 87 e8             lea    0x4(%rbx),%rdx
    0.00 :	    775a:       00 00 00                xor    %r14d,%r14d
    0.00 :	    775d:       48 89 44                mov    %rdx,%rdi
    0.00 :	    7760:       24 38 8b 46 68          mov    %rdx,0x48(%rsp)
    0.00 :	    7765:       2b 46 6c 29 d0          callq  776a <nf_conntrack_hash_insert+0x765a>
    0.00 :	    776a:       83 f8 13 0f 8e 1d 04    movzbl 0x118(%rbx),%eax
    0.00 :	    7771:       00 00 4c 63 e2          cmpl   $0x2,0x28(%rsp)
    0.00 :	    7776:       4c 03 a6 e0 00 00       mov    $0x4,%r8d
    0.00 :	    777c:       00 4d 85 e4             mov    %eax,0x44(%rsp)
    0.00 :	    7780:       0f 84 c2 07 00 00       movzbl 0xd(%r12),%esi
    0.00 :	    7786:       48 8d 53 04             seta   %r14b
    0.00 :	    778a:       45 31 f6                and    %sil,%r8b
    0.00 :	    778d:       48 89 d7 48 89 54       je     7910 <nf_conntrack_hash_insert+0x7800>
    0.00 :	    7793:       24 48 e8 00 00          mov    $0x4,%ebp
    0.00 :	    7798:       00 00 0f                mov    %r14d,%r13d
    0.00 :	    779b:       b6 83                   mov    %ebp,%edx
    0.00 :	    779d:       18 01 00 00             mov    0x44(%rsp),%ecx
    0.00 :	    77a1:       83 7c 24 28 02 41 b8    lea    0x0(,%r13,4),%rdi
    0.00 :	    77a8:       04 
    0.00 :	    77a9:       00 00 00                mov    %r13,%rax
    0.00 :	    77ac:       89 44 24 44             lea    (%rdx,%rdx,4),%rdx
    0.00 :	    77b0:       41 0f b6 74             shl    $0x6,%rax
    0.00 :	    77b4:       24 0d 41                sub    %rdi,%rax
    0.00 :	    77b7:       0f 97 c6 41             lea    (%rax,%rdx,2),%rdx
    0.00 :	    77bb:       20 f0 0f 84 7d 01 00    movzbl 0x0(%rcx,%rdx,1),%eax
    0.00 :	    77c2:       00 
    0.00 :	    77c3:       bd 04                   cmp    $0x8,%al
    0.00 :	    77c5:       00 00 00 45             movzbl %al,%r15d
    0.00 :	    77c9:       89 f5 89 ea 8b 4c       je     7c08 <nf_conntrack_hash_insert+0x7af8>
    0.00 :	    77cf:       24 44 4a 8d 3c ad       ja     7930 <nf_conntrack_hash_insert+0x7820>
    0.00 :	    77d5:       00 00                   sub    $0x1,%al
    0.00 :	    77d7:       00 00 4c 89 e8 48       je     7c70 <nf_conntrack_hash_insert+0x7b60>
    0.00 :	    77dd:       8d 14 92 48 c1          movzbl 0x27(%rsp),%eax
    0.00 :	    77e2:       e0 06 48 29 f8          mov    0x2c(%rsp),%r9d
    0.00 :	    77e7:       48 8d 14 50 0f b6 84    lea    0xf0(%rbx),%rsi
    0.00 :	    77ee:       11 00 00 00 00          mov    0x30(%rsp),%r8
    0.00 :	    77f3:       3c 08 44                mov    %r14d,%edx
    0.00 :	    77f6:       0f b6                   mov    %ebp,%ecx
    0.00 :	    77f8:       f8 0f 84                mov    %rbx,%rdi
    0.00 :	    77fb:       39 04 00 00             mov    %r12,(%rsp)
    0.00 :	    77ff:       0f 87 5b 01             mov    %eax,0x8(%rsp)
    0.00 :	    7803:       00 00 2c 01 0f          callq  6a40 <nf_conntrack_hash_insert+0x6930>
    0.00 :	    7808:       84 93 04 00             lea    0x78(%rbx),%rdx
    0.00 :	    780c:       00 0f                   test   %al,%al
    0.00 :	    780e:       b6 44 24 27 44          mov    %rdx,0x18(%rsp)
    0.00 :	    7813:       8b 4c 24 2c 48 8d       je     7f00 <nf_conntrack_hash_insert+0x7df0>
    0.00 :	    7819:       b3 f0 00 00 00 4c 8b    mov    %bpl,0x11b(%rbx)
    0.00 :	    7820:       44 24 30 44 89 f2 89    mov    %r14b,0x119(%rbx)
    0.00 :	    7827:       e9 48 89 df 4c 89 24    cmpb   $0x0,0x0(%rip)        # 782e <nf_conntrack_hash_insert+0x771e>
    0.00 :	    782e:       24 89 44 24 08 e8       jne    7fa5 <nf_conntrack_hash_insert+0x7e95>
    0.00 :	    7834:       38 f2 ff ff 48 8d 53    cmpb   $0x0,0x0(%rip)        # 783b <nf_conntrack_hash_insert+0x772b>
 ??:0
  100.00 :	    783b:       78 84 c0 48 89 54       jne    7f1c <nf_conntrack_hash_insert+0x7e0c>
    0.00 :	    7841:       24 18 0f 84 e7          cmp    %r15d,0x44(%rsp)
    0.00 :	    7846:       06 00 00 40 88 ab 1b    mov    %r15b,0x118(%rbx)
    0.00 :	    784d:       01 00 00 44             setne  %r14b
    0.00 :	    7851:       88 b3                   je     785d <nf_conntrack_hash_insert+0x774d>
    0.00 :	    7853:       19 01 00 00             cmp    $0x4,%r15d
    0.00 :	    7857:       80 3d 00 00 00 00       je     7b40 <nf_conntrack_hash_insert+0x7a30>
    0.00 :	    785d:       00 0f 85 71 07 00 00    movzbl 0x11a(%rbx),%eax
    0.00 :	    7864:       80 3d 00 00 00 00       cmp    0x0(%rip),%eax        # 786a <nf_conntrack_hash_insert+0x775a>
    0.00 :	    786a:       00 0f 85 db 06 00       jl     7a60 <nf_conntrack_hash_insert+0x7950>
    0.00 :	    7870:       00 44 39                mov    %r15d,%eax
    0.00 :	    7873:       7c 24 44 44 88 bb 18    mov    0x0(,%rax,4),%edx
    0.00 :	    787a:       01 00 00 41 0f 95       mov    0x0(%rip),%eax        # 7880 <nf_conntrack_hash_insert+0x7770>
    0.00 :	    7880:       c6 74                   cmp    %eax,%edx
    0.00 :	    7882:       0a 41                   mov    %eax,%ebp
    0.00 :	    7884:       83 ff 04 0f 84 e3       jbe    7a6a <nf_conntrack_hash_insert+0x795a>
    0.00 :	    788a:       02 00 00 0f b6          mov    0x48(%rsp),%rdi
    0.00 :	    788f:       83 1a 01 00 00          callq  7894 <nf_conntrack_hash_insert+0x7784>
    0.00 :	    7894:       3b 05 00                test   %r14b,%r14b
    0.00 :	    7897:       00 00                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7899:       00 0f 8c f0 01 00 00    mov    0xe8(%rbx),%rax
    0.00 :	    78a0:       44 89 f8 8b 14 85 00    cmpq   $0x0,0x738(%rax)
    0.00 :	    78a7:       00 
    0.00 :	    78a8:       00 00                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    78aa:       8b 05 00 00 00 00 39    mov    0xe0(%rbx),%rdx
    0.00 :	    78b1:       c2 89 c5                test   %rdx,%rdx
    0.00 :	    78b4:       0f 86                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    78b6:       e0 01 00 00             movzbl 0x13(%rdx),%eax
    0.00 :	    78ba:       48 8b                   test   %al,%al
    0.00 :	    78bc:       7c 24 48 e8 00 00       jne    7d30 <nf_conntrack_hash_insert+0x7c20>
    0.00 :	    78c2:       00 00 45 84 f6          mov    0x18(%rsp),%rdx
    0.00 :	    78c7:       74 29 48                mov    (%rdx),%rax
    0.00 :	    78ca:       8b 83                   test   $0x2,%al
    0.00 :	    78cc:       e8 00 00 00 48 83       jne    7b90 <nf_conntrack_hash_insert+0x7a80>
    0.00 :	    78d2:       b8 38 07 00 00 00       testb  $0x4,0xd(%r12)
    0.00 :	    78d8:       74 18 48 8b 93 e0       jne    7dc0 <nf_conntrack_hash_insert+0x7cb0>
    0.00 :	    78de:       00 00 00 48 85          mov    0x30(%rsp),%rdx
    0.00 :	    78e3:       d2 74 0c 0f             mov    0x28(%rsp),%esi
    0.00 :	    78e7:       b6 42 13 84 c0 0f       mov    $0x1,%r8d
    0.00 :	    78ed:       85 6e 04                mov    %rbp,%rcx
    0.00 :	    78f0:       00 00 48                mov    %rbx,%rdi
    0.00 :	    78f3:       8b 54 24 18 48          callq  78f8 <nf_conntrack_hash_insert+0x77e8>
    0.00 :	    78f8:       8b 02 a8 02 0f          mov    $0x1,%eax
    0.00 :	    78fd:       85 be 02 00 00 41 f6    add    $0x98,%rsp
    0.00 :	    7904:       44                      pop    %rbx
    0.00 :	    7905:       24                      pop    %rbp
    0.00 :	    7906:       0d 04                   pop    %r12
    0.00 :	    7908:       0f 85                   pop    %r13
    0.00 :	    790a:       e2 04                   pop    %r14
    0.00 :	    790c:       00 00                   pop    %r15
    0.00 :	    790e:       48                      retq   
    0.00 :	    790f:       8b                      nop
    0.00 :	    7910:       54 24 30 8b             test   $0x2,%sil
    0.00 :	    7914:       74 24 28 41 b8 01       je     7a38 <nf_conntrack_hash_insert+0x7928>
    0.00 :	    791a:       00 00                   mov    %esi,%eax
    0.00 :	    791c:       00 48 89 e9 48          mov    $0x1,%ebp
    0.00 :	    7921:       89 df e8                shr    $0x4,%al
    0.00 :	    7924:       00 00                   and    %eax,%ebp
    0.00 :	    7926:       00 00 b8 01 00          jmpq   7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    792b:       00 00 48 81 c4          nopl   0x0(%rax,%rax,1)
    0.00 :	    7930:       98 00                   cmp    $0xa,%al
    0.00 :	    7932:       00 00 5b 5d 41 5c       je     7cd0 <nf_conntrack_hash_insert+0x7bc0>
    0.00 :	    7938:       41 5d                   cmp    $0xb,%al
    0.00 :	    793a:       41 5e 41 5f c3 90       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7940:       40 f6 c6                cmp    $0x1,%ebp
    0.00 :	    7943:       02 0f 84 1e 01 00       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7949:       00 89 f0 bd 01 00 00    cmpb   $0x0,0x11b(%rbx)
    0.00 :	    7950:       00 c0 e8 04 21 c5       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7956:       e9 6d fe ff ff 0f 1f    movzbl 0x119(%rbx),%ecx
    0.00 :	    795d:       44 00 00                movzbl %cl,%eax
    0.00 :	    7960:       3c 0a 0f                cmp    %r14d,%eax
    0.00 :	    7963:       84 98 03 00 00 3c       je     7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7969:       0b 0f 85 9d fe ff       mov    0x124(%rbx),%edx
    0.00 :	    796f:       ff 83 fd 01 0f          mov    0x8(%r12),%eax
    0.00 :	    7974:       85 47                   bswap  %eax
    0.00 :	    7976:       01 00                   cmp    %eax,%edx
    0.00 :	    7978:       00 80 bb 1b 01 00       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    797e:       00 00 0f                movzbl %cl,%eax
    0.00 :	    7981:       85 3a 01 00 00 0f       mov    $0x2,%r15d
    0.00 :	    7987:       b6 8b 19 01             lea    (%rax,%rax,4),%rax
    0.00 :	    798b:       00 00 0f b6 c1 44 39    mov    %edx,0xf0(%rbx,%rax,4)
    0.00 :	    7992:       f0 0f 84 27 01 00 00    movzbl 0x119(%rbx),%eax
    0.00 :	    7999:       8b 93 24 01 00 00       mov    0x124(%rbx),%edx
    0.00 :	    799f:       41 8b 44 24             lea    (%rax,%rax,4),%rax
    0.00 :	    79a3:       08 0f c8 39 c2 0f 85    mov    %edx,0xf4(%rbx,%rax,4)
    0.00 :	    79aa:       12 01 00 00 0f b6 c1    movzwl 0x128(%rbx),%eax
    0.00 :	    79b1:       41 bf 02                test   %ax,%ax
    0.00 :	    79b4:       00 00 00                movzwl %ax,%edx
    0.00 :	    79b7:       48 8d 04 80 89 94 83    movzbl 0x119(%rbx),%eax
    0.00 :	    79be:       f0 00 00                cmove  %ebp,%edx
    0.00 :	    79c1:       00 0f b6 83             lea    (%rax,%rax,4),%rax
    0.00 :	    79c5:       19 01 00 00 8b 93 24    mov    %edx,0xf8(%rbx,%rax,4)
    0.00 :	    79cc:       01 00 00 48 8d 04 80    movzbl 0x119(%rbx),%eax
    0.00 :	    79d3:       89 94 83 f4 00 00 00    movzbl 0x12a(%rbx),%edx
    0.00 :	    79da:       0f b7 83 28             lea    (%rax,%rax,4),%rax
    0.00 :	    79de:       01 00 00 66 85 c0 0f    mov    %dl,0x100(%rbx,%rax,4)
    0.00 :	    79e5:       b7 d0 0f b6 83 19 01    movzbl 0x119(%rbx),%eax
    0.00 :	    79ec:       00 00 0f 44 d5 48 8d    movzbl 0x12b(%rbx),%edx
    0.00 :	    79f3:       04 80 89 94             lea    (%rax,%rax,4),%rax
    0.00 :	    79f7:       83 f8 00 00 00 0f b6    mov    %dl,0x101(%rbx,%rax,4)
    0.00 :	    79fe:       83 19 01 00 00 0f b6    lea    0x0(,%r13,4),%rax
    0.00 :	    7a05:       93 
    0.00 :	    7a06:       2a 01 00                add    %r13,%rax
    0.00 :	    7a09:       00 48 8d 04 80 88 94    lea    0xf0(%rbx,%rax,4),%rax
    0.00 :	    7a10:       83 
    0.00 :	    7a11:       00 01 00 00 0f b6 83    movq   $0x0,(%rax)
    0.00 :	    7a18:       19 01 00 00 0f b6 93    movq   $0x0,0x8(%rax)
    0.00 :	    7a1f:       2b 
    0.00 :	    7a20:       01 00 00 48 8d 04 80    movl   $0x0,0x10(%rax)
    0.00 :	    7a27:       88 94 83 01 01 00 00    movl   $0x1,0x44(%rsp)
    0.00 :	    7a2e:       4a 
    0.00 :	    7a2f:       8d 04 ad 00 00          jmpq   77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7a34:       00 00 4c 01             nopl   0x0(%rax)
    0.00 :	    7a38:       e8 48 8d 84             test   $0x1,%sil
    0.00 :	    7a3c:       83 f0 00 00 00          mov    $0x2,%ebp
    0.00 :	    7a41:       48 c7 00 00 00 00       jne    7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    7a47:       00 48                   mov    %esi,%eax
    0.00 :	    7a49:       c7 40 08                and    $0x10,%eax
    0.00 :	    7a4c:       00 00                   cmp    $0x1,%al
    0.00 :	    7a4e:       00 00                   sbb    %ebp,%ebp
    0.00 :	    7a50:       c7 40 10                and    $0x2,%ebp
    0.00 :	    7a53:       00 00 00                add    $0x3,%ebp
    0.00 :	    7a56:       00 c7 44 24 44          jmpq   7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    7a5b:       01 00 00 00 e9          nopl   0x0(%rax,%rax,1)
    0.00 :	    7a60:       a9 fd ff                mov    %r15d,%eax
    0.00 :	    7a63:       ff 0f 1f 40 00 40 f6    mov    0x0(,%rax,4),%edx
    0.00 :	    7a6a:       c6 01 bd 02 00 00 00    movzbl 0x115(%rbx),%eax
    0.00 :	    7a71:       0f 85 51 fd ff ff       or     0x101(%rbx),%al
    0.00 :	    7a77:       89 f0                   test   $0x10,%al
    0.00 :	    7a79:       83 e0 10 3c 01 19       jne    7d10 <nf_conntrack_hash_insert+0x7c00>
    0.00 :	    7a7f:       ed 83                   mov    %edx,%ebp
    0.00 :	    7a81:       e5 02 83 c5 03          jmpq   788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7a86:       e9 3d fd ff ff 0f 1f    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7a8d:       44 00 00 
    0.00 :	    7a90:       44 89 f8 8b 14 85 00    mov    %bpl,0x11b(%rbx)
    0.00 :	    7a97:       00 00 00 0f b6 83 15    mov    %r14b,0x119(%rbx)
    0.00 :	    7a9e:       01 00 00 0a 83          mov    0x4(%r12),%eax
    0.00 :	    7aa3:       01 01                   bswap  %eax
    0.00 :	    7aa5:       00 00 a8 10 0f 85       mov    %eax,0x11c(%rbx)
    0.00 :	    7aab:       91 02 00 00 89 d5       movzbl 0xd(%r12),%eax
    0.00 :	    7ab1:       e9 04 fe ff ff          mov    0x4(%r12),%ecx
    0.00 :	    7ab6:       66 2e                   bswap  %ecx
    0.00 :	    7ab8:       0f 1f                   mov    %eax,%edx
    0.00 :	    7aba:       84 00 00                and    $0x1,%eax
    0.00 :	    7abd:       00 00                   shr    %dl
    0.00 :	    7abf:       00 40 88                and    $0x1,%edx
    0.00 :	    7ac2:       ab 1b                   add    %eax,%edx
    0.00 :	    7ac4:       01 00 00 44 88          mov    0x30(%rsp),%rax
    0.00 :	    7ac9:       b3 19 01                add    0x68(%rax),%edx
    0.00 :	    7acc:       00 00 41 8b 44 24       movzbl 0xc(%r12),%eax
    0.00 :	    7ad2:       04 0f c8                shr    $0x4,%al
    0.00 :	    7ad5:       89 83 1c                movzbl %al,%eax
    0.00 :	    7ad8:       01 00 00                shl    $0x2,%eax
    0.00 :	    7adb:       41 0f                   sub    %eax,%edx
    0.00 :	    7add:       b6 44 24 0d             sub    0x2c(%rsp),%edx
    0.00 :	    7ae1:       41 8b                   add    %edx,%ecx
    0.00 :	    7ae3:       4c 24 04 0f c9 89       mov    %ecx,0x124(%rbx)
    0.00 :	    7ae9:       c2 83 e0 01 d0 ea       movzwl 0xe(%r12),%eax
    0.00 :	    7aef:       83 e2 01 01             rol    $0x8,%ax
    0.00 :	    7af3:       c2 48 8b                or     %r14d,%ebp
    0.00 :	    7af6:       44 24 30 03 50 68 41    mov    %ax,0x128(%rbx)
    0.00 :	    7afd:       0f b6 44 24 0c c0       je     7d48 <nf_conntrack_hash_insert+0x7c38>
    0.00 :	    7b03:       e8 04 0f b6 c0          mov    0x48(%rsp),%rdi
    0.00 :	    7b08:       c1 e0 02 29 c2          callq  7b0d <nf_conntrack_hash_insert+0x79fd>
    0.00 :	    7b0d:       2b 54 24 2c 01          mov    0x38(%rsp),%rdx
    0.00 :	    7b12:       d1 89 8b 24 01 00       mov    0x75c(%rdx),%eax
    0.00 :	    7b18:       00 41 0f                cmp    $0x6,%eax
    0.00 :	    7b1b:       b7 44 24 0e 66 c1       je     7de0 <nf_conntrack_hash_insert+0x7cd0>
    0.00 :	    7b21:       c0 08 44 09 f5          cmp    $0xff,%eax
    0.00 :	    7b26:       66 89 83 28 01 00       je     7de0 <nf_conntrack_hash_insert+0x7cd0>
    0.00 :	    7b2c:       00 0f 84 45 02          mov    $0x1,%eax
    0.00 :	    7b31:       00 00 48 8b 7c          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7b36:       24 48 e8 00 00 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7b3d:       48 8b 54 
    0.00 :	    7b40:       24 38 8b 82 5c 07 00    lea    0x0(,%r13,4),%rax
    0.00 :	    7b47:       00 
    0.00 :	    7b48:       83 f8 06                add    %r13,%rax
    0.00 :	    7b4b:       0f 84 bf 02 00 00 3d    orb    $0x4,0x101(%rbx,%rax,4)
    0.00 :	    7b52:       ff 
    0.00 :	    7b53:       00 00 00 0f 84          jmpq   785d <nf_conntrack_hash_insert+0x774d>
    0.00 :	    7b58:       b4 02 00 00 b8 01 00    nopl   0x0(%rax,%rax,1)
    0.00 :	    7b5f:       00 
    0.00 :	    7b60:       00 e9 c7 fd ff          lea    0x70(%rsp),%rbp
    0.00 :	    7b65:       ff 66 2e 0f             mov    0x2c(%rsp),%esi
    0.00 :	    7b69:       1f 84 00 00 00          mov    0x30(%rsp),%rdi
    0.00 :	    7b6e:       00 00 4a 8d 04          mov    $0x14,%ecx
    0.00 :	    7b73:       ad 00 00                mov    %rbp,%rdx
    0.00 :	    7b76:       00 00 4c 01 e8          callq  7b7b <nf_conntrack_hash_insert+0x7a6b>
    0.00 :	    7b7b:       80 8c                   test   %eax,%eax
    0.00 :	    7b7d:       83 01 01 00 00 04       js     7f18 <nf_conntrack_hash_insert+0x7e08>
    0.00 :	    7b83:       e9 05 fd                mov    %rbp,%r12
    0.00 :	    7b86:       ff ff 0f 1f 84          jmpq   774d <nf_conntrack_hash_insert+0x763d>
    0.00 :	    7b8b:       00 00 00 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    7b90:       48 8d 6c 24 70          mov    0x18(%rsp),%rdx
    0.00 :	    7b95:       8b 74 24                mov    (%rdx),%rax
    0.00 :	    7b98:       2c 48                   test   $0x4,%al
    0.00 :	    7b9a:       8b 7c 24 30 b9 14       jne    78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7ba0:       00 00 00 48             mov    0x44(%rsp),%eax
    0.00 :	    7ba4:       89 ea e8                sub    $0x2,%eax
    0.00 :	    7ba7:       00 00 00                cmp    $0x1,%eax
    0.00 :	    7baa:       00 85 c0 0f 88 95       ja     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bb0:       03 00 00 49             cmp    $0x3,%r15d
    0.00 :	    7bb4:       89 ec e9 c2 fb ff       jne    78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bba:       ff 0f 1f 44             lock orb $0x4,(%rdx)
    0.00 :	    7bbe:       00 00 48 8b 54 24 18    mov    0xe8(%rbx),%rax
    0.00 :	    7bc5:       48 8b 02 a8 04 0f 85    cmpq   $0x0,0x738(%rax)
    0.00 :	    7bcc:       3e 
    0.00 :	    7bcd:       fd ff ff 8b 44 24       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bd3:       44 83 e8 02 83 f8 01    mov    0xe0(%rbx),%rdx
    0.00 :	    7bda:       0f 87 2e                test   %rdx,%rdx
    0.00 :	    7bdd:       fd ff ff 41 83 ff       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7be3:       03 0f 85 24             movzbl 0x13(%rdx),%eax
    0.00 :	    7be7:       fd ff                   test   %al,%al
    0.00 :	    7be9:       ff f0 80 0a 04 48       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bef:       8b 83 e8                movzbl %al,%eax
    0.00 :	    7bf2:       00 00 00                add    %rdx,%rax
    0.00 :	    7bf5:       48 83 b8 38 07 00       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bfb:       00 00 0f 84             lock orb $0x10,(%rax)
    0.00 :	    7bff:       0b fd ff ff 48          jmpq   78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7c04:       8b 93 e0 00             nopl   0x0(%rax)
    0.00 :	    7c08:       00 00 48                cmp    $0x4,%ebp
    0.00 :	    7c0b:       85 d2 0f 84 fb fc       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c11:       ff ff 0f                test   %r14d,%r14d
    0.00 :	    7c14:       b6 42 13                sete   %dl
    0.00 :	    7c17:       84 c0 0f                and    $0x1,%edx
    0.00 :	    7c1a:       84 ef fc ff ff 0f b6    lea    0x0(,%rdx,4),%rax
    0.00 :	    7c21:       c0 
    0.00 :	    7c22:       48 01 d0                add    %rdx,%rax
    0.00 :	    7c25:       0f 84 e3 fc             lea    (%rbx,%rax,4),%rdx
    0.00 :	    7c29:       ff ff f0 80 08 10 e9    testb  $0x20,0x101(%rdx)
    0.00 :	    7c30:       da fc ff ff 0f 1f       jne    7ea8 <nf_conntrack_hash_insert+0x7d98>
    0.00 :	    7c36:       40 00 83 fd             lea    0x78(%rbx),%rax
    0.00 :	    7c3a:       04 0f 85 cc fb          mov    %rax,0x18(%rsp)
    0.00 :	    7c3f:       ff ff 45 85             mov    0x78(%rbx),%rax
    0.00 :	    7c43:       f6 0f                   test   $0x2,%al
    0.00 :	    7c45:       94 c2 83 e2 01 48       je     7e20 <nf_conntrack_hash_insert+0x7d10>
    0.00 :	    7c4b:       8d 04 95 00 00 00 00    cmpb   $0x0,0x11b(%rbx)
    0.00 :	    7c52:       48 01 d0 48 8d 14       jne    7e20 <nf_conntrack_hash_insert+0x7d10>
    0.00 :	    7c58:       83 f6 82 01 01          mov    0x8(%r12),%eax
    0.00 :	    7c5d:       00 00                   bswap  %eax
    0.00 :	    7c5f:       20 0f 85 72 02 00       cmp    %eax,0x124(%rbx)
    0.00 :	    7c65:       00 48 8d 43 78 48       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c6b:       89 44 24 18 48          jmpq   7819 <nf_conntrack_hash_insert+0x7709>
    0.00 :	    7c70:       8b 43 78 a8 02          cmpl   $0x6,0x44(%rsp)
    0.00 :	    7c75:       0f 84 d5 01 00 00       jbe    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c7b:       80 bb 1b 01             cmp    $0x1,%r14d
    0.00 :	    7c7f:       00 00 00 0f             lea    (%rdi,%r13,1),%rdx
    0.00 :	    7c83:       85 c8 01                sbb    %rax,%rax
    0.00 :	    7c86:       00 00 41                and    $0x14,%eax
    0.00 :	    7c89:       8b 44 24 08 0f c8 39    movzbl 0x101(%rbx,%rax,1),%eax
    0.00 :	    7c90:       83 
    0.00 :	    7c91:       24 01 00 00 0f 85 72    or     0x101(%rbx,%rdx,4),%al
    0.00 :	    7c98:       fb ff                   test   $0x4,%al
    0.00 :	    7c9a:       ff e9 a9 fb ff ff       je     7e40 <nf_conntrack_hash_insert+0x7d30>
    0.00 :	    7ca0:       83 7c 24 44 06          mov    0x48(%rsp),%rdi
    0.00 :	    7ca5:       0f 86 62 fb ff          callq  7caa <nf_conntrack_hash_insert+0x7b9a>
    0.00 :	    7caa:       ff 41                   xor    %ecx,%ecx
    0.00 :	    7cac:       83 fe                   xor    %edx,%edx
    0.00 :	    7cae:       01 4a                   xor    %esi,%esi
    0.00 :	    7cb0:       8d 14 2f                mov    %rbx,%rdi
    0.00 :	    7cb3:       48 19 c0 83 e0          callq  7cb8 <nf_conntrack_hash_insert+0x7ba8>
    0.00 :	    7cb8:       14 0f                   cmp    $0x1,%al
    0.00 :	    7cba:       b6 84                   sbb    %eax,%eax
    0.00 :	    7cbc:       03 01                   not    %eax
    0.00 :	    7cbe:       01 00 00                and    $0xfffffffc,%eax
    0.00 :	    7cc1:       0a 84 93 01 01          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7cc6:       00 00 a8 04 0f 84 a0    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7ccd:       01 00 00 
    0.00 :	    7cd0:       48 8b 7c 24 48 e8 00    cmpb   $0x0,0x0(%rip)        # 7cd7 <nf_conntrack_hash_insert+0x7bc7>
    0.00 :	    7cd7:       00 00 00 31 c9 31       jne    7f6a <nf_conntrack_hash_insert+0x7e5a>
    0.00 :	    7cdd:       d2 31 f6 48 89          mov    0x48(%rsp),%rdi
    0.00 :	    7ce2:       df e8 00 00 00          callq  7ce7 <nf_conntrack_hash_insert+0x7bd7>
    0.00 :	    7ce7:       00 3c 01 19 c0          mov    0x38(%rsp),%rdx
    0.00 :	    7cec:       f7 d0 83 e0 fc e9       mov    0x75c(%rdx),%eax
    0.00 :	    7cf2:       37 fc ff                cmp    $0x6,%eax
    0.00 :	    7cf5:       ff 66 2e 0f 1f 84       je     7e68 <nf_conntrack_hash_insert+0x7d58>
    0.00 :	    7cfb:       00 00 00 00 00          cmp    $0xff,%eax
    0.00 :	    7d00:       80 3d 00 00 00 00       je     7e68 <nf_conntrack_hash_insert+0x7d58>
    0.00 :	    7d06:       00 0f 85 8d 02          mov    $0xffffffff,%eax
    0.00 :	    7d0b:       00 00 48 8b 7c          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7d10:       24 48 e8 00 00 00       mov    0x0(%rip),%eax        # 7d16 <nf_conntrack_hash_insert+0x7c06>
    0.00 :	    7d16:       00 48                   cmp    %edx,%eax
    0.00 :	    7d18:       8b 54                   mov    %eax,%ebp
    0.00 :	    7d1a:       24 38 8b 82 5c 07       jb     788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7d20:       00 00                   mov    %edx,%ebp
    0.00 :	    7d22:       83 f8 06 0f 84          jmpq   788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7d27:       6d 01 00 00 3d ff 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    7d2e:       00 00 
    0.00 :	    7d30:       0f 84 62                movzbl %al,%eax
    0.00 :	    7d33:       01 00 00                add    %rdx,%rax
    0.00 :	    7d36:       b8 ff ff ff ff e9       je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7d3c:       ed fb ff ff             lock orb $0x20,(%rax)
    0.00 :	    7d40:       8b 05 00 00 00          jmpq   78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7d45:       00 39 d0                nopl   (%rax)
    0.00 :	    7d48:       89 c5 0f 82             mov    0x2c(%rsp),%esi
    0.00 :	    7d4c:       6a fb ff ff 89          mov    0x30(%rsp),%rdi
    0.00 :	    7d51:       d5 e9 63 fb ff          lea    0x50(%rsp),%rcx
    0.00 :	    7d56:       ff 66 0f                mov    %r12,%rdx
    0.00 :	    7d59:       1f 84 00 00 00 00 00    movb   $0x0,0x12a(%rbx)
    0.00 :	    7d60:       0f b6 c0 48 01 d0 0f    movb   $0x0,0x12b(%rbx)
    0.00 :	    7d67:       84 86 fb ff ff f0 80    movq   $0x0,0x50(%rsp)
    0.00 :	    7d6e:       08 20 
    0.00 :	    7d70:       e9 7d fb ff ff 0f 1f    movq   $0x0,0x58(%rsp)
    0.00 :	    7d77:       00 8b 
    0.00 :	    7d79:       74 24 2c 48 8b 7c 24    movl   $0x0,0x60(%rsp)
    0.00 :	    7d80:       30 
    0.00 :	    7d81:       48 8d 4c 24 50          callq  68c0 <nf_conntrack_hash_insert+0x67b0>
    0.00 :	    7d86:       4c 89 e2 c6 83          movzbl 0x61(%rsp),%edx
    0.00 :	    7d8b:       2a 01 00                test   $0x1,%dl
    0.00 :	    7d8e:       00 00                   je     7da2 <nf_conntrack_hash_insert+0x7c92>
    0.00 :	    7d90:       c6 83 2b 01 00          movzbl 0x60(%rsp),%eax
    0.00 :	    7d95:       00 00 48 c7 44 24 50    orb    $0x1,0x12b(%rbx)
    0.00 :	    7d9c:       00 00 00 00 48 c7       mov    %al,0x12a(%rbx)
    0.00 :	    7da2:       44 24 58                and    $0x2,%edx
    0.00 :	    7da5:       00 00 00 00 c7 44       je     7b03 <nf_conntrack_hash_insert+0x79f3>
    0.00 :	    7dab:       24 60 00 00 00 00 e8    orb    $0x2,0x12b(%rbx)
    0.00 :	    7db2:       3a eb ff ff 0f          jmpq   7b03 <nf_conntrack_hash_insert+0x79f3>
    0.00 :	    7db7:       b6 54 24 61 f6 c2 01    nopw   0x0(%rax,%rax,1)
    0.00 :	    7dbe:       74 12 
    0.00 :	    7dc0:       0f b6 44 24 60          mov    0x30(%rsp),%rdx
    0.00 :	    7dc5:       80 8b 2b 01             mov    0x28(%rsp),%esi
    0.00 :	    7dc9:       00 00 01 88 83          mov    $0x1,%ecx
    0.00 :	    7dce:       2a 01 00                mov    %rbx,%rdi
    0.00 :	    7dd1:       00 83 e2 02 0f          callq  7dd6 <nf_conntrack_hash_insert+0x7cc6>
    0.00 :	    7dd6:       84 58 fd ff ff          mov    $0x1,%eax
    0.00 :	    7ddb:       80 8b 2b 01 00          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7de0:       00 02 e9 4c fd          callq  7de5 <nf_conntrack_hash_insert+0x7cd5>
    0.00 :	    7de5:       ff ff                   test   %eax,%eax
    0.00 :	    7de7:       66 0f 1f 84 00 00       je     7b2c <nf_conntrack_hash_insert+0x7a1c>
    0.00 :	    7ded:       00 00 00 48 8b          movzbl 0x27(%rsp),%edi
    0.00 :	    7df2:       54 24 30 8b 74          mov    0x30(%rsp),%rdx
    0.00 :	    7df7:       24 28                   xor    %eax,%eax
    0.00 :	    7df9:       b9 01 00                xor    %r9d,%r9d
    0.00 :	    7dfc:       00 00 48                xor    %r8d,%r8d
    0.00 :	    7dff:       89 df                   xor    %ecx,%ecx
    0.00 :	    7e01:       e8 00                   xor    %esi,%esi
    0.00 :	    7e03:       00 00 00 b8 01 00 00    movq   $0x0,(%rsp)
    0.00 :	    7e0a:       00 
    0.00 :	    7e0b:       e9 1d fb ff ff          callq  7e10 <nf_conntrack_hash_insert+0x7d00>
    0.00 :	    7e10:       e8 00 00 00 00          mov    $0x1,%eax
    0.00 :	    7e15:       85 c0 0f 84 3f          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7e1a:       fd ff ff 0f b6 7c       nopw   0x0(%rax,%rax,1)
    0.00 :	    7e20:       24 27 48 8b             mov    0x78(%rbx),%rax
    0.00 :	    7e24:       54 24                   test   $0x4,%al
    0.00 :	    7e26:       30 31 c0 45 31 c9       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7e2c:       45 31 c0 31 c9 31 f6    cmpb   $0x3,0x11b(%rbx)
    0.00 :	    7e33:       48 c7 04 24 00 00       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7e39:       00 00 e8 00 00          jmpq   7c58 <nf_conntrack_hash_insert+0x7b48>
    0.00 :	    7e3e:       00 00                   xchg   %ax,%ax
    0.00 :	    7e40:       b8 01 00 00 00 e9 e3    movzbl 0x119(%rbx),%eax
    0.00 :	    7e47:       fa ff ff                cmp    %r14d,%eax
    0.00 :	    7e4a:       66 0f 1f 44 00 00       jne    7940 <nf_conntrack_hash_insert+0x7830>
    0.00 :	    7e50:       48 8b 43 78 a8 04 0f    cmpb   $0x4,0x11b(%rbx)
    0.00 :	    7e57:       85 b1 f9 ff ff 80       jne    7940 <nf_conntrack_hash_insert+0x7830>
    0.00 :	    7e5d:       bb 1b 01 00 00          jmpq   7ca0 <nf_conntrack_hash_insert+0x7b90>
    0.00 :	    7e62:       03 0f 85 a4 f9 ff       nopw   0x0(%rax,%rax,1)
    0.00 :	    7e68:       ff e9 1a fe ff          callq  7e6d <nf_conntrack_hash_insert+0x7d5d>
    0.00 :	    7e6d:       ff 66                   test   %eax,%eax
    0.00 :	    7e6f:       90                      nop
    0.00 :	    7e70:       0f b6 83 19 01 00       je     7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7e76:       00 44 39 f0 0f          movzbl 0x27(%rsp),%edi
    0.00 :	    7e7b:       85 f0 fa ff ff 80 bb    movq   $0x0,(%rsp)
    0.00 :	    7e82:       1b 
    0.00 :	    7e83:       01 00 00 04 0f          mov    0x30(%rsp),%rdx
    0.00 :	    7e88:       85 e3                   xor    %eax,%eax
    0.00 :	    7e8a:       fa ff ff                xor    %r9d,%r9d
    0.00 :	    7e8d:       e9 3e fe                xor    %r8d,%r8d
    0.00 :	    7e90:       ff ff                   xor    %ecx,%ecx
    0.00 :	    7e92:       66 0f                   xor    %esi,%esi
    0.00 :	    7e94:       1f 44 00 00 e8          callq  7e99 <nf_conntrack_hash_insert+0x7d89>
    0.00 :	    7e99:       00 00 00 00 85          mov    $0xffffffff,%eax
    0.00 :	    7e9e:       c0 90 0f 84 90          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7ea3:       fe ff ff 0f b6          nopl   0x0(%rax,%rax,1)
    0.00 :	    7ea8:       7c 24 27 48 c7          mov    0x4(%r12),%eax
    0.00 :	    7ead:       04 24                   bswap  %eax
    0.00 :	    7eaf:       00 00 00 00 48 8b       cmp    0xfc(%rdx),%eax
    0.00 :	    7eb5:       54 24 30 31 c0 45       jns    7c36 <nf_conntrack_hash_insert+0x7b26>
    0.00 :	    7ebb:       31 c9 45 31 c0          mov    0x48(%rsp),%rdi
    0.00 :	    7ec0:       31 c9 31 f6 e8          callq  7ec5 <nf_conntrack_hash_insert+0x7db5>
    0.00 :	    7ec5:       00 00 00 00 b8          mov    0x38(%rsp),%rdx
    0.00 :	    7eca:       ff ff ff ff e9 5a       mov    0x75c(%rdx),%eax
    0.00 :	    7ed0:       fa ff ff                cmp    $0x6,%eax
    0.00 :	    7ed3:       0f 1f                   je     7ee0 <nf_conntrack_hash_insert+0x7dd0>
    0.00 :	    7ed5:       44 00 00 41 8b          cmp    $0xff,%eax
    0.00 :	    7eda:       44 24 04 0f c8 3b       jne    7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7ee0:       82 fc 00 00 00          callq  7ee5 <nf_conntrack_hash_insert+0x7dd5>
    0.00 :	    7ee5:       0f 89                   test   %eax,%eax
    0.00 :	    7ee7:       7b fd ff ff 48 8b       je     7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7eed:       7c 24 48 e8 00          movzbl 0x27(%rsp),%edi
    0.00 :	    7ef2:       00 00 00 48 8b 54 24    movq   $0x0,(%rsp)
    0.00 :	    7ef9:       38 
    0.00 :	    7efa:       8b 82                   jmp    7e83 <nf_conntrack_hash_insert+0x7d73>
    0.00 :	    7efc:       5c 07 00 00             nopl   0x0(%rax)
    0.00 :	    7f00:       83 f8 06 74 0b          mov    0x48(%rsp),%rdi
    0.00 :	    7f05:       3d ff 00 00 00          callq  7f0a <nf_conntrack_hash_insert+0x7dfa>
    0.00 :	    7f0a:       0f 85 26 fe ff          mov    $0xffffffff,%eax
    0.00 :	    7f0f:       ff e8 00 00 00          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7f14:       00 85 c0 0f             nopl   0x0(%rax)
    0.00 :	    7f18:       84 19                   ud2    
    0.00 :	    7f1a:       fe ff                   jmp    7f1a <nf_conntrack_hash_insert+0x7e0a>
    0.00 :	    7f1c:       ff 0f b6 7c 24 27       movzbl 0xd(%r12),%r8d
    0.00 :	    7f22:       48 c7 04 24 00 00 00    mov    $0x0,%rsi
    0.00 :	    7f29:       00 eb 87 0f 1f 40 00    mov    $0x0,%rdi
    0.00 :	    7f30:       48 8b 7c 24 48          mov    %r15d,0x8(%rsp)
    0.00 :	    7f35:       e8 00 00                mov    %r8d,%eax
    0.00 :	    7f38:       00 00 b8                mov    %r8d,%ecx
    0.00 :	    7f3b:       ff ff ff                mov    %r8d,%edx
    0.00 :	    7f3e:       ff e9 e9                shr    $0x2,%al
    0.00 :	    7f41:       f9 ff ff                shr    $0x4,%cl
    0.00 :	    7f44:       0f 1f                   shr    %dl
    0.00 :	    7f46:       40 00 0f                mov    %eax,%r9d
    0.00 :	    7f49:       0b eb fe 45             mov    0x44(%rsp),%eax
    0.00 :	    7f4d:       0f b6 44                and    $0x1,%ecx
    0.00 :	    7f50:       24 0d 48                and    $0x1,%edx
    0.00 :	    7f53:       c7 c6 00 00             and    $0x1,%r9d
    0.00 :	    7f57:       00 00 48 c7             and    $0x1,%r8d
    0.00 :	    7f5b:       c7 00 00                mov    %eax,(%rsp)
    0.00 :	    7f5e:       00 00                   xor    %eax,%eax
    0.00 :	    7f60:       44 89 7c 24 08          callq  7f65 <nf_conntrack_hash_insert+0x7e55>
    0.00 :	    7f65:       44 89 c0 44 89          jmpq   7841 <nf_conntrack_hash_insert+0x7731>
    0.00 :	    7f6a:       c1 44 89                test   %r8b,%r8b
    0.00 :	    7f6d:       c2 c0 e8 02 c0          mov    $0x4,%ecx
    0.00 :	    7f72:       e9 04                   jne    7f83 <nf_conntrack_hash_insert+0x7e73>
    0.00 :	    7f74:       d0 ea 41 89             test   $0x2,%sil
    0.00 :	    7f78:       c1 8b                   je     7fbf <nf_conntrack_hash_insert+0x7eaf>
    0.00 :	    7f7a:       44 24 44 83             shr    $0x4,%sil
    0.00 :	    7f7e:       e1 01                   mov    %esi,%ecx
    0.00 :	    7f80:       83 e2 01                and    $0x1,%ecx
    0.00 :	    7f83:       41 83 e1 01 41          mov    0x44(%rsp),%r8d
    0.00 :	    7f88:       83 e0 01                mov    %r14d,%edx
    0.00 :	    7f8b:       89 04 24 31 c0 e8 00    mov    $0x0,%rsi
    0.00 :	    7f92:       00 00 00 e9 d7 f8 ff    mov    $0x0,%rdi
    0.00 :	    7f99:       ff 45                   xor    %eax,%eax
    0.00 :	    7f9b:       84 c0 b9 04 00          callq  7fa0 <nf_conntrack_hash_insert+0x7e90>
    0.00 :	    7fa0:       00 00 75 0f 40          jmpq   7cdd <nf_conntrack_hash_insert+0x7bcd>
    0.00 :	    7fa5:       f6 c6 02 74 45 40 c0    mov    $0x0,%rsi
    0.00 :	    7fac:       ee 04 89 f1 83 e1 01    mov    $0x0,%rdi
    0.00 :	    7fb3:       44 8b                   xor    %eax,%eax
    0.00 :	    7fb5:       44 24 44 44 89          callq  7fba <nf_conntrack_hash_insert+0x7eaa>
    0.00 :	    7fba:       f2 48 c7 c6 00          jmpq   7834 <nf_conntrack_hash_insert+0x7724>
    0.00 :	    7fbf:       00 00 00 48             test   $0x1,%sil
    0.00 :	    7fc3:       c7 c7 00 00 00          mov    $0x2,%ecx
    0.00 :	    7fc8:       00 31                   jne    7f83 <nf_conntrack_hash_insert+0x7e73>
    0.00 :	    7fca:       c0 e8 00                and    $0x10,%esi
    0.00 :	    7fcd:       00 00 00 e9             cmp    $0x1,%sil
    0.00 :	    7fd1:       38 fd                   sbb    %ecx,%ecx
    0.00 :	    7fd3:       ff ff 48                and    $0x2,%ecx
    0.00 :	    7fd6:       c7 c6 00                add    $0x3,%ecx
    0.00 :	    7fd9:       00 00                   jmp    7f83 <nf_conntrack_hash_insert+0x7e73>
         :	    7fdb:       00 48 c7 c7 00          nopl   0x0(%rax,%rax,1)
         :	    7fe0:       00 00 00 31             movzwl 0x24(%rsi),%eax
         :	    7fe4:       c0 e8 00 00             mov    %ax,0x10(%rdi)
         :	    7fe8:       00 00 e9 75             movzwl 0x10(%rsi),%eax
         :	    7fec:       f8 ff ff 40             mov    %ax,0x24(%rdi)
         :	    7ff0:       f6 c6 01 b9 02          mov    $0x1,%eax
         :	    7ff5:       00                      retq   
         :	    7ff6:       00 00 75 b9 83 e6 10    nopw   %cs:0x0(%rax,%rax,1)
         :	    7ffd:       40 80 fe 
         :	    8000:       01 19 c9 83 e1          mov    $0x1,%eax
         :	    8005:       02                      retq   
         :	    8006:       83 c1 03 eb a8 0f 1f    nopw   %cs:0x0(%rax,%rax,1)
         :	    800d:       44 00 00 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_nat.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_nat.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000550 <nf_nat_local_fn>:
 ??:0
  100.00 :	 550:   48 83 ec 18             sub    $0x18,%rsp
    0.00 :	 584:   48 89                   ja     5a0 <nf_nat_rule_cleanup+0x570>
    0.00 :	 586:   5c 24 08 48 89          mov    $0x1,%ebp
    0.00 :	 58b:   f3 48                   mov    %ebp,%eax
    0.00 :	 58d:   89 6c 24 10 83          mov    0x8(%rsp),%rbx
    0.00 :	 592:   7b 68 13 48 89          mov    0x10(%rsp),%rbp
    0.00 :	 597:   d6 76 1c 8b             add    $0x18,%rsp
    0.00 :	 59b:   93                      retq   
    0.00 :	 59c:   c4 00 00 00             nopl   0x0(%rax)
    0.00 :	 5a0:   48 8b 83                mov    %rsi,%rdx
    0.00 :	 5a3:   d8 00 00                mov    %rbx,%rsi
    0.00 :	 5a6:   00 0f b6 04 10          callq  320 <nf_nat_rule_cleanup+0x2f0>
    0.00 :	 5ab:   83 e0                   test   %eax,%eax
    0.00 :	 5ad:   0f c1                   mov    %eax,%ebp
    0.00 :	 5af:   e0 02                   je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 5b1:   83 f8 13                cmp    $0x2,%eax
    0.00 :	 5b4:   77 1a                   je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 5b6:   bd 01 00 00             movzbl 0x7c(%rbx),%eax
    0.00 :	 5ba:   00 89 e8 48 8b 5c 24    mov    0x88(%rbx),%rsi
    0.00 :	 5c1:   08 48 8b                shr    $0x5,%al
    0.00 :	 5c4:   6c 24 10                test   %rsi,%rsi
    0.00 :	 5c7:   48 83                   je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 5c9:   c4 18 c3                movzbl %al,%eax
    0.00 :	 5cc:   0f 1f 40                cmp    $0x2,%eax
    0.00 :	 5cf:   00 48 89                seta   %al
    0.00 :	 5d2:   f2 48 89                movzbl %al,%eax
    0.00 :	 5d5:   de e8                   test   %eax,%eax
    0.00 :	 5d7:   75 fd                   mov    %eax,%eax
    0.00 :	 5d9:   ff ff 85 c0 89 c5 74    lea    0x0(,%rax,8),%rcx
    0.00 :	 5e0:   da 
    0.00 :	 5e1:   83 f8 02                sete   %dl
    0.00 :	 5e4:   74 d5 0f b6             shl    $0x6,%rax
    0.00 :	 5e8:   43 7c 48                and    $0x1,%edx
    0.00 :	 5eb:   8b b3 88                sub    %rcx,%rax
    0.00 :	 5ee:   00 00 00 c0             lea    (%rsi,%rax,1),%rcx
    0.00 :	 5f2:   e8 05 48 85 f6 74 c2    lea    0x0(,%rdx,8),%rax
    0.00 :	 5f9:   0f 
    0.00 :	 5fa:   b6 c0 83 f8             shl    $0x6,%rdx
    0.00 :	 5fe:   02 0f 97                sub    %rax,%rdx
    0.00 :	 601:   c0 0f b6                mov    0x2c(%rcx),%eax
    0.00 :	 604:   c0 85 c0 89             lea    (%rsi,%rdx,1),%rdx
    0.00 :	 608:   c0 48 8d                cmp    0x18(%rdx),%eax
    0.00 :	 60b:   0c c5                   jne    640 <nf_nat_rule_cleanup+0x610>
    0.00 :	 60d:   00 00 00 00             lea    0x30(%rcx),%rax
    0.00 :	 611:   0f 94 c2 48             cmpb   $0x1,0xe(%rax)
    0.00 :	 615:   c1 e0 06 83 e2 01       je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 61b:   48 29 c8 48             movzwl 0xc(%rax),%eax
    0.00 :	 61f:   8d 0c 06 48             cmp    0x28(%rdx),%ax
    0.00 :	 623:   8d 04 d5 00 00 00       je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 629:   00 48 c1                mov    %rbx,%rdi
    0.00 :	 62c:   e2 06 48 29 c2          callq  631 <nf_nat_rule_cleanup+0x601>
    0.00 :	 631:   8b 41                   test   %eax,%eax
    0.00 :	 633:   2c 48 8d 14 16 3b       je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 639:   42 18                   xor    %ebp,%ebp
    0.00 :	 63b:   75 33 48 8d 41          jmpq   58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 640:   30 80                   xor    %esi,%esi
    0.00 :	 642:   78 0e 01                mov    %rbx,%rdi
    0.00 :	 645:   0f 84 70 ff ff          callq  64a <nf_nat_rule_cleanup+0x61a>
    0.00 :	 64a:   ff 0f                   test   %eax,%eax
    0.00 :	 64c:   b7 40 0c 66 3b 42       je     58b <nf_nat_rule_cleanup+0x55b>
    0.00 :	 652:   28 0f                   xor    %ebp,%ebp
    0.00 :	 654:   84 62 ff ff ff          jmpq   58b <nf_nat_rule_cleanup+0x55b>
         :	 659:   48 89 df e8 00 00 00    nopl   0x0(%rax)
         :	 660:   00 85 c0 0f             sub    $0x18,%rsp
         :	 664:   84 52 ff ff ff          mov    %rbx,0x8(%rsp)
         :	 669:   31 ed e9                mov    %rsi,%rbx
         :	 66c:   4b ff ff ff 31          mov    %rbp,0x10(%rsp)
         :	 671:   f6 48 89 df             cmpl   $0x13,0x68(%rbx)
         :	 675:   e8 00 00                mov    %rdx,%rsi
         :	 678:   00 00                   jbe    696 <nf_nat_rule_cleanup+0x666>
         :	 67a:   85 c0 0f 84 39 ff       mov    0xc4(%rbx),%edx
         :	 680:   ff ff 31 ed e9 32 ff    mov    0xd8(%rbx),%rax
         :	 687:   ff ff 0f 1f             movzbl (%rax,%rdx,1),%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib64/ld-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/ld-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000060a0 <_dl_map_object_from_fd>:
    0.00 :	    60a0:       55                      push   %rbp
    0.00 :	    60a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	    60a4:       41 57                   push   %r15
    0.00 :	    60a6:       45 89 cf                mov    %r9d,%r15d
    0.00 :	    60a9:       41 56                   push   %r14
    0.00 :	    60ab:       4d 89 c6                mov    %r8,%r14
    0.00 :	    60ae:       41 55                   push   %r13
    0.00 :	    60b0:       41 54                   push   %r12
    0.00 :	    60b2:       49 89 d4                mov    %rdx,%r12
    0.00 :	    60b5:       53                      push   %rbx
    0.00 :	    60b6:       48 81 ec 68 01 00 00    sub    $0x168,%rsp
    0.00 :	    60bd:       89 b5 d4 fe ff ff       mov    %esi,-0x12c(%rbp)
    0.00 :	    60c3:       48 8b 75 20             mov    0x20(%rbp),%rsi
    0.00 :	    60c7:       48 89 bd d8 fe ff ff    mov    %rdi,-0x128(%rbp)
    0.00 :	    60ce:       31 ff                   xor    %edi,%edi
    0.00 :	    60d0:       48 89 8d c8 fe ff ff    mov    %rcx,-0x138(%rbp)
    0.00 :	    60d7:       e8 84 89 00 00          callq  ea60 <_dl_debug_initialize>
    0.00 :	    60dc:       8b b5 d4 fe ff ff       mov    -0x12c(%rbp),%esi
    0.00 :	    60e2:       48 8d 95 40 ff ff ff    lea    -0xc0(%rbp),%rdx
    0.00 :	    60e9:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	    60ee:       48 89 85 00 ff ff ff    mov    %rax,-0x100(%rbp)
    0.00 :	    60f5:       e8 06 fe 00 00          callq  15f00 <__GI___fxstat>
    0.00 :	    60fa:       85 c0                   test   %eax,%eax
    0.00 :	    60fc:       0f 88 1b 0f 00 00       js     701d <_dl_map_object_from_fd+0xf7d>
    0.00 :	    6102:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	    6106:       48 8d 0d 53 8f 21 00    lea    0x218f53(%rip),%rcx        # 21f060 <_rtld_global>
    0.00 :	    610d:       48 8d 04 d2             lea    (%rdx,%rdx,8),%rax
    0.00 :	    6111:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6115:       4c 8b 2c 01             mov    (%rcx,%rax,1),%r13
    0.00 :	    6119:       4d 85 ed                test   %r13,%r13
    0.00 :	    611c:       74 72                   je     6190 <_dl_map_object_from_fd+0xf0>
    0.00 :	    611e:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	    6125:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	    612c:       eb 0b                   jmp    6139 <_dl_map_object_from_fd+0x99>
    0.00 :	    612e:       66 90                   xchg   %ax,%ax
    0.00 :	    6130:       4d 8b 6d 18             mov    0x18(%r13),%r13
    0.00 :	    6134:       4d 85 ed                test   %r13,%r13
    0.00 :	    6137:       74 57                   je     6190 <_dl_map_object_from_fd+0xf0>
    0.00 :	    6139:       41 f6 85 15 03 00 00    testb  $0x20,0x315(%r13)
    0.00 :	    6140:       20 
    0.00 :	    6141:       75 ed                   jne    6130 <_dl_map_object_from_fd+0x90>
    0.00 :	    6143:       49 39 85 a0 03 00 00    cmp    %rax,0x3a0(%r13)
    0.00 :	    614a:       75 e4                   jne    6130 <_dl_map_object_from_fd+0x90>
    0.00 :	    614c:       49 39 95 98 03 00 00    cmp    %rdx,0x398(%r13)
    0.00 :	    6153:       75 db                   jne    6130 <_dl_map_object_from_fd+0x90>
    0.00 :	    6155:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    615b:       e8 20 fe 00 00          callq  15f80 <__close>
    0.00 :	    6160:       48 8b bd c8 fe ff ff    mov    -0x138(%rbp),%rdi
    0.00 :	    6167:       e8 84 a9 ff ff          callq  af0 <free@plt>
    0.00 :	    616c:       48 8b b5 d8 fe ff ff    mov    -0x128(%rbp),%rsi
    0.00 :	    6173:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    6176:       e8 b5 f1 ff ff          callq  5330 <add_name_to_object>
    0.00 :	    617b:       48 8d 65 d8             lea    -0x28(%rbp),%rsp
    0.00 :	    617f:       4c 89 e8                mov    %r13,%rax
    0.00 :	    6182:       5b                      pop    %rbx
    0.00 :	    6183:       41 5c                   pop    %r12
    0.00 :	    6185:       41 5d                   pop    %r13
    0.00 :	    6187:       41 5e                   pop    %r14
    0.00 :	    6189:       41 5f                   pop    %r15
    0.00 :	    618b:       c9                      leaveq 
    0.00 :	    618c:       c3                      retq   
    0.00 :	    618d:       0f 1f 00                nopl   (%rax)
    0.00 :	    6190:       48 83 7d 20 00          cmpq   $0x0,0x20(%rbp)
    0.00 :	    6195:       0f 85 e5 0d 00 00       jne    6f80 <_dl_map_object_from_fd+0xee0>
    0.00 :	    619b:       f6 45 10 04             testb  $0x4,0x10(%rbp)
    0.00 :	    619f:       0f 85 5f 0c 00 00       jne    6e04 <_dl_map_object_from_fd+0xd64>
    0.00 :	    61a5:       f6 05 74 8a 21 00 40    testb  $0x40,0x218a74(%rip)        # 21ec20 <_rtld_global_ro>
    0.00 :	    61ac:       0f 85 81 0e 00 00       jne    7033 <_dl_map_object_from_fd+0xf93>
    0.00 :	    61b2:       48 8b 95 00 ff ff ff    mov    -0x100(%rbp),%rdx
    0.00 :	    61b9:       8b 42 18                mov    0x18(%rdx),%eax
    0.00 :	    61bc:       85 c0                   test   %eax,%eax
    0.00 :	    61be:       0f 84 14 02 00 00       je     63d8 <_dl_map_object_from_fd+0x338>
    0.00 :	    61c4:       83 e8 01                sub    $0x1,%eax
    0.00 :	    61c7:       c6 85 0f ff ff ff 00    movb   $0x0,-0xf1(%rbp)
    0.00 :	    61ce:       0f 85 67 0f 00 00       jne    713b <_dl_map_object_from_fd+0x109b>
    0.00 :	    61d4:       4c 8b 4d 20             mov    0x20(%rbp),%r9
    0.00 :	    61d8:       44 8b 45 10             mov    0x10(%rbp),%r8d
    0.00 :	    61dc:       44 89 fa                mov    %r15d,%edx
    0.00 :	    61df:       48 8b b5 d8 fe ff ff    mov    -0x128(%rbp),%rsi
    0.00 :	    61e6:       48 8b bd c8 fe ff ff    mov    -0x138(%rbp),%rdi
    0.00 :	    61ed:       4c 89 f1                mov    %r14,%rcx
    0.00 :	    61f0:       e8 7b 48 00 00          callq  aa70 <_dl_new_object>
    0.00 :	    61f5:       48 85 c0                test   %rax,%rax
    0.00 :	    61f8:       49 89 c5                mov    %rax,%r13
    0.00 :	    61fb:       48 8d 15 5e 50 01 00    lea    0x1505e(%rip),%rdx        # 1b260 <__PRETTY_FUNCTION__.3644+0xeef>
    0.00 :	    6202:       0f 84 24 05 00 00       je     672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    6208:       49 8d 7c 24 08          lea    0x8(%r12),%rdi
    0.00 :	    620d:       48 89 bd e0 fe ff ff    mov    %rdi,-0x120(%rbp)
    0.00 :	    6214:       48 8b 47 18             mov    0x18(%rdi),%rax
    0.00 :	    6218:       49 89 85 a8 02 00 00    mov    %rax,0x2a8(%r13)
    0.00 :	    621f:       0f b7 47 10             movzwl 0x10(%rdi),%eax
    0.00 :	    6223:       66 89 85 ee fe ff ff    mov    %ax,-0x112(%rbp)
    0.00 :	    622a:       0f b7 47 38             movzwl 0x38(%rdi),%eax
    0.00 :	    622e:       66 41 89 85 b0 02 00    mov    %ax,0x2b0(%r13)
    0.00 :	    6235:       00 
    0.00 :	    6236:       0f b7 47 38             movzwl 0x38(%rdi),%eax
    0.00 :	    623a:       48 8b 4f 20             mov    0x20(%rdi),%rcx
    0.00 :	    623e:       48 8d 14 c5 00 00 00    lea    0x0(,%rax,8),%rdx
    0.00 :	    6245:       00 
    0.00 :	    6246:       48 89 c3                mov    %rax,%rbx
    0.00 :	    6249:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	    624d:       48 29 d3                sub    %rdx,%rbx
    0.00 :	    6250:       48 8d 04 0b             lea    (%rbx,%rcx,1),%rax
    0.00 :	    6254:       49 3b 04 24             cmp    (%r12),%rax
    0.00 :	    6258:       0f 87 0f 05 00 00       ja     676d <_dl_map_object_from_fd+0x6cd>
    0.00 :	    625e:       49 89 fa                mov    %rdi,%r10
    0.00 :	    6261:       49 01 ca                add    %rcx,%r10
    0.00 :	    6264:       48 89 a5 f0 fe ff ff    mov    %rsp,-0x110(%rbp)
    0.00 :	    626b:       41 0f b7 8d b0 02 00    movzwl 0x2b0(%r13),%ecx
    0.00 :	    6272:       00 
    0.00 :	    6273:       48 8d 04 49             lea    (%rcx,%rcx,2),%rax
    0.00 :	    6277:       48 8d 14 cd 00 00 00    lea    0x0(,%rcx,8),%rdx
    0.00 :	    627e:       00 
    0.00 :	    627f:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6283:       48 83 c0 1e             add    $0x1e,%rax
    0.00 :	    6287:       25 f0 ff ff 00          and    $0xfffff0,%eax
    0.00 :	    628c:       48 29 c4                sub    %rax,%rsp
    0.00 :	    628f:       48 89 c8                mov    %rcx,%rax
    0.00 :	    6292:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	    6296:       4c 8d 7c 24 47          lea    0x47(%rsp),%r15
    0.00 :	    629b:       48 29 d0                sub    %rdx,%rax
    0.00 :	    629e:       49 8d 04 02             lea    (%r10,%rax,1),%rax
    0.00 :	    62a2:       49 83 e7 f0             and    $0xfffffffffffffff0,%r15
    0.00 :	    62a6:       49 39 c2                cmp    %rax,%r10
    0.00 :	    62a9:       0f 83 7d 0e 00 00       jae    712c <_dl_map_object_from_fd+0x108c>
 ??:0
  100.00 :	    62af:       8b 55 10                mov    0x10(%rbp),%edx
    0.00 :	    62b2:       4c 89 d3                mov    %r10,%rbx
    0.00 :	    62b5:       48 c7 85 10 ff ff ff    movq   $0x7,-0xf0(%rbp)
    0.00 :	    62bc:       07 00 00 00 
    0.00 :	    62c0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	    62c3:       c6 85 20 ff ff ff 00    movb   $0x0,-0xe0(%rbp)
    0.00 :	    62ca:       81 e2 00 00 00 08       and    $0x8000000,%edx
    0.00 :	    62d0:       89 95 c4 fe ff ff       mov    %edx,-0x13c(%rbp)
    0.00 :	    62d6:       eb 43                   jmp    631b <_dl_map_object_from_fd+0x27b>
    0.00 :	    62d8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	    62df:       00 
    0.00 :	    62e0:       83 f8 01                cmp    $0x1,%eax
    0.00 :	    62e3:       0f 84 57 01 00 00       je     6440 <_dl_map_object_from_fd+0x3a0>
    0.00 :	    62e9:       83 f8 02                cmp    $0x2,%eax
    0.00 :	    62ec:       0f 84 2e 01 00 00       je     6420 <_dl_map_object_from_fd+0x380>
    0.00 :	    62f2:       4d 89 e6                mov    %r12,%r14
    0.00 :	    62f5:       48 8d 14 cd 00 00 00    lea    0x0(,%rcx,8),%rdx
    0.00 :	    62fc:       00 
    0.00 :	    62fd:       48 89 c8                mov    %rcx,%rax
    0.00 :	    6300:       48 83 c3 38             add    $0x38,%rbx
    0.00 :	    6304:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	    6308:       48 29 d0                sub    %rdx,%rax
    0.00 :	    630b:       49 8d 04 02             lea    (%r10,%rax,1),%rax
    0.00 :	    630f:       48 39 c3                cmp    %rax,%rbx
    0.00 :	    6312:       0f 83 68 02 00 00       jae    6580 <_dl_map_object_from_fd+0x4e0>
    0.00 :	    6318:       4d 89 f4                mov    %r14,%r12
    0.00 :	    631b:       8b 03                   mov    (%rbx),%eax
    0.00 :	    631d:       83 f8 06                cmp    $0x6,%eax
    0.00 :	    6320:       0f 84 e2 00 00 00       je     6408 <_dl_map_object_from_fd+0x368>
    0.00 :	    6326:       76 b8                   jbe    62e0 <_dl_map_object_from_fd+0x240>
    0.00 :	    6328:       3d 51 e5 74 64          cmp    $0x6474e551,%eax
    0.00 :	    632d:       0f 1f 00                nopl   (%rax)
    0.00 :	    6330:       0f 84 1a 02 00 00       je     6550 <_dl_map_object_from_fd+0x4b0>
    0.00 :	    6336:       3d 52 e5 74 64          cmp    $0x6474e552,%eax
    0.00 :	    633b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    6340:       0f 84 ea 01 00 00       je     6530 <_dl_map_object_from_fd+0x490>
    0.00 :	    6346:       83 f8 07                cmp    $0x7,%eax
    0.00 :	    6349:       75 a7                   jne    62f2 <_dl_map_object_from_fd+0x252>
    0.00 :	    634b:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	    634f:       48 85 c0                test   %rax,%rax
    0.00 :	    6352:       74 9e                   je     62f2 <_dl_map_object_from_fd+0x252>
    0.00 :	    6354:       49 89 85 30 04 00 00    mov    %rax,0x430(%r13)
    0.00 :	    635b:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	    635f:       49 89 85 38 04 00 00    mov    %rax,0x438(%r13)
    0.00 :	    6366:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	    636a:       48 85 c0                test   %rax,%rax
    0.00 :	    636d:       0f 85 f5 01 00 00       jne    6568 <_dl_map_object_from_fd+0x4c8>
    0.00 :	    6373:       49 c7 85 40 04 00 00    movq   $0x0,0x440(%r13)
    0.00 :	    637a:       00 00 00 00 
    0.00 :	    637e:       48 8b 43 20             mov    0x20(%rbx),%rax
    0.00 :	    6382:       49 89 85 28 04 00 00    mov    %rax,0x428(%r13)
    0.00 :	    6389:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    638d:       49 89 85 20 04 00 00    mov    %rax,0x420(%r13)
    0.00 :	    6394:       41 0f b6 85 14 03 00    movzbl 0x314(%r13),%eax
    0.00 :	    639b:       00 
    0.00 :	    639c:       83 e0 03                and    $0x3,%eax
    0.00 :	    639f:       2c 01                   sub    $0x1,%al
    0.00 :	    63a1:       0f 85 0d 0b 00 00       jne    6eb4 <_dl_map_object_from_fd+0xe14>
    0.00 :	    63a7:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    63ae:       4d 89 e6                mov    %r12,%r14
    0.00 :	    63b1:       e8 2a a6 00 00          callq  109e0 <_dl_next_tls_modid>
    0.00 :	    63b6:       41 0f b7 8d b0 02 00    movzwl 0x2b0(%r13),%ecx
    0.00 :	    63bd:       00 
    0.00 :	    63be:       49 89 85 50 04 00 00    mov    %rax,0x450(%r13)
    0.00 :	    63c5:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    63cc:       e9 24 ff ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    63d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    63d8:       f7 45 10 00 00 00 08    testl  $0x8000000,0x10(%rbp)
    0.00 :	    63df:       0f 84 ac 08 00 00       je     6c91 <_dl_map_object_from_fd+0xbf1>
    0.00 :	    63e5:       48 8b b5 00 ff ff ff    mov    -0x100(%rbp),%rsi
    0.00 :	    63ec:       c7 46 18 01 00 00 00    movl   $0x1,0x18(%rsi)
    0.00 :	    63f3:       e8 f8 86 00 00          callq  eaf0 <_dl_debug_state>
    0.00 :	    63f8:       c6 85 0f ff ff ff 01    movb   $0x1,-0xf1(%rbp)
    0.00 :	    63ff:       e9 d0 fd ff ff          jmpq   61d4 <_dl_map_object_from_fd+0x134>
    0.00 :	    6404:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    6408:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    640c:       4d 89 e6                mov    %r12,%r14
    0.00 :	    640f:       49 89 85 a0 02 00 00    mov    %rax,0x2a0(%r13)
    0.00 :	    6416:       e9 da fe ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    641b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    6420:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    6424:       4d 89 e6                mov    %r12,%r14
    0.00 :	    6427:       49 89 45 10             mov    %rax,0x10(%r13)
    0.00 :	    642b:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	    642f:       48 c1 e8 04             shr    $0x4,%rax
    0.00 :	    6433:       66 41 89 85 b2 02 00    mov    %ax,0x2b2(%r13)
    0.00 :	    643a:       00 
    0.00 :	    643b:       e9 b5 fe ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    6440:       48 8b 35 f1 87 21 00    mov    0x2187f1(%rip),%rsi        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    6447:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	    644b:       48 8d 46 ff             lea    -0x1(%rsi),%rax
    0.00 :	    644f:       48 85 d0                test   %rdx,%rax
    0.00 :	    6452:       0f 85 8a 09 00 00       jne    6de2 <_dl_map_object_from_fd+0xd42>
    0.00 :	    6458:       4c 8b 43 10             mov    0x10(%rbx),%r8
    0.00 :	    645c:       48 83 ea 01             sub    $0x1,%rdx
    0.00 :	    6460:       4c 89 c0                mov    %r8,%rax
    0.00 :	    6463:       48 2b 43 08             sub    0x8(%rbx),%rax
    0.00 :	    6467:       48 85 c2                test   %rax,%rdx
    0.00 :	    646a:       0f 85 88 09 00 00       jne    6df8 <_dl_map_object_from_fd+0xd58>
    0.00 :	    6470:       4b 8d 0c 64             lea    (%r12,%r12,2),%rcx
    0.00 :	    6474:       48 f7 de                neg    %rsi
    0.00 :	    6477:       4d 8d 74 24 01          lea    0x1(%r12),%r14
    0.00 :	    647c:       4c 21 c6                and    %r8,%rsi
    0.00 :	    647f:       48 89 cf                mov    %rcx,%rdi
    0.00 :	    6482:       48 83 c1 01             add    $0x1,%rcx
    0.00 :	    6486:       48 c1 e7 04             shl    $0x4,%rdi
    0.00 :	    648a:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	    648e:       4a 89 34 3f             mov    %rsi,(%rdi,%r15,1)
    0.00 :	    6492:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    6496:       49 8d 34 3f             lea    (%r15,%rdi,1),%rsi
    0.00 :	    649a:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	    649e:       48 8b 15 93 87 21 00    mov    0x218793(%rip),%rdx        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    64a5:       48 8d 44 02 ff          lea    -0x1(%rdx,%rax,1),%rax
    0.00 :	    64aa:       48 f7 da                neg    %rdx
    0.00 :	    64ad:       48 21 d0                and    %rdx,%rax
    0.00 :	    64b0:       48 89 46 08             mov    %rax,0x8(%rsi)
    0.00 :	    64b4:       48 8b 43 20             mov    0x20(%rbx),%rax
    0.00 :	    64b8:       48 03 43 10             add    0x10(%rbx),%rax
    0.00 :	    64bc:       4a 89 04 39             mov    %rax,(%rcx,%r15,1)
    0.00 :	    64c0:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	    64c4:       48 03 43 10             add    0x10(%rbx),%rax
    0.00 :	    64c8:       49 89 44 0f 08          mov    %rax,0x8(%r15,%rcx,1)
    0.00 :	    64cd:       48 8b 05 64 87 21 00    mov    0x218764(%rip),%rax        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    64d4:       48 f7 d8                neg    %rax
    0.00 :	    64d7:       48 23 43 08             and    0x8(%rbx),%rax
    0.00 :	    64db:       49 83 fe 01             cmp    $0x1,%r14
    0.00 :	    64df:       48 89 46 20             mov    %rax,0x20(%rsi)
    0.00 :	    64e3:       76 1e                   jbe    6503 <_dl_map_object_from_fd+0x463>
    0.00 :	    64e5:       4a 8b 0c 3f             mov    (%rdi,%r15,1),%rcx
    0.00 :	    64e9:       0f b6 85 20 ff ff ff    movzbl -0xe0(%rbp),%eax
    0.00 :	    64f0:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	    64f5:       49 39 4c 3f d8          cmp    %rcx,-0x28(%r15,%rdi,1)
    0.00 :	    64fa:       0f 44 d0                cmove  %eax,%edx
    0.00 :	    64fd:       88 95 20 ff ff ff       mov    %dl,-0xe0(%rbp)
    0.00 :	    6503:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	    6506:       4b 8d 04 64             lea    (%r12,%r12,2),%rax
    0.00 :	    650a:       ba 40 62 51 73          mov    $0x73516240,%edx
    0.00 :	    650f:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6513:       83 e1 07                and    $0x7,%ecx
    0.00 :	    6516:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	    6519:       d3 fa                   sar    %cl,%edx
    0.00 :	    651b:       83 e2 0f                and    $0xf,%edx
    0.00 :	    651e:       41 89 54 07 28          mov    %edx,0x28(%r15,%rax,1)
    0.00 :	    6523:       41 0f b7 8d b0 02 00    movzwl 0x2b0(%r13),%ecx
    0.00 :	    652a:       00 
    0.00 :	    652b:       e9 c5 fd ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    6530:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    6534:       4d 89 e6                mov    %r12,%r14
    0.00 :	    6537:       49 89 85 58 04 00 00    mov    %rax,0x458(%r13)
    0.00 :	    653e:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	    6542:       49 89 85 60 04 00 00    mov    %rax,0x460(%r13)
    0.00 :	    6549:       e9 a7 fd ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    654e:       66 90                   xchg   %ax,%ax
    0.00 :	    6550:       8b 43 04                mov    0x4(%rbx),%eax
    0.00 :	    6553:       4d 89 e6                mov    %r12,%r14
    0.00 :	    6556:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	    655d:       e9 93 fd ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    6562:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    6568:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	    656c:       48 23 43 10             and    0x10(%rbx),%rax
    0.00 :	    6570:       49 89 85 40 04 00 00    mov    %rax,0x440(%r13)
    0.00 :	    6577:       e9 02 fe ff ff          jmpq   637e <_dl_map_object_from_fd+0x2de>
    0.00 :	    657c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    6580:       4d 85 f6                test   %r14,%r14
    0.00 :	    6583:       0f 84 a3 0b 00 00       je     712c <_dl_map_object_from_fd+0x108c>
    0.00 :	    6589:       4d 8d 66 ff             lea    -0x1(%r14),%r12
    0.00 :	    658d:       0f b7 95 ee fe ff ff    movzwl -0x112(%rbp),%edx
    0.00 :	    6594:       4c 89 fb                mov    %r15,%rbx
    0.00 :	    6597:       4b 8d 44 64 01          lea    0x1(%r12,%r12,2),%rax
    0.00 :	    659c:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    65a0:       89 95 fc fe ff ff       mov    %edx,-0x104(%rbp)
    0.00 :	    65a6:       49 8b 3f                mov    (%r15),%rdi
    0.00 :	    65a9:       49 8b 44 07 08          mov    0x8(%r15,%rax,1),%rax
    0.00 :	    65ae:       48 29 f8                sub    %rdi,%rax
    0.00 :	    65b1:       83 fa 03                cmp    $0x3,%edx
    0.00 :	    65b4:       48 89 85 30 ff ff ff    mov    %rax,-0xd0(%rbp)
    0.00 :	    65bb:       0f 85 06 0b 00 00       jne    70c7 <_dl_map_object_from_fd+0x1027>
    0.00 :	    65c1:       48 23 3d d0 86 21 00    and    0x2186d0(%rip),%rdi        # 21ec98 <_rtld_global_ro+0x78>
    0.00 :	    65c8:       41 8b 57 28             mov    0x28(%r15),%edx
    0.00 :	    65cc:       b9 02 08 00 00          mov    $0x802,%ecx
    0.00 :	    65d1:       4d 8b 4f 20             mov    0x20(%r15),%r9
    0.00 :	    65d5:       44 8b 85 d4 fe ff ff    mov    -0x12c(%rbp),%r8d
    0.00 :	    65dc:       48 89 c6                mov    %rax,%rsi
    0.00 :	    65df:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    65e6:       e8 e5 fb 00 00          callq  161d0 <__mmap>
    0.00 :	    65eb:       49 89 85 40 03 00 00    mov    %rax,0x340(%r13)
    0.00 :	    65f2:       48 83 c0 01             add    $0x1,%rax
    0.00 :	    65f6:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    65fd:       0f 84 1b 01 00 00       je     671e <_dl_map_object_from_fd+0x67e>
    0.00 :	    6603:       8b 05 57 86 21 00       mov    0x218657(%rip),%eax        # 21ec60 <_rtld_global_ro+0x40>
    0.00 :	    6609:       85 c0                   test   %eax,%eax
    0.00 :	    660b:       0f 85 59 06 00 00       jne    6c6a <_dl_map_object_from_fd+0xbca>
    0.00 :	    6611:       48 8b 85 30 ff ff ff    mov    -0xd0(%rbp),%rax
    0.00 :	    6618:       49 03 85 40 03 00 00    add    0x340(%r13),%rax
    0.00 :	    661f:       49 8b 95 40 03 00 00    mov    0x340(%r13),%rdx
    0.00 :	    6626:       49 89 85 48 03 00 00    mov    %rax,0x348(%r13)
    0.00 :	    662d:       49 2b 17                sub    (%r15),%rdx
    0.00 :	    6630:       49 89 55 00             mov    %rdx,0x0(%r13)
    0.00 :	    6634:       80 bd 20 ff ff ff 00    cmpb   $0x0,-0xe0(%rbp)
    0.00 :	    663b:       0f 85 f8 05 00 00       jne    6c39 <_dl_map_object_from_fd+0xb99>
    0.00 :	    6641:       41 80 8d 15 03 00 00    orb    $0x40,0x315(%r13)
    0.00 :	    6648:       40 
    0.00 :	    6649:       f6 43 28 04             testb  $0x4,0x28(%rbx)
    0.00 :	    664d:       74 0f                   je     665e <_dl_map_object_from_fd+0x5be>
    0.00 :	    664f:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	    6653:       49 03 45 00             add    0x0(%r13),%rax
    0.00 :	    6657:       49 89 85 50 03 00 00    mov    %rax,0x350(%r13)
    0.00 :	    665e:       49 83 bd a0 02 00 00    cmpq   $0x0,0x2a0(%r13)
    0.00 :	    6665:       00 
    0.00 :	    6666:       0f 84 c4 06 00 00       je     6d30 <_dl_map_object_from_fd+0xc90>
    0.00 :	    666c:       48 8b 4b 18             mov    0x18(%rbx),%rcx
    0.00 :	    6670:       48 8b 53 10             mov    0x10(%rbx),%rdx
    0.00 :	    6674:       48 39 d1                cmp    %rdx,%rcx
    0.00 :	    6677:       76 45                   jbe    66be <_dl_map_object_from_fd+0x61e>
    0.00 :	    6679:       49 8b 45 00             mov    0x0(%r13),%rax
    0.00 :	    667d:       48 8b 35 b4 85 21 00    mov    0x2185b4(%rip),%rsi        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    6684:       4c 8d 24 10             lea    (%rax,%rdx,1),%r12
    0.00 :	    6688:       4c 8d 1c 08             lea    (%rax,%rcx,1),%r11
    0.00 :	    668c:       48 89 f7                mov    %rsi,%rdi
    0.00 :	    668f:       48 f7 df                neg    %rdi
    0.00 :	    6692:       4a 8d 44 26 ff          lea    -0x1(%rsi,%r12,1),%rax
    0.00 :	    6697:       48 21 f8                and    %rdi,%rax
    0.00 :	    669a:       4c 39 d8                cmp    %r11,%rax
    0.00 :	    669d:       49 0f 47 c3             cmova  %r11,%rax
    0.00 :	    66a1:       49 39 c4                cmp    %rax,%r12
    0.00 :	    66a4:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
    0.00 :	    66ab:       0f 82 6f 01 00 00       jb     6820 <_dl_map_object_from_fd+0x780>
    0.00 :	    66b1:       4c 3b 9d 38 ff ff ff    cmp    -0xc8(%rbp),%r11
    0.00 :	    66b8:       0f 87 11 01 00 00       ja     67cf <_dl_map_object_from_fd+0x72f>
    0.00 :	    66be:       48 83 c3 30             add    $0x30,%rbx
    0.00 :	    66c2:       4b 8d 04 76             lea    (%r14,%r14,2),%rax
    0.00 :	    66c6:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    66ca:       49 8d 04 07             lea    (%r15,%rax,1),%rax
    0.00 :	    66ce:       48 39 c3                cmp    %rax,%rbx
    0.00 :	    66d1:       0f 83 b9 01 00 00       jae    6890 <_dl_map_object_from_fd+0x7f0>
    0.00 :	    66d7:       48 8b 73 08             mov    0x8(%rbx),%rsi
    0.00 :	    66db:       48 8b 3b                mov    (%rbx),%rdi
    0.00 :	    66de:       48 39 fe                cmp    %rdi,%rsi
    0.00 :	    66e1:       0f 86 62 ff ff ff       jbe    6649 <_dl_map_object_from_fd+0x5a9>
    0.00 :	    66e7:       48 29 fe                sub    %rdi,%rsi
    0.00 :	    66ea:       49 03 7d 00             add    0x0(%r13),%rdi
    0.00 :	    66ee:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    66f1:       4c 8b 4b 20             mov    0x20(%rbx),%r9
    0.00 :	    66f5:       44 8b 85 d4 fe ff ff    mov    -0x12c(%rbp),%r8d
    0.00 :	    66fc:       b9 12 08 00 00          mov    $0x812,%ecx
    0.00 :	    6701:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    6708:       e8 c3 fa 00 00          callq  161d0 <__mmap>
    0.00 :	    670d:       48 83 c0 01             add    $0x1,%rax
    0.00 :	    6711:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    6718:       0f 85 2b ff ff ff       jne    6649 <_dl_map_object_from_fd+0x5a9>
    0.00 :	    671e:       48 8d 15 6b 4c 01 00    lea    0x14c6b(%rip),%rdx        # 1b390 <__PRETTY_FUNCTION__.3644+0x101f>
    0.00 :	    6725:       48 8b a5 f0 fe ff ff    mov    -0x110(%rbp),%rsp
    0.00 :	    672c:       44 8b 1d 51 9a 21 00    mov    0x219a51(%rip),%r11d        # 220184 <rtld_errno>
    0.00 :	    6733:       80 bd 0f ff ff ff 00    cmpb   $0x0,-0xf1(%rbp)
    0.00 :	    673a:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	    673f:       49 89 d1                mov    %rdx,%r9
    0.00 :	    6742:       48 0f 45 85 00 ff ff    cmovne -0x100(%rbp),%rax
    0.00 :	    6749:       ff 
    0.00 :	    674a:       4d 89 e8                mov    %r13,%r8
    0.00 :	    674d:       44 89 df                mov    %r11d,%edi
    0.00 :	    6750:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	    6754:       48 8b 8d c8 fe ff ff    mov    -0x138(%rbp),%rcx
    0.00 :	    675b:       48 8b 95 d8 fe ff ff    mov    -0x128(%rbp),%rdx
    0.00 :	    6762:       8b b5 d4 fe ff ff       mov    -0x12c(%rbp),%esi
    0.00 :	    6768:       e8 c3 ef ff ff          callq  5730 <lose>
    0.00 :	    676d:       48 8d 43 1e             lea    0x1e(%rbx),%rax
    0.00 :	    6771:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    6777:       31 d2                   xor    %edx,%edx
    0.00 :	    6779:       48 83 e0 f0             and    $0xfffffffffffffff0,%rax
    0.00 :	    677d:       48 29 c4                sub    %rax,%rsp
    0.00 :	    6780:       48 8d 74 24 47          lea    0x47(%rsp),%rsi
    0.00 :	    6785:       48 83 e6 f0             and    $0xfffffffffffffff0,%rsi
    0.00 :	    6789:       49 89 f2                mov    %rsi,%r10
    0.00 :	    678c:       48 89 ce                mov    %rcx,%rsi
    0.00 :	    678f:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    6796:       e8 c5 fa 00 00          callq  16260 <__libc_lseek>
    0.00 :	    679b:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    67a2:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    67a8:       48 89 da                mov    %rbx,%rdx
    0.00 :	    67ab:       4c 89 d6                mov    %r10,%rsi
    0.00 :	    67ae:       e8 fd f7 00 00          callq  15fb0 <__libc_read>
    0.00 :	    67b3:       48 39 d8                cmp    %rbx,%rax
    0.00 :	    67b6:       48 8d 15 cc 31 01 00    lea    0x131cc(%rip),%rdx        # 19989 <__PRETTY_FUNCTION__.12417+0x87>
    0.00 :	    67bd:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    67c4:       0f 85 62 ff ff ff       jne    672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    67ca:       e9 95 fa ff ff          jmpq   6264 <_dl_map_object_from_fd+0x1c4>
    0.00 :	    67cf:       4c 2b 9d 38 ff ff ff    sub    -0xc8(%rbp),%r11
    0.00 :	    67d6:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    67d9:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    67dc:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	    67e3:       41 b8 ff ff ff ff       mov    $0xffffffff,%r8d
    0.00 :	    67e9:       b9 32 00 00 00          mov    $0x32,%ecx
    0.00 :	    67ee:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    67f5:       4c 89 de                mov    %r11,%rsi
    0.00 :	    67f8:       e8 d3 f9 00 00          callq  161d0 <__mmap>
    0.00 :	    67fd:       48 83 c0 01             add    $0x1,%rax
    0.00 :	    6801:       48 8d 15 55 32 01 00    lea    0x13255(%rip),%rdx        # 19a5d <__PRETTY_FUNCTION__.12417+0x15b>
    0.00 :	    6808:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    680f:       0f 85 a9 fe ff ff       jne    66be <_dl_map_object_from_fd+0x61e>
    0.00 :	    6815:       e9 0b ff ff ff          jmpq   6725 <_dl_map_object_from_fd+0x685>
    0.00 :	    681a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    6820:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    6823:       f6 c2 02                test   $0x2,%dl
    0.00 :	    6826:       0f 84 d6 0a 00 00       je     7302 <_dl_map_object_from_fd+0x1262>
    0.00 :	    682c:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	    6833:       31 f6                   xor    %esi,%esi
    0.00 :	    6835:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    6838:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    683f:       4c 89 9d b0 fe ff ff    mov    %r11,-0x150(%rbp)
    0.00 :	    6846:       4c 29 e2                sub    %r12,%rdx
    0.00 :	    6849:       e8 22 03 01 00          callq  16b70 <memset>
    0.00 :	    684e:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    6851:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    6858:       4c 8b 9d b0 fe ff ff    mov    -0x150(%rbp),%r11
    0.00 :	    685f:       f6 c2 02                test   $0x2,%dl
    0.00 :	    6862:       0f 85 49 fe ff ff       jne    66b1 <_dl_map_object_from_fd+0x611>
    0.00 :	    6868:       48 8b 35 c9 83 21 00    mov    0x2183c9(%rip),%rsi        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    686f:       48 89 f7                mov    %rsi,%rdi
    0.00 :	    6872:       48 f7 df                neg    %rdi
    0.00 :	    6875:       4c 21 e7                and    %r12,%rdi
    0.00 :	    6878:       e8 b3 f9 00 00          callq  16230 <__mprotect>
    0.00 :	    687d:       4c 8b 9d b0 fe ff ff    mov    -0x150(%rbp),%r11
    0.00 :	    6884:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    688b:       e9 21 fe ff ff          jmpq   66b1 <_dl_map_object_from_fd+0x611>
    0.00 :	    6890:       49 8b 45 10             mov    0x10(%r13),%rax
    0.00 :	    6894:       48 8b a5 f0 fe ff ff    mov    -0x110(%rbp),%rsp
    0.00 :	    689b:       48 85 c0                test   %rax,%rax
    0.00 :	    689e:       0f 84 bc 06 00 00       je     6f60 <_dl_map_object_from_fd+0xec0>
    0.00 :	    68a4:       48 89 c1                mov    %rax,%rcx
    0.00 :	    68a7:       49 03 4d 00             add    0x0(%r13),%rcx
    0.00 :	    68ab:       48 85 c9                test   %rcx,%rcx
    0.00 :	    68ae:       49 89 4d 10             mov    %rcx,0x10(%r13)
    0.00 :	    68b2:       0f 84 8e 01 00 00       je     6a46 <_dl_map_object_from_fd+0x9a6>
    0.00 :	    68b8:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	    68bb:       48 85 d2                test   %rdx,%rdx
    0.00 :	    68be:       74 66                   je     6926 <_dl_map_object_from_fd+0x886>
    0.00 :	    68c0:       be ff ff ff 6f          mov    $0x6fffffff,%esi
    0.00 :	    68c5:       41 b8 ff fd ff 6f       mov    $0x6ffffdff,%r8d
    0.00 :	    68cb:       41 b9 ff fe ff 6f       mov    $0x6ffffeff,%r9d
    0.00 :	    68d1:       bb 48 ff ff 6f          mov    $0x6fffff48,%ebx
    0.00 :	    68d6:       41 bb 3c fe ff 6f       mov    $0x6ffffe3c,%r11d
    0.00 :	    68dc:       bf 29 00 00 70          mov    $0x70000029,%edi
    0.00 :	    68e1:       eb 16                   jmp    68f9 <_dl_map_object_from_fd+0x859>
    0.00 :	    68e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    68e8:       49 89 4c d5 40          mov    %rcx,0x40(%r13,%rdx,8)
    0.00 :	    68ed:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	    68f1:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	    68f4:       48 85 d2                test   %rdx,%rdx
    0.00 :	    68f7:       74 2d                   je     6926 <_dl_map_object_from_fd+0x886>
    0.00 :	    68f9:       48 83 fa 21             cmp    $0x21,%rdx
    0.00 :	    68fd:       76 e9                   jbe    68e8 <_dl_map_object_from_fd+0x848>
    0.00 :	    68ff:       48 89 f0                mov    %rsi,%rax
    0.00 :	    6902:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6905:       48 83 f8 0f             cmp    $0xf,%rax
    0.00 :	    6909:       0f 87 f1 02 00 00       ja     6c00 <_dl_map_object_from_fd+0xb60>
    0.00 :	    690f:       48 89 f8                mov    %rdi,%rax
    0.00 :	    6912:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6915:       49 89 4c c5 00          mov    %rcx,0x0(%r13,%rax,8)
    0.00 :	    691a:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	    691e:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	    6921:       48 85 d2                test   %rdx,%rdx
    0.00 :	    6924:       75 d3                   jne    68f9 <_dl_map_object_from_fd+0x859>
    0.00 :	    6926:       49 8b 55 00             mov    0x0(%r13),%rdx
    0.00 :	    692a:       48 85 d2                test   %rdx,%rdx
    0.00 :	    692d:       74 71                   je     69a0 <_dl_map_object_from_fd+0x900>
    0.00 :	    692f:       49 8b 45 60             mov    0x60(%r13),%rax
    0.00 :	    6933:       48 85 c0                test   %rax,%rax
    0.00 :	    6936:       74 04                   je     693c <_dl_map_object_from_fd+0x89c>
    0.00 :	    6938:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    693c:       49 8b 45 58             mov    0x58(%r13),%rax
    0.00 :	    6940:       48 85 c0                test   %rax,%rax
    0.00 :	    6943:       74 04                   je     6949 <_dl_map_object_from_fd+0x8a9>
    0.00 :	    6945:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6949:       49 8b 45 68             mov    0x68(%r13),%rax
    0.00 :	    694d:       48 85 c0                test   %rax,%rax
    0.00 :	    6950:       74 04                   je     6956 <_dl_map_object_from_fd+0x8b6>
    0.00 :	    6952:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6956:       49 8b 45 70             mov    0x70(%r13),%rax
    0.00 :	    695a:       48 85 c0                test   %rax,%rax
    0.00 :	    695d:       74 04                   je     6963 <_dl_map_object_from_fd+0x8c3>
    0.00 :	    695f:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6963:       49 8b 45 78             mov    0x78(%r13),%rax
    0.00 :	    6967:       48 85 c0                test   %rax,%rax
    0.00 :	    696a:       74 04                   je     6970 <_dl_map_object_from_fd+0x8d0>
    0.00 :	    696c:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6970:       49 8b 85 f8 00 00 00    mov    0xf8(%r13),%rax
    0.00 :	    6977:       48 85 c0                test   %rax,%rax
    0.00 :	    697a:       74 04                   je     6980 <_dl_map_object_from_fd+0x8e0>
    0.00 :	    697c:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6980:       49 8b 85 c8 01 00 00    mov    0x1c8(%r13),%rax
    0.00 :	    6987:       48 85 c0                test   %rax,%rax
    0.00 :	    698a:       74 04                   je     6990 <_dl_map_object_from_fd+0x8f0>
    0.00 :	    698c:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    6990:       49 8b 85 98 02 00 00    mov    0x298(%r13),%rax
    0.00 :	    6997:       48 85 c0                test   %rax,%rax
    0.00 :	    699a:       74 04                   je     69a0 <_dl_map_object_from_fd+0x900>
    0.00 :	    699c:       48 01 50 08             add    %rdx,0x8(%rax)
    0.00 :	    69a0:       49 8b 85 e0 00 00 00    mov    0xe0(%r13),%rax
    0.00 :	    69a7:       48 85 c0                test   %rax,%rax
    0.00 :	    69aa:       74 0b                   je     69b7 <_dl_map_object_from_fd+0x917>
    0.00 :	    69ac:       48 83 78 08 07          cmpq   $0x7,0x8(%rax)
    0.00 :	    69b1:       0f 85 a5 09 00 00       jne    735c <_dl_map_object_from_fd+0x12bc>
    0.00 :	    69b7:       49 83 7d 78 00          cmpq   $0x0,0x78(%r13)
    0.00 :	    69bc:       74 12                   je     69d0 <_dl_map_object_from_fd+0x930>
    0.00 :	    69be:       49 8b 85 88 00 00 00    mov    0x88(%r13),%rax
    0.00 :	    69c5:       48 83 78 08 18          cmpq   $0x18,0x8(%rax)
    0.00 :	    69ca:       0f 85 6d 09 00 00       jne    733d <_dl_map_object_from_fd+0x129d>
    0.00 :	    69d0:       49 8b 95 30 01 00 00    mov    0x130(%r13),%rdx
    0.00 :	    69d7:       48 85 d2                test   %rdx,%rdx
    0.00 :	    69da:       74 33                   je     6a0f <_dl_map_object_from_fd+0x96f>
    0.00 :	    69dc:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	    69e0:       a8 02                   test   $0x2,%al
    0.00 :	    69e2:       41 89 85 e0 03 00 00    mov    %eax,0x3e0(%r13)
    0.00 :	    69e9:       74 07                   je     69f2 <_dl_map_object_from_fd+0x952>
    0.00 :	    69eb:       49 89 95 c0 00 00 00    mov    %rdx,0xc0(%r13)
    0.00 :	    69f2:       41 8b 85 e0 03 00 00    mov    0x3e0(%r13),%eax
    0.00 :	    69f9:       a8 04                   test   $0x4,%al
    0.00 :	    69fb:       74 07                   je     6a04 <_dl_map_object_from_fd+0x964>
    0.00 :	    69fd:       49 89 95 f0 00 00 00    mov    %rdx,0xf0(%r13)
    0.00 :	    6a04:       a8 08                   test   $0x8,%al
    0.00 :	    6a06:       74 07                   je     6a0f <_dl_map_object_from_fd+0x96f>
    0.00 :	    6a08:       49 89 95 00 01 00 00    mov    %rdx,0x100(%r13)
    0.00 :	    6a0f:       49 8b 95 70 01 00 00    mov    0x170(%r13),%rdx
    0.00 :	    6a16:       48 85 d2                test   %rdx,%rdx
    0.00 :	    6a19:       74 16                   je     6a31 <_dl_map_object_from_fd+0x991>
    0.00 :	    6a1b:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	    6a1f:       a8 01                   test   $0x1,%al
    0.00 :	    6a21:       41 89 85 dc 03 00 00    mov    %eax,0x3dc(%r13)
    0.00 :	    6a28:       74 07                   je     6a31 <_dl_map_object_from_fd+0x991>
    0.00 :	    6a2a:       49 89 95 00 01 00 00    mov    %rdx,0x100(%r13)
    0.00 :	    6a31:       49 83 bd 28 01 00 00    cmpq   $0x0,0x128(%r13)
    0.00 :	    6a38:       00 
    0.00 :	    6a39:       74 0b                   je     6a46 <_dl_map_object_from_fd+0x9a6>
    0.00 :	    6a3b:       49 c7 85 b8 00 00 00    movq   $0x0,0xb8(%r13)
    0.00 :	    6a42:       00 00 00 00 
    0.00 :	    6a46:       41 f6 85 dc 03 00 00    testb  $0x40,0x3dc(%r13)
    0.00 :	    6a4d:       40 
    0.00 :	    6a4e:       74 0d                   je     6a5d <_dl_map_object_from_fd+0x9bd>
    0.00 :	    6a50:       44 8b 65 10             mov    0x10(%rbp),%r12d
    0.00 :	    6a54:       45 85 e4                test   %r12d,%r12d
    0.00 :	    6a57:       0f 88 2a 03 00 00       js     6d87 <_dl_map_object_from_fd+0xce7>
    0.00 :	    6a5d:       49 8b 85 a0 02 00 00    mov    0x2a0(%r13),%rax
    0.00 :	    6a64:       48 85 c0                test   %rax,%rax
    0.00 :	    6a67:       0f 84 e4 05 00 00       je     7051 <_dl_map_object_from_fd+0xfb1>
    0.00 :	    6a6d:       49 03 45 00             add    0x0(%r13),%rax
    0.00 :	    6a71:       49 89 85 a0 02 00 00    mov    %rax,0x2a0(%r13)
    0.00 :	    6a78:       8b 05 da 94 21 00       mov    0x2194da(%rip),%eax        # 21ff58 <_rtld_global+0xef8>
    0.00 :	    6a7e:       f7 d0                   not    %eax
    0.00 :	    6a80:       48 21 85 10 ff ff ff    and    %rax,-0xf0(%rbp)
    0.00 :	    6a87:       f6 85 10 ff ff ff 01    testb  $0x1,-0xf0(%rbp)
    0.00 :	    6a8e:       0f 85 31 07 00 00       jne    71c5 <_dl_map_object_from_fd+0x1125>
    0.00 :	    6a94:       49 8b 85 20 04 00 00    mov    0x420(%r13),%rax
    0.00 :	    6a9b:       48 85 c0                test   %rax,%rax
    0.00 :	    6a9e:       74 0b                   je     6aab <_dl_map_object_from_fd+0xa0b>
    0.00 :	    6aa0:       49 03 45 00             add    0x0(%r13),%rax
    0.00 :	    6aa4:       49 89 85 20 04 00 00    mov    %rax,0x420(%r13)
    0.00 :	    6aab:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    6ab1:       e8 ca f4 00 00          callq  15f80 <__close>
    0.00 :	    6ab6:       85 c0                   test   %eax,%eax
    0.00 :	    6ab8:       48 8d 15 c8 2f 01 00    lea    0x12fc8(%rip),%rdx        # 19a87 <__PRETTY_FUNCTION__.12417+0x185>
    0.00 :	    6abf:       0f 85 67 fc ff ff       jne    672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    6ac5:       41 0f b6 95 14 03 00    movzbl 0x314(%r13),%edx
    0.00 :	    6acc:       00 
    0.00 :	    6acd:       89 d0                   mov    %edx,%eax
    0.00 :	    6acf:       83 e0 03                and    $0x3,%eax
    0.00 :	    6ad2:       2c 01                   sub    $0x1,%al
    0.00 :	    6ad4:       0f 84 be 03 00 00       je     6e98 <_dl_map_object_from_fd+0xdf8>
    0.00 :	    6ada:       49 8b 4d 00             mov    0x0(%r13),%rcx
    0.00 :	    6ade:       49 03 8d a8 02 00 00    add    0x2a8(%r13),%rcx
    0.00 :	    6ae5:       49 89 8d a8 02 00 00    mov    %rcx,0x2a8(%r13)
    0.00 :	    6aec:       f6 05 2d 81 21 00 40    testb  $0x40,0x21812d(%rip)        # 21ec20 <_rtld_global_ro>
    0.00 :	    6af3:       0f 85 61 06 00 00       jne    715a <_dl_map_object_from_fd+0x10ba>
    0.00 :	    6af9:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    6afc:       e8 3f 25 00 00          callq  9040 <_dl_setup_hash>
    0.00 :	    6b01:       f6 45 10 08             testb  $0x8,0x10(%rbp)
    0.00 :	    6b05:       0f 84 18 03 00 00       je     6e23 <_dl_map_object_from_fd+0xd83>
    0.00 :	    6b0b:       41 f6 85 dc 03 00 00    testb  $0x20,0x3dc(%r13)
    0.00 :	    6b12:       20 
    0.00 :	    6b13:       48 8b 05 7e 8e 21 00    mov    0x218e7e(%rip),%rax        # 21f998 <_rtld_global+0x938>
    0.00 :	    6b1a:       49 0f 45 c5             cmovne %r13,%rax
    0.00 :	    6b1e:       48 89 05 73 8e 21 00    mov    %rax,0x218e73(%rip)        # 21f998 <_rtld_global+0x938>
    0.00 :	    6b25:       48 8b 85 40 ff ff ff    mov    -0xc0(%rbp),%rax
    0.00 :	    6b2c:       49 89 85 98 03 00 00    mov    %rax,0x398(%r13)
    0.00 :	    6b33:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	    6b3a:       49 89 85 a0 03 00 00    mov    %rax,0x3a0(%r13)
    0.00 :	    6b41:       48 83 3d 57 81 21 00    cmpq   $0x0,0x218157(%rip)        # 21eca0 <_rtld_global_ro+0x80>
    0.00 :	    6b48:       00 
    0.00 :	    6b49:       0f 85 ce 06 00 00       jne    721d <_dl_map_object_from_fd+0x117d>
    0.00 :	    6b4f:       48 8b 75 20             mov    0x20(%rbp),%rsi
    0.00 :	    6b53:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    6b56:       e8 a5 3e 00 00          callq  aa00 <_dl_add_to_namespace_list>
    0.00 :	    6b5b:       44 8b 1d d6 81 21 00    mov    0x2181d6(%rip),%r11d        # 21ed38 <_rtld_global_ro+0x118>
    0.00 :	    6b62:       45 85 db                test   %r11d,%r11d
    0.00 :	    6b65:       0f 84 10 f6 ff ff       je     617b <_dl_map_object_from_fd+0xdb>
    0.00 :	    6b6b:       49 8b 45 30             mov    0x30(%r13),%rax
    0.00 :	    6b6f:       48 8d 35 ea 84 21 00    lea    0x2184ea(%rip),%rsi        # 21f060 <_rtld_global>
    0.00 :	    6b76:       48 8d 04 c0             lea    (%rax,%rax,8),%rax
    0.00 :	    6b7a:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6b7e:       48 8b 04 06             mov    (%rsi,%rax,1),%rax
    0.00 :	    6b82:       f6 80 15 03 00 00 08    testb  $0x8,0x315(%rax)
    0.00 :	    6b89:       0f 85 ec f5 ff ff       jne    617b <_dl_map_object_from_fd+0xdb>
    0.00 :	    6b8f:       4c 8b 35 9a 81 21 00    mov    0x21819a(%rip),%r14        # 21ed30 <_rtld_global_ro+0x110>
    0.00 :	    6b96:       45 31 e4                xor    %r12d,%r12d
    0.00 :	    6b99:       49 8b 46 10             mov    0x10(%r14),%rax
    0.00 :	    6b9d:       48 85 c0                test   %rax,%rax
    0.00 :	    6ba0:       74 44                   je     6be6 <_dl_map_object_from_fd+0xb46>
    0.00 :	    6ba2:       44 89 e3                mov    %r12d,%ebx
    0.00 :	    6ba5:       48 8b 75 20             mov    0x20(%rbp),%rsi
    0.00 :	    6ba9:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    6bac:       48 83 c3 47             add    $0x47,%rbx
    0.00 :	    6bb0:       48 c1 e3 04             shl    $0x4,%rbx
    0.00 :	    6bb4:       49 8d 54 1d 00          lea    0x0(%r13,%rbx,1),%rdx
    0.00 :	    6bb9:       ff d0                   callq  *%rax
    0.00 :	    6bbb:       42 89 44 2b 08          mov    %eax,0x8(%rbx,%r13,1)
    0.00 :	    6bc0:       41 0f b6 95 15 03 00    movzbl 0x315(%r13),%edx
    0.00 :	    6bc7:       00 
    0.00 :	    6bc8:       85 c0                   test   %eax,%eax
    0.00 :	    6bca:       0f 95 c1                setne  %cl
    0.00 :	    6bcd:       89 d0                   mov    %edx,%eax
    0.00 :	    6bcf:       83 e2 ef                and    $0xffffffef,%edx
    0.00 :	    6bd2:       c0 e8 04                shr    $0x4,%al
    0.00 :	    6bd5:       83 e0 01                and    $0x1,%eax
    0.00 :	    6bd8:       09 c1                   or     %eax,%ecx
    0.00 :	    6bda:       c1 e1 04                shl    $0x4,%ecx
    0.00 :	    6bdd:       09 ca                   or     %ecx,%edx
    0.00 :	    6bdf:       41 88 95 15 03 00 00    mov    %dl,0x315(%r13)
    0.00 :	    6be6:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	    6bea:       44 39 25 47 81 21 00    cmp    %r12d,0x218147(%rip)        # 21ed38 <_rtld_global_ro+0x118>
    0.00 :	    6bf1:       4d 8b 76 40             mov    0x40(%r14),%r14
    0.00 :	    6bf5:       77 a2                   ja     6b99 <_dl_map_object_from_fd+0xaf9>
    0.00 :	    6bf7:       e9 7f f5 ff ff          jmpq   617b <_dl_map_object_from_fd+0xdb>
    0.00 :	    6bfc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    6c00:       8d 04 12                lea    (%rdx,%rdx,1),%eax
    0.00 :	    6c03:       d1 f8                   sar    %eax
    0.00 :	    6c05:       83 f8 fc                cmp    $0xfffffffc,%eax
    0.00 :	    6c08:       76 0f                   jbe    6c19 <_dl_map_object_from_fd+0xb79>
    0.00 :	    6c0a:       f7 d0                   not    %eax
    0.00 :	    6c0c:       83 c0 32                add    $0x32,%eax
    0.00 :	    6c0f:       49 89 4c c5 40          mov    %rcx,0x40(%r13,%rax,8)
    0.00 :	    6c14:       e9 d4 fc ff ff          jmpq   68ed <_dl_map_object_from_fd+0x84d>
    0.00 :	    6c19:       4c 89 c0                mov    %r8,%rax
    0.00 :	    6c1c:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6c1f:       48 83 f8 0b             cmp    $0xb,%rax
    0.00 :	    6c23:       0f 87 e7 00 00 00       ja     6d10 <_dl_map_object_from_fd+0xc70>
    0.00 :	    6c29:       4c 89 d8                mov    %r11,%rax
    0.00 :	    6c2c:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6c2f:       49 89 4c c5 00          mov    %rcx,0x0(%r13,%rax,8)
    0.00 :	    6c34:       e9 b4 fc ff ff          jmpq   68ed <_dl_map_object_from_fd+0x84d>
    0.00 :	    6c39:       4b 8d 04 64             lea    (%r12,%r12,2),%rax
    0.00 :	    6c3d:       49 8b 7f 08             mov    0x8(%r15),%rdi
    0.00 :	    6c41:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6c45:       4a 8b 34 38             mov    (%rax,%r15,1),%rsi
    0.00 :	    6c49:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    6c50:       48 29 fe                sub    %rdi,%rsi
    0.00 :	    6c53:       48 8d 3c 3a             lea    (%rdx,%rdi,1),%rdi
    0.00 :	    6c57:       31 d2                   xor    %edx,%edx
    0.00 :	    6c59:       e8 d2 f5 00 00          callq  16230 <__mprotect>
    0.00 :	    6c5e:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    6c65:       e9 d7 f9 ff ff          jmpq   6641 <_dl_map_object_from_fd+0x5a1>
    0.00 :	    6c6a:       49 8b 77 20             mov    0x20(%r15),%rsi
    0.00 :	    6c6e:       48 8b 95 30 ff ff ff    mov    -0xd0(%rbp),%rdx
    0.00 :	    6c75:       b9 03 00 00 00          mov    $0x3,%ecx
    0.00 :	    6c7a:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    6c80:       e8 2b f5 00 00          callq  161b0 <posix_fadvise>
    0.00 :	    6c85:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    6c8c:       e9 80 f9 ff ff          jmpq   6611 <_dl_map_object_from_fd+0x571>
    0.00 :	    6c91:       8b 05 a1 80 21 00       mov    0x2180a1(%rip),%eax        # 21ed38 <_rtld_global_ro+0x118>
    0.00 :	    6c97:       85 c0                   test   %eax,%eax
    0.00 :	    6c99:       0f 84 46 f7 ff ff       je     63e5 <_dl_map_object_from_fd+0x345>
    0.00 :	    6c9f:       48 8b 4d 20             mov    0x20(%rbp),%rcx
    0.00 :	    6ca3:       48 8d 35 b6 83 21 00    lea    0x2183b6(%rip),%rsi        # 21f060 <_rtld_global>
    0.00 :	    6caa:       48 8d 04 c9             lea    (%rcx,%rcx,8),%rax
    0.00 :	    6cae:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6cb2:       48 8b 04 06             mov    (%rsi,%rax,1),%rax
    0.00 :	    6cb6:       48 89 85 18 ff ff ff    mov    %rax,-0xe8(%rbp)
    0.00 :	    6cbd:       f6 80 15 03 00 00 08    testb  $0x8,0x315(%rax)
    0.00 :	    6cc4:       0f 85 1b f7 ff ff       jne    63e5 <_dl_map_object_from_fd+0x345>
    0.00 :	    6cca:       4c 8b 2d 5f 80 21 00    mov    0x21805f(%rip),%r13        # 21ed30 <_rtld_global_ro+0x110>
    0.00 :	    6cd1:       31 db                   xor    %ebx,%ebx
    0.00 :	    6cd3:       49 8b 55 00             mov    0x0(%r13),%rdx
    0.00 :	    6cd7:       48 85 d2                test   %rdx,%rdx
    0.00 :	    6cda:       74 1c                   je     6cf8 <_dl_map_object_from_fd+0xc58>
    0.00 :	    6cdc:       48 8b 8d 18 ff ff ff    mov    -0xe8(%rbp),%rcx
    0.00 :	    6ce3:       89 d8                   mov    %ebx,%eax
    0.00 :	    6ce5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	    6cea:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    6cee:       48 8d bc 01 70 04 00    lea    0x470(%rcx,%rax,1),%rdi
    0.00 :	    6cf5:       00 
    0.00 :	    6cf6:       ff d2                   callq  *%rdx
    0.00 :	    6cf8:       83 c3 01                add    $0x1,%ebx
    0.00 :	    6cfb:       39 1d 37 80 21 00       cmp    %ebx,0x218037(%rip)        # 21ed38 <_rtld_global_ro+0x118>
    0.00 :	    6d01:       4d 8b 6d 40             mov    0x40(%r13),%r13
    0.00 :	    6d05:       77 cc                   ja     6cd3 <_dl_map_object_from_fd+0xc33>
    0.00 :	    6d07:       e9 d9 f6 ff ff          jmpq   63e5 <_dl_map_object_from_fd+0x345>
    0.00 :	    6d0c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    6d10:       4c 89 c8                mov    %r9,%rax
    0.00 :	    6d13:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6d16:       48 83 f8 0a             cmp    $0xa,%rax
    0.00 :	    6d1a:       0f 87 cd fb ff ff       ja     68ed <_dl_map_object_from_fd+0x84d>
    0.00 :	    6d20:       48 89 d8                mov    %rbx,%rax
    0.00 :	    6d23:       48 29 d0                sub    %rdx,%rax
    0.00 :	    6d26:       49 89 4c c5 00          mov    %rcx,0x0(%r13,%rax,8)
    0.00 :	    6d2b:       e9 bd fb ff ff          jmpq   68ed <_dl_map_object_from_fd+0x84d>
    0.00 :	    6d30:       48 8b 8d e0 fe ff ff    mov    -0x120(%rbp),%rcx
    0.00 :	    6d37:       48 8b 7b 20             mov    0x20(%rbx),%rdi
    0.00 :	    6d3b:       48 8b 71 20             mov    0x20(%rcx),%rsi
    0.00 :	    6d3f:       48 39 f7                cmp    %rsi,%rdi
    0.00 :	    6d42:       0f 87 24 f9 ff ff       ja     666c <_dl_map_object_from_fd+0x5cc>
    0.00 :	    6d48:       0f b7 51 38             movzwl 0x38(%rcx),%edx
    0.00 :	    6d4c:       4c 8b 03                mov    (%rbx),%r8
    0.00 :	    6d4f:       48 89 f8                mov    %rdi,%rax
    0.00 :	    6d52:       4c 29 c0                sub    %r8,%rax
    0.00 :	    6d55:       48 03 43 08             add    0x8(%rbx),%rax
    0.00 :	    6d59:       48 8d 0c d5 00 00 00    lea    0x0(,%rdx,8),%rcx
    0.00 :	    6d60:       00 
    0.00 :	    6d61:       48 c1 e2 06             shl    $0x6,%rdx
    0.00 :	    6d65:       48 29 ca                sub    %rcx,%rdx
    0.00 :	    6d68:       48 01 f2                add    %rsi,%rdx
    0.00 :	    6d6b:       48 39 d0                cmp    %rdx,%rax
    0.00 :	    6d6e:       0f 82 f8 f8 ff ff       jb     666c <_dl_map_object_from_fd+0x5cc>
    0.00 :	    6d74:       49 8d 04 30             lea    (%r8,%rsi,1),%rax
    0.00 :	    6d78:       48 29 f8                sub    %rdi,%rax
    0.00 :	    6d7b:       49 89 85 a0 02 00 00    mov    %rax,0x2a0(%r13)
    0.00 :	    6d82:       e9 e5 f8 ff ff          jmpq   666c <_dl_map_object_from_fd+0x5cc>
    0.00 :	    6d87:       49 8b bd 40 03 00 00    mov    0x340(%r13),%rdi
    0.00 :	    6d8e:       49 8b b5 48 03 00 00    mov    0x348(%r13),%rsi
    0.00 :	    6d95:       48 29 fe                sub    %rdi,%rsi
    0.00 :	    6d98:       e8 63 f4 00 00          callq  16200 <__munmap>
    0.00 :	    6d9d:       49 8b 7d 38             mov    0x38(%r13),%rdi
    0.00 :	    6da1:       8b 5f 10                mov    0x10(%rdi),%ebx
    0.00 :	    6da4:       85 db                   test   %ebx,%ebx
    0.00 :	    6da6:       74 33                   je     6ddb <_dl_map_object_from_fd+0xd3b>
    0.00 :	    6da8:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6dab:       41 80 bd 14 03 00 00    cmpb   $0x0,0x314(%r13)
    0.00 :	    6db2:       00 
    0.00 :	    6db3:       48 8d 15 2e 46 01 00    lea    0x1462e(%rip),%rdx        # 1b3e8 <__PRETTY_FUNCTION__.3644+0x1077>
    0.00 :	    6dba:       0f 89 73 f9 ff ff       jns    6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    6dc0:       49 8b bd a0 02 00 00    mov    0x2a0(%r13),%rdi
    0.00 :	    6dc7:       e8 24 9d ff ff          callq  af0 <free@plt>
    0.00 :	    6dcc:       48 8d 15 15 46 01 00    lea    0x14615(%rip),%rdx        # 1b3e8 <__PRETTY_FUNCTION__.3644+0x1077>
    0.00 :	    6dd3:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6dd6:       e9 58 f9 ff ff          jmpq   6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    6ddb:       e8 10 9d ff ff          callq  af0 <free@plt>
    0.00 :	    6de0:       eb c6                   jmp    6da8 <_dl_map_object_from_fd+0xd08>
    0.00 :	    6de2:       48 8d 15 4f 45 01 00    lea    0x1454f(%rip),%rdx        # 1b338 <__PRETTY_FUNCTION__.3644+0xfc7>
    0.00 :	    6de9:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6dec:       48 8b a5 f0 fe ff ff    mov    -0x110(%rbp),%rsp
    0.00 :	    6df3:       e9 3b f9 ff ff          jmpq   6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    6df8:       48 8d 15 b1 44 01 00    lea    0x144b1(%rip),%rdx        # 1b2b0 <__PRETTY_FUNCTION__.3644+0xf3f>
    0.00 :	    6dff:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6e02:       eb e8                   jmp    6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    6e04:       48 8b bd c8 fe ff ff    mov    -0x138(%rbp),%rdi
    0.00 :	    6e0b:       45 31 ed                xor    %r13d,%r13d
    0.00 :	    6e0e:       e8 dd 9c ff ff          callq  af0 <free@plt>
    0.00 :	    6e13:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    6e19:       e8 62 f1 00 00          callq  15f80 <__close>
    0.00 :	    6e1e:       e9 58 f3 ff ff          jmpq   617b <_dl_map_object_from_fd+0xdb>
    0.00 :	    6e23:       49 83 bd c0 00 00 00    cmpq   $0x0,0xc0(%r13)
    0.00 :	    6e2a:       00 
    0.00 :	    6e2b:       0f 84 da fc ff ff       je     6b0b <_dl_map_object_from_fd+0xa6b>
    0.00 :	    6e31:       49 8b 85 80 03 00 00    mov    0x380(%r13),%rax
    0.00 :	    6e38:       49 8d 95 b8 02 00 00    lea    0x2b8(%r13),%rdx
    0.00 :	    6e3f:       48 39 10                cmp    %rdx,(%rax)
    0.00 :	    6e42:       0f 84 c3 fc ff ff       je     6b0b <_dl_map_object_from_fd+0xa6b>
    0.00 :	    6e48:       49 8b 85 c8 02 00 00    mov    0x2c8(%r13),%rax
    0.00 :	    6e4f:       4c 89 28                mov    %r13,(%rax)
    0.00 :	    6e52:       49 8b b5 80 03 00 00    mov    0x380(%r13),%rsi
    0.00 :	    6e59:       49 8b 95 78 03 00 00    mov    0x378(%r13),%rdx
    0.00 :	    6e60:       41 c7 85 d0 02 00 00    movl   $0x1,0x2d0(%r13)
    0.00 :	    6e67:       01 00 00 00 
    0.00 :	    6e6b:       48 8d 7e 08             lea    0x8(%rsi),%rdi
    0.00 :	    6e6f:       48 8d 14 d5 f8 ff ff    lea    -0x8(,%rdx,8),%rdx
    0.00 :	    6e76:       ff 
    0.00 :	    6e77:       e8 64 fb 00 00          callq  169e0 <memmove>
    0.00 :	    6e7c:       49 8b 95 80 03 00 00    mov    0x380(%r13),%rdx
    0.00 :	    6e83:       49 8d 85 c8 02 00 00    lea    0x2c8(%r13),%rax
    0.00 :	    6e8a:       48 89 02                mov    %rax,(%rdx)
    0.00 :	    6e8d:       e9 79 fc ff ff          jmpq   6b0b <_dl_map_object_from_fd+0xa6b>
    0.00 :	    6e92:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    6e98:       83 bd fc fe ff ff 02    cmpl   $0x2,-0x104(%rbp)
    0.00 :	    6e9f:       0f 85 35 fc ff ff       jne    6ada <_dl_map_object_from_fd+0xa3a>
    0.00 :	    6ea5:       83 e2 fc                and    $0xfffffffc,%edx
    0.00 :	    6ea8:       41 88 95 14 03 00 00    mov    %dl,0x314(%r13)
    0.00 :	    6eaf:       e9 26 fc ff ff          jmpq   6ada <_dl_map_object_from_fd+0xa3a>
    0.00 :	    6eb4:       48 83 3d ac 90 21 00    cmpq   $0x0,0x2190ac(%rip)        # 21ff68 <_rtld_global+0xf08>
    0.00 :	    6ebb:       00 
    0.00 :	    6ebc:       0f 85 e5 f4 ff ff       jne    63a7 <_dl_map_object_from_fd+0x307>
    0.00 :	    6ec2:       49 83 7d 20 00          cmpq   $0x0,0x20(%r13)
    0.00 :	    6ec7:       0f 84 25 f4 ff ff       je     62f2 <_dl_map_object_from_fd+0x252>
    0.00 :	    6ecd:       8b 85 c4 fe ff ff       mov    -0x13c(%rbp),%eax
    0.00 :	    6ed3:       85 c0                   test   %eax,%eax
    0.00 :	    6ed5:       0f 85 17 f4 ff ff       jne    62f2 <_dl_map_object_from_fd+0x252>
    0.00 :	    6edb:       48 8d 0d 6e 9c ff ff    lea    -0x6392(%rip),%rcx        # b50 <_dl_initial_error_catch_tsd>
    0.00 :	    6ee2:       48 39 0d df 8a 21 00    cmp    %rcx,0x218adf(%rip)        # 21f9c8 <_rtld_global+0x968>
    0.00 :	    6ee9:       0f 85 db 03 00 00       jne    72ca <_dl_map_object_from_fd+0x122a>
    0.00 :	    6eef:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    6ef6:       e8 05 a8 00 00          callq  11700 <_dl_tls_setup>
    0.00 :	    6efb:       85 c0                   test   %eax,%eax
    0.00 :	    6efd:       0f 85 b5 03 00 00       jne    72b8 <_dl_map_object_from_fd+0x1218>
    0.00 :	    6f03:       31 ff                   xor    %edi,%edi
    0.00 :	    6f05:       e8 a6 a5 00 00          callq  114b0 <_dl_allocate_tls>
    0.00 :	    6f0a:       48 85 c0                test   %rax,%rax
    0.00 :	    6f0d:       48 89 c2                mov    %rax,%rdx
    0.00 :	    6f10:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    6f17:       0f 84 9b 03 00 00       je     72b8 <_dl_map_object_from_fd+0x1218>
    0.00 :	    6f1d:       48 89 02                mov    %rax,(%rdx)
    0.00 :	    6f20:       48 89 42 10             mov    %rax,0x10(%rdx)
    0.00 :	    6f24:       bf 02 10 00 00          mov    $0x1002,%edi
    0.00 :	    6f29:       b8 9e 00 00 00          mov    $0x9e,%eax
    0.00 :	    6f2e:       48 89 d6                mov    %rdx,%rsi
    0.00 :	    6f31:       0f 05                   syscall 
    0.00 :	    6f33:       85 c0                   test   %eax,%eax
    0.00 :	    6f35:       0f 84 9e 03 00 00       je     72d9 <_dl_map_object_from_fd+0x1239>
    0.00 :	    6f3b:       48 89 d7                mov    %rdx,%rdi
    0.00 :	    6f3e:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	    6f43:       e8 48 a0 00 00          callq  10f90 <_dl_deallocate_tls>
    0.00 :	    6f48:       48 8d 15 19 39 01 00    lea    0x13919(%rip),%rdx        # 1a868 <__PRETTY_FUNCTION__.3644+0x4f7>
    0.00 :	    6f4f:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6f52:       e9 95 fe ff ff          jmpq   6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    6f57:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    6f5e:       00 00 
    0.00 :	    6f60:       45 31 db                xor    %r11d,%r11d
    0.00 :	    6f63:       83 bd fc fe ff ff 03    cmpl   $0x3,-0x104(%rbp)
    0.00 :	    6f6a:       48 8d 15 4f 44 01 00    lea    0x1444f(%rip),%rdx        # 1b3c0 <__PRETTY_FUNCTION__.3644+0x104f>
    0.00 :	    6f71:       0f 85 cf fa ff ff       jne    6a46 <_dl_map_object_from_fd+0x9a6>
    0.00 :	    6f77:       e9 b7 f7 ff ff          jmpq   6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    6f7c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    6f80:       48 8b 35 e9 8d 21 00    mov    0x218de9(%rip),%rsi        # 21fd70 <_rtld_global+0xd10>
    0.00 :	    6f87:       48 39 b5 48 ff ff ff    cmp    %rsi,-0xb8(%rbp)
    0.00 :	    6f8e:       75 10                   jne    6fa0 <_dl_map_object_from_fd+0xf00>
    0.00 :	    6f90:       48 8b 3d d1 8d 21 00    mov    0x218dd1(%rip),%rdi        # 21fd68 <_rtld_global+0xd08>
    0.00 :	    6f97:       48 39 bd 40 ff ff ff    cmp    %rdi,-0xc0(%rbp)
    0.00 :	    6f9e:       74 1b                   je     6fbb <_dl_map_object_from_fd+0xf1b>
    0.00 :	    6fa0:       48 8b bd d8 fe ff ff    mov    -0x128(%rbp),%rdi
    0.00 :	    6fa7:       48 8d 35 22 8a 21 00    lea    0x218a22(%rip),%rsi        # 21f9d0 <_rtld_global+0x970>
    0.00 :	    6fae:       e8 cd 7b 00 00          callq  eb80 <_dl_name_match_p>
    0.00 :	    6fb3:       85 c0                   test   %eax,%eax
    0.00 :	    6fb5:       0f 84 e0 f1 ff ff       je     619b <_dl_map_object_from_fd+0xfb>
    0.00 :	    6fbb:       4c 8b 4d 20             mov    0x20(%rbp),%r9
    0.00 :	    6fbf:       44 8b 45 10             mov    0x10(%rbp),%r8d
    0.00 :	    6fc3:       44 89 fa                mov    %r15d,%edx
    0.00 :	    6fc6:       48 8b b5 d8 fe ff ff    mov    -0x128(%rbp),%rsi
    0.00 :	    6fcd:       48 8b bd c8 fe ff ff    mov    -0x138(%rbp),%rdi
    0.00 :	    6fd4:       4c 89 f1                mov    %r14,%rcx
    0.00 :	    6fd7:       e8 94 3a 00 00          callq  aa70 <_dl_new_object>
    0.00 :	    6fdc:       48 85 c0                test   %rax,%rax
    0.00 :	    6fdf:       49 89 c5                mov    %rax,%r13
    0.00 :	    6fe2:       48 8d 15 77 42 01 00    lea    0x14277(%rip),%rdx        # 1b260 <__PRETTY_FUNCTION__.3644+0xeef>
    0.00 :	    6fe9:       c6 85 0f ff ff ff 00    movb   $0x0,-0xf1(%rbp)
    0.00 :	    6ff0:       0f 84 36 f7 ff ff       je     672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    6ff6:       48 8d 05 d3 89 21 00    lea    0x2189d3(%rip),%rax        # 21f9d0 <_rtld_global+0x970>
    0.00 :	    6ffd:       49 89 45 28             mov    %rax,0x28(%r13)
    0.00 :	    7001:       8b bd d4 fe ff ff       mov    -0x12c(%rbp),%edi
    0.00 :	    7007:       e8 74 ef 00 00          callq  15f80 <__close>
    0.00 :	    700c:       48 8b 75 20             mov    0x20(%rbp),%rsi
    0.00 :	    7010:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    7013:       e8 e8 39 00 00          callq  aa00 <_dl_add_to_namespace_list>
    0.00 :	    7018:       e9 5e f1 ff ff          jmpq   617b <_dl_map_object_from_fd+0xdb>
    0.00 :	    701d:       45 31 ed                xor    %r13d,%r13d
    0.00 :	    7020:       48 8d 15 f0 29 01 00    lea    0x129f0(%rip),%rdx        # 19a17 <__PRETTY_FUNCTION__.12417+0x115>
    0.00 :	    7027:       c6 85 0f ff ff ff 00    movb   $0x0,-0xf1(%rbp)
    0.00 :	    702e:       e9 f9 f6 ff ff          jmpq   672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    7033:       48 8b 55 20             mov    0x20(%rbp),%rdx
    0.00 :	    7037:       48 8b b5 d8 fe ff ff    mov    -0x128(%rbp),%rsi
    0.00 :	    703e:       48 8d 3d 43 42 01 00    lea    0x14243(%rip),%rdi        # 1b288 <__PRETTY_FUNCTION__.3644+0xf17>
    0.00 :	    7045:       31 c0                   xor    %eax,%eax
    0.00 :	    7047:       e8 04 83 00 00          callq  f350 <_dl_debug_printf>
    0.00 :	    704c:       e9 61 f1 ff ff          jmpq   61b2 <_dl_map_object_from_fd+0x112>
    0.00 :	    7051:       48 8b b5 e0 fe ff ff    mov    -0x120(%rbp),%rsi
    0.00 :	    7058:       0f b7 7e 38             movzwl 0x38(%rsi),%edi
    0.00 :	    705c:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    7063:       48 8d 04 fd 00 00 00    lea    0x0(,%rdi,8),%rax
    0.00 :	    706a:       00 
    0.00 :	    706b:       48 c1 e7 06             shl    $0x6,%rdi
    0.00 :	    706f:       48 29 c7                sub    %rax,%rdi
    0.00 :	    7072:       e8 39 9a ff ff          callq  ab0 <malloc@plt>
    0.00 :	    7077:       48 85 c0                test   %rax,%rax
    0.00 :	    707a:       48 89 c7                mov    %rax,%rdi
    0.00 :	    707d:       48 8d 15 8c 43 01 00    lea    0x1438c(%rip),%rdx        # 1b410 <__PRETTY_FUNCTION__.3644+0x109f>
    0.00 :	    7084:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    708b:       0f 84 9b f6 ff ff       je     672c <_dl_map_object_from_fd+0x68c>
    0.00 :	    7091:       48 8b 85 e0 fe ff ff    mov    -0x120(%rbp),%rax
    0.00 :	    7098:       4c 89 d6                mov    %r10,%rsi
    0.00 :	    709b:       0f b7 50 38             movzwl 0x38(%rax),%edx
    0.00 :	    709f:       48 8d 04 d5 00 00 00    lea    0x0(,%rdx,8),%rax
    0.00 :	    70a6:       00 
    0.00 :	    70a7:       48 c1 e2 06             shl    $0x6,%rdx
    0.00 :	    70ab:       48 29 c2                sub    %rax,%rdx
    0.00 :	    70ae:       e8 3d 02 01 00          callq  172f0 <memcpy>
    0.00 :	    70b3:       41 80 8d 14 03 00 00    orb    $0x80,0x314(%r13)
    0.00 :	    70ba:       80 
    0.00 :	    70bb:       49 89 85 a0 02 00 00    mov    %rax,0x2a0(%r13)
    0.00 :	    70c2:       e9 b1 f9 ff ff          jmpq   6a78 <_dl_map_object_from_fd+0x9d8>
    0.00 :	    70c7:       45 31 db                xor    %r11d,%r11d
    0.00 :	    70ca:       f7 45 10 00 00 00 20    testl  $0x20000000,0x10(%rbp)
    0.00 :	    70d1:       48 8d 15 10 42 01 00    lea    0x14210(%rip),%rdx        # 1b2e8 <__PRETTY_FUNCTION__.3644+0xf77>
    0.00 :	    70d8:       0f 84 0e fd ff ff       je     6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    70de:       48 89 f8                mov    %rdi,%rax
    0.00 :	    70e1:       49 03 45 00             add    0x0(%r13),%rax
    0.00 :	    70e5:       49 89 85 40 03 00 00    mov    %rax,0x340(%r13)
    0.00 :	    70ec:       48 03 85 30 ff ff ff    add    -0xd0(%rbp),%rax
    0.00 :	    70f3:       49 89 85 48 03 00 00    mov    %rax,0x348(%r13)
    0.00 :	    70fa:       80 b5 20 ff ff ff 01    xorb   $0x1,-0xe0(%rbp)
    0.00 :	    7101:       80 a5 20 ff ff ff 01    andb   $0x1,-0xe0(%rbp)
    0.00 :	    7108:       c0 a5 20 ff ff ff 06    shlb   $0x6,-0xe0(%rbp)
    0.00 :	    710f:       41 0f b6 85 15 03 00    movzbl 0x315(%r13),%eax
    0.00 :	    7116:       00 
    0.00 :	    7117:       83 e0 bf                and    $0xffffffbf,%eax
    0.00 :	    711a:       0a 85 20 ff ff ff       or     -0xe0(%rbp),%al
    0.00 :	    7120:       41 88 85 15 03 00 00    mov    %al,0x315(%r13)
    0.00 :	    7127:       e9 96 f5 ff ff          jmpq   66c2 <_dl_map_object_from_fd+0x622>
    0.00 :	    712c:       48 8d 15 35 42 01 00    lea    0x14235(%rip),%rdx        # 1b368 <__PRETTY_FUNCTION__.3644+0xff7>
    0.00 :	    7133:       45 31 db                xor    %r11d,%r11d
    0.00 :	    7136:       e9 b1 fc ff ff          jmpq   6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    713b:       48 8d 0d 0e 56 01 00    lea    0x1560e(%rip),%rcx        # 1c750 <__PRETTY_FUNCTION__.12425>
    0.00 :	    7142:       48 8d 35 f2 27 01 00    lea    0x127f2(%rip),%rsi        # 1993b <__PRETTY_FUNCTION__.12417+0x39>
    0.00 :	    7149:       48 8d 3d e1 28 01 00    lea    0x128e1(%rip),%rdi        # 19a31 <__PRETTY_FUNCTION__.12417+0x12f>
    0.00 :	    7150:       ba 19 04 00 00          mov    $0x419,%edx
    0.00 :	    7155:       e8 16 dc 00 00          callq  14d70 <__GI___assert_fail>
    0.00 :	    715a:       41 0f b7 85 b0 02 00    movzwl 0x2b0(%r13),%eax
    0.00 :	    7161:       00 
    0.00 :	    7162:       49 8b 55 10             mov    0x10(%r13),%rdx
    0.00 :	    7166:       48 8d 3d 13 43 01 00    lea    0x14313(%rip),%rdi        # 1b480 <__PRETTY_FUNCTION__.3644+0x110f>
    0.00 :	    716d:       c7 44 24 28 10 00 00    movl   $0x10,0x28(%rsp)
    0.00 :	    7174:       00 
    0.00 :	    7175:       41 b9 10 00 00 00       mov    $0x10,%r9d
    0.00 :	    717b:       be 10 00 00 00          mov    $0x10,%esi
    0.00 :	    7180:       89 44 24 30             mov    %eax,0x30(%rsp)
    0.00 :	    7184:       49 8b 85 a0 02 00 00    mov    0x2a0(%r13),%rax
    0.00 :	    718b:       c7 44 24 18 10 00 00    movl   $0x10,0x18(%rsp)
    0.00 :	    7192:       00 
    0.00 :	    7193:       48 89 4c 24 10          mov    %rcx,0x10(%rsp)
    0.00 :	    7198:       c7 44 24 08 10 00 00    movl   $0x10,0x8(%rsp)
    0.00 :	    719f:       00 
    0.00 :	    71a0:       48 89 44 24 20          mov    %rax,0x20(%rsp)
    0.00 :	    71a5:       48 8b 8d 30 ff ff ff    mov    -0xd0(%rbp),%rcx
    0.00 :	    71ac:       31 c0                   xor    %eax,%eax
    0.00 :	    71ae:       48 89 0c 24             mov    %rcx,(%rsp)
    0.00 :	    71b2:       4d 8b 45 00             mov    0x0(%r13),%r8
    0.00 :	    71b6:       b9 10 00 00 00          mov    $0x10,%ecx
    0.00 :	    71bb:       e8 90 81 00 00          callq  f350 <_dl_debug_printf>
    0.00 :	    71c0:       e9 34 f9 ff ff          jmpq   6af9 <_dl_map_object_from_fd+0xa59>
    0.00 :	    71c5:       48 8b 7d 08             mov    0x8(%rbp),%rdi
    0.00 :	    71c9:       be 08 00 00 00          mov    $0x8,%esi
    0.00 :	    71ce:       ff 15 34 7b 21 00       callq  *0x217b34(%rip)        # 21ed08 <_rtld_global_ro+0xe8>
    0.00 :	    71d4:       45 31 db                xor    %r11d,%r11d
    0.00 :	    71d7:       85 c0                   test   %eax,%eax
    0.00 :	    71d9:       48 8d 15 98 28 01 00    lea    0x12898(%rip),%rdx        # 19a78 <__PRETTY_FUNCTION__.12417+0x176>
    0.00 :	    71e0:       0f 85 4d f5 ff ff       jne    6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    71e6:       8b 45 10                mov    0x10(%rbp),%eax
    0.00 :	    71e9:       25 00 00 00 88          and    $0x88000000,%eax
    0.00 :	    71ee:       3d 00 00 00 80          cmp    $0x80000000,%eax
    0.00 :	    71f3:       74 51                   je     7246 <_dl_map_object_from_fd+0x11a6>
    0.00 :	    71f5:       83 0d 04 7c 21 00 07    orl    $0x7,0x217c04(%rip)        # 21ee00 <__stack_prot>
    0.00 :	    71fc:       48 8b 7d 18             mov    0x18(%rbp),%rdi
    0.00 :	    7200:       ff 15 4a 8d 21 00       callq  *0x218d4a(%rip)        # 21ff50 <_rtld_global+0xef0>
    0.00 :	    7206:       85 c0                   test   %eax,%eax
    0.00 :	    7208:       41 89 c3                mov    %eax,%r11d
    0.00 :	    720b:       48 8d 15 2e 42 01 00    lea    0x1422e(%rip),%rdx        # 1b440 <__PRETTY_FUNCTION__.3644+0x10cf>
    0.00 :	    7212:       0f 85 1b f5 ff ff       jne    6733 <_dl_map_object_from_fd+0x693>
    0.00 :	    7218:       e9 77 f8 ff ff          jmpq   6a94 <_dl_map_object_from_fd+0x9f4>
    0.00 :	    721d:       49 8b 95 b0 00 00 00    mov    0xb0(%r13),%rdx
    0.00 :	    7224:       48 85 d2                test   %rdx,%rdx
    0.00 :	    7227:       0f 84 22 f9 ff ff       je     6b4f <_dl_map_object_from_fd+0xaaf>
    0.00 :	    722d:       49 8b 45 68             mov    0x68(%r13),%rax
    0.00 :	    7231:       4c 89 ef                mov    %r13,%rdi
    0.00 :	    7234:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	    7238:       48 03 72 08             add    0x8(%rdx),%rsi
    0.00 :	    723c:       e8 ef e0 ff ff          callq  5330 <add_name_to_object>
    0.00 :	    7241:       e9 09 f9 ff ff          jmpq   6b4f <_dl_map_object_from_fd+0xaaf>
    0.00 :	    7246:       48 8b 15 eb 79 21 00    mov    0x2179eb(%rip),%rdx        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    724d:       48 8d 05 ac 7b 21 00    lea    0x217bac(%rip),%rax        # 21ee00 <__stack_prot>
    0.00 :	    7254:       48 8d 1d a9 7b 21 00    lea    0x217ba9(%rip),%rbx        # 21ee04 <__stack_prot+0x4>
    0.00 :	    725b:       48 f7 da                neg    %rdx
    0.00 :	    725e:       49 89 d4                mov    %rdx,%r12
    0.00 :	    7261:       49 21 c4                and    %rax,%r12
    0.00 :	    7264:       48 8b 05 bd 8b 21 00    mov    0x218bbd(%rip),%rax        # 21fe28 <_rtld_global+0xdc8>
    0.00 :	    726b:       48 03 05 5e 87 21 00    add    0x21875e(%rip),%rax        # 21f9d0 <_rtld_global+0x970>
    0.00 :	    7272:       48 03 05 b7 8b 21 00    add    0x218bb7(%rip),%rax        # 21fe30 <_rtld_global+0xdd0>
    0.00 :	    7279:       4c 29 e3                sub    %r12,%rbx
    0.00 :	    727c:       48 21 d0                and    %rdx,%rax
    0.00 :	    727f:       4a 8d 14 23             lea    (%rbx,%r12,1),%rdx
    0.00 :	    7283:       48 39 d0                cmp    %rdx,%rax
    0.00 :	    7286:       0f 82 69 ff ff ff       jb     71f5 <_dl_map_object_from_fd+0x1155>
    0.00 :	    728c:       48 89 de                mov    %rbx,%rsi
    0.00 :	    728f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    7292:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	    7297:       e8 94 ef 00 00          callq  16230 <__mprotect>
    0.00 :	    729c:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	    72a1:       48 89 de                mov    %rbx,%rsi
    0.00 :	    72a4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    72a7:       83 0d 52 7b 21 00 07    orl    $0x7,0x217b52(%rip)        # 21ee00 <__stack_prot>
    0.00 :	    72ae:       e8 7d ef 00 00          callq  16230 <__mprotect>
    0.00 :	    72b3:       e9 44 ff ff ff          jmpq   71fc <_dl_map_object_from_fd+0x115c>
    0.00 :	    72b8:       48 8d 15 71 35 01 00    lea    0x13571(%rip),%rdx        # 1a830 <__PRETTY_FUNCTION__.3644+0x4bf>
    0.00 :	    72bf:       41 bb 0c 00 00 00       mov    $0xc,%r11d
    0.00 :	    72c5:       e9 22 fb ff ff          jmpq   6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    72ca:       48 8d 15 75 27 01 00    lea    0x12775(%rip),%rdx        # 19a46 <__PRETTY_FUNCTION__.12417+0x144>
    0.00 :	    72d1:       45 31 db                xor    %r11d,%r11d
    0.00 :	    72d4:       e9 13 fb ff ff          jmpq   6dec <_dl_map_object_from_fd+0xd4c>
    0.00 :	    72d9:       48 8b 05 80 8c 21 00    mov    0x218c80(%rip),%rax        # 21ff60 <_rtld_global+0xf00>
    0.00 :	    72e0:       4d 89 e6                mov    %r12,%r14
    0.00 :	    72e3:       48 83 c0 01             add    $0x1,%rax
    0.00 :	    72e7:       48 89 05 72 8c 21 00    mov    %rax,0x218c72(%rip)        # 21ff60 <_rtld_global+0xf00>
    0.00 :	    72ee:       49 89 85 50 04 00 00    mov    %rax,0x450(%r13)
    0.00 :	    72f5:       41 0f b7 8d b0 02 00    movzwl 0x2b0(%r13),%ecx
    0.00 :	    72fc:       00 
    0.00 :	    72fd:       e9 f3 ef ff ff          jmpq   62f5 <_dl_map_object_from_fd+0x255>
    0.00 :	    7302:       83 ca 02                or     $0x2,%edx
    0.00 :	    7305:       4c 21 e7                and    %r12,%rdi
    0.00 :	    7308:       4c 89 95 b8 fe ff ff    mov    %r10,-0x148(%rbp)
    0.00 :	    730f:       4c 89 9d b0 fe ff ff    mov    %r11,-0x150(%rbp)
    0.00 :	    7316:       e8 15 ef 00 00          callq  16230 <__mprotect>
    0.00 :	    731b:       85 c0                   test   %eax,%eax
    0.00 :	    731d:       48 8d 15 ec 3f 01 00    lea    0x13fec(%rip),%rdx        # 1b310 <__PRETTY_FUNCTION__.3644+0xf9f>
    0.00 :	    7324:       4c 8b 95 b8 fe ff ff    mov    -0x148(%rbp),%r10
    0.00 :	    732b:       4c 8b 9d b0 fe ff ff    mov    -0x150(%rbp),%r11
    0.00 :	    7332:       0f 89 f4 f4 ff ff       jns    682c <_dl_map_object_from_fd+0x78c>
    0.00 :	    7338:       e9 e8 f3 ff ff          jmpq   6725 <_dl_map_object_from_fd+0x685>
    0.00 :	    733d:       48 8d 0d 2c 53 01 00    lea    0x1532c(%rip),%rcx        # 1c670 <__PRETTY_FUNCTION__.11639>
    0.00 :	    7344:       48 8d 35 c3 21 01 00    lea    0x121c3(%rip),%rsi        # 1950e <intel_02_known+0x22e>
    0.00 :	    734b:       48 8d 3d 6e 31 01 00    lea    0x1316e(%rip),%rdi        # 1a4c0 <__PRETTY_FUNCTION__.3644+0x14f>
    0.00 :	    7352:       ba c3 00 00 00          mov    $0xc3,%edx
    0.00 :	    7357:       e8 14 da 00 00          callq  14d70 <__GI___assert_fail>
    0.00 :	    735c:       48 8d 0d 0d 53 01 00    lea    0x1530d(%rip),%rcx        # 1c670 <__PRETTY_FUNCTION__.11639>
    0.00 :	    7363:       48 8d 35 a4 21 01 00    lea    0x121a4(%rip),%rsi        # 1950e <intel_02_known+0x22e>
    0.00 :	    736a:       48 8d 3d ac 21 01 00    lea    0x121ac(%rip),%rdi        # 1951d <intel_02_known+0x23d>
    0.00 :	    7371:       ba bb 00 00 00          mov    $0xbb,%edx
    0.00 :	    7376:       e8 f5 d9 00 00          callq  14d70 <__GI___assert_fail>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	0000000000469420 <memset@plt>:
 ??:0
  100.00 :	  469420:       ff 25 52 dc 6f 00       jmpq   *0x6fdc52(%rip)        # b67078 <_GLOBAL_OFFSET_TABLE_+0x78>
    0.00 :	  469426:       68 0c 00 00 00          pushq  $0xc
    0.00 :	  46942b:       e9 20 ff ff ff          jmpq   469350 <_init+0x20>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	0000000000469bf0 <memcpy@plt>:
 ??:0
  100.00 :	  469bf0:       ff 25 6a d8 6f 00       jmpq   *0x6fd86a(%rip)        # b67460 <_GLOBAL_OFFSET_TABLE_+0x460>
    0.00 :	  469bf6:       68 89 00 00 00          pushq  $0x89
    0.00 :	  469bfb:       e9 50 f7 ff ff          jmpq   469350 <_init+0x20>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490350 <hash_any>:
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  490350:       55                      push   %rbp
    0.00 :	  490351:       41 89 f2                mov    %esi,%r10d
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490354:       40 f6 c7 03             test   $0x3,%dil
         :	                                c,
         :	                                len;
         :
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
    0.00 :	  490358:       45 8d 82 50 56 73 9e    lea    -0x618ca9b0(%r10),%r8d
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  49035f:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  490362:       53                      push   %rbx
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490363:       0f 84 f7 00 00 00       je     490460 <hash_any+0x110>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490369:       83 fe 0b                cmp    $0xb,%esi
         :	                                /* fall through */
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
         :	                                /* fall through */
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49036c:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  49036f:       44 89 c2                mov    %r8d,%edx
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490372:       0f 86 7e 02 00 00       jbe    4905f6 <hash_any+0x2a6>
    0.00 :	  490378:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49037f:       00 
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  490380:       0f b6 4f 05             movzbl 0x5(%rdi),%ecx
    0.00 :	  490384:       0f b6 47 06             movzbl 0x6(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490388:       0f b6 77 09             movzbl 0x9(%rdi),%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49038c:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49038f:       c1 e1 08                shl    $0x8,%ecx
    0.00 :	  490392:       01 c1                   add    %eax,%ecx
    0.00 :	  490394:       0f b6 47 04             movzbl 0x4(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490398:       c1 e6 08                shl    $0x8,%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49039b:       01 c1                   add    %eax,%ecx
    0.00 :	  49039d:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  4903a1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903a4:       01 c1                   add    %eax,%ecx
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903a6:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  4903aa:       01 d1                   add    %edx,%ecx
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ac:       0f b6 57 01             movzbl 0x1(%rdi),%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903b0:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903b3:       01 c6                   add    %eax,%esi
    0.00 :	  4903b5:       0f b6 47 08             movzbl 0x8(%rdi),%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903b9:       c1 e2 08                shl    $0x8,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903bc:       01 c6                   add    %eax,%esi
    0.00 :	  4903be:       0f b6 47 0b             movzbl 0xb(%rdi),%eax
    0.00 :	  4903c2:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903c5:       01 c6                   add    %eax,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903c7:       0f b6 47 02             movzbl 0x2(%rdi),%eax
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903cb:       44 01 c6                add    %r8d,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ce:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903d1:       01 c2                   add    %eax,%edx
    0.00 :	  4903d3:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  4903d6:       01 c2                   add    %eax,%edx
    0.00 :	  4903d8:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  4903dc:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903df:       01 c2                   add    %eax,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e1:       89 f0                   mov    %esi,%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903e3:       44 01 ca                add    %r9d,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e6:       c1 c8 1c                ror    $0x1c,%eax
    0.00 :	  4903e9:       29 f2                   sub    %esi,%edx
    0.00 :	  4903eb:       01 ce                   add    %ecx,%esi
    0.00 :	  4903ed:       31 c2                   xor    %eax,%edx
    0.00 :	  4903ef:       89 d0                   mov    %edx,%eax
    0.00 :	  4903f1:       29 d1                   sub    %edx,%ecx
    0.00 :	  4903f3:       01 f2                   add    %esi,%edx
    0.00 :	  4903f5:       c1 c8 1a                ror    $0x1a,%eax
    0.00 :	  4903f8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4903fa:       89 c1                   mov    %eax,%ecx
    0.00 :	  4903fc:       29 c6                   sub    %eax,%esi
    0.00 :	  4903fe:       01 d0                   add    %edx,%eax
    0.00 :	  490400:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  490403:       31 f1                   xor    %esi,%ecx
    0.00 :	  490405:       89 ce                   mov    %ecx,%esi
    0.00 :	  490407:       29 ca                   sub    %ecx,%edx
    0.00 :	  490409:       01 c1                   add    %eax,%ecx
    0.00 :	  49040b:       c1 ce 10                ror    $0x10,%esi
         :	                        k += 12;
         :	                        len -= 12;
    0.00 :	  49040e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
         :	                        k += 12;
    0.00 :	  490412:       48 83 c7 0c             add    $0xc,%rdi
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  490416:       31 d6                   xor    %edx,%esi
    0.00 :	  490418:       89 f2                   mov    %esi,%edx
    0.00 :	  49041a:       29 f0                   sub    %esi,%eax
    0.00 :	  49041c:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  490420:       c1 ca 0d                ror    $0xd,%edx
    0.00 :	  490423:       31 c2                   xor    %eax,%edx
    0.00 :	  490425:       41 89 d0                mov    %edx,%r8d
    0.00 :	  490428:       29 d1                   sub    %edx,%ecx
    0.00 :	  49042a:       44 01 ca                add    %r9d,%edx
    0.00 :	  49042d:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  490431:       41 31 c8                xor    %ecx,%r8d
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490434:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  490438:       0f 87 42 ff ff ff       ja     490380 <hash_any+0x30>
    0.00 :	  49043e:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  490441:       89 d6                   mov    %edx,%esi
    0.00 :	  490443:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
    0.00 :	  490446:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  49044a:       0f 87 01 01 00 00       ja     490551 <hash_any+0x201>
    0.00 :	  490450:       44 89 d0                mov    %r10d,%eax
    0.00 :	  490453:       ff 24 c5 18 22 7b 00    jmpq   *0x7b2218(,%rax,8)
    0.00 :	  49045a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490460:       83 fe 0b                cmp    $0xb,%esi
    0.00 :	  490463:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  490466:       44 89 c1                mov    %r8d,%ecx
    0.00 :	  490469:       0f 86 79 01 00 00       jbe    4905e8 <hash_any+0x298>
    0.00 :	  49046f:       90                      nop
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
    0.00 :	  490470:       44 89 c6                mov    %r8d,%esi
    0.00 :	  490473:       03 77 08                add    0x8(%rdi),%esi
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
    0.00 :	  490476:       44 89 c8                mov    %r9d,%eax
    0.00 :	  490479:       03 07                   add    (%rdi),%eax
         :	                        b += ka[1];
    0.00 :	  49047b:       03 4f 04                add    0x4(%rdi),%ecx
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
         :	                        len -= 12;
    0.00 :	  49047e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
    0.00 :	  490482:       48 83 c7 0c             add    $0xc,%rdi
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  490486:       89 f2                   mov    %esi,%edx
    0.00 :	  490488:       29 f0                   sub    %esi,%eax
    0.00 :	  49048a:       c1 ca 1c                ror    $0x1c,%edx
    0.00 :	  49048d:       01 ce                   add    %ecx,%esi
    0.00 :	  49048f:       31 d0                   xor    %edx,%eax
    0.00 :	  490491:       89 c2                   mov    %eax,%edx
    0.00 :	  490493:       29 c1                   sub    %eax,%ecx
    0.00 :	  490495:       01 f0                   add    %esi,%eax
    0.00 :	  490497:       c1 ca 1a                ror    $0x1a,%edx
    0.00 :	  49049a:       31 ca                   xor    %ecx,%edx
    0.00 :	  49049c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49049e:       29 d6                   sub    %edx,%esi
    0.00 :	  4904a0:       01 c2                   add    %eax,%edx
    0.00 :	  4904a2:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  4904a5:       31 f1                   xor    %esi,%ecx
    0.00 :	  4904a7:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904a9:       29 c8                   sub    %ecx,%eax
    0.00 :	  4904ab:       01 d1                   add    %edx,%ecx
    0.00 :	  4904ad:       c1 ce 10                ror    $0x10,%esi
    0.00 :	  4904b0:       31 c6                   xor    %eax,%esi
    0.00 :	  4904b2:       89 f0                   mov    %esi,%eax
    0.00 :	  4904b4:       29 f2                   sub    %esi,%edx
    0.00 :	  4904b6:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  4904ba:       c1 c8 0d                ror    $0xd,%eax
    0.00 :	  4904bd:       31 d0                   xor    %edx,%eax
    0.00 :	  4904bf:       41 89 c0                mov    %eax,%r8d
    0.00 :	  4904c2:       29 c1                   sub    %eax,%ecx
    0.00 :	  4904c4:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  4904c8:       41 31 c8                xor    %ecx,%r8d
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904cb:       41 83 fa 0b             cmp    $0xb,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  4904cf:       42 8d 0c 08             lea    (%rax,%r9,1),%ecx
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904d3:       77 9b                   ja     490470 <hash_any+0x120>
    0.00 :	  4904d5:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4904d8:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904da:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
    0.00 :	  4904dd:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  4904e1:       77 6e                   ja     490551 <hash_any+0x201>
    0.00 :	  4904e3:       44 89 d0                mov    %r10d,%eax
    0.00 :	  4904e6:       ff 24 c5 78 22 7b 00    jmpq   *0x7b2278(,%rax,8)
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4904ed:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4904f1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4904f4:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4904f8:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4904fc:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4904ff:       01 c3                   add    %eax,%ebx
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  490501:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  490505:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490508:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                        case 8:
         :	                                b += ((uint32) k[7] << 24);
    0.00 :	  49050a:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  49050e:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490511:       8d 34 10                lea    (%rax,%rdx,1),%esi
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  490514:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  490518:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49051b:       01 c6                   add    %eax,%esi
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  49051d:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  490521:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490524:       01 c6                   add    %eax,%esi
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  490526:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  49052a:       01 c6                   add    %eax,%esi
         :	                        case 4:
         :	                                a += ((uint32) k[3] << 24);
    0.00 :	  49052c:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  490530:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490533:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490537:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  49053b:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49053e:       41 01 c3                add    %eax,%r11d
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
    0.00 :	  490541:       0f b6 47 01             movzbl 0x1(%rdi),%eax
    0.00 :	  490545:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490548:       41 01 c3                add    %eax,%r11d
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49054b:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  49054e:       41 01 c3                add    %eax,%r11d
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#endif   /* WORDS_BIGENDIAN */
         :	        }
         :
         :	        final(a, b, c);
    0.00 :	  490551:       89 da                   mov    %ebx,%edx
    0.00 :	  490553:       89 f0                   mov    %esi,%eax
    0.00 :	  490555:       31 f2                   xor    %esi,%edx
    0.00 :	  490557:       c1 c8 12                ror    $0x12,%eax
    0.00 :	  49055a:       29 c2                   sub    %eax,%edx
    0.00 :	  49055c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49055e:       89 d0                   mov    %edx,%eax
    0.00 :	  490560:       c1 c8 15                ror    $0x15,%eax
    0.00 :	  490563:       44 31 d9                xor    %r11d,%ecx
    0.00 :	  490566:       29 c1                   sub    %eax,%ecx
    0.00 :	  490568:       89 c8                   mov    %ecx,%eax
    0.00 :	  49056a:       31 ce                   xor    %ecx,%esi
    0.00 :	  49056c:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49056f:       29 c6                   sub    %eax,%esi
    0.00 :	  490571:       89 f0                   mov    %esi,%eax
    0.00 :	  490573:       31 d0                   xor    %edx,%eax
    0.00 :	  490575:       89 f2                   mov    %esi,%edx
    0.00 :	  490577:       c1 ca 10                ror    $0x10,%edx
    0.00 :	  49057a:       29 d0                   sub    %edx,%eax
    0.00 :	  49057c:       89 c2                   mov    %eax,%edx
    0.00 :	  49057e:       31 ca                   xor    %ecx,%edx
    0.00 :	  490580:       89 c1                   mov    %eax,%ecx
    0.00 :	  490582:       c1 c9 1c                ror    $0x1c,%ecx
    0.00 :	  490585:       29 ca                   sub    %ecx,%edx
    0.00 :	  490587:       89 d1                   mov    %edx,%ecx
    0.00 :	  490589:       c1 ca 12                ror    $0x12,%edx
    0.00 :	  49058c:       31 f1                   xor    %esi,%ecx
    0.00 :	  49058e:       29 d1                   sub    %edx,%ecx
    0.00 :	  490590:       31 c8                   xor    %ecx,%eax
    0.00 :	  490592:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  490595:       29 c8                   sub    %ecx,%eax
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490597:       5b                      pop    %rbx
    0.00 :	  490598:       c9                      leaveq 
    0.00 :	  490599:       c3                      retq   
         :	                        case 8:
         :	                                b += ka[1];
         :	                                a += ka[0];
         :	                                break;
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  49059a:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  49059e:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905a1:       8d 34 08                lea    (%rax,%rcx,1),%esi
         :	                                /* fall through */
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  4905a4:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  4905a8:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905ab:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  4905ad:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  4905b1:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
    0.00 :	  4905b3:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4905b6:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905b9:       eb 96                   jmp    490551 <hash_any+0x201>
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4905bb:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4905bf:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4905c2:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                                /* fall through */
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4905c6:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4905ca:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905cd:       01 c3                   add    %eax,%ebx
         :	                                /* fall through */
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  4905cf:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  4905d3:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905d6:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
  100.00 :	  4905d8:       89 ce                   mov    %ecx,%esi
         :	                                a += ka[0];
    0.00 :	  4905da:       45 89 cb                mov    %r9d,%r11d
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
    0.00 :	  4905dd:       03 77 04                add    0x4(%rdi),%esi
         :	                                a += ka[0];
    0.00 :	  4905e0:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905e3:       e9 69 ff ff ff          jmpq   490551 <hash_any+0x201>
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905e8:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905eb:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905ee:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905f1:       e9 e7 fe ff ff          jmpq   4904dd <hash_any+0x18d>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905f6:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905f9:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905fc:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905ff:       e9 42 fe ff ff          jmpq   490446 <hash_any+0xf6>
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
         :	                                break;
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490604:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  490608:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49060b:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
    0.00 :	  49060f:       e9 2d ff ff ff          jmpq   490541 <hash_any+0x1f1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004906f0 <hashint4>:
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4906f0:       55                      push   %rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
  100.00 :	  4906f1:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4906f5:       48 89 e5                mov    %rsp,%rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
         :	}
    0.00 :	  4906f8:       c9                      leaveq 
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
         :	        return hash_uint32(PG_GETARG_INT32(0));
    0.00 :	  4906f9:       e9 62 ff ff ff          jmpq   490660 <hash_uint32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/syncscan.c:305
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a0e20 <ss_report_location>:
         :	 * (relfilenode, blocknumber), overwriting any existing entry for the
         :	 * same relfilenode.
         :	 */
         :	void
         :	ss_report_location(Relation rel, BlockNumber location)
         :	{
    0.00 :	  4a0e20:       55                      push   %rbp
         :	         * Missing a few updates isn't critical, it just means that a new scan
         :	         * that wants to join the pack will start a little bit behind the head of
         :	         * the scan.  Hopefully the pages are still in OS cache and the scan
         :	         * catches up quickly.
         :	         */
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/syncscan.c:305
  100.00 :	  4a0e21:       40 f6 c6 0f             test   $0xf,%sil
         :	 * (relfilenode, blocknumber), overwriting any existing entry for the
         :	 * same relfilenode.
         :	 */
         :	void
         :	ss_report_location(Relation rel, BlockNumber location)
         :	{
    0.00 :	  4a0e25:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4a0e28:       41 54                   push   %r12
    0.00 :	  4a0e2a:       41 89 f4                mov    %esi,%r12d
    0.00 :	  4a0e2d:       53                      push   %rbx
    0.00 :	  4a0e2e:       48 89 fb                mov    %rdi,%rbx
         :	         * Missing a few updates isn't critical, it just means that a new scan
         :	         * that wants to join the pack will start a little bit behind the head of
         :	         * the scan.  Hopefully the pages are still in OS cache and the scan
         :	         * catches up quickly.
         :	         */
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
    0.00 :	  4a0e31:       74 0d                   je     4a0e40 <ss_report_location+0x20>
         :	                        elog(LOG,
         :	                                 "SYNC_SCAN: missed update for \"%s\" at %u",
         :	                                 RelationGetRelationName(rel), location);
         :	#endif
         :	        }
         :	}
    0.00 :	  4a0e33:       5b                      pop    %rbx
    0.00 :	  4a0e34:       41 5c                   pop    %r12
    0.00 :	  4a0e36:       c9                      leaveq 
    0.00 :	  4a0e37:       c3                      retq   
    0.00 :	  4a0e38:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4a0e3f:       00 
         :	         * the scan.  Hopefully the pages are still in OS cache and the scan
         :	         * catches up quickly.
         :	         */
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
         :	        {
         :	                if (LWLockConditionalAcquire(SyncScanLock, LW_EXCLUSIVE))
    0.00 :	  4a0e40:       48 8b 3d b9 cb 6d 00    mov    0x6dcbb9(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  4a0e47:       31 f6                   xor    %esi,%esi
    0.00 :	  4a0e49:       48 81 c7 00 03 00 00    add    $0x300,%rdi
    0.00 :	  4a0e50:       e8 4b e1 1e 00          callq  68efa0 <LWLockConditionalAcquire>
    0.00 :	  4a0e55:       84 c0                   test   %al,%al
    0.00 :	  4a0e57:       74 da                   je     4a0e33 <ss_report_location+0x13>
         :	static BlockNumber
         :	ss_search(RelFileNode relfilenode, BlockNumber location, bool set)
         :	{
         :	        ss_lru_item_t *item;
         :
         :	        item = scan_locations->head;
    0.00 :	  4a0e59:       48 8b 35 a0 7e 6d 00    mov    0x6d7ea0(%rip),%rsi        # b78d00 <scan_locations>
         :	         */
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
         :	        {
         :	                if (LWLockConditionalAcquire(SyncScanLock, LW_EXCLUSIVE))
         :	                {
         :	                        (void) ss_search(rel->rd_node, location, true);
    0.00 :	  4a0e60:       8b 53 08                mov    0x8(%rbx),%edx
    0.00 :	  4a0e63:       44 8b 43 04             mov    0x4(%rbx),%r8d
    0.00 :	  4a0e67:       8b 3b                   mov    (%rbx),%edi
         :	static BlockNumber
         :	ss_search(RelFileNode relfilenode, BlockNumber location, bool set)
         :	{
         :	        ss_lru_item_t *item;
         :
         :	        item = scan_locations->head;
    0.00 :	  4a0e69:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	  4a0e6c:       eb 0e                   jmp    4a0e7c <ss_report_location+0x5c>
    0.00 :	  4a0e6e:       66 90                   xchg   %ax,%ax
         :	        {
         :	                bool            match;
         :
         :	                match = RelFileNodeEquals(item->location.relfilenode, relfilenode);
         :
         :	                if (match || item->next == NULL)
    0.00 :	  4a0e70:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  4a0e74:       48 85 c0                test   %rax,%rax
    0.00 :	  4a0e77:       74 6f                   je     4a0ee8 <ss_report_location+0xc8>
    0.00 :	  4a0e79:       48 89 c1                mov    %rax,%rcx
         :	        item = scan_locations->head;
         :	        for (;;)
         :	        {
         :	                bool            match;
         :
         :	                match = RelFileNodeEquals(item->location.relfilenode, relfilenode);
    0.00 :	  4a0e7c:       39 51 18                cmp    %edx,0x18(%rcx)
    0.00 :	  4a0e7f:       75 ef                   jne    4a0e70 <ss_report_location+0x50>
    0.00 :	  4a0e81:       44 39 41 14             cmp    %r8d,0x14(%rcx)
    0.00 :	  4a0e85:       75 e9                   jne    4a0e70 <ss_report_location+0x50>
    0.00 :	  4a0e87:       39 79 10                cmp    %edi,0x10(%rcx)
    0.00 :	  4a0e8a:       75 e4                   jne    4a0e70 <ss_report_location+0x50>
         :	                         * the last entry
         :	                         */
         :	                        if (!match)
         :	                        {
         :	                                item->location.relfilenode = relfilenode;
         :	                                item->location.location = location;
    0.00 :	  4a0e8c:       44 89 61 1c             mov    %r12d,0x1c(%rcx)
         :	                        }
         :	                        else if (set)
         :	                                item->location.location = location;
         :
         :	                        /* Move the entry to the front of the LRU list */
         :	                        if (item != scan_locations->head)
    0.00 :	  4a0e90:       48 3b 0e                cmp    (%rsi),%rcx
    0.00 :	  4a0e93:       74 37                   je     4a0ecc <ss_report_location+0xac>
         :	                        {
         :	                                /* unlink */
         :	                                if (item == scan_locations->tail)
    0.00 :	  4a0e95:       48 3b 4e 08             cmp    0x8(%rsi),%rcx
    0.00 :	  4a0e99:       74 5d                   je     4a0ef8 <ss_report_location+0xd8>
         :	                                        scan_locations->tail = item->prev;
         :	                                item->prev->next = item->next;
    0.00 :	  4a0e9b:       48 8b 11                mov    (%rcx),%rdx
    0.00 :	  4a0e9e:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  4a0ea2:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                                if (item->next)
    0.00 :	  4a0ea6:       48 8b 51 08             mov    0x8(%rcx),%rdx
    0.00 :	  4a0eaa:       48 85 d2                test   %rdx,%rdx
    0.00 :	  4a0ead:       74 06                   je     4a0eb5 <ss_report_location+0x95>
         :	                                        item->next->prev = item->prev;
    0.00 :	  4a0eaf:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  4a0eb2:       48 89 02                mov    %rax,(%rdx)
         :
         :	                                /* link */
         :	                                item->prev = NULL;
    0.00 :	  4a0eb5:       48 c7 01 00 00 00 00    movq   $0x0,(%rcx)
         :	                                item->next = scan_locations->head;
    0.00 :	  4a0ebc:       48 8b 06                mov    (%rsi),%rax
    0.00 :	  4a0ebf:       48 89 41 08             mov    %rax,0x8(%rcx)
         :	                                scan_locations->head->prev = item;
    0.00 :	  4a0ec3:       48 8b 06                mov    (%rsi),%rax
    0.00 :	  4a0ec6:       48 89 08                mov    %rcx,(%rax)
         :	                                scan_locations->head = item;
    0.00 :	  4a0ec9:       48 89 0e                mov    %rcx,(%rsi)
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
         :	        {
         :	                if (LWLockConditionalAcquire(SyncScanLock, LW_EXCLUSIVE))
         :	                {
         :	                        (void) ss_search(rel->rd_node, location, true);
         :	                        LWLockRelease(SyncScanLock);
    0.00 :	  4a0ecc:       48 8b 3d 2d cb 6d 00    mov    0x6dcb2d(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	                        elog(LOG,
         :	                                 "SYNC_SCAN: missed update for \"%s\" at %u",
         :	                                 RelationGetRelationName(rel), location);
         :	#endif
         :	        }
         :	}
    0.00 :	  4a0ed3:       5b                      pop    %rbx
    0.00 :	  4a0ed4:       41 5c                   pop    %r12
    0.00 :	  4a0ed6:       c9                      leaveq 
         :	        if ((location % SYNC_SCAN_REPORT_INTERVAL) == 0)
         :	        {
         :	                if (LWLockConditionalAcquire(SyncScanLock, LW_EXCLUSIVE))
         :	                {
         :	                        (void) ss_search(rel->rd_node, location, true);
         :	                        LWLockRelease(SyncScanLock);
    0.00 :	  4a0ed7:       48 81 c7 00 03 00 00    add    $0x300,%rdi
    0.00 :	  4a0ede:       e9 bd e4 1e 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  4a0ee3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * If we reached the end of list and no match was found, take over
         :	                         * the last entry
         :	                         */
         :	                        if (!match)
         :	                        {
         :	                                item->location.relfilenode = relfilenode;
    0.00 :	  4a0ee8:       89 79 10                mov    %edi,0x10(%rcx)
    0.00 :	  4a0eeb:       44 89 41 14             mov    %r8d,0x14(%rcx)
    0.00 :	  4a0eef:       89 51 18                mov    %edx,0x18(%rcx)
    0.00 :	  4a0ef2:       eb 98                   jmp    4a0e8c <ss_report_location+0x6c>
    0.00 :	  4a0ef4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        /* Move the entry to the front of the LRU list */
         :	                        if (item != scan_locations->head)
         :	                        {
         :	                                /* unlink */
         :	                                if (item == scan_locations->tail)
         :	                                        scan_locations->tail = item->prev;
    0.00 :	  4a0ef8:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  4a0efb:       48 89 46 08             mov    %rax,0x8(%rsi)
    0.00 :	  4a0eff:       eb 9a                   jmp    4a0e9b <ss_report_location+0x7b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:233
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004acf70 <_bt_moveright>:
         :	                          ScanKey scankey,
         :	                          bool nextkey,
         :	                          bool forupdate,
         :	                          BTStack stack,
         :	                          int access)
         :	{
    0.00 :	  4acf70:       55                      push   %rbp
         :	         * needed.
         :	         *
         :	         * We also have to move right if we followed a link that brought us to a
         :	         * dead page.
         :	         */
         :	        cmpval = nextkey ? 0 : 1;
    0.00 :	  4acf71:       31 c0                   xor    %eax,%eax
         :	                          ScanKey scankey,
         :	                          bool nextkey,
         :	                          bool forupdate,
         :	                          BTStack stack,
         :	                          int access)
         :	{
    0.00 :	  4acf73:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4acf76:       41 57                   push   %r15
    0.00 :	  4acf78:       45 89 cf                mov    %r9d,%r15d
    0.00 :	  4acf7b:       41 56                   push   %r14
    0.00 :	  4acf7d:       41 55                   push   %r13
    0.00 :	  4acf7f:       49 89 fd                mov    %rdi,%r13
    0.00 :	  4acf82:       41 54                   push   %r12
    0.00 :	  4acf84:       41 89 f4                mov    %esi,%r12d
    0.00 :	  4acf87:       53                      push   %rbx
    0.00 :	  4acf88:       48 83 ec 18             sub    $0x18,%rsp
         :	         * needed.
         :	         *
         :	         * We also have to move right if we followed a link that brought us to a
         :	         * dead page.
         :	         */
         :	        cmpval = nextkey ? 0 : 1;
    0.00 :	  4acf8c:       45 84 c0                test   %r8b,%r8b
         :	                          ScanKey scankey,
         :	                          bool nextkey,
         :	                          bool forupdate,
         :	                          BTStack stack,
         :	                          int access)
         :	{
    0.00 :	  4acf8f:       44 8b 75 18             mov    0x18(%rbp),%r14d
         :	         * needed.
         :	         *
         :	         * We also have to move right if we followed a link that brought us to a
         :	         * dead page.
         :	         */
         :	        cmpval = nextkey ? 0 : 1;
    0.00 :	  4acf93:       0f 94 c0                sete   %al
         :	                          ScanKey scankey,
         :	                          bool nextkey,
         :	                          bool forupdate,
         :	                          BTStack stack,
         :	                          int access)
         :	{
    0.00 :	  4acf96:       89 55 cc                mov    %edx,-0x34(%rbp)
    0.00 :	  4acf99:       48 89 4d c0             mov    %rcx,-0x40(%rbp)
         :	         * needed.
         :	         *
         :	         * We also have to move right if we followed a link that brought us to a
         :	         * dead page.
         :	         */
         :	        cmpval = nextkey ? 0 : 1;
    0.00 :	  4acf9d:       89 45 d0                mov    %eax,-0x30(%rbp)
         :
         :	        for (;;)
         :	        {
         :	                page = BufferGetPage(buf);
    0.00 :	  4acfa0:       45 85 e4                test   %r12d,%r12d
    0.00 :	  4acfa3:       78 70                   js     4ad015 <_bt_moveright+0xa5>
    0.00 :	  4acfa5:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  4acfaa:       48 63 c8                movslq %eax,%rcx
    0.00 :	  4acfad:       48 c1 e1 0d             shl    $0xd,%rcx
    0.00 :	  4acfb1:       48 03 0d 40 2b 71 00    add    0x712b40(%rip),%rcx        # bbfaf8 <BufferBlocks>
         :	                opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4acfb8:       0f b7 41 10             movzwl 0x10(%rcx),%eax
    0.00 :	  4acfbc:       48 8d 1c 01             lea    (%rcx,%rax,1),%rbx
         :
         :	                if (P_RIGHTMOST(opaque))
    0.00 :	  4acfc0:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  4acfc3:       85 d2                   test   %edx,%edx
    0.00 :	  4acfc5:       74 6f                   je     4ad036 <_bt_moveright+0xc6>
         :	                        break;
         :
         :	                /*
         :	                 * Finish any incomplete splits we encounter along the way.
         :	                 */
         :	                if (forupdate && P_INCOMPLETE_SPLIT(opaque))
    0.00 :	  4acfc7:       45 84 ff                test   %r15b,%r15b
    0.00 :	  4acfca:       0f 84 88 00 00 00       je     4ad058 <_bt_moveright+0xe8>
    0.00 :	  4acfd0:       0f b7 43 0c             movzwl 0xc(%rbx),%eax
    0.00 :	  4acfd4:       84 c0                   test   %al,%al
    0.00 :	  4acfd6:       0f 88 8c 00 00 00       js     4ad068 <_bt_moveright+0xf8>
         :	                        /* re-acquire the lock in the right mode, and re-check */
         :	                        buf = _bt_getbuf(rel, blkno, access);
         :	                        continue;
         :	                }
         :
         :	                if (P_IGNORE(opaque) || _bt_compare(rel, keysz, scankey, page, P_HIKEY) >= cmpval)
    0.00 :	  4acfdc:       a8 14                   test   $0x14,%al
    0.00 :	  4acfde:       66 90                   xchg   %ax,%ax
    0.00 :	  4acfe0:       75 1d                   jne    4acfff <_bt_moveright+0x8f>
    0.00 :	  4acfe2:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  4acfe6:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  4acfe9:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  4acfef:       4c 89 ef                mov    %r13,%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/access/nbtree/nbtsearch.c:233
  100.00 :	  4acff2:       e8 59 fc ff ff          callq  4acc50 <_bt_compare>
    0.00 :	  4acff7:       39 45 d0                cmp    %eax,-0x30(%rbp)
    0.00 :	  4acffa:       7f 3a                   jg     4ad036 <_bt_moveright+0xc6>
    0.00 :	  4acffc:       8b 53 04                mov    0x4(%rbx),%edx
         :	                {
         :	                        /* step right one page */
         :	                        buf = _bt_relandgetbuf(rel, buf, opaque->btpo_next, access);
    0.00 :	  4acfff:       44 89 e6                mov    %r12d,%esi
    0.00 :	  4ad002:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  4ad005:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad008:       e8 d3 bf ff ff          callq  4a8fe0 <_bt_relandgetbuf>
    0.00 :	  4ad00d:       41 89 c4                mov    %eax,%r12d
         :	         */
         :	        cmpval = nextkey ? 0 : 1;
         :
         :	        for (;;)
         :	        {
         :	                page = BufferGetPage(buf);
    0.00 :	  4ad010:       45 85 e4                test   %r12d,%r12d
    0.00 :	  4ad013:       79 90                   jns    4acfa5 <_bt_moveright+0x35>
    0.00 :	  4ad015:       48 8b 15 fc 00 6d 00    mov    0x6d00fc(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  4ad01c:       44 89 e0                mov    %r12d,%eax
    0.00 :	  4ad01f:       f7 d0                   not    %eax
    0.00 :	  4ad021:       48 98                   cltq   
    0.00 :	  4ad023:       48 8b 0c c2             mov    (%rdx,%rax,8),%rcx
         :	                opaque = (BTPageOpaque) PageGetSpecialPointer(page);
    0.00 :	  4ad027:       0f b7 41 10             movzwl 0x10(%rcx),%eax
    0.00 :	  4ad02b:       48 8d 1c 01             lea    (%rcx,%rax,1),%rbx
         :
         :	                if (P_RIGHTMOST(opaque))
    0.00 :	  4ad02f:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  4ad032:       85 d2                   test   %edx,%edx
    0.00 :	  4ad034:       75 91                   jne    4acfc7 <_bt_moveright+0x57>
         :	                }
         :	                else
         :	                        break;
         :	        }
         :
         :	        if (P_IGNORE(opaque))
    0.00 :	  4ad036:       0f b7 43 0c             movzwl 0xc(%rbx),%eax
    0.00 :	  4ad03a:       a8 14                   test   $0x14,%al
    0.00 :	  4ad03c:       0f 85 8f 00 00 00       jne    4ad0d1 <_bt_moveright+0x161>
         :	                elog(ERROR, "fell off the end of index \"%s\"",
         :	                         RelationGetRelationName(rel));
         :
         :	        return buf;
         :	}
    0.00 :	  4ad042:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  4ad046:       44 89 e0                mov    %r12d,%eax
    0.00 :	  4ad049:       5b                      pop    %rbx
    0.00 :	  4ad04a:       41 5c                   pop    %r12
    0.00 :	  4ad04c:       41 5d                   pop    %r13
    0.00 :	  4ad04e:       41 5e                   pop    %r14
    0.00 :	  4ad050:       41 5f                   pop    %r15
    0.00 :	  4ad052:       c9                      leaveq 
    0.00 :	  4ad053:       c3                      retq   
    0.00 :	  4ad054:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        else
         :	                                _bt_relbuf(rel, buf);
         :
         :	                        /* re-acquire the lock in the right mode, and re-check */
         :	                        buf = _bt_getbuf(rel, blkno, access);
         :	                        continue;
    0.00 :	  4ad058:       0f b7 43 0c             movzwl 0xc(%rbx),%eax
    0.00 :	  4ad05c:       e9 7b ff ff ff          jmpq   4acfdc <_bt_moveright+0x6c>
    0.00 :	  4ad061:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Finish any incomplete splits we encounter along the way.
         :	                 */
         :	                if (forupdate && P_INCOMPLETE_SPLIT(opaque))
         :	                {
         :	                        BlockNumber blkno = BufferGetBlockNumber(buf);
    0.00 :	  4ad068:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4ad06b:       e8 c0 6f 1c 00          callq  674030 <BufferGetBlockNumber>
         :
         :	                        /* upgrade our lock if necessary */
         :	                        if (access == BT_READ)
    0.00 :	  4ad070:       41 83 fe 01             cmp    $0x1,%r14d
         :	                /*
         :	                 * Finish any incomplete splits we encounter along the way.
         :	                 */
         :	                if (forupdate && P_INCOMPLETE_SPLIT(opaque))
         :	                {
         :	                        BlockNumber blkno = BufferGetBlockNumber(buf);
    0.00 :	  4ad074:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :
         :	                        /* upgrade our lock if necessary */
         :	                        if (access == BT_READ)
    0.00 :	  4ad077:       74 3f                   je     4ad0b8 <_bt_moveright+0x148>
         :	                        {
         :	                                LockBuffer(buf, BUFFER_LOCK_UNLOCK);
         :	                                LockBuffer(buf, BT_WRITE);
         :	                        }
         :
         :	                        if (P_INCOMPLETE_SPLIT(opaque))
    0.00 :	  4ad079:       80 7b 0c 00             cmpb   $0x0,0xc(%rbx)
    0.00 :	  4ad07d:       79 29                   jns    4ad0a8 <_bt_moveright+0x138>
         :	                                _bt_finish_split(rel, buf, stack);
    0.00 :	  4ad07f:       48 8b 55 10             mov    0x10(%rbp),%rdx
    0.00 :	  4ad083:       44 89 e6                mov    %r12d,%esi
    0.00 :	  4ad086:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad089:       e8 52 aa ff ff          callq  4a7ae0 <_bt_finish_split>
         :	                        else
         :	                                _bt_relbuf(rel, buf);
         :
         :	                        /* re-acquire the lock in the right mode, and re-check */
         :	                        buf = _bt_getbuf(rel, blkno, access);
    0.00 :	  4ad08e:       8b 75 d4                mov    -0x2c(%rbp),%esi
    0.00 :	  4ad091:       44 89 f2                mov    %r14d,%edx
    0.00 :	  4ad094:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad097:       e8 b4 bf ff ff          callq  4a9050 <_bt_getbuf>
    0.00 :	  4ad09c:       41 89 c4                mov    %eax,%r12d
         :	                        continue;
    0.00 :	  4ad09f:       e9 fc fe ff ff          jmpq   4acfa0 <_bt_moveright+0x30>
    0.00 :	  4ad0a4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        }
         :
         :	                        if (P_INCOMPLETE_SPLIT(opaque))
         :	                                _bt_finish_split(rel, buf, stack);
         :	                        else
         :	                                _bt_relbuf(rel, buf);
    0.00 :	  4ad0a8:       44 89 e6                mov    %r12d,%esi
    0.00 :	  4ad0ab:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4ad0ae:       e8 1d bf ff ff          callq  4a8fd0 <_bt_relbuf>
    0.00 :	  4ad0b3:       eb d9                   jmp    4ad08e <_bt_moveright+0x11e>
    0.00 :	  4ad0b5:       0f 1f 00                nopl   (%rax)
         :	                        BlockNumber blkno = BufferGetBlockNumber(buf);
         :
         :	                        /* upgrade our lock if necessary */
         :	                        if (access == BT_READ)
         :	                        {
         :	                                LockBuffer(buf, BUFFER_LOCK_UNLOCK);
    0.00 :	  4ad0b8:       31 f6                   xor    %esi,%esi
    0.00 :	  4ad0ba:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4ad0bd:       e8 4e 76 1c 00          callq  674710 <LockBuffer>
         :	                                LockBuffer(buf, BT_WRITE);
    0.00 :	  4ad0c2:       be 02 00 00 00          mov    $0x2,%esi
    0.00 :	  4ad0c7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  4ad0ca:       e8 41 76 1c 00          callq  674710 <LockBuffer>
    0.00 :	  4ad0cf:       eb a8                   jmp    4ad079 <_bt_moveright+0x109>
         :	                else
         :	                        break;
         :	        }
         :
         :	        if (P_IGNORE(opaque))
         :	                elog(ERROR, "fell off the end of index \"%s\"",
    0.00 :	  4ad0d1:       ba f6 48 7b 00          mov    $0x7b48f6,%edx
    0.00 :	  4ad0d6:       be f5 00 00 00          mov    $0xf5,%esi
    0.00 :	  4ad0db:       bf 70 47 7b 00          mov    $0x7b4770,%edi
    0.00 :	  4ad0e0:       e8 3b e3 2c 00          callq  77b420 <elog_start>
    0.00 :	  4ad0e5:       49 8b 55 30             mov    0x30(%r13),%rdx
    0.00 :	  4ad0e9:       be 60 41 7b 00          mov    $0x7b4160,%esi
    0.00 :	  4ad0ee:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  4ad0f3:       31 c0                   xor    %eax,%eax
    0.00 :	  4ad0f5:       e8 36 e1 2c 00          callq  77b230 <elog_finish>
    0.00 :	  4ad0fa:       e8 d1 c3 fb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ccfc0 <DataChecksumsEnabled>:
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfc0:       48 8b 05 d9 c1 6a 00    mov    0x6ac1d9(%rip),%rax        # b791a0 <ControlFile>
    0.00 :	  4ccfc7:       55                      push   %rbp
    0.00 :	  4ccfc8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ccfcb:       8b 80 ec 00 00 00       mov    0xec(%rax),%eax
         :	        Assert(ControlFile != NULL);
         :	        return (ControlFile->data_checksum_version > 0);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
  100.00 :	  4ccfd1:       c9                      leaveq 
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfd2:       85 c0                   test   %eax,%eax
    0.00 :	  4ccfd4:       0f 95 c0                setne  %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:175
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2d60 <IsToastNamespace>:
         :	 * to other backends.  Those are treated the same as other backends' regular
         :	 * temp table namespaces, and access is prevented where appropriate.
         :	 */
         :	bool
         :	IsToastNamespace(Oid namespaceId)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:175
  100.00 :	  4e2d60:       55                      push   %rbp
         :	        return (namespaceId == PG_TOAST_NAMESPACE) ||
    0.00 :	  4e2d61:       83 ff 63                cmp    $0x63,%edi
    0.00 :	  4e2d64:       b8 01 00 00 00          mov    $0x1,%eax
         :	 * to other backends.  Those are treated the same as other backends' regular
         :	 * temp table namespaces, and access is prevented where appropriate.
         :	 */
         :	bool
         :	IsToastNamespace(Oid namespaceId)
         :	{
    0.00 :	  4e2d69:       48 89 e5                mov    %rsp,%rbp
         :	        return (namespaceId == PG_TOAST_NAMESPACE) ||
    0.00 :	  4e2d6c:       74 0a                   je     4e2d78 <IsToastNamespace+0x18>
    0.00 :	  4e2d6e:       e8 0d 9c 00 00          callq  4ec980 <isTempToastNamespace>
    0.00 :	  4e2d73:       84 c0                   test   %al,%al
    0.00 :	  4e2d75:       0f 95 c0                setne  %al
         :	                isTempToastNamespace(namespaceId);
         :	}
    0.00 :	  4e2d78:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:109
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2db0 <IsCatalogClass>:
         :	 *
         :	 * Check IsCatalogRelation() for details.
         :	 */
         :	bool
         :	IsCatalogClass(Oid relid, Form_pg_class reltuple)
         :	{
    0.00 :	  4e2db0:       55                      push   %rbp
    0.00 :	  4e2db1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4e2db4:       53                      push   %rbx
    0.00 :	  4e2db5:       89 fb                   mov    %edi,%ebx
    0.00 :	  4e2db7:       48 83 ec 08             sub    $0x8,%rsp
         :	        Oid                     relnamespace = reltuple->relnamespace;
    0.00 :	  4e2dbb:       8b 7e 40                mov    0x40(%rsi),%edi
         :
         :	        /*
         :	         * Never consider relations outside pg_catalog/pg_toast to be catalog
         :	         * relations.
         :	         */
         :	        if (!IsSystemNamespace(relnamespace) && !IsToastNamespace(relnamespace))
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:109
  100.00 :	  4e2dbe:       83 ff 0b                cmp    $0xb,%edi
    0.00 :	  4e2dc1:       74 0b                   je     4e2dce <IsCatalogClass+0x1e>
    0.00 :	  4e2dc3:       e8 98 ff ff ff          callq  4e2d60 <IsToastNamespace>
    0.00 :	  4e2dc8:       31 d2                   xor    %edx,%edx
    0.00 :	  4e2dca:       84 c0                   test   %al,%al
    0.00 :	  4e2dcc:       74 09                   je     4e2dd7 <IsCatalogClass+0x27>
         :	         * property (c.f. GetNewObjectId()) and it has the advantage that it works
         :	         * correctly even if a user decides to create a relation in the pg_catalog
         :	         * namespace.
         :	         * ----
         :	         */
         :	        return relid < FirstNormalObjectId;
    0.00 :	  4e2dce:       81 fb ff 3f 00 00       cmp    $0x3fff,%ebx
    0.00 :	  4e2dd4:       0f 96 c2                setbe  %dl
         :	}
    0.00 :	  4e2dd7:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  4e2ddb:       89 d0                   mov    %edx,%eax
    0.00 :	  4e2ddd:       5b                      pop    %rbx
    0.00 :	  4e2dde:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/namespace.c:2989
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ec980 <isTempToastNamespace>:
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
    0.00 :	  4ec980:       8b 15 4a cd 68 00       mov    0x68cd4a(%rip),%edx        # b796d0 <myTempToastNamespace>
         :	 * isTempToastNamespace - is the given namespace my temporary-toast-table
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
    0.00 :	  4ec986:       55                      push   %rbp
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
  100.00 :	  4ec987:       31 c0                   xor    %eax,%eax
         :	 * isTempToastNamespace - is the given namespace my temporary-toast-table
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
    0.00 :	  4ec989:       48 89 e5                mov    %rsp,%rbp
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
    0.00 :	  4ec98c:       85 d2                   test   %edx,%edx
    0.00 :	  4ec98e:       74 05                   je     4ec995 <isTempToastNamespace+0x15>
    0.00 :	  4ec990:       39 fa                   cmp    %edi,%edx
    0.00 :	  4ec992:       0f 94 c0                sete   %al
         :	                return true;
         :	        return false;
         :	}
    0.00 :	  4ec995:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:333
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a8e70 <LookupTupleHashEntry>:
         :	 * zeroed.
         :	 */
         :	TupleHashEntry
         :	LookupTupleHashEntry(TupleHashTable hashtable, TupleTableSlot *slot,
         :	                                         bool *isnew)
         :	{
    0.00 :	  5a8e70:       55                      push   %rbp
    0.00 :	  5a8e71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a8e74:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5a8e78:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  5a8e7c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5a8e7f:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  5a8e83:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5a8e87:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5a8e8a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  5a8e8e:       48 83 ec 50             sub    $0x50,%rsp
         :	        TupleHashTable saveCurHT;
         :	        TupleHashEntryData dummy;
         :	        bool            found;
         :
         :	        /* If first time through, clone the input slot to make table slot */
         :	        if (hashtable->tableslot == NULL)
    0.00 :	  5a8e92:       48 83 7f 40 00          cmpq   $0x0,0x40(%rdi)
         :	 * zeroed.
         :	 */
         :	TupleHashEntry
         :	LookupTupleHashEntry(TupleHashTable hashtable, TupleTableSlot *slot,
         :	                                         bool *isnew)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:333
  100.00 :	  5a8e97:       49 89 d5                mov    %rdx,%r13
         :	        TupleHashTable saveCurHT;
         :	        TupleHashEntryData dummy;
         :	        bool            found;
         :
         :	        /* If first time through, clone the input slot to make table slot */
         :	        if (hashtable->tableslot == NULL)
    0.00 :	  5a8e9a:       0f 84 08 01 00 00       je     5a8fa8 <LookupTupleHashEntry+0x138>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5a8ea0:       48 8b 05 b9 19 61 00    mov    0x6119b9(%rip),%rax        # bba860 <CurrentMemoryContext>
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ea7:       31 d2                   xor    %edx,%edx
    0.00 :	  5a8ea9:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  5a8ead:       4d 85 ed                test   %r13,%r13
    0.00 :	  5a8eb0:       48 8d 75 c0             lea    -0x40(%rbp),%rsi
         :
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
    0.00 :	  5a8eb4:       48 c7 45 c0 00 00 00    movq   $0x0,-0x40(%rbp)
    0.00 :	  5a8ebb:       00 
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ebc:       0f 95 c2                setne  %dl
    0.00 :	  5a8ebf:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a8ec3:       49 8b 44 24 30          mov    0x30(%r12),%rax
    0.00 :	  5a8ec8:       48 89 05 91 19 61 00    mov    %rax,0x611991(%rip)        # bba860 <CurrentMemoryContext>
         :	         *
         :	         * We save and restore CurTupleHashTable just in case someone manages to
         :	         * invoke this code re-entrantly.
         :	         */
         :	        hashtable->inputslot = slot;
         :	        hashtable->in_hash_funcs = hashtable->tab_hash_funcs;
    0.00 :	  5a8ecf:       49 8b 44 24 18          mov    0x18(%r12),%rax
         :	         * Set up data needed by hash and match functions
         :	         *
         :	         * We save and restore CurTupleHashTable just in case someone manages to
         :	         * invoke this code re-entrantly.
         :	         */
         :	        hashtable->inputslot = slot;
    0.00 :	  5a8ed4:       4d 89 74 24 48          mov    %r14,0x48(%r12)
         :	        hashtable->in_hash_funcs = hashtable->tab_hash_funcs;
    0.00 :	  5a8ed9:       49 89 44 24 50          mov    %rax,0x50(%r12)
         :	        hashtable->cur_eq_funcs = hashtable->tab_eq_funcs;
    0.00 :	  5a8ede:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  5a8ee3:       49 89 44 24 58          mov    %rax,0x58(%r12)
         :
         :	        saveCurHT = CurTupleHashTable;
    0.00 :	  5a8ee8:       4c 8b 3d d1 09 5d 00    mov    0x5d09d1(%rip),%r15        # b798c0 <CurTupleHashTable>
         :	        CurTupleHashTable = hashtable;
    0.00 :	  5a8eef:       4c 89 25 ca 09 5d 00    mov    %r12,0x5d09ca(%rip)        # b798c0 <CurTupleHashTable>
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ef6:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5a8efa:       e8 a1 b7 1d 00          callq  7846a0 <hash_search>
         :	                                                                                 &dummy,
         :	                                                                                 isnew ? HASH_ENTER : HASH_FIND,
         :	                                                                                 &found);
         :
         :	        if (isnew)
    0.00 :	  5a8eff:       4d 85 ed                test   %r13,%r13
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8f02:       48 89 c3                mov    %rax,%rbx
         :	                                                                                 &dummy,
         :	                                                                                 isnew ? HASH_ENTER : HASH_FIND,
         :	                                                                                 &found);
         :
         :	        if (isnew)
    0.00 :	  5a8f05:       74 41                   je     5a8f48 <LookupTupleHashEntry+0xd8>
         :	        {
         :	                if (found)
    0.00 :	  5a8f07:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  5a8f0b:       75 6b                   jne    5a8f78 <LookupTupleHashEntry+0x108>
         :	                         *
         :	                         * Zero any caller-requested space in the entry.  (This zaps the
         :	                         * "key data" dynahash.c copied into the new entry, but we don't
         :	                         * care since we're about to overwrite it anyway.)
         :	                         */
         :	                        MemSet(entry, 0, hashtable->entrysize);
    0.00 :	  5a8f0d:       49 8b 54 24 38          mov    0x38(%r12),%rdx
    0.00 :	  5a8f12:       48 09 d0                or     %rdx,%rax
    0.00 :	  5a8f15:       a8 07                   test   $0x7,%al
    0.00 :	  5a8f17:       75 09                   jne    5a8f22 <LookupTupleHashEntry+0xb2>
    0.00 :	  5a8f19:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  5a8f20:       76 5e                   jbe    5a8f80 <LookupTupleHashEntry+0x110>
    0.00 :	  5a8f22:       31 f6                   xor    %esi,%esi
    0.00 :	  5a8f24:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5a8f27:       e8 f4 04 ec ff          callq  469420 <memset@plt>
    0.00 :	  5a8f2c:       49 8b 44 24 28          mov    0x28(%r12),%rax
         :
         :	                        /* Copy the first tuple into the table context */
         :	                        MemoryContextSwitchTo(hashtable->tablecxt);
         :	                        entry->firstTuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  5a8f31:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5a8f34:       48 89 05 25 19 61 00    mov    %rax,0x611925(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8f3b:       e8 c0 af 00 00          callq  5b3f00 <ExecCopySlotMinimalTuple>
    0.00 :	  5a8f40:       48 89 03                mov    %rax,(%rbx)
         :
         :	                        *isnew = true;
    0.00 :	  5a8f43:       41 c6 45 00 01          movb   $0x1,0x0(%r13)
    0.00 :	  5a8f48:       48 8b 45 b8             mov    -0x48(%rbp),%rax
         :	                }
         :	        }
         :
         :	        CurTupleHashTable = saveCurHT;
    0.00 :	  5a8f4c:       4c 89 3d 6d 09 5d 00    mov    %r15,0x5d096d(%rip)        # b798c0 <CurTupleHashTable>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return entry;
         :	}
    0.00 :	  5a8f53:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5a8f57:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5a8f5b:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5a8f5f:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5a8f63:       48 89 05 f6 18 61 00    mov    %rax,0x6118f6(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8f6a:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5a8f6d:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5a8f71:       c9                      leaveq 
    0.00 :	  5a8f72:       c3                      retq   
    0.00 :	  5a8f73:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        if (isnew)
         :	        {
         :	                if (found)
         :	                {
         :	                        /* found pre-existing entry */
         :	                        *isnew = false;
    0.00 :	  5a8f78:       41 c6 45 00 00          movb   $0x0,0x0(%r13)
    0.00 :	  5a8f7d:       eb c9                   jmp    5a8f48 <LookupTupleHashEntry+0xd8>
    0.00 :	  5a8f7f:       90                      nop
         :	                         *
         :	                         * Zero any caller-requested space in the entry.  (This zaps the
         :	                         * "key data" dynahash.c copied into the new entry, but we don't
         :	                         * care since we're about to overwrite it anyway.)
         :	                         */
         :	                        MemSet(entry, 0, hashtable->entrysize);
    0.00 :	  5a8f80:       48 8d 14 13             lea    (%rbx,%rdx,1),%rdx
    0.00 :	  5a8f84:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5a8f87:       48 39 d3                cmp    %rdx,%rbx
    0.00 :	  5a8f8a:       73 a0                   jae    5a8f2c <LookupTupleHashEntry+0xbc>
    0.00 :	  5a8f8c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5a8f90:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5a8f97:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  5a8f9b:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  5a8f9e:       77 f0                   ja     5a8f90 <LookupTupleHashEntry+0x120>
    0.00 :	  5a8fa0:       eb 8a                   jmp    5a8f2c <LookupTupleHashEntry+0xbc>
    0.00 :	  5a8fa2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5a8fa8:       48 8b 47 28             mov    0x28(%rdi),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5a8fac:       48 8b 1d ad 18 61 00    mov    0x6118ad(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a8fb3:       48 89 05 a6 18 61 00    mov    %rax,0x6118a6(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	                /*
         :	                 * We copy the input tuple descriptor just for safety --- we assume
         :	                 * all input tuples will have equivalent descriptors.
         :	                 */
         :	                tupdesc = CreateTupleDescCopy(slot->tts_tupleDescriptor);
    0.00 :	  5a8fba:       48 8b 7e 10             mov    0x10(%rsi),%rdi
    0.00 :	  5a8fbe:       e8 bd be ec ff          callq  474e80 <CreateTupleDescCopy>
    0.00 :	  5a8fc3:       48 89 c7                mov    %rax,%rdi
         :	                hashtable->tableslot = MakeSingleTupleTableSlot(tupdesc);
    0.00 :	  5a8fc6:       e8 85 b7 00 00          callq  5b4750 <MakeSingleTupleTableSlot>
    0.00 :	  5a8fcb:       49 89 44 24 40          mov    %rax,0x40(%r12)
    0.00 :	  5a8fd0:       48 89 1d 89 18 61 00    mov    %rbx,0x611889(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8fd7:       e9 c4 fe ff ff          jmpq   5a8ea0 <LookupTupleHashEntry+0x30>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:564
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a9510 <TupleHashTableMatch>:
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the compare functions.  (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static int
         :	TupleHashTableMatch(const void *key1, const void *key2, Size keysize)
         :	{
    0.00 :	  5a9510:       55                      push   %rbp
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
    0.00 :	  5a9511:       31 d2                   xor    %edx,%edx
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the compare functions.  (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static int
         :	TupleHashTableMatch(const void *key1, const void *key2, Size keysize)
         :	{
    0.00 :	  5a9513:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a9516:       41 54                   push   %r12
    0.00 :	  5a9518:       53                      push   %rbx
         :	#ifdef USE_ASSERT_CHECKING
         :	        MinimalTuple tuple2 = ((const TupleHashEntryData *) key2)->firstTuple;
         :	#endif
         :	        TupleTableSlot *slot1;
         :	        TupleTableSlot *slot2;
         :	        TupleHashTable hashtable = CurTupleHashTable;
    0.00 :	  5a9519:       48 8b 1d a0 03 5d 00    mov    0x5d03a0(%rip),%rbx        # b798c0 <CurTupleHashTable>
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
    0.00 :	  5a9520:       48 8b 3f                mov    (%rdi),%rdi
         :	         * argument being an actual table entry, and the second argument being
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
    0.00 :	  5a9523:       4c 8b 63 40             mov    0x40(%rbx),%r12
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
    0.00 :	  5a9527:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5a952a:       e8 b1 ae 00 00          callq  5b43e0 <ExecStoreMinimalTuple>
         :	        Assert(tuple2 == NULL);
         :	        slot2 = hashtable->inputslot;
         :
         :	        /* For crosstype comparisons, the inputslot must be first */
         :	        if (execTuplesMatch(slot2,
    0.00 :	  5a952f:       48 8b 4b 10             mov    0x10(%rbx),%rcx
    0.00 :	  5a9533:       8b 53 08                mov    0x8(%rbx),%edx
    0.00 :	  5a9536:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5a9539:       48 8b 7b 48             mov    0x48(%rbx),%rdi
    0.00 :	  5a953d:       4c 8b 4b 30             mov    0x30(%rbx),%r9
    0.00 :	  5a9541:       4c 8b 43 58             mov    0x58(%rbx),%r8
    0.00 :	  5a9545:       e8 f6 fe ff ff          callq  5a9440 <execTuplesMatch>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:564
  100.00 :	  5a954a:       84 c0                   test   %al,%al
         :	                                                hashtable->cur_eq_funcs,
         :	                                                hashtable->tempcxt))
         :	                return 0;
         :	        else
         :	                return 1;
         :	}
    0.00 :	  5a954c:       5b                      pop    %rbx
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
         :	        Assert(tuple2 == NULL);
         :	        slot2 = hashtable->inputslot;
         :
         :	        /* For crosstype comparisons, the inputslot must be first */
         :	        if (execTuplesMatch(slot2,
    0.00 :	  5a954d:       0f 94 c0                sete   %al
    0.00 :	  5a9550:       0f b6 c0                movzbl %al,%eax
         :	                                                hashtable->cur_eq_funcs,
         :	                                                hashtable->tempcxt))
         :	                return 0;
         :	        else
         :	                return 1;
         :	}
    0.00 :	  5a9553:       41 5c                   pop    %r12
    0.00 :	  5a9555:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:511
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3a20 <ExecStoreVirtualTuple>:
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
         :	        slot->tts_nvalid = slot->tts_tupleDescriptor->natts;
    0.00 :	  5b3a20:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	 * This is a bit unclean but it avoids one round of data copying.
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecStoreVirtualTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3a24:       55                      push   %rbp
         :	         */
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
    0.00 :	  5b3a25:       c6 47 04 00             movb   $0x0,0x4(%rdi)
         :	 * This is a bit unclean but it avoids one round of data copying.
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecStoreVirtualTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3a29:       48 89 e5                mov    %rsp,%rbp
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
         :	        slot->tts_nvalid = slot->tts_tupleDescriptor->natts;
    0.00 :	  5b3a2c:       8b 00                   mov    (%rax),%eax
    0.00 :	  5b3a2e:       89 47 24                mov    %eax,0x24(%rdi)
         :
         :	        return slot;
         :	}
    0.00 :	  5b3a31:       48 89 f8                mov    %rdi,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:511
  100.00 :	  5b3a34:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:116
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005c5910 <ExecSeqScan>:
         :	 *              access method functions.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecSeqScan(SeqScanState *node)
         :	{
    0.00 :	  5c5910:       55                      push   %rbp
         :	        return ExecScan((ScanState *) node,
    0.00 :	  5c5911:       ba 30 57 5c 00          mov    $0x5c5730,%edx
    0.00 :	  5c5916:       be 30 59 5c 00          mov    $0x5c5930,%esi
         :	 *              access method functions.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecSeqScan(SeqScanState *node)
         :	{
    0.00 :	  5c591b:       48 89 e5                mov    %rsp,%rbp
         :	        return ExecScan((ScanState *) node,
         :	                                        (ExecScanAccessMtd) SeqNext,
         :	                                        (ExecScanRecheckMtd) SeqRecheck);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeSeqscan.c:116
  100.00 :	  5c591e:       c9                      leaveq 
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecSeqScan(SeqScanState *node)
         :	{
         :	        return ExecScan((ScanState *) node,
    0.00 :	  5c591f:       e9 2c de fe ff          jmpq   5b3750 <ExecScan>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006756f0 <BgBufferSync>:
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756f0:       55                      push   %rbp
    0.00 :	  6756f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6756f4:       41 57                   push   %r15
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  6756f6:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6756fa:       48 8d 7d d4             lea    -0x2c(%rbp),%rdi
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756fe:       41 56                   push   %r14
    0.00 :	  675700:       41 55                   push   %r13
    0.00 :	  675702:       41 54                   push   %r12
    0.00 :	  675704:       53                      push   %rbx
    0.00 :	  675705:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675709:       e8 22 1d 00 00          callq  677430 <StrategySyncStart>
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67570e:       44 8b 55 d0             mov    -0x30(%rbp),%r10d
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675712:       44 8b 1d 77 2f 4f 00    mov    0x4f2f77(%rip),%r11d        # b68690 <bgwriter_lru_maxpages>
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675719:       89 c6                   mov    %eax,%esi
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67571b:       45 89 d1                mov    %r10d,%r9d
    0.00 :	  67571e:       4c 01 0d 5b a3 54 00    add    %r9,0x54a35b(%rip)        # bbfa80 <BgWriterStats+0x40>
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675725:       45 85 db                test   %r11d,%r11d
    0.00 :	  675728:       0f 8e a2 02 00 00       jle    6759d0 <BgBufferSync+0x2e0>
         :	         * see if we are still ahead of the clock sweep, and if so, how many
         :	         * buffers we could scan before we'd catch up with it and "lap" it. Note:
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
    0.00 :	  67572e:       80 3d 6f 79 50 00 00    cmpb   $0x0,0x50796f(%rip)        # b7d0a4 <saved_info_valid.17628>
    0.00 :	  675735:       0f 85 4d 01 00 00       jne    675888 <BgBufferSync+0x198>
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  67573b:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	#ifdef BGW_DEBUG
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
    0.00 :	  675740:       89 05 52 79 50 00       mov    %eax,0x507952(%rip)        # b7d098 <next_to_clean.17631>
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  675746:       8b 3d d4 33 4f 00       mov    0x4f33d4(%rip),%edi        # b68b20 <NBuffers>
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67574c:       8b 45 d4                mov    -0x2c(%rbp),%eax
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  67574f:       89 35 4b 79 50 00       mov    %esi,0x50794b(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  675755:       c6 05 48 79 50 00 01    movb   $0x1,0x507948(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  67575c:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67575f:       89 05 2f 79 50 00       mov    %eax,0x50792f(%rip)        # b7d094 <next_passes.17632>
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  675765:       89 05 31 79 50 00       mov    %eax,0x507931(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	         * Estimate how many reusable buffers there are between the current
         :	         * strategy point and where we've scanned ahead to, based on the smoothed
         :	         * density estimate.
         :	         */
         :	        bufs_ahead = NBuffers - bufs_to_lap;
         :	        reusable_buffers_est = (float) bufs_ahead / smoothed_density;
    0.00 :	  67576b:       89 f8                   mov    %edi,%eax
    0.00 :	  67576d:       2b 45 c4                sub    -0x3c(%rbp),%eax
    0.00 :	  675770:       f3 0f 2a c0             cvtsi2ss %eax,%xmm0
    0.00 :	  675774:       f3 0f 5e 05 24 2f 4f    divss  0x4f2f24(%rip),%xmm0        # b686a0 <smoothed_density.17634>
    0.00 :	  67577b:       00 
    0.00 :	  67577c:       f3 44 0f 2c f8          cvttss2si %xmm0,%r15d
         :	        /*
         :	         * Track a moving average of recent buffer allocations.  Here, rather than
         :	         * a true average we want a fast-attack, slow-decline behavior: we
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
    0.00 :	  675781:       f3 0f 10 05 07 79 50    movss  0x507907(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675788:       00 
    0.00 :	  675789:       0f 2e d0                ucomiss %xmm0,%xmm2
    0.00 :	  67578c:       0f 82 1e 02 00 00       jb     6759b0 <BgBufferSync+0x2c0>
         :	                smoothed_alloc = recent_alloc;
    0.00 :	  675792:       f3 0f 11 15 f6 78 50    movss  %xmm2,0x5078f6(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675799:       00 
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
         :	                        smoothing_samples;
         :
         :	        /* Scale the estimate by a GUC to allow more aggressive tuning. */
         :	        upcoming_alloc_est = (int) (smoothed_alloc * bgwriter_lru_multiplier);
    0.00 :	  67579a:       f3 0f 10 05 ee 78 50    movss  0x5078ee(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757a1:       00 
    0.00 :	  6757a2:       0f 5a c0                cvtps2pd %xmm0,%xmm0
    0.00 :	  6757a5:       f2 0f 59 05 eb 2e 4f    mulsd  0x4f2eeb(%rip),%xmm0        # b68698 <bgwriter_lru_multiplier>
    0.00 :	  6757ac:       00 
    0.00 :	  6757ad:       f2 0f 2c d0             cvttsd2si %xmm0,%edx
         :	         * kernel warnings on some platforms.  Once upcoming_alloc_est has gone to
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
    0.00 :	  6757b1:       85 d2                   test   %edx,%edx
    0.00 :	  6757b3:       75 0a                   jne    6757bf <BgBufferSync+0xcf>
         :	                smoothed_alloc = 0;
    0.00 :	  6757b5:       c7 05 d1 78 50 00 00    movl   $0x0,0x5078d1(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757bc:       00 00 00 
    0.00 :	  6757bf:       f3 0f 2a 15 29 2e 4f    cvtsi2ssl 0x4f2e29(%rip),%xmm2        # b685f0 <BgWriterDelay>
    0.00 :	  6757c6:       00 
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757c7:       45 89 fc                mov    %r15d,%r12d
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757ca:       f3 0f 10 05 16 49 23    movss  0x234916(%rip),%xmm0        # 8aa0e8 <__func__.17063+0x15>
    0.00 :	  6757d1:       00 
    0.00 :	  6757d2:       f3 0f 2a cf             cvtsi2ss %edi,%xmm1
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757d6:       48 8b 3d e3 50 54 00    mov    0x5450e3(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757dd:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  6757e1:       f3 0f 5e c8             divss  %xmm0,%xmm1
    0.00 :	  6757e5:       f3 0f 2c c1             cvttss2si %xmm1,%eax
    0.00 :	  6757e9:       45 8d 34 07             lea    (%r15,%rax,1),%r14d
    0.00 :	  6757ed:       41 39 d6                cmp    %edx,%r14d
    0.00 :	  6757f0:       44 0f 4c f2             cmovl  %edx,%r14d
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757f4:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  6757f7:       e8 74 56 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
    0.00 :	  6757fc:       8b 5d c4                mov    -0x3c(%rbp),%ebx
    0.00 :	  6757ff:       90                      nop
         :	        num_to_scan = bufs_to_lap;
         :	        num_written = 0;
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
    0.00 :	  675800:       85 db                   test   %ebx,%ebx
    0.00 :	  675802:       7e 09                   jle    67580d <BgBufferSync+0x11d>
    0.00 :	  675804:       45 39 e6                cmp    %r12d,%r14d
    0.00 :	  675807:       0f 8f 23 01 00 00       jg     675930 <BgBufferSync+0x240>
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
         :	                        reusable_buffers++;
         :	        }
         :
         :	        BgWriterStats.m_buf_written_clean += num_written;
    0.00 :	  67580d:       49 63 c5                movslq %r13d,%rax
    0.00 :	  675810:       48 01 05 49 a2 54 00    add    %rax,0x54a249(%rip)        # bbfa60 <BgWriterStats+0x20>
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675817:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
    0.00 :	  67581a:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67581d:       44 29 fa                sub    %r15d,%edx
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675820:       29 d8                   sub    %ebx,%eax
    0.00 :	  675822:       48 98                   cltq   
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
         :	        if (new_strategy_delta > 0 && new_recent_alloc > 0)
    0.00 :	  675824:       48 85 c0                test   %rax,%rax
    0.00 :	  675827:       7e 34                   jle    67585d <BgBufferSync+0x16d>
    0.00 :	  675829:       85 d2                   test   %edx,%edx
    0.00 :	  67582b:       74 30                   je     67585d <BgBufferSync+0x16d>
         :	        {
         :	                scans_per_alloc = (float) new_strategy_delta / (float) new_recent_alloc;
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  67582d:       f3 48 0f 2a c0          cvtsi2ss %rax,%xmm0
    0.00 :	  675832:       89 d0                   mov    %edx,%eax
    0.00 :	  675834:       f3 48 0f 2a c8          cvtsi2ss %rax,%xmm1
    0.00 :	  675839:       f3 0f 10 15 5f 2e 4f    movss  0x4f2e5f(%rip),%xmm2        # b686a0 <smoothed_density.17634>
    0.00 :	  675840:       00 
    0.00 :	  675841:       f3 0f 5e c1             divss  %xmm1,%xmm0
    0.00 :	  675845:       f3 0f 5c c2             subss  %xmm2,%xmm0
    0.00 :	  675849:       f3 0f 59 05 93 48 23    mulss  0x234893(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  675850:       00 
    0.00 :	  675851:       f3 0f 58 d0             addss  %xmm0,%xmm2
    0.00 :	  675855:       f3 0f 11 15 43 2e 4f    movss  %xmm2,0x4f2e43(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  67585c:       00 
         :	                         scans_per_alloc, smoothed_density);
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
    0.00 :	  67585d:       44 8b 55 c4             mov    -0x3c(%rbp),%r10d
    0.00 :	  675861:       31 c0                   xor    %eax,%eax
    0.00 :	  675863:       45 85 d2                test   %r10d,%r10d
    0.00 :	  675866:       75 0a                   jne    675872 <BgBufferSync+0x182>
    0.00 :	  675868:       44 8b 4d d0             mov    -0x30(%rbp),%r9d
    0.00 :	  67586c:       45 85 c9                test   %r9d,%r9d
    0.00 :	  67586f:       0f 94 c0                sete   %al
         :	}
    0.00 :	  675872:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  675876:       5b                      pop    %rbx
    0.00 :	  675877:       41 5c                   pop    %r12
    0.00 :	  675879:       41 5d                   pop    %r13
    0.00 :	  67587b:       41 5e                   pop    %r14
    0.00 :	  67587d:       41 5f                   pop    %r15
    0.00 :	  67587f:       c9                      leaveq 
    0.00 :	  675880:       c3                      retq   
    0.00 :	  675881:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
    0.00 :	  675888:       44 8b 45 d4             mov    -0x2c(%rbp),%r8d
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  67588c:       89 c1                   mov    %eax,%ecx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67588e:       8b 3d 8c 32 4f 00       mov    0x4f328c(%rip),%edi        # b68b20 <NBuffers>
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  675894:       2b 0d 06 78 50 00       sub    0x507806(%rip),%ecx        # b7d0a0 <prev_strategy_buf_id.17629>
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67589a:       44 89 c0                mov    %r8d,%eax
    0.00 :	  67589d:       2b 05 f9 77 50 00       sub    0x5077f9(%rip),%eax        # b7d09c <prev_strategy_passes.17630>
    0.00 :	  6758a3:       48 63 d7                movslq %edi,%rdx
    0.00 :	  6758a6:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  6758a9:       48 63 c9                movslq %ecx,%rcx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758ac:       48 98                   cltq   
    0.00 :	  6758ae:       48 0f af c2             imul   %rdx,%rax
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758b2:       8b 15 dc 77 50 00       mov    0x5077dc(%rip),%edx        # b7d094 <next_passes.17632>
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758b8:       48 01 c1                add    %rax,%rcx
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758bb:       89 d0                   mov    %edx,%eax
    0.00 :	  6758bd:       44 29 c0                sub    %r8d,%eax
    0.00 :	  6758c0:       85 c0                   test   %eax,%eax
    0.00 :	  6758c2:       0f 8e 23 01 00 00       jle    6759eb <BgBufferSync+0x2fb>
         :	                {
         :	                        /* we're one pass ahead of the strategy point */
         :	                        bufs_to_lap = strategy_buf_id - next_to_clean;
    0.00 :	  6758c8:       89 f0                   mov    %esi,%eax
    0.00 :	  6758ca:       2b 05 c8 77 50 00       sub    0x5077c8(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  6758d0:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758d3:       48 85 c9                test   %rcx,%rcx
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  6758d6:       89 35 c4 77 50 00       mov    %esi,0x5077c4(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  6758dc:       44 89 05 b9 77 50 00    mov    %r8d,0x5077b9(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	        saved_info_valid = true;
    0.00 :	  6758e3:       c6 05 ba 77 50 00 01    movb   $0x1,0x5077ba(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758ea:       0f 8e 2c 01 00 00       jle    675a1c <BgBufferSync+0x32c>
    0.00 :	  6758f0:       45 85 d2                test   %r10d,%r10d
    0.00 :	  6758f3:       0f 57 d2                xorps  %xmm2,%xmm2
    0.00 :	  6758f6:       0f 84 6f fe ff ff       je     67576b <BgBufferSync+0x7b>
         :	        {
         :	                scans_per_alloc = (float) strategy_delta / (float) recent_alloc;
    0.00 :	  6758fc:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  675901:       f3 48 0f 2a c1          cvtsi2ss %rcx,%xmm0
    0.00 :	  675906:       f3 0f 10 0d 92 2d 4f    movss  0x4f2d92(%rip),%xmm1        # b686a0 <smoothed_density.17634>
    0.00 :	  67590d:       00 
    0.00 :	  67590e:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  675912:       f3 0f 5c c1             subss  %xmm1,%xmm0
    0.00 :	  675916:       f3 0f 59 05 c6 47 23    mulss  0x2347c6(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  67591d:       00 
    0.00 :	  67591e:       f3 0f 58 c8             addss  %xmm0,%xmm1
    0.00 :	  675922:       f3 0f 11 0d 76 2d 4f    movss  %xmm1,0x4f2d76(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  675929:       00 
    0.00 :	  67592a:       e9 3c fe ff ff          jmpq   67576b <BgBufferSync+0x7b>
    0.00 :	  67592f:       90                      nop
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
    0.00 :	  675930:       8b 3d 62 77 50 00       mov    0x507762(%rip),%edi        # b7d098 <next_to_clean.17631>
    0.00 :	  675936:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67593b:       e8 20 f9 ff ff          callq  675260 <SyncOneBuffer>
    0.00 :	  675940:       89 c2                   mov    %eax,%edx
         :
         :	                if (++next_to_clean >= NBuffers)
    0.00 :	  675942:       8b 05 50 77 50 00       mov    0x507750(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675948:       83 c0 01                add    $0x1,%eax
    0.00 :	  67594b:       3b 05 cf 31 4f 00       cmp    0x4f31cf(%rip),%eax        # b68b20 <NBuffers>
    0.00 :	  675951:       89 05 41 77 50 00       mov    %eax,0x507741(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675957:       7c 11                   jl     67596a <BgBufferSync+0x27a>
         :	                {
         :	                        next_to_clean = 0;
         :	                        next_passes++;
    0.00 :	  675959:       83 05 34 77 50 00 01    addl   $0x1,0x507734(%rip)        # b7d094 <next_passes.17632>
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
         :
         :	                if (++next_to_clean >= NBuffers)
         :	                {
         :	                        next_to_clean = 0;
    0.00 :	  675960:       c7 05 2e 77 50 00 00    movl   $0x0,0x50772e(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675967:       00 00 00 
         :	                        next_passes++;
         :	                }
         :	                num_to_scan--;
    0.00 :	  67596a:       83 eb 01                sub    $0x1,%ebx
         :
         :	                if (buffer_state & BUF_WRITTEN)
    0.00 :	  67596d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675970:       74 26                   je     675998 <BgBufferSync+0x2a8>
         :	                {
         :	                        reusable_buffers++;
    0.00 :	  675972:       41 83 c4 01             add    $0x1,%r12d
         :	                        if (++num_written >= bgwriter_lru_maxpages)
    0.00 :	  675976:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  67597a:       44 3b 2d 0f 2d 4f 00    cmp    0x4f2d0f(%rip),%r13d        # b68690 <bgwriter_lru_maxpages>
    0.00 :	  675981:       0f 8c 79 fe ff ff       jl     675800 <BgBufferSync+0x110>
         :	                        {
         :	                                BgWriterStats.m_maxwritten_clean++;
    0.00 :	  675987:       48 83 05 d9 a0 54 00    addq   $0x1,0x54a0d9(%rip)        # bbfa68 <BgWriterStats+0x28>
    0.00 :	  67598e:       01 
         :	                                break;
    0.00 :	  67598f:       e9 79 fe ff ff          jmpq   67580d <BgBufferSync+0x11d>
    0.00 :	  675994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        }
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
    0.00 :	  675998:       83 e2 02                and    $0x2,%edx
         :	                        reusable_buffers++;
    0.00 :	  67599b:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  67599e:       41 83 dc ff             sbb    $0xffffffff,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
  100.00 :	  6759a2:       e9 59 fe ff ff          jmpq   675800 <BgBufferSync+0x110>
    0.00 :	  6759a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6759ae:       00 00 
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
         :	                smoothed_alloc = recent_alloc;
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
    0.00 :	  6759b0:       f3 0f 5c d0             subss  %xmm0,%xmm2
    0.00 :	  6759b4:       f3 0f 59 15 28 47 23    mulss  0x234728(%rip),%xmm2        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  6759bb:       00 
    0.00 :	  6759bc:       f3 0f 58 c2             addss  %xmm2,%xmm0
    0.00 :	  6759c0:       f3 0f 11 05 c8 76 50    movss  %xmm0,0x5076c8(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6759c7:       00 
    0.00 :	  6759c8:       e9 cd fd ff ff          jmpq   67579a <BgBufferSync+0xaa>
    0.00 :	  6759cd:       0f 1f 00                nopl   (%rax)
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759d0:       c6 05 cd 76 50 00 00    movb   $0x0,0x5076cd(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759d7:       48 83 c4 18             add    $0x18,%rsp
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759db:       b8 01 00 00 00          mov    $0x1,%eax
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759e0:       5b                      pop    %rbx
    0.00 :	  6759e1:       41 5c                   pop    %r12
    0.00 :	  6759e3:       41 5d                   pop    %r13
    0.00 :	  6759e5:       41 5e                   pop    %r14
    0.00 :	  6759e7:       41 5f                   pop    %r15
    0.00 :	  6759e9:       c9                      leaveq 
    0.00 :	  6759ea:       c3                      retq   
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  6759eb:       41 39 d0                cmp    %edx,%r8d
    0.00 :	  6759ee:       74 12                   je     675a02 <BgBufferSync+0x312>
         :	                        elog(DEBUG2, "bgwriter behind: bgw %u-%u strategy %u-%u delta=%ld",
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta);
         :	#endif
         :	                        next_to_clean = strategy_buf_id;
    0.00 :	  6759f0:       89 35 a2 76 50 00       mov    %esi,0x5076a2(%rip)        # b7d098 <next_to_clean.17631>
         :	                        next_passes = strategy_passes;
    0.00 :	  6759f6:       44 89 05 97 76 50 00    mov    %r8d,0x507697(%rip)        # b7d094 <next_passes.17632>
    0.00 :	  6759fd:       e9 d1 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a02:       8b 05 90 76 50 00       mov    0x507690(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675a08:       39 c6                   cmp    %eax,%esi
    0.00 :	  675a0a:       7f e4                   jg     6759f0 <BgBufferSync+0x300>
         :	                                 next_to_clean >= strategy_buf_id)
         :	                {
         :	                        /* on same pass, but ahead or at least not behind */
         :	                        bufs_to_lap = NBuffers - (next_to_clean - strategy_buf_id);
    0.00 :	  675a0c:       89 fa                   mov    %edi,%edx
    0.00 :	  675a0e:       29 c2                   sub    %eax,%edx
    0.00 :	  675a10:       89 d0                   mov    %edx,%eax
    0.00 :	  675a12:       01 f0                   add    %esi,%eax
    0.00 :	  675a14:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a17:       e9 b7 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  675a1c:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
    0.00 :	  675a21:       e9 45 fd ff ff          jmpq   67576b <BgBufferSync+0x7b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1499
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679a90 <FileSeek>:
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a90:       55                      push   %rbp
    0.00 :	  679a91:       89 f8                   mov    %edi,%eax
    0.00 :	  679a93:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679a96:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679a9a:       4c 63 ef                movslq %edi,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a9d:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aa1:       49 c1 e5 06             shl    $0x6,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679aa5:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  679aa9:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aad:       4d 89 ec                mov    %r13,%r12
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679ab0:       48 83 ec 20             sub    $0x20,%rsp
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ab4:       4c 03 25 dd 36 50 00    add    0x5036dd(%rip),%r12        # b7d198 <VfdCache>
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679abb:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679abe:       89 d3                   mov    %edx,%ebx
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ac0:       41 8b 3c 24             mov    (%r12),%edi
    0.00 :	  679ac4:       83 ff ff                cmp    $0xffffffff,%edi
    0.00 :	  679ac7:       74 6f                   je     679b38 <FileSeek+0xa8>
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ac9:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679acc:       0f 84 9e 00 00 00       je     679b70 <FileSeek+0xe0>
    0.00 :	  679ad2:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679ad5:       0f 84 05 01 00 00       je     679be0 <FileSeek+0x150>
    0.00 :	  679adb:       85 db                   test   %ebx,%ebx
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679add:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679ae2:       be d7 05 00 00          mov    $0x5d7,%esi
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ae7:       75 27                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679ae9:       4d 85 f6                test   %r14,%r14
    0.00 :	  679aec:       0f 88 28 01 00 00       js     679c1a <FileSeek+0x18a>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                if (VfdCache[file].seekPos != offset)
    0.00 :	  679af2:       4d 39 74 24 20          cmp    %r14,0x20(%r12)
    0.00 :	  679af7:       0f 84 8b 00 00 00       je     679b88 <FileSeek+0xf8>
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679afd:       31 d2                   xor    %edx,%edx
    0.00 :	  679aff:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679b02:       e8 69 00 df ff          callq  469b70 <lseek@plt>
    0.00 :	  679b07:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679b0c:       eb 7a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b0e:       66 90                   xchg   %ax,%ax
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b10:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679b15:       e8 06 19 10 00          callq  77b420 <elog_start>
    0.00 :	  679b1a:       89 da                   mov    %ebx,%edx
    0.00 :	  679b1c:       be 3a a3 8a 00          mov    $0x8aa33a,%esi
    0.00 :	  679b21:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679b26:       31 c0                   xor    %eax,%eax
    0.00 :	  679b28:       e8 03 17 10 00          callq  77b230 <elog_finish>
    0.00 :	  679b2d:       e8 9e f9 de ff          callq  4694d0 <abort@plt>
    0.00 :	  679b32:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b38:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679b3b:       0f 84 cf 00 00 00       je     679c10 <FileSeek+0x180>
    0.00 :	  679b41:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679b44:       74 6a                   je     679bb0 <FileSeek+0x120>
    0.00 :	  679b46:       85 db                   test   %ebx,%ebx
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b48:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b4d:       be bd 05 00 00          mov    $0x5bd,%esi
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b52:       75 bc                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b54:       4d 85 f6                test   %r14,%r14
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679b57:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b5c:       be af 05 00 00          mov    $0x5af,%esi
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b61:       0f 88 bd 00 00 00       js     679c24 <FileSeek+0x194>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
    0.00 :	  679b67:       4d 89 74 24 20          mov    %r14,0x20(%r12)
         :	                                break;
    0.00 :	  679b6c:       eb 1a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b6e:       66 90                   xchg   %ax,%ax
         :	                                if (VfdCache[file].seekPos != offset)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
    0.00 :	  679b70:       48 85 f6                test   %rsi,%rsi
    0.00 :	  679b73:       0f 85 7f 00 00 00       jne    679bf8 <FileSeek+0x168>
    0.00 :	  679b79:       49 83 7c 24 20 ff       cmpq   $0xffffffffffffffff,0x20(%r12)
    0.00 :	  679b7f:       90                      nop
    0.00 :	  679b80:       74 76                   je     679bf8 <FileSeek+0x168>
    0.00 :	  679b82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
         :	                                break;
         :	                }
         :	        }
         :	        return VfdCache[file].seekPos;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1499
  100.00 :	  679b88:       48 8b 05 09 36 50 00    mov    0x503609(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679b8f:       4a 8b 54 28 20          mov    0x20(%rax,%r13,1),%rdx
         :	}
    0.00 :	  679b94:       48 89 d0                mov    %rdx,%rax
    0.00 :	  679b97:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  679b9b:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  679ba0:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  679ba5:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  679baa:       c9                      leaveq 
    0.00 :	  679bab:       c3                      retq   
    0.00 :	  679bac:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
    0.00 :	  679bb0:       89 c7                   mov    %eax,%edi
    0.00 :	  679bb2:       e8 69 fd ff ff          callq  679920 <FileAccess>
         :	                                if (returnCode < 0)
    0.00 :	  679bb7:       85 c0                   test   %eax,%eax
         :	                                        return returnCode;
    0.00 :	  679bb9:       48 63 d0                movslq %eax,%rdx
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
         :	                                if (returnCode < 0)
    0.00 :	  679bbc:       78 d6                   js     679b94 <FileSeek+0x104>
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bbe:       4c 89 eb                mov    %r13,%rbx
    0.00 :	  679bc1:       48 03 1d d0 35 50 00    add    0x5035d0(%rip),%rbx        # b7d198 <VfdCache>
    0.00 :	  679bc8:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679bcd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679bd0:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  679bd2:       e8 99 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bd7:       48 89 43 20             mov    %rax,0x20(%rbx)
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bdb:       eb ab                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bdd:       0f 1f 00                nopl   (%rax)
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679be0:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679be5:       e8 86 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bea:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679bef:       90                      nop
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bf0:       eb 96                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bf2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bf8:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  679bfd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679c00:       e8 6b ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679c05:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679c0a:       e9 79 ff ff ff          jmpq   679b88 <FileSeek+0xf8>
    0.00 :	  679c0f:       90                      nop
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
    0.00 :	  679c10:       49 01 74 24 20          add    %rsi,0x20(%r12)
         :	                                break;
    0.00 :	  679c15:       e9 6e ff ff ff          jmpq   679b88 <FileSeek+0xf8>
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679c1a:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679c1f:       be c8 05 00 00          mov    $0x5c8,%esi
    0.00 :	  679c24:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679c29:       e8 f2 17 10 00          callq  77b420 <elog_start>
    0.00 :	  679c2e:       4c 89 f2                mov    %r14,%rdx
    0.00 :	  679c31:       be 21 a3 8a 00          mov    $0x8aa321,%esi
    0.00 :	  679c36:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679c3b:       31 c0                   xor    %eax,%eax
    0.00 :	  679c3d:       e8 ee 15 10 00          callq  77b230 <elog_finish>
    0.00 :	  679c42:       e8 89 f8 de ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1271
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679df0 <FileRead>:
         :	#endif
         :	}
         :
         :	int
         :	FileRead(File file, char *buffer, int amount)
         :	{
    0.00 :	  679df0:       55                      push   %rbp
    0.00 :	  679df1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679df4:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1271
  100.00 :	  679df6:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679df9:       41 55                   push   %r13
    0.00 :	  679dfb:       41 89 d5                mov    %edx,%r13d
    0.00 :	  679dfe:       41 54                   push   %r12
    0.00 :	  679e00:       41 89 fc                mov    %edi,%r12d
    0.00 :	  679e03:       53                      push   %rbx
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e04:       e8 17 fb ff ff          callq  679920 <FileAccess>
         :	        if (returnCode < 0)
    0.00 :	  679e09:       85 c0                   test   %eax,%eax
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e0b:       89 c3                   mov    %eax,%ebx
         :	        if (returnCode < 0)
    0.00 :	  679e0d:       78 47                   js     679e56 <FileRead+0x66>
    0.00 :	  679e0f:       4d 63 e4                movslq %r12d,%r12
    0.00 :	  679e12:       4d 63 ed                movslq %r13d,%r13
    0.00 :	  679e15:       49 c1 e4 06             shl    $0x6,%r12
    0.00 :	  679e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e20:       48 8b 05 71 33 50 00    mov    0x503371(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e27:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  679e2a:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679e2d:       42 8b 3c 20             mov    (%rax,%r12,1),%edi
    0.00 :	  679e31:       e8 da f7 de ff          callq  469610 <read@plt>
         :
         :	        if (returnCode >= 0)
    0.00 :	  679e36:       85 c0                   test   %eax,%eax
         :	        returnCode = FileAccess(file);
         :	        if (returnCode < 0)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e38:       89 c3                   mov    %eax,%ebx
         :
         :	        if (returnCode >= 0)
    0.00 :	  679e3a:       79 2c                   jns    679e68 <FileRead+0x78>
         :	                                _dosmaperr(error);
         :	                                break;
         :	                }
         :	#endif
         :	                /* OK to retry if interrupted */
         :	                if (errno == EINTR)
    0.00 :	  679e3c:       e8 7f fe de ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  679e41:       83 38 04                cmpl   $0x4,(%rax)
    0.00 :	  679e44:       74 da                   je     679e20 <FileRead+0x30>
         :	                        goto retry;
         :
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
    0.00 :	  679e46:       48 8b 05 4b 33 50 00    mov    0x50334b(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e4d:       4a c7 44 20 20 ff ff    movq   $0xffffffffffffffff,0x20(%rax,%r12,1)
    0.00 :	  679e54:       ff ff 
         :	        }
         :
         :	        return returnCode;
         :	}
    0.00 :	  679e56:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e58:       5b                      pop    %rbx
    0.00 :	  679e59:       41 5c                   pop    %r12
    0.00 :	  679e5b:       41 5d                   pop    %r13
    0.00 :	  679e5d:       41 5e                   pop    %r14
    0.00 :	  679e5f:       c9                      leaveq 
    0.00 :	  679e60:       c3                      retq   
    0.00 :	  679e61:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
         :
         :	        if (returnCode >= 0)
         :	                VfdCache[file].seekPos += returnCode;
    0.00 :	  679e68:       4c 03 25 29 33 50 00    add    0x503329(%rip),%r12        # b7d198 <VfdCache>
    0.00 :	  679e6f:       48 98                   cltq   
    0.00 :	  679e71:       49 01 44 24 20          add    %rax,0x20(%r12)
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
         :	        }
         :
         :	        return returnCode;
         :	}
    0.00 :	  679e76:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e78:       5b                      pop    %rbx
    0.00 :	  679e79:       41 5c                   pop    %r12
    0.00 :	  679e7b:       41 5d                   pop    %r13
    0.00 :	  679e7d:       41 5e                   pop    %r14
    0.00 :	  679e7f:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:525
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000069b890 <client_read_ended>:
         :	 *
         :	 * This is called just after low-level reads.  It must preserve errno!
         :	 */
         :	void
         :	client_read_ended(void)
         :	{
    0.00 :	  69b890:       55                      push   %rbp
  100.00 :	  69b891:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  69b894:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  69b898:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    0.00 :	  69b89c:       48 83 ec 10             sub    $0x10,%rsp
         :	        if (DoingCommandRead)
    0.00 :	  69b8a0:       80 3d 61 2f 4e 00 00    cmpb   $0x0,0x4e2f61(%rip)        # b7e808 <DoingCommandRead>
    0.00 :	  69b8a7:       74 1f                   je     69b8c8 <client_read_ended+0x38>
         :	        {
         :	                int                     save_errno = errno;
    0.00 :	  69b8a9:       e8 12 e4 dc ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  69b8ae:       44 8b 20                mov    (%rax),%r12d
    0.00 :	  69b8b1:       48 89 c3                mov    %rax,%rbx
         :
         :	                ImmediateInterruptOK = false;
    0.00 :	  69b8b4:       c6 05 d9 e7 51 00 00    movb   $0x0,0x51e7d9(%rip)        # bba094 <ImmediateInterruptOK>
         :
         :	                DisableNotifyInterrupt();
    0.00 :	  69b8bb:       e8 b0 32 eb ff          callq  54eb70 <DisableNotifyInterrupt>
         :	                DisableCatchupInterrupt();
    0.00 :	  69b8c0:       e8 1b 8f fe ff          callq  6847e0 <DisableCatchupInterrupt>
         :
         :	                errno = save_errno;
    0.00 :	  69b8c5:       44 89 23                mov    %r12d,(%rbx)
         :	        }
         :	}
    0.00 :	  69b8c8:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  69b8cc:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  69b8d1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6b50 <date_ge>:
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
  100.00 :	  6c6b50:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  6c6b54:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6c6b57:       55                      push   %rbp
    0.00 :	  6c6b58:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 >= dateVal2);
         :	}
    0.00 :	  6c6b5b:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6c6b5c:       0f 9d c0                setge  %al
    0.00 :	  6c6b5f:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/int.c:391
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006ea7a0 <int4eq>:
         :	 *              intge                   - returns 1 iff arg1 >= arg2
         :	 */
         :
         :	Datum
         :	int4eq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6ea7a0:       48 8b 47 28             mov    0x28(%rdi),%rax
  100.00 :	  6ea7a4:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6ea7a7:       55                      push   %rbp
    0.00 :	  6ea7a8:       48 89 e5                mov    %rsp,%rbp
         :	        int32           arg1 = PG_GETARG_INT32(0);
         :	        int32           arg2 = PG_GETARG_INT32(1);
         :
         :	        PG_RETURN_BOOL(arg1 == arg2);
         :	}
    0.00 :	  6ea7ab:       c9                      leaveq 
         :	 *              intge                   - returns 1 iff arg1 >= arg2
         :	 */
         :
         :	Datum
         :	int4eq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6ea7ac:       0f 94 c0                sete   %al
    0.00 :	  6ea7af:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/numeric.c:3272
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000705e90 <int4_sum>:
         :	        }
         :	}
         :
         :	Datum
         :	int4_sum(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  705e90:       55                      push   %rbp
         :	        int64           newval;
         :
         :	        if (PG_ARGISNULL(0))
    0.00 :	  705e91:       80 bf 40 03 00 00 00    cmpb   $0x0,0x340(%rdi)
         :	        }
         :	}
         :
         :	Datum
         :	int4_sum(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  705e98:       48 89 e5                mov    %rsp,%rbp
         :	        int64           newval;
         :
         :	        if (PG_ARGISNULL(0))
    0.00 :	  705e9b:       74 1b                   je     705eb8 <int4_sum+0x28>
         :	        {
         :	                /* No non-null input seen so far... */
         :	                if (PG_ARGISNULL(1))
    0.00 :	  705e9d:       80 bf 41 03 00 00 00    cmpb   $0x0,0x341(%rdi)
    0.00 :	  705ea4:       74 32                   je     705ed8 <int4_sum+0x48>
         :	                        PG_RETURN_NULL();       /* still no non-null */
    0.00 :	  705ea6:       c6 47 1c 01             movb   $0x1,0x1c(%rdi)
    0.00 :	  705eaa:       31 d2                   xor    %edx,%edx
         :	                /* OK to do the addition. */
         :	                newval = oldsum + (int64) PG_GETARG_INT32(1);
         :
         :	                PG_RETURN_INT64(newval);
         :	        }
         :	}
    0.00 :	  705eac:       48 89 d0                mov    %rdx,%rax
    0.00 :	  705eaf:       c9                      leaveq 
    0.00 :	  705eb0:       c3                      retq   
    0.00 :	  705eb1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	#endif
         :	        {
         :	                int64           oldsum = PG_GETARG_INT64(0);
         :
         :	                /* Leave sum unchanged if new input is null. */
         :	                if (PG_ARGISNULL(1))
    0.00 :	  705eb8:       80 bf 41 03 00 00 00    cmpb   $0x0,0x341(%rdi)
         :	                PG_RETURN_POINTER(oldsum);
         :	        }
         :	        else
         :	#endif
         :	        {
         :	                int64           oldsum = PG_GETARG_INT64(0);
    0.00 :	  705ebf:       48 8b 57 20             mov    0x20(%rdi),%rdx
         :
         :	                /* Leave sum unchanged if new input is null. */
         :	                if (PG_ARGISNULL(1))
    0.00 :	  705ec3:       75 e7                   jne    705eac <int4_sum+0x1c>
         :	                        PG_RETURN_INT64(oldsum);
         :
         :	                /* OK to do the addition. */
         :	                newval = oldsum + (int64) PG_GETARG_INT32(1);
    0.00 :	  705ec5:       48 63 47 28             movslq 0x28(%rdi),%rax
         :
         :	                PG_RETURN_INT64(newval);
         :	        }
         :	}
    0.00 :	  705ec9:       c9                      leaveq 
         :	                        PG_RETURN_INT64(oldsum);
         :
         :	                /* OK to do the addition. */
         :	                newval = oldsum + (int64) PG_GETARG_INT32(1);
         :
         :	                PG_RETURN_INT64(newval);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/numeric.c:3272
  100.00 :	  705eca:       48 8d 14 10             lea    (%rax,%rdx,1),%rdx
         :	        }
         :	}
    0.00 :	  705ece:       48 89 d0                mov    %rdx,%rax
    0.00 :	  705ed1:       c3                      retq   
    0.00 :	  705ed2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                /* No non-null input seen so far... */
         :	                if (PG_ARGISNULL(1))
         :	                        PG_RETURN_NULL();       /* still no non-null */
         :	                /* This is the first non-null input. */
         :	                newval = (int64) PG_GETARG_INT32(1);
         :	                PG_RETURN_INT64(newval);
    0.00 :	  705ed8:       48 63 57 28             movslq 0x28(%rdi),%rdx
         :	                /* OK to do the addition. */
         :	                newval = oldsum + (int64) PG_GETARG_INT32(1);
         :
         :	                PG_RETURN_INT64(newval);
         :	        }
         :	}
    0.00 :	  705edc:       c9                      leaveq 
    0.00 :	  705edd:       48 89 d0                mov    %rdx,%rax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:605
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782de0 <CHashDelete>:
         :	 * Delete from a concurrent hash table.  entry need only contain the key field.
         :	 * Returns true if we find and delete a matching key and false otherwise.
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
    0.00 :	  782de0:       55                      push   %rbp
    0.00 :	  782de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782de4:       41 57                   push   %r15
    0.00 :	  782de6:       41 56                   push   %r14
    0.00 :	  782de8:       49 89 f6                mov    %rsi,%r14
    0.00 :	  782deb:       41 55                   push   %r13
    0.00 :	  782ded:       41 54                   push   %r12
    0.00 :	  782def:       53                      push   %rbx
    0.00 :	  782df0:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  782df3:       48 83 ec 58             sub    $0x58,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782df7:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782dfb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  782dfe:       e8 4d d5 d0 ff          callq  490350 <hash_any>
    0.00 :	  782e03:       41 89 c5                mov    %eax,%r13d
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e06:       8b 43 10                mov    0x10(%rbx),%eax
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e09:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e0d:       44 21 e8                and    %r13d,%eax
    0.00 :	  782e10:       89 45 8c                mov    %eax,-0x74(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e13:       8b 55 8c                mov    -0x74(%rbp),%edx
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782e16:       89 c0                   mov    %eax,%eax
    0.00 :	  782e18:       4c 8d 24 85 00 00 00    lea    0x0(,%rax,4),%r12
    0.00 :	  782e1f:       00 
    0.00 :	  782e20:       4c 03 63 20             add    0x20(%rbx),%r12
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e24:       d3 ea                   shr    %cl,%edx
    0.00 :	  782e26:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  782e2a:       89 d0                   mov    %edx,%eax
    0.00 :	  782e2c:       d3 e8                   shr    %cl,%eax
    0.00 :	  782e2e:       01 d0                   add    %edx,%eax
    0.00 :	  782e30:       48 8b 15 11 ab 3f 00    mov    0x3fab11(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  782e37:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  782e3b:       48 03 43 28             add    0x28(%rbx),%rax
    0.00 :	  782e3f:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  782e46:       f0 83 04 24 00          lock addl $0x0,(%rsp)
    0.00 :	  782e4b:       4c 8d 7d b0             lea    -0x50(%rbp),%r15
    0.00 :	  782e4f:       eb 1e                   jmp    782e6f <CHashDelete+0x8f>
    0.00 :	  782e51:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        if (scan.found)
         :	        {
         :	                Assert(!CHashPtrIsMarked(scan.next));
         :
         :	                /* Attempt to apply delete-mark. */
         :	                if (!__sync_bool_compare_and_swap(&scan.target_node->next,
    0.00 :	  782e58:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  782e5b:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  782e5f:       89 c1                   mov    %eax,%ecx
    0.00 :	  782e61:       83 c9 01                or     $0x1,%ecx
    0.00 :	  782e64:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:605
  100.00 :	  782e68:       74 5e                   je     782ec8 <CHashDelete+0xe8>
         :	                                                                                  scan.next,
         :	                                                                                  CHashPtrMark(scan.next)))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
    0.00 :	  782e6a:       48 83 43 78 01          addq   $0x1,0x78(%rbx)
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket. */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  782e6f:       4d 89 f8                mov    %r15,%r8
    0.00 :	  782e72:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782e75:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782e78:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782e7b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782e7e:       e8 1d fe ff ff          callq  782ca0 <CHashBucketScan>
         :
         :	        /* If we found it, try to delete it. */
         :	        if (scan.found)
    0.00 :	  782e83:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  782e87:       75 cf                   jne    782e58 <CHashDelete+0x78>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  782e89:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  782e8e:       48 8b 05 b3 aa 3f 00    mov    0x3faab3(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782e95:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  782e9c:       00 00 00 00 
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
         :	        if (!scan.found)
    0.00 :	  782ea0:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
    0.00 :	  782ea4:       48 83 43 68 01          addq   $0x1,0x68(%rbx)
         :	        if (!scan.found)
    0.00 :	  782ea9:       84 c0                   test   %al,%al
    0.00 :	  782eab:       75 05                   jne    782eb2 <CHashDelete+0xd2>
         :	                CHashTableIncrementStatistic(table, CHS_Delete_Failed);
    0.00 :	  782ead:       48 83 43 70 01          addq   $0x1,0x70(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  782eb2:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  782eb6:       5b                      pop    %rbx
    0.00 :	  782eb7:       41 5c                   pop    %r12
    0.00 :	  782eb9:       41 5d                   pop    %r13
    0.00 :	  782ebb:       41 5e                   pop    %r14
    0.00 :	  782ebd:       41 5f                   pop    %r15
    0.00 :	  782ebf:       c9                      leaveq 
    0.00 :	  782ec0:       c3                      retq   
    0.00 :	  782ec1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
         :	                        goto retry;
         :	                }
         :
         :	                /* Deletion is done; attempt to remove node from list. */
         :	                if (__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  782ec8:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782ecb:       48 8b 75 b8             mov    -0x48(%rbp),%rsi
    0.00 :	  782ecf:       8b 4d b4                mov    -0x4c(%rbp),%ecx
    0.00 :	  782ed2:       89 d0                   mov    %edx,%eax
    0.00 :	  782ed4:       f0 0f b1 0e             lock cmpxchg %ecx,(%rsi)
    0.00 :	  782ed8:       75 16                   jne    782ef0 <CHashDelete+0x110>
         :	                                                                                 scan.target,
         :	                                                                                 scan.next))
         :	                        CHashAddToGarbage(table, bucket, scan.target);
    0.00 :	  782eda:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782edd:       8b 75 8c                mov    -0x74(%rbp),%esi
    0.00 :	  782ee0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782ee3:       e8 68 fd ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782ee8:       eb 9f                   jmp    782e89 <CHashDelete+0xa9>
    0.00 :	  782eea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * like a regular bucket scan, except that we don't care
         :	                         * about the results.  We're just doing it to achieve the
         :	                         * side-effect of removing delete-marked nodes from the
         :	                         * bucket chain.
         :	                         */
         :	                        CHashTableIncrementStatistic(table, CHS_Cleanup_Scan);
    0.00 :	  782ef0:       48 83 83 98 00 00 00    addq   $0x1,0x98(%rbx)
    0.00 :	  782ef7:       01 
         :	                        CHashBucketScan(table, b, hashcode, entry, &cleanup_scan);
    0.00 :	  782ef8:       4c 8d 45 90             lea    -0x70(%rbp),%r8
    0.00 :	  782efc:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782eff:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782f02:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782f05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782f08:       e8 93 fd ff ff          callq  782ca0 <CHashBucketScan>
    0.00 :	  782f0d:       e9 77 ff ff ff          jmpq   782e89 <CHashDelete+0xa9>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:623
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798e90 <MemoryContextAlloc>:
         :	 * This could be turned into a macro, but we'd have to import
         :	 * nodes/memnodes.h into postgres.h which seems a bad idea.
         :	 */
         :	void *
         :	MemoryContextAlloc(MemoryContext context, Size size)
         :	{
    0.00 :	  798e90:       55                      push   %rbp
    0.00 :	  798e91:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798e94:       53                      push   %rbx
    0.00 :	  798e95:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  798e98:       48 83 ec 08             sub    $0x8,%rsp
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :	        AssertNotInCriticalSection(context);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798e9c:       48 81 fe ff ff ff 3f    cmp    $0x3fffffff,%rsi
    0.00 :	  798ea3:       77 14                   ja     798eb9 <MemoryContextAlloc+0x29>
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        context->isReset = false;
         :
         :	        ret = (*context->methods->alloc) (context, size);
    0.00 :	  798ea5:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        AssertNotInCriticalSection(context);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        context->isReset = false;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:623
  100.00 :	  798ea9:       c6 47 30 00             movb   $0x0,0x30(%rdi)
         :
         :	        ret = (*context->methods->alloc) (context, size);
    0.00 :	  798ead:       4c 8b 18                mov    (%rax),%r11
         :	        VALGRIND_MEMPOOL_ALLOC(context, ret, size);
         :
         :	        return ret;
         :	}
    0.00 :	  798eb0:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  798eb4:       5b                      pop    %rbx
    0.00 :	  798eb5:       c9                      leaveq 
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        context->isReset = false;
         :
         :	        ret = (*context->methods->alloc) (context, size);
    0.00 :	  798eb6:       41 ff e3                jmpq   *%r11
         :
         :	        AssertArg(MemoryContextIsValid(context));
         :	        AssertNotInCriticalSection(context);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
    0.00 :	  798eb9:       ba 60 20 8e 00          mov    $0x8e2060,%edx
    0.00 :	  798ebe:       be 6d 02 00 00          mov    $0x26d,%esi
    0.00 :	  798ec3:       bf 8e 1f 8e 00          mov    $0x8e1f8e,%edi
    0.00 :	  798ec8:       e8 53 25 fe ff          callq  77b420 <elog_start>
    0.00 :	  798ecd:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798ed0:       be b8 1f 8e 00          mov    $0x8e1fb8,%esi
    0.00 :	  798ed5:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798eda:       31 c0                   xor    %eax,%eax
    0.00 :	  798edc:       e8 4f 23 fe ff          callq  77b230 <elog_finish>
    0.00 :	  798ee1:       e8 ea 05 cd ff          callq  4694d0 <abort@plt>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000cd5c0 <__read>:
    0.00 :	   cd5c0:       83 3d ed a0 2a 00 00    cmpl   $0x0,0x2aa0ed(%rip)        # 3776b4 <__libc_multiple_threads>
 ??:0
  100.00 :	   cd5c7:       75 10                   jne    cd5d9 <__read_nocancel+0x10>
         :
         :	00000000000cd5c9 <__read_nocancel>:
    0.00 :	   cd5c9:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5ce:       0f 05                   syscall 
    0.00 :	   cd5d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd5d6:       73 31                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd5d8:       c3                      retq   
    0.00 :	   cd5d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   cd5dd:       e8 4e ac 01 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   cd5e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   cd5e6:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5eb:       0f 05                   syscall 
    0.00 :	   cd5ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   cd5f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   cd5f4:       e8 97 ac 01 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   cd5f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   cd5fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   cd600:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd606:       73 01                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd608:       c3                      retq   
    0.00 :	   cd609:       48 8b 0d 28 48 2a 00    mov    0x2a4828(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   cd610:       31 d2                   xor    %edx,%edx
    0.00 :	   cd612:       48 29 c2                sub    %rax,%rdx
    0.00 :	   cd615:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   cd618:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   cd61c:       eb ea                   jmp    cd608 <__read_nocancel+0x3f>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000db0c0 <__lseek>:
    0.00 :	   db0c0:       83 3d ed c5 29 00 00    cmpl   $0x0,0x29c5ed(%rip)        # 3776b4 <__libc_multiple_threads>
 ??:0
  100.00 :	   db0c7:       75 10                   jne    db0d9 <__lseek_nocancel+0x10>
         :
         :	00000000000db0c9 <__lseek_nocancel>:
    0.00 :	   db0c9:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0ce:       0f 05                   syscall 
    0.00 :	   db0d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db0d6:       73 31                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db0d8:       c3                      retq   
    0.00 :	   db0d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   db0dd:       e8 4e d1 00 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   db0e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   db0e6:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	   db0eb:       0f 05                   syscall 
    0.00 :	   db0ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   db0f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   db0f4:       e8 97 d1 00 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   db0f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   db0fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   db100:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   db106:       73 01                   jae    db109 <__lseek_nocancel+0x40>
    0.00 :	   db108:       c3                      retq   
    0.00 :	   db109:       48 8b 0d 28 6d 29 00    mov    0x296d28(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   db110:       31 d2                   xor    %edx,%edx
    0.00 :	   db112:       48 29 c2                sub    %rax,%rdx
    0.00 :	   db115:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   db118:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   db11c:       eb ea                   jmp    db108 <__lseek_nocancel+0x3f>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000113e60 <__strcmp_sse42>:
    0.00 :	  113e60:       89 f1                   mov    %esi,%ecx
 ??:0
  100.00 :	  113e62:       89 f8                   mov    %edi,%eax
    0.00 :	  113e64:       48 83 e1 3f             and    $0x3f,%rcx
    0.00 :	  113e68:       48 83 e0 3f             and    $0x3f,%rax
    0.00 :	  113e6c:       83 f9 30                cmp    $0x30,%ecx
    0.00 :	  113e6f:       77 3f                   ja     113eb0 <__strcmp_sse42+0x50>
    0.00 :	  113e71:       83 f8 30                cmp    $0x30,%eax
    0.00 :	  113e74:       77 3a                   ja     113eb0 <__strcmp_sse42+0x50>
    0.00 :	  113e76:       f3 0f 6f 0f             movdqu (%rdi),%xmm1
    0.00 :	  113e7a:       f3 0f 6f 16             movdqu (%rsi),%xmm2
    0.00 :	  113e7e:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  113e82:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  113e86:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	  113e8a:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	  113e8e:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	  113e92:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	  113e98:       0f 85 32 0e 00 00       jne    114cd0 <__strcmp_sse42+0xe70>
    0.00 :	  113e9e:       48 83 c6 10             add    $0x10,%rsi
    0.00 :	  113ea2:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	  113ea6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  113ead:       00 00 00 
    0.00 :	  113eb0:       48 83 e6 f0             and    $0xfffffffffffffff0,%rsi
    0.00 :	  113eb4:       48 83 e7 f0             and    $0xfffffffffffffff0,%rdi
    0.00 :	  113eb8:       ba ff ff 00 00          mov    $0xffff,%edx
    0.00 :	  113ebd:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  113ec0:       83 e1 0f                and    $0xf,%ecx
    0.00 :	  113ec3:       83 e0 0f                and    $0xf,%eax
    0.00 :	  113ec6:       39 c1                   cmp    %eax,%ecx
    0.00 :	  113ec8:       74 26                   je     113ef0 <__strcmp_sse42+0x90>
    0.00 :	  113eca:       77 07                   ja     113ed3 <__strcmp_sse42+0x73>
    0.00 :	  113ecc:       41 89 d0                mov    %edx,%r8d
    0.00 :	  113ecf:       91                      xchg   %eax,%ecx
    0.00 :	  113ed0:       48 87 f7                xchg   %rsi,%rdi
    0.00 :	  113ed3:       4c 8d 48 0f             lea    0xf(%rax),%r9
    0.00 :	  113ed7:       49 29 c9                sub    %rcx,%r9
    0.00 :	  113eda:       4c 8d 15 7f fc 02 00    lea    0x2fc7f(%rip),%r10        # 143b60 <null+0x20>
    0.00 :	  113ee1:       4f 63 0c 8a             movslq (%r10,%r9,4),%r9
    0.00 :	  113ee5:       4f 8d 14 0a             lea    (%r10,%r9,1),%r10
    0.00 :	  113ee9:       41 ff e2                jmpq   *%r10
    0.00 :	  113eec:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  113ef0:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  113ef4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  113ef8:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  113efc:       66 0f 74 0f             pcmpeqb (%rdi),%xmm1
    0.00 :	  113f00:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	  113f04:       66 44 0f d7 c9          pmovmskb %xmm1,%r9d
    0.00 :	  113f09:       d3 ea                   shr    %cl,%edx
    0.00 :	  113f0b:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  113f0e:       44 29 ca                sub    %r9d,%edx
    0.00 :	  113f11:       0f 85 a4 0d 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  113f17:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  113f1e:       49 c7 c1 10 00 00 00    mov    $0x10,%r9
    0.00 :	  113f25:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  113f29:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  113f2c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  113f30:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  113f35:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  113f3c:       48 8d 52 10             lea    0x10(%rdx),%rdx
    0.00 :	  113f40:       76 1e                   jbe    113f60 <__strcmp_sse42+0x100>
    0.00 :	  113f42:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  113f47:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  113f4e:       48 8d 52 10             lea    0x10(%rdx),%rdx
    0.00 :	  113f52:       76 0c                   jbe    113f60 <__strcmp_sse42+0x100>
    0.00 :	  113f54:       eb da                   jmp    113f30 <__strcmp_sse42+0xd0>
    0.00 :	  113f56:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  113f5d:       00 00 00 
    0.00 :	  113f60:       0f 83 79 0d 00 00       jae    114cdf <__strcmp_sse42+0xe7f>
    0.00 :	  113f66:       48 8d 4c 0a f0          lea    -0x10(%rdx,%rcx,1),%rcx
    0.00 :	  113f6b:       0f b6 04 0f             movzbl (%rdi,%rcx,1),%eax
    0.00 :	  113f6f:       0f b6 14 0e             movzbl (%rsi,%rcx,1),%edx
    0.00 :	  113f73:       29 d0                   sub    %edx,%eax
    0.00 :	  113f75:       c3                      retq   
    0.00 :	  113f76:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  113f7d:       00 00 00 
    0.00 :	  113f80:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  113f84:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  113f88:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  113f8c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  113f90:       66 0f 73 fa 0f          pslldq $0xf,%xmm2
    0.00 :	  113f95:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  113f99:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  113f9d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  113fa2:       d3 ea                   shr    %cl,%edx
    0.00 :	  113fa4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  113fa7:       44 29 ca                sub    %r9d,%edx
    0.00 :	  113faa:       0f 85 0b 0d 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  113fb0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  113fb4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  113fb8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  113fbf:       41 b9 01 00 00 00       mov    $0x1,%r9d
    0.00 :	  113fc5:       4c 8d 57 01             lea    0x1(%rdi),%r10
    0.00 :	  113fc9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  113fd0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  113fd7:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  113fda:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  113fe0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  113fe4:       7f 4a                   jg     114030 <__strcmp_sse42+0x1d0>
    0.00 :	  113fe6:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  113feb:       66 0f 3a 0f 44 17 f0    palignr $0x1,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  113ff2:       01 
    0.00 :	  113ff3:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  113ffa:       0f 86 a0 0c 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114000:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114004:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114008:       7f 26                   jg     114030 <__strcmp_sse42+0x1d0>
    0.00 :	  11400a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11400f:       66 0f 3a 0f 44 17 f0    palignr $0x1,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114016:       01 
    0.00 :	  114017:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11401e:       0f 86 7c 0c 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114024:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114028:       eb b6                   jmp    113fe0 <__strcmp_sse42+0x180>
    0.00 :	  11402a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114030:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114037:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11403d:       66 0f 73 d8 01          psrldq $0x1,%xmm0
    0.00 :	  114042:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114048:       83 f9 0e                cmp    $0xe,%ecx
    0.00 :	  11404b:       77 bd                   ja     11400a <__strcmp_sse42+0x1aa>
    0.00 :	  11404d:       e9 3b 0c 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114052:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114059:       1f 84 00 00 00 00 00 
    0.00 :	  114060:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114064:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114068:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11406c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114070:       66 0f 73 fa 0e          pslldq $0xe,%xmm2
    0.00 :	  114075:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114079:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11407d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114082:       d3 ea                   shr    %cl,%edx
    0.00 :	  114084:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114087:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11408a:       0f 85 2b 0c 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114090:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114094:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114098:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11409f:       41 b9 02 00 00 00       mov    $0x2,%r9d
    0.00 :	  1140a5:       4c 8d 57 02             lea    0x2(%rdi),%r10
    0.00 :	  1140a9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  1140b0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1140b7:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  1140ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1140c0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1140c4:       7f 4a                   jg     114110 <__strcmp_sse42+0x2b0>
    0.00 :	  1140c6:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1140cb:       66 0f 3a 0f 44 17 f0    palignr $0x2,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1140d2:       02 
    0.00 :	  1140d3:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1140da:       0f 86 c0 0b 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1140e0:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1140e4:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1140e8:       7f 26                   jg     114110 <__strcmp_sse42+0x2b0>
    0.00 :	  1140ea:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1140ef:       66 0f 3a 0f 44 17 f0    palignr $0x2,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1140f6:       02 
    0.00 :	  1140f7:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1140fe:       0f 86 9c 0b 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114104:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114108:       eb b6                   jmp    1140c0 <__strcmp_sse42+0x260>
    0.00 :	  11410a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114110:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114117:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11411d:       66 0f 73 d8 02          psrldq $0x2,%xmm0
    0.00 :	  114122:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114128:       83 f9 0d                cmp    $0xd,%ecx
    0.00 :	  11412b:       77 99                   ja     1140c6 <__strcmp_sse42+0x266>
    0.00 :	  11412d:       e9 5b 0b 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114132:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114139:       1f 84 00 00 00 00 00 
    0.00 :	  114140:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114144:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114148:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11414c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114150:       66 0f 73 fa 0d          pslldq $0xd,%xmm2
    0.00 :	  114155:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114159:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11415d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114162:       d3 ea                   shr    %cl,%edx
    0.00 :	  114164:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114167:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11416a:       0f 85 4b 0b 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114170:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114174:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114178:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11417f:       41 b9 03 00 00 00       mov    $0x3,%r9d
    0.00 :	  114185:       4c 8d 57 03             lea    0x3(%rdi),%r10
    0.00 :	  114189:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114190:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114197:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11419a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  11419e:       7f 50                   jg     1141f0 <__strcmp_sse42+0x390>
    0.00 :	  1141a0:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1141a5:       66 0f 3a 0f 44 17 f0    palignr $0x3,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1141ac:       03 
    0.00 :	  1141ad:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1141b4:       0f 86 e6 0a 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1141ba:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1141be:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1141c2:       7f 2c                   jg     1141f0 <__strcmp_sse42+0x390>
    0.00 :	  1141c4:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1141c9:       66 0f 3a 0f 44 17 f0    palignr $0x3,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1141d0:       03 
    0.00 :	  1141d1:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1141d8:       0f 86 c2 0a 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1141de:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1141e2:       eb b6                   jmp    11419a <__strcmp_sse42+0x33a>
    0.00 :	  1141e4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  1141eb:       00 00 00 00 00 
    0.00 :	  1141f0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1141f7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1141fd:       66 0f 73 d8 03          psrldq $0x3,%xmm0
    0.00 :	  114202:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114208:       83 f9 0c                cmp    $0xc,%ecx
    0.00 :	  11420b:       77 93                   ja     1141a0 <__strcmp_sse42+0x340>
    0.00 :	  11420d:       e9 7b 0a 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114212:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114219:       1f 84 00 00 00 00 00 
    0.00 :	  114220:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114224:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114228:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11422c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114230:       66 0f 73 fa 0c          pslldq $0xc,%xmm2
    0.00 :	  114235:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114239:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11423d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114242:       d3 ea                   shr    %cl,%edx
    0.00 :	  114244:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114247:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11424a:       0f 85 6b 0a 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114250:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114254:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114258:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11425f:       41 b9 04 00 00 00       mov    $0x4,%r9d
    0.00 :	  114265:       4c 8d 57 04             lea    0x4(%rdi),%r10
    0.00 :	  114269:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114270:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114277:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11427a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114280:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114284:       7f 4a                   jg     1142d0 <__strcmp_sse42+0x470>
    0.00 :	  114286:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11428b:       66 0f 3a 0f 44 17 f0    palignr $0x4,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114292:       04 
    0.00 :	  114293:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11429a:       0f 86 00 0a 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1142a0:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1142a4:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1142a8:       7f 26                   jg     1142d0 <__strcmp_sse42+0x470>
    0.00 :	  1142aa:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1142af:       66 0f 3a 0f 44 17 f0    palignr $0x4,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1142b6:       04 
    0.00 :	  1142b7:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1142be:       0f 86 dc 09 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1142c4:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1142c8:       eb b6                   jmp    114280 <__strcmp_sse42+0x420>
    0.00 :	  1142ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1142d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1142d7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1142dd:       66 0f 73 d8 04          psrldq $0x4,%xmm0
    0.00 :	  1142e2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  1142e8:       83 f9 0b                cmp    $0xb,%ecx
    0.00 :	  1142eb:       77 99                   ja     114286 <__strcmp_sse42+0x426>
    0.00 :	  1142ed:       e9 9b 09 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  1142f2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  1142f9:       1f 84 00 00 00 00 00 
    0.00 :	  114300:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114304:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114308:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11430c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114310:       66 0f 73 fa 0b          pslldq $0xb,%xmm2
    0.00 :	  114315:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114319:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11431d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114322:       d3 ea                   shr    %cl,%edx
    0.00 :	  114324:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114327:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11432a:       0f 85 8b 09 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114330:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114334:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114338:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11433f:       41 b9 05 00 00 00       mov    $0x5,%r9d
    0.00 :	  114345:       4c 8d 57 05             lea    0x5(%rdi),%r10
    0.00 :	  114349:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114350:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114357:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11435a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114360:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114364:       7f 4a                   jg     1143b0 <__strcmp_sse42+0x550>
    0.00 :	  114366:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11436b:       66 0f 3a 0f 44 17 f0    palignr $0x5,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114372:       05 
    0.00 :	  114373:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11437a:       0f 86 20 09 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114380:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114384:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114388:       7f 26                   jg     1143b0 <__strcmp_sse42+0x550>
    0.00 :	  11438a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11438f:       66 0f 3a 0f 44 17 f0    palignr $0x5,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114396:       05 
    0.00 :	  114397:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11439e:       0f 86 fc 08 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1143a4:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1143a8:       eb b6                   jmp    114360 <__strcmp_sse42+0x500>
    0.00 :	  1143aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1143b0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1143b7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1143bd:       66 0f 73 d8 05          psrldq $0x5,%xmm0
    0.00 :	  1143c2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  1143c8:       83 f9 0a                cmp    $0xa,%ecx
    0.00 :	  1143cb:       77 99                   ja     114366 <__strcmp_sse42+0x506>
    0.00 :	  1143cd:       e9 bb 08 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  1143d2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  1143d9:       1f 84 00 00 00 00 00 
    0.00 :	  1143e0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1143e4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  1143e8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  1143ec:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  1143f0:       66 0f 73 fa 0a          pslldq $0xa,%xmm2
    0.00 :	  1143f5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  1143f9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  1143fd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114402:       d3 ea                   shr    %cl,%edx
    0.00 :	  114404:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114407:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11440a:       0f 85 ab 08 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114410:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114414:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114418:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11441f:       41 b9 06 00 00 00       mov    $0x6,%r9d
    0.00 :	  114425:       4c 8d 57 06             lea    0x6(%rdi),%r10
    0.00 :	  114429:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114430:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114437:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11443a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114440:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114444:       7f 4a                   jg     114490 <__strcmp_sse42+0x630>
    0.00 :	  114446:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11444b:       66 0f 3a 0f 44 17 f0    palignr $0x6,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114452:       06 
    0.00 :	  114453:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11445a:       0f 86 40 08 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114460:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114464:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114468:       7f 26                   jg     114490 <__strcmp_sse42+0x630>
    0.00 :	  11446a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11446f:       66 0f 3a 0f 44 17 f0    palignr $0x6,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114476:       06 
    0.00 :	  114477:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11447e:       0f 86 1c 08 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114484:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114488:       eb b6                   jmp    114440 <__strcmp_sse42+0x5e0>
    0.00 :	  11448a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114490:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114497:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11449d:       66 0f 73 d8 06          psrldq $0x6,%xmm0
    0.00 :	  1144a2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  1144a8:       83 f9 09                cmp    $0x9,%ecx
    0.00 :	  1144ab:       77 99                   ja     114446 <__strcmp_sse42+0x5e6>
    0.00 :	  1144ad:       e9 db 07 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  1144b2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  1144b9:       1f 84 00 00 00 00 00 
    0.00 :	  1144c0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1144c4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  1144c8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  1144cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  1144d0:       66 0f 73 fa 09          pslldq $0x9,%xmm2
    0.00 :	  1144d5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  1144d9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  1144dd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  1144e2:       d3 ea                   shr    %cl,%edx
    0.00 :	  1144e4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  1144e7:       44 29 ca                sub    %r9d,%edx
    0.00 :	  1144ea:       0f 85 cb 07 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  1144f0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  1144f4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1144f8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  1144ff:       41 b9 07 00 00 00       mov    $0x7,%r9d
    0.00 :	  114505:       4c 8d 57 07             lea    0x7(%rdi),%r10
    0.00 :	  114509:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114510:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114517:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11451a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114520:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114524:       7f 4a                   jg     114570 <__strcmp_sse42+0x710>
    0.00 :	  114526:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11452b:       66 0f 3a 0f 44 17 f0    palignr $0x7,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114532:       07 
    0.00 :	  114533:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11453a:       0f 86 60 07 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114540:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114544:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114548:       7f 26                   jg     114570 <__strcmp_sse42+0x710>
    0.00 :	  11454a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11454f:       66 0f 3a 0f 44 17 f0    palignr $0x7,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114556:       07 
    0.00 :	  114557:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11455e:       0f 86 3c 07 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114564:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114568:       eb b6                   jmp    114520 <__strcmp_sse42+0x6c0>
    0.00 :	  11456a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114570:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114577:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11457d:       66 0f 73 d8 07          psrldq $0x7,%xmm0
    0.00 :	  114582:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114588:       83 f9 08                cmp    $0x8,%ecx
    0.00 :	  11458b:       77 99                   ja     114526 <__strcmp_sse42+0x6c6>
    0.00 :	  11458d:       e9 fb 06 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114592:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114599:       1f 84 00 00 00 00 00 
    0.00 :	  1145a0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1145a4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  1145a8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  1145ac:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  1145b0:       66 0f 73 fa 08          pslldq $0x8,%xmm2
    0.00 :	  1145b5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  1145b9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  1145bd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  1145c2:       d3 ea                   shr    %cl,%edx
    0.00 :	  1145c4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  1145c7:       44 29 ca                sub    %r9d,%edx
    0.00 :	  1145ca:       0f 85 eb 06 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  1145d0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  1145d4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1145d8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  1145df:       41 b9 08 00 00 00       mov    $0x8,%r9d
    0.00 :	  1145e5:       4c 8d 57 08             lea    0x8(%rdi),%r10
    0.00 :	  1145e9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  1145f0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1145f7:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  1145fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114600:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114604:       7f 4a                   jg     114650 <__strcmp_sse42+0x7f0>
    0.00 :	  114606:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11460b:       66 0f 3a 0f 44 17 f0    palignr $0x8,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114612:       08 
    0.00 :	  114613:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11461a:       0f 86 80 06 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114620:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114624:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114628:       7f 26                   jg     114650 <__strcmp_sse42+0x7f0>
    0.00 :	  11462a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11462f:       66 0f 3a 0f 44 17 f0    palignr $0x8,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114636:       08 
    0.00 :	  114637:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11463e:       0f 86 5c 06 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114644:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114648:       eb b6                   jmp    114600 <__strcmp_sse42+0x7a0>
    0.00 :	  11464a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114650:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114657:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11465d:       66 0f 73 d8 08          psrldq $0x8,%xmm0
    0.00 :	  114662:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114668:       83 f9 07                cmp    $0x7,%ecx
    0.00 :	  11466b:       77 99                   ja     114606 <__strcmp_sse42+0x7a6>
    0.00 :	  11466d:       e9 1b 06 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114672:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114679:       1f 84 00 00 00 00 00 
    0.00 :	  114680:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114684:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114688:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11468c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114690:       66 0f 73 fa 07          pslldq $0x7,%xmm2
    0.00 :	  114695:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114699:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11469d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  1146a2:       d3 ea                   shr    %cl,%edx
    0.00 :	  1146a4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  1146a7:       44 29 ca                sub    %r9d,%edx
    0.00 :	  1146aa:       0f 85 0b 06 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  1146b0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  1146b4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  1146b8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  1146bf:       41 b9 09 00 00 00       mov    $0x9,%r9d
    0.00 :	  1146c5:       4c 8d 57 09             lea    0x9(%rdi),%r10
    0.00 :	  1146c9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  1146d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1146d7:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  1146da:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1146e0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1146e4:       7f 4a                   jg     114730 <__strcmp_sse42+0x8d0>
    0.00 :	  1146e6:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1146eb:       66 0f 3a 0f 44 17 f0    palignr $0x9,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1146f2:       09 
    0.00 :	  1146f3:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1146fa:       0f 86 a0 05 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114700:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114704:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114708:       7f 26                   jg     114730 <__strcmp_sse42+0x8d0>
    0.00 :	  11470a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11470f:       66 0f 3a 0f 44 17 f0    palignr $0x9,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114716:       09 
    0.00 :	  114717:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11471e:       0f 86 7c 05 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114724:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114728:       eb b6                   jmp    1146e0 <__strcmp_sse42+0x880>
    0.00 :	  11472a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114730:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114737:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11473d:       66 0f 73 d8 09          psrldq $0x9,%xmm0
    0.00 :	  114742:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114748:       83 f9 06                cmp    $0x6,%ecx
    0.00 :	  11474b:       77 99                   ja     1146e6 <__strcmp_sse42+0x886>
    0.00 :	  11474d:       e9 3b 05 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114752:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114759:       1f 84 00 00 00 00 00 
    0.00 :	  114760:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114764:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114768:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11476c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114770:       66 0f 73 fa 06          pslldq $0x6,%xmm2
    0.00 :	  114775:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114779:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11477d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114782:       d3 ea                   shr    %cl,%edx
    0.00 :	  114784:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114787:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11478a:       0f 85 2b 05 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114790:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114794:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114798:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11479f:       41 b9 0a 00 00 00       mov    $0xa,%r9d
    0.00 :	  1147a5:       4c 8d 57 0a             lea    0xa(%rdi),%r10
    0.00 :	  1147a9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  1147b0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1147b7:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  1147ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1147c0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1147c4:       7f 4a                   jg     114810 <__strcmp_sse42+0x9b0>
    0.00 :	  1147c6:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1147cb:       66 0f 3a 0f 44 17 f0    palignr $0xa,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1147d2:       0a 
    0.00 :	  1147d3:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1147da:       0f 86 c0 04 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1147e0:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1147e4:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1147e8:       7f 26                   jg     114810 <__strcmp_sse42+0x9b0>
    0.00 :	  1147ea:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1147ef:       66 0f 3a 0f 44 17 f0    palignr $0xa,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1147f6:       0a 
    0.00 :	  1147f7:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1147fe:       0f 86 9c 04 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114804:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114808:       eb b6                   jmp    1147c0 <__strcmp_sse42+0x960>
    0.00 :	  11480a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114810:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114817:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  11481d:       66 0f 73 d8 0a          psrldq $0xa,%xmm0
    0.00 :	  114822:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114828:       83 f9 05                cmp    $0x5,%ecx
    0.00 :	  11482b:       77 99                   ja     1147c6 <__strcmp_sse42+0x966>
    0.00 :	  11482d:       e9 5b 04 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114832:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114839:       1f 84 00 00 00 00 00 
    0.00 :	  114840:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114844:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114848:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11484c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114850:       66 0f 73 fa 05          pslldq $0x5,%xmm2
    0.00 :	  114855:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114859:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11485d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114862:       d3 ea                   shr    %cl,%edx
    0.00 :	  114864:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114867:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11486a:       0f 85 4b 04 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114870:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114874:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114878:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11487f:       41 b9 0b 00 00 00       mov    $0xb,%r9d
    0.00 :	  114885:       4c 8d 57 0b             lea    0xb(%rdi),%r10
    0.00 :	  114889:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114890:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114897:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11489a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1148a0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1148a4:       7f 4a                   jg     1148f0 <__strcmp_sse42+0xa90>
    0.00 :	  1148a6:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1148ab:       66 0f 3a 0f 44 17 f0    palignr $0xb,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1148b2:       0b 
    0.00 :	  1148b3:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1148ba:       0f 86 e0 03 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1148c0:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1148c4:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1148c8:       7f 26                   jg     1148f0 <__strcmp_sse42+0xa90>
    0.00 :	  1148ca:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1148cf:       66 0f 3a 0f 44 17 f0    palignr $0xb,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1148d6:       0b 
    0.00 :	  1148d7:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1148de:       0f 86 bc 03 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1148e4:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1148e8:       eb b6                   jmp    1148a0 <__strcmp_sse42+0xa40>
    0.00 :	  1148ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1148f0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1148f7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1148fd:       66 0f 73 d8 0b          psrldq $0xb,%xmm0
    0.00 :	  114902:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114908:       83 f9 04                cmp    $0x4,%ecx
    0.00 :	  11490b:       77 99                   ja     1148a6 <__strcmp_sse42+0xa46>
    0.00 :	  11490d:       e9 7b 03 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114912:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114919:       1f 84 00 00 00 00 00 
    0.00 :	  114920:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114924:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114928:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  11492c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114930:       66 0f 73 fa 04          pslldq $0x4,%xmm2
    0.00 :	  114935:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114939:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  11493d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114942:       d3 ea                   shr    %cl,%edx
    0.00 :	  114944:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114947:       44 29 ca                sub    %r9d,%edx
    0.00 :	  11494a:       0f 85 6b 03 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114950:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114954:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114958:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  11495f:       41 b9 0c 00 00 00       mov    $0xc,%r9d
    0.00 :	  114965:       4c 8d 57 0c             lea    0xc(%rdi),%r10
    0.00 :	  114969:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114970:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114977:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  11497a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114980:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114984:       7f 4a                   jg     1149d0 <__strcmp_sse42+0xb70>
    0.00 :	  114986:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  11498b:       66 0f 3a 0f 44 17 f0    palignr $0xc,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114992:       0c 
    0.00 :	  114993:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  11499a:       0f 86 00 03 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1149a0:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1149a4:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  1149a8:       7f 26                   jg     1149d0 <__strcmp_sse42+0xb70>
    0.00 :	  1149aa:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  1149af:       66 0f 3a 0f 44 17 f0    palignr $0xc,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1149b6:       0c 
    0.00 :	  1149b7:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  1149be:       0f 86 dc 02 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  1149c4:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  1149c8:       eb b6                   jmp    114980 <__strcmp_sse42+0xb20>
    0.00 :	  1149ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  1149d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  1149d7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  1149dd:       66 0f 73 d8 0c          psrldq $0xc,%xmm0
    0.00 :	  1149e2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  1149e8:       83 f9 03                cmp    $0x3,%ecx
    0.00 :	  1149eb:       77 99                   ja     114986 <__strcmp_sse42+0xb26>
    0.00 :	  1149ed:       e9 9b 02 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  1149f2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  1149f9:       1f 84 00 00 00 00 00 
    0.00 :	  114a00:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114a04:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114a08:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  114a0c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114a10:       66 0f 73 fa 03          pslldq $0x3,%xmm2
    0.00 :	  114a15:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114a19:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  114a1d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114a22:       d3 ea                   shr    %cl,%edx
    0.00 :	  114a24:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114a27:       44 29 ca                sub    %r9d,%edx
    0.00 :	  114a2a:       0f 85 8b 02 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114a30:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114a34:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114a38:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  114a3f:       41 b9 0d 00 00 00       mov    $0xd,%r9d
    0.00 :	  114a45:       4c 8d 57 0d             lea    0xd(%rdi),%r10
    0.00 :	  114a49:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114a50:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114a57:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  114a5a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114a60:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114a64:       7f 4a                   jg     114ab0 <__strcmp_sse42+0xc50>
    0.00 :	  114a66:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114a6b:       66 0f 3a 0f 44 17 f0    palignr $0xd,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114a72:       0d 
    0.00 :	  114a73:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114a7a:       0f 86 20 02 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114a80:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114a84:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114a88:       7f 26                   jg     114ab0 <__strcmp_sse42+0xc50>
    0.00 :	  114a8a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114a8f:       66 0f 3a 0f 44 17 f0    palignr $0xd,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114a96:       0d 
    0.00 :	  114a97:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114a9e:       0f 86 fc 01 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114aa4:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114aa8:       eb b6                   jmp    114a60 <__strcmp_sse42+0xc00>
    0.00 :	  114aaa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114ab0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114ab7:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114abd:       66 0f 73 d8 0d          psrldq $0xd,%xmm0
    0.00 :	  114ac2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114ac8:       83 f9 02                cmp    $0x2,%ecx
    0.00 :	  114acb:       77 99                   ja     114a66 <__strcmp_sse42+0xc06>
    0.00 :	  114acd:       e9 bb 01 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114ad2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114ad9:       1f 84 00 00 00 00 00 
    0.00 :	  114ae0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114ae4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114ae8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  114aec:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114af0:       66 0f 73 fa 02          pslldq $0x2,%xmm2
    0.00 :	  114af5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114af9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  114afd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114b02:       d3 ea                   shr    %cl,%edx
    0.00 :	  114b04:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114b07:       44 29 ca                sub    %r9d,%edx
    0.00 :	  114b0a:       0f 85 ab 01 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114b10:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114b14:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114b18:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  114b1f:       41 b9 0e 00 00 00       mov    $0xe,%r9d
    0.00 :	  114b25:       4c 8d 57 0e             lea    0xe(%rdi),%r10
    0.00 :	  114b29:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114b30:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114b37:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  114b3a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114b40:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114b44:       7f 4a                   jg     114b90 <__strcmp_sse42+0xd30>
    0.00 :	  114b46:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114b4b:       66 0f 3a 0f 44 17 f0    palignr $0xe,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114b52:       0e 
    0.00 :	  114b53:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114b5a:       0f 86 40 01 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114b60:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114b64:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114b68:       7f 26                   jg     114b90 <__strcmp_sse42+0xd30>
    0.00 :	  114b6a:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114b6f:       66 0f 3a 0f 44 17 f0    palignr $0xe,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114b76:       0e 
    0.00 :	  114b77:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114b7e:       0f 86 1c 01 00 00       jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114b84:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114b88:       eb b6                   jmp    114b40 <__strcmp_sse42+0xce0>
    0.00 :	  114b8a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114b90:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114b97:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114b9d:       66 0f 73 d8 0e          psrldq $0xe,%xmm0
    0.00 :	  114ba2:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114ba8:       83 f9 01                cmp    $0x1,%ecx
    0.00 :	  114bab:       77 99                   ja     114b46 <__strcmp_sse42+0xce6>
    0.00 :	  114bad:       e9 db 00 00 00          jmpq   114c8d <__strcmp_sse42+0xe2d>
    0.00 :	  114bb2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114bb9:       1f 84 00 00 00 00 00 
    0.00 :	  114bc0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114bc4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	  114bc8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	  114bcc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	  114bd0:       66 0f 73 fa 01          pslldq $0x1,%xmm2
    0.00 :	  114bd5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	  114bd9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	  114bdd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	  114be2:       d3 ea                   shr    %cl,%edx
    0.00 :	  114be4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	  114be7:       44 29 ca                sub    %r9d,%edx
    0.00 :	  114bea:       0f 85 cb 00 00 00       jne    114cbb <__strcmp_sse42+0xe5b>
    0.00 :	  114bf0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	  114bf4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	  114bf8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	  114bff:       41 b9 0f 00 00 00       mov    $0xf,%r9d
    0.00 :	  114c05:       4c 8d 57 0f             lea    0xf(%rdi),%r10
    0.00 :	  114c09:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	  114c10:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114c17:       48 89 ca                mov    %rcx,%rdx
    0.00 :	  114c1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  114c20:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114c24:       7f 4a                   jg     114c70 <__strcmp_sse42+0xe10>
    0.00 :	  114c26:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114c2b:       66 0f 3a 0f 44 17 f0    palignr $0xf,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114c32:       0f 
    0.00 :	  114c33:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114c3a:       76 64                   jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114c3c:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114c40:       49 83 c2 10             add    $0x10,%r10
    0.00 :	  114c44:       7f 2a                   jg     114c70 <__strcmp_sse42+0xe10>
    0.00 :	  114c46:       66 0f 6f 04 17          movdqa (%rdi,%rdx,1),%xmm0
    0.00 :	  114c4b:       66 0f 3a 0f 44 17 f0    palignr $0xf,-0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114c52:       0f 
    0.00 :	  114c53:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114c5a:       76 44                   jbe    114ca0 <__strcmp_sse42+0xe40>
    0.00 :	  114c5c:       48 83 c2 10             add    $0x10,%rdx
    0.00 :	  114c60:       eb be                   jmp    114c20 <__strcmp_sse42+0xdc0>
    0.00 :	  114c62:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114c69:       1f 84 00 00 00 00 00 
    0.00 :	  114c70:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	  114c77:       66 0f 6f 44 17 f0       movdqa -0x10(%rdi,%rdx,1),%xmm0
    0.00 :	  114c7d:       66 0f 73 d8 0f          psrldq $0xf,%xmm0
    0.00 :	  114c82:       66 0f 3a 63 c0 3a       pcmpistri $0x3a,%xmm0,%xmm0
    0.00 :	  114c88:       83 f9 00                cmp    $0x0,%ecx
    0.00 :	  114c8b:       77 99                   ja     114c26 <__strcmp_sse42+0xdc6>
    0.00 :	  114c8d:       66 0f 3a 63 04 16 1a    pcmpistri $0x1a,(%rsi,%rdx,1),%xmm0
    0.00 :	  114c94:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114c9b:       00 00 00 00 00 
    0.00 :	  114ca0:       73 3d                   jae    114cdf <__strcmp_sse42+0xe7f>
    0.00 :	  114ca2:       48 01 ca                add    %rcx,%rdx
    0.00 :	  114ca5:       4a 8d 7c 0f f0          lea    -0x10(%rdi,%r9,1),%rdi
    0.00 :	  114caa:       0f b6 04 17             movzbl (%rdi,%rdx,1),%eax
    0.00 :	  114cae:       0f b6 14 16             movzbl (%rsi,%rdx,1),%edx
    0.00 :	  114cb2:       45 85 c0                test   %r8d,%r8d
    0.00 :	  114cb5:       74 01                   je     114cb8 <__strcmp_sse42+0xe58>
    0.00 :	  114cb7:       92                      xchg   %eax,%edx
    0.00 :	  114cb8:       29 d0                   sub    %edx,%eax
    0.00 :	  114cba:       c3                      retq   
    0.00 :	  114cbb:       48 8d 3c 07             lea    (%rdi,%rax,1),%rdi
    0.00 :	  114cbf:       48 8d 34 0e             lea    (%rsi,%rcx,1),%rsi
    0.00 :	  114cc3:       45 85 c0                test   %r8d,%r8d
    0.00 :	  114cc6:       74 08                   je     114cd0 <__strcmp_sse42+0xe70>
    0.00 :	  114cc8:       48 87 f7                xchg   %rsi,%rdi
    0.00 :	  114ccb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  114cd0:       48 0f bc d2             bsf    %rdx,%rdx
    0.00 :	  114cd4:       0f b6 0c 16             movzbl (%rsi,%rdx,1),%ecx
    0.00 :	  114cd8:       0f b6 04 17             movzbl (%rdi,%rdx,1),%eax
    0.00 :	  114cdc:       29 c8                   sub    %ecx,%eax
    0.00 :	  114cde:       c3                      retq   
    0.00 :	  114cdf:       31 c0                   xor    %eax,%eax
    0.00 :	  114ce1:       c3                      retq   
    0.00 :	  114ce2:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  114ce9:       1f 84 00 00 00 00 00 
    0.00 :	  114cf0:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	  114cf3:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  114cf6:       29 c8                   sub    %ecx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_filter.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/ipv4/netfilter/iptable_filter.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000080 <iptable_filter_hook>:
 ??:0
  100.00 :	  80:   83 ff 03                cmp    $0x3,%edi
    0.00 :	  b3:   49 89 f1 48 89          pushq  $0x411d7613
    0.00 :	  b8:   d6 74 25 48 85 f6       mov    0xc4(%rcx),%edx
    0.00 :	  be:   48 89 c8 48 89 f2 48    mov    0xd8(%r9),%rax
    0.00 :	  c5:   0f 45 c6 89             movzbl (%rax,%rdx,1),%eax
    0.00 :	  c9:   fe 4c 89                and    $0xf,%eax
    0.00 :	  cc:   cf 48 8b                shl    $0x2,%eax
    0.00 :	  cf:   80 60 04                cmp    $0x13,%eax
    0.00 :	  d2:   00 00                   ja     8b <iptable_filter_net_exit+0x5b>
    0.00 :	  d4:   4c 8b 80 48 02          mov    $0x1,%eax
    0.00 :	  d9:   00                      retq   
         :	  da:   00 e9                   xchg   %ax,%ax
         :	  dc:   Address 0x00000000000000dc is out of bounds.
         :

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000013c0 <do_get_write_access>:
    0.00 :	    13c0:       41 57                   push   %r15
    0.00 :	    13f2:       41 56                   xor    %dh,%dh
    0.00 :	    13f4:       41 55                   add    %al,(%rdx)
    0.00 :	    13f6:       41 54 49 89 f4 55       jne    16c2 <__journal_refile_buffer+0x1372>
    0.00 :	    13fc:       53 48 81 ec 88          lea    0x40(%rsp),%rdx
    0.00 :	    1401:       00 00 00 48 89          lea    0x40(%rsp),%r15
    0.00 :	    1406:       7c 24 28 89 54 24 24    movq   $0x0,0x38(%rsp)
    0.00 :	    140d:       f6 47 
    0.00 :	    140f:       14 04 0f 85 db 02 00    mov    %gs:0x0,%rax
    0.00 :	    1416:       00 4c 
    0.00 :	    1418:       8b 2f 49 8b 45          mov    %rdx,0x8(%rsp)
    0.00 :	    141d:       00 48 89 44             add    $0x28,%rdx
    0.00 :	    1421:       24 30 f6 00 02          mov    %rax,0x18(%rsp)
    0.00 :	    1426:       0f 85 c6 02 00          mov    %rdx,0x10(%rsp)
    0.00 :	    142b:       00 48 8d 54             add    $0x10,%r15
    0.00 :	    142f:       24                      nop
    0.00 :	    1430:       40 4c 8d 7c             mov    (%r12),%rbp
    0.00 :	    1434:       24 40 48 c7 44 24       lock btsl $0x2,0x0(%rbp)
    0.00 :	    143a:       38 00                   sbb    %eax,%eax
    0.00 :	    143c:       00 00                   test   %eax,%eax
    0.00 :	    143e:       00 65 48 8b 04 25       jne    15f8 <__journal_refile_buffer+0x12a8>
    0.00 :	    1444:       00 00 00 00 48 89       lock btsl $0x14,0x0(%rbp)
    0.00 :	    144a:       54 24                   sbb    %eax,%eax
    0.00 :	    144c:       08 48                   test   %eax,%eax
    0.00 :	    144e:       83 c2                   je     1469 <__journal_refile_buffer+0x1119>
    0.00 :	    1450:       28 48                   pause  
    0.00 :	    1452:       89 44 24 18             mov    0x0(%rbp),%rax
    0.00 :	    1456:       48 89 54 24 10          test   $0x100000,%eax
    0.00 :	    145b:       49 83                   jne    1450 <__journal_refile_buffer+0x1100>
    0.00 :	    145d:       c7 10 90 49 8b 2c       lock btsl $0x14,0x0(%rbp)
    0.00 :	    1463:       24 f0                   sbb    %eax,%eax
    0.00 :	    1465:       0f ba                   test   %eax,%eax
    0.00 :	    1467:       6d 00                   jne    1450 <__journal_refile_buffer+0x1100>
    0.00 :	    1469:       02 19 c0 85             mov    0x0(%rbp),%rax
 ??:0
  100.00 :	    146d:       c0 0f 85 b4             lea    0x2(%rbp),%r14
    0.00 :	    1471:       01 00                   test   $0x2,%al
    0.00 :	    1473:       00 f0                   je     14cf <__journal_refile_buffer+0x117f>
    0.00 :	    1475:       0f ba 6d 00 14          mov    0x28(%r12),%rax
    0.00 :	    147a:       19 c0 85                test   %rax,%rax
    0.00 :	    147d:       c0 74                   je     14c1 <__journal_refile_buffer+0x1171>
    0.00 :	    147f:       19 f3 90                cmp    %r13,%rax
    0.00 :	    1482:       48 8b 45 00 a9 00       jne    17f0 <__journal_refile_buffer+0x14a0>
    0.00 :	    1488:       00 10 00 75 f3          mov    0x30(%r12),%rax
    0.00 :	    148d:       f0 0f ba                test   %rax,%rax
    0.00 :	    1490:       6d 00                   je     149b <__journal_refile_buffer+0x114b>
    0.00 :	    1492:       14 19 c0                cmp    %r13,%rax
    0.00 :	    1495:       85 c0 75 e7 48 8b       jne    1808 <__journal_refile_buffer+0x14b8>
    0.00 :	    149b:       45 00 4c 8d             mov    0x18(%rbp),%rbx
    0.00 :	    149f:       75 02 a8 02             mov    0x30(%rbp),%rdi
    0.00 :	    14a3:       74 5a 49 8b 44          lea    0x40(%rsp),%rsi
    0.00 :	    14a8:       24 28 48 85 c0          callq  14ad <__journal_refile_buffer+0x115d>
    0.00 :	    14ad:       74 42 4c                mov    %rbx,%rdx
    0.00 :	    14b0:       39 e8 0f                mov    %rax,%rsi
    0.00 :	    14b3:       85 68 03 00 00 49 8b    mov    $0x0,%rdi
    0.00 :	    14ba:       44 24                   xor    %eax,%eax
    0.00 :	    14bc:       30 48 85 c0 74          callq  14c1 <__journal_refile_buffer+0x1171>
    0.00 :	    14c1:       09 4c 39 e8 0f          lock andb $0xfd,0x0(%rbp)
    0.00 :	    14c6:       85 6d 03 00             lea    0x2(%rbp),%r14
    0.00 :	    14ca:       00 48 8b 5d 18          lock orb $0x8,0x2(%rbp)
    0.00 :	    14cf:       48 8b 7d                mov    %rbp,%rdi
    0.00 :	    14d2:       30 48 8d 74 24          callq  14d7 <__journal_refile_buffer+0x1187>
    0.00 :	    14d7:       40 e8 00 00 00          mov    0x28(%rsp),%rax
    0.00 :	    14dc:       00 48 89 da             testb  $0x4,0x14(%rax)
    0.00 :	    14e0:       48 89                   je     150c <__journal_refile_buffer+0x11bc>
    0.00 :	    14e2:       c6 48 c7 c7 00          lock andb $0xef,(%r14)
    0.00 :	    14e7:       00 00 00 31 c0          mov    $0xffffffe2,%ebx
    0.00 :	    14ec:       e8 00 00 00 00 f0       cmpq   $0x0,0x38(%rsp)
    0.00 :	    14f2:       80 65 00 fd 4c 8d       jne    1838 <__journal_refile_buffer+0x14e8>
    0.00 :	    14f8:       75 02 f0 80 4d 02 08    add    $0x88,%rsp
    0.00 :	    14ff:       48 89                   mov    %ebx,%eax
    0.00 :	    1501:       ef                      pop    %rbx
    0.00 :	    1502:       e8                      pop    %rbp
    0.00 :	    1503:       00 00                   pop    %r12
    0.00 :	    1505:       00 00                   pop    %r13
    0.00 :	    1507:       48 8b                   pop    %r14
    0.00 :	    1509:       44 24                   pop    %r15
    0.00 :	    150b:       28                      retq   
    0.00 :	    150c:       f6 40 14                mov    (%rax),%rax
    0.00 :	    150f:       04 74 2a                mov    (%rax),%rax
    0.00 :	    1512:       f0 41 80                testb  $0x2,(%rax)
    0.00 :	    1515:       26 ef                   jne    14e2 <__journal_refile_buffer+0x1192>
    0.00 :	    1517:       bb e2 ff ff ff          cmp    %r13,0x28(%r12)
    0.00 :	    151c:       48 83 7c 24 38 00       je     16a9 <__journal_refile_buffer+0x1359>
    0.00 :	    1522:       0f 85 40 03 00          cmp    %r13,0x30(%r12)
    0.00 :	    1527:       00 48 81 c4 88 00       je     16a9 <__journal_refile_buffer+0x1359>
    0.00 :	    152d:       00 00 89 d8 5b 5d       cmpq   $0x0,0x18(%r12)
    0.00 :	    1533:       41 5c 41 5d 41 5e 41    movl   $0x0,0x10(%r12)
    0.00 :	    153a:       5f c3 
    0.00 :	    153c:       48 8b 00 48 8b 00       jne    17a9 <__journal_refile_buffer+0x1459>
    0.00 :	    1542:       f6 00 02 75 cb          mov    0x28(%r12),%rdx
    0.00 :	    1547:       4d 39 6c                test   %rdx,%rdx
    0.00 :	    154a:       24 28 0f 84 87 01       je     1755 <__journal_refile_buffer+0x1405>
    0.00 :	    1550:       00 00 4d                cmp    %r13,%rdx
    0.00 :	    1553:       39 6c 24 30 0f 84       je     179e <__journal_refile_buffer+0x144e>
    0.00 :	    1559:       7c 01 00 00 49 83       cmpq   $0x0,0x30(%r12)
    0.00 :	    155f:       7c                      nop
    0.00 :	    1560:       24 18 00 41 c7 44       jne    17df <__journal_refile_buffer+0x148f>
    0.00 :	    1566:       24 10 00 00 00          mov    0x30(%rsp),%rax
    0.00 :	    156b:       00 0f 85 67             cmp    0x58(%rax),%rdx
    0.00 :	    156f:       02                      nop
    0.00 :	    1570:       00 00 49 8b 54 24       jne    17e8 <__journal_refile_buffer+0x1498>
    0.00 :	    1576:       28 48 85 d2 0f          mov    0xc(%r12),%eax
    0.00 :	    157b:       84 05 02                cmp    $0x5,%eax
    0.00 :	    157e:       00 00 4c 39 ea 0f       je     16cc <__journal_refile_buffer+0x137c>
    0.00 :	    1584:       84 45 02                cmp    $0x3,%eax
    0.00 :	    1587:       00 00                   je     1605 <__journal_refile_buffer+0x12b5>
    0.00 :	    1589:       49 83 7c 24 30 00       cmpq   $0x0,0x38(%rsp)
    0.00 :	    158f:       90                      nop
    0.00 :	    1590:       0f 85 79 02 00 00       jne    17c1 <__journal_refile_buffer+0x1471>
    0.00 :	    1596:       48 8b 44 24 30          lock andb $0xef,(%r14)
    0.00 :	    159b:       48 3b 50 58             mov    (%r12),%rax
    0.00 :	    159f:       90 0f 85 72 02          mov    $0xffffffff,%esi
    0.00 :	    15a4:       00 00 41 8b             mov    0x20(%rax),%rax
    0.00 :	    15a8:       44 24 0c 83             sub    $0x1,%rax
    0.00 :	    15ac:       f8 05 0f 84             shr    $0xb,%rax
    0.00 :	    15b0:       48 01 00                add    $0x1,%esi
    0.00 :	    15b3:       00 83 f8                shr    %rax
    0.00 :	    15b6:       03 74                   jne    15b0 <__journal_refile_buffer+0x1260>
    0.00 :	    15b8:       7c 48 83 7c 24          mov    $0x50,%edi
    0.00 :	    15bd:       38 00 90 0f 85          callq  15c2 <__journal_refile_buffer+0x1272>
    0.00 :	    15c2:       2b 02 00                test   %rax,%rax
    0.00 :	    15c5:       00 f0 41 80 26          mov    %rax,0x38(%rsp)
    0.00 :	    15ca:       ef 49 8b 04 24 be       jne    1430 <__journal_refile_buffer+0x10e0>
    0.00 :	    15d0:       ff ff ff ff 48 8b 40    mov    $0x0,%rsi
    0.00 :	    15d7:       20 48 83 e8 01 48 c1    mov    $0x0,%rdi
    0.00 :	    15de:       e8 0b 83 c6 01          mov    $0xfffffff4,%ebx
    0.00 :	    15e3:       48 d1 e8 75 f8          callq  15e8 <__journal_refile_buffer+0x1298>
    0.00 :	    15e8:       bf 50 00                mov    %rbp,%rdi
    0.00 :	    15eb:       00 00 e8 00 00          callq  10 <journal_release_buffer-0x20>
    0.00 :	    15f0:       00 00 48 85 c0          jmpq   16ab <__journal_refile_buffer+0x135b>
    0.00 :	    15f5:       48 89 44                nopl   (%rax)
    0.00 :	    15f8:       24 38 0f                mov    %rbp,%rdi
    0.00 :	    15fb:       85 60 fe ff ff          callq  1600 <__journal_refile_buffer+0x12b0>
    0.00 :	    1600:       48 c7 c6 00 00          jmpq   1444 <__journal_refile_buffer+0x10f4>
    0.00 :	    1605:       00 00 48 c7             mov    0x24(%rsp),%eax
    0.00 :	    1609:       c7 00                   test   %eax,%eax
    0.00 :	    160b:       00 00 00 bb f4 ff       jne    1589 <__journal_refile_buffer+0x1239>
    0.00 :	    1611:       ff ff e8                xor    %r15d,%r15d
    0.00 :	    1614:       00 00 00 00 48          mov    %r13,0x30(%r12)
    0.00 :	    1619:       89 ef e8                mov    %rdx,%rax
    0.00 :	    161c:       20 ea ff                test   %rax,%rax
    0.00 :	    161f:       ff e9 b6 00 00 00       je     1758 <__journal_refile_buffer+0x1408>
    0.00 :	    1625:       0f 1f                   xor    %ebx,%ebx
    0.00 :	    1627:       00 48 89                test   %r15d,%r15d
    0.00 :	    162a:       ef e8                   je     16ab <__journal_refile_buffer+0x135b>
    0.00 :	    162c:       00 00 00 00             mov    (%r12),%rdx
    0.00 :	    1630:       e9 3f fe                mov    (%rdx),%rax
    0.00 :	    1633:       ff ff                   test   $0x1,%al
    0.00 :	    1635:       8b 44 24 24 85 c0       je     180c <__journal_refile_buffer+0x14bc>
    0.00 :	    163b:       0f 85 78 ff             mov    0x10(%rdx),%rsi
    0.00 :	    163f:       ff ff 45 31             mov    0x28(%rdx),%rdx
    0.00 :	    1643:       ff 4d 89 6c 24 30 48    mov    %gs:0x0,%rbx
    0.00 :	    164a:       89 d0 
    0.00 :	    164c:       48 85 c0 0f 84 33 01    sub    $0x1fd8,%rbx
    0.00 :	    1653:       00 00 31 db 45 85       and    $0xfff,%edx
    0.00 :	    1659:       ff 74 7f 49             addl   $0x1,0x1c(%rbx)
    0.00 :	    165d:       8b 14 24 48 8b 02 a8    movabs $0x160000000000,%rax
    0.00 :	    1664:       01 0f 84 
    0.00 :	    1667:       d1 01 00 00             mov    (%r12),%rcx
    0.00 :	    166b:       48 8b 72                movslq %edx,%rdx
    0.00 :	    166e:       10 48 8b                add    %rax,%rsi
    0.00 :	    1671:       52 28 65 48 8b 1c 25    movabs $0x6db6db6db6db6db7,%rax
    0.00 :	    1678:       00 00 00 
    0.00 :	    167b:       00 48 81 eb d8          mov    0x18(%r12),%rdi
    0.00 :	    1680:       1f 00 00 81             sar    $0x3,%rsi
    0.00 :	    1684:       e2 ff 0f 00             imul   %rax,%rsi
    0.00 :	    1688:       00 83 43 1c 01 48 b8    movabs $0xffff880000000000,%rax
    0.00 :	    168f:       00 00 00 
    0.00 :	    1692:       00 00 16 00             shl    $0xc,%rsi
    0.00 :	    1696:       00 49 8b                add    %rax,%rsi
    0.00 :	    1699:       0c 24 48                add    %rdx,%rsi
    0.00 :	    169c:       63 d2 48 01             mov    0x20(%rcx),%rdx
    0.00 :	    16a0:       c6 48 b8 b7 6d          callq  16a5 <__journal_refile_buffer+0x1355>
    0.00 :	    16a5:       db b6 6d db             subl   $0x1,0x1c(%rbx)
    0.00 :	    16a9:       b6 6d                   xor    %ebx,%ebx
    0.00 :	    16ab:       49 8b 7c 24 18          lock andb $0xef,(%r14)
    0.00 :	    16b0:       48 c1 fe 03 48          mov    0x28(%rsp),%rdi
    0.00 :	    16b5:       0f af f0                mov    %r12,%rsi
    0.00 :	    16b8:       48 b8 00 00 00          callq  16bd <__journal_refile_buffer+0x136d>
    0.00 :	    16bd:       00 00 88 ff ff          jmpq   14ec <__journal_refile_buffer+0x119c>
    0.00 :	    16c2:       48 c1 e6 0c 48          mov    $0xffffffe2,%ebx
    0.00 :	    16c7:       01 c6 48 01 d6          jmpq   14f8 <__journal_refile_buffer+0x11a8>
    0.00 :	    16cc:       48 8b 51 20 e8          mov    0x8(%rsp),%rdi
    0.00 :	    16d1:       00 00                   xor    %eax,%eax
    0.00 :	    16d3:       00 00 83 6b 1c          mov    $0x7,%ecx
    0.00 :	    16d8:       01 31 db f0 41          mov    $0x16,%esi
    0.00 :	    16dd:       80 26 ef                rep stos %rax,%es:(%rdi)
    0.00 :	    16e0:       48 8b 7c                mov    %rbp,%rdi
    0.00 :	    16e3:       24 28 4c 89 e6          mov    %rbp,0x40(%rsp)
    0.00 :	    16e8:       e8 00 00 00 00 e9 2a    movl   $0x16,0x48(%rsp)
    0.00 :	    16ef:       fe 
    0.00 :	    16f0:       ff ff bb e2 ff ff ff    movq   $0x0,0x60(%rsp)
    0.00 :	    16f7:       e9 2c 
    0.00 :	    16f9:       fe ff ff 48 8b          mov    0x10(%rsp),%rax
    0.00 :	    16fe:       7c 24 08 31 c0          mov    0x18(%rsp),%rdx
    0.00 :	    1703:       b9 07 00 00 00          mov    %rax,0x68(%rsp)
    0.00 :	    1708:       be 16 00 00 00          mov    %rdx,0x58(%rsp)
    0.00 :	    170d:       f3 48 ab 48 89          mov    %rax,0x70(%rsp)
    0.00 :	    1712:       ef 48 89 6c 24          callq  1717 <__journal_refile_buffer+0x13c7>
    0.00 :	    1717:       40 c7 44                mov    %rax,%rbx
    0.00 :	    171a:       24 48 16 00 00          lock andb $0xef,(%r14)
    0.00 :	    171f:       00 48                   jmp    172d <__journal_refile_buffer+0x13dd>
    0.00 :	    1721:       c7 44 24 60 00 00 00    nopl   0x0(%rax)
    0.00 :	    1728:       00 48 8b 44 24          callq  172d <__journal_refile_buffer+0x13dd>
    0.00 :	    172d:       10 48 8b 54 24          mov    $0x2,%edx
    0.00 :	    1732:       18 48 89                mov    %r15,%rsi
    0.00 :	    1735:       44 24 68                mov    %rbx,%rdi
    0.00 :	    1738:       48 89 54 24 58          callq  173d <__journal_refile_buffer+0x13ed>
    0.00 :	    173d:       48 89 44 24 70 e8       cmpl   $0x5,0xc(%r12)
    0.00 :	    1743:       00 00                   je     1728 <__journal_refile_buffer+0x13d8>
    0.00 :	    1745:       00 00 48                mov    %r15,%rsi
    0.00 :	    1748:       89 c3 f0                mov    %rbx,%rdi
    0.00 :	    174b:       41 80 26 ef eb          callq  1750 <__journal_refile_buffer+0x1400>
    0.00 :	    1750:       0c 0f 1f 80 00          jmpq   1430 <__journal_refile_buffer+0x10e0>
    0.00 :	    1755:       00 00 00                xor    %r15d,%r15d
    0.00 :	    1758:       e8 00 00 00 00 ba       cmpq   $0x0,0x30(%r12)
    0.00 :	    175e:       02 00 00 00 4c 89       jne    1864 <__journal_refile_buffer+0x1514>
    0.00 :	    1764:       fe 48 89 df e8          mov    0x30(%rsp),%rbx
    0.00 :	    1769:       00 00 00 00 41          mov    %r13,0x28(%r12)
    0.00 :	    176e:       83 7c 24 0c 05 74 e3    add    $0x14c,%rbx
    0.00 :	    1775:       4c 89 fe                mov    %rbx,%rdi
    0.00 :	    1778:       48 89 df e8 00          callq  177d <__journal_refile_buffer+0x142d>
    0.00 :	    177d:       00 00 00 e9 db          mov    $0x7,%edx
    0.00 :	    1782:       fc ff ff                mov    %r13,%rsi
    0.00 :	    1785:       45 31 ff                mov    %r12,%rdi
    0.00 :	    1788:       49 83 7c 24 30          callq  178d <__journal_refile_buffer+0x143d>
    0.00 :	    178d:       00 0f 85 00 01          mov    0x30(%rsp),%rdx
    0.00 :	    1792:       00 00 48 8b 5c 24 30    incw   0x14c(%rdx)
    0.00 :	    1799:       4d 89 6c 24 28          jmpq   1625 <__journal_refile_buffer+0x12d5>
    0.00 :	    179e:       48 81 c3                mov    %r13,%rax
    0.00 :	    17a1:       4c 01 00                xor    %r15d,%r15d
    0.00 :	    17a4:       00 48 89 df e8          jmpq   161c <__journal_refile_buffer+0x12cc>
    0.00 :	    17a9:       00 00 00 00 ba 07       cmpq   $0x0,0x30(%r12)
    0.00 :	    17af:       00 00 00 4c 89 ee       jne    1860 <__journal_refile_buffer+0x1510>
    0.00 :	    17b5:       4c 89 e7 e8 00          mov    %r13,0x30(%r12)
    0.00 :	    17ba:       00 00                   xor    %ebx,%ebx
    0.00 :	    17bc:       00 48 8b 54 24          jmpq   16ab <__journal_refile_buffer+0x135b>
    0.00 :	    17c1:       30 66 ff 82 4c          mov    0x38(%rsp),%rax
    0.00 :	    17c6:       01 00 00 e9 87 fe       mov    $0x1,%r15d
    0.00 :	    17cc:       ff ff 4c 89 e8 45 31    movq   $0x0,0x38(%rsp)
    0.00 :	    17d3:       ff e9 
    0.00 :	    17d5:       73 fe ff ff 49          mov    %rax,0x18(%r12)
    0.00 :	    17da:       83 7c 24 30 00          jmpq   1614 <__journal_refile_buffer+0x12c4>
    0.00 :	    17df:       0f 85                   ud2    
    0.00 :	    17e1:       ab 00                   jmp    17e1 <__journal_refile_buffer+0x1491>
    0.00 :	    17e3:       00 00 4d 89 6c          nopl   0x0(%rax,%rax,1)
    0.00 :	    17e8:       24 30                   ud2    
    0.00 :	    17ea:       31 db                   jmp    17ea <__journal_refile_buffer+0x149a>
    0.00 :	    17ec:       e9 ea fe ff             nopl   0x0(%rax)
    0.00 :	    17f0:       ff 48 8b 44 24          mov    0x30(%rsp),%rdx
    0.00 :	    17f5:       38 41 bf 01             cmp    0x58(%rdx),%rax
    0.00 :	    17f9:       00 00 00 48 c7 44       je     1488 <__journal_refile_buffer+0x1138>
    0.00 :	    17ff:       24 38                   ud2    
    0.00 :	    1801:       00 00                   jmp    1801 <__journal_refile_buffer+0x14b1>
    0.00 :	    1803:       00 00 49 89 44          nopl   0x0(%rax,%rax,1)
    0.00 :	    1808:       24 18                   ud2    
    0.00 :	    180a:       e9 35                   jmp    180a <__journal_refile_buffer+0x14ba>
    0.00 :	    180c:       fe ff ff 0f 0b eb fe    mov    $0x0,%rsi
    0.00 :	    1813:       0f 1f 44 00 00 0f 0b    mov    $0x0,%rdi
    0.00 :	    181a:       eb fe                   xor    %eax,%eax
    0.00 :	    181c:       0f 1f 40 00 48          callq  1821 <__journal_refile_buffer+0x14d1>
    0.00 :	    1821:       8b 54 24 30 48 3b 42    mov    $0x0,%rdi
    0.00 :	    1828:       58 0f                   xor    %eax,%eax
    0.00 :	    182a:       84 89 fc ff ff          callq  182f <__journal_refile_buffer+0x14df>
    0.00 :	    182f:       0f 0b eb fe             mov    (%r12),%rdx
    0.00 :	    1833:       0f 1f 44 00 00          jmpq   163b <__journal_refile_buffer+0x12eb>
    0.00 :	    1838:       0f 0b eb fe             mov    0x20(%rbp),%rax
    0.00 :	    183c:       48 c7 c6 00 00          mov    $0xffffffff,%esi
    0.00 :	    1841:       00 00 48 c7             sub    $0x1,%rax
    0.00 :	    1845:       c7 00 00 00             shr    $0xb,%rax
    0.00 :	    1849:       00 31 c0                add    $0x1,%esi
    0.00 :	    184c:       e8 00 00                shr    %rax
    0.00 :	    184f:       00 00                   jne    1849 <__journal_refile_buffer+0x14f9>
    0.00 :	    1851:       48 c7 c7 00 00          mov    0x38(%rsp),%rdi
    0.00 :	    1856:       00 00 31 c0 e8          callq  185b <__journal_refile_buffer+0x150b>
    0.00 :	    185b:       00 00 00 00 49          jmpq   14f8 <__journal_refile_buffer+0x11a8>
    0.00 :	    1860:       8b 14                   ud2    
    0.00 :	    1862:       24 e9                   jmp    1862 <__journal_refile_buffer+0x1512>
    0.00 :	    1864:       03 fe                   ud2    
    0.00 :	    1866:       ff ff                   jmp    1866 <__journal_refile_buffer+0x1516>
         :	    1868:       48 8b 45 20 be ff ff    nopl   0x0(%rax,%rax,1)
         :	    186f:       ff 
         :	    1870:       ff 48 83 e8             sub    $0x18,%rsp
         :	    1874:       01 48 c1 e8 0b          mov    %rbx,0x8(%rsp)
         :	    1879:       83 c6 01                mov    %rdi,%rbx
         :	    187c:       48 d1 e8                mov    %rsi,%rdi
         :	    187f:       75 f8 48 8b 7c          mov    %r12,0x10(%rsp)
         :	    1884:       24 38 e8 00 00          callq  1889 <__journal_refile_buffer+0x1539>
         :	    1889:       00 00 e9                mov    %rbx,%rdi
         :	    188c:       98 fc ff                mov    %rax,%r12
         :	    188f:       ff 0f                   xor    %edx,%edx
         :	    1891:       0b eb fe                mov    %rax,%rsi
         :	    1894:       0f 0b eb fe 0f          callq  13c0 <__journal_refile_buffer+0x1070>

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000084b0 <journal_put_journal_head>:
 ??:0
  100.00 :	    84b0:       53                      push   %rbx
    0.00 :	    84e1:       48                      retq   
    0.00 :	    84e2:       8b 1f f0 0f ba 2b       nopw   0x0(%rax,%rax,1)
    0.00 :	    84e8:       15 19 c0                mov    %rbx,%rdi
    0.00 :	    84eb:       85 c0 75 4a 8b          callq  68b0 <journal_set_features+0x80>
    0.00 :	    84f0:       47 08 85                mov    %rbx,%rdi
    0.00 :	    84f3:       c0 7e 34 83 e8          callq  84f8 <journal_put_journal_head+0x18>
    0.00 :	    84f8:       01 85                   jmp    84d7 <journal_get_descriptor_buffer+0x97>
    0.00 :	    84fa:       c0 89                   ud2    
    0.00 :	    84fc:       47 08                   jmp    84fc <journal_put_journal_head+0x1c>
    0.00 :	    84fe:       75 07 48 83 7f          lock btsl $0x15,(%rbx)
    0.00 :	    8503:       28 00                   sbb    %eax,%eax
    0.00 :	    8505:       74 11                   test   %eax,%eax
    0.00 :	    8507:       48 8d                   je     84bf <journal_get_descriptor_buffer+0x7f>
    0.00 :	    8509:       43 02                   pause  
    0.00 :	    850b:       f0 80 63                mov    (%rbx),%rax
    0.00 :	    850e:       02 df 5b c3 66          test   $0x200000,%eax
    0.00 :	    8513:       0f 1f                   jne    8509 <journal_put_journal_head+0x29>
    0.00 :	    8515:       44 00                   jmp    84fe <journal_put_journal_head+0x1e>
         :	    8517:       00 48 89 df e8 c0 e3    nopw   0x0(%rax,%rax,1)
         :	    851e:       ff ff 
         :	    8520:       48                      push   %rbx
         :	    8521:       89 df e8                mov    %rdi,%rbx
         :	    8524:       00 00 00 00 eb          lock btsl $0x15,(%rdi)
         :	    8529:       dd 0f                   sbb    %eax,%eax
         :	    852b:       0b eb                   test   %eax,%eax
         :	    852d:       fe f0                   jne    854d <journal_put_journal_head+0x6d>
         :	    852f:       0f ba 2b                mov    %rbx,%rdi
         :	    8532:       15 19 c0 85 c0          callq  68b0 <journal_set_features+0x80>
         :	    8537:       74 b6 f3 90             lea    0x2(%rbx),%rax
         :	    853b:       48 8b 03 a9 00          lock andb $0xdf,0x2(%rbx)
         :	    8540:       00                      pop    %rbx
         :	    8541:       20                      retq   
         :	    8542:       00 75 f4 eb e7          lock btsl $0x15,(%rbx)

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000000a2a0 <ixgbe_service_task>:
         :	/**
         :	 * ixgbe_service_task - manages and runs subtasks
         :	 * @work: pointer to work_struct containing our data
         :	 **/
         :	static void ixgbe_service_task(struct work_struct *work)
         :	{
    0.00 :	    a2a0:       41 55                   push   %r13
    0.00 :	    a2a2:       41 54                   push   %r12
    0.00 :	    a2a4:       55                      push   %rbp
         :	        struct ixgbe_adapter *adapter = container_of(work,
    0.00 :	    a2a5:       48 8d af 88 e4 ff ff    lea    -0x1b78(%rdi),%rbp
         :	/**
         :	 * ixgbe_service_task - manages and runs subtasks
         :	 * @work: pointer to work_struct containing our data
         :	 **/
         :	static void ixgbe_service_task(struct work_struct *work)
         :	{
    0.00 :	    a2ac:       53                      push   %rbx
    0.00 :	    a2ad:       4c 8d ad 10 02 00 00    lea    0x210(%rbp),%r13
    0.00 :	    a2b4:       48 89 fb                mov    %rdi,%rbx
    0.00 :	    a2b7:       48 83 ec 18             sub    $0x18,%rsp
         :	                ixgbe_service_event_schedule(adapter);
         :	}
         :
         :	static void ixgbe_reset_subtask(struct ixgbe_adapter *adapter)
         :	{
         :	        if (!(adapter->flags2 & IXGBE_FLAG2_RESET_REQUESTED))
    0.00 :	    a2bb:       8b 87 a4 e6 ff ff       mov    -0x195c(%rdi),%eax
    0.00 :	    a2c1:       84 c0                   test   %al,%al
    0.00 :	    a2c3:       79 22                   jns    a2e7 <ixgbe_service_task+0x47>
         :	                return;
         :
         :	        adapter->flags2 &= ~IXGBE_FLAG2_RESET_REQUESTED;
    0.00 :	    a2c5:       24 7f                   and    $0x7f,%al
    0.00 :	    a2c7:       89 87 a4 e6 ff ff       mov    %eax,-0x195c(%rdi)
         :	        return oldbit;
         :	}
         :
         :	static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)
         :	{
         :	        return ((1UL << (nr % BITS_PER_LONG)) &
    0.00 :	    a2cd:       48 8b 87 98 e6 ff ff    mov    -0x1968(%rdi),%rax
         :
         :	        /* If we're already down or resetting, just bail */
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state) ||
    0.00 :	    a2d4:       a8 04                   test   $0x4,%al
    0.00 :	    a2d6:       75 0f                   jne    a2e7 <ixgbe_service_task+0x47>
    0.00 :	    a2d8:       48 8b 87 98 e6 ff ff    mov    -0x1968(%rdi),%rax
    0.00 :	    a2df:       a8 02                   test   $0x2,%al
    0.00 :	    a2e1:       0f 84 0c 02 00 00       je     a4f3 <ixgbe_service_task+0x253>
         :	        struct ixgbe_adapter *adapter = container_of(work,
         :	                                                     struct ixgbe_adapter,
         :	                                                     service_task);
         :
         :	        ixgbe_reset_subtask(adapter);
         :	        ixgbe_sfp_detection_subtask(adapter);
    0.00 :	    a2e7:       48 89 ef                mov    %rbp,%rdi
         :	 * ixgbe_sfp_link_config_subtask - set up link SFP after module install
         :	 * @adapter - the ixgbe adapter structure
         :	 **/
         :	static void ixgbe_sfp_link_config_subtask(struct ixgbe_adapter *adapter)
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
    0.00 :	    a2ea:       4c 8d a5 80 0e 00 00    lea    0xe80(%rbp),%r12
         :	        struct ixgbe_adapter *adapter = container_of(work,
         :	                                                     struct ixgbe_adapter,
         :	                                                     service_task);
         :
         :	        ixgbe_reset_subtask(adapter);
         :	        ixgbe_sfp_detection_subtask(adapter);
    0.00 :	    a2f1:       e8 3a 8f ff ff          callq  3230 <ixgbe_sfp_detection_subtask>
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        u32 autoneg;
         :	        bool negotiation;
         :
         :	        if (!(adapter->flags & IXGBE_FLAG_NEED_LINK_CONFIG))
    0.00 :	    a2f6:       f6 83 a1 e6 ff ff 40    testb  $0x40,-0x195f(%rbx)
    0.00 :	    a2fd:       74 65                   je     a364 <ixgbe_service_task+0xc4>
         :	 */
         :	static inline int test_and_set_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        int oldbit;
         :
         :	        asm volatile(LOCK_PREFIX "bts %2,%1\n\t"
    0.00 :	    a2ff:       f0 41 0f ba 6d 00 04    lock btsl $0x4,0x0(%r13)
    0.00 :	    a306:       19 c0                   sbb    %eax,%eax
         :	                return;
         :
         :	        /* someone else is in init, wait until next service event */
         :	        if (test_and_set_bit(__IXGBE_IN_SFP_INIT, &adapter->state))
    0.00 :	    a308:       85 c0                   test   %eax,%eax
    0.00 :	    a30a:       75 58                   jne    a364 <ixgbe_service_task+0xc4>
         :	                return;
         :
         :	        adapter->flags &= ~IXGBE_FLAG_NEED_LINK_CONFIG;
    0.00 :	    a30c:       81 a5 18 02 00 00 ff    andl   $0xffffbfff,0x218(%rbp)
    0.00 :	    a313:       bf ff ff 
         :
         :	        autoneg = hw->phy.autoneg_advertised;
    0.00 :	    a316:       8b 83 40 f8 ff ff       mov    -0x7c0(%rbx),%eax
         :	        if ((!autoneg) && (hw->mac.ops.get_link_capabilities))
    0.00 :	    a31c:       85 c0                   test   %eax,%eax
         :	        if (test_and_set_bit(__IXGBE_IN_SFP_INIT, &adapter->state))
         :	                return;
         :
         :	        adapter->flags &= ~IXGBE_FLAG_NEED_LINK_CONFIG;
         :
         :	        autoneg = hw->phy.autoneg_advertised;
    0.00 :	    a31e:       89 44 24 10             mov    %eax,0x10(%rsp)
         :	        if ((!autoneg) && (hw->mac.ops.get_link_capabilities))
    0.00 :	    a322:       0f 84 1d 03 00 00       je     a645 <ixgbe_service_task+0x3a5>
         :	                hw->mac.ops.get_link_capabilities(hw, &autoneg, &negotiation);
         :	        if (hw->mac.ops.setup_link)
    0.00 :	    a328:       48 8b 83 e8 f3 ff ff    mov    -0xc18(%rbx),%rax
    0.00 :	    a32f:       48 85 c0                test   %rax,%rax
    0.00 :	    a332:       74 13                   je     a347 <ixgbe_service_task+0xa7>
         :	                hw->mac.ops.setup_link(hw, autoneg, negotiation, true);
    0.00 :	    a334:       0f b6 54 24 17          movzbl 0x17(%rsp),%edx
    0.00 :	    a339:       8b 74 24 10             mov    0x10(%rsp),%esi
    0.00 :	    a33d:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    a342:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    a345:       ff d0                   callq  *%rax
         :
         :	        adapter->flags |= IXGBE_FLAG_NEED_LINK_UPDATE;
    0.00 :	    a347:       81 8d 18 02 00 00 00    orl    $0x2000,0x218(%rbp)
    0.00 :	    a34e:       20 00 00 
         :	        adapter->link_check_timeout = jiffies;
    0.00 :	    a351:       48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # a358 <ixgbe_service_task+0xb8>
    0.00 :	    a358:       48 89 43 a8             mov    %rax,-0x58(%rbx)
         :	 */
         :	static __always_inline void
         :	clear_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        if (IS_IMMEDIATE(nr)) {
         :	                asm volatile(LOCK_PREFIX "andb %1,%0"
    0.00 :	    a35c:       f0 80 a3 98 e6 ff ff    lock andb $0xef,-0x1968(%rbx)
    0.00 :	    a363:       ef 
         :	        return oldbit;
         :	}
         :
         :	static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)
         :	{
         :	        return ((1UL << (nr % BITS_PER_LONG)) &
    0.00 :	    a364:       48 8b 83 98 e6 ff ff    mov    -0x1968(%rbx),%rax
         :	 * @adapter: pointer to adapter
         :	 **/
         :	static void ixgbe_check_overtemp_subtask(struct ixgbe_adapter *adapter)
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        u32 eicr = adapter->interrupt_event;
    0.00 :	    a36b:       8b 95 44 7c 00 00       mov    0x7c44(%rbp),%edx
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
    0.00 :	    a371:       a8 04                   test   $0x4,%al
    0.00 :	    a373:       75 4f                   jne    a3c4 <ixgbe_service_task+0x124>
         :	                return;
         :
         :	        if (!(adapter->flags2 & IXGBE_FLAG2_TEMP_SENSOR_CAPABLE) &&
    0.00 :	    a375:       f6 83 a4 e6 ff ff 18    testb  $0x18,-0x195c(%rbx)
    0.00 :	    a37c:       74 46                   je     a3c4 <ixgbe_service_task+0x124>
         :	            !(adapter->flags2 & IXGBE_FLAG2_TEMP_SENSOR_EVENT))
         :	                return;
         :
         :	        adapter->flags2 &= ~IXGBE_FLAG2_TEMP_SENSOR_EVENT;
    0.00 :	    a37e:       83 a5 1c 02 00 00 ef    andl   $0xffffffef,0x21c(%rbp)
         :
         :	        switch (hw->device_id) {
    0.00 :	    a385:       66 81 bb 18 f9 ff ff    cmpw   $0x151c,-0x6e8(%rbx)
    0.00 :	    a38c:       1c 15 
    0.00 :	    a38e:       0f 84 57 02 00 00       je     a5eb <ixgbe_service_task+0x34b>
         :	                if (hw->phy.ops.check_overtemp(hw) != IXGBE_ERR_OVERTEMP)
         :	                        return;
         :
         :	                break;
         :	        default:
         :	                if (!(eicr & IXGBE_EICR_GPI_SDP0))
    0.00 :	    a394:       81 e2 00 00 00 01       and    $0x1000000,%edx
    0.00 :	    a39a:       74 28                   je     a3c4 <ixgbe_service_task+0x124>
         :	                break;
         :	        }
         :	        e_crit(drv,
         :	               "Network adapter has been stopped because it has over heated. "
         :	               "Restart the computer. If the problem persists, "
         :	               "power off the system and replace the adapter\n");
    0.00 :	    a39c:       f6 83 30 f9 ff ff 01    testb  $0x1,-0x6d0(%rbx)
    0.00 :	    a3a3:       74 15                   je     a3ba <ixgbe_service_task+0x11a>
    0.00 :	    a3a5:       48 8b bb 88 e6 ff ff    mov    -0x1978(%rbx),%rdi
    0.00 :	    a3ac:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    a3b3:       31 c0                   xor    %eax,%eax
    0.00 :	    a3b5:       e8 00 00 00 00          callq  a3ba <ixgbe_service_task+0x11a>
         :
         :	        adapter->interrupt_event = 0;
    0.00 :	    a3ba:       c7 85 44 7c 00 00 00    movl   $0x0,0x7c44(%rbp)
    0.00 :	    a3c1:       00 00 00 
         :
         :	        ixgbe_reset_subtask(adapter);
         :	        ixgbe_sfp_detection_subtask(adapter);
         :	        ixgbe_sfp_link_config_subtask(adapter);
         :	        ixgbe_check_overtemp_subtask(adapter);
         :	        ixgbe_watchdog_subtask(adapter);
    0.00 :	    a3c4:       48 89 ef                mov    %rbp,%rdi
    0.00 :	    a3c7:       e8 d4 d4 ff ff          callq  78a0 <ixgbe_watchdog_subtask>
         :	static void ixgbe_fdir_reinit_subtask(struct ixgbe_adapter *adapter)
         :	{
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        int i;
         :
         :	        if (!(adapter->flags2 & IXGBE_FLAG2_FDIR_REQUIRES_REINIT))
    0.00 :	    a3cc:       8b 83 a4 e6 ff ff       mov    -0x195c(%rbx),%eax
    0.00 :	    a3d2:       f6 c4 01                test   $0x1,%ah
    0.00 :	    a3d5:       74 22                   je     a3f9 <ixgbe_service_task+0x159>
         :	                return;
         :
         :	        adapter->flags2 &= ~IXGBE_FLAG2_FDIR_REQUIRES_REINIT;
    0.00 :	    a3d7:       80 e4 fe                and    $0xfe,%ah
    0.00 :	    a3da:       89 83 a4 e6 ff ff       mov    %eax,-0x195c(%rbx)
    0.00 :	    a3e0:       48 8b 83 98 e6 ff ff    mov    -0x1968(%rbx),%rax
         :
         :	        /* if interface is down do nothing */
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
    0.00 :	    a3e7:       a8 04                   test   $0x4,%al
    0.00 :	    a3e9:       75 0e                   jne    a3f9 <ixgbe_service_task+0x159>
         :	                return;
         :
         :	        /* do nothing if we are not using signature filters */
         :	        if (!(adapter->flags & IXGBE_FLAG_FDIR_HASH_CAPABLE))
    0.00 :	    a3eb:       66 83 bb a0 e6 ff ff    cmpw   $0x0,-0x1960(%rbx)
    0.00 :	    a3f2:       00 
    0.00 :	    a3f3:       0f 88 93 01 00 00       js     a58c <ixgbe_service_task+0x2ec>
    0.00 :	    a3f9:       48 8b 83 98 e6 ff ff    mov    -0x1968(%rbx),%rax
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :	        u64 eics = 0;
         :	        int i;
         :
         :	        /* If we're down or resetting, just bail */
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state) ||
    0.00 :	    a400:       a8 04                   test   $0x4,%al
    0.00 :	    a402:       0f 85 c2 00 00 00       jne    a4ca <ixgbe_service_task+0x22a>
    0.00 :	    a408:       48 8b 83 98 e6 ff ff    mov    -0x1968(%rbx),%rax
    0.00 :	    a40f:       a8 02                   test   $0x2,%al
    0.00 :	    a411:       0f 85 b3 00 00 00       jne    a4ca <ixgbe_service_task+0x22a>
         :	 *
         :	 * Check if carrier is present on device
         :	 */
         :	static inline int netif_carrier_ok(const struct net_device *dev)
         :	{
         :	        return !test_bit(__LINK_STATE_NOCARRIER, &dev->state);
    0.00 :	    a417:       48 8b 83 88 e6 ff ff    mov    -0x1978(%rbx),%rax
    0.00 :	    a41e:       48 8b 40 78             mov    0x78(%rax),%rax
         :	            test_bit(__IXGBE_RESETTING, &adapter->state))
         :	                return;
         :
         :	        /* Force detection of hung controller */
         :	        if (netif_carrier_ok(adapter->netdev)) {
    0.00 :	    a422:       a8 04                   test   $0x4,%al
    0.00 :	    a424:       0f 84 26 01 00 00       je     a550 <ixgbe_service_task+0x2b0>
         :	                for (i = 0; i < adapter->num_tx_queues; i++)
         :	                        set_check_for_tx_hang(adapter->tx_ring[i]);
         :	        }
         :
         :	        if (!(adapter->flags & IXGBE_FLAG_MSIX_ENABLED)) {
    0.00 :	    a42a:       f6 83 a0 e6 ff ff 08    testb  $0x8,-0x1960(%rbx)
    0.00 :	    a431:       0f 84 e5 00 00 00       je     a51c <ixgbe_service_task+0x27c>
         :	                 */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EICS,
         :	                        (IXGBE_EICS_TCP_TIMER | IXGBE_EICS_OTHER));
         :	        } else {
         :	                /* get one bit for every active tx/rx interrupt vector */
         :	                for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    a437:       8b bb 48 f0 ff ff       mov    -0xfb8(%rbx),%edi
    0.00 :	    a43d:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    a440:       85 ff                   test   %edi,%edi
    0.00 :	    a442:       7e 4a                   jle    a48e <ixgbe_service_task+0x1ee>
         :	build_mmio_read(__readw, "w", unsigned short, "=r", )
         :	build_mmio_read(__readl, "l", unsigned int, "=r", )
         :
         :	build_mmio_write(writeb, "b", unsigned char, "q", :"memory")
         :	build_mmio_write(writew, "w", unsigned short, "r", :"memory")
         :	build_mmio_write(writel, "l", unsigned int, "r", :"memory")
    0.00 :	    a444:       48 89 ee                mov    %rbp,%rsi
    0.00 :	    a447:       31 d2                   xor    %edx,%edx
    0.00 :	    a449:       45 31 c9                xor    %r9d,%r9d
         :	                        struct ixgbe_q_vector *qv = adapter->q_vector[i];
         :	                        if (qv->rx.ring || qv->tx.ring)
         :	                                eics |= ((u64)1 << i);
    0.00 :	    a44c:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	    a452:       eb 1a                   jmp    a46e <ixgbe_service_task+0x1ce>
    0.00 :	    a454:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    a458:       89 d1                   mov    %edx,%ecx
    0.00 :	    a45a:       4c 89 c0                mov    %r8,%rax
         :	                 */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EICS,
         :	                        (IXGBE_EICS_TCP_TIMER | IXGBE_EICS_OTHER));
         :	        } else {
         :	                /* get one bit for every active tx/rx interrupt vector */
         :	                for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    a45d:       83 c2 01                add    $0x1,%edx
         :	                        struct ixgbe_q_vector *qv = adapter->q_vector[i];
         :	                        if (qv->rx.ring || qv->tx.ring)
         :	                                eics |= ((u64)1 << i);
    0.00 :	    a460:       48 d3 e0                shl    %cl,%rax
         :	                 */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EICS,
         :	                        (IXGBE_EICS_TCP_TIMER | IXGBE_EICS_OTHER));
         :	        } else {
         :	                /* get one bit for every active tx/rx interrupt vector */
         :	                for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    a463:       48 83 c6 08             add    $0x8,%rsi
         :	                        struct ixgbe_q_vector *qv = adapter->q_vector[i];
         :	                        if (qv->rx.ring || qv->tx.ring)
         :	                                eics |= ((u64)1 << i);
    0.00 :	    a467:       49 09 c1                or     %rax,%r9
         :	                 */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EICS,
         :	                        (IXGBE_EICS_TCP_TIMER | IXGBE_EICS_OTHER));
         :	        } else {
         :	                /* get one bit for every active tx/rx interrupt vector */
         :	                for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    a46a:       39 d7                   cmp    %edx,%edi
    0.00 :	    a46c:       7e 20                   jle    a48e <ixgbe_service_task+0x1ee>
         :	                        struct ixgbe_q_vector *qv = adapter->q_vector[i];
    0.00 :	    a46e:       48 8b 86 50 07 00 00    mov    0x750(%rsi),%rax
         :	                        if (qv->rx.ring || qv->tx.ring)
    0.00 :	    a475:       48 83 78 10 00          cmpq   $0x0,0x10(%rax)
    0.00 :	    a47a:       75 dc                   jne    a458 <ixgbe_service_task+0x1b8>
    0.00 :	    a47c:       48 83 78 28 00          cmpq   $0x0,0x28(%rax)
    0.00 :	    a481:       75 d5                   jne    a458 <ixgbe_service_task+0x1b8>
         :	                 */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EICS,
         :	                        (IXGBE_EICS_TCP_TIMER | IXGBE_EICS_OTHER));
         :	        } else {
         :	                /* get one bit for every active tx/rx interrupt vector */
         :	                for (i = 0; i < adapter->num_q_vectors; i++) {
    0.00 :	    a483:       83 c2 01                add    $0x1,%edx
    0.00 :	    a486:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	    a48a:       39 d7                   cmp    %edx,%edi
    0.00 :	    a48c:       7f e0                   jg     a46e <ixgbe_service_task+0x1ce>
         :	static inline void ixgbe_irq_rearm_queues(struct ixgbe_adapter *adapter,
         :	                                          u64 qmask)
         :	{
         :	        u32 mask;
         :
         :	        switch (adapter->hw.mac.type) {
    0.00 :	    a48e:       8b 83 d8 f4 ff ff       mov    -0xb28(%rbx),%eax
    0.00 :	    a494:       83 f8 01                cmp    $0x1,%eax
    0.00 :	    a497:       0f 84 9b 00 00 00       je     a538 <ixgbe_service_task+0x298>
    0.00 :	    a49d:       72 2b                   jb     a4ca <ixgbe_service_task+0x22a>
    0.00 :	    a49f:       83 f8 03                cmp    $0x3,%eax
    0.00 :	    a4a2:       77 26                   ja     a4ca <ixgbe_service_task+0x22a>
    0.00 :	    a4a4:       48 8b 83 08 f3 ff ff    mov    -0xcf8(%rbx),%rax
    0.00 :	    a4ab:       48 05 90 0a 00 00       add    $0xa90,%rax
    0.00 :	    a4b1:       44 89 08                mov    %r9d,(%rax)
    0.00 :	    a4b4:       48 8b 83 08 f3 ff ff    mov    -0xcf8(%rbx),%rax
         :	                break;
         :	        case ixgbe_mac_82599EB:
         :	        case ixgbe_mac_X540:
         :	                mask = (qmask & 0xFFFFFFFF);
         :	                IXGBE_WRITE_REG(&adapter->hw, IXGBE_EICS_EX(0), mask);
         :	                mask = (qmask >> 32);
    0.00 :	    a4bb:       4c 89 ca                mov    %r9,%rdx
    0.00 :	    a4be:       48 c1 ea 20             shr    $0x20,%rdx
    0.00 :	    a4c2:       48 05 94 0a 00 00       add    $0xa94,%rax
    0.00 :	    a4c8:       89 10                   mov    %edx,(%rax)
    0.00 :	    a4ca:       48 8b 83 98 e6 ff ff    mov    -0x1968(%rbx),%rax
         :	                schedule_work(&adapter->service_task);
         :	}
         :
         :	static void ixgbe_service_event_complete(struct ixgbe_adapter *adapter)
         :	{
         :	        BUG_ON(!test_bit(__IXGBE_SERVICE_SCHED, &adapter->state));
    0.00 :	    a4d1:       a8 08                   test   $0x8,%al
    0.00 :	    a4d3:       75 0b                   jne    a4e0 <ixgbe_service_task+0x240>
    0.00 :	    a4d5:       0f 0b                   ud2    
    0.00 :	    a4d7:       eb fe                   jmp    a4d7 <ixgbe_service_task+0x237>
    0.00 :	    a4d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 */
         :	static __always_inline void
         :	clear_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        if (IS_IMMEDIATE(nr)) {
         :	                asm volatile(LOCK_PREFIX "andb %1,%0"
    0.00 :	    a4e0:       f0 80 a3 98 e6 ff ff    lock andb $0xf7,-0x1968(%rbx)
    0.00 :	    a4e7:       f7 
         :	#ifdef CONFIG_IXGBE_PTP
         :	        ixgbe_ptp_overflow_check(adapter);
         :	#endif
         :
         :	        ixgbe_service_event_complete(adapter);
         :	}
    0.00 :	    a4e8:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	    a4ec:       5b                      pop    %rbx
    0.00 :	    a4ed:       5d                      pop    %rbp
    0.00 :	    a4ee:       41 5c                   pop    %r12
    0.00 :	    a4f0:       41 5d                   pop    %r13
    0.00 :	    a4f2:       c3                      retq   
         :	        /* If we're already down or resetting, just bail */
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state) ||
         :	            test_bit(__IXGBE_RESETTING, &adapter->state))
         :	                return;
         :
         :	        netdev_err(adapter->netdev, "Reset adapter\n");
    0.00 :	    a4f3:       48 8b bf 88 e6 ff ff    mov    -0x1978(%rdi),%rdi
    0.00 :	    a4fa:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    a501:       31 c0                   xor    %eax,%eax
    0.00 :	    a503:       e8 00 00 00 00          callq  a508 <ixgbe_service_task+0x268>
         :	        adapter->tx_timeout_count++;
    0.00 :	    a508:       83 85 d0 04 00 00 01    addl   $0x1,0x4d0(%rbp)
         :
         :	        ixgbe_reinit_locked(adapter);
    0.00 :	    a50f:       48 89 ef                mov    %rbp,%rdi
    0.00 :	    a512:       e8 00 00 00 00          callq  a517 <ixgbe_service_task+0x277>
    0.00 :	    a517:       e9 cb fd ff ff          jmpq   a2e7 <ixgbe_service_task+0x47>
    0.00 :	    a51c:       48 8b 83 08 f3 ff ff    mov    -0xcf8(%rbx),%rax
    0.00 :	    a523:       ba 00 00 00 c0          mov    $0xc0000000,%edx
    0.00 :	    a528:       48 05 08 08 00 00       add    $0x808,%rax
    0.00 :	    a52e:       89 10                   mov    %edx,(%rax)
    0.00 :	    a530:       45 31 c9                xor    %r9d,%r9d
    0.00 :	    a533:       e9 56 ff ff ff          jmpq   a48e <ixgbe_service_task+0x1ee>
    0.00 :	    a538:       48 8b 83 08 f3 ff ff    mov    -0xcf8(%rbx),%rax
         :	{
         :	        u32 mask;
         :
         :	        switch (adapter->hw.mac.type) {
         :	        case ixgbe_mac_82598EB:
         :	                mask = (IXGBE_EIMS_RTX_QUEUE & qmask);
    0.00 :	    a53f:       41 0f b7 d1             movzwl %r9w,%edx
    0.00 :	    a543:       48 05 08 08 00 00       add    $0x808,%rax
    0.00 :	    a549:       89 10                   mov    %edx,(%rax)
    0.00 :	    a54b:       e9 7a ff ff ff          jmpq   a4ca <ixgbe_service_task+0x22a>
         :	            test_bit(__IXGBE_RESETTING, &adapter->state))
         :	                return;
         :
         :	        /* Force detection of hung controller */
         :	        if (netif_carrier_ok(adapter->netdev)) {
         :	                for (i = 0; i < adapter->num_tx_queues; i++)
    0.00 :	    a550:       44 8b a3 a8 e6 ff ff    mov    -0x1958(%rbx),%r12d
    0.00 :	    a557:       45 85 e4                test   %r12d,%r12d
    0.00 :	    a55a:       0f 8e ca fe ff ff       jle    a42a <ixgbe_service_task+0x18a>
    0.00 :	    a560:       48 89 ee                mov    %rbp,%rsi
    0.00 :	    a563:       31 c9                   xor    %ecx,%ecx
    0.00 :	    a565:       0f 1f 00                nopl   (%rax)
         :	 */
         :	static __always_inline void
         :	set_bit(unsigned int nr, volatile unsigned long *addr)
         :	{
         :	        if (IS_IMMEDIATE(nr)) {
         :	                asm volatile(LOCK_PREFIX "orb %1,%0"
    0.00 :	    a568:       48 8b 96 80 02 00 00    mov    0x280(%rsi),%rdx
    0.00 :	    a56f:       48 8d 42 30             lea    0x30(%rdx),%rax
    0.00 :	    a573:       f0 80 4a 30 02          lock orb $0x2,0x30(%rdx)
 ??:0
  100.00 :	    a578:       83 c1 01                add    $0x1,%ecx
    0.00 :	    a57b:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	    a57f:       3b 8d 20 02 00 00       cmp    0x220(%rbp),%ecx
    0.00 :	    a585:       7c e1                   jl     a568 <ixgbe_service_task+0x2c8>
    0.00 :	    a587:       e9 9e fe ff ff          jmpq   a42a <ixgbe_service_task+0x18a>
         :
         :	        /* do nothing if we are not using signature filters */
         :	        if (!(adapter->flags & IXGBE_FLAG_FDIR_HASH_CAPABLE))
         :	                return;
         :
         :	        adapter->fdir_overflow++;
    0.00 :	    a58c:       48 83 85 a0 1b 00 00    addq   $0x1,0x1ba0(%rbp)
    0.00 :	    a593:       01 
         :
         :	        if (ixgbe_reinit_fdir_tables_82599(hw) == 0) {
    0.00 :	    a594:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    a597:       e8 00 00 00 00          callq  a59c <ixgbe_service_task+0x2fc>
    0.00 :	    a59c:       85 c0                   test   %eax,%eax
    0.00 :	    a59e:       0f 85 c6 00 00 00       jne    a66a <ixgbe_service_task+0x3ca>
         :	                for (i = 0; i < adapter->num_tx_queues; i++)
    0.00 :	    a5a4:       8b 83 a8 e6 ff ff       mov    -0x1958(%rbx),%eax
    0.00 :	    a5aa:       85 c0                   test   %eax,%eax
    0.00 :	    a5ac:       7e 24                   jle    a5d2 <ixgbe_service_task+0x332>
    0.00 :	    a5ae:       48 89 e9                mov    %rbp,%rcx
    0.00 :	    a5b1:       31 f6                   xor    %esi,%esi
    0.00 :	    a5b3:       48 8b 91 80 02 00 00    mov    0x280(%rcx),%rdx
    0.00 :	    a5ba:       48 8d 42 30             lea    0x30(%rdx),%rax
    0.00 :	    a5be:       f0 80 4a 30 01          lock orb $0x1,0x30(%rdx)
    0.00 :	    a5c3:       83 c6 01                add    $0x1,%esi
    0.00 :	    a5c6:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	    a5ca:       3b b5 20 02 00 00       cmp    0x220(%rbp),%esi
    0.00 :	    a5d0:       7c e1                   jl     a5b3 <ixgbe_service_task+0x313>
    0.00 :	    a5d2:       48 8b 83 08 f3 ff ff    mov    -0xcf8(%rbx),%rax
    0.00 :	    a5d9:       ba 00 00 01 00          mov    $0x10000,%edx
    0.00 :	    a5de:       48 05 80 08 00 00       add    $0x880,%rax
    0.00 :	    a5e4:       89 10                   mov    %edx,(%rax)
    0.00 :	    a5e6:       e9 0e fe ff ff          jmpq   a3f9 <ixgbe_service_task+0x159>
         :	                 * we don't have to check if:
         :	                 *  - This interrupt wasn't for our port.
         :	                 *  - We may have missed the interrupt so always have to
         :	                 *    check if we  got a LSC
         :	                 */
         :	                if (!(eicr & IXGBE_EICR_GPI_SDP0) &&
    0.00 :	    a5eb:       f7 c2 00 00 10 01       test   $0x1100000,%edx
    0.00 :	    a5f1:       0f 84 cd fd ff ff       je     a3c4 <ixgbe_service_task+0x124>
         :	                    !(eicr & IXGBE_EICR_LSC))
         :	                        return;
         :
         :	                if (!(eicr & IXGBE_EICR_LSC) && hw->mac.ops.check_link) {
    0.00 :	    a5f7:       81 e2 00 00 10 00       and    $0x100000,%edx
    0.00 :	    a5fd:       75 2f                   jne    a62e <ixgbe_service_task+0x38e>
    0.00 :	    a5ff:       48 83 bb f0 f3 ff ff    cmpq   $0x0,-0xc10(%rbx)
    0.00 :	    a606:       00 
    0.00 :	    a607:       74 25                   je     a62e <ixgbe_service_task+0x38e>
         :	                        u32 autoneg;
         :	                        bool link_up = false;
         :
         :	                        hw->mac.ops.check_link(hw, &autoneg, &link_up, false);
    0.00 :	    a609:       31 c9                   xor    %ecx,%ecx
         :	                    !(eicr & IXGBE_EICR_LSC))
         :	                        return;
         :
         :	                if (!(eicr & IXGBE_EICR_LSC) && hw->mac.ops.check_link) {
         :	                        u32 autoneg;
         :	                        bool link_up = false;
    0.00 :	    a60b:       c6 44 24 17 00          movb   $0x0,0x17(%rsp)
         :
         :	                        hw->mac.ops.check_link(hw, &autoneg, &link_up, false);
    0.00 :	    a610:       48 8d 54 24 17          lea    0x17(%rsp),%rdx
    0.00 :	    a615:       48 8d 74 24 10          lea    0x10(%rsp),%rsi
    0.00 :	    a61a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    a61d:       ff 93 f0 f3 ff ff       callq  *-0xc10(%rbx)
         :
         :	                        if (link_up)
    0.00 :	    a623:       80 7c 24 17 00          cmpb   $0x0,0x17(%rsp)
    0.00 :	    a628:       0f 85 96 fd ff ff       jne    a3c4 <ixgbe_service_task+0x124>
         :	                                return;
         :	                }
         :
         :	                /* Check if this is not due to overtemp */
         :	                if (hw->phy.ops.check_overtemp(hw) != IXGBE_ERR_OVERTEMP)
    0.00 :	    a62e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    a631:       ff 93 18 f8 ff ff       callq  *-0x7e8(%rbx)
    0.00 :	    a637:       83 f8 e6                cmp    $0xffffffe6,%eax
    0.00 :	    a63a:       0f 85 84 fd ff ff       jne    a3c4 <ixgbe_service_task+0x124>
    0.00 :	    a640:       e9 57 fd ff ff          jmpq   a39c <ixgbe_service_task+0xfc>
         :	                return;
         :
         :	        adapter->flags &= ~IXGBE_FLAG_NEED_LINK_CONFIG;
         :
         :	        autoneg = hw->phy.autoneg_advertised;
         :	        if ((!autoneg) && (hw->mac.ops.get_link_capabilities))
    0.00 :	    a645:       48 8b 83 f8 f3 ff ff    mov    -0xc08(%rbx),%rax
    0.00 :	    a64c:       48 85 c0                test   %rax,%rax
    0.00 :	    a64f:       90                      nop
    0.00 :	    a650:       0f 84 d2 fc ff ff       je     a328 <ixgbe_service_task+0x88>
         :	                hw->mac.ops.get_link_capabilities(hw, &autoneg, &negotiation);
    0.00 :	    a656:       48 8d 54 24 17          lea    0x17(%rsp),%rdx
    0.00 :	    a65b:       48 8d 74 24 10          lea    0x10(%rsp),%rsi
    0.00 :	    a660:       4c 89 e7                mov    %r12,%rdi
    0.00 :	    a663:       ff d0                   callq  *%rax
    0.00 :	    a665:       e9 be fc ff ff          jmpq   a328 <ixgbe_service_task+0x88>
         :	                        set_bit(__IXGBE_TX_FDIR_INIT_DONE,
         :	                                &(adapter->tx_ring[i]->state));
         :	                /* re-enable flow director interrupts */
         :	                IXGBE_WRITE_REG(hw, IXGBE_EIMS, IXGBE_EIMS_FLOW_DIR);
         :	        } else {
         :	                e_err(probe, "failed to finish FDIR re-initialization, "
    0.00 :	    a66a:       f6 83 30 f9 ff ff 02    testb  $0x2,-0x6d0(%rbx)
    0.00 :	    a671:       0f 84 82 fd ff ff       je     a3f9 <ixgbe_service_task+0x159>
         :	                      "ignored adding FDIR ATR filters\n");
    0.00 :	    a677:       48 8b bb 88 e6 ff ff    mov    -0x1978(%rbx),%rdi
    0.00 :	    a67e:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    a685:       31 c0                   xor    %eax,%eax
    0.00 :	    a687:       e8 00 00 00 00          callq  a68c <ixgbe_service_task+0x3ec>
    0.00 :	    a68c:       e9 68 fd ff ff          jmpq   a3f9 <ixgbe_service_task+0x159>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000050f0 <ext3_get_branch>:
    0.00 :	    50f0:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	    5124:       48 89                   add    %al,(%rax)
    0.00 :	    5126:       5c 24 08                mov    %r8,%r13
    0.00 :	    5129:       48 89 6c                movslq (%rdx),%rdx
    0.00 :	    512c:       24 10 48                mov    %rcx,%rbp
    0.00 :	    512f:       89 cb 4c 89 64 24 18    lea    -0xe0(%rdi,%rdx,4),%rax
    0.00 :	    5136:       4c 
    0.00 :	    5137:       89 6c 24                mov    %rax,(%rcx)
    0.00 :	    513a:       20 49 89 d4 4c 89 74    mov    -0xe0(%rdi,%rdx,4),%eax
    0.00 :	    5141:       24 28 4c 89 7c 24 30    movq   $0x0,0x10(%rcx)
    0.00 :	    5148:       41 
    0.00 :	    5149:       89 f6                   test   %eax,%eax
    0.00 :	    514b:       4c 8b 7f                mov    %eax,0x8(%rcx)
    0.00 :	    514e:       18 41                   jne    5180 <ext3_get_branch+0x60>
    0.00 :	    5150:       c7 00 00                mov    %rbp,%rax
    0.00 :	    5153:       00 00 00 4d 89          mov    0x8(%rsp),%rbx
    0.00 :	    5158:       c5 48 63 12 48          mov    0x10(%rsp),%rbp
    0.00 :	    515d:       89 cd 48 8d 84          mov    0x18(%rsp),%r12
    0.00 :	    5162:       97 20 ff ff ff          mov    0x20(%rsp),%r13
    0.00 :	    5167:       48 89 01 8b 84          mov    0x28(%rsp),%r14
    0.00 :	    516c:       97 20 ff ff ff          mov    0x30(%rsp),%r15
    0.00 :	    5171:       48 c7 41 10             add    $0x38,%rsp
    0.00 :	    5175:       00                      retq   
    0.00 :	    5176:       00 00 00 85 c0 89 41    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    517d:       08 75 30 
    0.00 :	    5180:       48 89 e8                mov    %rcx,%rbp
    0.00 :	    5183:       48 8b 5c 24             sub    $0x1,%r14d
    0.00 :	    5187:       08 48                   je     51fd <ext3_get_branch+0xdd>
    0.00 :	    5189:       8b 6c 24                mov    0x8(%rbp),%esi
    0.00 :	    518c:       10 4c 8b 64             mov    0x18(%r15),%rdx
    0.00 :	    5190:       24 18 4c 8b 6c 24 20    mov    0xf8(%r15),%rdi
    0.00 :	    5197:       4c 8b 74 24 28          callq  519c <ext3_get_branch+0x7c>
    0.00 :	    519c:       4c 8b 7c                test   %rax,%rax
    0.00 :	    519f:       24 30 48                mov    %rax,%rsi
    0.00 :	    51a2:       83 c4                   je     5204 <ext3_get_branch+0xe4>
    0.00 :	    51a4:       38 c3 66                cmp    %rbx,%rbp
    0.00 :	    51a7:       2e 0f                   jb     51d3 <ext3_get_branch+0xb3>
    0.00 :	    51a9:       1f 84 00                mov    (%rbx),%rdx
    0.00 :	    51ac:       00 00 00                mov    0x8(%rbx),%eax
    0.00 :	    51af:       00 48                   cmp    (%rdx),%eax
    0.00 :	    51b1:       89 cd                   jne    5218 <ext3_get_branch+0xf8>
    0.00 :	    51b3:       41 83 ee                mov    %rbx,%rcx
    0.00 :	    51b6:       01 74                   jmp    51ca <ext3_get_branch+0xaa>
    0.00 :	    51b8:       74 8b 75 08 49 8b 57    nopl   0x0(%rax,%rax,1)
    0.00 :	    51bf:       18 
    0.00 :	    51c0:       49 8b bf                mov    (%rcx),%rdx
    0.00 :	    51c3:       f8 00 00                mov    0x8(%rcx),%eax
    0.00 :	    51c6:       00 e8                   cmp    (%rdx),%eax
    0.00 :	    51c8:       00 00                   jne    5218 <ext3_get_branch+0xf8>
    0.00 :	    51ca:       00 00 48 85             add    $0x18,%rcx
    0.00 :	    51ce:       c0 48 89                cmp    %rcx,%rbp
    0.00 :	    51d1:       c6 74                   jae    51c0 <ext3_get_branch+0xa0>
    0.00 :	    51d3:       60 48 39 dd             add    $0x4,%r12
    0.00 :	    51d7:       72 2a 48 8b             add    $0x18,%rbp
    0.00 :	    51db:       13 8b 43 08             movslq (%r12),%rax
    0.00 :	    51df:       3b 02 75 65             shl    $0x2,%rax
    0.00 :	    51e3:       48 89 d9 eb             add    0x28(%rsi),%rax
    0.00 :	    51e7:       12 0f 1f 84             mov    %rax,0x0(%rbp)
    0.00 :	    51eb:       00 00                   mov    (%rax),%eax
 ??:0
  100.00 :	    51ed:       00 00 00 48             mov    %rsi,0x10(%rbp)
    0.00 :	    51f1:       8b 11                   test   %eax,%eax
    0.00 :	    51f3:       8b 41 08                mov    %eax,0x8(%rbp)
    0.00 :	    51f6:       3b 02                   jne    5183 <ext3_get_branch+0x63>
    0.00 :	    51f8:       75 4e 48 83 c1          jmpq   5150 <ext3_get_branch+0x30>
    0.00 :	    51fd:       18 48                   xor    %ebp,%ebp
    0.00 :	    51ff:       39 cd 73 ed 49          jmpq   5150 <ext3_get_branch+0x30>
    0.00 :	    5204:       83 c4 04 48 83 c5 18    movl   $0xfffffffb,0x0(%r13)
    0.00 :	    520b:       49 
    0.00 :	    520c:       63 04 24 48             nopl   0x0(%rax)
    0.00 :	    5210:       c1 e0 02 48 03          jmpq   5150 <ext3_get_branch+0x30>
    0.00 :	    5215:       46 28 48                nopl   (%rax)
    0.00 :	    5218:       89 45 00                mov    %rsi,%rdi
    0.00 :	    521b:       8b 00 48 89 75          nopl   0x0(%rax,%rax,1)
    0.00 :	    5220:       10 85 c0 89 45          callq  4740 <ext3_rsv_window_add+0x3b00>
    0.00 :	    5225:       08 75 8b e9 53 ff ff    movl   $0xfffffff5,0x0(%r13)
    0.00 :	    522c:       ff 
    0.00 :	    522d:       31 ed e9 4c ff          jmpq   5150 <ext3_get_branch+0x30>
         :	    5232:       ff ff 41 c7 45 00 fb    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
         :	    5239:       ff ff ff 0f 1f 40 00 
         :	    5240:       e9 3b ff ff             lea    0x1(%rdi),%rax
         :	    5244:       ff 0f 1f 00 48          lock orb $0x2,0x1(%rdi)
         :	    5249:       89 f7 0f 1f 44          jmpq   524e <ext3_get_branch+0x12e>
         :	    524e:       00 00                   xchg   %ax,%ax
         :	    5250:       e8                      push   %rbx
         :	    5251:       1b f5 ff                mov    %rdi,%rbx
         :	    5254:       ff 41 c7 45 00          callq  5259 <ext3_get_branch+0x139>
         :	    5259:       f5 ff ff ff e9          mov    $0xc,%edx
         :	    525e:       1e ff                   mov    %eax,%esi
         :	    5260:       ff ff                   mov    %edx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------
