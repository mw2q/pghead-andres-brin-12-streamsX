
Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.07 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    6.83 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    6.26 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    5.97 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    4.84 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.98 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    3.41 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.41 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.27 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    3.13 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    2.70 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    1.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1095
    1.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    1.42 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.28 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1055
    1.28 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.28 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    1.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1052
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    0.85 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1068
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ef10 <slot_deform_tuple>:
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1049
    1.71 :	  46ef10:       55                      push   %rbp
    0.00 :	  46ef11:       48 89 e5                mov    %rsp,%rbp
    0.14 :	  46ef14:       41 57                   push   %r15
    1.00 :	  46ef16:       41 89 f7                mov    %esi,%r15d
    0.00 :	  46ef19:       41 56                   push   %r14
    0.00 :	  46ef1b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  46ef1e:       41 55                   push   %r13
    0.71 :	  46ef20:       41 54                   push   %r12
    0.00 :	  46ef22:       53                      push   %rbx
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef23:       31 db                   xor    %ebx,%ebx
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.14 :	  46ef25:       48 83 ec 28             sub    $0x28,%rsp
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1052
    0.85 :	  46ef29:       48 8b 47 28             mov    0x28(%rdi),%rax
    0.00 :	  46ef2d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
    0.43 :	  46ef31:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
    0.14 :	  46ef35:       8b 77 24                mov    0x24(%rdi),%esi
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
         :	        HeapTuple       tuple = slot->tts_tuple;
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
    0.00 :	  46ef38:       4c 8b 5f 30             mov    0x30(%rdi),%r11
         :	        HeapTupleHeader tup = tuple->t_data;
    0.00 :	  46ef3c:       4c 8b 40 10             mov    0x10(%rax),%r8
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
    0.14 :	  46ef40:       41 0f b7 40 14          movzwl 0x14(%r8),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1055
    1.28 :	  46ef45:       83 e0 01                and    $0x1,%eax
    0.43 :	  46ef48:       41 89 c2                mov    %eax,%r10d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef4b:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.00 :	  46ef4f:       31 ff                   xor    %edi,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1068
    0.57 :	  46ef51:       85 f6                   test   %esi,%esi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
         :	        Datum      *values = slot->tts_values;
         :	        bool       *isnull = slot->tts_isnull;
         :	        HeapTupleHeader tup = tuple->t_data;
         :	        bool            hasnulls = HeapTupleHasNulls(tuple);
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ef53:       4c 8b 48 08             mov    0x8(%rax),%r9
         :	        /*
         :	         * Check whether the first call for this tuple, and initialize or restore
         :	         * loop state.
         :	         */
         :	        attnum = slot->tts_nvalid;
         :	        if (attnum == 0)
    0.14 :	  46ef57:       74 09                   je     46ef62 <slot_deform_tuple+0x52>
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
    0.00 :	  46ef59:       41 0f b6 7e 07          movzbl 0x7(%r14),%edi
         :	                slow = false;
         :	        }
         :	        else
         :	        {
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
    0.00 :	  46ef5e:       49 8b 5e 58             mov    0x58(%r14),%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.14 :	  46ef62:       41 0f b6 40 16          movzbl 0x16(%r8),%eax
         :
         :	        for (; attnum < natts; attnum++)
    0.14 :	  46ef67:       44 39 fe                cmp    %r15d,%esi
         :	                /* Restore state from previous execution */
         :	                off = slot->tts_off;
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
    0.00 :	  46ef6a:       4d 8d 2c 00             lea    (%r8,%rax,1),%r13
         :
         :	        for (; attnum < natts; attnum++)
    0.14 :	  46ef6e:       0f 8d c0 00 00 00       jge    46f034 <slot_deform_tuple+0x124>
    0.00 :	  46ef74:       41 89 f4                mov    %esi,%r12d
    0.14 :	  46ef77:       eb 40                   jmp    46efb9 <slot_deform_tuple+0xa9>
    0.00 :	  46ef79:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
    0.00 :	  46ef80:       44 89 e0                mov    %r12d,%eax
    0.14 :	  46ef83:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  46ef86:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46ef89:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46ef8c:       48 98                   cltq   
    0.00 :	  46ef8e:       41 0f b6 44 00 17       movzbl 0x17(%r8,%rax,1),%eax
    0.00 :	  46ef94:       d3 f8                   sar    %cl,%eax
    0.14 :	  46ef96:       a8 01                   test   $0x1,%al
    0.00 :	  46ef98:       75 2b                   jne    46efc5 <slot_deform_tuple+0xb5>
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46ef9a:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
         :	                        isnull[attnum] = true;
    0.00 :	  46ef9e:       bf 01 00 00 00          mov    $0x1,%edi
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
         :	                {
         :	                        values[attnum] = (Datum) 0;
    0.00 :	  46efa3:       48 c7 04 f2 00 00 00    movq   $0x0,(%rdx,%rsi,8)
    0.00 :	  46efaa:       00 
         :	                        isnull[attnum] = true;
    0.00 :	  46efab:       41 c6 04 33 01          movb   $0x1,(%r11,%rsi,1)
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.28 :	  46efb0:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	  46efb4:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46efb7:       7e 78                   jle    46f031 <slot_deform_tuple+0x121>
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
    0.00 :	  46efb9:       49 63 f4                movslq %r12d,%rsi
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    0.71 :	  46efbc:       45 84 d2                test   %r10b,%r10b
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
         :	        {
         :	                Form_pg_attribute thisatt = att[attnum];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1085
    6.26 :	  46efbf:       49 8b 14 f1             mov    (%r9,%rsi,8),%rdx
         :
         :	                if (hasnulls && att_isnull(attnum, bp))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1087
    4.84 :	  46efc3:       75 bb                   jne    46ef80 <slot_deform_tuple+0x70>
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
    0.00 :	  46efc5:       40 84 ff                test   %dil,%dil
         :	                        isnull[attnum] = true;
         :	                        slow = true;            /* can't use attcacheoff anymore */
         :	                        continue;
         :	                }
         :
         :	                isnull[attnum] = false;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1095
    1.85 :	  46efc8:       41 c6 04 33 00          movb   $0x0,(%r11,%rsi,1)
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1097
    3.98 :	  46efcd:       0f 85 7d 00 00 00       jne    46f050 <slot_deform_tuple+0x140>
    0.00 :	  46efd3:       8b 42 54                mov    0x54(%rdx),%eax
    2.70 :	  46efd6:       85 c0                   test   %eax,%eax
    0.00 :	  46efd8:       78 76                   js     46f050 <slot_deform_tuple+0x140>
         :	                        off = thisatt->attcacheoff;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1098
    3.41 :	  46efda:       48 63 d8                movslq %eax,%rbx
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.13 :	  46efdd:       80 7a 5c 00             cmpb   $0x0,0x5c(%rdx)
    0.85 :	  46efe1:       49 8d 44 1d 00          lea    0x0(%r13,%rbx,1),%rax
    4.55 :	  46efe6:       74 28                   je     46f010 <slot_deform_tuple+0x100>
    3.27 :	  46efe8:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
    0.43 :	  46efec:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  46eff0:       0f 84 3a 01 00 00       je     46f130 <slot_deform_tuple+0x220>
    0.57 :	  46eff6:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  46effa:       0f 84 90 01 00 00       je     46f190 <slot_deform_tuple+0x280>
    0.00 :	  46f000:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  46f004:       0f 84 a6 01 00 00       je     46f1b0 <slot_deform_tuple+0x2a0>
    0.00 :	  46f00a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
    3.41 :	  46f010:       48 8b 4d d0             mov    -0x30(%rbp),%rcx
    2.13 :	  46f014:       48 89 04 f1             mov    %rax,(%rcx,%rsi,8)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
   18.07 :	  46f018:       0f b7 42 4c             movzwl 0x4c(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    0.85 :	  46f01c:       66 85 c0                test   %ax,%ax
    0.00 :	  46f01f:       7e 6f                   jle    46f090 <slot_deform_tuple+0x180>
    0.00 :	  46f021:       48 0f bf c0             movswq %ax,%rax
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    0.71 :	  46f025:       41 83 c4 01             add    $0x1,%r12d
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    3.13 :	  46f029:       48 01 c3                add    %rax,%rbx
         :	                slow = slot->tts_slow;
         :	        }
         :
         :	        tp = (char *) tup + tup->t_hoff;
         :
         :	        for (; attnum < natts; attnum++)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1083
    1.42 :	  46f02c:       45 39 e7                cmp    %r12d,%r15d
    0.00 :	  46f02f:       7f 88                   jg     46efb9 <slot_deform_tuple+0xa9>
         :	 *              re-computing information about previously extracted attributes.
         :	 *              slot->tts_nvalid is the number of attributes already extracted.
         :	 */
         :	static void
         :	slot_deform_tuple(TupleTableSlot *slot, int natts)
         :	{
    0.00 :	  46f031:       44 89 fe                mov    %r15d,%esi
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
    0.00 :	  46f034:       49 89 5e 58             mov    %rbx,0x58(%r14)
         :	        }
         :
         :	        /*
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1137
    0.57 :	  46f038:       41 89 76 24             mov    %esi,0x24(%r14)
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
    0.00 :	  46f03c:       41 88 7e 07             mov    %dil,0x7(%r14)
         :	}
    0.28 :	  46f040:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  46f044:       5b                      pop    %rbx
    0.28 :	  46f045:       41 5c                   pop    %r12
    0.00 :	  46f047:       41 5d                   pop    %r13
    0.43 :	  46f049:       41 5e                   pop    %r14
    0.00 :	  46f04b:       41 5f                   pop    %r15
    0.28 :	  46f04d:       c9                      leaveq 
    0.28 :	  46f04e:       c3                      retq   
    0.00 :	  46f04f:       90                      nop
         :
         :	                isnull[attnum] = false;
         :
         :	                if (!slow && thisatt->attcacheoff >= 0)
         :	                        off = thisatt->attcacheoff;
         :	                else if (thisatt->attlen == -1)
    0.00 :	  46f050:       66 83 7a 4c ff          cmpw   $0xffff,0x4c(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1099
    6.83 :	  46f055:       74 71                   je     46f0c8 <slot_deform_tuple+0x1b8>
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.43 :	  46f057:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f05b:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f05d:       0f 84 1d 01 00 00       je     46f180 <slot_deform_tuple+0x270>
    0.00 :	  46f063:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f065:       74 10                   je     46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f067:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f069:       0f 84 51 01 00 00       je     46f1c0 <slot_deform_tuple+0x2b0>
    0.00 :	  46f06f:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f073:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
         :
         :	                        if (!slow)
    0.00 :	  46f077:       40 84 ff                test   %dil,%dil
    0.00 :	  46f07a:       0f 85 5d ff ff ff       jne    46efdd <slot_deform_tuple+0xcd>
         :	                                thisatt->attcacheoff = off;
    0.00 :	  46f080:       89 5a 54                mov    %ebx,0x54(%rdx)
    0.00 :	  46f083:       e9 55 ff ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f088:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f08f:       00 
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f090:       66 83 c0 01             add    $0x1,%ax
    0.00 :	  46f094:       0f 85 a6 00 00 00       jne    46f140 <slot_deform_tuple+0x230>
    0.43 :	  46f09a:       41 0f b6 44 1d 00       movzbl 0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.28 :	  46f0a0:       3c 01                   cmp    $0x1,%al
    0.00 :	  46f0a2:       0f 84 50 01 00 00       je     46f1f8 <slot_deform_tuple+0x2e8>
    0.28 :	  46f0a8:       a8 01                   test   $0x1,%al
    0.00 :	  46f0aa:       0f 85 20 01 00 00       jne    46f1d0 <slot_deform_tuple+0x2c0>
    0.00 :	  46f0b0:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
    0.00 :	  46f0b5:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  46f0b8:       89 c0                   mov    %eax,%eax
    0.85 :	  46f0ba:       48 8d 1c 18             lea    (%rax,%rbx,1),%rbx
    0.00 :	  46f0be:       e9 ad 00 00 00          jmpq   46f170 <slot_deform_tuple+0x260>
    0.00 :	  46f0c3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.43 :	  46f0c8:       40 84 ff                test   %dil,%dil
    0.00 :	  46f0cb:       75 26                   jne    46f0f3 <slot_deform_tuple+0x1e3>
    0.00 :	  46f0cd:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f0d1:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f0d3:       0f 84 4f 01 00 00       je     46f228 <slot_deform_tuple+0x318>
    0.00 :	  46f0d9:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f0db:       74 a3                   je     46f080 <slot_deform_tuple+0x170>
    0.00 :	  46f0dd:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f0df:       90                      nop
    0.00 :	  46f0e0:       0f 84 52 01 00 00       je     46f238 <slot_deform_tuple+0x328>
    0.00 :	  46f0e6:       48 8d 43 01             lea    0x1(%rbx),%rax
    0.00 :	  46f0ea:       48 83 e0 fe             and    $0xfffffffffffffffe,%rax
    0.00 :	  46f0ee:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  46f0f1:       74 8d                   je     46f080 <slot_deform_tuple+0x170>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1112
    0.85 :	  46f0f3:       41 80 7c 1d 00 00       cmpb   $0x0,0x0(%r13,%rbx,1)
    0.14 :	  46f0f9:       0f 85 a1 00 00 00       jne    46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f0ff:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  46f103:       3c 69                   cmp    $0x69,%al
    0.00 :	  46f105:       0f 84 d5 00 00 00       je     46f1e0 <slot_deform_tuple+0x2d0>
    0.00 :	  46f10b:       3c 63                   cmp    $0x63,%al
    0.00 :	  46f10d:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f110:       0f 84 8a 00 00 00       je     46f1a0 <slot_deform_tuple+0x290>
    0.00 :	  46f116:       3c 64                   cmp    $0x64,%al
    0.00 :	  46f118:       0f 84 27 01 00 00       je     46f245 <slot_deform_tuple+0x335>
    0.00 :	  46f11e:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  46f122:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f127:       48 83 e3 fe             and    $0xfffffffffffffffe,%rbx
    0.00 :	  46f12b:       e9 ad fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f130:       49 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%rax
    0.00 :	  46f135:       e9 d6 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f13a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f140:       49 8d 7c 1d 00          lea    0x0(%r13,%rbx,1),%rdi
    0.00 :	  46f145:       4c 89 45 c8             mov    %r8,-0x38(%rbp)
    0.00 :	  46f149:       4c 89 4d c0             mov    %r9,-0x40(%rbp)
    0.00 :	  46f14d:       44 88 55 b8             mov    %r10b,-0x48(%rbp)
    0.00 :	  46f151:       4c 89 5d b0             mov    %r11,-0x50(%rbp)
    0.00 :	  46f155:       e8 f6 a6 ff ff          callq  469850 <strlen@plt>
    0.00 :	  46f15a:       44 0f b6 55 b8          movzbl -0x48(%rbp),%r10d
    0.00 :	  46f15f:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  46f163:       48 8d 5c 03 01          lea    0x1(%rbx,%rax,1),%rbx
    0.00 :	  46f168:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  46f16c:       4c 8b 5d b0             mov    -0x50(%rbp),%r11
         :	         * Save state for next execution
         :	         */
         :	        slot->tts_nvalid = attnum;
         :	        slot->tts_off = off;
         :	        slot->tts_slow = slow;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1140
    0.85 :	  46f170:       bf 01 00 00 00          mov    $0x1,%edi
    0.14 :	  46f175:       e9 36 fe ff ff          jmpq   46efb0 <slot_deform_tuple+0xa0>
    0.00 :	  46f17a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f180:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f184:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.43 :	  46f188:       e9 ea fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f18d:       0f 1f 00                nopl   (%rax)
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    2.13 :	  46f190:       41 8b 44 1d 00          mov    0x0(%r13,%rbx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1126
    5.97 :	  46f195:       e9 76 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f19a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
         :
         :	                        if (!slow)
         :	                                thisatt->attcacheoff = off;
    0.14 :	  46f1a0:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1a5:       e9 33 fe ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1aa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
    0.00 :	  46f1b0:       41 0f b7 44 1d 00       movzwl 0x0(%r13,%rbx,1),%eax
    0.00 :	  46f1b6:       e9 55 fe ff ff          jmpq   46f010 <slot_deform_tuple+0x100>
    0.00 :	  46f1bb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* not varlena, so safe to use att_align_nominal */
         :	                        off = att_align_nominal(off, thisatt->attalign);
    0.00 :	  46f1c0:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f1c4:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f1c8:       e9 aa fe ff ff          jmpq   46f077 <slot_deform_tuple+0x167>
    0.00 :	  46f1cd:       0f 1f 00                nopl   (%rax)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1128
    1.00 :	  46f1d0:       d0 e8                   shr    %al
    0.14 :	  46f1d2:       0f b6 c0                movzbl %al,%eax
    0.43 :	  46f1d5:       e9 e0 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f1da:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (!slow &&
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f1e0:       48 83 c3 03             add    $0x3,%rbx
    0.00 :	  46f1e4:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f1e9:       48 83 e3 fc             and    $0xfffffffffffffffc,%rbx
    0.00 :	  46f1ed:       e9 eb fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>
    0.00 :	  46f1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                thisatt->attcacheoff = off;
         :	                }
         :
         :	                values[attnum] = fetchatt(thisatt, tp + off);
         :
         :	                off = att_addlength_pointer(off, thisatt->attlen, tp + off);
    0.00 :	  46f1f8:       41 0f b6 54 1d 01       movzbl 0x1(%r13,%rbx,1),%edx
    0.00 :	  46f1fe:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  46f203:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  46f206:       0f 84 ae fe ff ff       je     46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f20c:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  46f20f:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  46f214:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  46f219:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  46f21d:       e9 98 fe ff ff          jmpq   46f0ba <slot_deform_tuple+0x1aa>
    0.00 :	  46f222:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * We can only cache the offset for a varlena attribute if the
         :	                         * offset is already suitably aligned, so that there would be no
         :	                         * pad bytes in any case: then the offset will be valid for either
         :	                         * an aligned or unaligned value.
         :	                         */
         :	                        if (!slow &&
    0.00 :	  46f228:       48 8d 43 03             lea    0x3(%rbx),%rax
    0.00 :	  46f22c:       48 83 e0 fc             and    $0xfffffffffffffffc,%rax
    0.00 :	  46f230:       e9 b9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
    0.00 :	  46f235:       0f 1f 00                nopl   (%rax)
    0.00 :	  46f238:       48 8d 43 07             lea    0x7(%rbx),%rax
    0.00 :	  46f23c:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  46f240:       e9 a9 fe ff ff          jmpq   46f0ee <slot_deform_tuple+0x1de>
         :	                                off == att_align_nominal(off, thisatt->attalign))
         :	                                thisatt->attcacheoff = off;
         :	                        else
         :	                        {
         :	                                off = att_align_pointer(off, thisatt->attalign, -1,
    0.00 :	  46f245:       48 83 c3 07             add    $0x7,%rbx
    0.00 :	  46f249:       bf 01 00 00 00          mov    $0x1,%edi
    0.00 :	  46f24e:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  46f252:       e9 86 fd ff ff          jmpq   46efdd <slot_deform_tuple+0xcd>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   12.88 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:398
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    3.79 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    3.54 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    2.53 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    2.27 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    2.02 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    1.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:214
    1.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    1.77 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:396
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:284
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:287
    1.52 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:80
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:293
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:224
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:339
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.01 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:224
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:176
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:389
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:392
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:395
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:396
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    0.76 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:79
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:102
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:214
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:237
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:239
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:259
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:162
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:406
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:389
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:391
    0.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:393
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005baf80 <BitmapHeapNext>:
         :	 *              Retrieve next tuple from the BitmapHeapScan node's currentRelation
         :	 * ----------------------------------------------------------------
         :	 */
         :	static TupleTableSlot *
         :	BitmapHeapNext(BitmapHeapScanState *node)
         :	{
    0.00 :	  5baf80:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:63
    0.51 :	  5baf81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5baf84:       41 57                   push   %r15
    0.00 :	  5baf86:       41 56                   push   %r14
    0.76 :	  5baf88:       41 55                   push   %r13
    0.25 :	  5baf8a:       41 54                   push   %r12
    0.00 :	  5baf8c:       53                      push   %rbx
    0.51 :	  5baf8d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5baf90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        TupleTableSlot *slot;
         :
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
    0.25 :	  5baf97:       48 8b 47 60             mov    0x60(%rdi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:79
    0.51 :	  5baf9b:       48 89 85 28 ff ff ff    mov    %rax,-0xd8(%rbp)
         :	        slot = node->ss.ss_ScanTupleSlot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:80
    1.01 :	  5bafa2:       48 8b 97 88 00 00 00    mov    0x88(%rdi),%rdx
    0.00 :	  5bafa9:       48 89 95 38 ff ff ff    mov    %rdx,-0xc8(%rbp)
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafb0:       48 8b 8f a0 00 00 00    mov    0xa0(%rdi),%rcx
         :	        /*
         :	         * extract necessary information from index scan node
         :	         */
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
    0.00 :	  5bafb7:       4c 8b a7 80 00 00 00    mov    0x80(%rdi),%r12
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
    0.00 :	  5bafbe:       48 89 8d 30 ff ff ff    mov    %rcx,-0xd0(%rbp)
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
    0.25 :	  5bafc5:       48 83 bf 98 00 00 00    cmpq   $0x0,0x98(%rdi)
    0.00 :	  5bafcc:       00 
         :	        econtext = node->ss.ps.ps_ExprContext;
         :	        slot = node->ss.ss_ScanTupleSlot;
         :	        scan = node->ss.ss_currentScanDesc;
         :	        tbm = node->tbm;
         :	        tbmiterator = node->tbmiterator;
         :	        tbmres = node->tbmres;
    0.25 :	  5bafcd:       48 8b 97 a8 00 00 00    mov    0xa8(%rdi),%rdx
         :	#ifdef USE_PREFETCH
         :	        prefetch_iterator = node->prefetch_iterator;
    0.25 :	  5bafd4:       4c 8b bf c0 00 00 00    mov    0xc0(%rdi),%r15
         :	         * desired prefetch distance, which starts small and increases up to the
         :	         * GUC-controlled maximum, target_prefetch_pages.  This is to avoid doing
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:102
    0.51 :	  5bafdb:       0f 84 11 06 00 00       je     5bb5f2 <BitmapHeapNext+0x672>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.25 :	  5bafe1:       49 8d 44 24 48          lea    0x48(%r12),%rax
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bafe6:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bafe9:       48 89 85 20 ff ff ff    mov    %rax,-0xe0(%rbp)
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5baff0:       0f 84 c4 01 00 00       je     5bb1ba <BitmapHeapNext+0x23a>
    0.25 :	  5baff6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5baffd:       00 00 00 
         :	                else
         :	                {
         :	                        /*
         :	                         * Continuing in previously obtained page; advance rs_cindex
         :	                         */
         :	                        scan->rs_cindex++;
    0.25 :	  5bb000:       41 83 44 24 70 01       addl   $0x1,0x70(%r12)
         :
         :	                        /*
         :	                         * Try to prefetch at least a few pages even before we get to the
         :	                         * second page if we don't stop reading after the first tuple.
         :	                         */
         :	                        if (node->prefetch_target < target_prefetch_pages)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:214
    1.77 :	  5bb006:       49 89 d5                mov    %rdx,%r13
    0.25 :	  5bb009:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
    0.51 :	  5bb00f:       3b 05 4f 20 5c 00       cmp    0x5c204f(%rip),%eax        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb015:       7d 0c                   jge    5bb023 <BitmapHeapNext+0xa3>
         :	                                node->prefetch_target++;
    0.00 :	  5bb017:       83 c0 01                add    $0x1,%eax
    0.00 :	  5bb01a:       49 89 d5                mov    %rdx,%r13
    0.00 :	  5bb01d:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
         :	                }
         :
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:222
    1.01 :	  5bb023:       41 8b 44 24 70          mov    0x70(%r12),%eax
    1.52 :	  5bb028:       85 c0                   test   %eax,%eax
    0.00 :	  5bb02a:       0f 88 e0 01 00 00       js     5bb210 <BitmapHeapNext+0x290>
    1.26 :	  5bb030:       41 3b 44 24 78          cmp    0x78(%r12),%eax
    0.00 :	  5bb035:       0f 8d d5 01 00 00       jge    5bb210 <BitmapHeapNext+0x290>
         :	                 * to avoid having prefetching interfere with the main I/O. Also, this
         :	                 * should happen only when we have determined there is still something
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:237
    0.51 :	  5bb03b:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb03e:       74 55                   je     5bb095 <BitmapHeapNext+0x115>
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:239
    0.51 :	  5bb040:       8b 83 cc 00 00 00       mov    0xcc(%rbx),%eax
    0.00 :	  5bb046:       3b 83 c8 00 00 00       cmp    0xc8(%rbx),%eax
    0.00 :	  5bb04c:       7f 24                   jg     5bb072 <BitmapHeapNext+0xf2>
    0.00 :	  5bb04e:       eb 45                   jmp    5bb095 <BitmapHeapNext+0x115>
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
         :	                                        break;
         :	                                }
         :	                                node->prefetch_pages++;
    0.25 :	  5bb050:       83 83 c8 00 00 00 01    addl   $0x1,0xc8(%rbx)
         :	                                PrefetchBuffer(scan->rs_rd, MAIN_FORKNUM, tbmpre->blockno);
    0.00 :	  5bb057:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb059:       8b 10                   mov    (%rax),%edx
    0.00 :	  5bb05b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb05f:       e8 6c b7 0b 00          callq  6767d0 <PrefetchBuffer>
         :	                 * to do on the current page, else we may uselessly prefetch the same
         :	                 * page we are just about to request for real.
         :	                 */
         :	                if (prefetch_iterator)
         :	                {
         :	                        while (node->prefetch_pages < node->prefetch_target)
    0.00 :	  5bb064:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
    0.25 :	  5bb06a:       3b 83 cc 00 00 00       cmp    0xcc(%rbx),%eax
    0.00 :	  5bb070:       7d 23                   jge    5bb095 <BitmapHeapNext+0x115>
         :	                        {
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb072:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb075:       e8 d6 82 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL)
    0.00 :	  5bb07a:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb07d:       75 d1                   jne    5bb050 <BitmapHeapNext+0xd0>
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb07f:       4c 89 ff                mov    %r15,%rdi
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb082:       45 31 ff                xor    %r15d,%r15d
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL)
         :	                                {
         :	                                        /* No more pages to prefetch */
         :	                                        tbm_end_iterate(prefetch_iterator);
    0.00 :	  5bb085:       e8 86 84 02 00          callq  5e3510 <tbm_end_iterate>
         :	                                        node->prefetch_iterator = prefetch_iterator = NULL;
    0.00 :	  5bb08a:       48 c7 83 c0 00 00 00    movq   $0x0,0xc0(%rbx)
    0.00 :	  5bb091:       00 00 00 00 
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:259
    0.51 :	  5bb095:       49 63 44 24 70          movslq 0x70(%r12),%rax
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb09a:       41 8b 74 24 64          mov    0x64(%r12),%esi
    0.00 :	  5bb09f:       85 f6                   test   %esi,%esi
         :	#endif   /* USE_PREFETCH */
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
    0.00 :	  5bb0a1:       41 0f b7 7c 44 7c       movzwl 0x7c(%r12,%rax,2),%edi
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:260
    2.53 :	  5bb0a7:       0f 88 73 01 00 00       js     5bb220 <BitmapHeapNext+0x2a0>
    0.25 :	  5bb0ad:       8d 46 ff                lea    -0x1(%rsi),%eax
    0.00 :	  5bb0b0:       48 63 c8                movslq %eax,%rcx
    0.00 :	  5bb0b3:       48 c1 e1 0d             shl    $0xd,%rcx
    0.51 :	  5bb0b7:       48 03 0d 3a 4a 60 00    add    0x604a3a(%rip),%rcx        # bbfaf8 <BufferBlocks>
         :	                lp = PageGetItemId(dp, targoffset);
    0.25 :	  5bb0be:       0f b7 d7                movzwl %di,%edx
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb0c1:       48 83 c2 03             add    $0x3,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    0.51 :	  5bb0c5:       0f b7 44 91 08          movzwl 0x8(%rcx,%rdx,4),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    8.33 :	  5bb0ca:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.25 :	  5bb0cf:       48 8d 04 01             lea    (%rcx,%rax,1),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:264
    0.51 :	  5bb0d3:       49 89 44 24 58          mov    %rax,0x58(%r12)
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:265
    1.26 :	  5bb0d8:       0f b7 44 91 0a          movzwl 0xa(%rcx,%rdx,4),%eax
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb0dd:       49 8b 14 24             mov    (%r12),%rdx
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
         :	                lp = PageGetItemId(dp, targoffset);
         :	                Assert(ItemIdIsNormal(lp));
         :
         :	                scan->rs_ctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                scan->rs_ctup.t_len = ItemIdGetLength(lp);
    0.00 :	  5bb0e1:       66 d1 e8                shr    %ax
    0.00 :	  5bb0e4:       0f b7 c0                movzwl %ax,%eax
    1.01 :	  5bb0e7:       41 89 44 24 48          mov    %eax,0x48(%r12)
         :	                scan->rs_ctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb0ec:       8b 42 40                mov    0x40(%rdx),%eax
    0.25 :	  5bb0ef:       41 89 44 24 54          mov    %eax,0x54(%r12)
         :	                ItemPointerSet(&scan->rs_ctup.t_self, tbmres->blockno, targoffset);
    0.00 :	  5bb0f4:       41 8b 45 00             mov    0x0(%r13),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:267
    0.51 :	  5bb0f8:       c1 e8 10                shr    $0x10,%eax
    0.51 :	  5bb0fb:       66 41 89 44 24 4c       mov    %ax,0x4c(%r12)
    0.00 :	  5bb101:       41 8b 45 00             mov    0x0(%r13),%eax
    0.00 :	  5bb105:       66 41 89 7c 24 50       mov    %di,0x50(%r12)
    1.01 :	  5bb10b:       66 41 89 44 24 4e       mov    %ax,0x4e(%r12)
         :
         :	                pgstat_count_heap_fetch(scan->rs_rd);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:269
    0.51 :	  5bb111:       48 8b 82 38 01 00 00    mov    0x138(%rdx),%rax
    0.51 :	  5bb118:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb11b:       74 0a                   je     5bb127 <BitmapHeapNext+0x1a7>
    0.51 :	  5bb11d:       48 83 40 20 01          addq   $0x1,0x20(%rax)
    3.54 :	  5bb122:       41 8b 74 24 64          mov    0x64(%r12),%esi
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
    0.00 :	  5bb127:       89 f2                   mov    %esi,%edx
    0.00 :	  5bb129:       48 8b bd 20 ff ff ff    mov    -0xe0(%rbp),%rdi
    0.25 :	  5bb130:       48 8b b5 38 ff ff ff    mov    -0xc8(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    1.26 :	  5bb137:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5bb139:       e8 42 93 ff ff          callq  5b4480 <ExecStoreTuple>
         :
         :	                /*
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:284
    1.52 :	  5bb13e:       41 80 7d 08 00          cmpb   $0x0,0x8(%r13)
    0.00 :	  5bb143:       0f 84 b1 02 00 00       je     5bb3fa <BitmapHeapNext+0x47a>
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:286
    1.26 :	  5bb149:       48 8b 95 28 ff ff ff    mov    -0xd8(%rbp),%rdx
    1.26 :	  5bb150:       48 8b 8d 38 ff ff ff    mov    -0xc8(%rbp),%rcx
         :	                        ResetExprContext(econtext);
    0.25 :	  5bb157:       48 8b 7a 28             mov    0x28(%rdx),%rdi
         :	                 * If we are using lossy info, we have to recheck the qual conditions
         :	                 * at every tuple.
         :	                 */
         :	                if (tbmres->recheck)
         :	                {
         :	                        econtext->ecxt_scantuple = slot;
    3.28 :	  5bb15b:       48 89 4a 08             mov    %rcx,0x8(%rdx)
         :	                        ResetExprContext(econtext);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:287
    1.52 :	  5bb15f:       e8 4c d8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                        if (!ExecQual(node->bitmapqualorig, econtext, false))
    0.00 :	  5bb164:       48 8b bb 90 00 00 00    mov    0x90(%rbx),%rdi
    0.25 :	  5bb16b:       48 8b b5 28 ff ff ff    mov    -0xd8(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:289
    1.01 :	  5bb172:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb174:       e8 97 1d ff ff          callq  5acf10 <ExecQual>
    0.76 :	  5bb179:       84 c0                   test   %al,%al
    0.00 :	  5bb17b:       0f 85 79 02 00 00       jne    5bb3fa <BitmapHeapNext+0x47a>
         :	                        {
         :	                                /* Fails recheck, so drop it and loop back for another */
         :	                                InstrCountFiltered2(node, 1);
    0.00 :	  5bb181:       48 8b 43 18             mov    0x18(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:292
    0.76 :	  5bb185:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb188:       74 18                   je     5bb1a2 <BitmapHeapNext+0x222>
    0.25 :	  5bb18a:       f2 0f 10 05 c6 3f 1f    movsd  0x1f3fc6(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5bb191:       00 
    2.02 :	  5bb192:       f2 0f 58 80 d0 00 00    addsd  0xd0(%rax),%xmm0
    0.00 :	  5bb199:       00 
    2.27 :	  5bb19a:       f2 0f 11 80 d0 00 00    movsd  %xmm0,0xd0(%rax)
    0.00 :	  5bb1a1:       00 
         :	                                ExecClearTuple(slot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:293
    1.01 :	  5bb1a2:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb1a9:       e8 62 8f ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	                /*
         :	                 * Set up the result slot to point to this tuple. Note that the slot
         :	                 * acquires a pin on the buffer.
         :	                 */
         :	                ExecStoreTuple(&scan->rs_ctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:275
    0.76 :	  5bb1ae:       4c 89 ea                mov    %r13,%rdx
         :	                ItemId          lp;
         :
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
    0.00 :	  5bb1b1:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5bb1b4:       0f 85 46 fe ff ff       jne    5bb000 <BitmapHeapNext+0x80>
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.25 :	  5bb1ba:       48 8b bd 30 ff ff ff    mov    -0xd0(%rbp),%rdi
    0.00 :	  5bb1c1:       e8 8a 81 02 00          callq  5e3350 <tbm_iterate>
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1c6:       48 85 c0                test   %rax,%rax
         :	                /*
         :	                 * Get next page of results if needed
         :	                 */
         :	                if (tbmres == NULL)
         :	                {
         :	                        node->tbmres = tbmres = tbm_iterate(tbmiterator);
    0.00 :	  5bb1c9:       49 89 c5                mov    %rax,%r13
    0.00 :	  5bb1cc:       48 89 83 a8 00 00 00    mov    %rax,0xa8(%rbx)
         :	                        if (tbmres == NULL)
    0.00 :	  5bb1d3:       0f 84 0e 02 00 00       je     5bb3e7 <BitmapHeapNext+0x467>
         :	                                /* no more entries in the bitmap */
         :	                                break;
         :	                        }
         :
         :	#ifdef USE_PREFETCH
         :	                        if (node->prefetch_pages > 0)
    0.00 :	  5bb1d9:       8b 83 c8 00 00 00       mov    0xc8(%rbx),%eax
    0.00 :	  5bb1df:       85 c0                   test   %eax,%eax
    0.00 :	  5bb1e1:       0f 8e ae 01 00 00       jle    5bb395 <BitmapHeapNext+0x415>
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
    0.00 :	  5bb1e7:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb1ea:       89 83 c8 00 00 00       mov    %eax,0xc8(%rbx)
    0.00 :	  5bb1f0:       41 8b 55 00             mov    0x0(%r13),%edx
    0.00 :	  5bb1f4:       89 95 7c ff ff ff       mov    %edx,-0x84(%rbp)
         :	                         * Ignore any claimed entries past what we think is the end of the
         :	                         * relation.  (This is probably not necessary given that we got at
         :	                         * least AccessShareLock on the table before performing any of the
         :	                         * indexscans, but let's be safe.)
         :	                         */
         :	                        if (tbmres->blockno >= scan->rs_nblocks)
    0.00 :	  5bb1fa:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:162
    0.51 :	  5bb200:       41 39 44 24 28          cmp    %eax,0x28(%r12)
    0.00 :	  5bb205:       77 2f                   ja     5bb236 <BitmapHeapNext+0x2b6>
    0.00 :	  5bb207:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5bb20e:       00 00 
         :	                /*
         :	                 * Out of range?  If so, nothing more to look at on this page
         :	                 */
         :	                if (scan->rs_cindex < 0 || scan->rs_cindex >= scan->rs_ntuples)
         :	                {
         :	                        node->tbmres = tbmres = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:224
    1.01 :	  5bb210:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb217:       00 00 00 00 
    0.76 :	  5bb21b:       45 31 ed                xor    %r13d,%r13d
         :	                        continue;
    0.00 :	  5bb21e:       eb 8e                   jmp    5bb1ae <BitmapHeapNext+0x22e>
         :
         :	                /*
         :	                 * Okay to fetch the tuple
         :	                 */
         :	                targoffset = scan->rs_vistuples[scan->rs_cindex];
         :	                dp = (Page) BufferGetPage(scan->rs_cbuf);
    0.00 :	  5bb220:       89 f0                   mov    %esi,%eax
    0.00 :	  5bb222:       48 8b 15 ef 1e 5c 00    mov    0x5c1eef(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb229:       f7 d0                   not    %eax
    0.00 :	  5bb22b:       48 98                   cltq   
    0.00 :	  5bb22d:       48 8b 0c c2             mov    (%rdx,%rax,8),%rcx
    0.00 :	  5bb231:       e9 88 fe ff ff          jmpq   5bb0be <BitmapHeapNext+0x13e>
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb236:       41 8b 7c 24 64          mov    0x64(%r12),%edi
    0.00 :	  5bb23b:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  5bb241:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb245:       e8 76 b4 0b 00          callq  6766c0 <ReleaseAndReadBuffer>
    0.25 :	  5bb24a:       89 85 78 ff ff ff       mov    %eax,-0x88(%rbp)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb250:       49 8b 54 24 08          mov    0x8(%r12),%rdx
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:339
    1.01 :	  5bb255:       89 c6                   mov    %eax,%esi
         :	        /*
         :	         * Acquire pin on the target heap page, trading in any pin we held before.
         :	         */
         :	        Assert(page < scan->rs_nblocks);
         :
         :	        scan->rs_cbuf = ReleaseAndReadBuffer(scan->rs_cbuf,
    0.00 :	  5bb257:       41 89 44 24 64          mov    %eax,0x64(%r12)
         :	                                                                                 scan->rs_rd,
         :	                                                                                 page);
         :	        buffer = scan->rs_cbuf;
         :	        snapshot = scan->rs_snapshot;
    0.00 :	  5bb25c:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        ntup = 0;
         :
         :	        /*
         :	         * Prune and repair fragmentation for the whole page, if possible.
         :	         */
         :	        heap_page_prune_opt(scan->rs_rd, buffer);
    0.00 :	  5bb263:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb267:       e8 e4 43 ee ff          callq  49f650 <heap_page_prune_opt>
         :	        /*
         :	         * We must hold share lock on the buffer content while examining tuple
         :	         * visibility.  Afterwards, however, the tuples we have found to be
         :	         * visible are guaranteed good as long as we hold the buffer pin.
         :	         */
         :	        LockBuffer(buffer, BUFFER_LOCK_SHARE);
    0.00 :	  5bb26c:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
    0.00 :	  5bb272:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5bb277:       e8 94 94 0b 00          callq  674710 <LockBuffer>
         :
         :	        /*
         :	         * We need two separate strategies for lossy and non-lossy cases.
         :	         */
         :	        if (tbmres->ntuples >= 0)
    0.00 :	  5bb27c:       41 83 7d 04 00          cmpl   $0x0,0x4(%r13)
    0.00 :	  5bb281:       0f 8c 97 01 00 00       jl     5bb41e <BitmapHeapNext+0x49e>
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb287:       0f 84 c1 01 00 00       je     5bb44e <BitmapHeapNext+0x4ce>
    0.00 :	  5bb28d:       8b 8d 7c ff ff ff       mov    -0x84(%rbp),%ecx
    0.00 :	  5bb293:       0f b7 85 7c ff ff ff    movzwl -0x84(%rbp),%eax
    0.00 :	  5bb29a:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5bb29d:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb2a4:       00 00 00 
    0.00 :	  5bb2a7:       c1 e9 10                shr    $0x10,%ecx
    0.00 :	  5bb2aa:       66 89 4d 80             mov    %cx,-0x80(%rbp)
    0.00 :	  5bb2ae:       66 89 45 9e             mov    %ax,-0x62(%rbp)
    0.00 :	  5bb2b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2b8:       49 63 c6                movslq %r14d,%rax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2bb:       0f b7 55 80             movzwl -0x80(%rbp),%edx
    0.00 :	  5bb2bf:       0f b7 4d 9e             movzwl -0x62(%rbp),%ecx
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
    0.00 :	  5bb2c3:       41 0f b7 44 45 0a       movzwl 0xa(%r13,%rax,2),%eax
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2c9:       c7 04 24 01 00 00 00    movl   $0x1,(%rsp)
    0.00 :	  5bb2d0:       4c 8d 45 a0             lea    -0x60(%rbp),%r8
    0.00 :	  5bb2d4:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  5bb2d8:       45 31 c9                xor    %r9d,%r9d
         :	                {
         :	                        OffsetNumber offnum = tbmres->offsets[curslot];
         :	                        ItemPointerData tid;
         :	                        HeapTupleData heapTuple;
         :
         :	                        ItemPointerSet(&tid, page, offnum);
    0.00 :	  5bb2db:       66 89 55 c0             mov    %dx,-0x40(%rbp)
    0.00 :	  5bb2df:       66 89 4d c2             mov    %cx,-0x3e(%rbp)
    0.00 :	  5bb2e3:       66 89 45 c4             mov    %ax,-0x3c(%rbp)
         :	                        if (heap_hot_search_buffer(&tid, scan->rs_rd, buffer, snapshot,
    0.00 :	  5bb2e7:       48 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%rcx
    0.00 :	  5bb2ee:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb2f4:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb2f8:       e8 23 1f ee ff          callq  49d220 <heap_hot_search_buffer>
    0.00 :	  5bb2fd:       84 c0                   test   %al,%al
    0.00 :	  5bb2ff:       74 18                   je     5bb319 <BitmapHeapNext+0x399>
         :	                                                                           &heapTuple, NULL, true))
         :	                                scan->rs_vistuples[ntup++] = ItemPointerGetOffsetNumber(&tid);
    0.00 :	  5bb301:       48 63 95 54 ff ff ff    movslq -0xac(%rbp),%rdx
    0.00 :	  5bb308:       0f b7 45 c4             movzwl -0x3c(%rbp),%eax
    0.00 :	  5bb30c:       66 41 89 44 54 7c       mov    %ax,0x7c(%r12,%rdx,2)
    0.00 :	  5bb312:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                 * tbmres; but we have to follow any HOT chain starting at each such
         :	                 * offset.
         :	                 */
         :	                int                     curslot;
         :
         :	                for (curslot = 0; curslot < tbmres->ntuples; curslot++)
    0.00 :	  5bb319:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5bb31d:       45 3b 75 04             cmp    0x4(%r13),%r14d
    0.00 :	  5bb321:       7c 95                   jl     5bb2b8 <BitmapHeapNext+0x338>
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
         :	                                                                                        buffer, snapshot);
         :	                }
         :	        }
         :
         :	        LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  5bb323:       8b bd 78 ff ff ff       mov    -0x88(%rbp),%edi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:406
    0.51 :	  5bb329:       31 f6                   xor    %esi,%esi
    0.00 :	  5bb32b:       e8 e0 93 0b 00          callq  674710 <LockBuffer>
         :
         :	        Assert(ntup <= MaxHeapTuplesPerPage);
         :	        scan->rs_ntuples = ntup;
    0.00 :	  5bb330:       8b 85 54 ff ff ff       mov    -0xac(%rbp),%eax
    0.00 :	  5bb336:       41 89 44 24 78          mov    %eax,0x78(%r12)
         :	                        /*
         :	                         * Fetch the current heap page and identify candidate tuples.
         :	                         */
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
    0.00 :	  5bb33b:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  5bb33f:       85 c0                   test   %eax,%eax
    0.00 :	  5bb341:       0f 88 16 01 00 00       js     5bb45d <BitmapHeapNext+0x4dd>
         :	                                node->exact_pages++;
    0.00 :	  5bb347:       48 83 83 b0 00 00 00    addq   $0x1,0xb0(%rbx)
    0.00 :	  5bb34e:       01 
         :	                                node->lossy_pages++;
         :
         :	                        /*
         :	                         * Set rs_cindex to first slot to examine
         :	                         */
         :	                        scan->rs_cindex = 0;
    0.00 :	  5bb34f:       41 c7 44 24 70 00 00    movl   $0x0,0x70(%r12)
    0.00 :	  5bb356:       00 00 
         :	                         * Increase prefetch target if it's not yet at the max.  Note that
         :	                         * we will increase it to zero after fetching the very first
         :	                         * page/tuple, then to one after the second tuple is fetched, then
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
    0.00 :	  5bb358:       8b 8b cc 00 00 00       mov    0xcc(%rbx),%ecx
    0.00 :	  5bb35e:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb360:       8b 15 fe 1c 5c 00       mov    0x5c1cfe(%rip),%edx        # b7d064 <target_prefetch_pages>
    0.00 :	  5bb366:       39 d1                   cmp    %edx,%ecx
    0.00 :	  5bb368:       0f 8d c2 fc ff ff       jge    5bb030 <BitmapHeapNext+0xb0>
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
    0.00 :	  5bb36e:       89 d0                   mov    %edx,%eax
    0.00 :	  5bb370:       c1 e8 1f                shr    $0x1f,%eax
    0.00 :	  5bb373:       01 d0                   add    %edx,%eax
    0.00 :	  5bb375:       d1 f8                   sar    %eax
    0.00 :	  5bb377:       39 c1                   cmp    %eax,%ecx
    0.00 :	  5bb379:       0f 8d 94 00 00 00       jge    5bb413 <BitmapHeapNext+0x493>
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
    0.00 :	  5bb37f:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb381:       0f 8e 5d 02 00 00       jle    5bb5e4 <BitmapHeapNext+0x664>
         :	                                node->prefetch_target *= 2;
    0.00 :	  5bb387:       8d 04 09                lea    (%rcx,%rcx,1),%eax
    0.00 :	  5bb38a:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb390:       e9 8e fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	                        if (node->prefetch_pages > 0)
         :	                        {
         :	                                /* The main iterator has closed the distance by one page */
         :	                                node->prefetch_pages--;
         :	                        }
         :	                        else if (prefetch_iterator)
    0.00 :	  5bb395:       4d 85 ff                test   %r15,%r15
    0.00 :	  5bb398:       0f 84 cc 00 00 00       je     5bb46a <BitmapHeapNext+0x4ea>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
    0.00 :	  5bb39e:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5bb3a1:       e8 aa 7f 02 00          callq  5e3350 <tbm_iterate>
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
    0.00 :	  5bb3a6:       48 85 c0                test   %rax,%rax
    0.00 :	  5bb3a9:       74 12                   je     5bb3bd <BitmapHeapNext+0x43d>
    0.00 :	  5bb3ab:       8b 00                   mov    (%rax),%eax
    0.00 :	  5bb3ad:       89 85 7c ff ff ff       mov    %eax,-0x84(%rbp)
    0.00 :	  5bb3b3:       41 3b 45 00             cmp    0x0(%r13),%eax
    0.00 :	  5bb3b7:       0f 84 3d fe ff ff       je     5bb1fa <BitmapHeapNext+0x27a>
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb3bd:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb3c2:       be 98 00 00 00          mov    $0x98,%esi
    0.00 :	  5bb3c7:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb3cc:       e8 4f 00 1c 00          callq  77b420 <elog_start>
    0.00 :	  5bb3d1:       be 88 b8 88 00          mov    $0x88b888,%esi
    0.00 :	  5bb3d6:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb3db:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb3dd:       e8 4e fe 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb3e2:       e8 e9 e0 ea ff          callq  4694d0 <abort@plt>
         :	        }
         :
         :	        /*
         :	         * if we get here it means we are at the end of the scan..
         :	         */
         :	        return ExecClearTuple(slot);
    0.00 :	  5bb3e7:       48 8b bd 38 ff ff ff    mov    -0xc8(%rbp),%rdi
    0.00 :	  5bb3ee:       e8 1d 8d ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5bb3f3:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:306
    1.26 :	  5bb3fa:       48 8b 85 38 ff ff ff    mov    -0xc8(%rbp),%rax
    1.26 :	  5bb401:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5bb408:       5b                      pop    %rbx
    1.52 :	  5bb409:       41 5c                   pop    %r12
    0.00 :	  5bb40b:       41 5d                   pop    %r13
    0.00 :	  5bb40d:       41 5e                   pop    %r14
    0.51 :	  5bb40f:       41 5f                   pop    %r15
    0.76 :	  5bb411:       c9                      leaveq 
    1.01 :	  5bb412:       c3                      retq   
         :	                         * it doubles as later pages are fetched.
         :	                         */
         :	                        if (node->prefetch_target >= target_prefetch_pages)
         :	                                 /* don't increase any further */ ;
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
    0.00 :	  5bb413:       89 93 cc 00 00 00       mov    %edx,0xcc(%rbx)
    0.00 :	  5bb419:       e9 05 fc ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb41e:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
    0.00 :	  5bb424:       85 d2                   test   %edx,%edx
    0.00 :	  5bb426:       0f 88 9e 01 00 00       js     5bb5ca <BitmapHeapNext+0x64a>
    0.00 :	  5bb42c:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb432:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5bb435:       4c 63 c8                movslq %eax,%r9
    0.00 :	  5bb438:       49 c1 e1 0d             shl    $0xd,%r9
    0.00 :	  5bb43c:       4c 03 0d b5 46 60 00    add    0x6046b5(%rip),%r9        # bbfaf8 <BufferBlocks>
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb443:       41 0f b7 41 0c          movzwl 0xc(%r9),%eax
    0.00 :	  5bb448:       66 83 f8 18             cmp    $0x18,%ax
    0.00 :	  5bb44c:       77 2b                   ja     5bb479 <BitmapHeapNext+0x4f9>
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb44e:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb455:       00 00 00 
    0.00 :	  5bb458:       e9 c6 fe ff ff          jmpq   5bb323 <BitmapHeapNext+0x3a3>
         :	                        bitgetpage(scan, tbmres);
         :
         :	                        if (tbmres->ntuples >= 0)
         :	                                node->exact_pages++;
         :	                        else
         :	                                node->lossy_pages++;
    0.00 :	  5bb45d:       48 83 83 b8 00 00 00    addq   $0x1,0xb8(%rbx)
    0.00 :	  5bb464:       01 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:176
    0.76 :	  5bb465:       e9 e5 fe ff ff          jmpq   5bb34f <BitmapHeapNext+0x3cf>
         :	                        {
         :	                                /* Do not let the prefetch iterator get behind the main one */
         :	                                TBMIterateResult *tbmpre = tbm_iterate(prefetch_iterator);
         :
         :	                                if (tbmpre == NULL || tbmpre->blockno != tbmres->blockno)
         :	                                        elog(ERROR, "prefetch and main iterators are out of sync");
    0.00 :	  5bb46a:       41 8b 4d 00             mov    0x0(%r13),%ecx
    0.00 :	  5bb46e:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
    0.00 :	  5bb474:       e9 81 fd ff ff          jmpq   5bb1fa <BitmapHeapNext+0x27a>
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb479:       0f b7 c0                movzwl %ax,%eax
    0.00 :	  5bb47c:       48 83 e8 18             sub    $0x18,%rax
    0.00 :	  5bb480:       48 c1 e8 02             shr    $0x2,%rax
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.25 :	  5bb484:       66 85 c0                test   %ax,%ax
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
    0.00 :	  5bb487:       66 89 85 40 ff ff ff    mov    %ax,-0xc0(%rbp)
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb48e:       74 be                   je     5bb44e <BitmapHeapNext+0x4ce>
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb490:       8b 85 7c ff ff ff       mov    -0x84(%rbp),%eax
    0.00 :	  5bb496:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  5bb49c:       c7 85 54 ff ff ff 00    movl   $0x0,-0xac(%rbp)
    0.00 :	  5bb4a3:       00 00 00 
    0.00 :	  5bb4a6:       c1 e8 10                shr    $0x10,%eax
    0.00 :	  5bb4a9:       66 89 85 60 ff ff ff    mov    %ax,-0xa0(%rbp)
    0.00 :	  5bb4b0:       eb 18                   jmp    5bb4ca <BitmapHeapNext+0x54a>
    0.00 :	  5bb4b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    1.77 :	  5bb4b8:       41 83 c6 01             add    $0x1,%r14d
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
         :	                OffsetNumber maxoff = PageGetMaxOffsetNumber(dp);
         :	                OffsetNumber offnum;
         :
         :	                for (offnum = FirstOffsetNumber; offnum <= maxoff; offnum = OffsetNumberNext(offnum))
    0.00 :	  5bb4bc:       66 44 3b b5 40 ff ff    cmp    -0xc0(%rbp),%r14w
    0.00 :	  5bb4c3:       ff 
    0.00 :	  5bb4c4:       0f 87 59 fe ff ff       ja     5bb323 <BitmapHeapNext+0x3a3>
         :	                {
         :	                        ItemId          lp;
         :	                        HeapTupleData loctup;
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
    0.25 :	  5bb4ca:       41 0f b7 c6             movzwl %r14w,%eax
         :	                        if (!ItemIdIsNormal(lp))
    0.00 :	  5bb4ce:       48 8d 50 03             lea    0x3(%rax),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:389
    0.76 :	  5bb4d2:       41 8b 44 91 08          mov    0x8(%r9,%rdx,4),%eax
    0.00 :	  5bb4d7:       25 00 80 01 00          and    $0x18000,%eax
    0.51 :	  5bb4dc:       3d 00 80 00 00          cmp    $0x8000,%eax
    0.00 :	  5bb4e1:       75 d5                   jne    5bb4b8 <BitmapHeapNext+0x538>
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.00 :	  5bb4e3:       41 0f b7 44 91 08       movzwl 0x8(%r9,%rdx,4),%eax
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.01 :	  5bb4e9:       0f b7 8d 7c ff ff ff    movzwl -0x84(%rbp),%ecx
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb4f0:       48 8d 7d a0             lea    -0x60(%rbp),%rdi
    0.00 :	  5bb4f4:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
         :	                        bool            valid;
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
    0.25 :	  5bb4fb:       25 ff 7f 00 00          and    $0x7fff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:391
    0.51 :	  5bb500:       49 8d 04 01             lea    (%r9,%rax,1),%rax
    0.00 :	  5bb504:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	                        loctup.t_len = ItemIdGetLength(lp);
    0.25 :	  5bb508:       41 0f b7 44 91 0a       movzwl 0xa(%r9,%rdx,4),%eax
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb50e:       0f b7 95 60 ff ff ff    movzwl -0xa0(%rbp),%edx
         :
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:392
    0.76 :	  5bb515:       66 d1 e8                shr    %ax
    0.00 :	  5bb518:       0f b7 c0                movzwl %ax,%eax
    0.25 :	  5bb51b:       89 45 a0                mov    %eax,-0x60(%rbp)
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb51e:       49 8b 04 24             mov    (%r12),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:393
    0.51 :	  5bb522:       8b 40 40                mov    0x40(%rax),%eax
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb525:       66 89 55 a4             mov    %dx,-0x5c(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb529:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
    0.00 :	  5bb530:       66 89 4d a6             mov    %cx,-0x5a(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:394
    1.01 :	  5bb534:       66 44 89 75 a8          mov    %r14w,-0x58(%rbp)
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.25 :	  5bb539:       8b 95 78 ff ff ff       mov    -0x88(%rbp),%edx
         :	                        lp = PageGetItemId(dp, offnum);
         :	                        if (!ItemIdIsNormal(lp))
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
    0.00 :	  5bb53f:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:395
    0.76 :	  5bb542:       ff 16                   callq  *(%rsi)
         :	                        if (valid)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:396
    0.76 :	  5bb544:       84 c0                   test   %al,%al
         :	                                continue;
         :	                        loctup.t_data = (HeapTupleHeader) PageGetItem((Page) dp, lp);
         :	                        loctup.t_len = ItemIdGetLength(lp);
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
    0.00 :	  5bb546:       41 89 c0                mov    %eax,%r8d
         :	                        if (valid)
    0.00 :	  5bb549:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    1.77 :	  5bb550:       75 31                   jne    5bb583 <BitmapHeapNext+0x603>
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
         :	                        }
         :	                        CheckForSerializableConflictOut(valid, scan->rs_rd, &loctup,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:401
    1.26 :	  5bb552:       41 0f be f8             movsbl %r8b,%edi
    0.00 :	  5bb556:       49 8b 34 24             mov    (%r12),%rsi
    0.00 :	  5bb55a:       4c 8b 85 58 ff ff ff    mov    -0xa8(%rbp),%r8
    0.00 :	  5bb561:       8b 8d 78 ff ff ff       mov    -0x88(%rbp),%ecx
    0.76 :	  5bb567:       48 8d 55 a0             lea    -0x60(%rbp),%rdx
    0.00 :	  5bb56b:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb572:       e8 e9 90 0d 00          callq  694660 <CheckForSerializableConflictOut>
    0.00 :	  5bb577:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb57e:       e9 35 ff ff ff          jmpq   5bb4b8 <BitmapHeapNext+0x538>
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb583:       48 63 85 54 ff ff ff    movslq -0xac(%rbp),%rax
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    3.79 :	  5bb58a:       48 8d 75 a0             lea    -0x60(%rbp),%rsi
         :	                        loctup.t_tableOid = scan->rs_rd->rd_id;
         :	                        ItemPointerSet(&loctup.t_self, page, offnum);
         :	                        valid = HeapTupleSatisfiesVisibility(&loctup, snapshot, buffer);
         :	                        if (valid)
         :	                        {
         :	                                scan->rs_vistuples[ntup++] = offnum;
    0.00 :	  5bb58e:       66 45 89 74 44 7c       mov    %r14w,0x7c(%r12,%rax,2)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:398
   12.88 :	  5bb594:       83 85 54 ff ff ff 01    addl   $0x1,-0xac(%rbp)
         :	                                PredicateLockTuple(scan->rs_rd, &loctup, snapshot);
    0.00 :	  5bb59b:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5bb59f:       48 8b 95 58 ff ff ff    mov    -0xa8(%rbp),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:399
    0.76 :	  5bb5a6:       44 88 85 18 ff ff ff    mov    %r8b,-0xe8(%rbp)
    0.00 :	  5bb5ad:       4c 89 8d 10 ff ff ff    mov    %r9,-0xf0(%rbp)
    0.00 :	  5bb5b4:       e8 e7 95 0d 00          callq  694ba0 <PredicateLockTuple>
    1.01 :	  5bb5b9:       4c 8b 8d 10 ff ff ff    mov    -0xf0(%rbp),%r9
    0.00 :	  5bb5c0:       44 0f b6 85 18 ff ff    movzbl -0xe8(%rbp),%r8d
    0.00 :	  5bb5c7:       ff 
    0.00 :	  5bb5c8:       eb 88                   jmp    5bb552 <BitmapHeapNext+0x5d2>
         :	        {
         :	                /*
         :	                 * Bitmap is lossy, so we must examine each item pointer on the page.
         :	                 * But we can ignore HOT chains, since we'll check each tuple anyway.
         :	                 */
         :	                Page            dp = (Page) BufferGetPage(buffer);
    0.00 :	  5bb5ca:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  5bb5d0:       48 8b 15 41 1b 5c 00    mov    0x5c1b41(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  5bb5d7:       f7 d0                   not    %eax
    0.00 :	  5bb5d9:       48 98                   cltq   
    0.00 :	  5bb5db:       4c 8b 0c c2             mov    (%rdx,%rax,8),%r9
    0.00 :	  5bb5df:       e9 5f fe ff ff          jmpq   5bb443 <BitmapHeapNext+0x4c3>
         :	                        else if (node->prefetch_target >= target_prefetch_pages / 2)
         :	                                node->prefetch_target = target_prefetch_pages;
         :	                        else if (node->prefetch_target > 0)
         :	                                node->prefetch_target *= 2;
         :	                        else
         :	                                node->prefetch_target++;
    0.00 :	  5bb5e4:       8d 41 01                lea    0x1(%rcx),%eax
    0.00 :	  5bb5e7:       89 83 cc 00 00 00       mov    %eax,0xcc(%rbx)
    0.00 :	  5bb5ed:       e9 31 fa ff ff          jmpq   5bb023 <BitmapHeapNext+0xa3>
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5f2:       48 8b 7f 30             mov    0x30(%rdi),%rdi
    0.00 :	  5bb5f6:       e8 d5 0d ff ff          callq  5ac3d0 <MultiExecProcNode>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb5fb:       48 85 c0                test   %rax,%rax
         :	         * a lot of prefetching in a scan that stops after a few tuples because of
         :	         * a LIMIT.
         :	         */
         :	        if (tbm == NULL)
         :	        {
         :	                tbm = (TIDBitmap *) MultiExecProcNode(outerPlanState(node));
    0.00 :	  5bb5fe:       49 89 c5                mov    %rax,%r13
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
    0.00 :	  5bb601:       74 08                   je     5bb60b <BitmapHeapNext+0x68b>
    0.00 :	  5bb603:       81 38 ba 03 00 00       cmpl   $0x3ba,(%rax)
    0.00 :	  5bb609:       74 2a                   je     5bb635 <BitmapHeapNext+0x6b5>
         :	                        elog(ERROR, "unrecognized result from subplan");
    0.00 :	  5bb60b:       ba b4 b8 88 00          mov    $0x88b8b4,%edx
    0.00 :	  5bb610:       be 6b 00 00 00          mov    $0x6b,%esi
    0.00 :	  5bb615:       bf 72 b8 88 00          mov    $0x88b872,%edi
    0.00 :	  5bb61a:       e8 01 fe 1b 00          callq  77b420 <elog_start>
    0.00 :	  5bb61f:       be c0 b7 88 00          mov    $0x88b7c0,%esi
    0.00 :	  5bb624:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5bb629:       31 c0                   xor    %eax,%eax
    0.00 :	  5bb62b:       e8 00 fc 1b 00          callq  77b230 <elog_finish>
    0.00 :	  5bb630:       e8 9b de ea ff          callq  4694d0 <abort@plt>
         :
         :	                node->tbm = tbm;
    0.00 :	  5bb635:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb63c:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5bb63f:       e8 dc 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                node->tbmres = tbmres = NULL;
    0.00 :	  5bb644:       48 c7 83 a8 00 00 00    movq   $0x0,0xa8(%rbx)
    0.00 :	  5bb64b:       00 00 00 00 
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb64f:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb656:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb658:       8b 0d 06 1a 5c 00       mov    0x5c1a06(%rip),%ecx        # b7d064 <target_prefetch_pages>
         :
         :	                if (!tbm || !IsA(tbm, TIDBitmap))
         :	                        elog(ERROR, "unrecognized result from subplan");
         :
         :	                node->tbm = tbm;
         :	                node->tbmiterator = tbmiterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb65e:       48 89 85 30 ff ff ff    mov    %rax,-0xd0(%rbp)
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
    0.00 :	  5bb665:       85 c9                   test   %ecx,%ecx
    0.00 :	  5bb667:       0f 8e 74 f9 ff ff       jle    5bafe1 <BitmapHeapNext+0x61>
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb66d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5bb670:       e8 ab 7e 02 00          callq  5e3520 <tbm_begin_iterate>
         :	                        node->prefetch_pages = 0;
    0.00 :	  5bb675:       c7 83 c8 00 00 00 00    movl   $0x0,0xc8(%rbx)
    0.00 :	  5bb67c:       00 00 00 
         :	                node->tbmres = tbmres = NULL;
         :
         :	#ifdef USE_PREFETCH
         :	                if (target_prefetch_pages > 0)
         :	                {
         :	                        node->prefetch_iterator = prefetch_iterator = tbm_begin_iterate(tbm);
    0.00 :	  5bb67f:       49 89 c7                mov    %rax,%r15
    0.00 :	  5bb682:       48 89 83 c0 00 00 00    mov    %rax,0xc0(%rbx)
         :	                        node->prefetch_pages = 0;
         :	                        node->prefetch_target = -1;
    0.00 :	  5bb689:       c7 83 cc 00 00 00 ff    movl   $0xffffffff,0xcc(%rbx)
    0.00 :	  5bb690:       ff ff ff 
    0.00 :	  5bb693:       31 d2                   xor    %edx,%edx
    0.00 :	  5bb695:       e9 47 f9 ff ff          jmpq   5bafe1 <BitmapHeapNext+0x61>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

    6.80 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    6.31 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    5.83 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    4.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    4.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    4.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    4.37 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    3.88 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    3.88 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.88 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    3.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    3.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
    3.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    2.43 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    2.43 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    2.43 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    2.43 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    1.46 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1960
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1954
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b1430 <ExecMakeFunctionResultNoSets>:
         :	static Datum
         :	ExecMakeFunctionResultNoSets(FuncExprState *fcache,
         :	                                                         ExprContext *econtext,
         :	                                                         bool *isNull,
         :	                                                         ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    6.80 :	  5b1430:       55                      push   %rbp
    0.00 :	  5b1431:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b1434:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1946
    4.37 :	  5b1436:       49 89 d7                mov    %rdx,%r15
    0.00 :	  5b1439:       41 56                   push   %r14
    0.97 :	  5b143b:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5b143e:       41 55                   push   %r13
    3.40 :	  5b1440:       49 89 fd                mov    %rdi,%r13
    0.97 :	  5b1443:       41 54                   push   %r12
    0.49 :	  5b1445:       53                      push   %rbx
    2.43 :	  5b1446:       48 89 cb                mov    %rcx,%rbx
    0.97 :	  5b1449:       48 83 ec 48             sub    $0x48,%rsp
         :	        FunctionCallInfo fcinfo;
         :	        PgStat_FunctionCallUsage fcusage;
         :	        int                     i;
         :
         :	        /* Guard against stack overflow due to overly complex expressions */
         :	        check_stack_depth();
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1954
    0.97 :	  5b144d:       e8 8e a5 0e 00          callq  69b9e0 <check_stack_depth>
         :
         :	        if (isDone)
    0.00 :	  5b1452:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b1455:       74 06                   je     5b145d <ExecMakeFunctionResultNoSets+0x2d>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b1457:       c7 03 00 00 00 00       movl   $0x0,(%rbx)
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    1.94 :	  5b145d:       49 8b 45 18             mov    0x18(%r13),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5b1461:       48 85 c0                test   %rax,%rax
    0.00 :	  5b1464:       0f 84 c2 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    0.00 :	  5b146a:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  5b146e:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b1471:       0f 84 b5 00 00 00       je     5b152c <ExecMakeFunctionResultNoSets+0xfc>
    3.88 :	  5b1477:       31 db                   xor    %ebx,%ebx
    0.00 :	  5b1479:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
    0.00 :	  5b1480:       49 8b 04 24             mov    (%r12),%rax
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    4.37 :	  5b1484:       49 8d 94 1d b0 03 00    lea    0x3b0(%r13,%rbx,1),%rdx
    0.00 :	  5b148b:       00 
    2.43 :	  5b148c:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b148e:       4c 89 f6                mov    %r14,%rsi
    2.43 :	  5b1491:       48 89 c7                mov    %rax,%rdi
    0.49 :	  5b1494:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5b1497:       49 89 84 dd 90 00 00    mov    %rax,0x90(%r13,%rbx,8)
    0.00 :	  5b149e:       00 
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    4.85 :	  5b149f:       4d 8b 64 24 08          mov    0x8(%r12),%r12
         :	        {
         :	                ExprState  *argstate = (ExprState *) lfirst(arg);
         :
         :	                fcinfo->arg[i] = ExecEvalExpr(argstate,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1966
    4.37 :	  5b14a4:       8d 53 01                lea    0x1(%rbx),%edx
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1962
    0.97 :	  5b14a7:       48 83 c3 01             add    $0x1,%rbx
    0.49 :	  5b14ab:       4d 85 e4                test   %r12,%r12
    0.00 :	  5b14ae:       75 d0                   jne    5b1480 <ExecMakeFunctionResultNoSets+0x50>
         :
         :	        /*
         :	         * If function is strict, and there are any NULL arguments, skip calling
         :	         * the function and return NULL.
         :	         */
         :	        if (fcache->func.fn_strict)
    0.00 :	  5b14b0:       41 80 7d 2e 00          cmpb   $0x0,0x2e(%r13)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1977
    2.91 :	  5b14b5:       74 34                   je     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
    0.00 :	  5b14b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b14be:       00 00 
         :	        {
         :	                while (--i >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1979
    2.91 :	  5b14c0:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5b14c3:       78 26                   js     5b14eb <ExecMakeFunctionResultNoSets+0xbb>
         :	                {
         :	                        if (fcinfo->argnull[i])
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    1.94 :	  5b14c5:       48 63 c2                movslq %edx,%rax
    0.00 :	  5b14c8:       41 80 bc 05 b0 03 00    cmpb   $0x0,0x3b0(%r13,%rax,1)
    0.00 :	  5b14cf:       00 00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1981
    6.31 :	  5b14d1:       74 ed                   je     5b14c0 <ExecMakeFunctionResultNoSets+0x90>
         :	                        {
         :	                                *isNull = true;
    0.00 :	  5b14d3:       41 c6 07 01             movb   $0x1,(%r15)
    0.00 :	  5b14d7:       31 db                   xor    %ebx,%ebx
         :	        *isNull = fcinfo->isnull;
         :
         :	        pgstat_end_function_usage(&fcusage, true);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    5.83 :	  5b14d9:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5b14dd:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b14e0:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    3.88 :	  5b14e1:       41 5c                   pop    %r12
    0.00 :	  5b14e3:       41 5d                   pop    %r13
    0.97 :	  5b14e5:       41 5e                   pop    %r14
    0.00 :	  5b14e7:       41 5f                   pop    %r15
    3.40 :	  5b14e9:       c9                      leaveq 
    2.43 :	  5b14ea:       c3                      retq   
         :
         :	        if (isDone)
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1960
    1.46 :	  5b14eb:       49 8d 5d 70             lea    0x70(%r13),%rbx
         :	                                return (Datum) 0;
         :	                        }
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
    0.00 :	  5b14ef:       4c 8d 65 90             lea    -0x70(%rbp),%r12
    0.00 :	  5b14f3:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b14f6:       4c 89 e6                mov    %r12,%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1989
    3.40 :	  5b14f9:       e8 82 12 09 00          callq  642780 <pgstat_init_function_usage>
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1992
    1.94 :	  5b14fe:       49 8b 45 70             mov    0x70(%r13),%rax
    3.40 :	  5b1502:       48 89 df                mov    %rbx,%rdi
         :	                }
         :	        }
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
    0.00 :	  5b1505:       41 c6 85 8c 00 00 00    movb   $0x0,0x8c(%r13)
    0.00 :	  5b150c:       00 
         :	        result = FunctionCallInvoke(fcinfo);
    0.97 :	  5b150d:       ff 10                   callq  *(%rax)
    2.91 :	  5b150f:       48 89 c3                mov    %rax,%rbx
         :	        *isNull = fcinfo->isnull;
    0.49 :	  5b1512:       41 0f b6 85 8c 00 00    movzbl 0x8c(%r13),%eax
    0.00 :	  5b1519:       00 
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.00 :	  5b151a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5b151f:       4c 89 e7                mov    %r12,%rdi
         :
         :	        pgstat_init_function_usage(fcinfo, &fcusage);
         :
         :	        fcinfo->isnull = false;
         :	        result = FunctionCallInvoke(fcinfo);
         :	        *isNull = fcinfo->isnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1993
    3.88 :	  5b1522:       41 88 07                mov    %al,(%r15)
         :
         :	        pgstat_end_function_usage(&fcusage, true);
    0.49 :	  5b1525:       e8 a6 10 09 00          callq  6425d0 <pgstat_end_function_usage>
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1998
    2.91 :	  5b152a:       eb ad                   jmp    5b14d9 <ExecMakeFunctionResultNoSets+0xa9>
         :	                *isDone = ExprSingleResult;
         :
         :	        /* inlined, simplified version of ExecEvalFuncArgs */
         :	        fcinfo = &fcache->fcinfo_data;
         :	        i = 0;
         :	        foreach(arg, fcache->args)
    0.00 :	  5b152c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b152e:       eb 80                   jmp    5b14b0 <ExecMakeFunctionResultNoSets+0x80>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   53.04 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
   24.31 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
    6.63 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    2.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
    2.21 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    1.66 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
    1.66 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    1.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:824
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:869
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:888
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:896
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:902
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:991
    0.55 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:978
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784050 <hash_search_with_hash_value>:
         :	hash_search_with_hash_value(HTAB *hashp,
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
    0.00 :	  784050:       55                      push   %rbp
    0.00 :	  784051:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  784054:       41 57                   push   %r15
    0.00 :	  784056:       41 89 d7                mov    %edx,%r15d
    0.00 :	  784059:       41 56                   push   %r14
    0.00 :	  78405b:       49 89 fe                mov    %rdi,%r14
    0.00 :	  78405e:       41 55                   push   %r13
    0.00 :	  784060:       41 54                   push   %r12
    0.00 :	  784062:       53                      push   %rbx
    0.00 :	  784063:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  784067:       89 8d 7c ff ff ff       mov    %ecx,-0x84(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:824
    1.10 :	  78406d:       48 89 75 80             mov    %rsi,-0x80(%rbp)
    0.00 :	  784071:       4c 89 85 70 ff ff ff    mov    %r8,-0x90(%rbp)
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784078:       48 8b 07                mov    (%rdi),%rax
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  78407b:       83 f9 03                cmp    $0x3,%ecx
    0.00 :	  78407e:       0f 94 45 8f             sete   -0x71(%rbp)
    0.00 :	  784082:       83 e9 01                sub    $0x1,%ecx
         :	                                                        const void *keyPtr,
         :	                                                        uint32 hashvalue,
         :	                                                        HASHACTION action,
         :	                                                        bool *foundPtr)
         :	{
         :	        HASHHDR    *hctl = hashp->hctl;
    0.00 :	  784085:       48 89 45 90             mov    %rax,-0x70(%rbp)
         :	         * NOTE: failure to expand table is not a fatal error, it just means we
         :	         * have to run at higher fill factor than we wanted.  However, if we're
         :	         * using the palloc allocator then it will throw error anyway on
         :	         * out-of-memory, so we must do this before modifying the table.
         :	         */
         :	        if (action == HASH_ENTER || action == HASH_ENTER_NULL)
    0.00 :	  784089:       0f 84 d9 00 00 00       je     784168 <hash_search_with_hash_value+0x118>
    0.00 :	  78408f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  784093:       0f 85 cf 00 00 00       jne    784168 <hash_search_with_hash_value+0x118>
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
         :	        *newlink = NULL;
    0.00 :	  784099:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78409c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  7840a0:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7840a4:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
    0.55 :	  7840a8:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  7840ac:       44 89 fb                mov    %r15d,%ebx
    0.00 :	  7840af:       23 5a 2c                and    0x2c(%rdx),%ebx
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7840b2:       39 f3                   cmp    %esi,%ebx
    0.00 :	  7840b4:       76 03                   jbe    7840b9 <hash_search_with_hash_value+0x69>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7840b6:       23 5a 30                and    0x30(%rdx),%ebx
         :	        bucket = calc_bucket(hctl, hashvalue);
         :
         :	        segment_num = bucket >> hashp->sshift;
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:869
    0.55 :	  7840b9:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840bb:       49 8b 56 08             mov    0x8(%r14),%rdx
    0.00 :	  7840bf:       d3 e8                   shr    %cl,%eax
    0.00 :	  7840c1:       89 c0                   mov    %eax,%eax
    0.00 :	  7840c3:       4c 8b 24 c2             mov    (%rdx,%rax,8),%r12
         :
         :	        if (segp == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:871
    1.66 :	  7840c7:       4d 85 e4                test   %r12,%r12
    0.00 :	  7840ca:       0f 84 b7 02 00 00       je     784387 <hash_search_with_hash_value+0x337>
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d0:       89 d8                   mov    %ebx,%eax
    0.00 :	  7840d2:       44 21 e8                and    %r13d,%eax
         :	        currBucket = *prevBucketPtr;
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
    0.00 :	  7840d5:       4d 8b 6e 18             mov    0x18(%r14),%r13
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
    0.00 :	  7840d9:       4d 8d 24 c4             lea    (%r12,%rax,8),%r12
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
    0.00 :	  7840dd:       49 8b 46 48             mov    0x48(%r14),%rax
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
         :
         :	        prevBucketPtr = &segp[segment_ndx];
         :	        currBucket = *prevBucketPtr;
    0.00 :	  7840e1:       49 8b 1c 24             mov    (%r12),%rbx
         :
         :	        /*
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:881
   24.31 :	  7840e5:       48 89 45 98             mov    %rax,-0x68(%rbp)
         :
         :	        while (currBucket != NULL)
    0.00 :	  7840e9:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840ec:       75 0d                   jne    7840fb <hash_search_with_hash_value+0xab>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    0.55 :	  7840ee:       eb 28                   jmp    784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
         :	                        match(ELEMENTKEY(currBucket), keyPtr, keysize) == 0)
         :	                        break;
         :	                prevBucketPtr = &(currBucket->link);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:888
    0.55 :	  7840f0:       49 89 dc                mov    %rbx,%r12
         :	                currBucket = *prevBucketPtr;
    0.00 :	  7840f3:       48 8b 1b                mov    (%rbx),%rbx
         :	         * Follow collision chain looking for matching key
         :	         */
         :	        match = hashp->match;           /* save one fetch in inner loop */
         :	        keysize = hashp->keysize;       /* ditto */
         :
         :	        while (currBucket != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:883
    1.66 :	  7840f6:       48 85 db                test   %rbx,%rbx
    0.00 :	  7840f9:       74 1d                   je     784118 <hash_search_with_hash_value+0xc8>
         :	        {
         :	                if (currBucket->hashvalue == hashvalue &&
    0.00 :	  7840fb:       44 39 7b 08             cmp    %r15d,0x8(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
   53.04 :	  7840ff:       90                      nop
    0.00 :	  784100:       75 ee                   jne    7840f0 <hash_search_with_hash_value+0xa0>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:885
    0.55 :	  784102:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  784106:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  78410a:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78410e:       41 ff d5                callq  *%r13
    0.55 :	  784111:       85 c0                   test   %eax,%eax
    0.00 :	  784113:       75 db                   jne    7840f0 <hash_search_with_hash_value+0xa0>
    0.00 :	  784115:       0f 1f 00                nopl   (%rax)
         :	                hash_collisions++;
         :	                hctl->collisions++;
         :	#endif
         :	        }
         :
         :	        if (foundPtr)
    0.00 :	  784118:       48 83 bd 70 ff ff ff    cmpq   $0x0,-0x90(%rbp)
    0.00 :	  78411f:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:896
    0.55 :	  784120:       74 0d                   je     78412f <hash_search_with_hash_value+0xdf>
         :	                *foundPtr = (bool) (currBucket != NULL);
    0.00 :	  784122:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  784129:       48 85 db                test   %rbx,%rbx
    0.00 :	  78412c:       0f 95 02                setne  (%rdx)
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:902
    0.55 :	  78412f:       83 bd 7c ff ff ff 01    cmpl   $0x1,-0x84(%rbp)
    0.00 :	  784136:       0f 84 5c 01 00 00       je     784298 <hash_search_with_hash_value+0x248>
    0.00 :	  78413c:       0f 83 ee 00 00 00       jae    784230 <hash_search_with_hash_value+0x1e0>
         :	        {
         :	                case HASH_FIND:
         :	                        if (currBucket != NULL)
    0.00 :	  784142:       48 85 db                test   %rbx,%rbx
    0.00 :	  784145:       0f 84 35 02 00 00       je     784380 <hash_search_with_hash_value+0x330>
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
    0.00 :	  78414b:       48 83 c3 10             add    $0x10,%rbx
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  78414f:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  784153:       48 89 d8                mov    %rbx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:994
    0.55 :	  784156:       5b                      pop    %rbx
    0.00 :	  784157:       41 5c                   pop    %r12
    0.00 :	  784159:       41 5d                   pop    %r13
    0.00 :	  78415b:       41 5e                   pop    %r14
    0.00 :	  78415d:       41 5f                   pop    %r15
    0.00 :	  78415f:       c9                      leaveq 
    0.00 :	  784160:       c3                      retq   
    0.00 :	  784161:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784168:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78416c:       48 83 7a 48 00          cmpq   $0x0,0x48(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    2.21 :	  784171:       0f 85 09 01 00 00       jne    784280 <hash_search_with_hash_value+0x230>
    0.00 :	  784177:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  78417c:       0f 85 e6 01 00 00       jne    784368 <hash_search_with_hash_value+0x318>
    0.00 :	  784182:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784186:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.55 :	  78418a:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  78418d:       8d 56 01                lea    0x1(%rsi),%edx
    0.00 :	  784190:       41 89 f0                mov    %esi,%r8d
    0.00 :	  784193:       89 55 d4                mov    %edx,-0x2c(%rbp)
    0.00 :	  784196:       41 89 d4                mov    %edx,%r12d
    0.00 :	  784199:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	  78419d:       48 89 d0                mov    %rdx,%rax
    0.00 :	  7841a0:       48 c1 fa 3f             sar    $0x3f,%rdx
    0.00 :	  7841a4:       49 f7 fc                idiv   %r12
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:855
    6.63 :	  7841a7:       48 3b 43 50             cmp    0x50(%rbx),%rax
    0.00 :	  7841ab:       0f 8c eb fe ff ff       jl     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841b1:       8b 3d 09 5a 43 00       mov    0x435a09(%rip),%edi        # bb9bc0 <num_seq_scans>
    0.00 :	  7841b7:       85 ff                   test   %edi,%edi
    0.00 :	  7841b9:       7e 2c                   jle    7841e7 <hash_search_with_hash_value+0x197>
         :	        {
         :	                if (seq_scan_tables[i] == hashp)
    0.00 :	  7841bb:       31 d2                   xor    %edx,%edx
    0.00 :	  7841bd:       4c 3b 35 1c 5a 43 00    cmp    0x435a1c(%rip),%r14        # bb9be0 <seq_scan_tables>
    0.00 :	  7841c4:       b9 e8 9b bb 00          mov    $0xbb9be8,%ecx
    0.00 :	  7841c9:       75 15                   jne    7841e0 <hash_search_with_hash_value+0x190>
    0.00 :	  7841cb:       e9 cc fe ff ff          jmpq   78409c <hash_search_with_hash_value+0x4c>
    0.00 :	  7841d0:       48 8b 01                mov    (%rcx),%rax
    0.00 :	  7841d3:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  7841d7:       49 39 c6                cmp    %rax,%r14
    0.00 :	  7841da:       0f 84 bc fe ff ff       je     78409c <hash_search_with_hash_value+0x4c>
         :	static bool
         :	has_seq_scans(HTAB *hashp)
         :	{
         :	        int                     i;
         :
         :	        for (i = 0; i < num_seq_scans; i++)
    0.00 :	  7841e0:       83 c2 01                add    $0x1,%edx
    0.00 :	  7841e3:       39 fa                   cmp    %edi,%edx
    0.00 :	  7841e5:       7c e9                   jl     7841d0 <hash_search_with_hash_value+0x180>
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841e7:       49 8b 46 50             mov    0x50(%r14),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841eb:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  7841ef:       4c 89 e3                mov    %r12,%rbx
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
    0.00 :	  7841f2:       4c 8d 68 ff             lea    -0x1(%rax),%r13
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  7841f6:       48 8b 45 90             mov    -0x70(%rbp),%rax
         :	#ifdef HASH_STATISTICS
         :	        hash_expansions++;
         :	#endif
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
    0.00 :	  7841fa:       48 d3 fb                sar    %cl,%rbx
    0.00 :	  7841fd:       48 89 5d c0             mov    %rbx,-0x40(%rbp)
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784201:       48 3b 58 20             cmp    0x20(%rax),%rbx
    0.00 :	  784205:       0f 8c 05 02 00 00       jl     784410 <hash_search_with_hash_value+0x3c0>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
    0.00 :	  78420b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  78420f:       48 8b 58 18             mov    0x18(%rax),%rbx
    0.00 :	  784213:       48 39 5d c0             cmp    %rbx,-0x40(%rbp)
    0.00 :	  784217:       0f 8c 1d 03 00 00       jl     78453a <hash_search_with_hash_value+0x4ea>
         :	        HASHSEGMENT *old_p;
         :	        long            new_dsize;
         :	        long            old_dirsize;
         :	        long            new_dirsize;
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
    0.00 :	  78421d:       48 83 78 58 ff          cmpq   $0xffffffffffffffff,0x58(%rax)
    0.00 :	  784222:       0f 84 4a 03 00 00       je     784572 <hash_search_with_hash_value+0x522>
         :	                hashp->dir = p;
         :	                hashp->hctl->dsize = new_dsize;
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784228:       44 89 c6                mov    %r8d,%esi
    0.00 :	  78422b:       e9 78 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                *foundPtr = (bool) (currBucket != NULL);
         :
         :	        /*
         :	         * OK, now what?
         :	         */
         :	        switch (action)
    0.00 :	  784230:       83 bd 7c ff ff ff 02    cmpl   $0x2,-0x84(%rbp)
    0.00 :	  784237:       0f 84 d6 00 00 00       je     784313 <hash_search_with_hash_value+0x2c3>
    0.00 :	  78423d:       83 bd 7c ff ff ff 03    cmpl   $0x3,-0x84(%rbp)
    0.00 :	  784244:       74 52                   je     784298 <hash_search_with_hash_value+0x248>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
    0.00 :	  784246:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  78424b:       be df 03 00 00          mov    $0x3df,%esi
    0.00 :	  784250:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  784255:       e8 c6 71 ff ff          callq  77b420 <elog_start>
    0.00 :	  78425a:       8b 95 7c ff ff ff       mov    -0x84(%rbp),%edx
    0.00 :	  784260:       be f0 5a 8d 00          mov    $0x8d5af0,%esi
    0.00 :	  784265:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78426a:       31 c0                   xor    %eax,%eax
    0.00 :	  78426c:       e8 bf 6f ff ff          callq  77b230 <elog_finish>
    0.00 :	  784271:       e8 5a 52 ce ff          callq  4694d0 <abort@plt>
    0.00 :	  784276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78427d:       00 00 00 
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784280:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784284:       8b 72 28                mov    0x28(%rdx),%esi
    0.00 :	  784287:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  78428b:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78428f:       e9 14 fe ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
    0.00 :	  784294:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        Assert(hashp->alloc != DynaHashAlloc);
         :	                        /* FALL THRU */
         :
         :	                case HASH_ENTER:
         :	                        /* Return existing element if found, else create one */
         :	                        if (currBucket != NULL)
    0.00 :	  784298:       48 85 db                test   %rbx,%rbx
    0.00 :	  78429b:       0f 85 aa fe ff ff       jne    78414b <hash_search_with_hash_value+0xfb>
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
    0.00 :	  7842a1:       41 80 7e 42 00          cmpb   $0x0,0x42(%r14)
    0.00 :	  7842a6:       0f 85 a3 03 00 00       jne    78464f <hash_search_with_hash_value+0x5ff>
         :	 */
         :	static HASHBUCKET
         :	get_hash_entry(HTAB *hashp)
         :	{
         :	        /* use volatile pointer to prevent code rearrangement */
         :	        volatile HASHHDR *hctlv = hashp->hctl;
    0.00 :	  7842ac:       49 8b 1e                mov    (%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  7842af:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  7842b5:       eb 35                   jmp    7842ec <hash_search_with_hash_value+0x29c>
    0.00 :	  7842b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7842be:       00 00 
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
         :	                        SpinLockAcquire(&hctlv->mutex);
         :
         :	                /* try to get an entry from the freelist */
         :	                newElement = hctlv->freeList;
    0.00 :	  7842c0:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                if (newElement != NULL)
    0.00 :	  7842c4:       48 85 d2                test   %rdx,%rdx
    0.00 :	  7842c7:       0f 85 04 02 00 00       jne    7844d1 <hash_search_with_hash_value+0x481>
         :	                        break;
         :
         :	                /* no free elements.  allocate another chunk of buckets */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842cd:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842d1:       48 85 c0                test   %rax,%rax
    0.00 :	  7842d4:       74 03                   je     7842d9 <hash_search_with_hash_value+0x289>
         :	                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  7842d6:       c6 03 00                movb   $0x0,(%rbx)
         :
         :	                if (!element_alloc(hashp, hctlv->nelem_alloc))
    0.00 :	  7842d9:       8b 73 6c                mov    0x6c(%rbx),%esi
    0.00 :	  7842dc:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  7842df:       e8 dc fb ff ff          callq  783ec0 <element_alloc>
    0.00 :	  7842e4:       84 c0                   test   %al,%al
    0.00 :	  7842e6:       0f 84 be 00 00 00       je     7843aa <hash_search_with_hash_value+0x35a>
         :	        HASHBUCKET      newElement;
         :
         :	        for (;;)
         :	        {
         :	                /* if partitioned, must lock to touch nentries and freeList */
         :	                if (IS_PARTITIONED(hctlv))
    0.00 :	  7842ec:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7842f0:       48 85 c0                test   %rax,%rax
    0.00 :	  7842f3:       74 cb                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842f5:       44 89 e8                mov    %r13d,%eax
    0.00 :	  7842f8:       f0 86 03                lock xchg %al,(%rbx)
         :	                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  7842fb:       84 c0                   test   %al,%al
    0.00 :	  7842fd:       74 c1                   je     7842c0 <hash_search_with_hash_value+0x270>
    0.00 :	  7842ff:       ba 87 04 00 00          mov    $0x487,%edx
    0.00 :	  784304:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  784309:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78430c:       e8 2f bd f0 ff          callq  690040 <s_lock>
    0.00 :	  784311:       eb ad                   jmp    7842c0 <hash_search_with_hash_value+0x270>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :	                        return NULL;
         :
         :	                case HASH_REMOVE:
         :	                        if (currBucket != NULL)
    0.00 :	  784313:       48 85 db                test   %rbx,%rbx
    0.00 :	  784316:       74 68                   je     784380 <hash_search_with_hash_value+0x330>
         :	                        {
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784318:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  78431c:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784320:       48 85 c0                test   %rax,%rax
    0.00 :	  784323:       74 0c                   je     784331 <hash_search_with_hash_value+0x2e1>
    0.00 :	  784325:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  78432a:       f0 86 02                lock xchg %al,(%rdx)
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  78432d:       84 c0                   test   %al,%al
    0.00 :	  78432f:       75 64                   jne    784395 <hash_search_with_hash_value+0x345>
         :
         :	                                Assert(hctlv->nentries > 0);
         :	                                hctlv->nentries--;
    0.00 :	  784331:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784335:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  784339:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78433d:       48 89 42 08             mov    %rax,0x8(%rdx)
         :
         :	                                /* remove record from hash bucket's chain. */
         :	                                *prevBucketPtr = currBucket->link;
    0.00 :	  784341:       48 8b 03                mov    (%rbx),%rax
    0.00 :	  784344:       49 89 04 24             mov    %rax,(%r12)
         :
         :	                                /* add the record to the freelist for this table.  */
         :	                                currBucket->link = hctlv->freeList;
    0.00 :	  784348:       48 8b 42 10             mov    0x10(%rdx),%rax
    0.00 :	  78434c:       48 89 03                mov    %rax,(%rbx)
         :	                                hctlv->freeList = currBucket;
    0.00 :	  78434f:       48 89 5a 10             mov    %rbx,0x10(%rdx)
         :
         :	                                if (IS_PARTITIONED(hctlv))
    0.00 :	  784353:       48 8b 42 48             mov    0x48(%rdx),%rax
    0.00 :	  784357:       48 85 c0                test   %rax,%rax
    0.00 :	  78435a:       0f 84 eb fd ff ff       je     78414b <hash_search_with_hash_value+0xfb>
         :	                                        SpinLockRelease(&hctlv->mutex);
    0.00 :	  784360:       c6 02 00                movb   $0x0,(%rdx)
    0.00 :	  784363:       e9 e3 fd ff ff          jmpq   78414b <hash_search_with_hash_value+0xfb>
         :	                /*
         :	                 * Can't split if running in partitioned mode, nor if frozen, nor if
         :	                 * table is the subject of any active hash_seq_search scans.  Strange
         :	                 * order of these tests is to try to check cheaper conditions first.
         :	                 */
         :	                if (!IS_PARTITIONED(hctl) && !hashp->frozen &&
    0.00 :	  784368:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78436c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784370:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784374:       8b 73 28                mov    0x28(%rbx),%esi
    0.00 :	  784377:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  78437b:       e9 28 fd ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>
         :	                         */
         :
         :	                        return (void *) ELEMENTKEY(currBucket);
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:991
    0.55 :	  784380:       31 db                   xor    %ebx,%ebx
    0.00 :	  784382:       e9 c8 fd ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        segment_ndx = MOD(bucket, hashp->ssize);
         :
         :	        segp = hashp->dir[segment_num];
         :
         :	        if (segp == NULL)
         :	                hash_corrupted(hashp);
    0.00 :	  784387:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  78438a:       e8 01 f8 ff ff          callq  783b90 <hash_corrupted>
    0.00 :	  78438f:       90                      nop
    0.00 :	  784390:       e9 3b fd ff ff          jmpq   7840d0 <hash_search_with_hash_value+0x80>
         :	                                /* use volatile pointer to prevent code rearrangement */
         :	                                volatile HASHHDR *hctlv = hctl;
         :
         :	                                /* if partitioned, must lock to touch nentries and freeList */
         :	                                if (IS_PARTITIONED(hctlv))
         :	                                        SpinLockAcquire(&hctlv->mutex);
    0.00 :	  784395:       48 8b 7d 90             mov    -0x70(%rbp),%rdi
    0.00 :	  784399:       ba 95 03 00 00          mov    $0x395,%edx
    0.00 :	  78439e:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843a3:       e8 98 bc f0 ff          callq  690040 <s_lock>
    0.00 :	  7843a8:       eb 87                   jmp    784331 <hash_search_with_hash_value+0x2e1>
         :
         :	                        currBucket = get_hash_entry(hashp);
         :	                        if (currBucket == NULL)
         :	                        {
         :	                                /* out of memory */
         :	                                if (action == HASH_ENTER_NULL)
    0.00 :	  7843aa:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  7843ae:       75 d0                   jne    784380 <hash_search_with_hash_value+0x330>
         :	                                        return NULL;
         :	                                /* report a generic message */
         :	                                if (hashp->isshared)
    0.00 :	  7843b0:       41 80 7e 40 00          cmpb   $0x0,0x40(%r14)
    0.00 :	  7843b5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7843b8:       0f 84 4a 02 00 00       je     784608 <hash_search_with_hash_value+0x5b8>
         :	                                        ereport(ERROR,
    0.00 :	  7843be:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  7843c1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  7843c6:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  7843cb:       ba c6 03 00 00          mov    $0x3c6,%edx
    0.00 :	  7843d0:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  7843d5:       e8 e6 66 ff ff          callq  77aac0 <errstart>
    0.00 :	  7843da:       84 c0                   test   %al,%al
    0.00 :	  7843dc:       bf 47 ba 8a 00          mov    $0x8aba47,%edi
    0.00 :	  7843e1:       0f 84 8a fe ff ff       je     784271 <hash_search_with_hash_value+0x221>
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  7843e7:       31 c0                   xor    %eax,%eax
    0.00 :	  7843e9:       e8 b2 84 ff ff          callq  77c8a0 <errmsg>
    0.00 :	  7843ee:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  7843f3:       89 c3                   mov    %eax,%ebx
    0.00 :	  7843f5:       e8 56 89 ff ff          callq  77cd50 <errcode>
    0.00 :	  7843fa:       89 de                   mov    %ebx,%esi
    0.00 :	  7843fc:       89 c7                   mov    %eax,%edi
    0.00 :	  7843fe:       31 c0                   xor    %eax,%eax
    0.00 :	  784400:       e8 db 61 ff ff          callq  77a5e0 <errfinish>
    0.00 :	  784405:       e9 67 fe ff ff          jmpq   784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78440a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        new_bucket = hctl->max_bucket + 1;
         :	        new_segnum = new_bucket >> hashp->sshift;
         :	        new_segndx = MOD(new_bucket, hashp->ssize);
         :
         :	        if (new_segnum >= hctl->nsegs)
    0.00 :	  784410:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  784413:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784417:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  78441b:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  78441f:       4d 89 e1                mov    %r12,%r9
         :	                        return false;
         :	                hctl->nsegs++;
         :	        }
         :
         :	        /* OK, we created a new bucket */
         :	        hctl->max_bucket++;
    0.00 :	  784422:       89 43 28                mov    %eax,0x28(%rbx)
         :	         * *Before* changing masks, find old bucket corresponding to same hash
         :	         * values; values in that bucket may need to be relocated to new bucket.
         :	         * Note that new_bucket is certainly larger than low_mask at this point,
         :	         * so we can skip the first step of the regular hash mask calc.
         :	         */
         :	        old_bucket = (new_bucket & hctl->low_mask);
    0.00 :	  784425:       8b 43 30                mov    0x30(%rbx),%eax
    0.00 :	  784428:       49 21 c1                and    %rax,%r9
         :
         :	        /*
         :	         * If we crossed a power of 2, readjust masks.
         :	         */
         :	        if ((uint32) new_bucket > hctl->high_mask)
    0.00 :	  78442b:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  78442e:       39 45 d4                cmp    %eax,-0x2c(%rbp)
    0.00 :	  784431:       76 0c                   jbe    78443f <hash_search_with_hash_value+0x3ef>
         :	        {
         :	                hctl->low_mask = hctl->high_mask;
    0.00 :	  784433:       89 43 30                mov    %eax,0x30(%rbx)
         :	                hctl->high_mask = (uint32) new_bucket | hctl->low_mask;
    0.00 :	  784436:       09 45 d4                or     %eax,-0x2c(%rbp)
    0.00 :	  784439:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  78443c:       89 43 2c                mov    %eax,0x2c(%rbx)
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  78443f:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  784443:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784447:       4c 89 ca                mov    %r9,%rdx
         :	         * that might not be true!
         :	         */
         :	        old_segnum = old_bucket >> hashp->sshift;
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
    0.00 :	  78444a:       49 8b 76 08             mov    0x8(%r14),%rsi
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78444e:       4d 21 ec                and    %r13,%r12
    0.00 :	  784451:       4a 8d 3c e5 00 00 00    lea    0x0(,%r12,8),%rdi
    0.00 :	  784458:       00 
         :	        old_segndx = MOD(old_bucket, hashp->ssize);
         :
         :	        old_seg = hashp->dir[old_segnum];
         :	        new_seg = hashp->dir[new_segnum];
         :
         :	        oldlink = &old_seg[old_segndx];
    0.00 :	  784459:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  78445d:       48 d3 fa                sar    %cl,%rdx
    0.00 :	  784460:       4c 21 c8                and    %r9,%rax
    0.00 :	  784463:       4c 8d 04 c5 00 00 00    lea    0x0(,%rax,8),%r8
    0.00 :	  78446a:       00 
    0.00 :	  78446b:       4c 03 04 d6             add    (%rsi,%rdx,8),%r8
         :	        newlink = &new_seg[new_segndx];
    0.00 :	  78446f:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  784473:       48 03 3c 16             add    (%rsi,%rdx,1),%rdi
         :
         :	        for (currElement = *oldlink;
    0.00 :	  784477:       49 8b 10                mov    (%r8),%rdx
         :	                 currElement != NULL;
    0.00 :	  78447a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  78447d:       75 17                   jne    784496 <hash_search_with_hash_value+0x446>
    0.00 :	  78447f:       eb 39                   jmp    7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784481:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        *oldlink = currElement;
         :	                        oldlink = &currElement->link;
         :	                }
         :	                else
         :	                {
         :	                        *newlink = currElement;
    0.00 :	  784488:       48 89 17                mov    %rdx,(%rdi)
         :	                        newlink = &currElement->link;
    0.00 :	  78448b:       48 89 d7                mov    %rdx,%rdi
         :
         :	        oldlink = &old_seg[old_segndx];
         :	        newlink = &new_seg[new_segndx];
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
    0.00 :	  78448e:       48 85 c9                test   %rcx,%rcx
    0.00 :	  784491:       74 27                   je     7844ba <hash_search_with_hash_value+0x46a>
    0.00 :	  784493:       48 89 ca                mov    %rcx,%rdx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
    0.00 :	  784496:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
         :
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
    0.00 :	  78449a:       48 8b 0a                mov    (%rdx),%rcx
         :	static inline uint32
         :	calc_bucket(HASHHDR *hctl, uint32 hash_val)
         :	{
         :	        uint32          bucket;
         :
         :	        bucket = hash_val & hctl->high_mask;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:771
    2.76 :	  78449d:       8b 43 2c                mov    0x2c(%rbx),%eax
    0.00 :	  7844a0:       23 42 08                and    0x8(%rdx),%eax
         :	        if (bucket > hctl->max_bucket)
    0.00 :	  7844a3:       3b 43 28                cmp    0x28(%rbx),%eax
    0.00 :	  7844a6:       76 03                   jbe    7844ab <hash_search_with_hash_value+0x45b>
         :	                bucket = bucket & hctl->low_mask;
    0.00 :	  7844a8:       23 43 30                and    0x30(%rbx),%eax
         :	        for (currElement = *oldlink;
         :	                 currElement != NULL;
         :	                 currElement = nextElement)
         :	        {
         :	                nextElement = currElement->link;
         :	                if ((long) calc_bucket(hctl, currElement->hashvalue) == old_bucket)
    0.00 :	  7844ab:       89 c0                   mov    %eax,%eax
    0.00 :	  7844ad:       49 39 c1                cmp    %rax,%r9
    0.00 :	  7844b0:       75 d6                   jne    784488 <hash_search_with_hash_value+0x438>
         :	                {
         :	                        *oldlink = currElement;
    0.00 :	  7844b2:       49 89 10                mov    %rdx,(%r8)
         :	                        oldlink = &currElement->link;
    0.00 :	  7844b5:       49 89 d0                mov    %rdx,%r8
    0.00 :	  7844b8:       eb d4                   jmp    78448e <hash_search_with_hash_value+0x43e>
         :	                        *newlink = currElement;
         :	                        newlink = &currElement->link;
         :	                }
         :	        }
         :	        /* don't forget to terminate the rebuilt hash chains... */
         :	        *oldlink = NULL;
    0.00 :	  7844ba:       49 c7 00 00 00 00 00    movq   $0x0,(%r8)
         :	        *newlink = NULL;
    0.00 :	  7844c1:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7844c8:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  7844cc:       e9 c8 fb ff ff          jmpq   784099 <hash_search_with_hash_value+0x49>
         :	                        return NULL;
         :	                }
         :	        }
         :
         :	        /* remove entry from freelist, bump nentries */
         :	        hctlv->freeList = newElement->link;
    0.00 :	  7844d1:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  7844d4:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        hctlv->nentries++;
    0.00 :	  7844d8:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7844dc:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  7844e0:       48 89 43 08             mov    %rax,0x8(%rbx)
         :
         :	        if (IS_PARTITIONED(hctlv))
    0.00 :	  7844e4:       48 8b 43 48             mov    0x48(%rbx),%rax
    0.00 :	  7844e8:       48 85 c0                test   %rax,%rax
    0.00 :	  7844eb:       74 03                   je     7844f0 <hash_search_with_hash_value+0x4a0>
         :	                SpinLockRelease(&hctlv->mutex);
    0.00 :	  7844ed:       c6 03 00                movb   $0x0,(%rbx)
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  7844f0:       48 8d 5a 10             lea    0x10(%rdx),%rbx
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
    0.00 :	  7844f4:       49 89 14 24             mov    %rdx,(%r12)
         :	                        currBucket->link = NULL;
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:978
    0.55 :	  7844f8:       44 89 7a 08             mov    %r15d,0x8(%rdx)
         :	                                                         errmsg("out of memory")));
         :	                        }
         :
         :	                        /* link into hashbucket chain */
         :	                        *prevBucketPtr = currBucket;
         :	                        currBucket->link = NULL;
    0.00 :	  7844fc:       48 c7 02 00 00 00 00    movq   $0x0,(%rdx)
         :
         :	                        /* copy key into record */
         :	                        currBucket->hashvalue = hashvalue;
         :	                        hashp->keycopy(ELEMENTKEY(currBucket), keyPtr, keysize);
    0.00 :	  784503:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  784507:       48 8b 75 80             mov    -0x80(%rbp),%rsi
    0.00 :	  78450b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  78450e:       41 ff 56 20             callq  *0x20(%r14)
         :	        }
         :
         :	        elog(ERROR, "unrecognized hash action code: %d", (int) action);
         :
         :	        return NULL;                            /* keep compiler quiet */
         :	}
    0.00 :	  784512:       e9 38 fc ff ff          jmpq   78414f <hash_search_with_hash_value+0xff>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  784517:       31 f6                   xor    %esi,%esi
    0.00 :	  784519:       e8 02 4f ce ff          callq  469420 <memset@plt>
         :	                hashp->dir = p;
    0.00 :	  78451e:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  784522:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
         :	                hashp->dir = p;
    0.00 :	  784526:       49 89 46 08             mov    %rax,0x8(%r14)
         :	                hashp->hctl->dsize = new_dsize;
    0.00 :	  78452a:       49 8b 06                mov    (%r14),%rax
    0.00 :	  78452d:       48 89 50 18             mov    %rdx,0x18(%rax)
         :
         :	                /* XXX assume the allocator is palloc, so we know how to free */
         :	                Assert(hashp->alloc == DynaHashAlloc);
         :	                pfree(old_p);
    0.00 :	  784531:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  784535:       e8 46 46 01 00          callq  798b80 <pfree>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78453a:       48 8b 5d c0             mov    -0x40(%rbp),%rbx
    0.00 :	  78453e:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  784541:       48 c1 e3 03             shl    $0x3,%rbx
    0.00 :	  784545:       48 89 5d c8             mov    %rbx,-0x38(%rbp)
    0.00 :	  784549:       49 03 5e 08             add    0x8(%r14),%rbx
    0.00 :	  78454d:       e8 7e fa ff ff          callq  783fd0 <seg_alloc>
    0.00 :	  784552:       48 85 c0                test   %rax,%rax
    0.00 :	  784555:       48 89 03                mov    %rax,(%rbx)
    0.00 :	  784558:       0f 84 1f 01 00 00       je     78467d <hash_search_with_hash_value+0x62d>
         :	                        return false;
         :	                hctl->nsegs++;
    0.00 :	  78455e:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  784562:       8b 42 28                mov    0x28(%rdx),%eax
    0.00 :	  784565:       48 83 42 20 01          addq   $0x1,0x20(%rdx)
    0.00 :	  78456a:       83 c0 01                add    $0x1,%eax
    0.00 :	  78456d:       e9 a9 fe ff ff          jmpq   78441b <hash_search_with_hash_value+0x3cb>
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784572:       48 8d 14 1b             lea    (%rbx,%rbx,1),%rdx
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
    0.00 :	  784576:       48 89 d8                mov    %rbx,%rax
    0.00 :	  784579:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  78457d:       48 89 45 a0             mov    %rax,-0x60(%rbp)
         :
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
    0.00 :	  784581:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784585:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784589:       49 8b 56 08             mov    0x8(%r14),%rdx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78458d:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
    0.00 :	  784591:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        CurrentDynaHashCxt = hashp->hcxt;
    0.00 :	  784595:       48 89 05 2c 56 43 00    mov    %rax,0x43562c(%rip)        # bb9bc8 <CurrentDynaHashCxt>
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  78459c:       41 ff 56 28             callq  *0x28(%r14)
         :
         :	        if (p != NULL)
    0.00 :	  7845a0:       48 85 c0                test   %rax,%rax
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
         :	        new_dirsize = new_dsize * sizeof(HASHSEGMENT);
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
    0.00 :	  7845a3:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        if (p != NULL)
    0.00 :	  7845a7:       0f 84 89 00 00 00       je     784636 <hash_search_with_hash_value+0x5e6>
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845ad:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845b1:       48 8b 75 b0             mov    -0x50(%rbp),%rsi
         :	        if (hashp->hctl->max_dsize != NO_MAX_DSIZE)
         :	                return false;
         :
         :	        /* Reallocate directory */
         :	        new_dsize = hashp->hctl->dsize << 1;
         :	        old_dirsize = hashp->hctl->dsize * sizeof(HASHSEGMENT);
    0.00 :	  7845b5:       48 c1 e3 03             shl    $0x3,%rbx
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
         :	        {
         :	                memcpy(p, old_p, old_dirsize);
    0.00 :	  7845b9:       48 89 da                mov    %rbx,%rdx
    0.00 :	  7845bc:       e8 2f 56 ce ff          callq  469bf0 <memcpy@plt>
         :	                MemSet(((char *) p) + old_dirsize, 0, new_dirsize - old_dirsize);
    0.00 :	  7845c1:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  7845c5:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  7845c9:       48 01 df                add    %rbx,%rdi
    0.00 :	  7845cc:       48 29 da                sub    %rbx,%rdx
    0.00 :	  7845cf:       40 f6 c7 07             test   $0x7,%dil
    0.00 :	  7845d3:       0f 85 3e ff ff ff       jne    784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845d9:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  7845e0:       0f 87 31 ff ff ff       ja     784517 <hash_search_with_hash_value+0x4c7>
    0.00 :	  7845e6:       48 8d 04 17             lea    (%rdi,%rdx,1),%rax
    0.00 :	  7845ea:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  7845ed:       0f 83 2b ff ff ff       jae    78451e <hash_search_with_hash_value+0x4ce>
    0.00 :	  7845f3:       48 c7 07 00 00 00 00    movq   $0x0,(%rdi)
    0.00 :	  7845fa:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	  7845fe:       48 39 f8                cmp    %rdi,%rax
    0.00 :	  784601:       77 f0                   ja     7845f3 <hash_search_with_hash_value+0x5a3>
    0.00 :	  784603:       e9 16 ff ff ff          jmpq   78451e <hash_search_with_hash_value+0x4ce>
         :	                                if (hashp->isshared)
         :	                                        ereport(ERROR,
         :	                                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                                         errmsg("out of shared memory")));
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  784608:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  78460b:       b9 f0 5b 8d 00          mov    $0x8d5bf0,%ecx
    0.00 :	  784610:       ba ca 03 00 00          mov    $0x3ca,%edx
    0.00 :	  784615:       be 33 59 8d 00          mov    $0x8d5933,%esi
    0.00 :	  78461a:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  78461f:       e8 9c 64 ff ff          callq  77aac0 <errstart>
    0.00 :	  784624:       84 c0                   test   %al,%al
    0.00 :	  784626:       0f 84 45 fc ff ff       je     784271 <hash_search_with_hash_value+0x221>
    0.00 :	  78462c:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  784631:       e9 b1 fd ff ff          jmpq   7843e7 <hash_search_with_hash_value+0x397>
         :
         :	        old_p = hashp->dir;
         :	        CurrentDynaHashCxt = hashp->hcxt;
         :	        p = (HASHSEGMENT *) hashp->alloc((Size) new_dirsize);
         :
         :	        if (p != NULL)
    0.00 :	  784636:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78463a:       48 8b 5d 90             mov    -0x70(%rbp),%rbx
    0.00 :	  78463e:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784642:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784646:       44 8b 43 28             mov    0x28(%rbx),%r8d
    0.00 :	  78464a:       e9 d9 fb ff ff          jmpq   784228 <hash_search_with_hash_value+0x1d8>
         :	                        if (currBucket != NULL)
         :	                                return (void *) ELEMENTKEY(currBucket);
         :
         :	                        /* disallow inserts if frozen */
         :	                        if (hashp->frozen)
         :	                                elog(ERROR, "cannot insert into frozen hashtable \"%s\"",
    0.00 :	  78464f:       ba f0 5b 8d 00          mov    $0x8d5bf0,%edx
    0.00 :	  784654:       be ba 03 00 00          mov    $0x3ba,%esi
    0.00 :	  784659:       bf 33 59 8d 00          mov    $0x8d5933,%edi
    0.00 :	  78465e:       e8 bd 6d ff ff          callq  77b420 <elog_start>
    0.00 :	  784663:       49 8b 56 38             mov    0x38(%r14),%rdx
    0.00 :	  784667:       be c0 5a 8d 00          mov    $0x8d5ac0,%esi
    0.00 :	  78466c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  784671:       31 c0                   xor    %eax,%eax
    0.00 :	  784673:       e8 b8 6b ff ff          callq  77b230 <elog_finish>
    0.00 :	  784678:       e8 53 4e ce ff          callq  4694d0 <abort@plt>
         :	        {
         :	                /* Allocate new segment if necessary -- could fail if dir full */
         :	                if (new_segnum >= hctl->dsize)
         :	                        if (!dir_realloc(hashp))
         :	                                return false;
         :	                if (!(hashp->dir[new_segnum] = seg_alloc(hashp)))
    0.00 :	  78467d:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  784681:       41 8b 4e 58             mov    0x58(%r14),%ecx
    0.00 :	  784685:       8b 70 28                mov    0x28(%rax),%esi
    0.00 :	  784688:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	  78468c:       4c 8d 68 ff             lea    -0x1(%rax),%r13
    0.00 :	  784690:       e9 13 fa ff ff          jmpq   7840a8 <hash_search_with_hash_value+0x58>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   17.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    6.86 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    5.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    5.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    4.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    4.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    3.43 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    3.43 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    3.43 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1179
    3.43 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    2.86 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    2.29 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    2.29 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1235
    1.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    1.71 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1195
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.14 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1158
    0.57 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f400 <slot_getattr>:
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    0.00 :	  46f400:       55                      push   %rbp
    0.00 :	  46f401:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    5.71 :	  46f404:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  46f408:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  46f40c:       48 89 fb                mov    %rdi,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1156
    3.43 :	  46f40f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  46f413:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.57 :	  46f417:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f41b:       85 f6                   test   %esi,%esi
         :	 *              slot's tupdesc's last attribute will be considered NULL even
         :	 *              when the physical tuple is longer than the tupdesc.
         :	 */
         :	Datum
         :	slot_getattr(TupleTableSlot *slot, int attnum, bool *isnull)
         :	{
    2.86 :	  46f41d:       49 89 d4                mov    %rdx,%r12
         :	        HeapTuple       tuple = slot->tts_tuple;
    0.00 :	  46f420:       48 8b 7f 08             mov    0x8(%rdi),%rdi
         :	        TupleDesc       tupleDesc = slot->tts_tupleDescriptor;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1158
    0.57 :	  46f424:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	        HeapTupleHeader tup;
         :
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
    0.00 :	  46f428:       0f 8e a2 00 00 00       jle    46f4d0 <slot_getattr+0xd0>
         :	        }
         :
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1176
    2.86 :	  46f42e:       3b 73 24                cmp    0x24(%rbx),%esi
    0.00 :	  46f431:       7e 65                   jle    46f498 <slot_getattr+0x98>
         :	        }
         :
         :	        /*
         :	         * return NULL if attnum is out of range according to the tupdesc
         :	         */
         :	        if (attnum > tupleDesc->natts)
    0.00 :	  46f433:       3b 32                   cmp    (%rdx),%esi
    0.00 :	  46f435:       7f 51                   jg     46f488 <slot_getattr+0x88>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1195
    1.14 :	  46f437:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f43a:       0f 84 34 01 00 00       je     46f574 <slot_getattr+0x174>
         :	         *
         :	         * (We have to check this separately because of various inheritance and
         :	         * table-alteration scenarios: the tuple could be either longer or shorter
         :	         * than the tupdesc.)
         :	         */
         :	        tup = tuple->t_data;
    0.00 :	  46f440:       48 8b 7f 10             mov    0x10(%rdi),%rdi
         :	        if (attnum > HeapTupleHeaderGetNatts(tup))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.71 :	  46f444:       0f b7 47 12             movzwl 0x12(%rdi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
   12.00 :	  46f448:       25 ff 07 00 00          and    $0x7ff,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1206
    1.14 :	  46f44d:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f44f:       7f 37                   jg     46f488 <slot_getattr+0x88>
         :	        }
         :
         :	        /*
         :	         * check if target attribute is null: no point in groveling through tuple
         :	         */
         :	        if (HeapTupleHasNulls(tuple) && att_isnull(attnum - 1, tup->t_bits))
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1215
    3.43 :	  46f451:       f6 47 14 01             testb  $0x1,0x14(%rdi)
    1.71 :	  46f455:       74 18                   je     46f46f <slot_getattr+0x6f>
    0.00 :	  46f457:       8d 4e ff                lea    -0x1(%rsi),%ecx
    0.00 :	  46f45a:       89 c8                   mov    %ecx,%eax
    0.00 :	  46f45c:       83 e1 07                and    $0x7,%ecx
    0.00 :	  46f45f:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  46f462:       48 98                   cltq   
    0.00 :	  46f464:       0f b6 44 07 17          movzbl 0x17(%rdi,%rax,1),%eax
    0.00 :	  46f469:       d3 f8                   sar    %cl,%eax
    0.00 :	  46f46b:       a8 01                   test   $0x1,%al
    0.00 :	  46f46d:       74 19                   je     46f488 <slot_getattr+0x88>
         :	        /*
         :	         * If the attribute's column has been dropped, we force a NULL result.
         :	         * This case should not happen in normal use, but it could happen if we
         :	         * are executing a plan cached before the column was dropped.
         :	         */
         :	        if (tupleDesc->attrs[attnum - 1]->attisdropped)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    2.86 :	  46f46f:       4c 63 ee                movslq %esi,%r13
    0.00 :	  46f472:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  46f476:       4d 8d 75 ff             lea    -0x1(%r13),%r14
    0.00 :	  46f47a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
    1.71 :	  46f47e:       80 78 61 00             cmpb   $0x0,0x61(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1226
    6.86 :	  46f482:       74 7c                   je     46f500 <slot_getattr+0x100>
    0.00 :	  46f484:       0f 1f 40 00             nopl   0x0(%rax)
         :	        {
         :	                *isnull = true;
    0.00 :	  46f488:       41 c6 04 24 01          movb   $0x1,(%r12)
    0.00 :	  46f48d:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f48f:       eb 20                   jmp    46f4b1 <slot_getattr+0xb1>
    0.00 :	  46f491:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * fast path if desired attribute already cached
         :	         */
         :	        if (attnum <= slot->tts_nvalid)
         :	        {
         :	                *isnull = slot->tts_isnull[attnum - 1];
    0.00 :	  46f498:       48 8b 43 30             mov    0x30(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    0.57 :	  46f49c:       48 63 d6                movslq %esi,%rdx
    0.00 :	  46f49f:       0f b6 44 10 ff          movzbl -0x1(%rax,%rdx,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1178
    5.14 :	  46f4a4:       41 88 04 24             mov    %al,(%r12)
         :	                return slot->tts_values[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1179
    3.43 :	  46f4a8:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f4ac:       48 8b 44 d0 f8          mov    -0x8(%rax,%rdx,8),%rax
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1242
    1.14 :	  46f4b1:       48 8b 1c 24             mov    (%rsp),%rbx
    1.14 :	  46f4b5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    2.29 :	  46f4ba:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    1.14 :	  46f4bf:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    3.43 :	  46f4c4:       c9                      leaveq 
    1.14 :	  46f4c5:       c3                      retq   
    0.00 :	  46f4c6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46f4cd:       00 00 00 
         :	        /*
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
    0.00 :	  46f4d0:       48 85 ff                test   %rdi,%rdi
    0.00 :	  46f4d3:       74 4b                   je     46f520 <slot_getattr+0x120>
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
    0.00 :	  46f4d5:       48 8d 43 40             lea    0x40(%rbx),%rax
    0.00 :	  46f4d9:       48 39 c7                cmp    %rax,%rdi
    0.00 :	  46f4dc:       74 6c                   je     46f54a <slot_getattr+0x14a>
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4de:       4c 89 e1                mov    %r12,%rcx
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
         :	        return slot->tts_values[attnum - 1];
         :	}
    0.00 :	  46f4e1:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  46f4e5:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  46f4ea:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  46f4ef:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  46f4f4:       c9                      leaveq 
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
         :	                return heap_getsysattr(tuple, attnum, tupleDesc, isnull);
    0.00 :	  46f4f5:       e9 d6 f7 ff ff          jmpq   46ecd0 <heap_getsysattr>
    0.00 :	  46f4fa:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Extract the attribute, along with any preceding attributes.
         :	         */
         :	        slot_deform_tuple(slot, attnum);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1235
    2.29 :	  46f500:       48 89 df                mov    %rbx,%rdi
    0.00 :	  46f503:       e8 08 fa ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * The result is acquired from tts_values array.
         :	         */
         :	        *isnull = slot->tts_isnull[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
    4.57 :	  46f508:       48 8b 43 30             mov    0x30(%rbx),%rax
    2.86 :	  46f50c:       42 0f b6 44 28 ff       movzbl -0x1(%rax,%r13,1),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1240
   17.71 :	  46f512:       41 88 04 24             mov    %al,(%r12)
         :	        return slot->tts_values[attnum - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1241
    4.57 :	  46f516:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  46f51a:       4a 8b 04 f0             mov    (%rax,%r14,8),%rax
         :	}
    0.00 :	  46f51e:       eb 91                   jmp    46f4b1 <slot_getattr+0xb1>
         :	         * system attributes are handled by heap_getsysattr
         :	         */
         :	        if (attnum <= 0)
         :	        {
         :	                if (tuple == NULL)              /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from virtual tuple");
    0.00 :	  46f520:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f525:       be 8f 04 00 00          mov    $0x48f,%esi
    0.00 :	  46f52a:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f52f:       e8 ec be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f534:       be 40 f7 7a 00          mov    $0x7af740,%esi
    0.00 :	  46f539:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f53e:       31 c0                   xor    %eax,%eax
    0.00 :	  46f540:       e8 eb bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f545:       e8 86 9f ff ff          callq  4694d0 <abort@plt>
         :	                if (tuple == &(slot->tts_minhdr))               /* internal error */
         :	                        elog(ERROR, "cannot extract system attribute from minimal tuple");
    0.00 :	  46f54a:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f54f:       be 91 04 00 00          mov    $0x491,%esi
    0.00 :	  46f554:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f559:       e8 c2 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f55e:       be 78 f7 7a 00          mov    $0x7af778,%esi
    0.00 :	  46f563:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f568:       31 c0                   xor    %eax,%eax
    0.00 :	  46f56a:       e8 c1 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f56f:       e8 5c 9f ff ff          callq  4694d0 <abort@plt>
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f574:       ba f1 f6 7a 00          mov    $0x7af6f1,%edx
    0.00 :	  46f579:       be ac 04 00 00          mov    $0x4ac,%esi
    0.00 :	  46f57e:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f583:       e8 98 be 30 00          callq  77b420 <elog_start>
    0.00 :	  46f588:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f58d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f592:       31 c0                   xor    %eax,%eax
    0.00 :	  46f594:       e8 97 bc 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f599:       e8 32 9f ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   53.89 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   32.34 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    2.40 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:811
    2.40 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:826
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:825
    1.20 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:820
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:710
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:828
    0.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782ca0 <CHashBucketScan>:
         :	CHashBucketScan(CHashTable table,
         :	                                CHashPtr *start,
         :	                                uint32 hashcode,
         :	                                const void *key,
         :	                                CHashScanResult *res)
         :	{
    0.00 :	  782ca0:       55                      push   %rbp
    0.00 :	  782ca1:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:679
    0.60 :	  782ca4:       41 57                   push   %r15
    0.00 :	  782ca6:       41 89 d7                mov    %edx,%r15d
    0.00 :	  782ca9:       41 56                   push   %r14
    0.00 :	  782cab:       41 55                   push   %r13
    0.00 :	  782cad:       49 89 fd                mov    %rdi,%r13
    0.00 :	  782cb0:       41 54                   push   %r12
    0.00 :	  782cb2:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  782cb5:       53                      push   %rbx
    0.60 :	  782cb6:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  782cba:       48 89 75 d0             mov    %rsi,-0x30(%rbp)
    0.00 :	  782cbe:       48 89 4d c8             mov    %rcx,-0x38(%rbp)
    0.00 :	  782cc2:       4c 89 45 c0             mov    %r8,-0x40(%rbp)
         :	        CHashPtr   *pointer_to_target;
         :	        CHashNode  *target_node = NULL;
         :
         :	retry:
         :	        pointer_to_target = start;
         :	        target = *pointer_to_target;
    0.00 :	  782cc6:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  782cca:       44 8b 10                mov    (%rax),%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
   32.34 :	  782ccd:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cd1:       0f 87 ff 00 00 00       ja     782dd6 <CHashBucketScan+0x136>
         :	                {
         :	                        res->found = false;
         :	                        break;
    0.00 :	  782cd7:       4c 8b 75 d0             mov    -0x30(%rbp),%r14
    0.00 :	  782cdb:       eb 21                   jmp    782cfe <CHashBucketScan+0x5e>
    0.00 :	  782cdd:       0f 1f 00                nopl   (%rax)
         :	                /*
         :	                 * Bucket chains are kept in order, so that there is exactly one legal
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
    0.00 :	  782ce0:       41 8b 44 24 04          mov    0x4(%r12),%eax
         :	                if (h == hashcode)
    0.00 :	  782ce5:       44 39 f8                cmp    %r15d,%eax
    0.00 :	  782ce8:       74 5e                   je     782d48 <CHashBucketScan+0xa8>
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
         :	                                                 table->desc.key_size);
         :	                else if (h > hashcode)
    0.00 :	  782cea:       41 39 c7                cmp    %eax,%r15d
    0.00 :	  782ced:       0f 1f 00                nopl   (%rax)
    0.00 :	  782cf0:       72 7b                   jb     782d6d <CHashBucketScan+0xcd>
         :	                                break;
         :	                        }
         :	                }
         :
         :	                /* Continue scan from next node. */
         :	                pointer_to_target = &target_node->next;
    0.00 :	  782cf2:       4d 89 e6                mov    %r12,%r14
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:820
    0.60 :	  782cf5:       45 89 c2                mov    %r8d,%r10d
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
    0.00 :	  782cf8:       41 83 fa fd             cmp    $0xfffffffd,%r10d
    0.00 :	  782cfc:       77 79                   ja     782d77 <CHashBucketScan+0xd7>
         :	                {
         :	                        res->found = false;
         :	                        break;
         :	                }
         :	                target_node = CHashTableGetNode(table, target);
    0.00 :	  782cfe:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d01:       d1 e8                   shr    %eax
    0.00 :	  782d03:       41 89 c4                mov    %eax,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:702
    0.60 :	  782d06:       45 0f af 65 1c          imul   0x1c(%r13),%r12d
    0.00 :	  782d0b:       4d 03 65 30             add    0x30(%r13),%r12
         :	                 * target may have been fetched from an arena entry that could be
         :	                 * concurrently modified, so a dependency barrier is required before
         :	                 * dereferencing the derived pointer.
         :	                 */
         :	                pg_read_barrier_depends();
         :	                next = target_node->next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:710
    0.60 :	  782d0f:       45 8b 04 24             mov    (%r12),%r8d
         :	                 * ensures that delete-marked elements are removed from bucket chains
         :	                 * as quickly as possible and reduces code duplication.  See
         :	                 * CHashDelete for further comments about why delete-marking is
         :	                 * necessary and how it allows safe deletion.
         :	                 */
         :	                if (CHashPtrIsMarked(next))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:720
   53.89 :	  782d13:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d17:       74 c7                   je     782ce0 <CHashBucketScan+0x40>
         :	                {
         :	zap:
         :	                        if (__sync_bool_compare_and_swap(pointer_to_target,
    0.00 :	  782d19:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  782d1c:       44 89 d0                mov    %r10d,%eax
    0.00 :	  782d1f:       83 e3 fe                and    $0xfffffffe,%ebx
    0.00 :	  782d22:       f0 41 0f b1 1e          lock cmpxchg %ebx,(%r14)
    0.00 :	  782d27:       74 77                   je     782da0 <CHashBucketScan+0x100>
         :	                                 * the node which precedes it before we advance to the next
         :	                                 * node.  That could certainly happen occasionally, but we'd
         :	                                 * have to be pretty unlucky to have it happen even twice in
         :	                                 * a row.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge_Fail);
    0.00 :	  782d29:       49 83 85 88 00 00 00    addq   $0x1,0x88(%r13)
    0.00 :	  782d30:       01 
         :	                                target = *pointer_to_target;
    0.00 :	  782d31:       45 8b 16                mov    (%r14),%r10d
         :	                                if (CHashPtrIsMarked(target))
    0.00 :	  782d34:       41 f6 c2 01             test   $0x1,%r10b
    0.00 :	  782d38:       74 be                   je     782cf8 <CHashBucketScan+0x58>
         :	                                {
         :	                                        CHashTableIncrementStatistic(table, CHS_Scan_Restart);
    0.00 :	  782d3a:       49 83 85 90 00 00 00    addq   $0x1,0x90(%r13)
    0.00 :	  782d41:       01 
         :	                                        goto retry;
    0.00 :	  782d42:       eb 82                   jmp    782cc6 <CHashBucketScan+0x26>
    0.00 :	  782d44:       0f 1f 40 00             nopl   0x0(%rax)
         :	                 * point at which any given key can be inserted.  The ordering is by
         :	                 * hashcode first, and then by memcmp ordering of the keys involved.
         :	                 */
         :	                h = target_node->un.hashcode;
         :	                if (h == hashcode)
         :	                        cmp = memcmp(CHashNodeGetItem(target_node), key,
    0.00 :	  782d48:       41 0f b7 4d 0e          movzwl 0xe(%r13),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:780
    0.60 :	  782d4d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  782d51:       49 8d 74 24 08          lea    0x8(%r12),%rsi
    0.00 :	  782d56:       48 39 c9                cmp    %rcx,%rcx
    0.00 :	  782d59:       f3 a6                   repz cmpsb %es:(%rdi),%ds:(%rsi)
    0.60 :	  782d5b:       0f 97 c0                seta   %al
    1.20 :	  782d5e:       0f 92 c2                setb   %dl
    0.00 :	  782d61:       28 d0                   sub    %dl,%al
    0.00 :	  782d63:       0f be c0                movsbl %al,%eax
         :	                 * the point where we expect to find the key OR someone delete-marked
         :	                 * the item and overwrote the hashcode with a gcnext pointer.  In the
         :	                 * latter case we must take care not to be fooled into stopping the
         :	                 * scan early.
         :	                 */
         :	                if (cmp >= 0)
    0.00 :	  782d66:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  782d69:       7c 87                   jl     782cf2 <CHashBucketScan+0x52>
         :	                {
         :	                        if (cmp == 0)
    0.00 :	  782d6b:       74 5b                   je     782dc8 <CHashBucketScan+0x128>
         :	                                /*
         :	                                 * pg_read_barrier() prevents the reread of the next pointer
         :	                                 * from being speculated ahead of the read of the hash value.
         :	                                 */
         :	                                pg_read_barrier();
         :	                                next = target_node->next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:811
    2.40 :	  782d6d:       45 8b 04 24             mov    (%r12),%r8d
         :	                                if (CHashPtrIsMarked(next))
    0.00 :	  782d71:       41 f6 c0 01             test   $0x1,%r8b
    0.00 :	  782d75:       75 a2                   jne    782d19 <CHashBucketScan+0x79>
         :	                                        goto zap;
         :	                                res->found = false;
    0.00 :	  782d77:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  782d7b:       c6 47 18 00             movb   $0x0,0x18(%rdi)
         :	                pointer_to_target = &target_node->next;
         :	                target = next;
         :	        }
         :
         :	        /* Send results back to caller. */
         :	        res->target = target;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:825
    1.20 :	  782d7f:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782d83:       44 89 10                mov    %r10d,(%rax)
         :	        res->pointer_to_target = pointer_to_target;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:826
    2.40 :	  782d86:       4c 89 70 08             mov    %r14,0x8(%rax)
         :	        res->target_node = target_node;
    0.00 :	  782d8a:       4c 89 60 10             mov    %r12,0x10(%rax)
         :	}
    0.00 :	  782d8e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  782d92:       5b                      pop    %rbx
    0.00 :	  782d93:       41 5c                   pop    %r12
    0.00 :	  782d95:       41 5d                   pop    %r13
    0.00 :	  782d97:       41 5e                   pop    %r14
    0.00 :	  782d99:       41 5f                   pop    %r15
    0.00 :	  782d9b:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:828
    0.60 :	  782d9c:       c3                      retq   
    0.00 :	  782d9d:       0f 1f 00                nopl   (%rax)
         :	                                 * delete-mark has been applied.  Thus, if we just keep
         :	                                 * following the next pointers, we're guaranteed to visit
         :	                                 * all non-deleted items (and possibly some deleted items)
         :	                                 * that were present at the time we began the scan.
         :	                                 */
         :	                                CHashTableIncrementStatistic(table, CHS_Scan_Expunge);
    0.00 :	  782da0:       49 83 85 80 00 00 00    addq   $0x1,0x80(%r13)
    0.00 :	  782da7:       01 
         :	                                CHashAddToGarbage(table, hashcode & table->bucket_mask,
    0.00 :	  782da8:       44 89 fe                mov    %r15d,%esi
    0.00 :	  782dab:       41 23 75 10             and    0x10(%r13),%esi
    0.00 :	  782daf:       44 89 d2                mov    %r10d,%edx
    0.00 :	  782db2:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  782db5:       e8 96 fe ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782dba:       41 89 da                mov    %ebx,%r10d
    0.00 :	  782dbd:       e9 36 ff ff ff          jmpq   782cf8 <CHashBucketScan+0x58>
    0.00 :	  782dc2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 */
         :	                if (cmp >= 0)
         :	                {
         :	                        if (cmp == 0)
         :	                        {
         :	                                res->found = true;
    0.00 :	  782dc8:       48 8b 45 c0             mov    -0x40(%rbp),%rax
    0.00 :	  782dcc:       c6 40 18 01             movb   $0x1,0x18(%rax)
         :	                                res->next = next;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:801
    0.60 :	  782dd0:       44 89 40 04             mov    %r8d,0x4(%rax)
         :	                                break;
    0.00 :	  782dd4:       eb a9                   jmp    782d7f <CHashBucketScan+0xdf>
         :
         :	                /*
         :	                 * If we've reached the end of the bucket chain, stop; otherwise,
         :	                 * figure out the actual address of the next item.
         :	                 */
         :	                if (CHashPtrIsInvalid(target))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:697
    1.20 :	  782dd6:       49 89 c6                mov    %rax,%r14
    0.00 :	  782dd9:       eb 9c                   jmp    782d77 <CHashBucketScan+0xd7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.40 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    8.51 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    7.09 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    6.38 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    4.96 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    4.26 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    3.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    3.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    3.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    2.84 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    2.84 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    2.84 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    2.84 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    2.13 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    1.42 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    1.42 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    1.42 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5163
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    0.71 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005acf10 <ExecQual>:
         :	 *
         :	 * ----------------------------------------------------------------
         :	 */
         :	bool
         :	ExecQual(List *qual, ExprContext *econtext, bool resultForNull)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5130
    2.84 :	  5acf10:       55                      push   %rbp
    3.55 :	  5acf11:       48 89 e5                mov    %rsp,%rbp
    1.42 :	  5acf14:       41 57                   push   %r15
    4.96 :	  5acf16:       41 56                   push   %r14
    2.84 :	  5acf18:       41 89 d6                mov    %edx,%r14d
    0.00 :	  5acf1b:       41 55                   push   %r13
    0.71 :	  5acf1d:       41 54                   push   %r12
    0.00 :	  5acf1f:       49 89 f4                mov    %rsi,%r12
    3.55 :	  5acf22:       53                      push   %rbx
    0.00 :	  5acf23:       48 83 ec 18             sub    $0x18,%rsp
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    0.71 :	  5acf27:       48 8b 46 28             mov    0x28(%rsi),%rax
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    2.84 :	  5acf2b:       48 85 ff                test   %rdi,%rdi
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5acf2e:       4c 8b 3d 2b d9 60 00    mov    0x60d92b(%rip),%r15        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    2.13 :	  5acf35:       48 89 05 24 d9 60 00    mov    %rax,0x60d924(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5acf3c:       74 4a                   je     5acf88 <ExecQual+0x78>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/nodes/pg_list.h:87
    2.13 :	  5acf3e:       48 8b 5f 08             mov    0x8(%rdi),%rbx
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    2.13 :	  5acf42:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf45:       74 41                   je     5acf88 <ExecQual+0x78>
    0.71 :	  5acf47:       4c 8d 6d d7             lea    -0x29(%rbp),%r13
    0.71 :	  5acf4b:       eb 11                   jmp    5acf5e <ExecQual+0x4e>
    0.00 :	  5acf4d:       0f 1f 00                nopl   (%rax)
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
         :
         :	                if (isNull)
         :	                {
         :	                        if (resultForNull == false)
    0.00 :	  5acf50:       45 84 f6                test   %r14b,%r14b
    0.00 :	  5acf53:       74 24                   je     5acf79 <ExecQual+0x69>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf55:       48 8b 5b 08             mov    0x8(%rbx),%rbx
    0.00 :	  5acf59:       48 85 db                test   %rbx,%rbx
    0.00 :	  5acf5c:       74 2a                   je     5acf88 <ExecQual+0x78>
         :	        {
         :	                ExprState  *clause = (ExprState *) lfirst(l);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5163
    0.71 :	  5acf5e:       48 8b 03                mov    (%rbx),%rax
         :	                Datum           expr_value;
         :	                bool            isNull;
         :
         :	                expr_value = ExecEvalExpr(clause, econtext, &isNull, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5167
    0.71 :	  5acf61:       31 c9                   xor    %ecx,%ecx
    2.84 :	  5acf63:       4c 89 ea                mov    %r13,%rdx
    0.71 :	  5acf66:       4c 89 e6                mov    %r12,%rsi
    0.71 :	  5acf69:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5acf6c:       ff 50 10                callq  *0x10(%rax)
         :
         :	                if (isNull)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5169
    6.38 :	  5acf6f:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
   23.40 :	  5acf73:       75 db                   jne    5acf50 <ExecQual+0x40>
         :	                                break;
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        if (!DatumGetBool(expr_value))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5179
    8.51 :	  5acf75:       84 c0                   test   %al,%al
    0.00 :	  5acf77:       75 dc                   jne    5acf55 <ExecQual+0x45>
         :	         * or more NULL subresult, with all the rest TRUE) and the caller has
         :	         * specified resultForNull = TRUE.
         :	         */
         :	        result = true;
         :
         :	        foreach(l, qual)
    0.00 :	  5acf79:       31 c0                   xor    %eax,%eax
    0.00 :	  5acf7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5acf80:       eb 0b                   jmp    5acf8d <ExecQual+0x7d>
    0.00 :	  5acf82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5161
    1.42 :	  5acf88:       b8 01 00 00 00          mov    $0x1,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    1.42 :	  5acf8d:       4c 89 3d cc d8 60 00    mov    %r15,0x60d8cc(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
    2.13 :	  5acf94:       48 83 c4 18             add    $0x18,%rsp
    2.13 :	  5acf98:       5b                      pop    %rbx
    2.13 :	  5acf99:       41 5c                   pop    %r12
    0.00 :	  5acf9b:       41 5d                   pop    %r13
    0.71 :	  5acf9d:       41 5e                   pop    %r14
    4.26 :	  5acf9f:       41 5f                   pop    %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5190
   10.64 :	  5acfa1:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   13.91 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   12.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    6.96 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    6.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    6.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    6.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    5.22 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    5.22 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    3.48 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    2.61 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    2.61 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
    2.61 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    1.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    0.87 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674520 <GetPrivateRefCountEntry>:
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 :	  674520:       55                      push   %rbp
    0.87 :	  674521:       48 89 e5                mov    %rsp,%rbp
    1.74 :	  674524:       41 57                   push   %r15
    2.61 :	  674526:       41 89 f7                mov    %esi,%r15d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.00 :	  674529:       89 fe                   mov    %edi,%esi
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.87 :	  67452b:       41 56                   push   %r14
    0.87 :	  67452d:       41 55                   push   %r13
    1.74 :	  67452f:       41 54                   push   %r12
    0.00 :	  674531:       41 89 d4                mov    %edx,%r12d
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    1.74 :	  674534:       ba c0 d0 b7 00          mov    $0xb7d0c0,%edx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  674539:       53                      push   %rbx
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
    0.87 :	  67453a:       31 db                   xor    %ebx,%ebx
         :	 *
         :	 * Only works for shared buffers.
         :	 */
         :	static PrivateRefCountEntry*
         :	GetPrivateRefCountEntry(Buffer buffer, bool create, bool do_move)
         :	{
    0.00 :	  67453c:       48 83 ec 18             sub    $0x18,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:146
    1.74 :	  674540:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	        PrivateRefCountEntry *res;
         :	        PrivateRefCountEntry *free = NULL;
         :	        bool            found = false;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:149
    2.61 :	  674543:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
    0.00 :	  674547:       eb 14                   jmp    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674549:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                if (res->buffer == buffer)
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
    0.00 :	  674550:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
    0.00 :	  674554:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    0.00 :	  67455b:       74 2b                   je     674588 <GetPrivateRefCountEntry+0x68>
         :	        {
         :	                res = &PrivateRefCountArray[i];
         :
         :	                if (res->buffer == buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:164
    6.09 :	  67455d:       8b 0a                   mov    (%rdx),%ecx
    6.96 :	  67455f:       48 89 d0                mov    %rdx,%rax
    5.22 :	  674562:       39 f1                   cmp    %esi,%ecx
    0.00 :	  674564:       0f 84 c8 00 00 00       je     674632 <GetPrivateRefCountEntry+0x112>
         :	                        return res;
         :
         :	                /* Remember where to put a new refcount, should it become necessary. */
         :	                if (free == NULL && res->buffer == InvalidBuffer)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    5.22 :	  67456a:       48 85 db                test   %rbx,%rbx
    0.00 :	  67456d:       75 e1                   jne    674550 <GetPrivateRefCountEntry+0x30>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
    4.35 :	  67456f:       85 c9                   test   %ecx,%ecx
    1.74 :	  674571:       48 0f 44 da             cmove  %rdx,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:168
   13.91 :	  674575:       48 83 c2 08             add    $0x8,%rdx
         :
         :	        /*
         :	         * First search for references in the array, that'll be sufficient in the
         :	         * majority of cases.
         :	         */
         :	        for (i = 0; i < REFCOUNT_ARRAY_ENTRIES; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:160
    3.48 :	  674579:       48 81 fa 00 d1 b7 00    cmp    $0xb7d100,%rdx
    4.35 :	  674580:       75 db                   jne    67455d <GetPrivateRefCountEntry+0x3d>
    0.00 :	  674582:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674588:       8b 05 e2 8a 50 00       mov    0x508ae2(%rip),%eax        # b7d070 <PrivateRefCountOverflowed>
         :	        /*
         :	         * By here we know that the buffer, if already pinned, isn't residing in
         :	         * the array.
         :	         */
         :	        res = NULL;
         :	        found = false;
    0.00 :	  67458e:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        /*
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
    0.00 :	  674592:       85 c0                   test   %eax,%eax
    0.00 :	  674594:       0f 8e ee 00 00 00       jle    674688 <GetPrivateRefCountEntry+0x168>
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  67459a:       4c 8d 75 d7             lea    -0x29(%rbp),%r14
    0.00 :	  67459e:       48 8b 3d d3 8a 50 00    mov    0x508ad3(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745a5:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  6745a9:       31 d2                   xor    %edx,%edx
    0.00 :	  6745ab:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745ae:       e8 ed 00 11 00          callq  7846a0 <hash_search>
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
         :	         * Look up the buffer in the hashtable if we've previously overflowed into
         :	         * it.
         :	         */
         :	        if (PrivateRefCountOverflowed > 0)
         :	        {
         :	                res = hash_search(PrivateRefCountHash,
    0.00 :	  6745b7:       49 89 c5                mov    %rax,%r13
         :	                                                  (void *) &buffer,
         :	                                                  HASH_FIND,
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
    0.00 :	  6745ba:       0f 84 c8 00 00 00       je     674688 <GetPrivateRefCountEntry+0x168>
         :
         :	                }
         :	        }
         :	        else
         :	        {
         :	                if (!do_move)
    0.00 :	  6745c0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  6745c3:       74 6d                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        return res;
         :	                }
         :	                else if (found && free != NULL)
    0.00 :	  6745c5:       48 85 db                test   %rbx,%rbx
    0.00 :	  6745c8:       75 7e                   jne    674648 <GetPrivateRefCountEntry+0x128>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745ca:       8b 05 b0 8a 50 00       mov    0x508ab0(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745d0:       48 8b 3d a1 8a 50 00    mov    0x508aa1(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6745d7:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  6745da:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6745df:       49 89 c4                mov    %rax,%r12
    0.00 :	  6745e2:       83 c0 01                add    $0x1,%eax
    0.00 :	  6745e5:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6745e9:       89 05 91 8a 50 00       mov    %eax,0x508a91(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6745ef:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6745f6:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim entry into the hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6745f7:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6745fa:       e8 a1 00 11 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6745ff:       8b 53 04                mov    0x4(%rbx),%edx
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674602:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674605:       48 89 de                mov    %rbx,%rsi
         :	                        hashent = hash_search(PrivateRefCountHash,
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  674608:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  67460b:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                        arrayent->refcount = res->refcount;
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67460f:       ba 02 00 00 00          mov    $0x2,%edx
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
         :
         :	                        /* fill now free array entry with previously searched entry */
         :	                        arrayent->buffer = res->buffer;
    0.00 :	  674614:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  67461b:       00 
         :	                        arrayent->refcount = res->refcount;
    0.00 :	  67461c:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674620:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* and remove the old entry */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674623:       48 8b 3d 4e 8a 50 00    mov    0x508a4e(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  67462a:       e8 71 00 11 00          callq  7846a0 <hash_search>
    0.00 :	  67462f:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    6.09 :	  674632:       48 83 c4 18             add    $0x18,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    0.87 :	  674636:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
   12.17 :	  674637:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    1.74 :	  674639:       41 5d                   pop    %r13
    2.61 :	  67463b:       41 5e                   pop    %r14
    0.87 :	  67463d:       41 5f                   pop    %r15
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    6.09 :	  67463f:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:304
    0.87 :	  674640:       c3                      retq   
    0.00 :	  674641:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674648:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = res->refcount;
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  67464b:       48 8d 75 c4             lea    -0x3c(%rbp),%rsi
    0.00 :	  67464f:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  674652:       ba 02 00 00 00          mov    $0x2,%edx
         :	                else if (found && free != NULL)
         :	                {
         :	                        /* move buffer from hashtable into the free array slot */
         :
         :	                        /* fill array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674657:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = res->refcount;
    0.00 :	  674659:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  67465d:       89 43 04                mov    %eax,0x4(%rbx)
         :
         :	                        /* delete from hashtable */
         :	                        hash_search(PrivateRefCountHash,
    0.00 :	  674660:       48 8b 3d 11 8a 50 00    mov    0x508a11(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674667:       e8 34 00 11 00          callq  7846a0 <hash_search>
         :	                                                (void *) &buffer,
         :	                                                HASH_REMOVE,
         :	                                                &found);
         :	                        Assert(found);
         :	                        Assert(PrivateRefCountOverflowed > 0);
         :	                        PrivateRefCountOverflowed--;
    0.00 :	  67466c:       83 2d fd 89 50 00 01    subl   $0x1,0x5089fd(%rip)        # b7d070 <PrivateRefCountOverflowed>
    0.00 :	  674673:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  674676:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  67467a:       5b                      pop    %rbx
    0.00 :	  67467b:       41 5c                   pop    %r12
    0.00 :	  67467d:       41 5d                   pop    %r13
    0.00 :	  67467f:       41 5e                   pop    %r14
    0.00 :	  674681:       41 5f                   pop    %r15
    0.00 :	  674683:       c9                      leaveq 
    0.00 :	  674684:       c3                      retq   
    0.00 :	  674685:       0f 1f 00                nopl   (%rax)
         :	                                                  &found);
         :	        }
         :
         :	        if (!found)
         :	        {
         :	                if (!create)
    0.00 :	  674688:       31 c0                   xor    %eax,%eax
    0.00 :	  67468a:       45 84 ff                test   %r15b,%r15b
    0.00 :	  67468d:       74 a3                   je     674632 <GetPrivateRefCountEntry+0x112>
         :	                {
         :	                        /* Neither array nor hash have an entry and no new entry is needed */
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
    0.00 :	  67468f:       48 85 db                test   %rbx,%rbx
    0.00 :	  674692:       74 11                   je     6746a5 <GetPrivateRefCountEntry+0x185>
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  674694:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	                        free->refcount = 0;
    0.00 :	  674697:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :	                        return NULL;
         :	                }
         :	                else if (free != NULL)
         :	                {
         :	                        /* add entry into the free array slot */
         :	                        free->buffer = buffer;
    0.00 :	  67469e:       89 03                   mov    %eax,(%rbx)
         :	                        free->refcount = 0;
    0.00 :	  6746a0:       48 89 d8                mov    %rbx,%rax
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746a3:       eb 8d                   jmp    674632 <GetPrivateRefCountEntry+0x112>
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746a5:       8b 05 d5 89 50 00       mov    0x5089d5(%rip),%eax        # b7d080 <PrivateRefCountClock>
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746ab:       48 8b 3d c6 89 50 00    mov    0x5089c6(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  6746b2:       48 8d 4d d7             lea    -0x29(%rbp),%rcx
    0.00 :	  6746b6:       ba 01 00 00 00          mov    $0x1,%edx
         :	                         */
         :	                        PrivateRefCountEntry *arrayent;
         :	                        PrivateRefCountEntry *hashent;
         :
         :	                        /* select victim slot */
         :	                        arrayent = &PrivateRefCountArray[
    0.00 :	  6746bb:       49 89 c4                mov    %rax,%r12
    0.00 :	  6746be:       83 c0 01                add    $0x1,%eax
    0.00 :	  6746c1:       41 83 e4 07             and    $0x7,%r12d
    0.00 :	  6746c5:       89 05 b5 89 50 00       mov    %eax,0x5089b5(%rip)        # b7d080 <PrivateRefCountClock>
    0.00 :	  6746cb:       4a 8d 1c e5 c0 d0 b7    lea    0xb7d0c0(,%r12,8),%rbx
    0.00 :	  6746d2:       00 
         :	                                PrivateRefCountClock++ % REFCOUNT_ARRAY_ENTRIES];
         :	                        Assert(arrayent->buffer != InvalidBuffer);
         :
         :	                        /* enter victim array entry into hashtable */
         :	                        hashent = hash_search(PrivateRefCountHash,
    0.00 :	  6746d3:       48 89 de                mov    %rbx,%rsi
    0.00 :	  6746d6:       e8 c5 ff 10 00          callq  7846a0 <hash_search>
         :	                                                                  (void *) &arrayent->buffer,
         :	                                                                  HASH_ENTER,
         :	                                                                  &found);
         :	                        Assert(!found);
         :	                        hashent->refcount = arrayent->refcount;
    0.00 :	  6746db:       8b 53 04                mov    0x4(%rbx),%edx
    0.00 :	  6746de:       89 50 04                mov    %edx,0x4(%rax)
         :
         :	                        /* fill the now free array slot */
         :	                        arrayent->buffer = buffer;
    0.00 :	  6746e1:       8b 45 c4                mov    -0x3c(%rbp),%eax
    0.00 :	  6746e4:       42 89 04 e5 c0 d0 b7    mov    %eax,0xb7d0c0(,%r12,8)
    0.00 :	  6746eb:       00 
         :	                        arrayent->refcount = 0;
    0.00 :	  6746ec:       c7 43 04 00 00 00 00    movl   $0x0,0x4(%rbx)
         :
         :	                        PrivateRefCountOverflowed++;
    0.00 :	  6746f3:       48 89 d8                mov    %rbx,%rax
    0.00 :	  6746f6:       83 05 73 89 50 00 01    addl   $0x1,0x508973(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                }
         :	        }
         :
         :	        Assert(false); /* unreachable */
         :	        return NULL;
         :	}
    0.00 :	  6746fd:       e9 30 ff ff ff          jmpq   674632 <GetPrivateRefCountEntry+0x112>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   29.13 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   17.48 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    8.74 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
    3.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:540
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    2.91 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:504
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    1.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:989
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:488
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:885
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:889
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:891
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:576
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:937
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:911
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    0.97 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:991
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782f20 <CHashInsert>:
         :	 * degrading performance; or CHashAllocate may enter a tight loop until such
         :	 * time as an element is deleted).
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
    0.00 :	  782f20:       55                      push   %rbp
    0.00 :	  782f21:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782f24:       41 57                   push   %r15
    0.00 :	  782f26:       41 56                   push   %r14
    0.00 :	  782f28:       41 55                   push   %r13
    0.00 :	  782f2a:       41 54                   push   %r12
    0.00 :	  782f2c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  782f2f:       53                      push   %rbx
    0.00 :	  782f30:       48 83 ec 38             sub    $0x38,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:488
    0.97 :	  782f34:       48 89 75 a0             mov    %rsi,-0x60(%rbp)
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782f38:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782f3c:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  782f40:       e8 0b d4 d0 ff          callq  490350 <hash_any>
    0.00 :	  782f45:       89 45 a8                mov    %eax,-0x58(%rbp)
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f48:       41 23 44 24 10          and    0x10(%r12),%eax
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f4d:       8b 35 b5 5b 3e 00       mov    0x3e5bb5(%rip),%esi        # b68b08 <MyBackendId>
    0.00 :	  782f53:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
         :	 */
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782f59:       89 45 ac                mov    %eax,-0x54(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f5c:       89 c0                   mov    %eax,%eax
    0.00 :	  782f5e:       4c 8d 3c 85 00 00 00    lea    0x0(,%rax,4),%r15
    0.00 :	  782f65:       00 
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f66:       8b 05 78 cd 43 00       mov    0x43cd78(%rip),%eax        # bbfce4 <MyProcPid>
         :	bool
         :	CHashInsert(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782f6c:       4d 03 7c 24 20          add    0x20(%r12),%r15
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
    0.00 :	  782f71:       41 39 44 24 38          cmp    %eax,0x38(%r12)
    0.00 :	  782f76:       74 26                   je     782f9e <CHashInsert+0x7e>
         :	        {
         :	                table->gc_pid = MyProcPid;
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f78:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  782f7e:       41 8b 54 24 10          mov    0x10(%r12),%edx
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :
         :	        /* If this process hasn't initialized gc_next yet, do that now. */
         :	        if (table->gc_pid != MyProcPid)
         :	        {
         :	                table->gc_pid = MyProcPid;
    0.00 :	  782f83:       41 89 44 24 38          mov    %eax,0x38(%r12)
         :	                table->gc_next = ((uint32) MyProcPid) % CHashTableNGarbage(table);
    0.00 :	  782f88:       8b 05 56 cd 43 00       mov    0x43cd56(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  782f8e:       83 c2 01                add    $0x1,%edx
    0.00 :	  782f91:       d3 ea                   shr    %cl,%edx
    0.00 :	  782f93:       89 d1                   mov    %edx,%ecx
    0.00 :	  782f95:       31 d2                   xor    %edx,%edx
    0.00 :	  782f97:       f7 f1                   div    %ecx
    0.00 :	  782f99:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	{
         :	        uint32          f_current;
         :	        CHashPtr        new;
         :
         :	        /* Pick a starting freelist base on our backend ID. */
         :	        f_current = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  782f9e:       0f b7 cf                movzwl %di,%ecx
    0.00 :	  782fa1:       89 f0                   mov    %esi,%eax
    0.00 :	  782fa3:       31 d2                   xor    %edx,%edx
    0.00 :	  782fa5:       f7 f1                   div    %ecx
    0.00 :	  782fa7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  782fad:       49 8b 74 24 28          mov    0x28(%r12),%rsi
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
    0.00 :	  782fb2:       41 bb fe ff ff ff       mov    $0xfffffffe,%r11d
         :	                 * If we attempt to pop the free-list and fail, we retry immediately
         :	                 * with the same free-list.  This reduces the frequency with which
         :	                 * we're obliged to update our hazard pointers, which is a material
         :	                 * savings due to the associated memory barrier.
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
    0.00 :	  782fb8:       44 8d 42 01             lea    0x1(%rdx),%r8d
    0.00 :	  782fbc:       44 89 c0                mov    %r8d,%eax
    0.00 :	  782fbf:       d3 e0                   shl    %cl,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:885
    0.97 :	  782fc1:       01 d0                   add    %edx,%eax
    0.00 :	  782fc3:       48 8d 0c 86             lea    (%rsi,%rax,4),%rcx
         :	                MyProc->hazard[0] = b;
    0.00 :	  782fc7:       48 8b 05 7a a9 3f 00    mov    0x3fa97a(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782fce:       48 89 88 e8 02 00 00    mov    %rcx,0x2e8(%rax)
         :	                pg_memory_barrier();
    0.00 :	  782fd5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                new = *b;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:888
    8.74 :	  782fda:       8b 19                   mov    (%rcx),%ebx
         :	                while (!CHashPtrIsInvalid(new))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:889
    0.97 :	  782fdc:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782fdf:       76 23                   jbe    783004 <CHashInsert+0xe4>
    0.00 :	  782fe1:       e9 52 01 00 00          jmpq   783138 <CHashInsert+0x218>
    0.00 :	  782fe6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  782fed:       00 00 00 
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
         :	                                return new;
         :	                        CHashTableIncrementStatistic(table, CHS_Allocate_Fail);
    0.00 :	  782ff0:       49 83 84 24 a0 00 00    addq   $0x1,0xa0(%r12)
    0.00 :	  782ff7:       00 01 
         :	                        new = *b;
    0.00 :	  782ff9:       8b 19                   mov    (%rcx),%ebx
         :	                 */
         :	                b = CHashTableGetFreeList(table, f_current);
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
    0.00 :	  782ffb:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  782ffe:       0f 87 34 01 00 00       ja     783138 <CHashInsert+0x218>
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:891
    0.97 :	  783004:       89 de                   mov    %ebx,%esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  783006:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                MyProc->hazard[0] = b;
         :	                pg_memory_barrier();
         :	                new = *b;
         :	                while (!CHashPtrIsInvalid(new))
         :	                {
         :	                        CHashNode  *n = CHashTableGetNode(table, new);
    0.00 :	  78300b:       d1 ee                   shr    %esi
         :	                         * n is computed from table->freelist[f_current], which could
         :	                         * be modified by concurrent activity, so we need a dependency
         :	                         * barrier here.
         :	                         */
         :	                        pg_read_barrier_depends();
         :	                        if (__sync_bool_compare_and_swap(b, new, n->un.gcnext))
    0.00 :	  78300d:       89 f2                   mov    %esi,%edx
    0.00 :	  78300f:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
    0.00 :	  783015:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:899
    3.88 :	  783019:       89 d8                   mov    %ebx,%eax
    0.00 :	  78301b:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
    0.00 :	  78301f:       75 cf                   jne    782ff0 <CHashInsert+0xd0>
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783021:       41 89 f5                mov    %esi,%r13d
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783024:       8b 4d a8                mov    -0x58(%rbp),%ecx
         :	         * Allocate and initialize a new entry, on the assumption that the insert
         :	         * will succeed.  If it ends up failing, we must be sure to put this back
         :	         * on some free list, lest it be permanently leaked.
         :	         */
         :	        new = CHashAllocate(table);
         :	        nnew = CHashTableGetNode(table, new);
    0.00 :	  783027:       45 0f af 6c 24 1c       imul   0x1c(%r12),%r13d
    0.00 :	  78302d:       4d 03 6c 24 30          add    0x30(%r12),%r13
         :	        nnew->un.hashcode = hashcode;
    0.00 :	  783032:       41 89 4d 04             mov    %ecx,0x4(%r13)
         :	        memcpy(CHashNodeGetItem(nnew), entry, table->desc.element_size);
    0.00 :	  783036:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  78303c:       49 8d 7d 08             lea    0x8(%r13),%rdi
    0.00 :	  783040:       48 8b 75 a0             mov    -0x60(%rbp),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:504
    1.94 :	  783044:       e8 a7 6b ce ff          callq  469bf0 <memcpy@plt>
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783049:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
    0.00 :	  78304f:       8b 55 ac                mov    -0x54(%rbp),%edx
    0.00 :	  783052:       d3 ea                   shr    %cl,%edx
    0.00 :	  783054:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78305a:       89 d0                   mov    %edx,%eax
    0.00 :	  78305c:       d3 e8                   shr    %cl,%eax
    0.00 :	  78305e:       01 d0                   add    %edx,%eax
    0.00 :	  783060:       48 8b 15 e1 a8 3f 00    mov    0x3fa8e1(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  783067:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  78306b:       49 03 44 24 28          add    0x28(%r12),%rax
    0.00 :	  783070:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  783077:       f0 83 04 24 00          lock addl $0x0,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:508
    1.94 :	  78307c:       4c 8d 75 b0             lea    -0x50(%rbp),%r14
    0.00 :	  783080:       eb 20                   jmp    7830a2 <CHashInsert+0x182>
    0.00 :	  783082:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * where N is the number of buckets and M is the number of elements
         :	                 * in the table.  Even for a quite modestly size table this is likely
         :	                 * to exceed the number of CPU cores.
         :	                 */
         :	                Assert(!CHashPtrIsMarked(scan.target));
         :	                nnew->next = scan.target;
    0.00 :	  783088:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  78308b:       41 89 45 00             mov    %eax,0x0(%r13)
         :	                if (!__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  78308f:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  783093:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  783096:       f0 0f b1 1a             lock cmpxchg %ebx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:540
    2.91 :	  78309a:       74 49                   je     7830e5 <CHashInsert+0x1c5>
         :	                                                                                  scan.target, new))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Insert_Retry);
    0.00 :	  78309c:       49 83 44 24 60 01       addq   $0x1,0x60(%r12)
         :	         * Scan the bucket.  If we don't find a match, use compare-and-swap to
         :	         * insert the new node at the insert position.  If we do find a match,
         :	         * return the data to the caller.
         :	         */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  7830a2:       48 8b 4d a0             mov    -0x60(%rbp),%rcx
    0.00 :	  7830a6:       8b 55 a8                mov    -0x58(%rbp),%edx
    0.00 :	  7830a9:       4d 89 f0                mov    %r14,%r8
    0.00 :	  7830ac:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  7830af:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  7830b2:       e8 e9 fb ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  7830b7:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  7830bb:       74 cb                   je     783088 <CHashInsert+0x168>
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  7830bd:       41 0f b7 44 24 0e       movzwl 0xe(%r12),%eax
    0.00 :	  7830c3:       48 8b 7d a0             mov    -0x60(%rbp),%rdi
    0.00 :	  7830c7:       41 0f b7 54 24 0c       movzwl 0xc(%r12),%edx
    0.00 :	  7830cd:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  7830d0:       48 01 f7                add    %rsi,%rdi
    0.00 :	  7830d3:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7830d7:       48 03 75 c0             add    -0x40(%rbp),%rsi
    0.00 :	  7830db:       29 c2                   sub    %eax,%edx
    0.00 :	  7830dd:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7830e0:       e8 0b 6b ce ff          callq  469bf0 <memcpy@plt>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  7830e5:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7830ea:       48 8b 05 57 a8 3f 00    mov    0x3fa857(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7830f1:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7830f8:       00 00 00 00 
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
         :	        if (scan.found)
    0.00 :	  7830fc:       31 c0                   xor    %eax,%eax
         :	         * progress at the time we popped the freelist has completed.  This
         :	         * guarantees that any allocation still in progress at the time this
         :	         * element makes it back to the freelist is trying to allocate some
         :	         * other node.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_Insert);
    0.00 :	  7830fe:       49 83 44 24 50 01       addq   $0x1,0x50(%r12)
         :	        if (scan.found)
    0.00 :	  783104:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  783108:       74 17                   je     783121 <CHashInsert+0x201>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Insert_Failed);
    0.00 :	  78310a:       49 83 44 24 58 01       addq   $0x1,0x58(%r12)
         :	                CHashAddToGarbage(table, bucket, new);
    0.00 :	  783110:       8b 75 ac                mov    -0x54(%rbp),%esi
    0.00 :	  783113:       89 da                   mov    %ebx,%edx
    0.00 :	  783115:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783118:       e8 33 fb ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  78311d:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
    0.00 :	  783121:       84 c0                   test   %al,%al
    0.00 :	  783123:       0f 94 c0                sete   %al
         :	        }
         :
         :	        /* The insert succeeded if and only if no duplicate was found. */
         :	        return !scan.found;
         :	}
    0.00 :	  783126:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  78312a:       5b                      pop    %rbx
    0.00 :	  78312b:       41 5c                   pop    %r12
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:576
    0.97 :	  78312d:       41 5d                   pop    %r13
    0.00 :	  78312f:       41 5e                   pop    %r14
    0.00 :	  783131:       41 5f                   pop    %r15
    0.00 :	  783133:       c9                      leaveq 
    0.00 :	  783134:       c3                      retq   
    0.00 :	  783135:       0f 1f 00                nopl   (%rax)
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783138:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  78313e:       8b 05 c4 59 3e 00       mov    0x3e59c4(%rip),%eax        # b68b08 <MyBackendId>
    0.00 :	  783144:       31 d2                   xor    %edx,%edx
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  783146:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  78314c:       4d 8b 4c 24 28          mov    0x28(%r12),%r9
         :	        CHashPtr        new;
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
    0.00 :	  783151:       f7 f7                   div    %edi
         :	        fh = CHashTableGetFreeList(table, f_home);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:932
    0.97 :	  783153:       8d 42 01                lea    0x1(%rdx),%eax
    0.00 :	  783156:       d3 e0                   shl    %cl,%eax
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783158:       41 0f b6 4c 24 14       movzbl 0x14(%r12),%ecx
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  78315e:       01 d0                   add    %edx,%eax
    0.00 :	  783160:       4c 8d 14 85 00 00 00    lea    0x0(,%rax,4),%r10
    0.00 :	  783167:       00 
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783168:       41 8b 44 24 3c          mov    0x3c(%r12),%eax
    0.00 :	  78316d:       8d 50 01                lea    0x1(%rax),%edx
    0.00 :	  783170:       41 8b 44 24 10          mov    0x10(%r12),%eax
    0.00 :	  783175:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  783178:       89 d0                   mov    %edx,%eax
    0.00 :	  78317a:       31 d2                   xor    %edx,%edx
    0.00 :	  78317c:       d3 ee                   shr    %cl,%esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  78317e:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  783184:       f7 f6                   div    %esi
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783186:       4c 89 ce                mov    %r9,%rsi
    0.00 :	  783189:       89 d0                   mov    %edx,%eax
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
         :
         :	        /* Select target garbage list. */
         :	        table->gc_next = (table->gc_next + 1) % CHashTableNGarbage(table);
    0.00 :	  78318b:       41 89 54 24 3c          mov    %edx,0x3c(%r12)
         :	        b = CHashTableGetGarbageList(table, table->gc_next);
    0.00 :	  783190:       d3 e8                   shr    %cl,%eax
    0.00 :	  783192:       01 d0                   add    %edx,%eax
    0.00 :	  783194:       49 8d 14 81             lea    (%r9,%rax,4),%rdx
         :	        garbage = *b;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:937
    0.97 :	  783198:       8b 1a                   mov    (%rdx),%ebx
         :
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:940
    2.91 :	  78319a:       83 fb fd                cmp    $0xfffffffd,%ebx
    0.00 :	  78319d:       76 11                   jbe    7831b0 <CHashInsert+0x290>
         :	                new = CHashAllocateViaGC(table);
         :	                if (!CHashPtrIsInvalid(new))
         :	                        return new;
         :
         :	                /* Advance to next freelist. */
         :	                f_current = (f_current + 1) % CHashTableNFreeLists(table);
    0.00 :	  78319f:       44 89 c0                mov    %r8d,%eax
    0.00 :	  7831a2:       31 d2                   xor    %edx,%edx
    0.00 :	  7831a4:       f7 f7                   div    %edi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:911
    0.97 :	  7831a6:       e9 0d fe ff ff          jmpq   782fb8 <CHashInsert+0x98>
    0.00 :	  7831ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        /* If list is empty, fail. */
         :	        if (CHashPtrIsInvalid(garbage))
         :	                return InvalidCHashPtr;
         :
         :	        /* If we're unable to empty the list via compare-and-swap, fail. */
         :	        if (!__sync_bool_compare_and_swap(b, garbage, InvalidCHashPtr))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:944
    1.94 :	  7831b0:       89 d8                   mov    %ebx,%eax
    0.97 :	  7831b2:       f0 44 0f b1 1a          lock cmpxchg %r11d,(%rdx)
    0.00 :	  7831b7:       74 1c                   je     7831d5 <CHashInsert+0x2b5>
         :	        {
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Dequeue_Fail);
    0.00 :	  7831b9:       49 83 84 24 b0 00 00    addq   $0x1,0xb0(%r12)
    0.00 :	  7831c0:       00 01 
    0.00 :	  7831c2:       49 8b 74 24 28          mov    0x28(%r12),%rsi
    0.00 :	  7831c7:       41 0f b6 4c 24 15       movzbl 0x15(%r12),%ecx
    0.00 :	  7831cd:       41 0f b7 7c 24 16       movzwl 0x16(%r12),%edi
    0.00 :	  7831d3:       eb ca                   jmp    78319f <CHashInsert+0x27f>
         :	         * requeues the garbage if it's not immediately recycleable, but
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
    0.00 :	  7831d5:       49 83 84 24 b8 00 00    addq   $0x1,0xb8(%r12)
    0.00 :	  7831dc:       00 01 
         :	        CHashNode  *n;
         :	        uint32          i;
         :
         :	        /* Pick a target freelist based on our backend ID. */
         :	        f_home = ((uint32) MyBackendId) % CHashTableNFreeLists(table);
         :	        fh = CHashTableGetFreeList(table, f_home);
    0.00 :	  7831de:       4f 8d 04 11             lea    (%r9,%r10,1),%r8
         :	         * it's not clear that we need such a thing.  On the flip side we
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
    0.00 :	  7831e2:       48 8b 05 5f a7 3f 00    mov    0x3fa75f(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  7831e9:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  7831f0:       00 00 00 00 
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    0.97 :	  7831f4:       48 8b 35 5d a7 3f 00    mov    0x3fa75d(%rip),%rsi        # b7d958 <ProcGlobal>
    0.97 :	  7831fb:       8b 46 10                mov    0x10(%rsi),%eax
    0.97 :	  7831fe:       85 c0                   test   %eax,%eax
    0.00 :	  783200:       74 5f                   je     783261 <CHashInsert+0x341>
    0.00 :	  783202:       31 ff                   xor    %edi,%edi
    0.00 :	  783204:       eb 1a                   jmp    783220 <CHashInsert+0x300>
    0.00 :	  783206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  78320d:       00 00 00 
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
    1.94 :	  783210:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783213:       74 23                   je     783238 <CHashInsert+0x318>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:971
    1.94 :	  783215:       83 c7 01                add    $0x1,%edi
    0.97 :	  783218:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78321b:       73 44                   jae    783261 <CHashInsert+0x341>
    1.94 :	  78321d:       0f 1f 00                nopl   (%rax)
         :	        {
         :	                volatile PGPROC *proc = &ProcGlobal->allProcs[i];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:973
    0.97 :	  783220:       89 f8                   mov    %edi,%eax
    2.91 :	  783222:       48 69 c0 f0 02 00 00    imul   $0x2f0,%rax,%rax
    1.94 :	  783229:       48 03 06                add    (%rsi),%rax
         :	                void       *hazard;
         :
         :	                hazard = proc->hazard[0];
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:976
    1.94 :	  78322c:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                if (hazard == b || hazard == fh)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:977
   17.48 :	  783233:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  783236:       75 d8                   jne    783210 <CHashInsert+0x2f0>
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Spin);
    0.00 :	  783238:       49 83 84 24 c0 00 00    addq   $0x1,0xc0(%r12)
    0.00 :	  78323f:       00 01 
         :	                        do
         :	                        {
         :	                                hazard = proc->hazard[0];
    0.00 :	  783241:       48 8b 88 e8 02 00 00    mov    0x2e8(%rax),%rcx
         :	                        } while (hazard == b || hazard == fh);
    0.00 :	  783248:       48 39 ca                cmp    %rcx,%rdx
    0.00 :	  78324b:       74 f4                   je     783241 <CHashInsert+0x321>
    0.00 :	  78324d:       49 39 c8                cmp    %rcx,%r8
    0.00 :	  783250:       74 ef                   je     783241 <CHashInsert+0x321>
    0.00 :	  783252:       48 8b 35 ff a6 3f 00    mov    0x3fa6ff(%rip),%rsi        # b7d958 <ProcGlobal>
         :	         * might want to eventually enter a longer sleep here, or PANIC,
         :	         * but it's not clear exactly how to calibrate that.
         :	         */
         :	        CHashTableIncrementStatistic(table, CHS_GC);
         :	        MyProc->hazard[0] = NULL;
         :	        for (i = 0; i < ProcGlobal->allProcCount; i++)
    0.00 :	  783259:       83 c7 01                add    $0x1,%edi
    0.00 :	  78325c:       3b 7e 10                cmp    0x10(%rsi),%edi
    0.00 :	  78325f:       72 bf                   jb     783220 <CHashInsert+0x300>
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
    0.00 :	  783261:       89 de                   mov    %ebx,%esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  783263:       49 8b 44 24 30          mov    0x30(%r12),%rax
         :	                }
         :	        }
         :
         :	        /* Remove one item from list to satisfy current allocation. */
         :	        new = garbage;
         :	        n = CHashTableGetNode(table, new);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:989
    1.94 :	  783268:       d1 ee                   shr    %esi
         :	        pg_read_barrier_depends();
         :	        fhead = n->un.gcnext;
    0.00 :	  78326a:       89 f2                   mov    %esi,%edx
    0.00 :	  78326c:       41 0f af 54 24 1c       imul   0x1c(%r12),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:991
    0.97 :	  783272:       8b 54 10 04             mov    0x4(%rax,%rdx,1),%edx
         :
         :	        if (CHashPtrIsInvalid(fhead))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:993
   29.13 :	  783276:       83 fa fd                cmp    $0xfffffffd,%edx
    0.00 :	  783279:       76 13                   jbe    78328e <CHashInsert+0x36e>
         :	                 * before we overwrite n->un.gcnext with a new hashcode.
         :	                 * (This is only needed when we reclaim exactly one node,
         :	                 * because in any other case we'll do a compare-and-swap
         :	                 * before returning, which implies a full barrier.)
         :	                 */
         :	                pg_memory_barrier();
    0.00 :	  78327b:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Skipped);
    0.00 :	  783280:       49 83 84 24 c8 00 00    addq   $0x1,0xc8(%r12)
    0.00 :	  783287:       00 01 
    0.00 :	  783289:       e9 93 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        }
         :	        else if (__sync_bool_compare_and_swap(fh, InvalidCHashPtr, fhead))
    0.00 :	  78328e:       b8 fe ff ff ff          mov    $0xfffffffe,%eax
    0.00 :	  783293:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  783298:       74 41                   je     7832db <CHashInsert+0x3bb>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  78329a:       4d 8b 4c 24 30          mov    0x30(%r12),%r9
    0.00 :	  78329f:       41 8b 7c 24 1c          mov    0x1c(%r12),%edi
    0.00 :	  7832a4:       89 d0                   mov    %edx,%eax
         :
         :	                /* Walk list of reclaimed elements to end. */
         :	                fcurrent = fhead;
         :	                for (;;)
         :	                {
         :	                        n = CHashTableGetNode(table, fcurrent);
    0.00 :	  7832a6:       d1 e8                   shr    %eax
    0.00 :	  7832a8:       0f af c7                imul   %edi,%eax
    0.00 :	  7832ab:       49 8d 0c 01             lea    (%r9,%rax,1),%rcx
         :	                        fnext = n->un.gcnext;
    0.00 :	  7832af:       8b 41 04                mov    0x4(%rcx),%eax
         :	                        if (CHashPtrIsInvalid(fnext))
    0.00 :	  7832b2:       83 f8 fd                cmp    $0xfffffffd,%eax
    0.00 :	  7832b5:       76 ef                   jbe    7832a6 <CHashInsert+0x386>
    0.00 :	  7832b7:       eb 10                   jmp    7832c9 <CHashInsert+0x3a9>
    0.00 :	  7832b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        oldhead = *fh;
         :	                        n->un.gcnext = oldhead;
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
         :	                                break;
         :	                        CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Retry);
    0.00 :	  7832c0:       49 83 84 24 d8 00 00    addq   $0x1,0xd8(%r12)
    0.00 :	  7832c7:       00 01 
         :	                }
         :
         :	                /* Push reclaimed elements onto home free list. */
         :	                for (;;)
         :	                {
         :	                        oldhead = *fh;
    0.00 :	  7832c9:       41 8b 00                mov    (%r8),%eax
         :	                        n->un.gcnext = oldhead;
    0.00 :	  7832cc:       89 41 04                mov    %eax,0x4(%rcx)
         :	                        if (__sync_bool_compare_and_swap(fh, oldhead, fhead))
    0.00 :	  7832cf:       f0 41 0f b1 10          lock cmpxchg %edx,(%r8)
    0.00 :	  7832d4:       75 ea                   jne    7832c0 <CHashInsert+0x3a0>
    0.00 :	  7832d6:       e9 46 fd ff ff          jmpq   783021 <CHashInsert+0x101>
         :	        {
         :	                /*
         :	                 * Our free list is empty, and we've succesfully pushed the
         :	                 * reclaimed nodes onto it.  So we're done.
         :	                 */
         :	                CHashTableIncrementStatistic(table, CHS_GC_Reclaim_Fast);
    0.00 :	  7832db:       49 83 84 24 d0 00 00    addq   $0x1,0xd0(%r12)
    0.00 :	  7832e2:       00 01 
    0.00 :	  7832e4:       e9 38 fd ff ff          jmpq   783021 <CHashInsert+0x101>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   35.05 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   32.99 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   11.34 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    6.19 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
    6.19 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    5.15 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:665
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:680
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b16a0 <ExecEvalScalarVarFast>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
   35.05 :	  5b16a0:       55                      push   %rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16a1:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Var                *variable = (Var *) exprstate->expr;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:665
    1.03 :	  5b16a4:       4c 8b 47 08             mov    0x8(%rdi),%r8
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalScalarVarFast(ExprState *exprstate, ExprContext *econtext,
         :	                                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:664
    5.15 :	  5b16a8:       48 89 e5                mov    %rsp,%rbp
         :	        Var                *variable = (Var *) exprstate->expr;
         :	        TupleTableSlot *slot;
         :	        AttrNumber      attnum;
         :
         :	        if (isDone)
    0.00 :	  5b16ab:       74 06                   je     5b16b3 <ExecEvalScalarVarFast+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5b16ad:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
    1.03 :	  5b16b3:       41 8b 40 04             mov    0x4(%r8),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:673
   32.99 :	  5b16b7:       3d e8 fd 00 00          cmp    $0xfde8,%eax
    0.00 :	  5b16bc:       74 1a                   je     5b16d8 <ExecEvalScalarVarFast+0x38>
   11.34 :	  5b16be:       3d e9 fd 00 00          cmp    $0xfde9,%eax
    0.00 :	  5b16c3:       74 2b                   je     5b16f0 <ExecEvalScalarVarFast+0x50>
         :
         :	                        /* INDEX_VAR is handled by default case */
         :
         :	                default:                                /* get the tuple from the relation being
         :	                                                                 * scanned */
         :	                        slot = econtext->ecxt_scantuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:687
    6.19 :	  5b16c5:       48 8b 7e 08             mov    0x8(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16c9:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16ce:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:694
    6.19 :	  5b16cf:       e9 2c dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16d4:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	        /* Get the input slot and attribute number we want */
         :	        switch (variable->varno)
         :	        {
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
    0.00 :	  5b16d8:       48 8b 7e 10             mov    0x10(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16dc:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16e1:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16e2:       e9 19 dd eb ff          jmpq   46f400 <slot_getattr>
    0.00 :	  5b16e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b16ee:       00 00 
         :	                case INNER_VAR: /* get the tuple from the inner node */
         :	                        slot = econtext->ecxt_innertuple;
         :	                        break;
         :
         :	                case OUTER_VAR: /* get the tuple from the outer node */
         :	                        slot = econtext->ecxt_outertuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:680
    1.03 :	  5b16f0:       48 8b 7e 18             mov    0x18(%rsi),%rdi
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16f4:       41 0f bf 70 08          movswl 0x8(%r8),%esi
         :	}
    0.00 :	  5b16f9:       c9                      leaveq 
         :	        }
         :
         :	        attnum = variable->varattno;
         :
         :	        /* Fetch the value from the slot */
         :	        return slot_getattr(slot, attnum, isNull);
    0.00 :	  5b16fa:       e9 01 dd eb ff          jmpq   46f400 <slot_getattr>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   12.64 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
   11.49 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    8.05 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    8.05 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1099
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    5.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    5.75 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    4.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    4.60 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    2.30 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    2.30 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    1.15 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5750 <HeapTupleSatisfiesMVCC>:
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:918
    4.60 :	  7a5750:       55                      push   %rbp
    1.15 :	  7a5751:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5754:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    1.15 :	  7a5758:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    2.30 :	  7a575c:       41 89 d6                mov    %edx,%r14d
    3.45 :	  7a575f:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    1.15 :	  7a5763:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7a5767:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTupleHeader tuple = htup->t_data;
    0.00 :	  7a576b:       48 8b 5f 10             mov    0x10(%rdi),%rbx
         :	 * can't see it.)
         :	 */
         :	bool
         :	HeapTupleSatisfiesMVCC(HeapTuple htup, Snapshot snapshot,
         :	                                           Buffer buffer)
         :	{
    3.45 :	  7a576f:       49 89 f5                mov    %rsi,%r13
         :	        HeapTupleHeader tuple = htup->t_data;
         :
         :	        Assert(ItemPointerIsValid(&htup->t_self));
         :	        Assert(htup->t_tableOid != InvalidOid);
         :
         :	        if (!HeapTupleHeaderXminCommitted(tuple))
    0.00 :	  7a5772:       0f b7 4b 14             movzwl 0x14(%rbx),%ecx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
   12.64 :	  7a5776:       0f b7 d1                movzwl %cx,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:924
    3.45 :	  7a5779:       f6 c6 01                test   $0x1,%dh
    0.00 :	  7a577c:       75 72                   jne    7a57f0 <HeapTupleSatisfiesMVCC+0xa0>
         :	        {
         :	                if (HeapTupleHeaderXminInvalid(tuple))
    0.00 :	  7a577e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5780:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a5785:       3d 00 02 00 00          cmp    $0x200,%eax
    0.00 :	  7a578a:       0f 84 06 01 00 00       je     7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :
         :	                /* Used by pre-9.0 binary upgrades */
         :	                if (tuple->t_infomask & HEAP_MOVED_OFF)
    0.00 :	  7a5790:       f6 c6 40                test   $0x40,%dh
    0.00 :	  7a5793:       0f 84 27 01 00 00       je     7a58c0 <HeapTupleSatisfiesMVCC+0x170>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a5799:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a579c:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a57a1:       74 04                   je     7a57a7 <HeapTupleSatisfiesMVCC+0x57>
    0.00 :	  7a57a3:       44 8b 63 08             mov    0x8(%rbx),%r12d
         :
         :	                        if (TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a57a7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57aa:       e8 f1 ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a57af:       84 c0                   test   %al,%al
    0.00 :	  7a57b1:       0f 85 df 00 00 00       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;
         :	                        if (!TransactionIdIsInProgress(xvac))
    0.00 :	  7a57b7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ba:       e8 f1 c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a57bf:       84 c0                   test   %al,%al
    0.00 :	  7a57c1:       0f 85 1f 01 00 00       jne    7a58e6 <HeapTupleSatisfiesMVCC+0x196>
         :	                        {
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a57c7:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a57ca:       e8 11 ab d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a57cf:       84 c0                   test   %al,%al
    0.00 :	  7a57d1:       0f 85 79 02 00 00       jne    7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
         :	                                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a57d7:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a57dc:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a57de:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a57e1:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a57e4:       e8 b7 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a57e9:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    0.00 :	  7a57ed:       0f 1f 00                nopl   (%rax)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
   11.49 :	  7a57f0:       89 d0                   mov    %edx,%eax
    0.00 :	  7a57f2:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a57f7:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a57fc:       0f 85 86 00 00 00       jne    7a5888 <HeapTupleSatisfiesMVCC+0x138>
         :	                return false;                   /* treat as still in progress */
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid or aborted */
         :	                return true;
         :
         :	        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1035
    6.90 :	  7a5802:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5808:       0f 85 a2 00 00 00       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a580e:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5810:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a5815:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5818:       0f 84 92 00 00 00       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                return true;
         :
         :	        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a581e:       f6 c6 10                test   $0x10,%dh
    0.00 :	  7a5821:       0f 85 b9 01 00 00       jne    7a59e0 <HeapTupleSatisfiesMVCC+0x290>
         :	                }
         :	                /* it must have aborted or crashed */
         :	                return true;
         :	        }
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
    0.00 :	  7a5827:       80 e6 04                and    $0x4,%dh
    0.00 :	  7a582a:       75 44                   jne    7a5870 <HeapTupleSatisfiesMVCC+0x120>
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a582c:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a582f:       90                      nop
    0.00 :	  7a5830:       e8 6b ec d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5835:       84 c0                   test   %al,%al
    0.00 :	  7a5837:       0f 85 43 01 00 00       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :
         :	                if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a583d:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5840:       e8 6b c4 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5845:       84 c0                   test   %al,%al
    0.00 :	  7a5847:       75 67                   jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5849:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a584c:       e8 8f aa d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5851:       84 c0                   test   %al,%al
    0.00 :	  7a5853:       0f 84 20 02 00 00       je     7a5a79 <HeapTupleSatisfiesMVCC+0x329>
         :	                                                InvalidTransactionId);
         :	                        return true;
         :	                }
         :
         :	                /* xmax transaction committed */
         :	                SetHintBits(tuple, buffer, HEAP_XMAX_COMMITTED,
    0.00 :	  7a5859:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	  7a585c:       ba 00 04 00 00          mov    $0x400,%edx
    0.00 :	  7a5861:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5864:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5867:       e8 34 f2 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a586c:       0f 1f 40 00             nopl   0x0(%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5870:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5873:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5876:       e8 85 fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a587b:       84 c0                   test   %al,%al
    0.00 :	  7a587d:       0f 95 c0                setne  %al
    0.00 :	  7a5880:       eb 16                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5882:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    8.05 :	  7a5888:       8b 3b                   mov    (%rbx),%edi
    5.75 :	  7a588a:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a588d:       e8 6e fd ff ff          callq  7a5600 <XidInMVCCSnapshot>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    4.60 :	  7a5892:       84 c0                   test   %al,%al
    0.00 :	  7a5894:       74 6a                   je     7a5900 <HeapTupleSatisfiesMVCC+0x1b0>
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
    0.00 :	  7a5896:       31 c0                   xor    %eax,%eax
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    5.75 :	  7a5898:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    1.15 :	  7a589c:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    1.15 :	  7a58a1:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    6.90 :	  7a58a6:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  7a58ab:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1103
    3.45 :	  7a58ac:       c3                      retq   
    0.00 :	  7a58ad:       0f 1f 00                nopl   (%rax)
         :	        }
         :
         :	        /*
         :	         * OK, the deleting transaction committed too ... but when?
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1099
    8.05 :	  7a58b0:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  7a58b5:       eb e1                   jmp    7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a58b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  7a58be:       00 00 
         :	                                SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                        InvalidTransactionId);
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
    0.00 :	  7a58c0:       66 85 c9                test   %cx,%cx
    0.00 :	  7a58c3:       79 4b                   jns    7a5910 <HeapTupleSatisfiesMVCC+0x1c0>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a58c5:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  7a58c8:       66 f7 c2 00 c0          test   $0xc000,%dx
    0.00 :	  7a58cd:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a58d0:       0f 85 fa 00 00 00       jne    7a59d0 <HeapTupleSatisfiesMVCC+0x280>
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
    0.00 :	  7a58d6:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a58d9:       e8 c2 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a58de:       84 c0                   test   %al,%al
    0.00 :	  7a58e0:       0f 84 4a 01 00 00       je     7a5a30 <HeapTupleSatisfiesMVCC+0x2e0>
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a58e6:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :
         :	        /*
         :	         * By here, the inserting transaction has committed - have to check
         :	         * when...
         :	         */
         :	        if (!HeapTupleHeaderXminFrozen(tuple)
    0.00 :	  7a58ea:       89 d0                   mov    %edx,%eax
    0.00 :	  7a58ec:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  7a58f1:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  7a58f6:       0f 84 06 ff ff ff       je     7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a58fc:       eb 8a                   jmp    7a5888 <HeapTupleSatisfiesMVCC+0x138>
    0.00 :	  7a58fe:       66 90                   xchg   %ax,%ax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1028
    2.30 :	  7a5900:       0f b7 53 14             movzwl 0x14(%rbx),%edx
    1.15 :	  7a5904:       e9 f9 fe ff ff          jmpq   7a5802 <HeapTupleSatisfiesMVCC+0xb2>
    0.00 :	  7a5909:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                InvalidTransactionId);
         :	                                        return false;
         :	                                }
         :	                        }
         :	                }
         :	                else if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5910:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a5912:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5918:       e8 83 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a591d:       84 c0                   test   %al,%al
    0.00 :	  7a591f:       90                      nop
    0.00 :	  7a5920:       74 76                   je     7a5998 <HeapTupleSatisfiesMVCC+0x248>
         :	                {
         :	                        if (HeapTupleHeaderGetCmin(tuple) >= snapshot->curcid)
    0.00 :	  7a5922:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5925:       e8 96 eb ff ff          callq  7a44c0 <HeapTupleHeaderGetCmin>
    0.00 :	  7a592a:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a592e:       66 90                   xchg   %ax,%ax
    0.00 :	  7a5930:       0f 83 60 ff ff ff       jae    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                return false;   /* inserted after scan started */
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_INVALID)      /* xid invalid */
    0.00 :	  7a5936:       0f b7 53 14             movzwl 0x14(%rbx),%edx
         :	                                return true;
         :
         :	                        if (HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask))        /* not deleter */
    0.00 :	  7a593a:       f7 c2 80 08 00 00       test   $0x880,%edx
    0.00 :	  7a5940:       0f 85 6a ff ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5946:       89 d0                   mov    %edx,%eax
    0.00 :	  7a5948:       25 50 10 00 00          and    $0x1050,%eax
    0.00 :	  7a594d:       83 f8 40                cmp    $0x40,%eax
    0.00 :	  7a5950:       0f 84 5a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                                return true;
         :
         :	                        if (tuple->t_infomask & HEAP_XMAX_IS_MULTI)
    0.00 :	  7a5956:       80 e6 10                and    $0x10,%dh
    0.00 :	  7a5959:       0f 84 0a 01 00 00       je     7a5a69 <HeapTupleSatisfiesMVCC+0x319>
         :	                        {
         :	                                TransactionId xmax;
         :
         :	                                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a595f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5962:       e8 b9 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  7a5967:       89 c7                   mov    %eax,%edi
         :
         :	                                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                                Assert(TransactionIdIsValid(xmax));
         :
         :	                                /* updating subtransaction must have aborted */
         :	                                if (!TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a5969:       e8 32 eb d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a596e:       84 c0                   test   %al,%al
    0.00 :	  7a5970:       0f 84 3a ff ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
    0.00 :	  7a5976:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  7a597d:       00 00 00 
         :
         :	        if (!(tuple->t_infomask & HEAP_XMAX_COMMITTED))
         :	        {
         :	                if (TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
    0.00 :	  7a5980:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5983:       e8 58 eb ff ff          callq  7a44e0 <HeapTupleHeaderGetCmax>
    0.00 :	  7a5988:       41 3b 45 2c             cmp    0x2c(%r13),%eax
    0.00 :	  7a598c:       0f 93 c0                setae  %al
    0.00 :	  7a598f:       e9 04 ff ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
    0.00 :	  7a5994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                else if (TransactionIdIsInProgress(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a5998:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a599a:       e8 11 c3 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a599f:       84 c0                   test   %al,%al
    0.00 :	  7a59a1:       0f 85 ef fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                        return false;
         :	                else if (TransactionIdDidCommit(HeapTupleHeaderGetRawXmin(tuple)))
    0.00 :	  7a59a7:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  7a59a9:       e8 32 a9 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a59ae:       84 c0                   test   %al,%al
    0.00 :	  7a59b0:       0f 84 9a 00 00 00       je     7a5a50 <HeapTupleSatisfiesMVCC+0x300>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
    0.00 :	  7a59b6:       8b 0b                   mov    (%rbx),%ecx
    0.00 :	  7a59b8:       ba 00 01 00 00          mov    $0x100,%edx
    0.00 :	  7a59bd:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a59c0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59c3:       e8 d8 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a59c8:       e9 19 ff ff ff          jmpq   7a58e6 <HeapTupleSatisfiesMVCC+0x196>
    0.00 :	  7a59cd:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                /* Used by pre-9.0 binary upgrades */
         :	                else if (tuple->t_infomask & HEAP_MOVED_IN)
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
    0.00 :	  7a59d0:       44 8b 63 08             mov    0x8(%rbx),%r12d
    0.00 :	  7a59d4:       e9 fd fe ff ff          jmpq   7a58d6 <HeapTupleSatisfiesMVCC+0x186>
    0.00 :	  7a59d9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59e0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a59e3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a59e8:       e8 33 17 cf ff          callq  497120 <HeapTupleGetUpdateXid>
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59ed:       89 c7                   mov    %eax,%edi
         :	                TransactionId xmax;
         :
         :	                /* already checked above */
         :	                Assert(!HEAP_XMAX_IS_LOCKED_ONLY(tuple->t_infomask));
         :
         :	                xmax = HeapTupleGetUpdateXid(tuple);
    0.00 :	  7a59ef:       41 89 c4                mov    %eax,%r12d
         :
         :	                /* not LOCKED_ONLY, so it has to have an xmax */
         :	                Assert(TransactionIdIsValid(xmax));
         :
         :	                if (TransactionIdIsCurrentTransactionId(xmax))
    0.00 :	  7a59f2:       e8 a9 ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a59f7:       84 c0                   test   %al,%al
    0.00 :	  7a59f9:       75 85                   jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        if (HeapTupleHeaderGetCmax(tuple) >= snapshot->curcid)
         :	                                return true;    /* deleted after scan started */
         :	                        else
         :	                                return false;   /* deleted before scan started */
         :	                }
         :	                if (TransactionIdIsInProgress(xmax))
    0.00 :	  7a59fb:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a59fe:       e8 ad c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a03:       84 c0                   test   %al,%al
    0.00 :	  7a5a05:       0f 85 a5 fe ff ff       jne    7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                        return true;
         :	                if (TransactionIdDidCommit(xmax))
    0.00 :	  7a5a0b:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a0e:       e8 cd a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a13:       84 c0                   test   %al,%al
    0.00 :	  7a5a15:       0f 84 95 fe ff ff       je     7a58b0 <HeapTupleSatisfiesMVCC+0x160>
         :	                {
         :	                        /* updating transaction committed, but when? */
         :	                        if (XidInMVCCSnapshot(xmax, snapshot))
    0.00 :	  7a5a1b:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7a5a1e:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a21:       e8 da fb ff ff          callq  7a5600 <XidInMVCCSnapshot>
    0.00 :	  7a5a26:       84 c0                   test   %al,%al
    0.00 :	  7a5a28:       0f 95 c0                setne  %al
    0.00 :	  7a5a2b:       e9 68 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                {
         :	                        TransactionId xvac = HeapTupleHeaderGetXvac(tuple);
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(xvac))
         :	                        {
         :	                                if (TransactionIdIsInProgress(xvac))
    0.00 :	  7a5a30:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a33:       e8 78 c2 ed ff          callq  681cb0 <TransactionIdIsInProgress>
    0.00 :	  7a5a38:       84 c0                   test   %al,%al
    0.00 :	  7a5a3a:       0f 85 56 fe ff ff       jne    7a5896 <HeapTupleSatisfiesMVCC+0x146>
         :	                                        return false;
         :	                                if (TransactionIdDidCommit(xvac))
    0.00 :	  7a5a40:       44 89 e7                mov    %r12d,%edi
    0.00 :	  7a5a43:       e8 98 a8 d1 ff          callq  4c02e0 <TransactionIdDidCommit>
    0.00 :	  7a5a48:       84 c0                   test   %al,%al
    0.00 :	  7a5a4a:       0f 85 87 fd ff ff       jne    7a57d7 <HeapTupleSatisfiesMVCC+0x87>
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_COMMITTED,
         :	                                                HeapTupleHeaderGetRawXmin(tuple));
         :	                else
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMIN_INVALID,
    0.00 :	  7a5a50:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a52:       ba 00 02 00 00          mov    $0x200,%edx
    0.00 :	  7a5a57:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a5a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a5d:       e8 3e f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a62:       31 c0                   xor    %eax,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a64:       e9 2f fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>
         :	                                        return true;    /* updated after scan started */
         :	                                else
         :	                                        return false;           /* updated before scan started */
         :	                        }
         :
         :	                        if (!TransactionIdIsCurrentTransactionId(HeapTupleHeaderGetRawXmax(tuple)))
    0.00 :	  7a5a69:       8b 7b 04                mov    0x4(%rbx),%edi
    0.00 :	  7a5a6c:       e8 2f ea d1 ff          callq  4c44a0 <TransactionIdIsCurrentTransactionId>
    0.00 :	  7a5a71:       84 c0                   test   %al,%al
    0.00 :	  7a5a73:       0f 85 07 ff ff ff       jne    7a5980 <HeapTupleSatisfiesMVCC+0x230>
         :	                        return true;
         :
         :	                if (!TransactionIdDidCommit(HeapTupleHeaderGetRawXmax(tuple)))
         :	                {
         :	                        /* it must have aborted or crashed */
         :	                        SetHintBits(tuple, buffer, HEAP_XMAX_INVALID,
    0.00 :	  7a5a79:       31 c9                   xor    %ecx,%ecx
    0.00 :	  7a5a7b:       ba 00 08 00 00          mov    $0x800,%edx
    0.00 :	  7a5a80:       44 89 f6                mov    %r14d,%esi
    0.00 :	  7a5a83:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7a5a86:       e8 15 f0 ff ff          callq  7a4aa0 <SetHintBits>
    0.00 :	  7a5a8b:       b8 01 00 00 00          mov    $0x1,%eax
         :	         */
         :	        if (XidInMVCCSnapshot(HeapTupleHeaderGetRawXmax(tuple), snapshot))
         :	                return true;                    /* treat as still in progress */
         :
         :	        return false;
         :	}
    0.00 :	  7a5a90:       e9 03 fe ff ff          jmpq   7a5898 <HeapTupleSatisfiesMVCC+0x148>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   32.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
   32.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
    9.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:593
    6.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
    6.10 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:592
    4.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:592
    3.66 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:590
    3.66 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:590
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c9880 <date_lt_timestamp>:
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) != 0);
         :	}
         :
         :	Datum
         :	date_lt_timestamp(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:585
   32.93 :	  6c9880:       55                      push   %rbp
   32.93 :	  6c9881:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6c9884:       53                      push   %rbx
    6.10 :	  6c9885:       48 83 ec 08             sub    $0x8,%rsp
         :	        DateADT         dateVal = PG_GETARG_DATEADT(0);
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
    0.00 :	  6c9889:       48 8b 5f 28             mov    0x28(%rdi),%rbx
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
    0.00 :	  6c988d:       48 8b 7f 20             mov    0x20(%rdi),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:590
    3.66 :	  6c9891:       e8 7a dd ff ff          callq  6c7610 <date2timestamp>
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:592
    4.88 :	  6c9896:       48 89 de                mov    %rbx,%rsi
         :	{
         :	        DateADT         dateVal = PG_GETARG_DATEADT(0);
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:590
    3.66 :	  6c9899:       48 89 c7                mov    %rax,%rdi
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
    0.00 :	  6c989c:       e8 cf 6f 07 00          callq  740870 <timestamp_cmp_internal>
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:592
    6.10 :	  6c98a1:       48 98                   cltq   
         :	}
    0.00 :	  6c98a3:       48 83 c4 08             add    $0x8,%rsp
         :	        Timestamp       dt2 = PG_GETARG_TIMESTAMP(1);
         :	        Timestamp       dt1;
         :
         :	        dt1 = date2timestamp(dateVal);
         :
         :	        PG_RETURN_BOOL(timestamp_cmp_internal(dt1, dt2) < 0);
    0.00 :	  6c98a7:       48 c1 e8 3f             shr    $0x3f,%rax
         :	}
    0.00 :	  6c98ab:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:593
    9.76 :	  6c98ac:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.78 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   32.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   13.51 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   12.16 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
    4.05 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:344
    2.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
    1.35 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:344
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c6b50 <date_ge>:
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   33.78 :	  6c6b50:       48 8b 47 28             mov    0x28(%rdi),%rax
   32.43 :	  6c6b54:       39 47 20                cmp    %eax,0x20(%rdi)
   13.51 :	  6c6b57:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
    2.70 :	  6c6b58:       48 89 e5                mov    %rsp,%rbp
         :	        DateADT         dateVal1 = PG_GETARG_DATEADT(0);
         :	        DateADT         dateVal2 = PG_GETARG_DATEADT(1);
         :
         :	        PG_RETURN_BOOL(dateVal1 >= dateVal2);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:344
    1.35 :	  6c6b5b:       c9                      leaveq 
         :	        PG_RETURN_BOOL(dateVal1 > dateVal2);
         :	}
         :
         :	Datum
         :	date_ge(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:339
   12.16 :	  6c6b5c:       0f 9d c0                setge  %al
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:344
    4.05 :	  6c6b5f:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   97.10 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:438
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:397
    1.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:419
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b43e0 <ExecStoreMinimalTuple>:
         :	 */
         :	TupleTableSlot *
         :	ExecStoreMinimalTuple(MinimalTuple mtup,
         :	                                          TupleTableSlot *slot,
         :	                                          bool shouldFree)
         :	{
    0.00 :	  5b43e0:       55                      push   %rbp
    0.00 :	  5b43e1:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:397
    1.45 :	  5b43e4:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  5b43e8:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  5b43ec:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b43ef:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  5b43f3:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b43f7:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	 */
         :	TupleTableSlot *
         :	ExecStoreMinimalTuple(MinimalTuple mtup,
         :	                                          TupleTableSlot *slot,
         :	                                          bool shouldFree)
         :	{
    0.00 :	  5b43fb:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b43fe:       41 89 d5                mov    %edx,%r13d
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b4401:       75 6d                   jne    5b4470 <ExecStoreMinimalTuple+0x90>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b4403:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4407:       75 57                   jne    5b4460 <ExecStoreMinimalTuple+0x80>
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b4409:       8b 7b 20                mov    0x20(%rbx),%edi
    0.00 :	  5b440c:       85 ff                   test   %edi,%edi
    0.00 :	  5b440e:       74 05                   je     5b4415 <ExecStoreMinimalTuple+0x35>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4410:       e8 4b 0a 0c 00          callq  674e60 <ReleaseBuffer>
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
    0.00 :	  5b4415:       48 8d 43 40             lea    0x40(%rbx),%rax
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
    0.00 :	  5b4419:       44 88 6b 06             mov    %r13b,0x6(%rbx)
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
    0.00 :	  5b441d:       4c 89 63 38             mov    %r12,0x38(%rbx)
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
         :	                ReleaseBuffer(slot->tts_buffer);
         :
         :	        slot->tts_buffer = InvalidBuffer;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:419
    1.45 :	  5b4421:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
    0.00 :	  5b4428:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = false;
    0.00 :	  5b442c:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
    0.00 :	  5b4430:       48 89 43 08             mov    %rax,0x8(%rbx)
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  5b4434:       41 8b 04 24             mov    (%r12),%eax
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:438
   97.10 :	  5b4438:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
         :	        /* no need to set t_self or t_tableOid since we won't allow access */
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b443c:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	        slot->tts_shouldFree = false;
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
    0.00 :	  5b4443:       83 c0 08                add    $0x8,%eax
    0.00 :	  5b4446:       89 43 40                mov    %eax,0x40(%rbx)
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
    0.00 :	  5b4449:       49 8d 44 24 f8          lea    -0x8(%r12),%rax
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b444e:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
         :	        slot->tts_shouldFreeMin = shouldFree;
         :	        slot->tts_tuple = &slot->tts_minhdr;
         :	        slot->tts_mintuple = mtup;
         :
         :	        slot->tts_minhdr.t_len = mtup->t_len + MINIMAL_TUPLE_OFFSET;
         :	        slot->tts_minhdr.t_data = (HeapTupleHeader) ((char *) mtup - MINIMAL_TUPLE_OFFSET);
    0.00 :	  5b4452:       48 89 43 50             mov    %rax,0x50(%rbx)
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
    0.00 :	  5b4456:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b4459:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  5b445d:       c9                      leaveq 
    0.00 :	  5b445e:       c3                      retq   
    0.00 :	  5b445f:       90                      nop
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4460:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4464:       e8 47 a8 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4469:       eb 9e                   jmp    5b4409 <ExecStoreMinimalTuple+0x29>
    0.00 :	  5b446b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4470:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4474:       e8 47 a8 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4479:       eb 88                   jmp    5b4403 <ExecStoreMinimalTuple+0x23>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   19.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
   18.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
   18.03 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    9.84 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    6.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    4.92 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    3.28 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:41
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    1.64 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3750 <ExecScan>:
         :	 */
         :	TupleTableSlot *
         :	ExecScan(ScanState *node,
         :	                 ExecScanAccessMtd accessMtd,   /* function returning a tuple */
         :	                 ExecScanRecheckMtd recheckMtd)
         :	{
    0.00 :	  5b3750:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:111
    1.64 :	  5b3751:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b3754:       41 57                   push   %r15
    0.00 :	  5b3756:       41 56                   push   %r14
    0.00 :	  5b3758:       41 55                   push   %r13
    0.00 :	  5b375a:       41 54                   push   %r12
    0.00 :	  5b375c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5b375f:       53                      push   %rbx
    0.00 :	  5b3760:       48 83 ec 28             sub    $0x28,%rsp
    3.28 :	  5b3764:       48 89 75 b8             mov    %rsi,-0x48(%rbp)
    0.00 :	  5b3768:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b376c:       48 8b 47 28             mov    0x28(%rdi),%rax
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b3770:       48 85 c0                test   %rax,%rax
         :	        TupleTableSlot *resultSlot;
         :
         :	        /*
         :	         * Fetch data from node
         :	         */
         :	        qual = node->ps.qual;
    0.00 :	  5b3773:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        projInfo = node->ps.ps_ProjInfo;
    0.00 :	  5b3777:       4c 8b 77 68             mov    0x68(%rdi),%r14
         :	        econtext = node->ps.ps_ExprContext;
    0.00 :	  5b377b:       4c 8b 6f 60             mov    0x60(%rdi),%r13
         :
         :	        /*
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
    0.00 :	  5b377f:       41 0f 94 c7             sete   %r15b
    0.00 :	  5b3783:       75 09                   jne    5b378e <ExecScan+0x3e>
    0.00 :	  5b3785:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3788:       0f 84 d6 01 00 00       je     5b3964 <ExecScan+0x214>
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous scan
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
    0.00 :	  5b378e:       41 80 7c 24 70 00       cmpb   $0x0,0x70(%r12)
    0.00 :	  5b3794:       0f 85 a6 01 00 00       jne    5b3940 <ExecScan+0x1f0>
    0.00 :	  5b379a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        /*
         :	         * Reset per-tuple memory context to free any expression evaluation
         :	         * storage allocated in the previous tuple cycle.  Note this can't happen
         :	         * until we're done projecting out tuples from a scan tuple.
         :	         */
         :	        ResetExprContext(econtext);
    0.00 :	  5b37a0:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b37a4:       e8 07 52 1e 00          callq  7989b0 <MemoryContextReset>
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b37a9:       0f b6 05 e0 68 60 00    movzbl 0x6068e0(%rip),%eax        # bba090 <InterruptPending>
    0.00 :	  5b37b0:       84 c0                   test   %al,%al
    0.00 :	  5b37b2:       0f 85 50 01 00 00       jne    5b3908 <ExecScan+0x1b8>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:41
    1.64 :	  5b37b8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b37bd:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b37c4:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:43
    1.64 :	  5b37c5:       0f 84 0d 01 00 00       je     5b38d8 <ExecScan+0x188>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b37cb:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b37d0:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b37d3:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b37d6:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b37dd:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b37e1:       0f 84 f1 00 00 00       je     5b38d8 <ExecScan+0x188>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37e7:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b37ea:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b37f1:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b37f8:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b37f9:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b37fc:       0f 85 16 01 00 00       jne    5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b3802:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b3805:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b380c:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b3810:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b3813:       0f 84 ff 00 00 00       je     5b3918 <ExecScan+0x1c8>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b3819:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b381b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b381d:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3820:       e8 5b 0c 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b3825:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b3828:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b382b:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b382e:       84 c0                   test   %al,%al
    0.00 :	  5b3830:       0f 84 fa 00 00 00       je     5b3930 <ExecScan+0x1e0>
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b3836:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b3839:       0f 84 ab 00 00 00       je     5b38ea <ExecScan+0x19a>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
    4.92 :	  5b383f:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:175
   19.67 :	  5b3843:       0f 85 a1 00 00 00       jne    5b38ea <ExecScan+0x19a>
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
    0.00 :	  5b3849:       45 84 ff                test   %r15b,%r15b
         :	                }
         :
         :	                /*
         :	                 * place the current tuple into the expr context
         :	                 */
         :	                econtext->ecxt_scantuple = slot;
    0.00 :	  5b384c:       49 89 5d 08             mov    %rbx,0x8(%r13)
         :	                 *
         :	                 * check for non-nil qual here to avoid a function call to ExecQual()
         :	                 * when the qual is nil ... saves only a few cycles, but they add up
         :	                 * ...
         :	                 */
         :	                if (!qual || ExecQual(qual, econtext, false))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:195
    1.64 :	  5b3850:       75 3e                   jne    5b3890 <ExecScan+0x140>
    0.00 :	  5b3852:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    1.64 :	  5b3856:       31 d2                   xor    %edx,%edx
    0.00 :	  5b3858:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  5b385b:       e8 b0 96 ff ff          callq  5acf10 <ExecQual>
    1.64 :	  5b3860:       84 c0                   test   %al,%al
    0.00 :	  5b3862:       75 2c                   jne    5b3890 <ExecScan+0x140>
         :	                                 */
         :	                                return slot;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(node, 1);
    0.00 :	  5b3864:       49 8b 44 24 18          mov    0x18(%r12),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    1.64 :	  5b3869:       48 85 c0                test   %rax,%rax
    0.00 :	  5b386c:       0f 84 2e ff ff ff       je     5b37a0 <ExecScan+0x50>
    0.00 :	  5b3872:       f2 0f 10 05 de b8 1f    movsd  0x1fb8de(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b3879:       00 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:223
    6.56 :	  5b387a:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b3881:       00 
   18.03 :	  5b3882:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b3889:       00 
    9.84 :	  5b388a:       e9 11 ff ff ff          jmpq   5b37a0 <ExecScan+0x50>
    0.00 :	  5b388f:       90                      nop
         :	                if (!qual || ExecQual(qual, econtext, false))
         :	                {
         :	                        /*
         :	                         * Found a satisfactory scan tuple.
         :	                         */
         :	                        if (projInfo)
    0.00 :	  5b3890:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b3893:       74 2b                   je     5b38c0 <ExecScan+0x170>
         :	                                /*
         :	                                 * Form a projection tuple, store it in the result tuple slot
         :	                                 * and return it --- unless we find we can project no tuples
         :	                                 * from this scan tuple, in which case continue scan.
         :	                                 */
         :	                                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3895:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3899:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b389c:       e8 5f 97 ff ff          callq  5ad000 <ExecProject>
    0.00 :	  5b38a1:       48 89 c3                mov    %rax,%rbx
         :	                                if (isDone != ExprEndResult)
    0.00 :	  5b38a4:       8b 45 d4                mov    -0x2c(%rbp),%eax
    0.00 :	  5b38a7:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5b38aa:       0f 84 f0 fe ff ff       je     5b37a0 <ExecScan+0x50>
         :	                                {
         :	                                        node->ps.ps_TupFromTlist = (isDone == ExprMultipleResult);
    0.00 :	  5b38b0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5b38b3:       41 0f 94 44 24 70       sete   0x70(%r12)
    0.00 :	  5b38b9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b38c0:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  5b38c4:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5b38c7:       5b                      pop    %rbx
    0.00 :	  5b38c8:       41 5c                   pop    %r12
    0.00 :	  5b38ca:       41 5d                   pop    %r13
    0.00 :	  5b38cc:       41 5e                   pop    %r14
    0.00 :	  5b38ce:       41 5f                   pop    %r15
    0.00 :	  5b38d0:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:230
    1.64 :	  5b38d1:       c3                      retq   
    0.00 :	  5b38d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
    3.28 :	  5b38d8:       4c 89 e7                mov    %r12,%rdi
    3.28 :	  5b38db:       ff 55 b8                callq  *-0x48(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execScan.c:82
   18.03 :	  5b38de:       48 89 c3                mov    %rax,%rbx
         :	                 * if the slot returned by the accessMtd contains NULL, then it means
         :	                 * there is nothing more to scan so we just return an empty slot,
         :	                 * being careful to use the projection result slot so it has correct
         :	                 * tupleDesc.
         :	                 */
         :	                if (TupIsNull(slot))
    0.00 :	  5b38e1:       48 85 db                test   %rbx,%rbx
    0.00 :	  5b38e4:       0f 85 55 ff ff ff       jne    5b383f <ExecScan+0xef>
         :	                {
         :	                        if (projInfo)
    0.00 :	  5b38ea:       4d 85 f6                test   %r14,%r14
    0.00 :	  5b38ed:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b38f0:       74 ce                   je     5b38c0 <ExecScan+0x170>
         :	                                return ExecClearTuple(projInfo->pi_slot);
    0.00 :	  5b38f2:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5b38f6:       e8 15 08 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b38fb:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b38fe:       66 90                   xchg   %ax,%ax
         :	                /*
         :	                 * Tuple fails qual, so free per-tuple memory and try again.
         :	                 */
         :	                ResetExprContext(econtext);
         :	        }
         :	}
    0.00 :	  5b3900:       eb be                   jmp    5b38c0 <ExecScan+0x170>
    0.00 :	  5b3902:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         */
         :	        for (;;)
         :	        {
         :	                TupleTableSlot *slot;
         :
         :	                CHECK_FOR_INTERRUPTS();
    0.00 :	  5b3908:       e8 93 89 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5b390d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b3910:       e9 a3 fe ff ff          jmpq   5b37b8 <ExecScan+0x68>
    0.00 :	  5b3915:       0f 1f 00                nopl   (%rax)
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3918:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b391b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  5b3920:       e8 eb 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3925:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3928:       e9 09 ff ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b392d:       0f 1f 00                nopl   (%rax)
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b3930:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3933:       e8 d8 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3938:       e9 f9 fe ff ff          jmpq   5b3836 <ExecScan+0xe6>
    0.00 :	  5b393d:       0f 1f 00                nopl   (%rax)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3940:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b3944:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b3947:       e8 b4 96 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b394c:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ps.ps_TupFromTlist)
         :	        {
         :	                Assert(projInfo);               /* can't get here if not projecting */
         :	                resultSlot = ExecProject(projInfo, &isDone);
    0.00 :	  5b3950:       48 89 c3                mov    %rax,%rbx
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b3953:       0f 84 67 ff ff ff       je     5b38c0 <ExecScan+0x170>
         :	                        return resultSlot;
         :	                /* Done with that source tuple... */
         :	                node->ps.ps_TupFromTlist = false;
    0.00 :	  5b3959:       41 c6 44 24 70 00       movb   $0x0,0x70(%r12)
    0.00 :	  5b395f:       e9 3c fe ff ff          jmpq   5b37a0 <ExecScan+0x50>
         :	         * If we have neither a qual to check nor a projection to do, just skip
         :	         * all the overhead and return the raw scan tuple.
         :	         */
         :	        if (!qual && !projInfo)
         :	        {
         :	                ResetExprContext(econtext);
    0.00 :	  5b3964:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b3968:       e8 43 50 1e 00          callq  7989b0 <MemoryContextReset>
         :	static inline TupleTableSlot *
         :	ExecScanFetch(ScanState *node,
         :	                          ExecScanAccessMtd accessMtd,
         :	                          ExecScanRecheckMtd recheckMtd)
         :	{
         :	        EState     *estate = node->ps.state;
    0.00 :	  5b396d:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :
         :	        if (estate->es_epqTuple != NULL)
    0.00 :	  5b3972:       48 83 ba d0 00 00 00    cmpq   $0x0,0xd0(%rdx)
    0.00 :	  5b3979:       00 
    0.00 :	  5b397a:       74 74                   je     5b39f0 <ExecScan+0x2a0>
         :	                 * conditions.
         :	                 */
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
    0.00 :	  5b397c:       49 8b 44 24 08          mov    0x8(%r12),%rax
    0.00 :	  5b3981:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5b3984:       8d 48 ff                lea    -0x1(%rax),%ecx
    0.00 :	  5b3987:       48 8b 82 d8 00 00 00    mov    0xd8(%rdx),%rax
    0.00 :	  5b398e:       80 3c 08 00             cmpb   $0x0,(%rax,%rcx,1)
    0.00 :	  5b3992:       74 5c                   je     5b39f0 <ExecScan+0x2a0>
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b3994:       48 89 c8                mov    %rcx,%rax
    0.00 :	  5b3997:       48 03 82 e0 00 00 00    add    0xe0(%rdx),%rax
         :	                Index           scanrelid = ((Scan *) node->ps.plan)->scanrelid;
         :
         :	                Assert(scanrelid > 0);
         :	                if (estate->es_epqTupleSet[scanrelid - 1])
         :	                {
         :	                        TupleTableSlot *slot = node->ss_ScanTupleSlot;
    0.00 :	  5b399e:       49 8b 9c 24 88 00 00    mov    0x88(%r12),%rbx
    0.00 :	  5b39a5:       00 
         :
         :	                        /* Return empty slot if we already returned a tuple */
         :	                        if (estate->es_epqScanDone[scanrelid - 1])
    0.00 :	  5b39a6:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b39a9:       75 5a                   jne    5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
    0.00 :	  5b39ab:       c6 00 01                movb   $0x1,(%rax)
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
    0.00 :	  5b39ae:       48 8b 82 d0 00 00 00    mov    0xd0(%rdx),%rax
    0.00 :	  5b39b5:       48 8b 3c c8             mov    (%rax,%rcx,8),%rdi
    0.00 :	  5b39b9:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b39bc:       74 47                   je     5b3a05 <ExecScan+0x2b5>
         :	                                return ExecClearTuple(slot);
         :
         :	                        /* Store test tuple in the plan node's scan slot */
         :	                        ExecStoreTuple(estate->es_epqTuple[scanrelid - 1],
    0.00 :	  5b39be:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b39c0:       31 d2                   xor    %edx,%edx
    0.00 :	  5b39c2:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39c5:       e8 b6 0a 00 00          callq  5b4480 <ExecStoreTuple>
         :	                                                   slot, InvalidBuffer, false);
         :
         :	                        /* Check if it meets the access-method conditions */
         :	                        if (!(*recheckMtd) (node, slot))
    0.00 :	  5b39ca:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b39cd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39d0:       ff 55 b0                callq  *-0x50(%rbp)
    0.00 :	  5b39d3:       84 c0                   test   %al,%al
    0.00 :	  5b39d5:       0f 85 e5 fe ff ff       jne    5b38c0 <ExecScan+0x170>
         :	                                ExecClearTuple(slot);   /* would not be returned by scan */
    0.00 :	  5b39db:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b39de:       e8 2d 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b39e3:       e9 d8 fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
    0.00 :	  5b39e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b39ef:       00 
         :	        }
         :
         :	        /*
         :	         * Run the node-type-specific access method function to get the next tuple
         :	         */
         :	        return (*accessMtd) (node);
    0.00 :	  5b39f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5b39f3:       ff 55 b8                callq  *-0x48(%rbp)
    0.00 :	  5b39f6:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b39f9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b3a00:       e9 bb fe ff ff          jmpq   5b38c0 <ExecScan+0x170>
         :	                        /* Else mark to remember that we shouldn't return more */
         :	                        estate->es_epqScanDone[scanrelid - 1] = true;
         :
         :	                        /* Return empty slot if we haven't got a test tuple */
         :	                        if (estate->es_epqTuple[scanrelid - 1] == NULL)
         :	                                return ExecClearTuple(slot);
    0.00 :	  5b3a05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b3a08:       e8 03 07 00 00          callq  5b4110 <ExecClearTuple>
    0.00 :	  5b3a0d:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b3a10:       e9 ab fe ff ff          jmpq   5b38c0 <ExecScan+0x170>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
   15.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
   11.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
   11.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    3.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007989b0 <MemoryContextReset>:
         :	 * The type-specific reset routine handles the context itself, but we
         :	 * have to do the recursion for the children.
         :	 */
         :	void
         :	MemoryContextReset(MemoryContext context)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    3.33 :	  7989b0:       55                      push   %rbp
    0.00 :	  7989b1:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
   11.67 :	  7989b4:       53                      push   %rbx
    8.33 :	  7989b5:       48 89 fb                mov    %rdi,%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:143
    3.33 :	  7989b8:       48 83 ec 08             sub    $0x8,%rsp
         :	        AssertArg(MemoryContextIsValid(context));
         :
         :	        /* save a function call in common case where there are no children */
         :	        if (context->firstchild != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:147
    5.00 :	  7989bc:       48 83 7f 18 00          cmpq   $0x0,0x18(%rdi)
   18.33 :	  7989c1:       74 05                   je     7989c8 <MemoryContextReset+0x18>
         :	                MemoryContextResetChildren(context);
    0.00 :	  7989c3:       e8 b8 ff ff ff          callq  798980 <MemoryContextResetChildren>
         :
         :	        /* Nothing to do if no pallocs since startup or last reset */
         :	        if (!context->isReset)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:151
   11.67 :	  7989c8:       80 7b 30 00             cmpb   $0x0,0x30(%rbx)
   15.00 :	  7989cc:       75 0e                   jne    7989dc <MemoryContextReset+0x2c>
         :	        {
         :	                (*context->methods->reset) (context);
    0.00 :	  7989ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  7989d2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  7989d5:       ff 50 20                callq  *0x20(%rax)
         :	                context->isReset = true;
    0.00 :	  7989d8:       c6 43 30 01             movb   $0x1,0x30(%rbx)
         :	                VALGRIND_DESTROY_MEMPOOL(context);
         :	                VALGRIND_CREATE_MEMPOOL(context, 0, false);
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:158
   16.67 :	  7989dc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  7989e0:       5b                      pop    %rbx
    6.67 :	  7989e1:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   10.34 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    8.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    8.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.62 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    6.90 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    5.17 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:358
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    3.45 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:349
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:356
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:373
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    1.72 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4480 <ExecStoreTuple>:
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    6.90 :	  5b4480:       55                      push   %rbp
    6.90 :	  5b4481:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4484:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 :	  5b4488:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    3.45 :	  5b448c:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  5b448f:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  5b4493:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    3.45 :	  5b4497:       48 83 ec 20             sub    $0x20,%rsp
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    5.17 :	  5b449b:       80 7e 05 00             cmpb   $0x0,0x5(%rsi)
         :	TupleTableSlot *
         :	ExecStoreTuple(HeapTuple tuple,
         :	                           TupleTableSlot *slot,
         :	                           Buffer buffer,
         :	                           bool shouldFree)
         :	{
    0.00 :	  5b449f:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b44a2:       41 89 d4                mov    %edx,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:334
    3.45 :	  5b44a5:       41 89 cd                mov    %ecx,%r13d
         :	        Assert(BufferIsValid(buffer) ? (!shouldFree) : true);
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:347
    8.62 :	  5b44a8:       0f 85 92 00 00 00       jne    5b4540 <ExecStoreTuple+0xc0>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
    0.00 :	  5b44ae:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:349
    1.72 :	  5b44b2:       75 74                   jne    5b4528 <ExecStoreTuple+0xa8>
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44b4:       8b 7b 20                mov    0x20(%rbx),%edi
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        /*
         :	         * Store the new tuple into the specified slot.
         :	         */
         :	        slot->tts_isempty = false;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:355
    3.45 :	  5b44b7:       c6 43 04 00             movb   $0x0,0x4(%rbx)
         :	        slot->tts_shouldFree = shouldFree;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:356
    1.72 :	  5b44bb:       44 88 6b 05             mov    %r13b,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b44bf:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :	        slot->tts_tuple = tuple;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:358
    3.45 :	  5b44c3:       4c 89 73 08             mov    %r14,0x8(%rbx)
         :	        slot->tts_mintuple = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:359
    3.45 :	  5b44c7:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b44ce:       00 
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
    0.00 :	  5b44cf:       44 39 e7                cmp    %r12d,%edi
         :	        slot->tts_shouldFreeMin = false;
         :	        slot->tts_tuple = tuple;
         :	        slot->tts_mintuple = NULL;
         :
         :	        /* Mark extracted state invalid */
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b44d2:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :	         * This is coded to optimize the case where the slot previously held a
         :	         * tuple on the same disk page: in that case releasing and re-acquiring
         :	         * the pin is a waste of cycles.  This is a common situation during
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:373
    1.72 :	  5b44d9:       74 0d                   je     5b44e8 <ExecStoreTuple+0x68>
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
    0.00 :	  5b44db:       85 ff                   test   %edi,%edi
    0.00 :	  5b44dd:       75 31                   jne    5b4510 <ExecStoreTuple+0x90>
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44df:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b44e2:       44 89 63 20             mov    %r12d,0x20(%rbx)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b44e6:       75 18                   jne    5b4500 <ExecStoreTuple+0x80>
         :	                        IncrBufferRefCount(buffer);
         :	        }
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.62 :	  5b44e8:       48 89 d8                mov    %rbx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    1.72 :	  5b44eb:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    1.72 :	  5b44f0:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    6.90 :	  5b44f4:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    1.72 :	  5b44f9:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  5b44fe:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:383
    8.62 :	  5b44ff:       c3                      retq   
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
         :	                        IncrBufferRefCount(buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
    3.45 :	  5b4500:       44 89 e7                mov    %r12d,%edi
    0.00 :	  5b4503:       e8 58 06 0c 00          callq  674b60 <IncrBufferRefCount>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:379
   10.34 :	  5b4508:       eb de                   jmp    5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b450a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * seqscans, so it's worth troubling over.
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4510:       e8 4b 09 0c 00          callq  674e60 <ReleaseBuffer>
         :	                slot->tts_buffer = buffer;
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4515:       45 85 e4                test   %r12d,%r12d
         :	         */
         :	        if (slot->tts_buffer != buffer)
         :	        {
         :	                if (BufferIsValid(slot->tts_buffer))
         :	                        ReleaseBuffer(slot->tts_buffer);
         :	                slot->tts_buffer = buffer;
    0.00 :	  5b4518:       44 89 63 20             mov    %r12d,0x20(%rbx)
    0.00 :	  5b451c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                if (BufferIsValid(buffer))
    0.00 :	  5b4520:       74 c6                   je     5b44e8 <ExecStoreTuple+0x68>
    0.00 :	  5b4522:       eb dc                   jmp    5b4500 <ExecStoreTuple+0x80>
    0.00 :	  5b4524:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4528:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b452c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b4530:       e8 7b a7 eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4535:       e9 7a ff ff ff          jmpq   5b44b4 <ExecStoreTuple+0x34>
    0.00 :	  5b453a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free any old physical tuple belonging to the slot.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4540:       48 8b 7e 08             mov    0x8(%rsi),%rdi
    0.00 :	  5b4544:       e8 77 a7 eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4549:       e9 60 ff ff ff          jmpq   5b44ae <ExecStoreTuple+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   18.18 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   14.55 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   12.73 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    7.27 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
    5.45 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
    5.45 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
    5.45 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    5.45 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    3.64 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    3.64 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    1.82 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    1.82 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    1.82 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    1.82 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    1.82 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000069b9e0 <check_stack_depth>:
         :	 * overflow as an unrecoverable SIGSEGV, so we want to error out ourselves
         :	 * before hitting the hardware limit.
         :	 */
         :	void
         :	check_stack_depth(void)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3066
   14.55 :	  69b9e0:       55                      push   %rbp
    7.27 :	  69b9e1:       48 89 e5                mov    %rsp,%rbp
    5.45 :	  69b9e4:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
   18.18 :	  69b9e8:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    5.45 :	  69b9ec:       48 83 ec 20             sub    $0x20,%rsp
         :	        long            stack_depth;
         :
         :	        /*
         :	         * Compute distance from reference point to my local variables
         :	         */
         :	        stack_depth = (long) (stack_base_ptr - &stack_top_loc);
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    1.82 :	  69b9f0:       48 8b 0d f9 2d 4e 00    mov    0x4e2df9(%rip),%rcx        # b7e7f0 <stack_base_ptr>
    1.82 :	  69b9f7:       48 8d 45 ef             lea    -0x11(%rbp),%rax
    3.64 :	  69b9fb:       48 89 ca                mov    %rcx,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    9.09 :	  69b9fe:       48 29 c2                sub    %rax,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3073
    1.82 :	  69ba01:       48 89 d0                mov    %rdx,%rax
         :	         * The test on stack_base_ptr prevents us from erroring out if called
         :	         * during process setup or in a non-backend process.  Logically it should
         :	         * be done first, but putting it here avoids wasting cycles during normal
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
    0.00 :	  69ba04:       48 c1 fa 3f             sar    $0x3f,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3089
    1.82 :	  69ba08:       48 31 d0                xor    %rdx,%rax
    3.64 :	  69ba0b:       48 29 d0                sub    %rdx,%rax
    0.00 :	  69ba0e:       48 39 05 a3 cd 4c 00    cmp    %rax,0x4ccda3(%rip)        # b687b8 <max_stack_depth_bytes>
    1.82 :	  69ba15:       7d 05                   jge    69ba1c <check_stack_depth+0x3c>
    0.00 :	  69ba17:       48 85 c9                test   %rcx,%rcx
    0.00 :	  69ba1a:       75 0a                   jne    69ba26 <check_stack_depth+0x46>
         :	                                 errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), "
         :	                          "after ensuring the platform's stack depth limit is adequate.",
         :	                                                 max_stack_depth)));
         :	        }
         :	#endif   /* IA64 */
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/tcop/postgres.c:3122
    5.45 :	  69ba1c:       48 8b 5d f0             mov    -0x10(%rbp),%rbx
    5.45 :	  69ba20:       4c 8b 65 f8             mov    -0x8(%rbp),%r12
    0.00 :	  69ba24:       c9                      leaveq 
   12.73 :	  69ba25:       c3                      retq   
         :	         * cases.
         :	         */
         :	        if (stack_depth > max_stack_depth_bytes &&
         :	                stack_base_ptr != NULL)
         :	        {
         :	                ereport(ERROR,
    0.00 :	  69ba26:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  69ba29:       b9 e0 00 8b 00          mov    $0x8b00e0,%ecx
    0.00 :	  69ba2e:       ba 19 0c 00 00          mov    $0xc19,%edx
    0.00 :	  69ba33:       be d0 e8 8a 00          mov    $0x8ae8d0,%esi
    0.00 :	  69ba38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  69ba3d:       e8 7e f0 0d 00          callq  77aac0 <errstart>
    0.00 :	  69ba42:       84 c0                   test   %al,%al
    0.00 :	  69ba44:       75 05                   jne    69ba4b <check_stack_depth+0x6b>
    0.00 :	  69ba46:       e8 85 da dc ff          callq  4694d0 <abort@plt>
    0.00 :	  69ba4b:       8b 35 5b cd 4c 00       mov    0x4ccd5b(%rip),%esi        # b687ac <max_stack_depth>
    0.00 :	  69ba51:       bf 60 f0 8a 00          mov    $0x8af060,%edi
    0.00 :	  69ba56:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba58:       e8 43 02 0e 00          callq  77bca0 <errhint>
    0.00 :	  69ba5d:       bf 00 ea 8a 00          mov    $0x8aea00,%edi
    0.00 :	  69ba62:       41 89 c4                mov    %eax,%r12d
    0.00 :	  69ba65:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba67:       e8 34 0e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69ba6c:       bf 05 01 00 01          mov    $0x1000105,%edi
    0.00 :	  69ba71:       89 c3                   mov    %eax,%ebx
    0.00 :	  69ba73:       e8 d8 12 0e 00          callq  77cd50 <errcode>
    0.00 :	  69ba78:       44 89 e2                mov    %r12d,%edx
    0.00 :	  69ba7b:       89 c7                   mov    %eax,%edi
    0.00 :	  69ba7d:       89 de                   mov    %ebx,%esi
    0.00 :	  69ba7f:       31 c0                   xor    %eax,%eax
    0.00 :	  69ba81:       e8 5a eb 0d 00          callq  77a5e0 <errfinish>
    0.00 :	  69ba86:       eb be                   jmp    69ba46 <check_stack_depth+0x66>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   21.57 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
   15.69 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
   13.73 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    9.80 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    9.80 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
    9.80 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
    9.80 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
    3.92 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    3.92 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1511
    1.96 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000642780 <pgstat_init_function_usage>:
         :	 * Called by the executor before invoking a function.
         :	 */
         :	void
         :	pgstat_init_function_usage(FunctionCallInfoData *fcinfo,
         :	                                                   PgStat_FunctionCallUsage *fcu)
         :	{
    0.00 :	  642780:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
    3.92 :	  642781:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1504
   13.73 :	  642784:       41 54                   push   %r12
    0.00 :	  642786:       49 89 fc                mov    %rdi,%r12
    0.00 :	  642789:       53                      push   %rbx
    9.80 :	  64278a:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  64278d:       48 83 ec 70             sub    $0x70,%rsp
         :	        PgStat_BackendFunctionEntry *htabent;
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
    0.00 :	  642791:       48 8b 17                mov    (%rdi),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
   21.57 :	  642794:       0f b6 42 10             movzbl 0x10(%rdx),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
    1.96 :	  642798:       3b 05 06 94 53 00       cmp    0x539406(%rip),%eax        # b7bba4 <pgstat_track_functions>
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1508
    9.80 :	  64279e:       0f 8d ac 00 00 00       jge    642850 <pgstat_init_function_usage+0xd0>
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
         :	                return;
         :	        }
         :
         :	        if (!pgStatFunctions)
    0.00 :	  6427a4:       48 83 3d 04 95 53 00    cmpq   $0x0,0x539504(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427ab:       00 
    0.00 :	  6427ac:       0f 84 de 00 00 00       je     642890 <pgstat_init_function_usage+0x110>
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427b2:       48 8b 3d f7 94 53 00    mov    0x5394f7(%rip),%rdi        # b7bcb0 <pgStatFunctions>
    0.00 :	  6427b9:       48 8d 72 08             lea    0x8(%rdx),%rsi
    0.00 :	  6427bd:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  6427c1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6427c6:       e8 d5 1e 14 00          callq  7846a0 <hash_search>
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427cb:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                                                                          &hash_ctl,
         :	                                                                          HASH_ELEM | HASH_FUNCTION);
         :	        }
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
    0.00 :	  6427cf:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6427d2:       48 8d 40 08             lea    0x8(%rax),%rax
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
    0.00 :	  6427d6:       74 40                   je     642818 <pgstat_init_function_usage+0x98>
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
    0.00 :	  6427d8:       48 89 03                mov    %rax,(%rbx)
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427db:       48 8b 42 10             mov    0x10(%rdx),%rax
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  6427df:       48 8d 7b 28             lea    0x28(%rbx),%rdi
    0.00 :	  6427e3:       31 f6                   xor    %esi,%esi
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
         :
         :	        fcu->fs = &htabent->f_counts;
         :
         :	        /* save stats for this function, later used to compensate for recursion */
         :	        fcu->save_f_total_time = htabent->f_counts.f_total_time;
    0.00 :	  6427e5:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  6427e9:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  6427ed:       48 89 43 10             mov    %rax,0x10(%rbx)
         :
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
    0.00 :	  6427f1:       48 8b 05 28 97 53 00    mov    0x539728(%rip),%rax        # b7bf20 <total_func_time>
    0.00 :	  6427f8:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  6427fc:       48 8b 05 25 97 53 00    mov    0x539725(%rip),%rax        # b7bf28 <total_func_time+0x8>
    0.00 :	  642803:       48 89 43 20             mov    %rax,0x20(%rbx)
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
    0.00 :	  642807:       e8 b4 6d e2 ff          callq  4695c0 <gettimeofday@plt>
         :	}
    0.00 :	  64280c:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  642810:       5b                      pop    %rbx
    0.00 :	  642811:       41 5c                   pop    %r12
    0.00 :	  642813:       c9                      leaveq 
    0.00 :	  642814:       c3                      retq   
    0.00 :	  642815:       0f 1f 00                nopl   (%rax)
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642818:       a8 07                   test   $0x7,%al
    0.00 :	  64281a:       75 44                   jne    642860 <pgstat_init_function_usage+0xe0>
    0.00 :	  64281c:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642823:       00 
    0.00 :	  642824:       48 c7 42 10 00 00 00    movq   $0x0,0x10(%rdx)
    0.00 :	  64282b:       00 
    0.00 :	  64282c:       48 c7 42 18 00 00 00    movq   $0x0,0x18(%rdx)
    0.00 :	  642833:       00 
    0.00 :	  642834:       48 c7 42 20 00 00 00    movq   $0x0,0x20(%rdx)
    0.00 :	  64283b:       00 
    0.00 :	  64283c:       48 c7 42 28 00 00 00    movq   $0x0,0x28(%rdx)
    0.00 :	  642843:       00 
    0.00 :	  642844:       eb 92                   jmp    6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  642846:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64284d:       00 00 00 
         :	        bool            found;
         :
         :	        if (pgstat_track_functions <= fcinfo->flinfo->fn_stats)
         :	        {
         :	                /* stats not wanted */
         :	                fcu->fs = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1511
    3.92 :	  642850:       48 c7 06 00 00 00 00    movq   $0x0,(%rsi)
         :	        /* save current backend-wide total time */
         :	        fcu->save_total = total_func_time;
         :
         :	        /* get clock time as of function start */
         :	        INSTR_TIME_SET_CURRENT(fcu->f_start);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1546
   15.69 :	  642857:       48 83 c4 70             add    $0x70,%rsp
    0.00 :	  64285b:       5b                      pop    %rbx
    0.00 :	  64285c:       41 5c                   pop    %r12
    9.80 :	  64285e:       c9                      leaveq 
    9.80 :	  64285f:       c3                      retq   
         :
         :	        /* Get the stats entry for this function, create if necessary */
         :	        htabent = hash_search(pgStatFunctions, &fcinfo->flinfo->fn_oid,
         :	                                                  HASH_ENTER, &found);
         :	        if (!found)
         :	                MemSet(&htabent->f_counts, 0, sizeof(PgStat_FunctionCounts));
    0.00 :	  642860:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  642867:       00 
    0.00 :	  642868:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  64286f:       00 
    0.00 :	  642870:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  642877:       00 
    0.00 :	  642878:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  64287f:       00 
    0.00 :	  642880:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  642887:       00 
    0.00 :	  642888:       e9 4b ff ff ff          jmpq   6427d8 <pgstat_init_function_usage+0x58>
    0.00 :	  64288d:       0f 1f 00                nopl   (%rax)
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  642890:       48 8d 55 80             lea    -0x80(%rbp),%rdx
    0.00 :	  642894:       31 c0                   xor    %eax,%eax
    0.00 :	  642896:       b9 0d 00 00 00          mov    $0xd,%ecx
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  64289b:       be 00 02 00 00          mov    $0x200,%esi
         :	        if (!pgStatFunctions)
         :	        {
         :	                /* First time through - initialize function stat table */
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
    0.00 :	  6428a0:       48 89 d7                mov    %rdx,%rdi
    0.00 :	  6428a3:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                hash_ctl.keysize = sizeof(Oid);
    0.00 :	  6428a6:       48 c7 45 a8 04 00 00    movq   $0x4,-0x58(%rbp)
    0.00 :	  6428ad:       00 
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
    0.00 :	  6428ae:       48 c7 45 b0 30 00 00    movq   $0x30,-0x50(%rbp)
    0.00 :	  6428b5:       00 
         :	                hash_ctl.hash = oid_hash;
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428b6:       bf 1c f0 89 00          mov    $0x89f01c,%edi
         :	                HASHCTL         hash_ctl;
         :
         :	                memset(&hash_ctl, 0, sizeof(hash_ctl));
         :	                hash_ctl.keysize = sizeof(Oid);
         :	                hash_ctl.entrysize = sizeof(PgStat_BackendFunctionEntry);
         :	                hash_ctl.hash = oid_hash;
    0.00 :	  6428bb:       48 c7 45 b8 50 4f 78    movq   $0x784f50,-0x48(%rbp)
    0.00 :	  6428c2:       00 
         :	                pgStatFunctions = hash_create("Function stat entries",
    0.00 :	  6428c3:       b1 30                   mov    $0x30,%cl
    0.00 :	  6428c5:       e8 e6 1f 14 00          callq  7848b0 <hash_create>
    0.00 :	  6428ca:       48 89 05 df 93 53 00    mov    %rax,0x5393df(%rip)        # b7bcb0 <pgStatFunctions>
    0.00 :	  6428d1:       49 8b 14 24             mov    (%r12),%rdx
    0.00 :	  6428d5:       e9 d8 fe ff ff          jmpq   6427b2 <pgstat_init_function_usage+0x32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   30.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   28.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   14.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
   14.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
    6.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    2.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005aca20 <ExecEvalConst>:
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
   28.00 :	  5aca20:       55                      push   %rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
    0.00 :	  5aca21:       48 85 c9                test   %rcx,%rcx
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
         :	        Const      *con = (Const *) exprstate->expr;
    0.00 :	  5aca24:       48 8b 77 08             mov    0x8(%rdi),%rsi
         :	 * ----------------------------------------------------------------
         :	 */
         :	static Datum
         :	ExecEvalConst(ExprState *exprstate, ExprContext *econtext,
         :	                          bool *isNull, ExprDoneCond *isDone)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1051
    4.00 :	  5aca28:       48 89 e5                mov    %rsp,%rbp
         :	        Const      *con = (Const *) exprstate->expr;
         :
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1054
   14.00 :	  5aca2b:       74 06                   je     5aca33 <ExecEvalConst+0x13>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5aca2d:       c7 01 00 00 00 00       movl   $0x0,(%rcx)
         :
         :	        *isNull = con->constisnull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
    2.00 :	  5aca33:       0f b6 46 20             movzbl 0x20(%rsi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1057
   30.00 :	  5aca37:       88 02                   mov    %al,(%rdx)
    6.00 :	  5aca39:       48 8b 46 18             mov    0x18(%rsi),%rax
         :	        return con->constvalue;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:1059
   16.00 :	  5aca3d:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.41 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   20.41 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   12.24 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    8.16 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
    6.12 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1583
    6.12 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    6.12 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    4.08 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    4.08 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    4.08 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    4.08 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    2.04 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    2.04 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006425d0 <pgstat_end_function_usage>:
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   12.24 :	  6425d0:       55                      push   %rbp
   20.41 :	  6425d1:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    2.04 :	  6425d4:       41 55                   push   %r13
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
   20.41 :	  6425d6:       41 89 f5                mov    %esi,%r13d
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1576
    2.04 :	  6425d9:       41 54                   push   %r12
    4.08 :	  6425db:       49 89 fc                mov    %rdi,%r12
    0.00 :	  6425de:       53                      push   %rbx
    0.00 :	  6425df:       48 83 ec 18             sub    $0x18,%rsp
         :	        PgStat_FunctionCounts *fs = fcu->fs;
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1577
    8.16 :	  6425e3:       48 8b 1f                mov    (%rdi),%rbx
         :	        instr_time      f_total;
         :	        instr_time      f_others;
         :	        instr_time      f_self;
         :
         :	        /* stats not wanted? */
         :	        if (fs == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1583
    6.12 :	  6425e6:       48 85 db                test   %rbx,%rbx
    0.00 :	  6425e9:       0f 84 6f 01 00 00       je     64275e <pgstat_end_function_usage+0x18e>
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
    0.00 :	  6425ef:       48 8d 7d d0             lea    -0x30(%rbp),%rdi
    0.00 :	  6425f3:       31 f6                   xor    %esi,%esi
    0.00 :	  6425f5:       e8 c6 6f e2 ff          callq  4695c0 <gettimeofday@plt>
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  6425fa:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
    0.00 :	  6425fe:       49 2b 4c 24 30          sub    0x30(%r12),%rcx
    0.00 :	  642603:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642607:       49 2b 44 24 28          sub    0x28(%r12),%rax
    0.00 :	  64260c:       48 85 c9                test   %rcx,%rcx
    0.00 :	  64260f:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642613:       49 89 c1                mov    %rax,%r9
    0.00 :	  642616:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  64261a:       79 1c                   jns    642638 <pgstat_end_function_usage+0x68>
    0.00 :	  64261c:       0f 1f 40 00             nopl   0x0(%rax)
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  642620:       48 83 e8 01             sub    $0x1,%rax
         :	        if (fs == NULL)
         :	                return;
         :
         :	        /* total elapsed time in this function call */
         :	        INSTR_TIME_SET_CURRENT(f_total);
         :	        INSTR_TIME_SUBTRACT(f_total, fcu->f_start);
    0.00 :	  642624:       48 81 c1 40 42 0f 00    add    $0xf4240,%rcx
    0.00 :	  64262b:       78 f3                   js     642620 <pgstat_end_function_usage+0x50>
    0.00 :	  64262d:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  642631:       48 89 4d d8             mov    %rcx,-0x28(%rbp)
    0.00 :	  642635:       49 89 c1                mov    %rax,%r9
         :
         :	        /* self usage: elapsed minus anything already charged to other calls */
         :	        f_others = total_func_time;
    0.00 :	  642638:       4c 8b 05 e9 98 53 00    mov    0x5398e9(%rip),%r8        # b7bf28 <total_func_time+0x8>
    0.00 :	  64263f:       4c 8b 15 da 98 53 00    mov    0x5398da(%rip),%r10        # b7bf20 <total_func_time>
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
    0.00 :	  642646:       4c 89 c0                mov    %r8,%rax
    0.00 :	  642649:       4c 89 d2                mov    %r10,%rdx
    0.00 :	  64264c:       49 2b 54 24 18          sub    0x18(%r12),%rdx
    0.00 :	  642651:       49 2b 44 24 20          sub    0x20(%r12),%rax
    0.00 :	  642656:       79 14                   jns    64266c <pgstat_end_function_usage+0x9c>
    0.00 :	  642658:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  64265f:       00 
    0.00 :	  642660:       48 83 ea 01             sub    $0x1,%rdx
    0.00 :	  642664:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  64266a:       78 f4                   js     642660 <pgstat_end_function_usage+0x90>
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
    0.00 :	  64266c:       4c 89 cf                mov    %r9,%rdi
    0.00 :	  64266f:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  642672:       48 29 d7                sub    %rdx,%rdi
    0.00 :	  642675:       48 29 c6                sub    %rax,%rsi
    0.00 :	  642678:       79 13                   jns    64268d <pgstat_end_function_usage+0xbd>
    0.00 :	  64267a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  642680:       48 83 ef 01             sub    $0x1,%rdi
    0.00 :	  642684:       48 81 c6 40 42 0f 00    add    $0xf4240,%rsi
    0.00 :	  64268b:       78 f3                   js     642680 <pgstat_end_function_usage+0xb0>
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  64268d:       4a 8d 04 06             lea    (%rsi,%r8,1),%rax
    0.00 :	  642691:       4a 8d 14 17             lea    (%rdi,%r10,1),%rdx
    0.00 :	  642695:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  64269b:       48 89 15 7e 98 53 00    mov    %rdx,0x53987e(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426a2:       48 89 05 7f 98 53 00    mov    %rax,0x53987f(%rip)        # b7bf28 <total_func_time+0x8>
    0.00 :	  6426a9:       7e 25                   jle    6426d0 <pgstat_end_function_usage+0x100>
    0.00 :	  6426ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6426b0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426b6:       48 83 c2 01             add    $0x1,%rdx
         :	        INSTR_TIME_SUBTRACT(f_others, fcu->save_total);
         :	        f_self = f_total;
         :	        INSTR_TIME_SUBTRACT(f_self, f_others);
         :
         :	        /* update backend-wide total time */
         :	        INSTR_TIME_ADD(total_func_time, f_self);
    0.00 :	  6426ba:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426c0:       7f ee                   jg     6426b0 <pgstat_end_function_usage+0xe0>
    0.00 :	  6426c2:       48 89 15 57 98 53 00    mov    %rdx,0x539857(%rip)        # b7bf20 <total_func_time>
    0.00 :	  6426c9:       48 89 05 58 98 53 00    mov    %rax,0x539858(%rip)        # b7bf28 <total_func_time+0x8>
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426d0:       48 89 c8                mov    %rcx,%rax
    0.00 :	  6426d3:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	  6426d8:       4c 89 ca                mov    %r9,%rdx
    0.00 :	  6426db:       49 03 54 24 08          add    0x8(%r12),%rdx
    0.00 :	  6426e0:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6426e6:       48 89 45 d8             mov    %rax,-0x28(%rbp)
    0.00 :	  6426ea:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  6426ee:       7e 1a                   jle    64270a <pgstat_end_function_usage+0x13a>
    0.00 :	  6426f0:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
         :	 * calls for what the user considers a single call of the function.  The
         :	 * finalize flag should be TRUE on the last call.
         :	 */
         :	void
         :	pgstat_end_function_usage(PgStat_FunctionCallUsage *fcu, bool finalize)
         :	{
    0.00 :	  6426f6:       48 83 c2 01             add    $0x1,%rdx
         :	         * pre-call value of f_total_time.  This is necessary to avoid
         :	         * double-counting any time taken by recursive calls of myself.  (We do
         :	         * not need any similar kluge for self time, since that already excludes
         :	         * any recursive calls.)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
    0.00 :	  6426fa:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642700:       7f ee                   jg     6426f0 <pgstat_end_function_usage+0x120>
    0.00 :	  642702:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
    0.00 :	  642706:       48 89 45 d8             mov    %rax,-0x28(%rbp)
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
    0.00 :	  64270a:       45 84 ed                test   %r13b,%r13b
    0.00 :	  64270d:       75 61                   jne    642770 <pgstat_end_function_usage+0x1a0>
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64270f:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  642713:       48 89 43 08             mov    %rax,0x8(%rbx)
    0.00 :	  642717:       48 8b 45 d8             mov    -0x28(%rbp),%rax
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  64271b:       48 01 7b 18             add    %rdi,0x18(%rbx)
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
         :	        fs->f_total_time = f_total;
    0.00 :	  64271f:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        INSTR_TIME_ADD(fs->f_self_time, f_self);
    0.00 :	  642723:       48 89 f0                mov    %rsi,%rax
    0.00 :	  642726:       48 03 43 20             add    0x20(%rbx),%rax
    0.00 :	  64272a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642730:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642734:       7e 21                   jle    642757 <pgstat_end_function_usage+0x187>
    0.00 :	  642736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  64273d:       00 00 00 
    0.00 :	  642740:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  642746:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  64274b:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  642751:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  642755:       7f e9                   jg     642740 <pgstat_end_function_usage+0x170>
         :
         :	        /* indicate that we have something to send */
         :	        have_function_stats = true;
    0.00 :	  642757:       c6 05 4a 95 53 00 01    movb   $0x1,0x53954a(%rip)        # b7bca8 <have_function_stats>
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    6.12 :	  64275e:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  642762:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    4.08 :	  642763:       41 5c                   pop    %r12
    4.08 :	  642765:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    6.12 :	  642767:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/postmaster/pgstat.c:1616
    4.08 :	  642768:       c3                      retq   
    0.00 :	  642769:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         */
         :	        INSTR_TIME_ADD(f_total, fcu->save_f_total_time);
         :
         :	        /* update counters in function stats table */
         :	        if (finalize)
         :	                fs->f_numcalls++;
    0.00 :	  642770:       48 83 03 01             addq   $0x1,(%rbx)
    0.00 :	  642774:       eb 99                   jmp    64270f <pgstat_end_function_usage+0x13f>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   72.73 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    6.82 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
    6.82 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
    2.27 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
    2.27 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000677560 <StrategyGetBuffer>:
         :	 *      To ensure that no one else can pin the buffer before we do, we must
         :	 *      return the buffer with the buffer header spinlock still held.
         :	 */
         :	volatile BufferDesc *
         :	StrategyGetBuffer(BufferAccessStrategy strategy)
         :	{
    0.00 :	  677560:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:121
    2.27 :	  677561:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  677564:       41 57                   push   %r15
    2.27 :	  677566:       41 56                   push   %r14
    0.00 :	  677568:       41 55                   push   %r13
    0.00 :	  67756a:       49 89 fd                mov    %rdi,%r13
    0.00 :	  67756d:       41 54                   push   %r12
    0.00 :	  67756f:       53                      push   %rbx
    0.00 :	  677570:       48 83 ec 08             sub    $0x8,%rsp
         :
         :	        /*
         :	         * If given a strategy object, see whether it can select a buffer. We
         :	         * assume strategy objects don't need buffer_strategy_lock.
         :	         */
         :	        if (strategy != NULL)
    0.00 :	  677574:       48 85 ff                test   %rdi,%rdi
    0.00 :	  677577:       74 65                   je     6775de <StrategyGetBuffer+0x7e>
         :	{
         :	        volatile BufferDesc *buf;
         :	        Buffer          bufnum;
         :
         :	        /* Advance to next ring slot */
         :	        if (++strategy->current >= strategy->ring_size)
    0.00 :	  677579:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  67757c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67757f:       3b 47 04                cmp    0x4(%rdi),%eax
    0.00 :	  677582:       89 47 08                mov    %eax,0x8(%rdi)
    0.00 :	  677585:       7c 09                   jl     677590 <StrategyGetBuffer+0x30>
         :	                strategy->current = 0;
    0.00 :	  677587:       c7 47 08 00 00 00 00    movl   $0x0,0x8(%rdi)
    0.00 :	  67758e:       31 c0                   xor    %eax,%eax
         :	        /*
         :	         * If the slot hasn't been filled yet, tell the caller to allocate a new
         :	         * buffer with the normal allocation strategy.  He will then fill this
         :	         * slot by calling AddBufferToRing with the new buffer.
         :	         */
         :	        bufnum = strategy->buffers[strategy->current];
    0.00 :	  677590:       48 98                   cltq   
    0.00 :	  677592:       41 8b 44 85 10          mov    0x10(%r13,%rax,4),%eax
         :	        if (bufnum == InvalidBuffer)
    0.00 :	  677597:       85 c0                   test   %eax,%eax
    0.00 :	  677599:       74 3e                   je     6775d9 <StrategyGetBuffer+0x79>
         :	         * since our own previous usage of the ring element would have left it
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
    0.00 :	  67759b:       48 98                   cltq   
    0.00 :	  67759d:       48 8d 58 ff             lea    -0x1(%rax),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  6775a1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6775a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6775aa:       48 03 1d 4f 85 54 00    add    0x54854f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	        LockBufHdr(buf);
    0.00 :	  6775b1:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6775b5:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  6775b8:       84 c0                   test   %al,%al
    0.00 :	  6775ba:       0f 85 b8 02 00 00       jne    677878 <StrategyGetBuffer+0x318>
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
    0.00 :	  6775c0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6775c3:       85 c0                   test   %eax,%eax
    0.00 :	  6775c5:       75 0e                   jne    6775d5 <StrategyGetBuffer+0x75>
    0.00 :	  6775c7:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  6775cb:       66 83 f8 01             cmp    $0x1,%ax
    0.00 :	  6775cf:       0f 86 92 02 00 00       jbe    677867 <StrategyGetBuffer+0x307>
         :	        {
         :	                strategy->current_was_in_ring = true;
         :	                return buf;
         :	        }
         :	        UnlockBufHdr(buf);
    0.00 :	  6775d5:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Tell caller to allocate a new buffer with the normal allocation
         :	         * strategy.  He'll then replace this ring element via AddBufferToRing.
         :	         */
         :	        strategy->current_was_in_ring = false;
    0.00 :	  6775d9:       41 c6 45 0c 00          movb   $0x0,0xc(%r13)
         :	        /*
         :	         * We count buffer allocation requests so that the bgwriter can estimate
         :	         * the rate of buffer consumption.  Note that buffers recycled by a
         :	         * strategy object are intentionally not counted here.
         :	         */
         :	        pg_atomic_fetch_add_u32(&StrategyControl->numBufferAllocs, 1);
    0.00 :	  6775de:       48 8b 05 1b 5b 50 00    mov    0x505b1b(%rip),%rax        # b7d100 <StrategyControl>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  6775e5:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6775ea:       48 83 c0 14             add    $0x14,%rax
    0.00 :	  6775ee:       f0 0f c1 10             lock xadd %edx,(%rax)
         :	         * Since we're not guaranteed atomic 8 byte reads we need to acquire the
         :	         * spinlock if not null to be sure we get a correct pointer. Because we
         :	         * don't want to set the latch while holding the buffer_strategy_lock we
         :	         * just grab the lock to read and reset the pointer.
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:155
    9.09 :	  6775f2:       48 8b 15 07 5b 50 00    mov    0x505b07(%rip),%rdx        # b7d100 <StrategyControl>
         :	        if (bgwriterLatch)
    0.00 :	  6775f9:       48 83 7a 18 00          cmpq   $0x0,0x18(%rdx)
    0.00 :	  6775fe:       74 3e                   je     67763e <StrategyGetBuffer+0xde>
    0.00 :	  677600:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  677605:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677608:       84 c0                   test   %al,%al
    0.00 :	  67760a:       0f 85 21 02 00 00       jne    677831 <StrategyGetBuffer+0x2d1>
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
    0.00 :	  677610:       48 8b 05 e9 5a 50 00    mov    0x505ae9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677617:       48 8b 78 18             mov    0x18(%rax),%rdi
         :	                StrategyControl->bgwriterLatch = NULL;
    0.00 :	  67761b:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  677622:       00 
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677623:       48 8b 05 d6 5a 50 00    mov    0x505ad6(%rip),%rax        # b7d100 <StrategyControl>
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  67762a:       48 85 ff                test   %rdi,%rdi
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	                StrategyControl->bgwriterLatch = NULL;
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67762d:       c6 00 00                movb   $0x0,(%rax)
         :
         :	                /* recheck */
         :	                if (bgwriterLatch)
    0.00 :	  677630:       74 05                   je     677637 <StrategyGetBuffer+0xd7>
         :	                        SetLatch(bgwriterLatch);
    0.00 :	  677632:       e8 89 1a fc ff          callq  6390c0 <SetLatch>
    0.00 :	  677637:       48 8b 15 c2 5a 50 00    mov    0x505ac2(%rip),%rdx        # b7d100 <StrategyControl>
         :	         *
         :	         * Note that the freeNext fields are considered to be protected by
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
    0.00 :	  67763e:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  677641:       85 c0                   test   %eax,%eax
    0.00 :	  677643:       0f 88 08 01 00 00       js     677751 <StrategyGetBuffer+0x1f1>
    0.00 :	  677649:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  67764e:       f0 86 02                lock xchg %al,(%rdx)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677651:       84 c0                   test   %al,%al
    0.00 :	  677653:       0f 85 f3 01 00 00       jne    67784c <StrategyGetBuffer+0x2ec>
    0.00 :	  677659:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67765f:       eb 30                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677661:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
         :	                        if (buf->refcount == 0 && buf->usage_count == 0)
    0.00 :	  677668:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  67766b:       85 c0                   test   %eax,%eax
    0.00 :	  67766d:       75 0d                   jne    67767c <StrategyGetBuffer+0x11c>
    0.00 :	  67766f:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677673:       66 85 c0                test   %ax,%ax
    0.00 :	  677676:       0f 84 94 00 00 00       je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
    0.00 :	  67767c:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  677680:       44 89 e0                mov    %r12d,%eax
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677683:       48 8b 15 76 5a 50 00    mov    0x505a76(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  67768a:       f0 86 02                lock xchg %al,(%rdx)
    0.00 :	  67768d:       84 c0                   test   %al,%al
    0.00 :	  67768f:       75 5f                   jne    6776f0 <StrategyGetBuffer+0x190>
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :
         :	                while (StrategyControl->firstFreeBuffer >= 0)
    0.00 :	  677691:       48 8b 15 68 5a 50 00    mov    0x505a68(%rip),%rdx        # b7d100 <StrategyControl>
    0.00 :	  677698:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67769b:       85 c0                   test   %eax,%eax
    0.00 :	  67769d:       0f 88 9d 00 00 00       js     677740 <StrategyGetBuffer+0x1e0>
         :	                {
         :	                        buf = &BufferDescriptors[StrategyControl->firstFreeBuffer];
    0.00 :	  6776a3:       48 63 d8                movslq %eax,%rbx
    0.00 :	  6776a6:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6776aa:       48 03 1d 4f 84 54 00    add    0x54844f(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        Assert(buf->freeNext != FREENEXT_NOT_IN_LIST);
         :
         :	                        /* Unconditionally remove buffer from freelist */
         :	                        StrategyControl->firstFreeBuffer = buf->freeNext;
    0.00 :	  6776b1:       8b 43 28                mov    0x28(%rbx),%eax
    0.00 :	  6776b4:       89 42 08                mov    %eax,0x8(%rdx)
         :	                        buf->freeNext = FREENEXT_NOT_IN_LIST;
    0.00 :	  6776b7:       c7 43 28 fe ff ff ff    movl   $0xfffffffe,0x28(%rbx)
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776be:       48 8b 05 3b 5a 50 00    mov    0x505a3b(%rip),%rax        # b7d100 <StrategyControl>
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776c5:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :
         :	                        /*
         :	                         * Release the lock so someone else can access the freelist (or run
         :	                         * the clocksweep) while we check out this buffer.
         :	                         */
         :	                        SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776c9:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  6776cc:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6776cf:       f0 86 07                lock xchg %al,(%rdi)
         :	                         * it; discard it and retry.  (This can only happen if VACUUM put a
         :	                         * valid buffer in the freelist and then someone else used it before
         :	                         * we got to it.  It's probably impossible altogether as of 8.3, but
         :	                         * we'd better check anyway.)
         :	                         */
         :	                        LockBufHdr(buf);
    0.00 :	  6776d2:       84 c0                   test   %al,%al
    0.00 :	  6776d4:       74 92                   je     677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776d6:       ba d0 00 00 00          mov    $0xd0,%edx
    0.00 :	  6776db:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  6776e0:       e8 5b 89 01 00          callq  690040 <s_lock>
    0.00 :	  6776e5:       eb 81                   jmp    677668 <StrategyGetBuffer+0x108>
    0.00 :	  6776e7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6776ee:       00 00 
         :	                                return buf;
         :	                        }
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  6776f0:       48 8b 3d 09 5a 50 00    mov    0x505a09(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  6776f7:       ba da 00 00 00          mov    $0xda,%edx
    0.00 :	  6776fc:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677701:       e8 3a 89 01 00          callq  690040 <s_lock>
    0.00 :	  677706:       eb 89                   jmp    677691 <StrategyGetBuffer+0x131>
    0.00 :	  677708:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67770f:       00 
         :	                                trycounter = NBuffers;
         :	                        }
         :	                        else
         :	                        {
         :	                                /* Found a usable buffer */
         :	                                if (strategy != NULL)
    0.00 :	  677710:       4d 85 ed                test   %r13,%r13
    0.00 :	  677713:       74 0f                   je     677724 <StrategyGetBuffer+0x1c4>
         :	 * is called with the spinlock held, it had better be quite cheap.
         :	 */
         :	static void
         :	AddBufferToRing(BufferAccessStrategy strategy, volatile BufferDesc *buf)
         :	{
         :	        strategy->buffers[strategy->current] = BufferDescriptorGetBuffer(buf);
    0.00 :	  677715:       8b 43 24                mov    0x24(%rbx),%eax
    0.00 :	  677718:       49 63 55 08             movslq 0x8(%r13),%rdx
    0.00 :	  67771c:       83 c0 01                add    $0x1,%eax
    0.00 :	  67771f:       41 89 44 95 10          mov    %eax,0x10(%r13,%rdx,4)
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
         :	        }
         :	}
    0.00 :	  677724:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  677728:       48 89 d8                mov    %rbx,%rax
    0.00 :	  67772b:       5b                      pop    %rbx
    0.00 :	  67772c:       41 5c                   pop    %r12
    0.00 :	  67772e:       41 5d                   pop    %r13
    0.00 :	  677730:       41 5e                   pop    %r14
    0.00 :	  677732:       41 5f                   pop    %r15
    0.00 :	  677734:       c9                      leaveq 
    0.00 :	  677735:       c3                      retq   
    0.00 :	  677736:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67773d:       00 00 00 
         :	                        UnlockBufHdr(buf);
         :
         :	                        /* Reacquire the lock and go around for another pass. */
         :	                        SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
         :	                }
         :	                SpinLockRelease(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677740:       48 8b 05 b9 59 50 00    mov    0x5059b9(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  677747:       c6 00 00                movb   $0x0,(%rax)
    0.00 :	  67774a:       48 8b 15 af 59 50 00    mov    0x5059af(%rip),%rdx        # b7d100 <StrategyControl>
         :	        }
         :
         :	        /* Nothing on the freelist, so run the "clock sweep" algorithm */
         :	        trycounter = NBuffers;
    0.00 :	  677751:       44 8b 25 c8 13 4f 00    mov    0x4f13c8(%rip),%r12d        # b68b20 <NBuffers>
    0.00 :	  677758:       41 be 01 00 00 00       mov    $0x1,%r14d
    0.00 :	  67775e:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  677764:       eb 30                   jmp    677796 <StrategyGetBuffer+0x236>
    0.00 :	  677766:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67776d:       00 00 00 
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
         :	                if (buf->refcount == 0)
         :	                {
         :	                        if (buf->usage_count > 0)
    0.00 :	  677770:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  677774:       66 85 c0                test   %ax,%ax
    0.00 :	  677777:       74 97                   je     677710 <StrategyGetBuffer+0x1b0>
         :	                        {
         :	                                buf->usage_count--;
    0.00 :	  677779:       0f b7 43 16             movzwl 0x16(%rbx),%eax
    0.00 :	  67777d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  677780:       66 89 43 16             mov    %ax,0x16(%rbx)
         :	                                trycounter = NBuffers;
    0.00 :	  677784:       44 8b 25 95 13 4f 00    mov    0x4f1395(%rip),%r12d        # b68b20 <NBuffers>
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
         :	                }
         :	                UnlockBufHdr(buf);
    0.00 :	  67778b:       c6 43 20 00             movb   $0x0,0x20(%rbx)
    0.00 :	  67778f:       48 8b 15 6a 59 50 00    mov    0x50596a(%rip),%rdx        # b7d100 <StrategyControl>
         :	        trycounter = NBuffers;
         :	        for (;;)
         :	        {
         :	                int victim;
         :
         :	                victim = pg_atomic_fetch_add_u32(&StrategyControl->nextVictimBuffer, 1);
    0.00 :	  677796:       48 8d 42 04             lea    0x4(%rdx),%rax
    0.00 :	  67779a:       44 89 f2                mov    %r14d,%edx
    0.00 :	  67779d:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                buf = &BufferDescriptors[victim % NBuffers];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:231
    6.82 :	  6777a1:       89 d0                   mov    %edx,%eax
    0.00 :	  6777a3:       c1 fa 1f                sar    $0x1f,%edx
    0.00 :	  6777a6:       f7 3d 74 13 4f 00       idivl  0x4f1374(%rip)        # b68b20 <NBuffers>
    6.82 :	  6777ac:       48 63 da                movslq %edx,%rbx
    0.00 :	  6777af:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  6777b3:       48 03 1d 46 83 54 00    add    0x548346(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                if (victim % NBuffers == 0)
    0.00 :	  6777ba:       85 d2                   test   %edx,%edx
    0.00 :	  6777bc:       75 12                   jne    6777d0 <StrategyGetBuffer+0x270>
         :	                {
         :	                        pg_atomic_add_fetch_u32(&StrategyControl->completePasses, 1);
    0.00 :	  6777be:       48 8b 05 3b 59 50 00    mov    0x50593b(%rip),%rax        # b7d100 <StrategyControl>
    0.00 :	  6777c5:       44 89 f2                mov    %r14d,%edx
    0.00 :	  6777c8:       48 83 c0 10             add    $0x10,%rax
    0.00 :	  6777cc:       f0 0f c1 10             lock xadd %edx,(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6777d0:       48 8d 7b 20             lea    0x20(%rbx),%rdi
    0.00 :	  6777d4:       44 89 f8                mov    %r15d,%eax
    0.00 :	  6777d7:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/freelist.c:242
   72.73 :	  6777da:       84 c0                   test   %al,%al
    0.00 :	  6777dc:       75 42                   jne    677820 <StrategyGetBuffer+0x2c0>
         :	                if (buf->refcount == 0)
    0.00 :	  6777de:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  6777e1:       85 c0                   test   %eax,%eax
    0.00 :	  6777e3:       74 8b                   je     677770 <StrategyGetBuffer+0x210>
         :	                                if (strategy != NULL)
         :	                                        AddBufferToRing(strategy, buf);
         :	                                return buf;
         :	                        }
         :	                }
         :	                else if (--trycounter == 0)
    0.00 :	  6777e5:       41 83 ec 01             sub    $0x1,%r12d
    0.00 :	  6777e9:       75 a0                   jne    67778b <StrategyGetBuffer+0x22b>
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777eb:       ba 80 a1 8a 00          mov    $0x8aa180,%edx
    0.00 :	  6777f0:       be 0c 01 00 00          mov    $0x10c,%esi
    0.00 :	  6777f5:       bf ec a0 8a 00          mov    $0x8aa0ec,%edi
         :	                         * so all the buffers are pinned (or were when we looked at them).
         :	                         * We could hope that someone will free one eventually, but it's
         :	                         * probably better to fail than to risk getting stuck in an
         :	                         * infinite loop.
         :	                         */
         :	                        UnlockBufHdr(buf);
    0.00 :	  6777fa:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        elog(ERROR, "no unpinned buffers available");
    0.00 :	  6777fe:       e8 1d 3c 10 00          callq  77b420 <elog_start>
    0.00 :	  677803:       be 0e a1 8a 00          mov    $0x8aa10e,%esi
    0.00 :	  677808:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67780d:       31 c0                   xor    %eax,%eax
    0.00 :	  67780f:       e8 1c 3a 10 00          callq  77b230 <elog_finish>
    0.00 :	  677814:       e8 b7 1c df ff          callq  4694d0 <abort@plt>
    0.00 :	  677819:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * If the buffer is pinned or has a nonzero usage_count, we cannot use
         :	                 * it; decrement the usage_count (unless pinned) and keep scanning.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  677820:       ba f2 00 00 00          mov    $0xf2,%edx
    0.00 :	  677825:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67782a:       e8 11 88 01 00          callq  690040 <s_lock>
    0.00 :	  67782f:       eb ad                   jmp    6777de <StrategyGetBuffer+0x27e>
         :	         */
         :	        bgwriterLatch = LATCHPTR_ACCESS_ONCE(StrategyControl->bgwriterLatch);
         :	        if (bgwriterLatch)
         :	        {
         :	                /* we don't have guaranteed atomic 64bit reads */
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  677831:       48 8b 3d c8 58 50 00    mov    0x5058c8(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677838:       ba 9f 00 00 00          mov    $0x9f,%edx
    0.00 :	  67783d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677842:       e8 f9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677847:       e9 c4 fd ff ff          jmpq   677610 <StrategyGetBuffer+0xb0>
         :	         * the buffer_strategy_lock not the individual buffer spinlocks, so it's
         :	         * OK to manipulate them without holding the spinlock.
         :	         */
         :	        if (INT_ACCESS_ONCE(StrategyControl->firstFreeBuffer) >= 0)
         :	        {
         :	                SpinLockAcquire(&StrategyControl->buffer_strategy_lock);
    0.00 :	  67784c:       48 8b 3d ad 58 50 00    mov    0x5058ad(%rip),%rdi        # b7d100 <StrategyControl>
    0.00 :	  677853:       ba b8 00 00 00          mov    $0xb8,%edx
    0.00 :	  677858:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  67785d:       e8 de 87 01 00          callq  690040 <s_lock>
    0.00 :	  677862:       e9 f2 fd ff ff          jmpq   677659 <StrategyGetBuffer+0xf9>
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
         :	        if (buf->refcount == 0 && buf->usage_count <= 1)
         :	        {
         :	                strategy->current_was_in_ring = true;
    0.00 :	  677867:       41 c6 45 0c 01          movb   $0x1,0xc(%r13)
    0.00 :	  67786c:       e9 b3 fe ff ff          jmpq   677724 <StrategyGetBuffer+0x1c4>
    0.00 :	  677871:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * there, but it might've been decremented by clock sweep since then). A
         :	         * higher usage_count indicates someone else has touched the buffer, so we
         :	         * shouldn't re-use it.
         :	         */
         :	        buf = &BufferDescriptors[bufnum - 1];
         :	        LockBufHdr(buf);
    0.00 :	  677878:       ba 20 02 00 00          mov    $0x220,%edx
    0.00 :	  67787d:       be ec a0 8a 00          mov    $0x8aa0ec,%esi
    0.00 :	  677882:       e8 b9 87 01 00          callq  690040 <s_lock>
    0.00 :	  677887:       e9 34 fd ff ff          jmpq   6775c0 <StrategyGetBuffer+0x60>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   68.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
   12.20 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    4.88 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
    4.88 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/../../../../src/include/storage/s_lock.h:224
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1874
    2.44 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675260 <SyncOneBuffer>:
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
    2.44 :	  675260:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675261:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675266:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1857
   12.20 :	  675269:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  67526d:       48 63 df                movslq %edi,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675270:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  675274:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1858
    4.88 :	  675278:       48 c1 e3 06             shl    $0x6,%rbx
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  67527c:       48 83 ec 20             sub    $0x20,%rsp
         :	        volatile BufferDesc *bufHdr = &BufferDescriptors[buf_id];
    0.00 :	  675280:       48 03 1d 79 a8 54 00    add    0x54a879(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	 *
         :	 * Note: caller must have done ResourceOwnerEnlargeBuffers.
         :	 */
         :	static int
         :	SyncOneBuffer(int buf_id, bool skip_recently_used)
         :	{
    0.00 :	  675287:       41 89 f5                mov    %esi,%r13d
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
    4.88 :	  67528a:       48 8d 7b 20             lea    0x20(%rbx),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/../../../../src/include/storage/s_lock.h:224
    2.44 :	  67528e:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1870
   68.29 :	  675291:       84 c0                   test   %al,%al
    0.00 :	  675293:       75 5b                   jne    6752f0 <SyncOneBuffer+0x90>
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  675295:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  675298:       85 c0                   test   %eax,%eax
    0.00 :	  67529a:       75 0f                   jne    6752ab <SyncOneBuffer+0x4b>
    0.00 :	  67529c:       0f b7 43 16             movzwl 0x16(%rbx),%eax
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752a0:       41 bc 02 00 00 00       mov    $0x2,%r12d
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
         :
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
    0.00 :	  6752a6:       66 85 c0                test   %ax,%ax
    0.00 :	  6752a9:       74 08                   je     6752b3 <SyncOneBuffer+0x53>
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
    0.00 :	  6752ab:       45 31 e4                xor    %r12d,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1874
    2.44 :	  6752ae:       45 84 ed                test   %r13b,%r13b
    0.00 :	  6752b1:       75 2d                   jne    6752e0 <SyncOneBuffer+0x80>
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
         :	                return result;
         :	        }
         :
         :	        if (!(bufHdr->flags & BM_VALID) || !(bufHdr->flags & BM_DIRTY))
    0.00 :	  6752b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752b7:       a8 02                   test   $0x2,%al
    0.00 :	  6752b9:       74 08                   je     6752c3 <SyncOneBuffer+0x63>
    0.00 :	  6752bb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6752bf:       a8 01                   test   $0x1,%al
    0.00 :	  6752c1:       75 45                   jne    675308 <SyncOneBuffer+0xa8>
         :	        {
         :	                /* It's clean, so nothing to do */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752c3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1901
    2.44 :	  6752c7:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6752ca:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6752ce:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6752d2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6752d6:       c9                      leaveq 
    0.00 :	  6752d7:       c3                      retq   
    0.00 :	  6752d8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  6752df:       00 
         :	        if (bufHdr->refcount == 0 && bufHdr->usage_count == 0)
         :	                result |= BUF_REUSABLE;
         :	        else if (skip_recently_used)
         :	        {
         :	                /* Caller told us not to write recently-used buffers */
         :	                UnlockBufHdr(bufHdr);
    0.00 :	  6752e0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  6752e3:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  6752e7:       eb de                   jmp    6752c7 <SyncOneBuffer+0x67>
    0.00 :	  6752e9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * as we mark pages dirty in access methods *before* logging changes with
         :	         * XLogInsert(): if someone marks the buffer dirty just after our check we
         :	         * don't worry because our checkpoint.redo points before log record for
         :	         * upcoming changes and so we are not required to write such dirty buffer.
         :	         */
         :	        LockBufHdr(bufHdr);
    0.00 :	  6752f0:       ba 4e 07 00 00          mov    $0x74e,%edx
    0.00 :	  6752f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6752fa:       e8 41 ad 01 00          callq  690040 <s_lock>
    0.00 :	  6752ff:       eb 94                   jmp    675295 <SyncOneBuffer+0x35>
    0.00 :	  675301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  675308:       48 89 df                mov    %rbx,%rdi
         :	        FlushBuffer(bufHdr, NULL);
         :
         :	        LWLockRelease(bufHdr->content_lock);
         :	        UnpinBuffer(bufHdr, true);
         :
         :	        return result | BUF_WRITTEN;
    0.00 :	  67530b:       41 83 cc 01             or     $0x1,%r12d
         :
         :	        /*
         :	         * Pin it, share-lock it, write it.  (FlushBuffer will do nothing if the
         :	         * buffer is clean by the time we've locked it.)
         :	         */
         :	        PinBuffer_Locked(bufHdr);
    0.00 :	  67530f:       e8 bc f8 ff ff          callq  674bd0 <PinBuffer_Locked>
         :	        LWLockAcquire(bufHdr->content_lock, LW_SHARED);
    0.00 :	  675314:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675318:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67531d:       e8 ce a7 01 00          callq  68faf0 <LWLockAcquire>
         :
         :	        FlushBuffer(bufHdr, NULL);
    0.00 :	  675322:       31 f6                   xor    %esi,%esi
    0.00 :	  675324:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675327:       e8 24 fc ff ff          callq  674f50 <FlushBuffer>
         :
         :	        LWLockRelease(bufHdr->content_lock);
    0.00 :	  67532c:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  675330:       e8 6b a0 01 00          callq  68f3a0 <LWLockRelease>
         :	        UnpinBuffer(bufHdr, true);
    0.00 :	  675335:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67533a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  67533d:       e8 ee f9 ff ff          callq  674d30 <UnpinBuffer>
         :
         :	        return result | BUF_WRITTEN;
         :	}
    0.00 :	  675342:       eb 83                   jmp    6752c7 <SyncOneBuffer+0x67>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   58.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:602
    2.78 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:655
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068eec0 <LWLockAttemptLock>:
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:602
    5.56 :	  68eec0:       55                      push   %rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec1:       48 85 d2                test   %rdx,%rdx
         :	 * for 'potentially_spurious'. Its value will be set to true if we possibly
         :	 * did so. The caller then has to handle that scenario.
         :	 */
         :	static bool
         :	LWLockAttemptLock(LWLock* lock, LWLockMode mode, bool *potentially_spurious)
         :	{
    0.00 :	  68eec4:       48 89 e5                mov    %rsp,%rbp
         :	        lwstats = get_lwlock_stats_entry(lock);
         :	#endif
         :
         :	        AssertArg(mode == LW_EXCLUSIVE || mode == LW_SHARED);
         :
         :	        if (potentially_spurious != NULL)
    0.00 :	  68eec7:       74 03                   je     68eecc <LWLockAttemptLock+0xc>
         :	                *potentially_spurious = false;
    0.00 :	  68eec9:       c6 02 00                movb   $0x0,(%rdx)
         :
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68eecc:       85 f6                   test   %esi,%esi
    0.00 :	  68eece:       75 28                   jne    68eef8 <LWLockAttemptLock+0x38>
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68eed0:       8b 47 04                mov    0x4(%rdi),%eax
         :	                 * First check whether the variable is free without a atomic
         :	                 * operation; it's often quite a bit cheaper for contended
         :	                 * locks. Doing so can cause a superflous shared-exclusive cacheline
         :	                 * transition, but benchmarks show that it's still worth doing so.
         :	                 */
         :	                expected = pg_atomic_read_u32(&lock->lockcount);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:625
   25.00 :	  68eed3:       48 8d 57 04             lea    0x4(%rdi),%rdx
         :
         :	                if (expected != 0)
    0.00 :	  68eed7:       85 c0                   test   %eax,%eax
    0.00 :	  68eed9:       75 65                   jne    68ef40 <LWLockAttemptLock+0x80>
         :
         :	        /*
         :	         * Perform cmpxchg and use the zero flag which it implicitly sets when
         :	         * equal to measure the success.
         :	         */
         :	        __asm__ __volatile__(
    0.00 :	  68eedb:       b9 00 00 00 40          mov    $0x40000000,%ecx
    0.00 :	  68eee0:       89 f0                   mov    %esi,%eax
    0.00 :	  68eee2:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/arch-x86.h:187
    8.33 :	  68eee6:       40 0f 94 c6             sete   %sil
    0.00 :	  68eeea:       40 84 f6                test   %sil,%sil
    0.00 :	  68eeed:       0f 94 c1                sete   %cl
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68eef0:       89 c8                   mov    %ecx,%eax
    0.00 :	  68eef2:       c9                      leaveq 
    0.00 :	  68eef3:       c3                      retq   
    0.00 :	  68eef4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                /*
         :	                 * If the caller is interested in spurious locks, do an unlocked check
         :	                 * first.  This is useful if potentially spurious results have a
         :	                 * noticeable cost.
         :	                 */
         :	                if (potentially_spurious != NULL &&
    0.00 :	  68eef8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68eefb:       48 8d 77 04             lea    0x4(%rdi),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:655
    2.78 :	  68eeff:       74 0e                   je     68ef0f <LWLockAttemptLock+0x4f>
    0.00 :	  68ef01:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  68ef04:       48 8d 77 04             lea    0x4(%rdi),%rsi
    0.00 :	  68ef08:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef0d:       77 31                   ja     68ef40 <LWLockAttemptLock+0x80>
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68ef0f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68ef14:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                 * might have to back out again if it turns out somebody else has an
         :	                 * exclusive lock.
         :	                 */
         :	                oldstate = pg_atomic_fetch_add_u32(&lock->lockcount, 1);
         :
         :	                if (oldstate >= EXCLUSIVE_LOCK)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:666
   58.33 :	  68ef18:       31 c9                   xor    %ecx,%ecx
    0.00 :	  68ef1a:       3d ff ff ff 3f          cmp    $0x3fffffff,%eax
    0.00 :	  68ef1f:       76 cf                   jbe    68eef0 <LWLockAttemptLock+0x30>
    0.00 :	  68ef21:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68ef26:       f0 0f c1 06             lock xadd %eax,(%rsi)
         :	                         * problems exist.
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
    0.00 :	  68ef2a:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68ef2d:       74 11                   je     68ef40 <LWLockAttemptLock+0x80>
         :	                                *potentially_spurious = true;
    0.00 :	  68ef2f:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  68ef34:       c6 02 01                movb   $0x1,(%rdx)
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef37:       89 c8                   mov    %ecx,%eax
    0.00 :	  68ef39:       c9                      leaveq 
    0.00 :	  68ef3a:       c3                      retq   
    0.00 :	  68ef3b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                         */
         :	                        pg_atomic_fetch_sub_u32(&lock->lockcount, 1);
         :
         :
         :	                        if (potentially_spurious != NULL)
         :	                                *potentially_spurious = true;
    0.00 :	  68ef40:       b9 01 00 00 00          mov    $0x1,%ecx
         :	                        return false;
         :	                }
         :	        }
         :
         :	        pg_unreachable();
         :	}
    0.00 :	  68ef45:       c9                      leaveq 
    0.00 :	  68ef46:       89 c8                   mov    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.53 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:459
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
    8.82 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:483
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:459
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:464
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:483
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:459
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:470
    2.94 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006c7610 <date2timestamp>:
         :	 * time zone
         :	 */
         :
         :	static Timestamp
         :	date2timestamp(DateADT dateVal)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:459
    5.88 :	  6c7610:       55                      push   %rbp
   17.65 :	  6c7611:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6c7614:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:459
    2.94 :	  6c7615:       48 83 ec 08             sub    $0x8,%rsp
         :	        Timestamp       result;
         :
         :	        if (DATE_IS_NOBEGIN(dateVal))
    0.00 :	  6c7619:       81 ff 00 00 00 80       cmp    $0x80000000,%edi
    0.00 :	  6c761f:       74 57                   je     6c7678 <date2timestamp+0x68>
         :	                TIMESTAMP_NOBEGIN(result);
         :	        else if (DATE_IS_NOEND(dateVal))
    0.00 :	  6c7621:       81 ff ff ff ff 7f       cmp    $0x7fffffff,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:464
    5.88 :	  6c7627:       48 be ff ff ff ff ff    movabs $0x7fffffffffffffff,%rsi
    0.00 :	  6c762e:       ff ff 7f 
    0.00 :	  6c7631:       74 37                   je     6c766a <date2timestamp+0x5a>
         :	                TIMESTAMP_NOEND(result);
         :	        else
         :	        {
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	                /* date is days since 2000, timestamp is microseconds since same... */
         :	                result = dateVal * USECS_PER_DAY;
    0.00 :	  6c7633:       48 63 cf                movslq %edi,%rcx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:470
    2.94 :	  6c7636:       48 b8 00 60 d7 1d 14    movabs $0x141dd76000,%rax
    0.00 :	  6c763d:       00 00 00 
         :	                /* Date's range is wider than timestamp's, so check for overflow */
         :	                if (result / USECS_PER_DAY != dateVal)
    0.00 :	  6c7640:       48 ba 97 b8 a1 56 b9    movabs $0x32e73fb956a1b897,%rdx
    0.00 :	  6c7647:       3f e7 32 
         :	                TIMESTAMP_NOEND(result);
         :	        else
         :	        {
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	                /* date is days since 2000, timestamp is microseconds since same... */
         :	                result = dateVal * USECS_PER_DAY;
    0.00 :	  6c764a:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  6c764d:       48 0f af f0             imul   %rax,%rsi
         :	                /* Date's range is wider than timestamp's, so check for overflow */
         :	                if (result / USECS_PER_DAY != dateVal)
    0.00 :	  6c7651:       48 89 f0                mov    %rsi,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
   11.76 :	  6c7654:       48 f7 ea                imul   %rdx
   23.53 :	  6c7657:       48 89 f0                mov    %rsi,%rax
    0.00 :	  6c765a:       48 c1 f8 3f             sar    $0x3f,%rax
    0.00 :	  6c765e:       48 c1 fa 22             sar    $0x22,%rdx
   11.76 :	  6c7662:       48 29 c2                sub    %rax,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:472
    2.94 :	  6c7665:       48 39 d1                cmp    %rdx,%rcx
    0.00 :	  6c7668:       75 22                   jne    6c768c <date2timestamp+0x7c>
         :	                result = dateVal * (double) SECS_PER_DAY;
         :	#endif
         :	        }
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/date.c:483
    5.88 :	  6c766a:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  6c766e:       48 89 f0                mov    %rsi,%rax
    0.00 :	  6c7671:       5b                      pop    %rbx
    0.00 :	  6c7672:       c9                      leaveq 
    8.82 :	  6c7673:       c3                      retq   
    0.00 :	  6c7674:       0f 1f 40 00             nopl   0x0(%rax)
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	                /* date is days since 2000, timestamp is microseconds since same... */
         :	                result = dateVal * USECS_PER_DAY;
         :	                /* Date's range is wider than timestamp's, so check for overflow */
         :	                if (result / USECS_PER_DAY != dateVal)
         :	                        ereport(ERROR,
    0.00 :	  6c7678:       48 be 00 00 00 00 00    movabs $0x8000000000000000,%rsi
    0.00 :	  6c767f:       00 00 80 
         :	                result = dateVal * (double) SECS_PER_DAY;
         :	#endif
         :	        }
         :
         :	        return result;
         :	}
    0.00 :	  6c7682:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  6c7686:       48 89 f0                mov    %rsi,%rax
    0.00 :	  6c7689:       5b                      pop    %rbx
    0.00 :	  6c768a:       c9                      leaveq 
    0.00 :	  6c768b:       c3                      retq   
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	                /* date is days since 2000, timestamp is microseconds since same... */
         :	                result = dateVal * USECS_PER_DAY;
         :	                /* Date's range is wider than timestamp's, so check for overflow */
         :	                if (result / USECS_PER_DAY != dateVal)
         :	                        ereport(ERROR,
    0.00 :	  6c768c:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6c768f:       b9 c7 9a 8b 00          mov    $0x8b9ac7,%ecx
    0.00 :	  6c7694:       ba db 01 00 00          mov    $0x1db,%edx
    0.00 :	  6c7699:       be d3 94 8b 00          mov    $0x8b94d3,%esi
    0.00 :	  6c769e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6c76a3:       e8 18 34 0b 00          callq  77aac0 <errstart>
    0.00 :	  6c76a8:       84 c0                   test   %al,%al
    0.00 :	  6c76aa:       75 05                   jne    6c76b1 <date2timestamp+0xa1>
    0.00 :	  6c76ac:       e8 1f 1e da ff          callq  4694d0 <abort@plt>
    0.00 :	  6c76b1:       bf 90 95 8b 00          mov    $0x8b9590,%edi
    0.00 :	  6c76b6:       31 c0                   xor    %eax,%eax
    0.00 :	  6c76b8:       e8 e3 51 0b 00          callq  77c8a0 <errmsg>
    0.00 :	  6c76bd:       bf 82 00 00 08          mov    $0x8000082,%edi
    0.00 :	  6c76c2:       89 c3                   mov    %eax,%ebx
    0.00 :	  6c76c4:       e8 87 56 0b 00          callq  77cd50 <errcode>
    0.00 :	  6c76c9:       89 de                   mov    %ebx,%esi
    0.00 :	  6c76cb:       89 c7                   mov    %eax,%edi
    0.00 :	  6c76cd:       31 c0                   xor    %eax,%eax
    0.00 :	  6c76cf:       e8 0c 2f 0b 00          callq  77a5e0 <errfinish>
    0.00 :	  6c76d4:       eb d6                   jmp    6c76ac <date2timestamp+0x9c>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.74 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:615
   25.93 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:610
    7.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
    7.41 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
    3.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a1a0 <ResourceOwnerRememberBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:610
   11.11 :	  79a1a0:       55                      push   %rbp
         :	        if (owner != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
    3.70 :	  79a1a1:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerRememberBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a1a4:       48 89 e5                mov    %rsp,%rbp
         :	        if (owner != NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:611
    7.41 :	  79a1a7:       74 0f                   je     79a1b8 <ResourceOwnerRememberBuffer+0x18>
         :	        {
         :	                Assert(owner->nbuffers < owner->maxbuffers);
         :	                owner->buffers[owner->nbuffers] = buffer;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
    7.41 :	  79a1a9:       48 63 57 20             movslq 0x20(%rdi),%rdx
    0.00 :	  79a1ad:       48 8b 47 28             mov    0x28(%rdi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:614
    3.70 :	  79a1b1:       89 34 90                mov    %esi,(%rax,%rdx,4)
         :	                owner->nbuffers++;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:615
   40.74 :	  79a1b4:       83 47 20 01             addl   $0x1,0x20(%rdi)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:617
   25.93 :	  79a1b8:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   23.08 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5290
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5270
   11.54 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5259
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5403
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5480
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5494
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ad000 <ExecProject>:
         :	 *              data will be valid, he must call ExecMaterializeSlot on the
         :	 *              result slot.
         :	 */
         :	TupleTableSlot *
         :	ExecProject(ProjectionInfo *projInfo, ExprDoneCond *isDone)
         :	{
    0.00 :	  5ad000:       55                      push   %rbp
    0.00 :	  5ad001:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ad004:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5386
    3.85 :	  5ad006:       41 56                   push   %r14
    0.00 :	  5ad008:       41 55                   push   %r13
    0.00 :	  5ad00a:       41 54                   push   %r12
    0.00 :	  5ad00c:       53                      push   %rbx
    0.00 :	  5ad00d:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5ad010:       48 83 ec 48             sub    $0x48,%rsp
    0.00 :	  5ad014:       48 89 75 90             mov    %rsi,-0x70(%rbp)
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad018:       48 8b 47 18             mov    0x18(%rdi),%rax
         :	        econtext = projInfo->pi_exprContext;
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5403
    3.85 :	  5ad01c:       48 85 f6                test   %rsi,%rsi
         :	        Assert(projInfo != NULL);
         :
         :	        /*
         :	         * get the projection info we want
         :	         */
         :	        slot = projInfo->pi_slot;
    0.00 :	  5ad01f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
         :	        econtext = projInfo->pi_exprContext;
    0.00 :	  5ad023:       4c 8b 77 10             mov    0x10(%rdi),%r14
         :
         :	        /* Assume single result row until proven otherwise */
         :	        if (isDone)
    0.00 :	  5ad027:       74 06                   je     5ad02f <ExecProject+0x2f>
         :	                *isDone = ExprSingleResult;
    0.00 :	  5ad029:       c7 06 00 00 00 00       movl   $0x0,(%rsi)
         :	        /*
         :	         * Clear any former contents of the result slot.  This makes it safe for
         :	         * us to use the slot's Datum/isnull arrays as workspace. (Also, we can
         :	         * return the slot as-is if we decide no rows can be projected.)
         :	         */
         :	        ExecClearTuple(slot);
    0.00 :	  5ad02f:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  5ad033:       e8 d8 70 00 00          callq  5b4110 <ExecClearTuple>
         :	        /*
         :	         * Force extraction of all input values that we'll need.  The
         :	         * Var-extraction loops below depend on this, and we are also prefetching
         :	         * all attributes that will be referenced in the generic expressions.
         :	         */
         :	        if (projInfo->pi_lastInnerVar > 0)
    0.00 :	  5ad038:       8b 73 48                mov    0x48(%rbx),%esi
    0.00 :	  5ad03b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad03d:       7e 09                   jle    5ad048 <ExecProject+0x48>
         :	                slot_getsomeattrs(econtext->ecxt_innertuple,
    0.00 :	  5ad03f:       49 8b 7e 10             mov    0x10(%r14),%rdi
    0.00 :	  5ad043:       e8 18 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastInnerVar);
         :	        if (projInfo->pi_lastOuterVar > 0)
    0.00 :	  5ad048:       8b 73 4c                mov    0x4c(%rbx),%esi
    0.00 :	  5ad04b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad04d:       7e 09                   jle    5ad058 <ExecProject+0x58>
         :	                slot_getsomeattrs(econtext->ecxt_outertuple,
    0.00 :	  5ad04f:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	  5ad053:       e8 08 22 ec ff          callq  46f260 <slot_getsomeattrs>
         :	                                                  projInfo->pi_lastOuterVar);
         :	        if (projInfo->pi_lastScanVar > 0)
    0.00 :	  5ad058:       8b 73 50                mov    0x50(%rbx),%esi
    0.00 :	  5ad05b:       85 f6                   test   %esi,%esi
    0.00 :	  5ad05d:       7e 09                   jle    5ad068 <ExecProject+0x68>
         :	                slot_getsomeattrs(econtext->ecxt_scantuple,
    0.00 :	  5ad05f:       49 8b 7e 08             mov    0x8(%r14),%rdi
    0.00 :	  5ad063:       e8 f8 21 ec ff          callq  46f260 <slot_getsomeattrs>
         :
         :	        /*
         :	         * Assign simple Vars to result by direct extraction of fields from source
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
    0.00 :	  5ad068:       44 8b 43 2c             mov    0x2c(%rbx),%r8d
         :	        if (numSimpleVars > 0)
    0.00 :	  5ad06c:       45 85 c0                test   %r8d,%r8d
    0.00 :	  5ad06f:       7e 5d                   jle    5ad0ce <ExecProject+0xce>
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad071:       80 7b 28 00             cmpb   $0x0,0x28(%rbx)
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad075:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
         :	                bool       *isnull = slot->tts_isnull;
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
    0.00 :	  5ad079:       4c 8b 5b 30             mov    0x30(%rbx),%r11
         :	                int                *varNumbers = projInfo->pi_varNumbers;
    0.00 :	  5ad07d:       4c 8b 53 38             mov    0x38(%rbx),%r10
         :	         * slots ... a mite ugly, but fast ...
         :	         */
         :	        numSimpleVars = projInfo->pi_numSimpleVars;
         :	        if (numSimpleVars > 0)
         :	        {
         :	                Datum      *values = slot->tts_values;
    0.00 :	  5ad081:       4c 8b 6a 28             mov    0x28(%rdx),%r13
         :	                bool       *isnull = slot->tts_isnull;
    0.00 :	  5ad085:       4c 8b 62 30             mov    0x30(%rdx),%r12
         :	                int                *varSlotOffsets = projInfo->pi_varSlotOffsets;
         :	                int                *varNumbers = projInfo->pi_varNumbers;
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
    0.00 :	  5ad089:       0f 84 e1 01 00 00       je     5ad270 <ExecProject+0x270>
    0.00 :	  5ad08f:       4c 89 df                mov    %r11,%rdi
    0.00 :	  5ad092:       31 f6                   xor    %esi,%esi
    0.00 :	  5ad094:       0f 1f 40 00             nopl   0x0(%rax)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad098:       48 63 07                movslq (%rdi),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad09b:       48 83 c7 04             add    $0x4,%rdi
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad09f:       49 8b 0c 06             mov    (%r14,%rax,1),%rcx
         :	                                int                     varNumber = varNumbers[i] - 1;
         :
         :	                                values[i] = varSlot->tts_values[varNumber];
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5450
    3.85 :	  5ad0a3:       41 8b 04 b2             mov    (%r10,%rsi,4),%eax
    0.00 :	  5ad0a7:       48 8b 51 28             mov    0x28(%rcx),%rdx
    0.00 :	  5ad0ab:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad0ae:       48 98                   cltq   
    0.00 :	  5ad0b0:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad0b4:       49 89 54 f5 00          mov    %rdx,0x0(%r13,%rsi,8)
         :	                                isnull[i] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad0b9:       48 8b 51 30             mov    0x30(%rcx),%rdx
    0.00 :	  5ad0bd:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad0c1:       41 88 04 34             mov    %al,(%r12,%rsi,1)
    0.00 :	  5ad0c5:       48 83 c6 01             add    $0x1,%rsi
         :	                int                     i;
         :
         :	                if (projInfo->pi_directMap)
         :	                {
         :	                        /* especially simple case where vars go to output in order */
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad0c9:       41 39 f0                cmp    %esi,%r8d
    0.00 :	  5ad0cc:       7f ca                   jg     5ad098 <ExecProject+0x98>
         :	         * If there are any generic expressions, evaluate them.  It's possible
         :	         * that there are set-returning functions in such expressions; if so and
         :	         * we have reached the end of the set, we return the result slot, which we
         :	         * already marked empty.
         :	         */
         :	        if (projInfo->pi_targetlist)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5478
    3.85 :	  5ad0ce:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  5ad0d2:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad0d5:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  5ad0d9:       0f 84 fc 00 00 00       je     5ad1db <ExecProject+0x1db>
         :	        {
         :	                if (!ExecTargetList(projInfo->pi_targetlist,
    0.00 :	  5ad0df:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  5ad0e3:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad0e7:       4c 8b 7b 20             mov    0x20(%rbx),%r15
    0.00 :	  5ad0eb:       48 8b 52 30             mov    0x30(%rdx),%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5480
    3.85 :	  5ad0ef:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ad0f3:       48 8b 15 66 d7 60 00    mov    0x60d766(%rip),%rdx        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad0fa:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ad0fe:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
    0.00 :	  5ad102:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ad106:       49 8b 46 28             mov    0x28(%r14),%rax
    0.00 :	  5ad10a:       48 89 05 4f d7 60 00    mov    %rax,0x60d74f(%rip)        # bba860 <CurrentMemoryContext>
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ad111:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad115:       4c 8b 68 08             mov    0x8(%rax),%r13
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5259
    7.69 :	  5ad119:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad11c:       0f 84 ae 00 00 00       je     5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad122:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  5ad126:       eb 15                   jmp    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad128:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad12f:       00 
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad130:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad134:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad138:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad13b:       74 63                   je     5ad1a0 <ExecProject+0x1a0>
         :	        {
         :	                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad13d:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                AttrNumber      resind = tle->resno - 1;
         :
         :	                values[resind] = ExecEvalExpr(gstate->arg,
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    7.69 :	  5ad141:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad144:       48 8b 42 08             mov    0x8(%rdx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 :	  5ad148:       0f b7 58 10             movzwl 0x10(%rax),%ebx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
   11.54 :	  5ad14c:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad150:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad154:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad157:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  5ad15a:       48 0f bf db             movswq %bx,%rbx
    0.00 :	  5ad15e:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad162:       48 01 da                add    %rbx,%rdx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5265
    3.85 :	  5ad165:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad168:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad16b:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    3.85 :	  5ad16f:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                          econtext,
         :	                                                                          &isnull[resind],
         :	                                                                          &itemIsDone[resind]);
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5270
   15.38 :	  5ad173:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ad177:       85 c0                   test   %eax,%eax
    0.00 :	  5ad179:       74 b9                   je     5ad134 <ExecProject+0x134>
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
    0.00 :	  5ad17b:       48 83 7d 90 00          cmpq   $0x0,-0x70(%rbp)
    0.00 :	  5ad180:       0f 84 fd 01 00 00       je     5ad383 <ExecProject+0x383>
         :	                                ereport(ERROR,
         :	                                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                                 errmsg("set-valued function called in context that cannot accept a set")));
         :	                        if (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad186:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad189:       75 a5                   jne    5ad130 <ExecProject+0x130>
         :	                        {
         :	                                /* we have undone sets in the tlist, set flag */
         :	                                *isDone = ExprMultipleResult;
    0.00 :	  5ad18b:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad18f:       c7 00 01 00 00 00       movl   $0x1,(%rax)
         :	        /*
         :	         * evaluate all the expressions in the target list
         :	         */
         :	        haveDoneSets = false;           /* any exhausted set exprs in tlist? */
         :
         :	        foreach(tl, targetlist)
    0.00 :	  5ad195:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad199:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad19c:       75 9f                   jne    5ad13d <ExecProject+0x13d>
    0.00 :	  5ad19e:       66 90                   xchg   %ax,%ax
         :	                                haveDoneSets = true;
         :	                        }
         :	                }
         :	        }
         :
         :	        if (haveDoneSets)
    0.00 :	  5ad1a0:       80 7d c7 00             cmpb   $0x0,-0x39(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5290
   23.08 :	  5ad1a4:       74 2a                   je     5ad1d0 <ExecProject+0x1d0>
         :	        {
         :	                /*
         :	                 * note: can't get here unless we verified isDone != NULL
         :	                 */
         :	                if (*isDone == ExprSingleResult)
    0.00 :	  5ad1a6:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad1aa:       8b 02                   mov    (%rdx),%eax
    0.00 :	  5ad1ac:       85 c0                   test   %eax,%eax
    0.00 :	  5ad1ae:       0f 84 bc 01 00 00       je     5ad370 <ExecProject+0x370>
    0.00 :	  5ad1b4:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ad1b8:       4c 8b 6a 08             mov    0x8(%rdx),%r13
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad1bc:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad1bf:       75 6f                   jne    5ad230 <ExecProject+0x230>
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad1c1:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad1c4:       0f 84 02 01 00 00       je     5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad1ca:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad1d0:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad1d4:       48 89 05 85 d6 60 00    mov    %rax,0x60d685(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1db:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
         :	}
    0.00 :	  5ad1df:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad1e3:       5b                      pop    %rbx
    0.00 :	  5ad1e4:       41 5c                   pop    %r12
    0.00 :	  5ad1e6:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execQual.c:5494
    3.85 :	  5ad1e8:       41 5e                   pop    %r14
    0.00 :	  5ad1ea:       41 5f                   pop    %r15
    0.00 :	  5ad1ec:       c9                      leaveq 
         :
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
    0.00 :	  5ad1ed:       e9 2e 68 00 00          jmpq   5b3a20 <ExecStoreVirtualTuple>
    0.00 :	  5ad1f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
         :	                                {
         :	                                        values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad1f8:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad1fc:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ad200:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  5ad203:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad206:       48 01 da                add    %rbx,%rdx
    0.00 :	  5ad209:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad20c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad20f:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad213:       48 89 04 da             mov    %rax,(%rdx,%rbx,8)
         :	                                                                                                  econtext,
         :	                                                                                                  &isnull[resind],
         :	                                                                                                  &itemIsDone[resind]);
         :
         :	                                        if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad217:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad21c:       0f 84 a0 00 00 00       je     5ad2c2 <ExecProject+0x2c2>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad222:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad226:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad229:       74 2c                   je     5ad257 <ExecProject+0x257>
    0.00 :	  5ad22b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        {
         :	                                GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad230:       49 8b 55 00             mov    0x0(%r13),%rdx
         :	                                TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                AttrNumber      resind = tle->resno - 1;
         :
         :	                                if (itemIsDone[resind] == ExprEndResult)
    0.00 :	  5ad234:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad238:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad23c:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad23f:       48 0f bf d8             movswq %ax,%rbx
    0.00 :	  5ad243:       4d 8d 24 9f             lea    (%r15,%rbx,4),%r12
    0.00 :	  5ad247:       41 83 3c 24 02          cmpl   $0x2,(%r12)
    0.00 :	  5ad24c:       74 aa                   je     5ad1f8 <ExecProject+0x1f8>
         :	                {
         :	                        /*
         :	                         * We have some done and some undone sets.  Restart the done ones
         :	                         * so that we can deliver a tuple (if possible).
         :	                         */
         :	                        foreach(tl, targetlist)
    0.00 :	  5ad24e:       4d 8b 6d 08             mov    0x8(%r13),%r13
    0.00 :	  5ad252:       4d 85 ed                test   %r13,%r13
    0.00 :	  5ad255:       75 d9                   jne    5ad230 <ExecProject+0x230>
    0.00 :	  5ad257:       48 8b 55 90             mov    -0x70(%rbp),%rdx
    0.00 :	  5ad25b:       8b 02                   mov    (%rdx),%eax
         :	                         * have to cycle the nonempty sets to completion, else resources
         :	                         * will not be released from subplans etc.
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
    0.00 :	  5ad25d:       83 f8 02                cmp    $0x2,%eax
    0.00 :	  5ad260:       0f 85 6a ff ff ff       jne    5ad1d0 <ExecProject+0x1d0>
    0.00 :	  5ad266:       eb 64                   jmp    5ad2cc <ExecProject+0x2cc>
    0.00 :	  5ad268:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ad26f:       00 
         :	                        }
         :	                }
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
    0.00 :	  5ad270:       4c 8b 4b 40             mov    0x40(%rbx),%r9
    0.00 :	  5ad274:       31 ff                   xor    %edi,%edi
    0.00 :	  5ad276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5ad27d:       00 00 00 
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad280:       49 63 04 bb             movslq (%r11,%rdi,4),%rax
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad284:       41 8b 0c b9             mov    (%r9,%rdi,4),%ecx
    0.00 :	  5ad288:       83 e9 01                sub    $0x1,%ecx
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
         :	                        {
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
    0.00 :	  5ad28b:       49 8b 34 06             mov    (%r14,%rax,1),%rsi
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad28f:       41 8b 04 ba             mov    (%r10,%rdi,4),%eax
    0.00 :	  5ad293:       48 63 c9                movslq %ecx,%rcx
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad296:       48 83 c7 01             add    $0x1,%rdi
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad29a:       48 8b 56 28             mov    0x28(%rsi),%rdx
    0.00 :	  5ad29e:       83 e8 01                sub    $0x1,%eax
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2a1:       41 39 f8                cmp    %edi,%r8d
         :	                                char       *slotptr = ((char *) econtext) + varSlotOffsets[i];
         :	                                TupleTableSlot *varSlot = *((TupleTableSlot **) slotptr);
         :	                                int                     varNumber = varNumbers[i] - 1;
         :	                                int                     varOutputCol = varOutputCols[i] - 1;
         :
         :	                                values[varOutputCol] = varSlot->tts_values[varNumber];
    0.00 :	  5ad2a4:       48 98                   cltq   
    0.00 :	  5ad2a6:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ad2aa:       49 89 54 cd 00          mov    %rdx,0x0(%r13,%rcx,8)
         :	                                isnull[varOutputCol] = varSlot->tts_isnull[varNumber];
    0.00 :	  5ad2af:       48 8b 56 30             mov    0x30(%rsi),%rdx
    0.00 :	  5ad2b3:       0f b6 04 02             movzbl (%rdx,%rax,1),%eax
    0.00 :	  5ad2b7:       41 88 04 0c             mov    %al,(%r12,%rcx,1)
         :	                else
         :	                {
         :	                        /* we have to pay attention to varOutputCols[] */
         :	                        int                *varOutputCols = projInfo->pi_varOutputCols;
         :
         :	                        for (i = 0; i < numSimpleVars; i++)
    0.00 :	  5ad2bb:       7f c3                   jg     5ad280 <ExecProject+0x280>
    0.00 :	  5ad2bd:       e9 0c fe ff ff          jmpq   5ad0ce <ExecProject+0xce>
         :	                                        {
         :	                                                /*
         :	                                                 * Oh dear, this item is returning an empty set. Guess
         :	                                                 * we can't make a tuple after all.
         :	                                                 */
         :	                                                *isDone = ExprEndResult;
    0.00 :	  5ad2c2:       48 8b 45 90             mov    -0x70(%rbp),%rax
    0.00 :	  5ad2c6:       c7 00 02 00 00 00       movl   $0x2,(%rax)
    0.00 :	  5ad2cc:       48 8b 45 98             mov    -0x68(%rbp),%rax
    0.00 :	  5ad2d0:       48 8b 40 08             mov    0x8(%rax),%rax
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad2d4:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad2d7:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad2db:       74 6c                   je     5ad349 <ExecProject+0x349>
    0.00 :	  5ad2dd:       0f 1f 00                nopl   (%rax)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
    0.00 :	  5ad2e0:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  5ad2e4:       48 8b 12                mov    (%rdx),%rdx
    0.00 :	  5ad2e7:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad2eb:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ad2ef:       0f b7 40 10             movzwl 0x10(%rax),%eax
    0.00 :	  5ad2f3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ad2f6:       48 0f bf c0             movswq %ax,%rax
    0.00 :	  5ad2fa:       49 8d 1c 87             lea    (%r15,%rax,4),%rbx
    0.00 :	  5ad2fe:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad301:       75 35                   jne    5ad338 <ExecProject+0x338>
    0.00 :	  5ad303:       48 8b 55 a8             mov    -0x58(%rbp),%rdx
    0.00 :	  5ad307:       4c 8b 65 a0             mov    -0x60(%rbp),%r12
    0.00 :	  5ad30b:       4c 8d 2c c2             lea    (%rdx,%rax,8),%r13
    0.00 :	  5ad30f:       49 01 c4                add    %rax,%r12
    0.00 :	  5ad312:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        {
         :	                                                values[resind] = ExecEvalExpr(gstate->arg,
    0.00 :	  5ad318:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  5ad31c:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  5ad31f:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  5ad322:       48 8b 42 18             mov    0x18(%rdx),%rax
    0.00 :	  5ad326:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  5ad329:       48 89 c7                mov    %rax,%rdi
    0.00 :	  5ad32c:       ff 50 10                callq  *0x10(%rax)
    0.00 :	  5ad32f:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                                {
         :	                                        GenericExprState *gstate = (GenericExprState *) lfirst(tl);
         :	                                        TargetEntry *tle = (TargetEntry *) gstate->xprstate.expr;
         :	                                        AttrNumber      resind = tle->resno - 1;
         :
         :	                                        while (itemIsDone[resind] == ExprMultipleResult)
    0.00 :	  5ad333:       83 3b 01                cmpl   $0x1,(%rbx)
    0.00 :	  5ad336:       74 e0                   je     5ad318 <ExecProject+0x318>
         :	                         *
         :	                         * XXX is that still necessary?
         :	                         */
         :	                        if (*isDone == ExprEndResult)
         :	                        {
         :	                                foreach(tl, targetlist)
    0.00 :	  5ad338:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  5ad33c:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	  5ad340:       48 85 c0                test   %rax,%rax
    0.00 :	  5ad343:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  5ad347:       75 97                   jne    5ad2e0 <ExecProject+0x2e0>
    0.00 :	  5ad349:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  5ad34d:       48 89 15 0c d5 60 00    mov    %rdx,0x60d50c(%rip)        # bba860 <CurrentMemoryContext>
         :	        /*
         :	         * Successfully formed a result row.  Mark the result slot as containing a
         :	         * valid virtual tuple.
         :	         */
         :	        return ExecStoreVirtualTuple(slot);
         :	}
    0.00 :	  5ad354:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  5ad358:       48 83 c4 48             add    $0x48,%rsp
    0.00 :	  5ad35c:       5b                      pop    %rbx
    0.00 :	  5ad35d:       41 5c                   pop    %r12
    0.00 :	  5ad35f:       41 5d                   pop    %r13
    0.00 :	  5ad361:       41 5e                   pop    %r14
    0.00 :	  5ad363:       41 5f                   pop    %r15
    0.00 :	  5ad365:       c9                      leaveq 
    0.00 :	  5ad366:       c3                      retq   
    0.00 :	  5ad367:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ad36e:       00 00 
         :	                if (*isDone == ExprSingleResult)
         :	                {
         :	                        /*
         :	                         * all sets are done, so report that tlist expansion is complete.
         :	                         */
         :	                        *isDone = ExprEndResult;
    0.00 :	  5ad370:       c7 02 02 00 00 00       movl   $0x2,(%rdx)
    0.00 :	  5ad376:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  5ad37a:       48 89 05 df d4 60 00    mov    %rax,0x60d4df(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5ad381:       eb d1                   jmp    5ad354 <ExecProject+0x354>
         :
         :	                if (itemIsDone[resind] != ExprSingleResult)
         :	                {
         :	                        /* We have a set-valued expression in the tlist */
         :	                        if (isDone == NULL)
         :	                                ereport(ERROR,
    0.00 :	  5ad383:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5ad386:       b9 f0 ad 88 00          mov    $0x88adf0,%ecx
    0.00 :	  5ad38b:       ba 9c 14 00 00          mov    $0x149c,%edx
    0.00 :	  5ad390:       be fc a3 88 00          mov    $0x88a3fc,%esi
    0.00 :	  5ad395:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ad39a:       e8 21 d7 1c 00          callq  77aac0 <errstart>
    0.00 :	  5ad39f:       84 c0                   test   %al,%al
    0.00 :	  5ad3a1:       75 05                   jne    5ad3a8 <ExecProject+0x3a8>
    0.00 :	  5ad3a3:       e8 28 c1 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5ad3a8:       bf 30 b3 87 00          mov    $0x87b330,%edi
    0.00 :	  5ad3ad:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3af:       e8 ec f4 1c 00          callq  77c8a0 <errmsg>
    0.00 :	  5ad3b4:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  5ad3b9:       89 c3                   mov    %eax,%ebx
    0.00 :	  5ad3bb:       e8 90 f9 1c 00          callq  77cd50 <errcode>
    0.00 :	  5ad3c0:       89 de                   mov    %ebx,%esi
    0.00 :	  5ad3c2:       89 c7                   mov    %eax,%edi
    0.00 :	  5ad3c4:       31 c0                   xor    %eax,%eax
    0.00 :	  5ad3c6:       e8 15 d2 1c 00          callq  77a5e0 <errfinish>
    0.00 :	  5ad3cb:       eb d6                   jmp    5ad3a3 <ExecProject+0x3a3>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   19.23 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:465
   11.54 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
   11.54 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:475
   11.54 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:461
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:480
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    3.85 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b4110 <ExecClearTuple>:
         :	 *              NB: only the tuple is cleared, not the tuple descriptor (if any).
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *                                /* return: slot passed */
         :	ExecClearTuple(TupleTableSlot *slot)    /* slot in which to store tuple */
         :	{
    0.00 :	  5b4110:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:450
   19.23 :	  5b4111:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b4114:       53                      push   %rbx
    0.00 :	  5b4115:       48 89 fb                mov    %rdi,%rbx
    7.69 :	  5b4118:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(slot != NULL);
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
    0.00 :	  5b411c:       80 7f 05 00             cmpb   $0x0,0x5(%rdi)
    0.00 :	  5b4120:       75 5e                   jne    5b4180 <ExecClearTuple+0x70>
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:461
    3.85 :	  5b4122:       80 7b 06 00             cmpb   $0x0,0x6(%rbx)
    0.00 :	  5b4126:       75 48                   jne    5b4170 <ExecClearTuple+0x60>
         :	        slot->tts_shouldFreeMin = false;
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
    7.69 :	  5b4128:       8b 7b 20                mov    0x20(%rbx),%edi
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
         :
         :	        slot->tts_tuple = NULL;
    0.00 :	  5b412b:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b4132:       00 
         :	        slot->tts_mintuple = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:465
   15.38 :	  5b4133:       48 c7 43 38 00 00 00    movq   $0x0,0x38(%rbx)
    0.00 :	  5b413a:       00 
         :	        slot->tts_shouldFree = false;
    0.00 :	  5b413b:       c6 43 05 00             movb   $0x0,0x5(%rbx)
         :	        slot->tts_shouldFreeMin = false;
    0.00 :	  5b413f:       c6 43 06 00             movb   $0x0,0x6(%rbx)
         :
         :	        /*
         :	         * Drop the pin on the referenced buffer, if there is one.
         :	         */
         :	        if (BufferIsValid(slot->tts_buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:472
   11.54 :	  5b4143:       85 ff                   test   %edi,%edi
    0.00 :	  5b4145:       74 05                   je     5b414c <ExecClearTuple+0x3c>
         :	                ReleaseBuffer(slot->tts_buffer);
    0.00 :	  5b4147:       e8 14 0d 0c 00          callq  674e60 <ReleaseBuffer>
         :
         :	        slot->tts_buffer = InvalidBuffer;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:475
   11.54 :	  5b414c:       c7 43 20 00 00 00 00    movl   $0x0,0x20(%rbx)
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:480
    3.85 :	  5b4153:       c6 43 04 01             movb   $0x1,0x4(%rbx)
         :	        slot->tts_nvalid = 0;
         :
         :	        return slot;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
    3.85 :	  5b4157:       48 89 d8                mov    %rbx,%rax
         :
         :	        /*
         :	         * Mark it empty.
         :	         */
         :	        slot->tts_isempty = true;
         :	        slot->tts_nvalid = 0;
    0.00 :	  5b415a:       c7 43 24 00 00 00 00    movl   $0x0,0x24(%rbx)
         :
         :	        return slot;
         :	}
    0.00 :	  5b4161:       48 83 c4 08             add    $0x8,%rsp
    3.85 :	  5b4165:       5b                      pop    %rbx
    0.00 :	  5b4166:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:484
   11.54 :	  5b4167:       c3                      retq   
    0.00 :	  5b4168:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b416f:       00 
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
         :	        if (slot->tts_shouldFreeMin)
         :	                heap_free_minimal_tuple(slot->tts_mintuple);
    0.00 :	  5b4170:       48 8b 7b 38             mov    0x38(%rbx),%rdi
    0.00 :	  5b4174:       e8 37 ab eb ff          callq  46ecb0 <heap_free_minimal_tuple>
    0.00 :	  5b4179:       eb ad                   jmp    5b4128 <ExecClearTuple+0x18>
    0.00 :	  5b417b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Free the old physical tuple if necessary.
         :	         */
         :	        if (slot->tts_shouldFree)
         :	                heap_freetuple(slot->tts_tuple);
    0.00 :	  5b4180:       48 8b 7f 08             mov    0x8(%rdi),%rdi
    0.00 :	  5b4184:       e8 37 ab eb ff          callq  46ecc0 <heap_freetuple>
    0.00 :	  5b4189:       eb 97                   jmp    5b4122 <ExecClearTuple+0x12>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
   12.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
    8.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2769
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2769
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2778
    4.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674e60 <ReleaseBuffer>:
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
    0.00 :	  674e60:       55                      push   %rbp
    0.00 :	  674e61:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
   12.00 :	  674e64:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2762
    4.00 :	  674e68:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
    4.00 :	  674e6c:       48 83 ec 10             sub    $0x10,%rsp
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
    0.00 :	  674e70:       85 ff                   test   %edi,%edi
         :	/*
         :	 * ReleaseBuffer -- release the pin on a buffer
         :	 */
         :	void
         :	ReleaseBuffer(Buffer buffer)
         :	{
    4.00 :	  674e72:       89 fb                   mov    %edi,%ebx
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
    0.00 :	  674e74:       74 7f                   je     674ef5 <ReleaseBuffer+0x95>
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
         :
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2769
    4.00 :	  674e76:       89 fe                   mov    %edi,%esi
    4.00 :	  674e78:       48 8b 3d 41 5a 54 00    mov    0x545a41(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e7f:       e8 7c 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
         :
         :	        if (BufferIsLocal(buffer))
    0.00 :	  674e84:       85 db                   test   %ebx,%ebx
    0.00 :	  674e86:       78 38                   js     674ec0 <ReleaseBuffer+0x60>
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
    0.00 :	  674e88:       31 d2                   xor    %edx,%edx
    0.00 :	  674e8a:       31 f6                   xor    %esi,%esi
    0.00 :	  674e8c:       89 df                   mov    %ebx,%edi
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
         :	                return;
         :	        }
         :
         :	        bufHdr = &BufferDescriptors[buffer - 1];
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2778
    4.00 :	  674e8e:       4c 8b 25 6b ac 54 00    mov    0x54ac6b(%rip),%r12        # bbfb00 <BufferDescriptors>
         :
         :	        ref = GetPrivateRefCountEntry(buffer, false, false);
    0.00 :	  674e95:       e8 86 f6 ff ff          callq  674520 <GetPrivateRefCountEntry>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2780
   12.00 :	  674e9a:       48 89 c2                mov    %rax,%rdx
         :	        Assert(ref != NULL);
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
    0.00 :	  674e9d:       8b 40 04                mov    0x4(%rax),%eax
    0.00 :	  674ea0:       83 f8 01                cmp    $0x1,%eax
    0.00 :	  674ea3:       7e 33                   jle    674ed8 <ReleaseBuffer+0x78>
         :	                ref->refcount--;
    0.00 :	  674ea5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674ea8:       89 42 04                mov    %eax,0x4(%rdx)
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    4.00 :	  674eab:       48 8b 1c 24             mov    (%rsp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2788
    8.00 :	  674eaf:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eb4:       c9                      leaveq 
   40.00 :	  674eb5:       c3                      retq   
    0.00 :	  674eb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  674ebd:       00 00 00 
         :	        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
         :
         :	        if (BufferIsLocal(buffer))
         :	        {
         :	                Assert(LocalRefCount[-buffer - 1] > 0);
         :	                LocalRefCount[-buffer - 1]--;
    0.00 :	  674ec0:       f7 d3                   not    %ebx
    0.00 :	  674ec2:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674ec5:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674ec9:       48 03 05 50 82 50 00    add    0x508250(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674ed0:       83 28 01                subl   $0x1,(%rax)
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
         :	}
    0.00 :	  674ed3:       eb d6                   jmp    674eab <ReleaseBuffer+0x4b>
    0.00 :	  674ed5:       0f 1f 00                nopl   (%rax)
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ed8:       48 63 c3                movslq %ebx,%rax
         :	}
    0.00 :	  674edb:       48 8b 1c 24             mov    (%rsp),%rbx
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674edf:       31 f6                   xor    %esi,%esi
    0.00 :	  674ee1:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  674ee5:       49 8d 7c 04 c0          lea    -0x40(%r12,%rax,1),%rdi
         :	}
    0.00 :	  674eea:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  674eef:       c9                      leaveq 
         :	        Assert(ref->refcount > 0);
         :
         :	        if (ref->refcount > 1)
         :	                ref->refcount--;
         :	        else
         :	                UnpinBuffer(bufHdr, false);
    0.00 :	  674ef0:       e9 3b fe ff ff          jmpq   674d30 <UnpinBuffer>
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        PrivateRefCountEntry *ref;
         :
         :	        if (!BufferIsValid(buffer))
         :	                elog(ERROR, "bad buffer ID: %d", buffer);
    0.00 :	  674ef5:       ba 34 a0 8a 00          mov    $0x8aa034,%edx
    0.00 :	  674efa:       be cf 0a 00 00          mov    $0xacf,%esi
    0.00 :	  674eff:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674f04:       e8 17 65 10 00          callq  77b420 <elog_start>
    0.00 :	  674f09:       31 d2                   xor    %edx,%edx
    0.00 :	  674f0b:       be 5c 9d 8a 00          mov    $0x8a9d5c,%esi
    0.00 :	  674f10:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  674f15:       31 c0                   xor    %eax,%eax
    0.00 :	  674f17:       e8 14 63 10 00          callq  77b230 <elog_finish>
    0.00 :	  674f1c:       e8 af 45 df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   20.83 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
    4.17 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694ba0 <PredicateLockTuple>:
         :	 * Skip if not in full serializable transaction isolation level.
         :	 * Skip if this is a temporary table.
         :	 */
         :	void
         :	PredicateLockTuple(Relation relation, HeapTuple tuple, Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2466
   12.50 :	  694ba0:       55                      push   %rbp
    0.00 :	  694ba1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694ba4:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
   16.67 :	  694ba8:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  694bac:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  694baf:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  694bb3:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
   12.50 :	  694bb7:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694bbb:       48 8b 0d fe 9a 4e 00    mov    0x4e9afe(%rip),%rcx        # b7e6c0 <MySerializableXact>
         :	 * Skip if not in full serializable transaction isolation level.
         :	 * Skip if this is a temporary table.
         :	 */
         :	void
         :	PredicateLockTuple(Relation relation, HeapTuple tuple, Snapshot snapshot)
         :	{
   25.00 :	  694bc2:       49 89 f4                mov    %rsi,%r12
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
    4.17 :	  694bc5:       48 85 c9                test   %rcx,%rcx
    0.00 :	  694bc8:       74 13                   je     694bdd <PredicateLockTuple+0x3d>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694bca:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  694bcd:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  694bd3:       74 1b                   je     694bf0 <PredicateLockTuple+0x50>
    0.00 :	  694bd5:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694bdb:       74 13                   je     694bf0 <PredicateLockTuple+0x50>
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:2518
   20.83 :	  694bdd:       48 8b 5d e0             mov    -0x20(%rbp),%rbx
    0.00 :	  694be1:       4c 8b 65 e8             mov    -0x18(%rbp),%r12
    0.00 :	  694be5:       4c 8b 6d f0             mov    -0x10(%rbp),%r13
    0.00 :	  694be9:       4c 8b 75 f8             mov    -0x8(%rbp),%r14
    8.33 :	  694bed:       c9                      leaveq 
    0.00 :	  694bee:       c3                      retq   
    0.00 :	  694bef:       90                      nop
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  694bf0:       80 79 7c 00             cmpb   $0x0,0x7c(%rcx)
    0.00 :	  694bf4:       0f 88 9e 00 00 00       js     694c98 <PredicateLockTuple+0xf8>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  694bfa:       8b 53 40                mov    0x40(%rbx),%edx
    0.00 :	  694bfd:       81 fa 0f 27 00 00       cmp    $0x270f,%edx
    0.00 :	  694c03:       76 d8                   jbe    694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c05:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  694c09:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  694c0d:       74 ce                   je     694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c0f:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  694c13:       74 c8                   je     694bdd <PredicateLockTuple+0x3d>
         :	                return;
         :
         :	        /*
         :	         * If it's a heap tuple, return if this xact wrote it.
         :	         */
         :	        if (relation->rd_index == NULL)
    0.00 :	  694c15:       48 83 bb a0 00 00 00    cmpq   $0x0,0xa0(%rbx)
    0.00 :	  694c1c:       00 
    0.00 :	  694c1d:       0f 84 85 00 00 00       je     694ca8 <PredicateLockTuple+0x108>
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c23:       8b 43 04                mov    0x4(%rbx),%eax
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c26:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  694c2a:       48 8b 3d 9f 9a 4e 00    mov    0x4e9a9f(%rip),%rdi        # b7e6d0 <LocalPredicateLockHash>
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c31:       89 55 d4                mov    %edx,-0x2c(%rbp)
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c34:       31 c9                   xor    %ecx,%ecx
    0.00 :	  694c36:       31 d2                   xor    %edx,%edx
    0.00 :	  694c38:       4c 89 ee                mov    %r13,%rsi
         :	         * Do quick-but-not-definitive test for a relation lock first.  This will
         :	         * never cause a return when the relation is *not* locked, but will
         :	         * occasionally let the check continue when there really *is* a relation
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
    0.00 :	  694c3b:       c7 45 d8 ff ff ff ff    movl   $0xffffffff,-0x28(%rbp)
    0.00 :	  694c42:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%rbp)
    0.00 :	  694c49:       89 45 d0                mov    %eax,-0x30(%rbp)
         :	PredicateLockExists(const PREDICATELOCKTARGETTAG *targettag)
         :	{
         :	        LOCALPREDICATELOCK *lock;
         :
         :	        /* check local hash table */
         :	        lock = (LOCALPREDICATELOCK *) hash_search(LocalPredicateLockHash,
    0.00 :	  694c4c:       e8 4f fa 0e 00          callq  7846a0 <hash_search>
         :	                                                                                          targettag,
         :	                                                                                          HASH_FIND, NULL);
         :
         :	        if (!lock)
    0.00 :	  694c51:       48 85 c0                test   %rax,%rax
    0.00 :	  694c54:       74 06                   je     694c5c <PredicateLockTuple+0xbc>
         :	         * level lock.
         :	         */
         :	        SET_PREDICATELOCKTARGETTAG_RELATION(tag,
         :	                                                                                relation->rd_node.dbNode,
         :	                                                                                relation->rd_id);
         :	        if (PredicateLockExists(&tag))
    0.00 :	  694c56:       80 78 10 00             cmpb   $0x0,0x10(%rax)
    0.00 :	  694c5a:       75 81                   jne    694bdd <PredicateLockTuple+0x3d>
         :	                return;
         :
         :	        tid = &(tuple->t_self);
         :	        SET_PREDICATELOCKTARGETTAG_TUPLE(tag,
    0.00 :	  694c5c:       8b 43 04                mov    0x4(%rbx),%eax
    0.00 :	  694c5f:       41 0f b7 54 24 06       movzwl 0x6(%r12),%edx
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
    0.00 :	  694c65:       4c 89 ef                mov    %r13,%rdi
         :	                                                                                relation->rd_id);
         :	        if (PredicateLockExists(&tag))
         :	                return;
         :
         :	        tid = &(tuple->t_self);
         :	        SET_PREDICATELOCKTARGETTAG_TUPLE(tag,
    0.00 :	  694c68:       89 45 d0                mov    %eax,-0x30(%rbp)
    0.00 :	  694c6b:       8b 43 40                mov    0x40(%rbx),%eax
    0.00 :	  694c6e:       89 45 d4                mov    %eax,-0x2c(%rbp)
    0.00 :	  694c71:       41 0f b7 44 24 04       movzwl 0x4(%r12),%eax
    0.00 :	  694c77:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  694c7a:       09 d0                   or     %edx,%eax
    0.00 :	  694c7c:       89 45 d8                mov    %eax,-0x28(%rbp)
    0.00 :	  694c7f:       41 0f b7 44 24 08       movzwl 0x8(%r12),%eax
    0.00 :	  694c85:       89 45 dc                mov    %eax,-0x24(%rbp)
         :	                                                                         relation->rd_node.dbNode,
         :	                                                                         relation->rd_id,
         :	                                                                         ItemPointerGetBlockNumber(tid),
         :	                                                                         ItemPointerGetOffsetNumber(tid));
         :	        PredicateLockAcquire(&tag);
    0.00 :	  694c88:       e8 a3 d3 ff ff          callq  692030 <PredicateLockAcquire>
    0.00 :	  694c8d:       e9 4b ff ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694c92:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694c98:       31 ff                   xor    %edi,%edi
    0.00 :	  694c9a:       e8 51 dc ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694c9f:       90                      nop
    0.00 :	  694ca0:       e9 38 ff ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>
    0.00 :	  694ca5:       0f 1f 00                nopl   (%rax)
         :	         */
         :	        if (relation->rd_index == NULL)
         :	        {
         :	                TransactionId myxid;
         :
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694ca8:       49 8b 54 24 10          mov    0x10(%r12),%rdx
    0.00 :	  694cad:       41 bd 02 00 00 00       mov    $0x2,%r13d
    0.00 :	  694cb3:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694cb7:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  694cbc:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694cc1:       74 03                   je     694cc6 <PredicateLockTuple+0x126>
    0.00 :	  694cc3:       44 8b 2a                mov    (%rdx),%r13d
         :
         :	                myxid = GetTopTransactionIdIfAny();
    0.00 :	  694cc6:       e8 b5 be e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
         :	                if (TransactionIdIsValid(myxid))
    0.00 :	  694ccb:       85 c0                   test   %eax,%eax
         :	        {
         :	                TransactionId myxid;
         :
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
         :
         :	                myxid = GetTopTransactionIdIfAny();
    0.00 :	  694ccd:       41 89 c6                mov    %eax,%r14d
         :	                if (TransactionIdIsValid(myxid))
    0.00 :	  694cd0:       75 0e                   jne    694ce0 <PredicateLockTuple+0x140>
         :	                                TransactionId xid = SubTransGetTopmostTransaction(targetxmin);
         :
         :	                                if (TransactionIdEquals(xid, myxid))
         :	                                {
         :	                                        /* We wrote it; we already have a write lock. */
         :	                                        return;
    0.00 :	  694cd2:       8b 53 40                mov    0x40(%rbx),%edx
    0.00 :	  694cd5:       e9 49 ff ff ff          jmpq   694c23 <PredicateLockTuple+0x83>
    0.00 :	  694cda:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                targetxmin = HeapTupleHeaderGetXmin(tuple->t_data);
         :
         :	                myxid = GetTopTransactionIdIfAny();
         :	                if (TransactionIdIsValid(myxid))
         :	                {
         :	                        if (TransactionIdFollowsOrEquals(targetxmin, TransactionXmin))
    0.00 :	  694ce0:       8b 35 72 da 4d 00       mov    0x4dda72(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694ce6:       44 89 ef                mov    %r13d,%edi
    0.00 :	  694ce9:       e8 82 b3 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  694cee:       84 c0                   test   %al,%al
    0.00 :	  694cf0:       74 e0                   je     694cd2 <PredicateLockTuple+0x132>
         :	                        {
         :	                                TransactionId xid = SubTransGetTopmostTransaction(targetxmin);
    0.00 :	  694cf2:       44 89 ef                mov    %r13d,%edi
    0.00 :	  694cf5:       e8 f6 1b e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :
         :	                                if (TransactionIdEquals(xid, myxid))
    0.00 :	  694cfa:       41 39 c6                cmp    %eax,%r14d
    0.00 :	  694cfd:       75 d3                   jne    694cd2 <PredicateLockTuple+0x132>
    0.00 :	  694cff:       90                      nop
    0.00 :	  694d00:       e9 d8 fe ff ff          jmpq   694bdd <PredicateLockTuple+0x3d>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   21.74 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
   13.04 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
   13.04 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2823
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2815
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2815
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2814
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2816
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2821
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674b60 <IncrBufferRefCount>:
         :	 *              This function cannot be used on a buffer we do not have pinned,
         :	 *              because it doesn't change the shared buffer state.
         :	 */
         :	void
         :	IncrBufferRefCount(Buffer buffer)
         :	{
    8.70 :	  674b60:       55                      push   %rbp
   13.04 :	  674b61:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674b64:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2812
    4.35 :	  674b65:       89 fb                   mov    %edi,%ebx
    0.00 :	  674b67:       48 83 ec 08             sub    $0x8,%rsp
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  674b6b:       48 8b 3d 4e 5d 54 00    mov    0x545d4e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2814
    4.35 :	  674b72:       e8 f9 62 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2815
    8.70 :	  674b77:       48 8b 3d 42 5d 54 00    mov    0x545d42(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    8.70 :	  674b7e:       89 de                   mov    %ebx,%esi
    0.00 :	  674b80:       e8 1b 56 12 00          callq  79a1a0 <ResourceOwnerRememberBuffer>
         :	        if (BufferIsLocal(buffer))
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2816
    4.35 :	  674b85:       85 db                   test   %ebx,%ebx
    0.00 :	  674b87:       78 1f                   js     674ba8 <IncrBufferRefCount+0x48>
         :	                LocalRefCount[-buffer - 1]++;
         :	        else
         :	        {
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
    0.00 :	  674b89:       89 df                   mov    %ebx,%edi
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2821
    4.35 :	  674b8b:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  674b90:       31 f6                   xor    %esi,%esi
    0.00 :	  674b92:       e8 89 f9 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2823
   13.04 :	  674b97:       83 40 04 01             addl   $0x1,0x4(%rax)
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
    4.35 :	  674b9b:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674b9f:       5b                      pop    %rbx
    4.35 :	  674ba0:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:2825
   21.74 :	  674ba1:       c3                      retq   
    0.00 :	  674ba2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	{
         :	        Assert(BufferIsPinned(buffer));
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner, buffer);
         :	        if (BufferIsLocal(buffer))
         :	                LocalRefCount[-buffer - 1]++;
    0.00 :	  674ba8:       f7 d3                   not    %ebx
    0.00 :	  674baa:       48 63 c3                movslq %ebx,%rax
    0.00 :	  674bad:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  674bb1:       48 03 05 68 85 50 00    add    0x508568(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  674bb8:       83 00 01                addl   $0x1,(%rax)
         :	                PrivateRefCountEntry *ref;
         :	                ref = GetPrivateRefCountEntry(buffer, false, true);
         :	                Assert(ref != NULL);
         :	                ref->refcount++;
         :	        }
         :	}
    0.00 :	  674bbb:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674bbf:       5b                      pop    %rbx
    0.00 :	  674bc0:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   26.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
   26.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
   21.74 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   13.04 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
    8.70 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
    4.35 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007a5600 <XidInMVCCSnapshot>:
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   21.74 :	  7a5600:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
    4.35 :	  7a5601:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7a5604:       41 54                   push   %r12
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1423
   13.04 :	  7a5606:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7a5609:       53                      push   %rbx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a560a:       8b 76 08                mov    0x8(%rsi),%esi
         :	 * by this function.  This is OK for current uses, because we actually only
         :	 * apply this for known-committed XIDs.
         :	 */
         :	static bool
         :	XidInMVCCSnapshot(TransactionId xid, Snapshot snapshot)
         :	{
    0.00 :	  7a560d:       89 fb                   mov    %edi,%ebx
         :	         * a parent with XID < xmin, while one with XID >= xmax must belong to a
         :	         * parent that was not yet committed at the time of this snapshot.
         :	         */
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1435
   26.09 :	  7a560f:       e8 cc a9 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    8.70 :	  7a5614:       84 c0                   test   %al,%al
    0.00 :	  7a5616:       74 08                   je     7a5620 <XidInMVCCSnapshot+0x20>
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a5618:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5619:       31 c0                   xor    %eax,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a561b:       41 5c                   pop    %r12
    0.00 :	  7a561d:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/time/tqual.c:1525
   26.09 :	  7a561e:       c3                      retq   
    0.00 :	  7a561f:       90                      nop
         :
         :	        /* Any xid < xmin is not in-progress */
         :	        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                return false;
         :	        /* Any xid >= xmax is in-progress */
         :	        if (TransactionIdFollowsOrEquals(xid, snapshot->xmax))
    0.00 :	  7a5620:       41 8b 74 24 0c          mov    0xc(%r12),%esi
    0.00 :	  7a5625:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5627:       e8 44 aa d1 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  7a562c:       84 c0                   test   %al,%al
    0.00 :	  7a562e:       0f 85 7c 00 00 00       jne    7a56b0 <XidInMVCCSnapshot+0xb0>
         :
         :	        /*
         :	         * Snapshot information is stored slightly differently in snapshots taken
         :	         * during recovery.
         :	         */
         :	        if (!snapshot->takenDuringRecovery)
    0.00 :	  7a5634:       41 80 7c 24 29 00       cmpb   $0x0,0x29(%r12)
    0.00 :	  7a563a:       0f 85 80 00 00 00       jne    7a56c0 <XidInMVCCSnapshot+0xc0>
         :	                 * check things is just to compare the given XID against both subxact
         :	                 * XIDs and top-level XIDs.  If the snapshot overflowed, we have to
         :	                 * use pg_subtrans to convert a subxact XID to its parent XID, but
         :	                 * then we need only look at top-level XIDs not subxacts.
         :	                 */
         :	                if (!snapshot->suboverflowed)
    0.00 :	  7a5640:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a5646:       0f 85 b4 00 00 00       jne    7a5700 <XidInMVCCSnapshot+0x100>
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a564c:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a5651:       85 f6                   test   %esi,%esi
    0.00 :	  7a5653:       7e 25                   jle    7a567a <XidInMVCCSnapshot+0x7a>
         :	                        {
         :	                                if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a5655:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a565a:       31 d2                   xor    %edx,%edx
    0.00 :	  7a565c:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a565e:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a5661:       75 10                   jne    7a5673 <XidInMVCCSnapshot+0x73>
    0.00 :	  7a5663:       eb 4b                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5665:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a5668:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a566b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a566f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a5671:       74 3d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                if (!snapshot->suboverflowed)
         :	                {
         :	                        /* full data, so search subxip */
         :	                        int32           j;
         :
         :	                        for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a5673:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a5676:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a5678:       7c ee                   jl     7a5668 <XidInMVCCSnapshot+0x68>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a567a:       41 8b 74 24 18          mov    0x18(%r12),%esi
    0.00 :	  7a567f:       85 f6                   test   %esi,%esi
    0.00 :	  7a5681:       74 95                   je     7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->xip[i]))
    0.00 :	  7a5683:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	  7a5688:       31 d2                   xor    %edx,%edx
    0.00 :	  7a568a:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a568c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a568f:       75 12                   jne    7a56a3 <XidInMVCCSnapshot+0xa3>
    0.00 :	  7a5691:       eb 1d                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a5693:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  7a5698:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a569b:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a569f:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56a1:       74 0d                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
         :	                                return false;
         :	                }
         :
         :	                for (i = 0; i < snapshot->xcnt; i++)
    0.00 :	  7a56a3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56a6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56a8:       72 ee                   jb     7a5698 <XidInMVCCSnapshot+0x98>
    0.00 :	  7a56aa:       e9 69 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56af:       90                      nop
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b0:       5b                      pop    %rbx
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56b1:       b8 01 00 00 00          mov    $0x1,%eax
         :	                                return true;
         :	                }
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  7a56b6:       41 5c                   pop    %r12
    0.00 :	  7a56b8:       c9                      leaveq 
    0.00 :	  7a56b9:       c3                      retq   
    0.00 :	  7a56ba:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * far the bigger array, and we mostly don't know which xids are
         :	                 * top-level and which are subxacts. The xip array is empty.
         :	                 *
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
    0.00 :	  7a56c0:       41 80 7c 24 28 00       cmpb   $0x0,0x28(%r12)
    0.00 :	  7a56c6:       75 60                   jne    7a5728 <XidInMVCCSnapshot+0x128>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56c8:       41 8b 74 24 1c          mov    0x1c(%r12),%esi
    0.00 :	  7a56cd:       85 f6                   test   %esi,%esi
    0.00 :	  7a56cf:       0f 8e 43 ff ff ff       jle    7a5618 <XidInMVCCSnapshot+0x18>
         :	                {
         :	                        if (TransactionIdEquals(xid, snapshot->subxip[j]))
    0.00 :	  7a56d5:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  7a56da:       31 d2                   xor    %edx,%edx
    0.00 :	  7a56dc:       39 18                   cmp    %ebx,(%rax)
    0.00 :	  7a56de:       48 89 c1                mov    %rax,%rcx
    0.00 :	  7a56e1:       75 10                   jne    7a56f3 <XidInMVCCSnapshot+0xf3>
    0.00 :	  7a56e3:       eb cb                   jmp    7a56b0 <XidInMVCCSnapshot+0xb0>
    0.00 :	  7a56e5:       0f 1f 00                nopl   (%rax)
    0.00 :	  7a56e8:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  7a56eb:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  7a56ef:       39 d8                   cmp    %ebx,%eax
    0.00 :	  7a56f1:       74 bd                   je     7a56b0 <XidInMVCCSnapshot+0xb0>
         :	                /*
         :	                 * We now have either a top-level xid higher than xmin or an
         :	                 * indeterminate xid. We don't know whether it's top level or subxact
         :	                 * but it doesn't matter. If it's present, the xid is visible.
         :	                 */
         :	                for (j = 0; j < snapshot->subxcnt; j++)
    0.00 :	  7a56f3:       83 c2 01                add    $0x1,%edx
    0.00 :	  7a56f6:       39 f2                   cmp    %esi,%edx
    0.00 :	  7a56f8:       7c ee                   jl     7a56e8 <XidInMVCCSnapshot+0xe8>
    0.00 :	  7a56fa:       e9 19 ff ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a56ff:       90                      nop
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5700:       89 df                   mov    %ebx,%edi
    0.00 :	  7a5702:       e8 e9 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5707:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a570c:       89 c7                   mov    %eax,%edi
         :	                        /* not there, fall through to search xip[] */
         :	                }
         :	                else
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a570e:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5710:       e8 cb a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5715:       84 c0                   test   %al,%al
    0.00 :	  7a5717:       0f 84 5d ff ff ff       je     7a567a <XidInMVCCSnapshot+0x7a>
    0.00 :	  7a571d:       e9 f6 fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>
    0.00 :	  7a5722:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a5728:       89 df                   mov    %ebx,%edi
    0.00 :	  7a572a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  7a5730:       e8 bb 11 d2 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a5735:       41 8b 74 24 08          mov    0x8(%r12),%esi
    0.00 :	  7a573a:       89 c7                   mov    %eax,%edi
         :	                 * We start by searching subtrans, if we overflowed.
         :	                 */
         :	                if (snapshot->suboverflowed)
         :	                {
         :	                        /* overflowed, so convert xid to top-level */
         :	                        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  7a573c:       89 c3                   mov    %eax,%ebx
         :	                        /*
         :	                         * If xid was indeed a subxact, we might now have an xid < xmin,
         :	                         * so recheck to avoid an array scan.  No point in rechecking
         :	                         * xmax.
         :	                         */
         :	                        if (TransactionIdPrecedes(xid, snapshot->xmin))
    0.00 :	  7a573e:       e8 9d a8 d1 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  7a5743:       84 c0                   test   %al,%al
    0.00 :	  7a5745:       74 81                   je     7a56c8 <XidInMVCCSnapshot+0xc8>
    0.00 :	  7a5747:       e9 cc fe ff ff          jmpq   7a5618 <XidInMVCCSnapshot+0x18>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   72.73 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:447
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:428
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:433
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:428
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:489
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:519
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9790 <advance_transition_function>:
         :	 */
         :	static void
         :	advance_transition_function(AggState *aggstate,
         :	                                                        AggStatePerAgg peraggstate,
         :	                                                        AggStatePerGroup pergroupstate)
         :	{
    0.00 :	  5b9790:       55                      push   %rbp
    0.00 :	  5b9791:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9794:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5b9798:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  5b979c:       49 89 f4                mov    %rsi,%r12
    0.00 :	  5b979f:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:428
    4.55 :	  5b97a3:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5b97a7:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b97aa:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  5b97ae:       48 83 ec 30             sub    $0x30,%rsp
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        MemoryContext oldContext;
         :	        Datum           newVal;
         :
         :	        if (peraggstate->transfn.fn_strict)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:433
    4.55 :	  5b97b2:       80 7e 36 00             cmpb   $0x0,0x36(%rsi)
         :	 */
         :	static void
         :	advance_transition_function(AggState *aggstate,
         :	                                                        AggStatePerAgg peraggstate,
         :	                                                        AggStatePerGroup pergroupstate)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:428
    4.55 :	  5b97b6:       49 89 d5                mov    %rdx,%r13
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        MemoryContext oldContext;
         :	        Datum           newVal;
         :
         :	        if (peraggstate->transfn.fn_strict)
    0.00 :	  5b97b9:       74 4c                   je     5b9807 <advance_transition_function+0x77>
         :	        {
         :	                /*
         :	                 * For a strict transfn, nothing happens when there's a NULL input; we
         :	                 * just keep the prior transValue.
         :	                 */
         :	                int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5b97bb:       8b 4e 18                mov    0x18(%rsi),%ecx
         :	                int                     i;
         :
         :	                for (i = 1; i <= numTransInputs; i++)
    0.00 :	  5b97be:       85 c9                   test   %ecx,%ecx
    0.00 :	  5b97c0:       7e 2f                   jle    5b97f1 <advance_transition_function+0x61>
         :	                {
         :	                        if (fcinfo->argnull[i])
    0.00 :	  5b97c2:       80 be 41 04 00 00 00    cmpb   $0x0,0x441(%rsi)
    0.00 :	  5b97c9:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  5b97ce:       74 1a                   je     5b97ea <advance_transition_function+0x5a>
    0.00 :	  5b97d0:       e9 e3 00 00 00          jmpq   5b98b8 <advance_transition_function+0x128>
    0.00 :	  5b97d5:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b97d8:       48 63 c2                movslq %edx,%rax
    0.00 :	  5b97db:       41 80 bc 04 40 04 00    cmpb   $0x0,0x440(%r12,%rax,1)
    0.00 :	  5b97e2:       00 00 
    0.00 :	  5b97e4:       0f 85 ce 00 00 00       jne    5b98b8 <advance_transition_function+0x128>
         :	                 * just keep the prior transValue.
         :	                 */
         :	                int                     numTransInputs = peraggstate->numTransInputs;
         :	                int                     i;
         :
         :	                for (i = 1; i <= numTransInputs; i++)
    0.00 :	  5b97ea:       83 c2 01                add    $0x1,%edx
    0.00 :	  5b97ed:       39 d1                   cmp    %edx,%ecx
    0.00 :	  5b97ef:       7d e7                   jge    5b97d8 <advance_transition_function+0x48>
         :	                {
         :	                        if (fcinfo->argnull[i])
         :	                                return;
         :	                }
         :	                if (pergroupstate->noTransValue)
    0.00 :	  5b97f1:       41 80 7d 09 00          cmpb   $0x0,0x9(%r13)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:447
   72.73 :	  5b97f6:       0f 85 d4 00 00 00       jne    5b98d0 <advance_transition_function+0x140>
         :	                        pergroupstate->transValueIsNull = false;
         :	                        pergroupstate->noTransValue = false;
         :	                        MemoryContextSwitchTo(oldContext);
         :	                        return;
         :	                }
         :	                if (pergroupstate->transValueIsNull)
    0.00 :	  5b97fc:       41 80 7d 08 00          cmpb   $0x0,0x8(%r13)
    0.00 :	  5b9801:       0f 85 b1 00 00 00       jne    5b98b8 <advance_transition_function+0x128>
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b9807:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5b980e:       4c 8b 3d 4b 10 60 00    mov    0x60104b(%rip),%r15        # bba860 <CurrentMemoryContext>
         :	         */
         :	        fcinfo->arg[0] = pergroupstate->transValue;
         :	        fcinfo->argnull[0] = pergroupstate->transValueIsNull;
         :	        fcinfo->isnull = false;         /* just in case transfn doesn't set it */
         :
         :	        newVal = FunctionCallInvoke(fcinfo);
    0.00 :	  5b9815:       49 8d bc 24 00 01 00    lea    0x100(%r12),%rdi
    0.00 :	  5b981c:       00 
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b981d:       48 8b 40 28             mov    0x28(%rax),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
    4.55 :	  5b9821:       48 89 05 38 10 60 00    mov    %rax,0x601038(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        /* We run the transition functions in per-input-tuple memory context */
         :	        oldContext = MemoryContextSwitchTo(aggstate->tmpcontext->ecxt_per_tuple_memory);
         :
         :	        /* set up aggstate->curperagg for AggGetAggref() */
         :	        aggstate->curperagg = peraggstate;
    0.00 :	  5b9828:       4d 89 a6 c8 00 00 00    mov    %r12,0xc8(%r14)
         :
         :	        /*
         :	         * OK to call the transition function
         :	         */
         :	        fcinfo->arg[0] = pergroupstate->transValue;
    0.00 :	  5b982f:       49 8b 45 00             mov    0x0(%r13),%rax
    0.00 :	  5b9833:       49 89 84 24 20 01 00    mov    %rax,0x120(%r12)
    0.00 :	  5b983a:       00 
         :	        fcinfo->argnull[0] = pergroupstate->transValueIsNull;
    0.00 :	  5b983b:       41 0f b6 45 08          movzbl 0x8(%r13),%eax
         :	        fcinfo->isnull = false;         /* just in case transfn doesn't set it */
    0.00 :	  5b9840:       41 c6 84 24 1c 01 00    movb   $0x0,0x11c(%r12)
    0.00 :	  5b9847:       00 00 
         :
         :	        /*
         :	         * OK to call the transition function
         :	         */
         :	        fcinfo->arg[0] = pergroupstate->transValue;
         :	        fcinfo->argnull[0] = pergroupstate->transValueIsNull;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:489
    4.55 :	  5b9849:       41 88 84 24 40 04 00    mov    %al,0x440(%r12)
    0.00 :	  5b9850:       00 
         :	        fcinfo->isnull = false;         /* just in case transfn doesn't set it */
         :
         :	        newVal = FunctionCallInvoke(fcinfo);
    0.00 :	  5b9851:       49 8b 84 24 00 01 00    mov    0x100(%r12),%rax
    0.00 :	  5b9858:       00 
    0.00 :	  5b9859:       ff 10                   callq  *(%rax)
         :
         :	        aggstate->curperagg = NULL;
    0.00 :	  5b985b:       49 c7 86 c8 00 00 00    movq   $0x0,0xc8(%r14)
    0.00 :	  5b9862:       00 00 00 00 
         :	        /*
         :	         * If pass-by-ref datatype, must copy the new value into aggcontext and
         :	         * pfree the prior transValue.  But if transfn returned a pointer to its
         :	         * first input, we don't need to do anything.
         :	         */
         :	        if (!peraggstate->transtypeByVal &&
    0.00 :	  5b9866:       41 80 bc 24 d2 00 00    cmpb   $0x0,0xd2(%r12)
    0.00 :	  5b986d:       00 00 
         :	         */
         :	        fcinfo->arg[0] = pergroupstate->transValue;
         :	        fcinfo->argnull[0] = pergroupstate->transValueIsNull;
         :	        fcinfo->isnull = false;         /* just in case transfn doesn't set it */
         :
         :	        newVal = FunctionCallInvoke(fcinfo);
    0.00 :	  5b986f:       48 89 c3                mov    %rax,%rbx
         :	        /*
         :	         * If pass-by-ref datatype, must copy the new value into aggcontext and
         :	         * pfree the prior transValue.  But if transfn returned a pointer to its
         :	         * first input, we don't need to do anything.
         :	         */
         :	        if (!peraggstate->transtypeByVal &&
    0.00 :	  5b9872:       75 2c                   jne    5b98a0 <advance_transition_function+0x110>
    0.00 :	  5b9874:       49 3b 45 00             cmp    0x0(%r13),%rax
    0.00 :	  5b9878:       74 26                   je     5b98a0 <advance_transition_function+0x110>
         :	                DatumGetPointer(newVal) != DatumGetPointer(pergroupstate->transValue))
         :	        {
         :	                if (!fcinfo->isnull)
    0.00 :	  5b987a:       41 80 bc 24 1c 01 00    cmpb   $0x0,0x11c(%r12)
    0.00 :	  5b9881:       00 00 
    0.00 :	  5b9883:       0f 84 92 00 00 00       je     5b991b <advance_transition_function+0x18b>
         :	                        MemoryContextSwitchTo(aggstate->aggcontext);
         :	                        newVal = datumCopy(newVal,
         :	                                                           peraggstate->transtypeByVal,
         :	                                                           peraggstate->transtypeLen);
         :	                }
         :	                if (!pergroupstate->transValueIsNull)
    0.00 :	  5b9889:       41 80 7d 08 00          cmpb   $0x0,0x8(%r13)
    0.00 :	  5b988e:       66 90                   xchg   %ax,%ax
    0.00 :	  5b9890:       75 0e                   jne    5b98a0 <advance_transition_function+0x110>
         :	                        pfree(DatumGetPointer(pergroupstate->transValue));
    0.00 :	  5b9892:       49 8b 7d 00             mov    0x0(%r13),%rdi
    0.00 :	  5b9896:       e8 e5 f2 1d 00          callq  798b80 <pfree>
    0.00 :	  5b989b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        }
         :
         :	        pergroupstate->transValue = newVal;
    0.00 :	  5b98a0:       49 89 5d 00             mov    %rbx,0x0(%r13)
         :	        pergroupstate->transValueIsNull = fcinfo->isnull;
    0.00 :	  5b98a4:       41 0f b6 84 24 1c 01    movzbl 0x11c(%r12),%eax
    0.00 :	  5b98ab:       00 00 
    0.00 :	  5b98ad:       41 88 45 08             mov    %al,0x8(%r13)
    0.00 :	  5b98b1:       4c 89 3d a8 0f 60 00    mov    %r15,0x600fa8(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :	}
    0.00 :	  5b98b8:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5b98bc:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:519
    4.55 :	  5b98c0:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5b98c4:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5b98c8:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5b98cc:       c9                      leaveq 
    0.00 :	  5b98cd:       c3                      retq   
    0.00 :	  5b98ce:       66 90                   xchg   %ax,%ax
    0.00 :	  5b98d0:       49 8b 86 b8 00 00 00    mov    0xb8(%r14),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5b98d7:       48 8b 1d 82 0f 60 00    mov    0x600f82(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5b98de:       48 89 05 7b 0f 60 00    mov    %rax,0x600f7b(%rip)        # bba860 <CurrentMemoryContext>
         :	                         *
         :	                         * We must copy the datum into aggcontext if it is pass-by-ref. We
         :	                         * do not need to pfree the old transValue, since it's NULL.
         :	                         */
         :	                        oldContext = MemoryContextSwitchTo(aggstate->aggcontext);
         :	                        pergroupstate->transValue = datumCopy(fcinfo->arg[1],
    0.00 :	  5b98e5:       41 0f bf 94 24 ce 00    movswl 0xce(%r12),%edx
    0.00 :	  5b98ec:       00 00 
    0.00 :	  5b98ee:       41 0f be b4 24 d2 00    movsbl 0xd2(%r12),%esi
    0.00 :	  5b98f5:       00 00 
    0.00 :	  5b98f7:       49 8b bc 24 28 01 00    mov    0x128(%r12),%rdi
    0.00 :	  5b98fe:       00 
    0.00 :	  5b98ff:       e8 6c 66 11 00          callq  6cff70 <datumCopy>
         :	                                                                                                  peraggstate->transtypeByVal,
         :	                                                                                                  peraggstate->transtypeLen);
         :	                        pergroupstate->transValueIsNull = false;
    0.00 :	  5b9904:       41 c6 45 08 00          movb   $0x0,0x8(%r13)
         :	                         *
         :	                         * We must copy the datum into aggcontext if it is pass-by-ref. We
         :	                         * do not need to pfree the old transValue, since it's NULL.
         :	                         */
         :	                        oldContext = MemoryContextSwitchTo(aggstate->aggcontext);
         :	                        pergroupstate->transValue = datumCopy(fcinfo->arg[1],
    0.00 :	  5b9909:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                                                                                                  peraggstate->transtypeByVal,
         :	                                                                                                  peraggstate->transtypeLen);
         :	                        pergroupstate->transValueIsNull = false;
         :	                        pergroupstate->noTransValue = false;
    0.00 :	  5b990d:       41 c6 45 09 00          movb   $0x0,0x9(%r13)
    0.00 :	  5b9912:       48 89 1d 47 0f 60 00    mov    %rbx,0x600f47(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5b9919:       eb 9d                   jmp    5b98b8 <advance_transition_function+0x128>
    0.00 :	  5b991b:       49 8b 86 b8 00 00 00    mov    0xb8(%r14),%rax
         :	                DatumGetPointer(newVal) != DatumGetPointer(pergroupstate->transValue))
         :	        {
         :	                if (!fcinfo->isnull)
         :	                {
         :	                        MemoryContextSwitchTo(aggstate->aggcontext);
         :	                        newVal = datumCopy(newVal,
    0.00 :	  5b9922:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5b9925:       48 89 05 34 0f 60 00    mov    %rax,0x600f34(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5b992c:       41 0f bf 94 24 ce 00    movswl 0xce(%r12),%edx
    0.00 :	  5b9933:       00 00 
    0.00 :	  5b9935:       41 0f be b4 24 d2 00    movsbl 0xd2(%r12),%esi
    0.00 :	  5b993c:       00 00 
    0.00 :	  5b993e:       e8 2d 66 11 00          callq  6cff70 <datumCopy>
    0.00 :	  5b9943:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5b9946:       e9 3e ff ff ff          jmpq   5b9889 <advance_transition_function+0xf9>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   27.27 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   18.18 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   18.18 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   13.64 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
    4.55 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694660 <CheckForSerializableConflictOut>:
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
    4.55 :	  694660:       55                      push   %rbp
    0.00 :	  694661:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694664:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   18.18 :	  694668:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  69466c:       49 89 d4                mov    %rdx,%r12
    0.00 :	  69466f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  694673:       48 83 ec 30             sub    $0x30,%rsp
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:491
    9.09 :	  694677:       48 8b 15 42 a0 4e 00    mov    0x4ea042(%rip),%rdx        # b7e6c0 <MySerializableXact>
         :	 */
         :	void
         :	CheckForSerializableConflictOut(bool visible, Relation relation,
         :	                                                                HeapTuple tuple, Buffer buffer,
         :	                                                                Snapshot snapshot)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:3871
   13.64 :	  69467e:       41 89 fd                mov    %edi,%r13d
         :	 */
         :	static inline bool
         :	SerializationNeededForRead(Relation relation, Snapshot snapshot)
         :	{
         :	        /* Nothing to do if this is not a serializable transaction */
         :	        if (MySerializableXact == InvalidSerializableXact)
    0.00 :	  694681:       48 85 d2                test   %rdx,%rdx
    0.00 :	  694684:       74 13                   je     694699 <CheckForSerializableConflictOut+0x39>
         :	         * This excludes things like CLUSTER and REINDEX. They use the wholesale
         :	         * functions TransferPredicateLocksToHeapRelation() and
         :	         * CheckTableForSerializableConflictIn() to participate serialization, but
         :	         * the scans involved don't need serialization.
         :	         */
         :	        if (!IsMVCCSnapshot(snapshot))
    0.00 :	  694686:       49 8b 00                mov    (%r8),%rax
    0.00 :	  694689:       48 3d 50 57 7a 00       cmp    $0x7a5750,%rax
    0.00 :	  69468f:       74 1f                   je     6946b0 <CheckForSerializableConflictOut+0x50>
    0.00 :	  694691:       48 3d 60 47 7a 00       cmp    $0x7a4760,%rax
    0.00 :	  694697:       74 17                   je     6946b0 <CheckForSerializableConflictOut+0x50>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  694699:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/predicate.c:4064
   18.18 :	  69469d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6946a1:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    9.09 :	  6946a5:       c9                      leaveq 
   27.27 :	  6946a6:       c3                      retq   
    0.00 :	  6946a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6946ae:       00 00 
         :	         *
         :	         * A transaction is flagged as RO_SAFE if all concurrent R/W transactions
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
    0.00 :	  6946b0:       8b 52 7c                mov    0x7c(%rdx),%edx
    0.00 :	  6946b3:       84 d2                   test   %dl,%dl
    0.00 :	  6946b5:       78 69                   js     694720 <CheckForSerializableConflictOut+0xc0>
         :	 * relations are exempt, as are materialized views.
         :	 */
         :	static inline bool
         :	PredicateLockingNeededForRelation(Relation relation)
         :	{
         :	        return !(relation->rd_id < FirstBootstrapObjectId ||
    0.00 :	  6946b7:       81 7e 40 0f 27 00 00    cmpl   $0x270f,0x40(%rsi)
    0.00 :	  6946be:       76 d9                   jbe    694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946c0:       48 8b 46 30             mov    0x30(%rsi),%rax
    0.00 :	  6946c4:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6946c8:       74 cf                   je     694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  6946ca:       80 78 6f 6d             cmpb   $0x6d,0x6f(%rax)
    0.00 :	  6946ce:       66 90                   xchg   %ax,%ax
    0.00 :	  6946d0:       74 c7                   je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        if (!SerializationNeededForRead(relation, snapshot))
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
    0.00 :	  6946d2:       83 e2 08                and    $0x8,%edx
    0.00 :	  6946d5:       0f 85 55 02 00 00       jne    694930 <CheckForSerializableConflictOut+0x2d0>
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946db:       8b 35 77 e0 4d 00       mov    0x4de077(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  6946e1:       89 ca                   mov    %ecx,%edx
    0.00 :	  6946e3:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6946e6:       e8 35 04 11 00          callq  7a4b20 <HeapTupleSatisfiesVacuum>
         :	        switch (htsvResult)
    0.00 :	  6946eb:       83 f8 04                cmp    $0x4,%eax
         :	         * transaction, either to create it not visible to us, or to delete it
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
    0.00 :	  6946ee:       89 c3                   mov    %eax,%ebx
         :	        switch (htsvResult)
    0.00 :	  6946f0:       76 3e                   jbe    694730 <CheckForSerializableConflictOut+0xd0>
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  6946f2:       ba e0 da 8a 00          mov    $0x8adae0,%edx
    0.00 :	  6946f7:       be 56 0f 00 00          mov    $0xf56,%esi
    0.00 :	  6946fc:       bf d3 d1 8a 00          mov    $0x8ad1d3,%edi
    0.00 :	  694701:       e8 1a 6d 0e 00          callq  77b420 <elog_start>
    0.00 :	  694706:       89 da                   mov    %ebx,%edx
    0.00 :	  694708:       be a0 d8 8a 00          mov    $0x8ad8a0,%esi
    0.00 :	  69470d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694712:       31 c0                   xor    %eax,%eax
    0.00 :	  694714:       e8 17 6b 0e 00          callq  77b230 <elog_finish>
    0.00 :	  694719:       e8 b2 4d dd ff          callq  4694d0 <abort@plt>
    0.00 :	  69471e:       66 90                   xchg   %ax,%ax
         :	         * commit without having conflicts out to an earlier snapshot, thus
         :	         * ensuring that no conflicts are possible for this transaction.
         :	         */
         :	        if (SxactIsROSafe(MySerializableXact))
         :	        {
         :	                ReleasePredicateLocks(false);
    0.00 :	  694720:       31 ff                   xor    %edi,%edi
    0.00 :	  694722:       e8 c9 e1 ff ff          callq  6928f0 <ReleasePredicateLocks>
    0.00 :	  694727:       e9 6d ff ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69472c:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * while it is visible to us.  The "visible" bool indicates whether the
         :	         * tuple is visible to us, while HeapTupleSatisfiesVacuum checks what else
         :	         * is going on with it.
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
    0.00 :	  694730:       89 c0                   mov    %eax,%eax
    0.00 :	  694732:       ff 24 c5 c0 d9 8a 00    jmpq   *0x8ad9c0(,%rax,8)
    0.00 :	  694739:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        if (visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_RECENTLY_DEAD:
         :	                        if (!visible)
    0.00 :	  694740:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694743:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  694748:       0f 84 4b ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  69474e:       49 8b 7c 24 10          mov    0x10(%r12),%rdi
    0.00 :	  694753:       0f b7 57 14             movzwl 0x14(%rdi),%edx
    0.00 :	  694757:       89 d0                   mov    %edx,%eax
    0.00 :	  694759:       25 00 18 00 00          and    $0x1800,%eax
    0.00 :	  69475e:       3d 00 10 00 00          cmp    $0x1000,%eax
    0.00 :	  694763:       0f 84 f7 00 00 00       je     694860 <CheckForSerializableConflictOut+0x200>
    0.00 :	  694769:       8b 5f 04                mov    0x4(%rdi),%ebx
         :
         :	        /*
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  69476c:       e8 0f c4 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  694771:       39 d8                   cmp    %ebx,%eax
    0.00 :	  694773:       0f 84 20 ff ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694779:       89 df                   mov    %ebx,%edi
    0.00 :	  69477b:       e8 70 21 e3 ff          callq  4c68f0 <SubTransGetTopmostTransaction>
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  694780:       8b 35 d2 df 4d 00       mov    0x4ddfd2(%rip),%esi        # b72758 <TransactionXmin>
    0.00 :	  694786:       89 c7                   mov    %eax,%edi
         :	         * Find top level xid.  Bail out if xid is too early to be a conflict, or
         :	         * if it's our own xid.
         :	         */
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
         :	                return;
         :	        xid = SubTransGetTopmostTransaction(xid);
    0.00 :	  694788:       89 c3                   mov    %eax,%ebx
         :	        if (TransactionIdPrecedes(xid, TransactionXmin))
    0.00 :	  69478a:       e8 51 b8 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  69478f:       84 c0                   test   %al,%al
    0.00 :	  694791:       0f 85 02 ff ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                return;
         :	        if (TransactionIdEquals(xid, GetTopTransactionIdIfAny()))
    0.00 :	  694797:       e8 e4 c3 e2 ff          callq  4c0b80 <GetTopTransactionIdIfAny>
    0.00 :	  69479c:       39 c3                   cmp    %eax,%ebx
    0.00 :	  69479e:       66 90                   xchg   %ax,%ax
    0.00 :	  6947a0:       0f 84 f3 fe ff ff       je     694699 <CheckForSerializableConflictOut+0x39>
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947a6:       48 8b 3d 53 92 4e 00    mov    0x4e9253(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6947ad:       31 f6                   xor    %esi,%esi
         :	                return;
         :
         :	        /*
         :	         * Find sxact or summarized info for the top level xid.
         :	         */
         :	        sxidtag.xid = xid;
    0.00 :	  6947af:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :	        LWLockAcquire(SerializableXactHashLock, LW_EXCLUSIVE);
    0.00 :	  6947b2:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6947b9:       e8 32 b3 ff ff          callq  68faf0 <LWLockAcquire>
         :	        sxid = (SERIALIZABLEXID *)
    0.00 :	  6947be:       48 8b 3d 93 9f 4e 00    mov    0x4e9f93(%rip),%rdi        # b7e758 <SerializableXidHash>
    0.00 :	  6947c5:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6947c9:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6947cb:       31 d2                   xor    %edx,%edx
    0.00 :	  6947cd:       e8 ce fe 0e 00          callq  7846a0 <hash_search>
         :	                hash_search(SerializableXidHash, &sxidtag, HASH_FIND, NULL);
         :	        if (!sxid)
    0.00 :	  6947d2:       48 85 c0                test   %rax,%rax
    0.00 :	  6947d5:       0f 84 c5 01 00 00       je     6949a0 <CheckForSerializableConflictOut+0x340>
         :
         :	                /* It's not serializable or otherwise not important. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :	        sxact = sxid->myXact;
    0.00 :	  6947db:       4c 8b 60 08             mov    0x8(%rax),%r12
         :	        Assert(TransactionIdEquals(sxact->topXid, xid));
         :	        if (sxact == MySerializableXact || SxactIsDoomed(sxact))
    0.00 :	  6947df:       48 8b 0d da 9e 4e 00    mov    0x4e9eda(%rip),%rcx        # b7e6c0 <MySerializableXact>
    0.00 :	  6947e6:       49 39 cc                cmp    %rcx,%r12
    0.00 :	  6947e9:       0f 84 b1 00 00 00       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6947ef:       41 8b 54 24 7c          mov    0x7c(%r12),%edx
    0.00 :	  6947f4:       f6 c2 08                test   $0x8,%dl
    0.00 :	  6947f7:       0f 85 a3 00 00 00       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	         * We have a conflict out to a transaction which has a conflict out to a
         :	         * summarized transaction.  That summarized transaction must have
         :	         * committed first, and we can't tell when it committed in relation to our
         :	         * snapshot acquisition, so something needs to be canceled.
         :	         */
         :	        if (SxactHasSummaryConflictOut(sxact))
    0.00 :	  6947fd:       f6 c6 04                test   $0x4,%dh
    0.00 :	  694800:       0f 84 b2 00 00 00       je     6948b8 <CheckForSerializableConflictOut+0x258>
         :	        {
         :	                if (!SxactIsPrepared(sxact))
    0.00 :	  694806:       f6 c2 02                test   $0x2,%dl
    0.00 :	  694809:       0f 85 39 03 00 00       jne    694b48 <CheckForSerializableConflictOut+0x4e8>
         :	                {
         :	                        sxact->flags |= SXACT_FLAG_DOOMED;
    0.00 :	  69480f:       83 ca 08                or     $0x8,%edx
    0.00 :	  694812:       41 89 54 24 7c          mov    %edx,0x7c(%r12)
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694817:       48 8b 3d e2 91 4e 00    mov    0x4e91e2(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  69481e:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694825:       e8 76 ab ff ff          callq  68f3a0 <LWLockRelease>
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
         :	        LWLockRelease(SerializableXactHashLock);
         :	}
    0.00 :	  69482a:       e9 6a fe ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
    0.00 :	  69482f:       90                      nop
         :	         */
         :	        htsvResult = HeapTupleSatisfiesVacuum(tuple, TransactionXmin, buffer);
         :	        switch (htsvResult)
         :	        {
         :	                case HEAPTUPLE_LIVE:
         :	                        if (visible)
    0.00 :	  694830:       45 84 ed                test   %r13b,%r13b
    0.00 :	  694833:       0f 85 60 fe ff ff       jne    694699 <CheckForSerializableConflictOut+0x39>
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694839:       49 8b 54 24 10          mov    0x10(%r12),%rdx
         :	                        /*
         :	                         * The only way to get to this default clause is if a new value is
         :	                         * added to the enum type without adding it to this switch
         :	                         * statement.  That's a bug, so elog.
         :	                         */
         :	                        elog(ERROR, "unrecognized return value from HeapTupleSatisfiesVacuum: %u", htsvResult);
    0.00 :	  69483e:       bb 02 00 00 00          mov    $0x2,%ebx
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_INSERT_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetXmin(tuple->t_data);
    0.00 :	  694843:       0f b7 42 14             movzwl 0x14(%rdx),%eax
    0.00 :	  694847:       25 00 03 00 00          and    $0x300,%eax
    0.00 :	  69484c:       3d 00 03 00 00          cmp    $0x300,%eax
    0.00 :	  694851:       0f 84 15 ff ff ff       je     69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  694857:       8b 1a                   mov    (%rdx),%ebx
    0.00 :	  694859:       e9 0e ff ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
    0.00 :	  69485e:       66 90                   xchg   %ax,%ax
         :	                        if (!visible)
         :	                                return;
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
         :	                        break;
         :	                case HEAPTUPLE_DELETE_IN_PROGRESS:
         :	                        xid = HeapTupleHeaderGetUpdateXid(tuple->t_data);
    0.00 :	  694860:       84 d2                   test   %dl,%dl
    0.00 :	  694862:       0f 88 01 ff ff ff       js     694769 <CheckForSerializableConflictOut+0x109>
    0.00 :	  694868:       e8 b3 28 e0 ff          callq  497120 <HeapTupleGetUpdateXid>
    0.00 :	  69486d:       89 c3                   mov    %eax,%ebx
    0.00 :	  69486f:       90                      nop
    0.00 :	  694870:       e9 f7 fe ff ff          jmpq   69476c <CheckForSerializableConflictOut+0x10c>
         :	                /* This write was already in our snapshot; no conflict. */
         :	                LWLockRelease(SerializableXactHashLock);
         :	                return;
         :	        }
         :
         :	        if (RWConflictExists(MySerializableXact, sxact))
    0.00 :	  694875:       48 8b 3d 44 9e 4e 00    mov    0x4e9e44(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69487c:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  69487f:       e8 1c cc ff ff          callq  6914a0 <RWConflictExists>
    0.00 :	  694884:       84 c0                   test   %al,%al
    0.00 :	  694886:       75 18                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * Flag the conflict.  But first, if this conflict creates a dangerous
         :	         * structure, ereport an error.
         :	         */
         :	        FlagRWConflict(MySerializableXact, sxact);
    0.00 :	  694888:       48 8b 3d 31 9e 4e 00    mov    0x4e9e31(%rip),%rdi        # b7e6c0 <MySerializableXact>
    0.00 :	  69488f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  694892:       e8 79 c5 ff ff          callq  690e10 <FlagRWConflict>
    0.00 :	  694897:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  69489e:       00 00 
         :	        LWLockRelease(SerializableXactHashLock);
    0.00 :	  6948a0:       48 8b 3d 59 91 4e 00    mov    0x4e9159(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6948a7:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  6948ae:       e8 ed aa ff ff          callq  68f3a0 <LWLockRelease>
    0.00 :	  6948b3:       e9 e1 fd ff ff          jmpq   694699 <CheckForSerializableConflictOut+0x39>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  6948b8:       f6 41 7c 20             testb  $0x20,0x7c(%rcx)
    0.00 :	  6948bc:       74 10                   je     6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  6948be:       89 d0                   mov    %edx,%eax
    0.00 :	  6948c0:       25 01 04 00 00          and    $0x401,%eax
    0.00 :	  6948c5:       83 e8 01                sub    $0x1,%eax
    0.00 :	  6948c8:       0f 84 e9 01 00 00       je     694ab7 <CheckForSerializableConflictOut+0x457>
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948ce:       e8 3d 2d 11 00          callq  7a7610 <GetTransactionSnapshot>
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948d3:       8b 70 08                mov    0x8(%rax),%esi
    0.00 :	  6948d6:       89 df                   mov    %ebx,%edi
         :	        uint32          i;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :	        Assert(!TransactionIdEquals(xid, GetTopTransactionIdIfAny()));
         :
         :	        snap = GetTransactionSnapshot();
    0.00 :	  6948d8:       49 89 c5                mov    %rax,%r13
         :
         :	        if (TransactionIdPrecedes(xid, snap->xmin))
    0.00 :	  6948db:       e8 00 b7 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6948e0:       84 c0                   test   %al,%al
    0.00 :	  6948e2:       75 bc                   jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
    0.00 :	  6948e4:       41 8b 75 0c             mov    0xc(%r13),%esi
    0.00 :	  6948e8:       89 df                   mov    %ebx,%edi
    0.00 :	  6948ea:       e8 81 b7 e2 ff          callq  4c0070 <TransactionIdFollowsOrEquals>
    0.00 :	  6948ef:       84 c0                   test   %al,%al
    0.00 :	  6948f1:       75 82                   jne    694875 <CheckForSerializableConflictOut+0x215>
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  6948f3:       41 8b 75 18             mov    0x18(%r13),%esi
    0.00 :	  6948f7:       85 f6                   test   %esi,%esi
    0.00 :	  6948f9:       74 a5                   je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	        {
         :	                if (xid == snap->xip[i])
    0.00 :	  6948fb:       49 8b 45 10             mov    0x10(%r13),%rax
    0.00 :	  6948ff:       31 d2                   xor    %edx,%edx
    0.00 :	  694901:       3b 18                   cmp    (%rax),%ebx
    0.00 :	  694903:       48 89 c1                mov    %rax,%rcx
    0.00 :	  694906:       75 17                   jne    69491f <CheckForSerializableConflictOut+0x2bf>
    0.00 :	  694908:       e9 68 ff ff ff          jmpq   694875 <CheckForSerializableConflictOut+0x215>
    0.00 :	  69490d:       0f 1f 00                nopl   (%rax)
    0.00 :	  694910:       8b 41 04                mov    0x4(%rcx),%eax
    0.00 :	  694913:       48 83 c1 04             add    $0x4,%rcx
    0.00 :	  694917:       39 c3                   cmp    %eax,%ebx
    0.00 :	  694919:       0f 84 56 ff ff ff       je     694875 <CheckForSerializableConflictOut+0x215>
         :	                return false;
         :
         :	        if (TransactionIdFollowsOrEquals(xid, snap->xmax))
         :	                return true;
         :
         :	        for (i = 0; i < snap->xcnt; i++)
    0.00 :	  69491f:       83 c2 01                add    $0x1,%edx
    0.00 :	  694922:       39 f2                   cmp    %esi,%edx
    0.00 :	  694924:       72 ea                   jb     694910 <CheckForSerializableConflictOut+0x2b0>
    0.00 :	  694926:       e9 75 ff ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  69492b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                return;
         :
         :	        /* Check if someone else has already decided that we need to die */
         :	        if (SxactIsDoomed(MySerializableXact))
         :	        {
         :	                ereport(ERROR,
    0.00 :	  694930:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694933:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694938:       ba 30 0f 00 00          mov    $0xf30,%edx
    0.00 :	  69493d:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694942:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694947:       e8 74 61 0e 00          callq  77aac0 <errstart>
    0.00 :	  69494c:       84 c0                   test   %al,%al
    0.00 :	  69494e:       0f 84 c5 fd ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694954:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694959:       31 c0                   xor    %eax,%eax
    0.00 :	  69495b:       e8 40 73 0e 00          callq  77bca0 <errhint>
    0.00 :	  694960:       bf 48 d8 8a 00          mov    $0x8ad848,%edi
    0.00 :	  694965:       41 89 c5                mov    %eax,%r13d
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        ereport(ERROR,
    0.00 :	  694968:       31 c0                   xor    %eax,%eax
    0.00 :	  69496a:       e8 11 7a 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  69496f:       89 c3                   mov    %eax,%ebx
    0.00 :	  694971:       bf 48 d3 8a 00          mov    $0x8ad348,%edi
    0.00 :	  694976:       31 c0                   xor    %eax,%eax
    0.00 :	  694978:       e8 23 7f 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  69497d:       bf 04 00 00 01          mov    $0x1000004,%edi
    0.00 :	  694982:       41 89 c4                mov    %eax,%r12d
    0.00 :	  694985:       e8 c6 83 0e 00          callq  77cd50 <errcode>
    0.00 :	  69498a:       44 89 e9                mov    %r13d,%ecx
    0.00 :	  69498d:       89 c7                   mov    %eax,%edi
    0.00 :	  69498f:       89 da                   mov    %ebx,%edx
    0.00 :	  694991:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694994:       31 c0                   xor    %eax,%eax
    0.00 :	  694996:       e8 45 5c 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69499b:       e9 79 fd ff ff          jmpq   694719 <CheckForSerializableConflictOut+0xb9>
         :	        SerCommitSeqNo val;
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
    0.00 :	  6949a0:       48 8b 3d 59 90 4e 00    mov    0x4e9059(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  6949a7:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6949ac:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
    0.00 :	  6949b3:       e8 38 b1 ff ff          callq  68faf0 <LWLockAcquire>
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949b8:       48 8b 05 79 9d 4e 00    mov    0x4e9d79(%rip),%rax        # b7e738 <oldSerXidControl>
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949bf:       48 8b 3d 3a 90 4e 00    mov    0x4e903a(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	        int                     slotno;
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
    0.00 :	  6949c6:       44 8b 60 04             mov    0x4(%rax),%r12d
         :	        tailXid = oldSerXidControl->tailXid;
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949ca:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :
         :	        Assert(TransactionIdIsValid(xid));
         :
         :	        LWLockAcquire(OldSerXidLock, LW_SHARED);
         :	        headXid = oldSerXidControl->headXid;
         :	        tailXid = oldSerXidControl->tailXid;
    0.00 :	  6949d1:       44 8b 68 08             mov    0x8(%rax),%r13d
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  6949d5:       e8 c6 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :
         :	        if (!TransactionIdIsValid(headXid))
    0.00 :	  6949da:       45 85 e4                test   %r12d,%r12d
    0.00 :	  6949dd:       0f 84 bd fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                return 0;
         :
         :	        Assert(TransactionIdIsValid(tailXid));
         :
         :	        if (TransactionIdPrecedes(xid, tailXid)
    0.00 :	  6949e3:       44 89 ee                mov    %r13d,%esi
    0.00 :	  6949e6:       89 df                   mov    %ebx,%edi
    0.00 :	  6949e8:       e8 f3 b5 e2 ff          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  6949ed:       84 c0                   test   %al,%al
    0.00 :	  6949ef:       0f 85 ab fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  6949f5:       44 89 e6                mov    %r12d,%esi
    0.00 :	  6949f8:       89 df                   mov    %ebx,%edi
    0.00 :	  6949fa:       e8 41 b6 e2 ff          callq  4c0040 <TransactionIdFollows>
    0.00 :	  6949ff:       84 c0                   test   %al,%al
    0.00 :	  694a01:       0f 85 99 fe ff ff       jne    6948a0 <CheckForSerializableConflictOut+0x240>
         :
         :	        /*
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
    0.00 :	  694a07:       89 de                   mov    %ebx,%esi
    0.00 :	  694a09:       89 da                   mov    %ebx,%edx
    0.00 :	  694a0b:       bf e0 e6 b7 00          mov    $0xb7e6e0,%edi
    0.00 :	  694a10:       c1 ee 0a                shr    $0xa,%esi
    0.00 :	  694a13:       81 e6 ff ff 1f 00       and    $0x1fffff,%esi
    0.00 :	  694a19:       e8 02 1a e3 ff          callq  4c6420 <SimpleLruReadPage_ReadOnly>
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a1e:       48 8b 15 bb 9c 4e 00    mov    0x4e9cbb(%rip),%rdx        # b7e6e0 <OldSerXidSlruCtlData>
    0.00 :	  694a25:       48 98                   cltq   
    0.00 :	  694a27:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  694a2a:       81 e1 ff 03 00 00       and    $0x3ff,%ecx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a30:       48 8b 3d c9 8f 4e 00    mov    0x4e8fc9(%rip),%rdi        # b7da00 <MainLWLockArray>
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a37:       48 8b 52 10             mov    0x10(%rdx),%rdx
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a3b:       48 81 c7 e0 03 00 00    add    $0x3e0,%rdi
         :	         * The following function must be called without holding OldSerXidLock,
         :	         * but will return with that lock held, which must then be released.
         :	         */
         :	        slotno = SimpleLruReadPage_ReadOnly(OldSerXidSlruCtl,
         :	                                                                                OldSerXidPage(xid), xid);
         :	        val = OldSerXidValue(slotno, xid);
    0.00 :	  694a42:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  694a46:       4c 8b 24 c8             mov    (%rax,%rcx,8),%r12
         :	        LWLockRelease(OldSerXidLock);
    0.00 :	  694a4a:       e8 51 a9 ff ff          callq  68f3a0 <LWLockRelease>
         :	                 * got pushed out to SLRU storage for "old committed" transactions.
         :	                 */
         :	                SerCommitSeqNo conflictCommitSeqNo;
         :
         :	                conflictCommitSeqNo = OldSerXidGetMinConflictCommitSeqNo(xid);
         :	                if (conflictCommitSeqNo != 0)
    0.00 :	  694a4f:       4d 85 e4                test   %r12,%r12
    0.00 :	  694a52:       0f 84 48 fe ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
         :	                {
         :	                        if (conflictCommitSeqNo != InvalidSerCommitSeqNo
    0.00 :	  694a58:       49 83 fc ff             cmp    $0xffffffffffffffff,%r12
    0.00 :	  694a5c:       74 77                   je     694ad5 <CheckForSerializableConflictOut+0x475>
    0.00 :	  694a5e:       48 8b 05 5b 9c 4e 00    mov    0x4e9c5b(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694a65:       f6 40 7c 20             testb  $0x20,0x7c(%rax)
    0.00 :	  694a69:       74 06                   je     694a71 <CheckForSerializableConflictOut+0x411>
    0.00 :	  694a6b:       4c 39 60 18             cmp    %r12,0x18(%rax)
    0.00 :	  694a6f:       72 6b                   jb     694adc <CheckForSerializableConflictOut+0x47c>
         :	                                && (!SxactIsReadOnly(MySerializableXact)
         :	                                        || conflictCommitSeqNo
         :	                                        <= MySerializableXact->SeqNo.lastCommitBeforeSnapshot))
         :	                                ereport(ERROR,
    0.00 :	  694a71:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694a74:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694a79:       ba 89 0f 00 00          mov    $0xf89,%edx
    0.00 :	  694a7e:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694a83:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694a88:       e8 33 60 0e 00          callq  77aac0 <errstart>
    0.00 :	  694a8d:       84 c0                   test   %al,%al
    0.00 :	  694a8f:       0f 84 84 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694a95:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694a9a:       31 c0                   xor    %eax,%eax
    0.00 :	  694a9c:       e8 ff 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694aa1:       89 de                   mov    %ebx,%esi
    0.00 :	  694aa3:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694aa6:       bf e0 d8 8a 00          mov    $0x8ad8e0,%edi
    0.00 :	  694aab:       31 c0                   xor    %eax,%eax
    0.00 :	  694aad:       e8 ce 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694ab2:       e9 b8 fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	        /*
         :	         * If this is a read-only transaction and the writing transaction has
         :	         * committed, and it doesn't have a rw-conflict to a transaction which
         :	         * committed before it, no conflict.
         :	         */
         :	        if (SxactIsReadOnly(MySerializableXact)
    0.00 :	  694ab7:       83 e2 10                and    $0x10,%edx
    0.00 :	  694aba:       0f 84 e0 fd ff ff       je     6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ac0:       49 8b 44 24 18          mov    0x18(%r12),%rax
    0.00 :	  694ac5:       48 39 41 18             cmp    %rax,0x18(%rcx)
    0.00 :	  694ac9:       0f 83 ff fd ff ff       jae    6948ce <CheckForSerializableConflictOut+0x26e>
    0.00 :	  694acf:       90                      nop
    0.00 :	  694ad0:       e9 cb fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
    0.00 :	  694ad5:       48 8b 05 e4 9b 4e 00    mov    0x4e9be4(%rip),%rax        # b7e6c0 <MySerializableXact>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on conflict out to old pivot %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        if (SxactHasSummaryConflictIn(MySerializableXact)
    0.00 :	  694adc:       f6 40 7d 02             testb  $0x2,0x7d(%rax)
    0.00 :	  694ae0:       75 0d                   jne    694aef <CheckForSerializableConflictOut+0x48f>
    0.00 :	  694ae2:       48 8d 78 30             lea    0x30(%rax),%rdi
    0.00 :	  694ae6:       e8 25 ea fe ff          callq  683510 <SHMQueueEmpty>
    0.00 :	  694aeb:       84 c0                   test   %al,%al
    0.00 :	  694aed:       75 46                   jne    694b35 <CheckForSerializableConflictOut+0x4d5>
         :	                                || !SHMQueueEmpty(&MySerializableXact->inConflicts))
         :	                                ereport(ERROR,
    0.00 :	  694aef:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694af2:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694af7:       ba 91 0f 00 00          mov    $0xf91,%edx
    0.00 :	  694afc:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b01:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b06:       e8 b5 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b0b:       84 c0                   test   %al,%al
    0.00 :	  694b0d:       0f 84 06 fc ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b13:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b18:       31 c0                   xor    %eax,%eax
    0.00 :	  694b1a:       e8 81 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b1f:       89 de                   mov    %ebx,%esi
    0.00 :	  694b21:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b24:       bf 18 d9 8a 00          mov    $0x8ad918,%edi
    0.00 :	  694b29:       31 c0                   xor    %eax,%eax
    0.00 :	  694b2b:       e8 50 78 0e 00          callq  77c380 <errdetail_internal>
    0.00 :	  694b30:       e9 3a fe ff ff          jmpq   69496f <CheckForSerializableConflictOut+0x30f>
         :	                                                (errcode(ERRCODE_T_R_SERIALIZATION_FAILURE),
         :	                                                 errmsg("could not serialize access due to read/write dependencies among transactions"),
         :	                                                 errdetail_internal("Reason code: Canceled on identification as a pivot, with conflict out to old committed transaction %u.", xid),
         :	                                          errhint("The transaction might succeed if retried.")));
         :
         :	                        MySerializableXact->flags |= SXACT_FLAG_SUMMARY_CONFLICT_OUT;
    0.00 :	  694b35:       48 8b 05 84 9b 4e 00    mov    0x4e9b84(%rip),%rax        # b7e6c0 <MySerializableXact>
    0.00 :	  694b3c:       81 48 7c 00 04 00 00    orl    $0x400,0x7c(%rax)
    0.00 :	  694b43:       e9 58 fd ff ff          jmpq   6948a0 <CheckForSerializableConflictOut+0x240>
         :	                        LWLockRelease(SerializableXactHashLock);
         :	                        return;
         :	                }
         :	                else
         :	                {
         :	                        LWLockRelease(SerializableXactHashLock);
    0.00 :	  694b48:       48 8b 3d b1 8e 4e 00    mov    0x4e8eb1(%rip),%rdi        # b7da00 <MainLWLockArray>
    0.00 :	  694b4f:       48 81 c7 80 03 00 00    add    $0x380,%rdi
    0.00 :	  694b56:       e8 45 a8 ff ff          callq  68f3a0 <LWLockRelease>
         :	                        ereport(ERROR,
    0.00 :	  694b5b:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694b5e:       b9 e0 da 8a 00          mov    $0x8adae0,%ecx
    0.00 :	  694b63:       ba b8 0f 00 00          mov    $0xfb8,%edx
    0.00 :	  694b68:       be d3 d1 8a 00          mov    $0x8ad1d3,%esi
    0.00 :	  694b6d:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  694b72:       e8 49 5f 0e 00          callq  77aac0 <errstart>
    0.00 :	  694b77:       84 c0                   test   %al,%al
    0.00 :	  694b79:       0f 84 9a fb ff ff       je     694719 <CheckForSerializableConflictOut+0xb9>
    0.00 :	  694b7f:       bf c8 d2 8a 00          mov    $0x8ad2c8,%edi
    0.00 :	  694b84:       31 c0                   xor    %eax,%eax
    0.00 :	  694b86:       e8 15 71 0e 00          callq  77bca0 <errhint>
    0.00 :	  694b8b:       bf 80 d9 8a 00          mov    $0x8ad980,%edi
    0.00 :	  694b90:       41 89 c5                mov    %eax,%r13d
    0.00 :	  694b93:       e9 d0 fd ff ff          jmpq   694968 <CheckForSerializableConflictOut+0x308>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2154
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2123
   15.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2123
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2121
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2123
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2123
    5.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2154
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000740870 <timestamp_cmp_internal>:
         :	 *
         :	 *              collate invalid timestamp at the end
         :	 */
         :	int
         :	timestamp_cmp_internal(Timestamp dt1, Timestamp dt2)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2121
    5.00 :	  740870:       55                      push   %rbp
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	        return (dt1 < dt2) ? -1 : ((dt1 > dt2) ? 1 : 0);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2123
   15.00 :	  740871:       48 39 f7                cmp    %rsi,%rdi
    0.00 :	  740874:       b8 ff ff ff ff          mov    $0xffffffff,%eax
         :	 *
         :	 *              collate invalid timestamp at the end
         :	 */
         :	int
         :	timestamp_cmp_internal(Timestamp dt1, Timestamp dt2)
         :	{
    0.00 :	  740879:       48 89 e5                mov    %rsp,%rbp
         :	#ifdef HAVE_INT64_TIMESTAMP
         :	        return (dt1 < dt2) ? -1 : ((dt1 > dt2) ? 1 : 0);
   25.00 :	  74087c:       7c 06                   jl     740884 <timestamp_cmp_internal+0x14>
    5.00 :	  74087e:       0f 9f c0                setg   %al
    5.00 :	  740881:       0f b6 c0                movzbl %al,%eax
         :	                        return -1;
         :	                else
         :	                        return 0;
         :	        }
         :	#endif
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/timestamp.c:2154
   45.00 :	  740884:       c9                      leaveq 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   15.79 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
   10.53 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:323
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:306
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:323
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:323
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:390
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490350 <hash_any>:
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
    0.00 :	  490350:       55                      push   %rbp
    0.00 :	  490351:       41 89 f2                mov    %esi,%r10d
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490354:       40 f6 c7 03             test   $0x3,%dil
         :	                                c,
         :	                                len;
         :
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
    0.00 :	  490358:       45 8d 82 50 56 73 9e    lea    -0x618ca9b0(%r10),%r8d
         :	 * by using the final values of both b and c.  b is perhaps a little less
         :	 * well mixed than c, however.
         :	 */
         :	Datum
         :	hash_any(register const unsigned char *k, register int keylen)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:306
    5.26 :	  49035f:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  490362:       53                      push   %rbx
         :	        /* Set up the internal state */
         :	        len = keylen;
         :	        a = b = c = 0x9e3779b9 + len + 3923095;
         :
         :	        /* If the source pointer is word-aligned, we use word-wide fetches */
         :	        if (((uintptr_t) k & UINT32_ALIGN_MASK) == 0)
    0.00 :	  490363:       0f 84 f7 00 00 00       je     490460 <hash_any+0x110>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490369:       83 fe 0b                cmp    $0xb,%esi
         :	                                /* fall through */
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
         :	                                /* fall through */
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49036c:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  49036f:       44 89 c2                mov    %r8d,%edx
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490372:       0f 86 7e 02 00 00       jbe    4905f6 <hash_any+0x2a6>
    0.00 :	  490378:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  49037f:       00 
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  490380:       0f b6 4f 05             movzbl 0x5(%rdi),%ecx
    0.00 :	  490384:       0f b6 47 06             movzbl 0x6(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490388:       0f b6 77 09             movzbl 0x9(%rdi),%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49038c:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49038f:       c1 e1 08                shl    $0x8,%ecx
    0.00 :	  490392:       01 c1                   add    %eax,%ecx
    0.00 :	  490394:       0f b6 47 04             movzbl 0x4(%rdi),%eax
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  490398:       c1 e6 08                shl    $0x8,%esi
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  49039b:       01 c1                   add    %eax,%ecx
    0.00 :	  49039d:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  4903a1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903a4:       01 c1                   add    %eax,%ecx
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903a6:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
    0.00 :	  4903aa:       01 d1                   add    %edx,%ecx
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ac:       0f b6 57 01             movzbl 0x1(%rdi),%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903b0:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903b3:       01 c6                   add    %eax,%esi
    0.00 :	  4903b5:       0f b6 47 08             movzbl 0x8(%rdi),%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903b9:       c1 e2 08                shl    $0x8,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903bc:       01 c6                   add    %eax,%esi
    0.00 :	  4903be:       0f b6 47 0b             movzbl 0xb(%rdi),%eax
    0.00 :	  4903c2:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903c5:       01 c6                   add    %eax,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903c7:       0f b6 47 02             movzbl 0x2(%rdi),%eax
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
    0.00 :	  4903cb:       44 01 c6                add    %r8d,%esi
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903ce:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4903d1:       01 c2                   add    %eax,%edx
    0.00 :	  4903d3:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  4903d6:       01 c2                   add    %eax,%edx
    0.00 :	  4903d8:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  4903dc:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4903df:       01 c2                   add    %eax,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e1:       89 f0                   mov    %esi,%eax
         :	#ifdef WORDS_BIGENDIAN
         :	                        a += (k[3] + ((uint32) k[2] << 8) + ((uint32) k[1] << 16) + ((uint32) k[0] << 24));
         :	                        b += (k[7] + ((uint32) k[6] << 8) + ((uint32) k[5] << 16) + ((uint32) k[4] << 24));
         :	                        c += (k[11] + ((uint32) k[10] << 8) + ((uint32) k[9] << 16) + ((uint32) k[8] << 24));
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
    0.00 :	  4903e3:       44 01 ca                add    %r9d,%edx
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  4903e6:       c1 c8 1c                ror    $0x1c,%eax
    0.00 :	  4903e9:       29 f2                   sub    %esi,%edx
    0.00 :	  4903eb:       01 ce                   add    %ecx,%esi
    0.00 :	  4903ed:       31 c2                   xor    %eax,%edx
    0.00 :	  4903ef:       89 d0                   mov    %edx,%eax
    0.00 :	  4903f1:       29 d1                   sub    %edx,%ecx
    0.00 :	  4903f3:       01 f2                   add    %esi,%edx
    0.00 :	  4903f5:       c1 c8 1a                ror    $0x1a,%eax
    0.00 :	  4903f8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4903fa:       89 c1                   mov    %eax,%ecx
    0.00 :	  4903fc:       29 c6                   sub    %eax,%esi
    0.00 :	  4903fe:       01 d0                   add    %edx,%eax
    0.00 :	  490400:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  490403:       31 f1                   xor    %esi,%ecx
    0.00 :	  490405:       89 ce                   mov    %ecx,%esi
    0.00 :	  490407:       29 ca                   sub    %ecx,%edx
    0.00 :	  490409:       01 c1                   add    %eax,%ecx
    0.00 :	  49040b:       c1 ce 10                ror    $0x10,%esi
         :	                        k += 12;
         :	                        len -= 12;
    0.00 :	  49040e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
         :	                        k += 12;
    0.00 :	  490412:       48 83 c7 0c             add    $0xc,%rdi
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                        a += (k[0] + ((uint32) k[1] << 8) + ((uint32) k[2] << 16) + ((uint32) k[3] << 24));
         :	                        b += (k[4] + ((uint32) k[5] << 8) + ((uint32) k[6] << 16) + ((uint32) k[7] << 24));
         :	                        c += (k[8] + ((uint32) k[9] << 8) + ((uint32) k[10] << 16) + ((uint32) k[11] << 24));
         :	#endif   /* WORDS_BIGENDIAN */
         :	                        mix(a, b, c);
    0.00 :	  490416:       31 d6                   xor    %edx,%esi
    0.00 :	  490418:       89 f2                   mov    %esi,%edx
    0.00 :	  49041a:       29 f0                   sub    %esi,%eax
    0.00 :	  49041c:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  490420:       c1 ca 0d                ror    $0xd,%edx
    0.00 :	  490423:       31 c2                   xor    %eax,%edx
    0.00 :	  490425:       41 89 d0                mov    %edx,%r8d
    0.00 :	  490428:       29 d1                   sub    %edx,%ecx
    0.00 :	  49042a:       44 01 ca                add    %r9d,%edx
    0.00 :	  49042d:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  490431:       41 31 c8                xor    %ecx,%r8d
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490434:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  490438:       0f 87 42 ff ff ff       ja     490380 <hash_any+0x30>
    0.00 :	  49043e:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  490441:       89 d6                   mov    %edx,%esi
    0.00 :	  490443:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
    0.00 :	  490446:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  49044a:       0f 87 01 01 00 00       ja     490551 <hash_any+0x201>
    0.00 :	  490450:       44 89 d0                mov    %r10d,%eax
    0.00 :	  490453:       ff 24 c5 18 22 7b 00    jmpq   *0x7b2218(,%rax,8)
    0.00 :	  49045a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  490460:       83 fe 0b                cmp    $0xb,%esi
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:323
    5.26 :	  490463:       45 89 c1                mov    %r8d,%r9d
    0.00 :	  490466:       44 89 c1                mov    %r8d,%ecx
    5.26 :	  490469:       0f 86 79 01 00 00       jbe    4905e8 <hash_any+0x298>
    0.00 :	  49046f:       90                      nop
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
    0.00 :	  490470:       44 89 c6                mov    %r8d,%esi
    0.00 :	  490473:       03 77 08                add    0x8(%rdi),%esi
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
    0.00 :	  490476:       44 89 c8                mov    %r9d,%eax
    0.00 :	  490479:       03 07                   add    (%rdi),%eax
         :	                        b += ka[1];
    0.00 :	  49047b:       03 4f 04                add    0x4(%rdi),%ecx
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
         :	                        len -= 12;
    0.00 :	  49047e:       41 83 ea 0c             sub    $0xc,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
         :	                        ka += 3;
    0.00 :	  490482:       48 83 c7 0c             add    $0xc,%rdi
         :	                while (len >= 12)
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  490486:       89 f2                   mov    %esi,%edx
    0.00 :	  490488:       29 f0                   sub    %esi,%eax
    0.00 :	  49048a:       c1 ca 1c                ror    $0x1c,%edx
    0.00 :	  49048d:       01 ce                   add    %ecx,%esi
    0.00 :	  49048f:       31 d0                   xor    %edx,%eax
    0.00 :	  490491:       89 c2                   mov    %eax,%edx
    0.00 :	  490493:       29 c1                   sub    %eax,%ecx
    0.00 :	  490495:       01 f0                   add    %esi,%eax
    0.00 :	  490497:       c1 ca 1a                ror    $0x1a,%edx
    0.00 :	  49049a:       31 ca                   xor    %ecx,%edx
    0.00 :	  49049c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49049e:       29 d6                   sub    %edx,%esi
    0.00 :	  4904a0:       01 c2                   add    %eax,%edx
    0.00 :	  4904a2:       c1 c9 18                ror    $0x18,%ecx
    0.00 :	  4904a5:       31 f1                   xor    %esi,%ecx
    0.00 :	  4904a7:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904a9:       29 c8                   sub    %ecx,%eax
    0.00 :	  4904ab:       01 d1                   add    %edx,%ecx
    0.00 :	  4904ad:       c1 ce 10                ror    $0x10,%esi
    0.00 :	  4904b0:       31 c6                   xor    %eax,%esi
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:328
    5.26 :	  4904b2:       89 f0                   mov    %esi,%eax
    0.00 :	  4904b4:       29 f2                   sub    %esi,%edx
    0.00 :	  4904b6:       44 8d 0c 0e             lea    (%rsi,%rcx,1),%r9d
    0.00 :	  4904ba:       c1 c8 0d                ror    $0xd,%eax
    5.26 :	  4904bd:       31 d0                   xor    %edx,%eax
    0.00 :	  4904bf:       41 89 c0                mov    %eax,%r8d
    0.00 :	  4904c2:       29 c1                   sub    %eax,%ecx
    0.00 :	  4904c4:       41 c1 c8 1c             ror    $0x1c,%r8d
    0.00 :	  4904c8:       41 31 c8                xor    %ecx,%r8d
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904cb:       41 83 fa 0b             cmp    $0xb,%r10d
         :	                {
         :	                        a += ka[0];
         :	                        b += ka[1];
         :	                        c += ka[2];
         :	                        mix(a, b, c);
    0.00 :	  4904cf:       42 8d 0c 08             lea    (%rax,%r9,1),%ecx
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4904d3:       77 9b                   ja     490470 <hash_any+0x120>
    0.00 :	  4904d5:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4904d8:       89 ce                   mov    %ecx,%esi
    0.00 :	  4904da:       44 89 c3                mov    %r8d,%ebx
         :	                        case 1:
         :	                                a += ((uint32) k[0] << 24);
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
    0.00 :	  4904dd:       41 83 fa 0b             cmp    $0xb,%r10d
    0.00 :	  4904e1:       77 6e                   ja     490551 <hash_any+0x201>
    0.00 :	  4904e3:       44 89 d0                mov    %r10d,%eax
    0.00 :	  4904e6:       ff 24 c5 78 22 7b 00    jmpq   *0x7b2278(,%rax,8)
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)                    /* all the case statements fall through */
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4904ed:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4904f1:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4904f4:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4904f8:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4904fc:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4904ff:       01 c3                   add    %eax,%ebx
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  490501:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  490505:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490508:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                        case 8:
         :	                                b += ((uint32) k[7] << 24);
    0.00 :	  49050a:       0f b6 47 07             movzbl 0x7(%rdi),%eax
    0.00 :	  49050e:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490511:       8d 34 10                lea    (%rax,%rdx,1),%esi
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  490514:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  490518:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49051b:       01 c6                   add    %eax,%esi
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  49051d:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  490521:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490524:       01 c6                   add    %eax,%esi
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  490526:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  49052a:       01 c6                   add    %eax,%esi
         :	                        case 4:
         :	                                a += ((uint32) k[3] << 24);
    0.00 :	  49052c:       0f b6 47 03             movzbl 0x3(%rdi),%eax
    0.00 :	  490530:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  490533:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490537:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  49053b:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49053e:       41 01 c3                add    %eax,%r11d
         :	                        case 2:
         :	                                a += ((uint32) k[1] << 8);
    0.00 :	  490541:       0f b6 47 01             movzbl 0x1(%rdi),%eax
    0.00 :	  490545:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  490548:       41 01 c3                add    %eax,%r11d
         :	                        case 1:
         :	                                a += k[0];
    0.00 :	  49054b:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  49054e:       41 01 c3                add    %eax,%r11d
         :	                                /* case 0: nothing left to add */
         :	                }
         :	#endif   /* WORDS_BIGENDIAN */
         :	        }
         :
         :	        final(a, b, c);
    0.00 :	  490551:       89 da                   mov    %ebx,%edx
    0.00 :	  490553:       89 f0                   mov    %esi,%eax
    0.00 :	  490555:       31 f2                   xor    %esi,%edx
    0.00 :	  490557:       c1 c8 12                ror    $0x12,%eax
    0.00 :	  49055a:       29 c2                   sub    %eax,%edx
    0.00 :	  49055c:       89 d1                   mov    %edx,%ecx
    0.00 :	  49055e:       89 d0                   mov    %edx,%eax
    0.00 :	  490560:       c1 c8 15                ror    $0x15,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:496
    5.26 :	  490563:       44 31 d9                xor    %r11d,%ecx
    0.00 :	  490566:       29 c1                   sub    %eax,%ecx
    0.00 :	  490568:       89 c8                   mov    %ecx,%eax
    0.00 :	  49056a:       31 ce                   xor    %ecx,%esi
    0.00 :	  49056c:       c1 c8 07                ror    $0x7,%eax
    0.00 :	  49056f:       29 c6                   sub    %eax,%esi
    0.00 :	  490571:       89 f0                   mov    %esi,%eax
    0.00 :	  490573:       31 d0                   xor    %edx,%eax
    0.00 :	  490575:       89 f2                   mov    %esi,%edx
    0.00 :	  490577:       c1 ca 10                ror    $0x10,%edx
    5.26 :	  49057a:       29 d0                   sub    %edx,%eax
    0.00 :	  49057c:       89 c2                   mov    %eax,%edx
    0.00 :	  49057e:       31 ca                   xor    %ecx,%edx
    0.00 :	  490580:       89 c1                   mov    %eax,%ecx
    5.26 :	  490582:       c1 c9 1c                ror    $0x1c,%ecx
    5.26 :	  490585:       29 ca                   sub    %ecx,%edx
    0.00 :	  490587:       89 d1                   mov    %edx,%ecx
   15.79 :	  490589:       c1 ca 12                ror    $0x12,%edx
    5.26 :	  49058c:       31 f1                   xor    %esi,%ecx
    0.00 :	  49058e:       29 d1                   sub    %edx,%ecx
    0.00 :	  490590:       31 c8                   xor    %ecx,%eax
    5.26 :	  490592:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  490595:       29 c8                   sub    %ecx,%eax
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490597:       5b                      pop    %rbx
    0.00 :	  490598:       c9                      leaveq 
    0.00 :	  490599:       c3                      retq   
         :	                        case 8:
         :	                                b += ka[1];
         :	                                a += ka[0];
         :	                                break;
         :	                        case 7:
         :	                                b += ((uint32) k[6] << 16);
    0.00 :	  49059a:       0f b6 47 06             movzbl 0x6(%rdi),%eax
    0.00 :	  49059e:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905a1:       8d 34 08                lea    (%rax,%rcx,1),%esi
         :	                                /* fall through */
         :	                        case 6:
         :	                                b += ((uint32) k[5] << 8);
    0.00 :	  4905a4:       0f b6 47 05             movzbl 0x5(%rdi),%eax
    0.00 :	  4905a8:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905ab:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 5:
         :	                                b += k[4];
    0.00 :	  4905ad:       0f b6 47 04             movzbl 0x4(%rdi),%eax
    0.00 :	  4905b1:       01 c6                   add    %eax,%esi
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
    0.00 :	  4905b3:       45 89 cb                mov    %r9d,%r11d
    0.00 :	  4905b6:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
    0.00 :	  4905b9:       eb 96                   jmp    490551 <hash_any+0x201>
         :	                }
         :	#else                                                   /* !WORDS_BIGENDIAN */
         :	                switch (len)
         :	                {
         :	                        case 11:
         :	                                c += ((uint32) k[10] << 24);
    0.00 :	  4905bb:       0f b6 47 0a             movzbl 0xa(%rdi),%eax
    0.00 :	  4905bf:       c1 e0 18                shl    $0x18,%eax
    0.00 :	  4905c2:       42 8d 1c 00             lea    (%rax,%r8,1),%ebx
         :	                                /* fall through */
         :	                        case 10:
         :	                                c += ((uint32) k[9] << 16);
    0.00 :	  4905c6:       0f b6 47 09             movzbl 0x9(%rdi),%eax
    0.00 :	  4905ca:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  4905cd:       01 c3                   add    %eax,%ebx
         :	                                /* fall through */
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
    0.00 :	  4905cf:       0f b6 47 08             movzbl 0x8(%rdi),%eax
    0.00 :	  4905d3:       c1 e0 08                shl    $0x8,%eax
    0.00 :	  4905d6:       01 c3                   add    %eax,%ebx
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:388
   10.53 :	  4905d8:       89 ce                   mov    %ecx,%esi
         :	                                a += ka[0];
    0.00 :	  4905da:       45 89 cb                mov    %r9d,%r11d
         :	                        case 9:
         :	                                c += ((uint32) k[8] << 8);
         :	                                /* the lowest byte of c is reserved for the length */
         :	                                /* fall through */
         :	                        case 8:
         :	                                b += ka[1];
    0.00 :	  4905dd:       03 77 04                add    0x4(%rdi),%esi
         :	                                a += ka[0];
    0.00 :	  4905e0:       44 03 1f                add    (%rdi),%r11d
         :	                                break;
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:390
    5.26 :	  4905e3:       e9 69 ff ff ff          jmpq   490551 <hash_any+0x201>
         :	        {
         :	                /* Code path for aligned source data */
         :	                register const uint32 *ka = (const uint32 *) k;
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:323
   10.53 :	  4905e8:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905eb:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905ee:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905f1:       e9 e7 fe ff ff          jmpq   4904dd <hash_any+0x18d>
         :	        else
         :	        {
         :	                /* Code path for non-aligned source data */
         :
         :	                /* handle most of the key */
         :	                while (len >= 12)
    0.00 :	  4905f6:       45 89 c3                mov    %r8d,%r11d
    0.00 :	  4905f9:       44 89 c6                mov    %r8d,%esi
    0.00 :	  4905fc:       44 89 c3                mov    %r8d,%ebx
    0.00 :	  4905ff:       e9 42 fe ff ff          jmpq   490446 <hash_any+0xf6>
         :	                                /* fall through */
         :	                        case 4:
         :	                                a += ka[0];
         :	                                break;
         :	                        case 3:
         :	                                a += ((uint32) k[2] << 16);
    0.00 :	  490604:       0f b6 47 02             movzbl 0x2(%rdi),%eax
    0.00 :	  490608:       c1 e0 10                shl    $0x10,%eax
    0.00 :	  49060b:       46 8d 1c 08             lea    (%rax,%r9,1),%r11d
    0.00 :	  49060f:       e9 2d ff ff ff          jmpq   490541 <hash_any+0x1f1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:137
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:145
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    5.56 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7bd0 <InstrStopNode>:
         :	}
         :
         :	/* Exit from a plan node */
         :	void
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
    0.00 :	  5b7bd0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:70
   11.11 :	  5b7bd1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7bd4:       53                      push   %rbx
    0.00 :	  5b7bd5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7bd8:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
    0.00 :	  5b7bdc:       80 3f 00                cmpb   $0x0,(%rdi)
         :	InstrStopNode(Instrumentation *instr, double nTuples)
         :	{
         :	        instr_time      endtime;
         :
         :	        /* count the returned tuples */
         :	        instr->tuplecount += nTuples;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:74
    5.56 :	  5b7bdf:       f2 0f 58 47 30          addsd  0x30(%rdi),%xmm0
    0.00 :	  5b7be4:       f2 0f 11 47 30          movsd  %xmm0,0x30(%rdi)
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:77
    5.56 :	  5b7be9:       0f 84 90 00 00 00       je     5b7c7f <InstrStopNode+0xaf>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7bef:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7bf4:       75 0b                   jne    5b7c01 <InstrStopNode+0x31>
    0.00 :	  5b7bf6:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7bfb:       0f 84 d1 02 00 00       je     5b7ed2 <InstrStopNode+0x302>
         :	                        elog(ERROR, "InstrStopNode called without start");
         :
         :	                INSTR_TIME_SET_CURRENT(endtime);
    0.00 :	  5b7c01:       48 8d 7d e0             lea    -0x20(%rbp),%rdi
    0.00 :	  5b7c05:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7c07:       e8 b4 19 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                INSTR_TIME_ACCUM_DIFF(instr->counter, endtime, instr->starttime);
    0.00 :	  5b7c0c:       48 8b 45 e0             mov    -0x20(%rbp),%rax
    0.00 :	  5b7c10:       48 03 43 18             add    0x18(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:83
    5.56 :	  5b7c14:       48 2b 43 08             sub    0x8(%rbx),%rax
    0.00 :	  5b7c18:       48 89 43 18             mov    %rax,0x18(%rbx)
    0.00 :	  5b7c1c:       48 8b 45 e8             mov    -0x18(%rbp),%rax
    0.00 :	  5b7c20:       48 03 43 20             add    0x20(%rbx),%rax
    5.56 :	  5b7c24:       48 2b 43 10             sub    0x10(%rbx),%rax
    5.56 :	  5b7c28:       48 85 c0                test   %rax,%rax
    5.56 :	  5b7c2b:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c2f:       79 36                   jns    5b7c67 <InstrStopNode+0x97>
    0.00 :	  5b7c31:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  5b7c38:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7c3e:       48 83 6b 18 01          subq   $0x1,0x18(%rbx)
    0.00 :	  5b7c43:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7c46:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c4a:       78 ec                   js     5b7c38 <InstrStopNode+0x68>
    0.00 :	  5b7c4c:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c52:       7e 1b                   jle    5b7c6f <InstrStopNode+0x9f>
    0.00 :	  5b7c54:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5b7c58:       48 83 43 18 01          addq   $0x1,0x18(%rbx)
    0.00 :	  5b7c5d:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7c63:       48 89 43 20             mov    %rax,0x20(%rbx)
    0.00 :	  5b7c67:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7c6d:       7f e9                   jg     5b7c58 <InstrStopNode+0x88>
         :
         :	                INSTR_TIME_SET_ZERO(instr->starttime);
    0.00 :	  5b7c6f:       48 c7 43 08 00 00 00    movq   $0x0,0x8(%rbx)
    0.00 :	  5b7c76:       00 
    0.00 :	  5b7c77:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	  5b7c7e:       00 
         :	        }
         :
         :	        /* Add delta of buffer usage since entry to node's totals */
         :	        if (instr->need_bufusage)
    0.00 :	  5b7c7f:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:89
    5.56 :	  5b7c83:       75 33                   jne    5b7cb8 <InstrStopNode+0xe8>
         :	                BufferUsageAccumDiff(&instr->bufusage,
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
    0.00 :	  5b7c85:       80 7b 02 00             cmpb   $0x0,0x2(%rbx)
    0.00 :	  5b7c89:       75 21                   jne    5b7cac <InstrStopNode+0xdc>
         :	        {
         :	                instr->running = true;
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7c8b:       f2 48 0f 2a 43 20       cvtsi2sdq 0x20(%rbx),%xmm0
    0.00 :	  5b7c91:       f2 0f 5e 05 47 49 2c    divsd  0x2c4947(%rip),%xmm0        # 87c5e0 <__func__.18742+0x1b>
    0.00 :	  5b7c98:       00 
    0.00 :	  5b7c99:       f2 48 0f 2a 4b 18       cvtsi2sdq 0x18(%rbx),%xmm1
         :	                                                         &pgBufferUsage, &instr->bufusage_start);
         :
         :	        /* Is this the first tuple of this cycle? */
         :	        if (!instr->running)
         :	        {
         :	                instr->running = true;
    0.00 :	  5b7c9f:       c6 43 02 01             movb   $0x1,0x2(%rbx)
         :	                instr->firsttuple = INSTR_TIME_GET_DOUBLE(instr->counter);
    0.00 :	  5b7ca3:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  5b7ca7:       f2 0f 11 4b 28          movsd  %xmm1,0x28(%rbx)
         :	        }
         :	}
    0.00 :	  5b7cac:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b7cb0:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:99
    5.56 :	  5b7cb1:       c9                      leaveq 
    0.00 :	  5b7cb2:       c3                      retq   
    0.00 :	  5b7cb3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	static void
         :	BufferUsageAccumDiff(BufferUsage *dst,
         :	                                         const BufferUsage *add,
         :	                                         const BufferUsage *sub)
         :	{
         :	        dst->shared_blks_hit += add->shared_blks_hit - sub->shared_blks_hit;
    0.00 :	  5b7cb8:       48 8b 05 a1 7a 60 00    mov    0x607aa1(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7cbf:       48 03 83 d8 00 00 00    add    0xd8(%rbx),%rax
    0.00 :	  5b7cc6:       48 2b 43 38             sub    0x38(%rbx),%rax
    0.00 :	  5b7cca:       48 89 83 d8 00 00 00    mov    %rax,0xd8(%rbx)
         :	        dst->shared_blks_read += add->shared_blks_read - sub->shared_blks_read;
    0.00 :	  5b7cd1:       48 8b 05 90 7a 60 00    mov    0x607a90(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7cd8:       48 03 83 e0 00 00 00    add    0xe0(%rbx),%rax
    0.00 :	  5b7cdf:       48 2b 43 40             sub    0x40(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:137
    5.56 :	  5b7ce3:       48 89 83 e0 00 00 00    mov    %rax,0xe0(%rbx)
         :	        dst->shared_blks_dirtied += add->shared_blks_dirtied - sub->shared_blks_dirtied;
    0.00 :	  5b7cea:       48 8b 05 7f 7a 60 00    mov    0x607a7f(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7cf1:       48 03 83 e8 00 00 00    add    0xe8(%rbx),%rax
    0.00 :	  5b7cf8:       48 2b 43 48             sub    0x48(%rbx),%rax
    0.00 :	  5b7cfc:       48 89 83 e8 00 00 00    mov    %rax,0xe8(%rbx)
         :	        dst->shared_blks_written += add->shared_blks_written - sub->shared_blks_written;
    0.00 :	  5b7d03:       48 8b 05 6e 7a 60 00    mov    0x607a6e(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7d0a:       48 03 83 f0 00 00 00    add    0xf0(%rbx),%rax
    0.00 :	  5b7d11:       48 2b 43 50             sub    0x50(%rbx),%rax
    0.00 :	  5b7d15:       48 89 83 f0 00 00 00    mov    %rax,0xf0(%rbx)
         :	        dst->local_blks_hit += add->local_blks_hit - sub->local_blks_hit;
    0.00 :	  5b7d1c:       48 8b 05 5d 7a 60 00    mov    0x607a5d(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7d23:       48 03 83 f8 00 00 00    add    0xf8(%rbx),%rax
    0.00 :	  5b7d2a:       48 2b 43 58             sub    0x58(%rbx),%rax
    0.00 :	  5b7d2e:       48 89 83 f8 00 00 00    mov    %rax,0xf8(%rbx)
         :	        dst->local_blks_read += add->local_blks_read - sub->local_blks_read;
    0.00 :	  5b7d35:       48 8b 05 4c 7a 60 00    mov    0x607a4c(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7d3c:       48 03 83 00 01 00 00    add    0x100(%rbx),%rax
    0.00 :	  5b7d43:       48 2b 43 60             sub    0x60(%rbx),%rax
    0.00 :	  5b7d47:       48 89 83 00 01 00 00    mov    %rax,0x100(%rbx)
         :	        dst->local_blks_dirtied += add->local_blks_dirtied - sub->local_blks_dirtied;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:142
    5.56 :	  5b7d4e:       48 8b 05 3b 7a 60 00    mov    0x607a3b(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7d55:       48 03 83 08 01 00 00    add    0x108(%rbx),%rax
    0.00 :	  5b7d5c:       48 2b 43 68             sub    0x68(%rbx),%rax
    0.00 :	  5b7d60:       48 89 83 08 01 00 00    mov    %rax,0x108(%rbx)
         :	        dst->local_blks_written += add->local_blks_written - sub->local_blks_written;
    0.00 :	  5b7d67:       48 8b 05 2a 7a 60 00    mov    0x607a2a(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7d6e:       48 03 83 10 01 00 00    add    0x110(%rbx),%rax
    0.00 :	  5b7d75:       48 2b 43 70             sub    0x70(%rbx),%rax
    0.00 :	  5b7d79:       48 89 83 10 01 00 00    mov    %rax,0x110(%rbx)
         :	        dst->temp_blks_read += add->temp_blks_read - sub->temp_blks_read;
    0.00 :	  5b7d80:       48 8b 05 19 7a 60 00    mov    0x607a19(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7d87:       48 03 83 18 01 00 00    add    0x118(%rbx),%rax
    0.00 :	  5b7d8e:       48 2b 43 78             sub    0x78(%rbx),%rax
    0.00 :	  5b7d92:       48 89 83 18 01 00 00    mov    %rax,0x118(%rbx)
         :	        dst->temp_blks_written += add->temp_blks_written - sub->temp_blks_written;
    0.00 :	  5b7d99:       48 8b 05 08 7a 60 00    mov    0x607a08(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7da0:       48 03 83 20 01 00 00    add    0x120(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:145
    5.56 :	  5b7da7:       48 2b 83 80 00 00 00    sub    0x80(%rbx),%rax
    0.00 :	  5b7dae:       48 89 83 20 01 00 00    mov    %rax,0x120(%rbx)
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_read_time,
    0.00 :	  5b7db5:       48 8b 05 f4 79 60 00    mov    0x6079f4(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7dbc:       48 03 83 28 01 00 00    add    0x128(%rbx),%rax
    0.00 :	  5b7dc3:       48 2b 83 88 00 00 00    sub    0x88(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:146
    5.56 :	  5b7dca:       48 89 83 28 01 00 00    mov    %rax,0x128(%rbx)
   11.11 :	  5b7dd1:       48 8b 05 e0 79 60 00    mov    0x6079e0(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7dd8:       48 03 83 30 01 00 00    add    0x130(%rbx),%rax
    0.00 :	  5b7ddf:       48 2b 83 90 00 00 00    sub    0x90(%rbx),%rax
    0.00 :	  5b7de6:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7de9:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7df0:       79 43                   jns    5b7e35 <InstrStopNode+0x265>
    0.00 :	  5b7df2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7df8:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7dfe:       48 83 ab 28 01 00 00    subq   $0x1,0x128(%rbx)
    0.00 :	  5b7e05:       01 
    0.00 :	  5b7e06:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e09:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e10:       78 e6                   js     5b7df8 <InstrStopNode+0x228>
    0.00 :	  5b7e12:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e18:       7e 23                   jle    5b7e3d <InstrStopNode+0x26d>
    0.00 :	  5b7e1a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e20:       48 83 83 28 01 00 00    addq   $0x1,0x128(%rbx)
    0.00 :	  5b7e27:       01 
    0.00 :	  5b7e28:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7e2e:       48 89 83 30 01 00 00    mov    %rax,0x130(%rbx)
    0.00 :	  5b7e35:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7e3b:       7f e3                   jg     5b7e20 <InstrStopNode+0x250>
         :	                                                  add->blk_read_time, sub->blk_read_time);
         :	        INSTR_TIME_ACCUM_DIFF(dst->blk_write_time,
    0.00 :	  5b7e3d:       48 8b 05 7c 79 60 00    mov    0x60797c(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7e44:       48 03 83 38 01 00 00    add    0x138(%rbx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:148
    5.56 :	  5b7e4b:       48 2b 83 98 00 00 00    sub    0x98(%rbx),%rax
    0.00 :	  5b7e52:       48 89 83 38 01 00 00    mov    %rax,0x138(%rbx)
    0.00 :	  5b7e59:       48 8b 05 68 79 60 00    mov    0x607968(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b7e60:       48 03 83 40 01 00 00    add    0x140(%rbx),%rax
    0.00 :	  5b7e67:       48 2b 83 a0 00 00 00    sub    0xa0(%rbx),%rax
    0.00 :	  5b7e6e:       48 85 c0                test   %rax,%rax
    5.56 :	  5b7e71:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e78:       79 4b                   jns    5b7ec5 <InstrStopNode+0x2f5>
    0.00 :	  5b7e7a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5b7e80:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  5b7e86:       48 83 ab 38 01 00 00    subq   $0x1,0x138(%rbx)
    0.00 :	  5b7e8d:       01 
    0.00 :	  5b7e8e:       48 85 c0                test   %rax,%rax
    0.00 :	  5b7e91:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7e98:       78 e6                   js     5b7e80 <InstrStopNode+0x2b0>
    0.00 :	  5b7e9a:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ea0:       0f 8e df fd ff ff       jle    5b7c85 <InstrStopNode+0xb5>
    0.00 :	  5b7ea6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  5b7ead:       00 00 00 
    0.00 :	  5b7eb0:       48 83 83 38 01 00 00    addq   $0x1,0x138(%rbx)
    0.00 :	  5b7eb7:       01 
    0.00 :	  5b7eb8:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  5b7ebe:       48 89 83 40 01 00 00    mov    %rax,0x140(%rbx)
    0.00 :	  5b7ec5:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  5b7ecb:       7f e3                   jg     5b7eb0 <InstrStopNode+0x2e0>
    0.00 :	  5b7ecd:       e9 b3 fd ff ff          jmpq   5b7c85 <InstrStopNode+0xb5>
         :
         :	        /* let's update the time only if the timer was requested */
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        elog(ERROR, "InstrStopNode called without start");
    0.00 :	  5b7ed2:       ba 8a b6 88 00          mov    $0x88b68a,%edx
    0.00 :	  5b7ed7:       be 50 00 00 00          mov    $0x50,%esi
    0.00 :	  5b7edc:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7ee1:       e8 3a 35 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7ee6:       be 30 b6 88 00          mov    $0x88b630,%esi
    0.00 :	  5b7eeb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7ef0:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7ef2:       e8 39 33 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7ef7:       e8 d4 15 eb ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   29.41 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   23.53 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   23.53 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004bffe0 <TransactionIdPrecedes>:
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
    0.00 :	  4bffe0:       55                      push   %rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:308
   17.65 :	  4bffe1:       83 ff 02                cmp    $0x2,%edi
         :	/*
         :	 * TransactionIdPrecedes --- is id1 logically < id2?
         :	 */
         :	bool
         :	TransactionIdPrecedes(TransactionId id1, TransactionId id2)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:301
   23.53 :	  4bffe4:       48 89 e5                mov    %rsp,%rbp
         :	         * If either ID is a permanent XID then we can just do unsigned
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
    0.00 :	  4bffe7:       76 17                   jbe    4c0000 <TransactionIdPrecedes+0x20>
    0.00 :	  4bffe9:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  4bffec:       76 12                   jbe    4c0000 <TransactionIdPrecedes+0x20>
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/transam.c:312
   23.53 :	  4bffee:       29 f7                   sub    %esi,%edi
         :	}
    0.00 :	  4bfff0:       c9                      leaveq 
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
   29.41 :	  4bfff1:       89 f8                   mov    %edi,%eax
    5.88 :	  4bfff3:       c1 e8 1f                shr    $0x1f,%eax
         :	}
    0.00 :	  4bfff6:       c3                      retq   
    0.00 :	  4bfff7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4bfffe:       00 00 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0000:       39 f7                   cmp    %esi,%edi
         :
         :	        diff = (int32) (id1 - id2);
         :	        return (diff < 0);
         :	}
    0.00 :	  4c0002:       c9                      leaveq 
         :	         * comparison.  If both are normal, do a modulo-2^32 comparison.
         :	         */
         :	        int32           diff;
         :
         :	        if (!TransactionIdIsNormal(id1) || !TransactionIdIsNormal(id2))
         :	                return (id1 < id2);
    0.00 :	  4c0003:       0f 92 c0                setb   %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   35.29 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:660
   17.65 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:645
   11.76 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:655
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:646
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:657
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:688
    5.88 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:741
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e3350 <tbm_iterate>:
         :	 * be examined, but the condition must be rechecked anyway.  (For ease of
         :	 * testing, recheck is always set true when ntuples < 0.)
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
    0.00 :	  5e3350:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:645
   17.65 :	  5e3351:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5e3354:       53                      push   %rbx
         :	        TIDBitmap  *tbm = iterator->tbm;
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:646
    5.88 :	  5e3355:       4c 8b 1f                mov    (%rdi),%r11
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:655
   11.76 :	  5e3358:       44 8b 57 0c             mov    0xc(%rdi),%r10d
         :	 */
         :	TBMIterateResult *
         :	tbm_iterate(TBMIterator *iterator)
         :	{
         :	        TIDBitmap  *tbm = iterator->tbm;
         :	        TBMIterateResult *output = &(iterator->output);
    0.00 :	  5e335c:       48 8d 5f 14             lea    0x14(%rdi),%rbx
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3360:       45 3b 53 2c             cmp    0x2c(%r11),%r10d
    0.00 :	  5e3364:       0f 8d 9f 00 00 00       jge    5e3409 <tbm_iterate+0xb9>
         :	                while (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    5.88 :	  5e336a:       41 b9 01 00 00 00       mov    $0x1,%r9d
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
    0.00 :	  5e3370:       8b 77 10                mov    0x10(%rdi),%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3373:       49 8b 43 70             mov    0x70(%r11),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:657
    5.88 :	  5e3377:       49 63 d2                movslq %r10d,%rdx
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e337a:       81 fe ff 00 00 00       cmp    $0xff,%esi
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
    0.00 :	  5e3380:       4c 8b 04 d0             mov    (%rax,%rdx,8),%r8
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:660
   35.29 :	  5e3384:       7f 68                   jg     5e33ee <tbm_iterate+0x9e>
         :	                {
         :	                        int                     wordnum = WORDNUM(schunkbit);
         :	                        int                     bitnum = BITNUM(schunkbit);
         :
         :	                        if ((chunk->words[wordnum] & ((bitmapword) 1 << bitnum)) != 0)
    0.00 :	  5e3386:       8d 56 1f                lea    0x1f(%rsi),%edx
    0.00 :	  5e3389:       85 f6                   test   %esi,%esi
    0.00 :	  5e338b:       89 f0                   mov    %esi,%eax
    0.00 :	  5e338d:       0f 49 d6                cmovns %esi,%edx
    0.00 :	  5e3390:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e3393:       c1 e8 1b                shr    $0x1b,%eax
    0.00 :	  5e3396:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  5e3399:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e339c:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5e339f:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33a2:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33a4:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33a7:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33a9:       41 85 44 90 08          test   %eax,0x8(%r8,%rdx,4)
    0.00 :	  5e33ae:       74 33                   je     5e33e3 <tbm_iterate+0x93>
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:665
    5.88 :	  5e33b0:       eb 6e                   jmp    5e3420 <tbm_iterate+0xd0>
    0.00 :	  5e33b2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5e33b8:       89 f0                   mov    %esi,%eax
    0.00 :	  5e33ba:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	  5e33bd:       c1 e8 1b                shr    $0x1b,%eax
    0.00 :	  5e33c0:       8d 0c 06                lea    (%rsi,%rax,1),%ecx
    0.00 :	  5e33c3:       83 e1 1f                and    $0x1f,%ecx
    0.00 :	  5e33c6:       29 c1                   sub    %eax,%ecx
    0.00 :	  5e33c8:       44 89 c8                mov    %r9d,%eax
    0.00 :	  5e33cb:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e33cd:       85 f6                   test   %esi,%esi
    0.00 :	  5e33cf:       89 c1                   mov    %eax,%ecx
    0.00 :	  5e33d1:       8d 46 1f                lea    0x1f(%rsi),%eax
    0.00 :	  5e33d4:       0f 49 c6                cmovns %esi,%eax
    0.00 :	  5e33d7:       c1 f8 05                sar    $0x5,%eax
    0.00 :	  5e33da:       48 98                   cltq   
    0.00 :	  5e33dc:       41 85 4c 80 08          test   %ecx,0x8(%r8,%rax,4)
    0.00 :	  5e33e1:       75 3d                   jne    5e3420 <tbm_iterate+0xd0>
         :	                                break;
         :	                        schunkbit++;
    0.00 :	  5e33e3:       83 c6 01                add    $0x1,%esi
         :	        while (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                int                     schunkbit = iterator->schunkbit;
         :
         :	                while (schunkbit < PAGES_PER_CHUNK)
    0.00 :	  5e33e6:       81 fe 00 01 00 00       cmp    $0x100,%esi
    0.00 :	  5e33ec:       75 ca                   jne    5e33b8 <tbm_iterate+0x68>
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33ee:       41 8d 42 01             lea    0x1(%r10),%eax
         :	                iterator->schunkbit = 0;
    0.00 :	  5e33f2:       c7 47 10 00 00 00 00    movl   $0x0,0x10(%rdi)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
         :	                        break;
         :	                }
         :	                /* advance to next chunk */
         :	                iterator->schunkptr++;
    0.00 :	  5e33f9:       89 47 0c                mov    %eax,0xc(%rdi)
         :
         :	        /*
         :	         * If lossy chunk pages remain, make sure we've advanced schunkptr/
         :	         * schunkbit to the next set bit.
         :	         */
         :	        while (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e33fc:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e3400:       41 89 c2                mov    %eax,%r10d
    0.00 :	  5e3403:       0f 8c 67 ff ff ff       jl     5e3370 <tbm_iterate+0x20>
         :	                        iterator->schunkbit++;
         :	                        return output;
         :	                }
         :	        }
         :
         :	        if (iterator->spageptr < tbm->npages)
    0.00 :	  5e3409:       8b 77 08                mov    0x8(%rdi),%esi
    0.00 :	  5e340c:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3410:       7c 44                   jl     5e3456 <tbm_iterate+0x106>
    0.00 :	  5e3412:       31 db                   xor    %ebx,%ebx
    0.00 :	  5e3414:       e9 c9 00 00 00          jmpq   5e34e2 <tbm_iterate+0x192>
    0.00 :	  5e3419:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                break;
         :	                        schunkbit++;
         :	                }
         :	                if (schunkbit < PAGES_PER_CHUNK)
         :	                {
         :	                        iterator->schunkbit = schunkbit;
    0.00 :	  5e3420:       89 77 10                mov    %esi,0x10(%rdi)
         :
         :	        /*
         :	         * If both chunk and per-page data remain, must output the numerically
         :	         * earlier page.
         :	         */
         :	        if (iterator->schunkptr < tbm->nchunks)
    0.00 :	  5e3423:       8b 47 0c                mov    0xc(%rdi),%eax
    0.00 :	  5e3426:       41 3b 43 2c             cmp    0x2c(%r11),%eax
    0.00 :	  5e342a:       7d dd                   jge    5e3409 <tbm_iterate+0xb9>
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:688
    5.88 :	  5e342c:       49 8b 53 70             mov    0x70(%r11),%rdx
    0.00 :	  5e3430:       48 98                   cltq   
    0.00 :	  5e3432:       89 f1                   mov    %esi,%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e3434:       8b 77 08                mov    0x8(%rdi),%esi
         :	        if (iterator->schunkptr < tbm->nchunks)
         :	        {
         :	                PagetableEntry *chunk = tbm->schunks[iterator->schunkptr];
         :	                BlockNumber chunk_blockno;
         :
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
    0.00 :	  5e3437:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e343b:       03 08                   add    (%rax),%ecx
         :	                if (iterator->spageptr >= tbm->npages ||
    0.00 :	  5e343d:       41 3b 73 28             cmp    0x28(%r11),%esi
    0.00 :	  5e3441:       0f 8d 89 00 00 00       jge    5e34d0 <tbm_iterate+0x180>
    0.00 :	  5e3447:       49 8b 53 68             mov    0x68(%r11),%rdx
    0.00 :	  5e344b:       48 63 c6                movslq %esi,%rax
    0.00 :	  5e344e:       48 8b 04 c2             mov    (%rdx,%rax,8),%rax
    0.00 :	  5e3452:       3b 08                   cmp    (%rax),%ecx
    0.00 :	  5e3454:       72 7a                   jb     5e34d0 <tbm_iterate+0x180>
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
    0.00 :	  5e3456:       41 83 7b 10 01          cmpl   $0x1,0x10(%r11)
         :	                        page = &tbm->entry1;
    0.00 :	  5e345b:       49 8d 53 34             lea    0x34(%r11),%rdx
         :	                PagetableEntry *page;
         :	                int                     ntuples;
         :	                int                     wordnum;
         :
         :	                /* In ONE_PAGE state, we don't allocate an spages[] array */
         :	                if (tbm->status == TBM_ONE_PAGE)
    0.00 :	  5e345f:       74 0b                   je     5e346c <tbm_iterate+0x11c>
         :	                        page = &tbm->entry1;
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
    0.00 :	  5e3461:       49 8b 43 68             mov    0x68(%r11),%rax
    0.00 :	  5e3465:       48 63 d6                movslq %esi,%rdx
    0.00 :	  5e3468:       48 8b 14 d0             mov    (%rax,%rdx,8),%rdx
    0.00 :	  5e346c:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  5e346f:       45 31 c9                xor    %r9d,%r9d
    0.00 :	  5e3472:       41 ba 01 00 00 00       mov    $0x1,%r10d
    0.00 :	  5e3478:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5e347f:       00 
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
         :	                {
         :	                        bitmapword      w = page->words[wordnum];
    0.00 :	  5e3480:       42 8b 4c 0a 08          mov    0x8(%rdx,%r9,1),%ecx
         :
         :	                        if (w != 0)
    0.00 :	  5e3485:       85 c9                   test   %ecx,%ecx
    0.00 :	  5e3487:       74 1f                   je     5e34a8 <tbm_iterate+0x158>
    0.00 :	  5e3489:       44 89 d6                mov    %r10d,%esi
    0.00 :	  5e348c:       eb 05                   jmp    5e3493 <tbm_iterate+0x143>
    0.00 :	  5e348e:       66 90                   xchg   %ax,%ax
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
    0.00 :	  5e3490:       83 c6 01                add    $0x1,%esi
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
         :	                                {
         :	                                        if (w & 1)
    0.00 :	  5e3493:       f6 c1 01                test   $0x1,%cl
    0.00 :	  5e3496:       74 0c                   je     5e34a4 <tbm_iterate+0x154>
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
    0.00 :	  5e3498:       49 63 c0                movslq %r8d,%rax
    0.00 :	  5e349b:       41 83 c0 01             add    $0x1,%r8d
    0.00 :	  5e349f:       66 89 74 47 1e          mov    %si,0x1e(%rdi,%rax,2)
         :
         :	                        if (w != 0)
         :	                        {
         :	                                int                     off = wordnum * BITS_PER_BITMAPWORD + 1;
         :
         :	                                while (w != 0)
    0.00 :	  5e34a4:       d1 e9                   shr    %ecx
    0.00 :	  5e34a6:       75 e8                   jne    5e3490 <tbm_iterate+0x140>
         :	                                {
         :	                                        if (w & 1)
         :	                                                output->offsets[ntuples++] = (OffsetNumber) off;
         :	                                        off++;
    0.00 :	  5e34a8:       49 83 c1 04             add    $0x4,%r9
    0.00 :	  5e34ac:       41 83 c2 20             add    $0x20,%r10d
         :	                else
         :	                        page = tbm->spages[iterator->spageptr];
         :
         :	                /* scan bitmap to extract individual offset numbers */
         :	                ntuples = 0;
         :	                for (wordnum = 0; wordnum < WORDS_PER_PAGE; wordnum++)
    0.00 :	  5e34b0:       49 83 f9 28             cmp    $0x28,%r9
    0.00 :	  5e34b4:       75 ca                   jne    5e3480 <tbm_iterate+0x130>
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34b6:       8b 02                   mov    (%rdx),%eax
         :	                output->ntuples = ntuples;
    0.00 :	  5e34b8:       44 89 47 18             mov    %r8d,0x18(%rdi)
         :	                                        off++;
         :	                                        w >>= 1;
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
    0.00 :	  5e34bc:       89 47 14                mov    %eax,0x14(%rdi)
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34bf:       0f b6 42 05             movzbl 0x5(%rdx),%eax
         :	                iterator->spageptr++;
    0.00 :	  5e34c3:       83 47 08 01             addl   $0x1,0x8(%rdi)
         :	                                }
         :	                        }
         :	                }
         :	                output->blockno = page->blockno;
         :	                output->ntuples = ntuples;
         :	                output->recheck = page->recheck;
    0.00 :	  5e34c7:       88 47 1c                mov    %al,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34ca:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34cd:       5b                      pop    %rbx
    0.00 :	  5e34ce:       c9                      leaveq 
    0.00 :	  5e34cf:       c3                      retq   
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
         :	                        output->ntuples = -1;
         :	                        output->recheck = true;
         :	                        iterator->schunkbit++;
    0.00 :	  5e34d0:       83 47 10 01             addl   $0x1,0x10(%rdi)
         :	                chunk_blockno = chunk->blockno + iterator->schunkbit;
         :	                if (iterator->spageptr >= tbm->npages ||
         :	                        chunk_blockno < tbm->spages[iterator->spageptr]->blockno)
         :	                {
         :	                        /* Return a lossy page indicator from the chunk */
         :	                        output->blockno = chunk_blockno;
    0.00 :	  5e34d4:       89 4f 14                mov    %ecx,0x14(%rdi)
         :	                        output->ntuples = -1;
    0.00 :	  5e34d7:       c7 47 18 ff ff ff ff    movl   $0xffffffff,0x18(%rdi)
         :	                        output->recheck = true;
    0.00 :	  5e34de:       c6 47 1c 01             movb   $0x1,0x1c(%rdi)
         :	                return output;
         :	        }
         :
         :	        /* Nothing more in the bitmap */
         :	        return NULL;
         :	}
    0.00 :	  5e34e2:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5e34e5:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:741
    5.88 :	  5e34e6:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   26.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:580
   13.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:580
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
    6.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079ae70 <ResourceOwnerEnlargeBuffers>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:577
   13.33 :	  79ae70:       55                      push   %rbp
    6.67 :	  79ae71:       48 89 e5                mov    %rsp,%rbp
    6.67 :	  79ae74:       4c 89 65 f8             mov    %r12,-0x8(%rbp)
   26.67 :	  79ae78:       48 89 5d f0             mov    %rbx,-0x10(%rbp)
    0.00 :	  79ae7c:       48 83 ec 10             sub    $0x10,%rsp
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
    0.00 :	  79ae80:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerEnlargeBuffers(ResourceOwner owner)
         :	{
    0.00 :	  79ae83:       49 89 fc                mov    %rdi,%r12
         :	        int                     newmax;
         :
         :	        if (owner == NULL ||
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:580
    6.67 :	  79ae86:       74 2a                   je     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
    0.00 :	  79ae88:       8b 47 30                mov    0x30(%rdi),%eax
   13.33 :	  79ae8b:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  79ae8e:       7c 22                   jl     79aeb2 <ResourceOwnerEnlargeBuffers+0x42>
         :	                owner->nbuffers < owner->maxbuffers)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
    0.00 :	  79ae90:       48 8b 7f 28             mov    0x28(%rdi),%rdi
    0.00 :	  79ae94:       48 85 ff                test   %rdi,%rdi
    0.00 :	  79ae97:       74 27                   je     79aec0 <ResourceOwnerEnlargeBuffers+0x50>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
    0.00 :	  79ae99:       8d 1c 00                lea    (%rax,%rax,1),%ebx
         :	                owner->buffers = (Buffer *)
    0.00 :	  79ae9c:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  79ae9f:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  79aea3:       e8 48 de ff ff          callq  798cf0 <repalloc>
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aea8:       41 89 5c 24 30          mov    %ebx,0x30(%r12)
         :	                owner->maxbuffers = newmax;
         :	        }
         :	        else
         :	        {
         :	                newmax = owner->maxbuffers * 2;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aead:       49 89 44 24 28          mov    %rax,0x28(%r12)
         :	                        repalloc(owner->buffers, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:598
    6.67 :	  79aeb2:       48 8b 1c 24             mov    (%rsp),%rbx
   13.33 :	  79aeb6:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    6.67 :	  79aebb:       c9                      leaveq 
    0.00 :	  79aebc:       c3                      retq   
    0.00 :	  79aebd:       0f 1f 00                nopl   (%rax)
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aec0:       48 8b 3d a1 f9 41 00    mov    0x41f9a1(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  79aec7:       be 40 00 00 00          mov    $0x40,%esi
    0.00 :	  79aecc:       e8 bf df ff ff          callq  798e90 <MemoryContextAlloc>
         :	                        MemoryContextAlloc(TopMemoryContext, newmax * sizeof(Buffer));
         :	                owner->maxbuffers = newmax;
    0.00 :	  79aed1:       41 c7 44 24 30 10 00    movl   $0x10,0x30(%r12)
    0.00 :	  79aed8:       00 00 
         :	                return;                                 /* nothing to do */
         :
         :	        if (owner->buffers == NULL)
         :	        {
         :	                newmax = 16;
         :	                owner->buffers = (Buffer *)
    0.00 :	  79aeda:       49 89 44 24 28          mov    %rax,0x28(%r12)
    0.00 :	  79aedf:       eb d1                   jmp    79aeb2 <ResourceOwnerEnlargeBuffers+0x42>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   64.29 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1065
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1065
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782c50 <CHashAddToGarbage>:
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c50:       0f b6 4f 14             movzbl 0x14(%rdi),%ecx
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c54:       89 d0                   mov    %edx,%eax
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c56:       55                      push   %rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c57:       d1 e8                   shr    %eax
    0.00 :	  782c59:       41 89 c0                mov    %eax,%r8d
         :	 * failure to match an already-deleted item shouldn't cause any problems;
         :	 * this is why gcnext can share space with the hash value.
         :	 */
         :	static void
         :	CHashAddToGarbage(CHashTable table, uint32 bucket, CHashPtr c)
         :	{
    0.00 :	  782c5c:       48 89 e5                mov    %rsp,%rbp
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c5f:       44 0f af 47 1c          imul   0x1c(%rdi),%r8d
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c64:       d3 ee                   shr    %cl,%esi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1065
    7.14 :	  782c66:       0f b6 4f 15             movzbl 0x15(%rdi),%ecx
    0.00 :	  782c6a:       89 f0                   mov    %esi,%eax
         :	{
         :	        CHashPtr        g;
         :	        CHashNode *n;
         :	        CHashPtr *garbage;
         :
         :	        n = CHashTableGetNode(table, c);
    0.00 :	  782c6c:       4c 03 47 30             add    0x30(%rdi),%r8
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782c70:       d3 e8                   shr    %cl,%eax
    7.14 :	  782c72:       01 f0                   add    %esi,%eax
    0.00 :	  782c74:       48 8d 0c 85 00 00 00    lea    0x0(,%rax,4),%rcx
    0.00 :	  782c7b:       00 
    0.00 :	  782c7c:       48 03 4f 28             add    0x28(%rdi),%rcx
    0.00 :	  782c80:       eb 0e                   jmp    782c90 <CHashAddToGarbage+0x40>
    0.00 :	  782c82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	        {
         :	                g = *garbage;
         :	                n->un.gcnext = g;
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
    0.00 :	  782c88:       48 83 87 a8 00 00 00    addq   $0x1,0xa8(%rdi)
    0.00 :	  782c8f:       01 
         :	        n = CHashTableGetNode(table, c);
         :	        garbage = CHashTableGetGarbageByBucket(table, bucket);
         :
         :	        while (1)
         :	        {
         :	                g = *garbage;
    0.00 :	  782c90:       8b 01                   mov    (%rcx),%eax
         :	                n->un.gcnext = g;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1070
   64.29 :	  782c92:       41 89 40 04             mov    %eax,0x4(%r8)
         :	                if (__sync_bool_compare_and_swap(garbage, g, c))
    0.00 :	  782c96:       f0 0f b1 11             lock cmpxchg %edx,(%rcx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:1071
   21.43 :	  782c9a:       75 ec                   jne    782c88 <CHashAddToGarbage+0x38>
         :	                        break;
         :	                CHashTableIncrementStatistic(table, CHS_Garbage_Enqueue_Retry);
         :	        }
         :	}
    0.00 :	  782c9c:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   35.71 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
   21.43 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:452
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:468
    7.14 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:471
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007832f0 <CHashSearch>:
         :	 * from the data in the hash table and return true.  If not, it will return
         :	 * false.
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:444
    7.14 :	  7832f0:       55                      push   %rbp
    7.14 :	  7832f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7832f4:       41 54                   push   %r12
    7.14 :	  7832f6:       49 89 f4                mov    %rsi,%r12
    0.00 :	  7832f9:       53                      push   %rbx
    0.00 :	  7832fa:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7832fd:       48 83 ec 20             sub    $0x20,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  783301:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  783305:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  783308:       e8 43 d0 d0 ff          callq  490350 <hash_any>
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  78330d:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  783311:       8b 7b 10                mov    0x10(%rbx),%edi
    0.00 :	  783314:       21 c7                   and    %eax,%edi
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783316:       89 fe                   mov    %edi,%esi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  783318:       d3 ef                   shr    %cl,%edi
    0.00 :	  78331a:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  78331e:       89 fa                   mov    %edi,%edx
         :	bool
         :	CHashSearch(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  783320:       48 c1 e6 02             shl    $0x2,%rsi
    0.00 :	  783324:       48 03 73 20             add    0x20(%rbx),%rsi
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:452
    7.14 :	  783328:       d3 ea                   shr    %cl,%edx
    0.00 :	  78332a:       48 8b 0d 17 a6 3f 00    mov    0x3fa617(%rip),%rcx        # b7d948 <MyProc>
    0.00 :	  783331:       01 fa                   add    %edi,%edx
    0.00 :	  783333:       48 c1 e2 02             shl    $0x2,%rdx
    0.00 :	  783337:       48 03 53 28             add    0x28(%rbx),%rdx
    0.00 :	  78333b:       48 89 91 e8 02 00 00    mov    %rdx,0x2e8(%rcx)
         :	        pg_memory_barrier();
    0.00 :	  783342:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:456
   35.71 :	  783347:       4c 8d 45 d0             lea    -0x30(%rbp),%r8
    0.00 :	  78334b:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  78334e:       89 c2                   mov    %eax,%edx
    0.00 :	  783350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  783353:       e8 48 f9 ff ff          callq  782ca0 <CHashBucketScan>
         :	        if (scan.found)
    0.00 :	  783358:       80 7d e8 00             cmpb   $0x0,-0x18(%rbp)
    0.00 :	  78335c:       75 32                   jne    783390 <CHashSearch+0xa0>
         :	                           CHashNodeGetItem(scan.target_node) + table->desc.key_size,
         :	                           table->desc.element_size - table->desc.key_size);
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  78335e:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:465
   21.43 :	  783363:       48 8b 05 de a5 3f 00    mov    0x3fa5de(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  78336a:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  783371:       00 00 00 00 
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
         :	        if (!scan.found)
    0.00 :	  783375:       0f b6 45 e8             movzbl -0x18(%rbp),%eax
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        CHashTableIncrementStatistic(table, CHS_Search);
    0.00 :	  783379:       48 83 43 40 01          addq   $0x1,0x40(%rbx)
         :	        if (!scan.found)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:468
    7.14 :	  78337e:       84 c0                   test   %al,%al
    0.00 :	  783380:       75 05                   jne    783387 <CHashSearch+0x97>
         :	                CHashTableIncrementStatistic(table, CHS_Search_Failed);
    0.00 :	  783382:       48 83 43 48 01          addq   $0x1,0x48(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  783387:       48 83 c4 20             add    $0x20,%rsp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:471
    7.14 :	  78338b:       5b                      pop    %rbx
    0.00 :	  78338c:       41 5c                   pop    %r12
    0.00 :	  78338e:       c9                      leaveq 
    0.00 :	  78338f:       c3                      retq   
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket and return data from any matching entry. */
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
         :	        if (scan.found)
         :	                memcpy(((char *) entry) + table->desc.key_size,
    0.00 :	  783390:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  783394:       0f b7 53 0c             movzwl 0xc(%rbx),%edx
    0.00 :	  783398:       0f b7 f0                movzwl %ax,%esi
    0.00 :	  78339b:       29 c2                   sub    %eax,%edx
    0.00 :	  78339d:       49 8d 3c 34             lea    (%r12,%rsi,1),%rdi
    0.00 :	  7833a1:       48 83 c6 08             add    $0x8,%rsi
    0.00 :	  7833a5:       48 03 75 e0             add    -0x20(%rbp),%rsi
    0.00 :	  7833a9:       48 63 d2                movslq %edx,%rdx
    0.00 :	  7833ac:       e8 3f 68 ce ff          callq  469bf0 <memcpy@plt>
    0.00 :	  7833b1:       eb ab                   jmp    78335e <CHashSearch+0x6e>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   28.57 ??:0
   14.29 ??:0
   14.29 ??:0
    7.14 ??:0
    7.14 ??:0
    7.14 ??:0
    7.14 ??:0
    7.14 ??:0
    7.14 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000031dc0 <__isinf>:
 ??:0
    7.14 :	   31dc0:       f2 0f 11 44 24 f8       movsd  %xmm0,-0x8(%rsp)
   28.57 :	   31dc6:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
   14.29 :	   31dcb:       48 89 c1                mov    %rax,%rcx
    0.00 :	   31dce:       48 c1 e9 20             shr    $0x20,%rcx
    0.00 :	   31dd2:       89 ca                   mov    %ecx,%edx
    0.00 :	   31dd4:       c1 f9 1e                sar    $0x1e,%ecx
    0.00 :	   31dd7:       81 e2 ff ff ff 7f       and    $0x7fffffff,%edx
    0.00 :	   31ddd:       81 f2 00 00 f0 7f       xor    $0x7ff00000,%edx
    7.14 :	   31de3:       09 c2                   or     %eax,%edx
    7.14 :	   31de5:       89 d0                   mov    %edx,%eax
    0.00 :	   31de7:       f7 d8                   neg    %eax
    7.14 :	   31de9:       09 d0                   or     %edx,%eax
    7.14 :	   31deb:       c1 f8 1f                sar    $0x1f,%eax
    0.00 :	   31dee:       f7 d0                   not    %eax
   21.43 :	   31df0:       21 c8                   and    %ecx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   30.77 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
   15.38 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:573
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:598
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:789
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:733
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:777
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1048
    7.69 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:710
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000675ca0 <ReadBuffer_common>:
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  675ca0:       55                      push   %rbp
    0.00 :	  675ca1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  675ca4:       41 57                   push   %r15
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:573
    7.69 :	  675ca6:       4d 89 cf                mov    %r9,%r15
    0.00 :	  675ca9:       41 56                   push   %r14
    0.00 :	  675cab:       41 55                   push   %r13
    0.00 :	  675cad:       41 54                   push   %r12
    0.00 :	  675caf:       53                      push   %rbx
    0.00 :	  675cb0:       48 83 ec 68             sub    $0x68,%rsp
    0.00 :	  675cb4:       48 89 7d 80             mov    %rdi,-0x80(%rbp)
    0.00 :	  675cb8:       89 95 78 ff ff ff       mov    %edx,-0x88(%rbp)
    0.00 :	  675cbe:       89 8d 74 ff ff ff       mov    %ecx,-0x8c(%rbp)
    0.00 :	  675cc4:       44 89 85 70 ff ff ff    mov    %r8d,-0x90(%rbp)
    0.00 :	  675ccb:       40 88 b5 7f ff ff ff    mov    %sil,-0x81(%rbp)
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cd2:       83 7f 0c ff             cmpl   $0xffffffff,0xc(%rdi)
         :
         :	        *hit = false;
    0.00 :	  675cd6:       48 8b 45 10             mov    0x10(%rbp),%rax
         :	{
         :	        volatile BufferDesc *bufHdr;
         :	        Block           bufBlock;
         :	        bool            found;
         :	        bool            isExtend;
         :	        bool            isLocalBuf = SmgrIsTemp(smgr);
    0.00 :	  675cda:       0f 95 45 8f             setne  -0x71(%rbp)
         :
         :	        *hit = false;
    0.00 :	  675cde:       c6 00 00                movb   $0x0,(%rax)
         :
         :	        /* Make sure we will have room to remember the buffer pin */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  675ce1:       48 8b 3d d8 4b 54 00    mov    0x544bd8(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  675ce8:       e8 83 51 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
         :
         :	        isExtend = (blockNum == P_NEW);
    0.00 :	  675ced:       83 bd 74 ff ff ff ff    cmpl   $0xffffffff,-0x8c(%rbp)
         :	                                                                           smgr->smgr_rnode.node.relNode,
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
    0.00 :	  675cf4:       0f 94 45 8e             sete   -0x72(%rbp)
    0.00 :	  675cf8:       0f 84 2f 05 00 00       je     67622d <ReadBuffer_common+0x58d>
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
    0.00 :	  675cfe:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:598
    7.69 :	  675d02:       74 7b                   je     675d7f <ReadBuffer_common+0xdf>
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d04:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d0a:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675d10:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  675d14:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675d18:       e8 c3 20 00 00          callq  677de0 <LocalBufferAlloc>
         :	                if (found)
    0.00 :	  675d1d:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
    0.00 :	  675d21:       49 89 c6                mov    %rax,%r14
         :	                if (found)
    0.00 :	  675d24:       0f 85 1b 04 00 00       jne    676145 <ReadBuffer_common+0x4a5>
         :	                        pgBufferUsage.local_blks_hit++;
         :	                else
         :	                        pgBufferUsage.local_blks_read++;
    0.00 :	  675d2a:       48 83 05 56 9a 54 00    addq   $0x1,0x549a56(%rip)        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  675d31:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675d32:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675d36:       0f 84 fa 00 00 00       je     675e36 <ReadBuffer_common+0x196>
         :	        {
         :	                if (!isExtend)
    0.00 :	  675d3c:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
    0.00 :	  675d40:       0f 85 01 05 00 00       jne    676247 <ReadBuffer_common+0x5a7>
         :	                {
         :	                        /* Just need to update stats before we exit */
         :	                        *hit = true;
    0.00 :	  675d46:       48 8b 45 10             mov    0x10(%rbp),%rax
    0.00 :	  675d4a:       c6 00 01                movb   $0x1,(%rax)
         :	                        VacuumPageHit++;
    0.00 :	  675d4d:       83 05 80 43 54 00 01    addl   $0x1,0x544380(%rip)        # bba0d4 <VacuumPageHit>
         :
         :	                        if (VacuumCostActive)
    0.00 :	  675d54:       80 3d 89 43 54 00 00    cmpb   $0x0,0x544389(%rip)        # bba0e4 <VacuumCostActive>
    0.00 :	  675d5b:       74 0c                   je     675d69 <ReadBuffer_common+0xc9>
         :	                                VacuumCostBalance += VacuumCostPageHit;
    0.00 :	  675d5d:       8b 05 c9 2d 4f 00       mov    0x4f2dc9(%rip),%eax        # b68b2c <VacuumCostPageHit>
    0.00 :	  675d63:       01 05 77 43 54 00       add    %eax,0x544377(%rip)        # bba0e0 <VacuumCostBalance>
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d69:       41 8b 46 24             mov    0x24(%r14),%eax
         :	}
    0.00 :	  675d6d:       48 83 c4 68             add    $0x68,%rsp
    0.00 :	  675d71:       5b                      pop    %rbx
    0.00 :	  675d72:       41 5c                   pop    %r12
    0.00 :	  675d74:       41 5d                   pop    %r13
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:789
    7.69 :	  675d76:       41 5e                   pop    %r14
         :	                                                                          smgr->smgr_rnode.node.relNode,
         :	                                                                          smgr->smgr_rnode.backend,
         :	                                                                          isExtend,
         :	                                                                          found);
         :
         :	        return BufferDescriptorGetBuffer(bufHdr);
    0.00 :	  675d78:       83 c0 01                add    $0x1,%eax
         :	}
    0.00 :	  675d7b:       41 5f                   pop    %r15
    0.00 :	  675d7d:       c9                      leaveq 
    0.00 :	  675d7e:       c3                      retq   
         :	        int                     buf_id;
         :	        volatile BufferDesc *buf;
         :	        bool            valid;
         :
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
    0.00 :	  675d7f:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  675d83:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  675d86:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  675d8a:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  675d8d:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  675d93:       89 45 b8                mov    %eax,-0x48(%rbp)
    0.00 :	  675d96:       8b 85 78 ff ff ff       mov    -0x88(%rbp),%eax
    0.00 :	  675d9c:       89 55 c0                mov    %edx,-0x40(%rbp)
    0.00 :	  675d9f:       89 45 bc                mov    %eax,-0x44(%rbp)
    0.00 :	  675da2:       eb 11                   jmp    675db5 <ReadBuffer_common+0x115>
    0.00 :	  675da4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                valid = PinBuffer(foundbuf, strategy);
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
    0.00 :	  675da8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675dad:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675db0:       e8 7b ef ff ff          callq  674d30 <UnpinBuffer>
         :	        /* create a tag so we can lookup the buffer */
         :	        INIT_BUFFERTAG(newTag, smgr->smgr_rnode.node, forkNum, blockNum);
         :
         :	        /* see if the block is in the buffer pool already */
         :	start:
         :	        buf_id = BufTableLookup(&newTag);
    0.00 :	  675db5:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675db9:       e8 22 e0 ff ff          callq  673de0 <BufTableLookup>
         :	        if (buf_id >= 0)
    0.00 :	  675dbe:       85 c0                   test   %eax,%eax
    0.00 :	  675dc0:       0f 88 bb 01 00 00       js     675f81 <ReadBuffer_common+0x2e1>
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dc6:       48 63 d8                movslq %eax,%rbx
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dc9:       4c 89 fe                mov    %r15,%rsi
         :
         :	                /*
         :	                 * Found it.  Now, pin the buffer so no one can steal it from the
         :	                 * buffer pool.
         :	                 */
         :	                foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675dcc:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675dd0:       48 03 1d 29 9d 54 00    add    0x549d29(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :
         :	                valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675dd7:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675dda:       49 89 dc                mov    %rbx,%r12
    0.00 :	  675ddd:       e8 4e ee ff ff          callq  674c30 <PinBuffer>
    0.00 :	  675de2:       89 c2                   mov    %eax,%edx
         :
         :	                /* Check whether someone recycled the buffer before we pinned it. */
         :	                if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  675de4:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  675de7:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  675dea:       75 bc                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dec:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  675def:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  675df2:       75 b4                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675df4:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  675df7:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  675df9:       75 ad                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675dfb:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  675dfe:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  675e01:       75 a5                   jne    675da8 <ReadBuffer_common+0x108>
    0.00 :	  675e03:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  675e06:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  675e09:       75 9d                   jne    675da8 <ReadBuffer_common+0x108>
         :	                }
         :
         :	                *foundPtr = TRUE;
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e0b:       84 d2                   test   %dl,%dl
         :	                {
         :	                        UnpinBuffer(foundbuf, true);
         :	                        goto start;
         :	                }
         :
         :	                *foundPtr = TRUE;
    0.00 :	  675e0d:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                /* Check to see if the correct data has been loaded into the buffer. */
         :	                if (!valid)
    0.00 :	  675e11:       0f 84 33 02 00 00       je     67604a <ReadBuffer_common+0x3aa>
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e17:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e1b:       4d 89 e6                mov    %r12,%r14
         :	                 * lookup the buffer.  IO_IN_PROGRESS is set if the requested block is
         :	                 * not currently in memory.
         :	                 */
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
    0.00 :	  675e1e:       0f 84 9a 03 00 00       je     6761be <ReadBuffer_common+0x51e>
         :	                        pgBufferUsage.shared_blks_hit++;
    0.00 :	  675e24:       48 83 05 34 99 54 00    addq   $0x1,0x549934(%rip)        # bbf760 <pgBufferUsage>
    0.00 :	  675e2b:       01 
         :	        }
         :
         :	        /* At this point we do NOT hold any locks. */
         :
         :	        /* if it was already in the buffer pool, we're done */
         :	        if (found)
    0.00 :	  675e2c:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
    0.00 :	  675e30:       0f 85 06 ff ff ff       jne    675d3c <ReadBuffer_common+0x9c>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e36:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675e3a:       0f 84 8b 03 00 00       je     6761cb <ReadBuffer_common+0x52b>
    0.00 :	  675e40:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  675e44:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  675e49:       29 c2                   sub    %eax,%edx
         :
         :	        if (isExtend)
    0.00 :	  675e4b:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  675e4f:       48 8b 05 c2 72 50 00    mov    0x5072c2(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  675e56:       48 63 d2                movslq %edx,%rdx
    0.00 :	  675e59:       4c 8b 24 d0             mov    (%rax,%rdx,8),%r12
         :
         :	        if (isExtend)
    0.00 :	  675e5d:       0f 85 84 03 00 00       jne    6761e7 <ReadBuffer_common+0x547>
         :	        {
         :	                /*
         :	                 * Read in the page, unless the caller intends to overwrite it and
         :	                 * just wants us to allocate a buffer.
         :	                 */
         :	                if (mode == RBM_ZERO)
    0.00 :	  675e63:       83 bd 70 ff ff ff 01    cmpl   $0x1,-0x90(%rbp)
    0.00 :	  675e6a:       74 7e                   je     675eea <ReadBuffer_common+0x24a>
         :	                else
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
    0.00 :	  675e6c:       80 3d ee 71 50 00 00    cmpb   $0x0,0x5071ee(%rip)        # b7d061 <track_io_timing>
    0.00 :	  675e73:       0f 85 d1 04 00 00       jne    67634a <ReadBuffer_common+0x6aa>
         :	                                INSTR_TIME_SET_CURRENT(io_start);
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
    0.00 :	  675e79:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:733
    7.69 :	  675e7f:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  675e85:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  675e88:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  675e8c:       e8 7f 35 02 00          callq  699410 <smgrread>
         :
         :	                        if (track_io_timing)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:735
   15.38 :	  675e91:       80 3d c9 71 50 00 00    cmpb   $0x0,0x5071c9(%rip)        # b7d061 <track_io_timing>
   30.77 :	  675e98:       0f 85 bc 04 00 00       jne    67635a <ReadBuffer_common+0x6ba>
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
         :	                        }
         :
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
    0.00 :	  675e9e:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  675ea4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ea7:       e8 24 f0 01 00          callq  694ed0 <PageIsVerified>
    0.00 :	  675eac:       84 c0                   test   %al,%al
    0.00 :	  675eae:       75 47                   jne    675ef7 <ReadBuffer_common+0x257>
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
    0.00 :	  675eb0:       83 bd 70 ff ff ff 02    cmpl   $0x2,-0x90(%rbp)
    0.00 :	  675eb7:       74 0d                   je     675ec6 <ReadBuffer_common+0x226>
    0.00 :	  675eb9:       80 3d a0 71 50 00 00    cmpb   $0x0,0x5071a0(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  675ec0:       0f 84 51 05 00 00       je     676417 <ReadBuffer_common+0x777>
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  675ec6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  675ec9:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  675ece:       ba f0 02 00 00          mov    $0x2f0,%edx
    0.00 :	  675ed3:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  675ed8:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  675edd:       e8 de 4b 10 00          callq  77aac0 <errstart>
    0.00 :	  675ee2:       84 c0                   test   %al,%al
    0.00 :	  675ee4:       0f 85 11 04 00 00       jne    6762fb <ReadBuffer_common+0x65b>
         :	                                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                                         errmsg("invalid page in block %u of relation %s; zeroing out page",
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  675eea:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  675eef:       31 c0                   xor    %eax,%eax
    0.00 :	  675ef1:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  675ef4:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  675ef7:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  675efb:       0f 84 18 03 00 00       je     676219 <ReadBuffer_common+0x579>
         :	        {
         :	                /* Only need to adjust flags */
         :	                bufHdr->flags |= BM_VALID;
    0.00 :	  675f01:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  675f06:       83 c8 02                or     $0x2,%eax
    0.00 :	  675f09:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
         :	        }
         :
         :	        VacuumPageMiss++;
    0.00 :	  675f0e:       83 05 c3 41 54 00 01    addl   $0x1,0x5441c3(%rip)        # bba0d8 <VacuumPageMiss>
         :	        if (VacuumCostActive)
    0.00 :	  675f15:       80 3d c8 41 54 00 00    cmpb   $0x0,0x5441c8(%rip)        # bba0e4 <VacuumCostActive>
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:777
    7.69 :	  675f1c:       0f 84 47 fe ff ff       je     675d69 <ReadBuffer_common+0xc9>
         :	                VacuumCostBalance += VacuumCostPageMiss;
    0.00 :	  675f22:       8b 05 08 2c 4f 00       mov    0x4f2c08(%rip),%eax        # b68b30 <VacuumCostPageMiss>
    0.00 :	  675f28:       01 05 b2 41 54 00       add    %eax,0x5441b2(%rip)        # bba0e0 <VacuumCostBalance>
    0.00 :	  675f2e:       e9 36 fe ff ff          jmpq   675d69 <ReadBuffer_common+0xc9>
    0.00 :	  675f33:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  675f38:       49 8d 5e 20             lea    0x20(%r14),%rbx
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  675f3c:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  675f41:       f0 86 03                lock xchg %al,(%rbx)
    0.00 :	  675f44:       84 c0                   test   %al,%al
    0.00 :	  675f46:       0f 85 a4 01 00 00       jne    6760f0 <ReadBuffer_common+0x450>
         :	                 * Somebody could have pinned or re-dirtied the buffer while we were
         :	                 * doing the I/O and making the new hashtable entry.  If so, we can't
         :	                 * recycle this buffer; we must undo everything we've done and start
         :	                 * over with a new victim buffer.
         :	                 */
         :	                oldFlags = buf->flags;
    0.00 :	  675f4c:       41 0f b7 56 14          movzwl 0x14(%r14),%edx
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
    0.00 :	  675f51:       41 8b 46 18             mov    0x18(%r14),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1048
    7.69 :	  675f55:       83 e8 01                sub    $0x1,%eax
    0.00 :	  675f58:       75 0c                   jne    675f66 <ReadBuffer_common+0x2c6>
    0.00 :	  675f5a:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  675f5d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675f60:       0f 84 ec 01 00 00       je     676152 <ReadBuffer_common+0x4b2>
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
         :	                BufTableDelete(&newTag);
    0.00 :	  675f66:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
         :	                 */
         :	                oldFlags = buf->flags;
         :	                if (buf->refcount == 1 && !(oldFlags & BM_DIRTY))
         :	                        break;
         :
         :	                UnlockBufHdr(buf);
    0.00 :	  675f6a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                BufTableDelete(&newTag);
    0.00 :	  675f6f:       e8 dc dd ff ff          callq  673d50 <BufTableDelete>
         :	                UnpinBuffer(buf, true);
    0.00 :	  675f74:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675f79:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  675f7c:       e8 af ed ff ff          callq  674d30 <UnpinBuffer>
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f81:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  675f84:       e8 d7 15 00 00          callq  677560 <StrategyGetBuffer>
         :
         :	                Assert(buf->refcount == 0);
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
    0.00 :	  675f89:       0f b7 58 14             movzwl 0x14(%rax),%ebx
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f8d:       48 89 c7                mov    %rax,%rdi
         :	        {
         :	                /*
         :	                 * Select a victim buffer.  The buffer is returned with its header
         :	                 * spinlock still held!
         :	                 */
         :	                buf = StrategyGetBuffer(strategy);
    0.00 :	  675f90:       49 89 c6                mov    %rax,%r14
         :
         :	                /* Must copy buffer flags while we still hold the spinlock */
         :	                oldFlags = buf->flags;
         :
         :	                /* Pin the buffer and then release the buffer spinlock */
         :	                PinBuffer_Locked(buf);
    0.00 :	  675f93:       e8 38 ec ff ff          callq  674bd0 <PinBuffer_Locked>
         :	                 * condition here, in that someone might dirty it after we released it
         :	                 * above, or even while we are writing it out (since our share-lock
         :	                 * won't prevent hint-bit updates).  We will recheck the dirty bit
         :	                 * after re-locking the buffer header.
         :	                 */
         :	                if (oldFlags & BM_DIRTY)
    0.00 :	  675f98:       0f b7 db                movzwl %bx,%ebx
    0.00 :	  675f9b:       f6 c3 01                test   $0x1,%bl
    0.00 :	  675f9e:       0f 85 cc 00 00 00       jne    676070 <ReadBuffer_common+0x3d0>
         :
         :	                /*
         :	                 * To change the association of a valid buffer, we'll need to have
         :	                 * exclusive lock on both the old and new mapping partitions.
         :	                 */
         :	                if (oldFlags & BM_TAG_VALID)
    0.00 :	  675fa4:       83 e3 04                and    $0x4,%ebx
    0.00 :	  675fa7:       74 2c                   je     675fd5 <ReadBuffer_common+0x335>
         :	                {
         :	                        /* Save old tag. */
         :	                        oldTag = buf->tag;
    0.00 :	  675fa9:       49 8b 06                mov    (%r14),%rax
    0.00 :	  675fac:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  675fb0:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  675fb4:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	  675fb8:       41 8b 46 10             mov    0x10(%r14),%eax
    0.00 :	  675fbc:       89 45 a0                mov    %eax,-0x60(%rbp)
    0.00 :	  675fbf:       eb 14                   jmp    675fd5 <ReadBuffer_common+0x335>
    0.00 :	  675fc1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
         :	                        valid = PinBuffer(foundbuf, strategy);
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
         :	                        {
         :	                                UnpinBuffer(foundbuf, true);
    0.00 :	  675fc8:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  675fcd:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675fd0:       e8 5b ed ff ff          callq  674d30 <UnpinBuffer>
         :	                 * allocated another buffer for the same block we want to read in.
         :	                 * Note that we have not yet removed the hashtable entry for the old
         :	                 * tag.
         :	                 */
         :	enter:
         :	                buf_id = BufTableInsert(&newTag, buf->buf_id);
    0.00 :	  675fd5:       41 8b 76 24             mov    0x24(%r14),%esi
    0.00 :	  675fd9:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  675fdd:       e8 be dd ff ff          callq  673da0 <BufTableInsert>
         :
         :	                if (buf_id >= 0)
    0.00 :	  675fe2:       85 c0                   test   %eax,%eax
    0.00 :	  675fe4:       0f 88 4e ff ff ff       js     675f38 <ReadBuffer_common+0x298>
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675fea:       48 63 d8                movslq %eax,%rbx
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675fed:       4c 89 fe                mov    %r15,%rsi
         :	                         * did what we were about to do.  We can handle this as if we had
         :	                         * found the buffer in the pool in the first place, but we must
         :	                         * recheck the buffer tag after pinning it, because it could still
         :	                         * get renamed under us.
         :	                         */
         :	                        foundbuf = &BufferDescriptors[buf_id];
    0.00 :	  675ff0:       48 c1 e3 06             shl    $0x6,%rbx
    0.00 :	  675ff4:       48 03 1d 05 9b 54 00    add    0x549b05(%rip),%rbx        # bbfb00 <BufferDescriptors>
         :	                        valid = PinBuffer(foundbuf, strategy);
    0.00 :	  675ffb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  675ffe:       49 89 dc                mov    %rbx,%r12
    0.00 :	  676001:       e8 2a ec ff ff          callq  674c30 <PinBuffer>
    0.00 :	  676006:       41 89 c5                mov    %eax,%r13d
         :	                        if (!BUFFERTAGS_EQUAL(newTag, foundbuf->tag))
    0.00 :	  676009:       8b 45 b8                mov    -0x48(%rbp),%eax
    0.00 :	  67600c:       3b 43 08                cmp    0x8(%rbx),%eax
    0.00 :	  67600f:       75 b7                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676011:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  676014:       3b 43 04                cmp    0x4(%rbx),%eax
    0.00 :	  676017:       75 af                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676019:       8b 45 b0                mov    -0x50(%rbp),%eax
    0.00 :	  67601c:       3b 03                   cmp    (%rbx),%eax
    0.00 :	  67601e:       75 a8                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676020:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676023:       3b 43 10                cmp    0x10(%rbx),%eax
    0.00 :	  676026:       75 a0                   jne    675fc8 <ReadBuffer_common+0x328>
    0.00 :	  676028:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  67602b:       3b 43 0c                cmp    0xc(%rbx),%eax
    0.00 :	  67602e:       75 98                   jne    675fc8 <ReadBuffer_common+0x328>
         :
         :	                        /*
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
    0.00 :	  676030:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676035:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676038:       e8 f3 ec ff ff          callq  674d30 <UnpinBuffer>
         :
         :	                        *foundPtr = TRUE;
         :
         :	                        if (!valid)
    0.00 :	  67603d:       45 84 ed                test   %r13b,%r13b
         :	                         * Collision confirmed.  Give up the buffer we were planning to
         :	                         * use.
         :	                         */
         :	                        UnpinBuffer(buf, true);
         :
         :	                        *foundPtr = TRUE;
    0.00 :	  676040:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
         :
         :	                        if (!valid)
    0.00 :	  676044:       0f 85 cd fd ff ff       jne    675e17 <ReadBuffer_common+0x177>
         :	                                 * in the page, or (b) a previous read attempt failed.  We
         :	                                 * have to wait for any active read attempt to finish, and
         :	                                 * then set up our own read attempt if the page is still not
         :	                                 * BM_VALID.  StartBufferIO does it all.
         :	                                 */
         :	                                if (StartBufferIO(foundbuf, true))
    0.00 :	  67604a:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67604f:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  676052:       e8 e9 e3 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  676057:       84 c0                   test   %al,%al
    0.00 :	  676059:       0f 84 b8 fd ff ff       je     675e17 <ReadBuffer_common+0x177>
         :	                                {
         :	                                        /*
         :	                                         * If we get here, previous attempts to read the buffer
         :	                                         * must have failed ... but we shall bravely try again.
         :	                                         */
         :	                                        *foundPtr = FALSE;
    0.00 :	  67605f:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
    0.00 :	  676063:       e9 af fd ff ff          jmpq   675e17 <ReadBuffer_common+0x177>
    0.00 :	  676068:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  67606f:       00 
         :	                         * (This has been observed to happen when two backends are both
         :	                         * trying to split btree index pages, and the second one just
         :	                         * happens to be trying to split the page the first one got from
         :	                         * StrategyGetBuffer.)
         :	                         */
         :	                        if (LWLockConditionalAcquire(buf->content_lock, LW_SHARED))
    0.00 :	  676070:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  676074:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676079:       e8 22 8f 01 00          callq  68efa0 <LWLockConditionalAcquire>
    0.00 :	  67607e:       84 c0                   test   %al,%al
    0.00 :	  676080:       0f 84 ee fe ff ff       je     675f74 <ReadBuffer_common+0x2d4>
         :	                                 * would require a WAL flush, let the strategy decide whether
         :	                                 * to go ahead and write/reuse the buffer or to choose another
         :	                                 * victim.  We need lock to inspect the page LSN, so this
         :	                                 * can't be done inside StrategyGetBuffer.
         :	                                 */
         :	                                if (strategy != NULL)
    0.00 :	  676086:       4d 85 ff                test   %r15,%r15
    0.00 :	  676089:       74 4c                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  67608b:       49 8d 7e 20             lea    0x20(%r14),%rdi
    0.00 :	  67608f:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  676094:       f0 86 07                lock xchg %al,(%rdi)
    0.00 :	  676097:       84 c0                   test   %al,%al
    0.00 :	  676099:       0f 85 92 00 00 00       jne    676131 <ReadBuffer_common+0x491>
         :	                                        lsn = BufferGetLSN(buf);
    0.00 :	  67609f:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6760a3:       41 8b 56 24             mov    0x24(%r14),%edx
    0.00 :	  6760a7:       48 8b 0d 4a 9a 54 00    mov    0x549a4a(%rip),%rcx        # bbfaf8 <BufferBlocks>
    0.00 :	  6760ae:       48 98                   cltq   
    0.00 :	  6760b0:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6760b3:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  6760b7:       48 c1 e2 0d             shl    $0xd,%rdx
    0.00 :	  6760bb:       8b 3c 01                mov    (%rcx,%rax,1),%edi
    0.00 :	  6760be:       8b 44 11 04             mov    0x4(%rcx,%rdx,1),%eax
    0.00 :	  6760c2:       48 c1 e7 20             shl    $0x20,%rdi
    0.00 :	  6760c6:       48 09 c7                or     %rax,%rdi
         :	                                        UnlockBufHdr(buf);
    0.00 :	  6760c9:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  6760ce:       e8 dd dc e5 ff          callq  4d3db0 <XLogNeedsFlush>
    0.00 :	  6760d3:       84 c0                   test   %al,%al
    0.00 :	  6760d5:       75 30                   jne    676107 <ReadBuffer_common+0x467>
         :	                                TRACE_POSTGRESQL_BUFFER_WRITE_DIRTY_START(forkNum, blockNum,
         :	                                                                                           smgr->smgr_rnode.node.spcNode,
         :	                                                                                                smgr->smgr_rnode.node.dbNode,
         :	                                                                                          smgr->smgr_rnode.node.relNode);
         :
         :	                                FlushBuffer(buf, NULL);
    0.00 :	  6760d7:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6760da:       31 f6                   xor    %esi,%esi
    0.00 :	  6760dc:       e8 6f ee ff ff          callq  674f50 <FlushBuffer>
         :	                                LWLockRelease(buf->content_lock);
    0.00 :	  6760e1:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  6760e5:       e8 b6 92 01 00          callq  68f3a0 <LWLockRelease>
    0.00 :	  6760ea:       e9 b5 fe ff ff          jmpq   675fa4 <ReadBuffer_common+0x304>
    0.00 :	  6760ef:       90                      nop
         :	                }
         :
         :	                /*
         :	                 * Need to lock the buffer header too in order to change its tag.
         :	                 */
         :	                LockBufHdr(buf);
    0.00 :	  6760f0:       ba 0f 04 00 00          mov    $0x40f,%edx
    0.00 :	  6760f5:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6760fa:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6760fd:       e8 3e 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676102:       e9 45 fe ff ff          jmpq   675f4c <ReadBuffer_common+0x2ac>
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
         :	                                        lsn = BufferGetLSN(buf);
         :	                                        UnlockBufHdr(buf);
         :
         :	                                        if (XLogNeedsFlush(lsn) &&
    0.00 :	  676107:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  67610a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  67610d:       e8 0e 11 00 00          callq  677220 <StrategyRejectBuffer>
    0.00 :	  676112:       84 c0                   test   %al,%al
    0.00 :	  676114:       74 c1                   je     6760d7 <ReadBuffer_common+0x437>
         :	                                                StrategyRejectBuffer(strategy, buf))
         :	                                        {
         :	                                                /* Drop lock/pin and loop around for another buffer */
         :	                                                LWLockRelease(buf->content_lock);
    0.00 :	  676116:       49 8b 7e 38             mov    0x38(%r14),%rdi
    0.00 :	  67611a:       e8 81 92 01 00          callq  68f3a0 <LWLockRelease>
         :	                                                UnpinBuffer(buf, true);
    0.00 :	  67611f:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676124:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676127:       e8 04 ec ff ff          callq  674d30 <UnpinBuffer>
    0.00 :	  67612c:       e9 50 fe ff ff          jmpq   675f81 <ReadBuffer_common+0x2e1>
         :	                                if (strategy != NULL)
         :	                                {
         :	                                        XLogRecPtr      lsn;
         :
         :	                                        /* Read the LSN while holding buffer header lock */
         :	                                        LockBufHdr(buf);
    0.00 :	  676131:       ba a0 03 00 00          mov    $0x3a0,%edx
    0.00 :	  676136:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67613b:       e8 00 9f 01 00          callq  690040 <s_lock>
    0.00 :	  676140:       e9 5a ff ff ff          jmpq   67609f <ReadBuffer_common+0x3ff>
         :
         :	        if (isLocalBuf)
         :	        {
         :	                bufHdr = LocalBufferAlloc(smgr, forkNum, blockNum, &found);
         :	                if (found)
         :	                        pgBufferUsage.local_blks_hit++;
    0.00 :	  676145:       48 83 05 33 96 54 00    addq   $0x1,0x549633(%rip)        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  67614c:       01 
    0.00 :	  67614d:       e9 e0 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * Clearing BM_VALID here is necessary, clearing the dirtybits is just
         :	         * paranoia.  We also reset the usage_count since any recency of use of
         :	         * the old content is no longer relevant.  (The usage_count starts out at
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
    0.00 :	  676152:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676156:       49 89 06                mov    %rax,(%r14)
    0.00 :	  676159:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  67615d:       49 89 46 08             mov    %rax,0x8(%r14)
    0.00 :	  676161:       8b 45 c0                mov    -0x40(%rbp),%eax
    0.00 :	  676164:       41 89 46 10             mov    %eax,0x10(%r14)
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
    0.00 :	  676168:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  67616d:       66 25 4c fe             and    $0xfe4c,%ax
    0.00 :	  676171:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
    0.00 :	  676176:       80 bd 7f ff ff ff 70    cmpb   $0x70,-0x81(%rbp)
    0.00 :	  67617d:       0f 84 73 02 00 00       je     6763f6 <ReadBuffer_common+0x756>
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
    0.00 :	  676183:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676188:       83 c8 04                or     $0x4,%eax
    0.00 :	  67618b:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	        buf->usage_count = 1;
    0.00 :	  676190:       66 41 c7 46 16 01 00    movw   $0x1,0x16(%r14)
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  676197:       83 e2 04                and    $0x4,%edx
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
         :	        else
         :	                buf->flags |= BM_TAG_VALID;
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67619a:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :
         :	        if (oldFlags & BM_TAG_VALID)
    0.00 :	  67619f:       0f 85 64 02 00 00       jne    676409 <ReadBuffer_common+0x769>
         :	        /*
         :	         * Buffer contents are currently invalid.  Try to get the io_in_progress
         :	         * lock.  If StartBufferIO returns false, then someone else managed to
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
    0.00 :	  6761a5:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  6761aa:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6761ad:       e8 8e e2 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6761b2:       84 c0                   test   %al,%al
    0.00 :	  6761b4:       0f 84 d5 00 00 00       je     67628f <ReadBuffer_common+0x5ef>
         :	                *foundPtr = FALSE;
    0.00 :	  6761ba:       c6 45 cf 00             movb   $0x0,-0x31(%rbp)
         :	                bufHdr = BufferAlloc(smgr, relpersistence, forkNum, blockNum,
         :	                                                         strategy, &found);
         :	                if (found)
         :	                        pgBufferUsage.shared_blks_hit++;
         :	                else
         :	                        pgBufferUsage.shared_blks_read++;
    0.00 :	  6761be:       48 83 05 a2 95 54 00    addq   $0x1,0x5495a2(%rip)        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  6761c5:       01 
    0.00 :	  6761c6:       e9 67 fb ff ff          jmpq   675d32 <ReadBuffer_common+0x92>
         :	         * it's not been recycled) but come right back here to try smgrextend
         :	         * again.
         :	         */
         :	        Assert(!(bufHdr->flags & BM_VALID));            /* spinlock not needed */
         :
         :	        bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6761cb:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6761cf:       4c 63 e0                movslq %eax,%r12
    0.00 :	  6761d2:       49 c1 e4 0d             shl    $0xd,%r12
    0.00 :	  6761d6:       4c 03 25 1b 99 54 00    add    0x54991b(%rip),%r12        # bbfaf8 <BufferBlocks>
         :
         :	        if (isExtend)
    0.00 :	  6761dd:       80 7d 8e 00             cmpb   $0x0,-0x72(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:710
    7.69 :	  6761e1:       0f 84 7c fc ff ff       je     675e63 <ReadBuffer_common+0x1c3>
         :	        {
         :	                /* new buffers are zero-filled */
         :	                MemSet((char *) bufBlock, 0, BLCKSZ);
    0.00 :	  6761e7:       31 c0                   xor    %eax,%eax
    0.00 :	  6761e9:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  6761ee:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6761f1:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                /* don't set checksum for all-zero page */
         :	                smgrextend(smgr, forkNum, blockNum, (char *) bufBlock, false);
    0.00 :	  6761f4:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6761f7:       4c 89 e1                mov    %r12,%rcx
    0.00 :	  6761fa:       8b 95 74 ff ff ff       mov    -0x8c(%rbp),%edx
    0.00 :	  676200:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676206:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  67620a:       e8 c1 31 02 00          callq  6993d0 <smgrextend>
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                        }
         :	                }
         :	        }
         :
         :	        if (isLocalBuf)
    0.00 :	  67620f:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676213:       0f 85 e8 fc ff ff       jne    675f01 <ReadBuffer_common+0x261>
         :	                bufHdr->flags |= BM_VALID;
         :	        }
         :	        else
         :	        {
         :	                /* Set BM_VALID, terminate IO, and wake up any waiters */
         :	                TerminateBufferIO(bufHdr, false, BM_VALID);
    0.00 :	  676219:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  67621e:       31 f6                   xor    %esi,%esi
    0.00 :	  676220:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  676223:       e8 a8 df ff ff          callq  6741d0 <TerminateBufferIO>
    0.00 :	  676228:       e9 e1 fc ff ff          jmpq   675f0e <ReadBuffer_common+0x26e>
         :	                                                                           smgr->smgr_rnode.backend,
         :	                                                                           isExtend);
         :
         :	        /* Substitute proper block number if caller asked for P_NEW */
         :	        if (isExtend)
         :	                blockNum = smgrnblocks(smgr, forkNum);
    0.00 :	  67622d:       8b b5 78 ff ff ff       mov    -0x88(%rbp),%esi
    0.00 :	  676233:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  676237:       e8 14 32 02 00          callq  699450 <smgrnblocks>
    0.00 :	  67623c:       89 85 74 ff ff ff       mov    %eax,-0x8c(%rbp)
    0.00 :	  676242:       e9 b7 fa ff ff          jmpq   675cfe <ReadBuffer_common+0x5e>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  676247:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  67624b:       0f 85 8c 00 00 00       jne    6762dd <ReadBuffer_common+0x63d>
    0.00 :	  676251:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  676255:       48 98                   cltq   
    0.00 :	  676257:       48 c1 e0 0d             shl    $0xd,%rax
    0.00 :	  67625b:       48 03 05 96 98 54 00    add    0x549896(%rip),%rax        # bbfaf8 <BufferBlocks>
         :	                if (!PageIsNew((Page) bufBlock))
    0.00 :	  676262:       66 83 78 0e 00          cmpw   $0x0,0xe(%rax)
    0.00 :	  676267:       0f 85 19 02 00 00       jne    676486 <ReadBuffer_common+0x7e6>
         :	                 * We *must* do smgrextend before succeeding, else the page will not
         :	                 * be reserved by the kernel, and the next P_NEW call will decide to
         :	                 * return the same page.  Clear the BM_VALID bit, do the StartBufferIO
         :	                 * call that BufferAlloc didn't, and proceed.
         :	                 */
         :	                if (isLocalBuf)
    0.00 :	  67626d:       80 7d 8f 00             cmpb   $0x0,-0x71(%rbp)
    0.00 :	  676271:       49 8d 5e 20             lea    0x20(%r14),%rbx
    0.00 :	  676275:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  67627b:       74 54                   je     6762d1 <ReadBuffer_common+0x631>
         :	                {
         :	                        /* Only need to adjust flags */
         :	                        Assert(bufHdr->flags & BM_VALID);
         :	                        bufHdr->flags &= ~BM_VALID;
    0.00 :	  67627d:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  676282:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  676285:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  67628a:       e9 b1 fb ff ff          jmpq   675e40 <ReadBuffer_common+0x1a0>
         :	         * read it before we did, so there's nothing left for BufferAlloc() to do.
         :	         */
         :	        if (StartBufferIO(buf, true))
         :	                *foundPtr = FALSE;
         :	        else
         :	                *foundPtr = TRUE;
    0.00 :	  67628f:       c6 45 cf 01             movb   $0x1,-0x31(%rbp)
    0.00 :	  676293:       e9 8c fb ff ff          jmpq   675e24 <ReadBuffer_common+0x184>
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  676298:       ba ae 02 00 00          mov    $0x2ae,%edx
    0.00 :	  67629d:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  6762a2:       48 89 df                mov    %rbx,%rdi
    0.00 :	  6762a5:       e8 96 9d 01 00          callq  690040 <s_lock>
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
    0.00 :	  6762aa:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6762af:       83 e0 fd                and    $0xfffffffd,%eax
    0.00 :	  6762b2:       66 41 89 46 14          mov    %ax,0x14(%r14)
         :	                                UnlockBufHdr(bufHdr);
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762b7:       be 01 00 00 00          mov    $0x1,%esi
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
         :	                                Assert(bufHdr->flags & BM_VALID);
         :	                                bufHdr->flags &= ~BM_VALID;
         :	                                UnlockBufHdr(bufHdr);
    0.00 :	  6762bc:       41 c6 46 20 00          movb   $0x0,0x20(%r14)
         :	                        } while (!StartBufferIO(bufHdr, true));
    0.00 :	  6762c1:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  6762c4:       e8 77 e1 ff ff          callq  674440 <StartBufferIO>
    0.00 :	  6762c9:       84 c0                   test   %al,%al
    0.00 :	  6762cb:       0f 85 fa fe ff ff       jne    6761cb <ReadBuffer_common+0x52b>
    0.00 :	  6762d1:       44 89 e0                mov    %r12d,%eax
    0.00 :	  6762d4:       f0 86 03                lock xchg %al,(%rbx)
         :	                         * BM_VALID between our clearing it and StartBufferIO inspecting
         :	                         * it.
         :	                         */
         :	                        do
         :	                        {
         :	                                LockBufHdr(bufHdr);
    0.00 :	  6762d7:       84 c0                   test   %al,%al
    0.00 :	  6762d9:       74 cf                   je     6762aa <ReadBuffer_common+0x60a>
    0.00 :	  6762db:       eb bb                   jmp    676298 <ReadBuffer_common+0x5f8>
         :	                 * lseek(SEEK_END) result that doesn't account for a recent write. In
         :	                 * that situation, the pre-existing buffer would contain valid data
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
    0.00 :	  6762dd:       41 8b 46 24             mov    0x24(%r14),%eax
    0.00 :	  6762e1:       ba fe ff ff ff          mov    $0xfffffffe,%edx
    0.00 :	  6762e6:       29 c2                   sub    %eax,%edx
    0.00 :	  6762e8:       48 8b 05 29 6e 50 00    mov    0x506e29(%rip),%rax        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  6762ef:       48 63 d2                movslq %edx,%rdx
    0.00 :	  6762f2:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  6762f6:       e9 67 ff ff ff          jmpq   676262 <ReadBuffer_common+0x5c2>
         :	                        /* check for garbage data */
         :	                        if (!PageIsVerified((Page) bufBlock, blockNum))
         :	                        {
         :	                                if (mode == RBM_ZERO_ON_ERROR || zero_damaged_pages)
         :	                                {
         :	                                        ereport(WARNING,
    0.00 :	  6762fb:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6762ff:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676306:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676309:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  67630c:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67630f:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  676312:       8b 30                   mov    (%rax),%esi
    0.00 :	  676314:       e8 b7 82 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676319:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67631f:       48 89 c2                mov    %rax,%rdx
    0.00 :	  676322:       bf c8 9e 8a 00          mov    $0x8a9ec8,%edi
    0.00 :	  676327:       31 c0                   xor    %eax,%eax
    0.00 :	  676329:       e8 72 65 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67632e:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  676333:       89 c3                   mov    %eax,%ebx
    0.00 :	  676335:       e8 16 6a 10 00          callq  77cd50 <errcode>
    0.00 :	  67633a:       89 de                   mov    %ebx,%esi
    0.00 :	  67633c:       89 c7                   mov    %eax,%edi
    0.00 :	  67633e:       31 c0                   xor    %eax,%eax
    0.00 :	  676340:       e8 9b 42 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676345:       e9 a0 fb ff ff          jmpq   675eea <ReadBuffer_common+0x24a>
         :	                {
         :	                        instr_time      io_start,
         :	                                                io_time;
         :
         :	                        if (track_io_timing)
         :	                                INSTR_TIME_SET_CURRENT(io_start);
    0.00 :	  67634a:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67634e:       31 f6                   xor    %esi,%esi
    0.00 :	  676350:       e8 6b 32 df ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  676355:       e9 1f fb ff ff          jmpq   675e79 <ReadBuffer_common+0x1d9>
         :
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
    0.00 :	  67635a:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  67635e:       31 f6                   xor    %esi,%esi
    0.00 :	  676360:       e8 5b 32 df ff          callq  4695c0 <gettimeofday@plt>
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676365:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  676369:       48 2b 55 98             sub    -0x68(%rbp),%rdx
    0.00 :	  67636d:       48 8b 45 b0             mov    -0x50(%rbp),%rax
    0.00 :	  676371:       48 2b 45 90             sub    -0x70(%rbp),%rax
    0.00 :	  676375:       48 85 d2                test   %rdx,%rdx
    0.00 :	  676378:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67637c:       48 89 c1                mov    %rax,%rcx
    0.00 :	  67637f:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676383:       79 18                   jns    67639d <ReadBuffer_common+0x6fd>
         :	 */
         :	static Buffer
         :	ReadBuffer_common(SMgrRelation smgr, char relpersistence, ForkNumber forkNum,
         :	                                  BlockNumber blockNum, ReadBufferMode mode,
         :	                                  BufferAccessStrategy strategy, bool *hit)
         :	{
    0.00 :	  676385:       48 83 e8 01             sub    $0x1,%rax
         :	                        smgrread(smgr, forkNum, blockNum, (char *) bufBlock);
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
    0.00 :	  676389:       48 81 c2 40 42 0f 00    add    $0xf4240,%rdx
    0.00 :	  676390:       78 f3                   js     676385 <ReadBuffer_common+0x6e5>
    0.00 :	  676392:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	  676396:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  67639a:       48 89 c1                mov    %rax,%rcx
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  67639d:       48 69 c1 40 42 0f 00    imul   $0xf4240,%rcx,%rax
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763a4:       48 01 0d 05 94 54 00    add    %rcx,0x549405(%rip)        # bbf7b0 <pgBufferUsage+0x50>
         :
         :	                        if (track_io_timing)
         :	                        {
         :	                                INSTR_TIME_SET_CURRENT(io_time);
         :	                                INSTR_TIME_SUBTRACT(io_time, io_start);
         :	                                pgstat_count_buffer_read_time(INSTR_TIME_GET_MICROSEC(io_time));
    0.00 :	  6763ab:       48 8d 04 02             lea    (%rdx,%rax,1),%rax
    0.00 :	  6763af:       48 01 05 0a 58 50 00    add    %rax,0x50580a(%rip)        # b7bbc0 <pgStatBlockReadTime>
         :	                                INSTR_TIME_ADD(pgBufferUsage.blk_read_time, io_time);
    0.00 :	  6763b6:       48 8b 05 fb 93 54 00    mov    0x5493fb(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763bd:       48 03 45 b8             add    -0x48(%rbp),%rax
    0.00 :	  6763c1:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763c7:       48 89 05 ea 93 54 00    mov    %rax,0x5493ea(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ce:       0f 8e ca fa ff ff       jle    675e9e <ReadBuffer_common+0x1fe>
    0.00 :	  6763d4:       48 2d 40 42 0f 00       sub    $0xf4240,%rax
    0.00 :	  6763da:       48 83 05 ce 93 54 00    addq   $0x1,0x5493ce(%rip)        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  6763e1:       01 
    0.00 :	  6763e2:       48 3d 3f 42 0f 00       cmp    $0xf423f,%rax
    0.00 :	  6763e8:       48 89 05 c9 93 54 00    mov    %rax,0x5493c9(%rip)        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  6763ef:       7f e3                   jg     6763d4 <ReadBuffer_common+0x734>
    0.00 :	  6763f1:       e9 a8 fa ff ff          jmpq   675e9e <ReadBuffer_common+0x1fe>
         :	         * 1 so that the buffer can survive one clock-sweep pass.)
         :	         */
         :	        buf->tag = newTag;
         :	        buf->flags &= ~(BM_VALID | BM_DIRTY | BM_JUST_DIRTIED | BM_CHECKPOINT_NEEDED | BM_IO_ERROR | BM_PERMANENT);
         :	        if (relpersistence == RELPERSISTENCE_PERMANENT)
         :	                buf->flags |= BM_TAG_VALID | BM_PERMANENT;
    0.00 :	  6763f6:       41 0f b7 46 14          movzwl 0x14(%r14),%eax
    0.00 :	  6763fb:       66 0d 04 01             or     $0x104,%ax
    0.00 :	  6763ff:       66 41 89 46 14          mov    %ax,0x14(%r14)
    0.00 :	  676404:       e9 87 fd ff ff          jmpq   676190 <ReadBuffer_common+0x4f0>
         :	        buf->usage_count = 1;
         :
         :	        UnlockBufHdr(buf);
         :
         :	        if (oldFlags & BM_TAG_VALID)
         :	                BufTableDelete(&oldTag);
    0.00 :	  676409:       48 8d 7d 90             lea    -0x70(%rbp),%rdi
    0.00 :	  67640d:       e8 3e d9 ff ff          callq  673d50 <BufTableDelete>
    0.00 :	  676412:       e9 8e fd ff ff          jmpq   6761a5 <ReadBuffer_common+0x505>
         :	                                                                        blockNum,
         :	                                                                        relpath(smgr->smgr_rnode, forkNum))));
         :	                                        MemSet((char *) bufBlock, 0, BLCKSZ);
         :	                                }
         :	                                else
         :	                                        ereport(ERROR,
    0.00 :	  676417:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  67641a:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67641f:       ba f8 02 00 00          mov    $0x2f8,%edx
    0.00 :	  676424:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676429:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67642e:       e8 8d 46 10 00          callq  77aac0 <errstart>
    0.00 :	  676433:       84 c0                   test   %al,%al
    0.00 :	  676435:       74 4a                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  676437:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  67643b:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  676442:       48 89 d0                mov    %rdx,%rax
    0.00 :	  676445:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  676448:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  67644b:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  67644e:       8b 30                   mov    (%rax),%esi
    0.00 :	  676450:       e8 7b 81 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  676455:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  67645b:       48 89 c2                mov    %rax,%rdx
    0.00 :	  67645e:       bf 48 28 88 00          mov    $0x882848,%edi
    0.00 :	  676463:       31 c0                   xor    %eax,%eax
    0.00 :	  676465:       e8 36 64 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67646a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  67646f:       89 c3                   mov    %eax,%ebx
    0.00 :	  676471:       e8 da 68 10 00          callq  77cd50 <errcode>
    0.00 :	  676476:       89 de                   mov    %ebx,%esi
    0.00 :	  676478:       89 c7                   mov    %eax,%edi
    0.00 :	  67647a:       31 c0                   xor    %eax,%eax
    0.00 :	  67647c:       e8 5f 41 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676481:       e8 4a 30 df ff          callq  4694d0 <abort@plt>
         :	                 * that we don't want to overwrite.  Since the legitimate case should
         :	                 * always have left a zero-filled buffer, complain if not PageIsNew.
         :	                 */
         :	                bufBlock = isLocalBuf ? LocalBufHdrGetBlock(bufHdr) : BufHdrGetBlock(bufHdr);
         :	                if (!PageIsNew((Page) bufBlock))
         :	                        ereport(ERROR,
    0.00 :	  676486:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676489:       b9 a0 a0 8a 00          mov    $0x8aa0a0,%ecx
    0.00 :	  67648e:       ba 97 02 00 00          mov    $0x297,%edx
    0.00 :	  676493:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676498:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67649d:       e8 1e 46 10 00          callq  77aac0 <errstart>
    0.00 :	  6764a2:       84 c0                   test   %al,%al
    0.00 :	  6764a4:       74 db                   je     676481 <ReadBuffer_common+0x7e1>
    0.00 :	  6764a6:       bf 40 9e 8a 00          mov    $0x8a9e40,%edi
    0.00 :	  6764ab:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ad:       e8 ee 57 10 00          callq  77bca0 <errhint>
    0.00 :	  6764b2:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	  6764b6:       89 c3                   mov    %eax,%ebx
    0.00 :	  6764b8:       44 8b 85 78 ff ff ff    mov    -0x88(%rbp),%r8d
    0.00 :	  6764bf:       48 89 d0                mov    %rdx,%rax
    0.00 :	  6764c2:       8b 4a 0c                mov    0xc(%rdx),%ecx
    0.00 :	  6764c5:       8b 52 08                mov    0x8(%rdx),%edx
    0.00 :	  6764c8:       8b 78 04                mov    0x4(%rax),%edi
    0.00 :	  6764cb:       8b 30                   mov    (%rax),%esi
    0.00 :	  6764cd:       e8 fe 80 13 00          callq  7ae5d0 <GetRelationPath>
    0.00 :	  6764d2:       8b b5 74 ff ff ff       mov    -0x8c(%rbp),%esi
    0.00 :	  6764d8:       48 89 c2                mov    %rax,%rdx
    0.00 :	  6764db:       bf 90 9e 8a 00          mov    $0x8a9e90,%edi
    0.00 :	  6764e0:       31 c0                   xor    %eax,%eax
    0.00 :	  6764e2:       e8 b9 63 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6764e7:       89 de                   mov    %ebx,%esi
    0.00 :	  6764e9:       89 c7                   mov    %eax,%edi
    0.00 :	  6764eb:       31 c0                   xor    %eax,%eax
    0.00 :	  6764ed:       e8 ee 40 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6764f2:       eb 8d                   jmp    676481 <ReadBuffer_common+0x7e1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:384
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:333
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:333
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:341
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:370
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:381
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:410
    8.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:410
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a8e70 <LookupTupleHashEntry>:
         :	 * zeroed.
         :	 */
         :	TupleHashEntry
         :	LookupTupleHashEntry(TupleHashTable hashtable, TupleTableSlot *slot,
         :	                                         bool *isnew)
         :	{
    0.00 :	  5a8e70:       55                      push   %rbp
    0.00 :	  5a8e71:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a8e74:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  5a8e78:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:333
    8.33 :	  5a8e7c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  5a8e7f:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  5a8e83:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  5a8e87:       49 89 f6                mov    %rsi,%r14
    0.00 :	  5a8e8a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  5a8e8e:       48 83 ec 50             sub    $0x50,%rsp
         :	        TupleHashTable saveCurHT;
         :	        TupleHashEntryData dummy;
         :	        bool            found;
         :
         :	        /* If first time through, clone the input slot to make table slot */
         :	        if (hashtable->tableslot == NULL)
    0.00 :	  5a8e92:       48 83 7f 40 00          cmpq   $0x0,0x40(%rdi)
         :	 * zeroed.
         :	 */
         :	TupleHashEntry
         :	LookupTupleHashEntry(TupleHashTable hashtable, TupleTableSlot *slot,
         :	                                         bool *isnew)
         :	{
    8.33 :	  5a8e97:       49 89 d5                mov    %rdx,%r13
         :	        TupleHashTable saveCurHT;
         :	        TupleHashEntryData dummy;
         :	        bool            found;
         :
         :	        /* If first time through, clone the input slot to make table slot */
         :	        if (hashtable->tableslot == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:341
    8.33 :	  5a8e9a:       0f 84 08 01 00 00       je     5a8fa8 <LookupTupleHashEntry+0x138>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5a8ea0:       48 8b 05 b9 19 61 00    mov    0x6119b9(%rip),%rax        # bba860 <CurrentMemoryContext>
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ea7:       31 d2                   xor    %edx,%edx
    0.00 :	  5a8ea9:       48 8d 4d cf             lea    -0x31(%rbp),%rcx
    0.00 :	  5a8ead:       4d 85 ed                test   %r13,%r13
    0.00 :	  5a8eb0:       48 8d 75 c0             lea    -0x40(%rbp),%rsi
         :
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
    0.00 :	  5a8eb4:       48 c7 45 c0 00 00 00    movq   $0x0,-0x40(%rbp)
    0.00 :	  5a8ebb:       00 
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ebc:       0f 95 c2                setne  %dl
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
    8.33 :	  5a8ebf:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a8ec3:       49 8b 44 24 30          mov    0x30(%r12),%rax
    0.00 :	  5a8ec8:       48 89 05 91 19 61 00    mov    %rax,0x611991(%rip)        # bba860 <CurrentMemoryContext>
         :	         *
         :	         * We save and restore CurTupleHashTable just in case someone manages to
         :	         * invoke this code re-entrantly.
         :	         */
         :	        hashtable->inputslot = slot;
         :	        hashtable->in_hash_funcs = hashtable->tab_hash_funcs;
    0.00 :	  5a8ecf:       49 8b 44 24 18          mov    0x18(%r12),%rax
         :	         * Set up data needed by hash and match functions
         :	         *
         :	         * We save and restore CurTupleHashTable just in case someone manages to
         :	         * invoke this code re-entrantly.
         :	         */
         :	        hashtable->inputslot = slot;
    0.00 :	  5a8ed4:       4d 89 74 24 48          mov    %r14,0x48(%r12)
         :	        hashtable->in_hash_funcs = hashtable->tab_hash_funcs;
    0.00 :	  5a8ed9:       49 89 44 24 50          mov    %rax,0x50(%r12)
         :	        hashtable->cur_eq_funcs = hashtable->tab_eq_funcs;
    0.00 :	  5a8ede:       49 8b 44 24 20          mov    0x20(%r12),%rax
    0.00 :	  5a8ee3:       49 89 44 24 58          mov    %rax,0x58(%r12)
         :
         :	        saveCurHT = CurTupleHashTable;
    0.00 :	  5a8ee8:       4c 8b 3d d1 09 5d 00    mov    0x5d09d1(%rip),%r15        # b798c0 <CurTupleHashTable>
         :	        CurTupleHashTable = hashtable;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:370
    8.33 :	  5a8eef:       4c 89 25 ca 09 5d 00    mov    %r12,0x5d09ca(%rip)        # b798c0 <CurTupleHashTable>
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8ef6:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5a8efa:       e8 a1 b7 1d 00          callq  7846a0 <hash_search>
         :	                                                                                 &dummy,
         :	                                                                                 isnew ? HASH_ENTER : HASH_FIND,
         :	                                                                                 &found);
         :
         :	        if (isnew)
    0.00 :	  5a8eff:       4d 85 ed                test   %r13,%r13
         :	        saveCurHT = CurTupleHashTable;
         :	        CurTupleHashTable = hashtable;
         :
         :	        /* Search the hash table */
         :	        dummy.firstTuple = NULL;        /* flag to reference inputslot */
         :	        entry = (TupleHashEntry) hash_search(hashtable->hashtab,
    0.00 :	  5a8f02:       48 89 c3                mov    %rax,%rbx
         :	                                                                                 &dummy,
         :	                                                                                 isnew ? HASH_ENTER : HASH_FIND,
         :	                                                                                 &found);
         :
         :	        if (isnew)
    0.00 :	  5a8f05:       74 41                   je     5a8f48 <LookupTupleHashEntry+0xd8>
         :	        {
         :	                if (found)
    0.00 :	  5a8f07:       80 7d cf 00             cmpb   $0x0,-0x31(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:381
    8.33 :	  5a8f0b:       75 6b                   jne    5a8f78 <LookupTupleHashEntry+0x108>
         :	                         *
         :	                         * Zero any caller-requested space in the entry.  (This zaps the
         :	                         * "key data" dynahash.c copied into the new entry, but we don't
         :	                         * care since we're about to overwrite it anyway.)
         :	                         */
         :	                        MemSet(entry, 0, hashtable->entrysize);
    0.00 :	  5a8f0d:       49 8b 54 24 38          mov    0x38(%r12),%rdx
    0.00 :	  5a8f12:       48 09 d0                or     %rdx,%rax
    0.00 :	  5a8f15:       a8 07                   test   $0x7,%al
    0.00 :	  5a8f17:       75 09                   jne    5a8f22 <LookupTupleHashEntry+0xb2>
    0.00 :	  5a8f19:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	  5a8f20:       76 5e                   jbe    5a8f80 <LookupTupleHashEntry+0x110>
    0.00 :	  5a8f22:       31 f6                   xor    %esi,%esi
    0.00 :	  5a8f24:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5a8f27:       e8 f4 04 ec ff          callq  469420 <memset@plt>
    0.00 :	  5a8f2c:       49 8b 44 24 28          mov    0x28(%r12),%rax
         :
         :	                        /* Copy the first tuple into the table context */
         :	                        MemoryContextSwitchTo(hashtable->tablecxt);
         :	                        entry->firstTuple = ExecCopySlotMinimalTuple(slot);
    0.00 :	  5a8f31:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5a8f34:       48 89 05 25 19 61 00    mov    %rax,0x611925(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8f3b:       e8 c0 af 00 00          callq  5b3f00 <ExecCopySlotMinimalTuple>
    0.00 :	  5a8f40:       48 89 03                mov    %rax,(%rbx)
         :
         :	                        *isnew = true;
    0.00 :	  5a8f43:       41 c6 45 00 01          movb   $0x1,0x0(%r13)
    0.00 :	  5a8f48:       48 8b 45 b8             mov    -0x48(%rbp),%rax
         :	                }
         :	        }
         :
         :	        CurTupleHashTable = saveCurHT;
    0.00 :	  5a8f4c:       4c 89 3d 6d 09 5d 00    mov    %r15,0x5d096d(%rip)        # b798c0 <CurTupleHashTable>
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return entry;
         :	}
    0.00 :	  5a8f53:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  5a8f57:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  5a8f5b:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  5a8f5f:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  5a8f63:       48 89 05 f6 18 61 00    mov    %rax,0x6118f6(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8f6a:       48 89 d8                mov    %rbx,%rax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:410
    8.33 :	  5a8f6d:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  5a8f71:       c9                      leaveq 
    8.33 :	  5a8f72:       c3                      retq   
    0.00 :	  5a8f73:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        if (isnew)
         :	        {
         :	                if (found)
         :	                {
         :	                        /* found pre-existing entry */
         :	                        *isnew = false;
    0.00 :	  5a8f78:       41 c6 45 00 00          movb   $0x0,0x0(%r13)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:384
   33.33 :	  5a8f7d:       eb c9                   jmp    5a8f48 <LookupTupleHashEntry+0xd8>
    0.00 :	  5a8f7f:       90                      nop
         :	                         *
         :	                         * Zero any caller-requested space in the entry.  (This zaps the
         :	                         * "key data" dynahash.c copied into the new entry, but we don't
         :	                         * care since we're about to overwrite it anyway.)
         :	                         */
         :	                        MemSet(entry, 0, hashtable->entrysize);
    0.00 :	  5a8f80:       48 8d 14 13             lea    (%rbx,%rdx,1),%rdx
    0.00 :	  5a8f84:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5a8f87:       48 39 d3                cmp    %rdx,%rbx
    0.00 :	  5a8f8a:       73 a0                   jae    5a8f2c <LookupTupleHashEntry+0xbc>
    0.00 :	  5a8f8c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5a8f90:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5a8f97:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  5a8f9b:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  5a8f9e:       77 f0                   ja     5a8f90 <LookupTupleHashEntry+0x120>
    0.00 :	  5a8fa0:       eb 8a                   jmp    5a8f2c <LookupTupleHashEntry+0xbc>
    0.00 :	  5a8fa2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	  5a8fa8:       48 8b 47 28             mov    0x28(%rdi),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5a8fac:       48 8b 1d ad 18 61 00    mov    0x6118ad(%rip),%rbx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a8fb3:       48 89 05 a6 18 61 00    mov    %rax,0x6118a6(%rip)        # bba860 <CurrentMemoryContext>
         :
         :	                /*
         :	                 * We copy the input tuple descriptor just for safety --- we assume
         :	                 * all input tuples will have equivalent descriptors.
         :	                 */
         :	                tupdesc = CreateTupleDescCopy(slot->tts_tupleDescriptor);
    0.00 :	  5a8fba:       48 8b 7e 10             mov    0x10(%rsi),%rdi
    0.00 :	  5a8fbe:       e8 bd be ec ff          callq  474e80 <CreateTupleDescCopy>
    0.00 :	  5a8fc3:       48 89 c7                mov    %rax,%rdi
         :	                hashtable->tableslot = MakeSingleTupleTableSlot(tupdesc);
    0.00 :	  5a8fc6:       e8 85 b7 00 00          callq  5b4750 <MakeSingleTupleTableSlot>
    0.00 :	  5a8fcb:       49 89 44 24 40          mov    %rax,0x40(%r12)
    0.00 :	  5a8fd0:       48 89 1d 89 18 61 00    mov    %rbx,0x611889(%rip)        # bba860 <CurrentMemoryContext>
    0.00 :	  5a8fd7:       e9 c4 fe ff ff          jmpq   5a8ea0 <LookupTupleHashEntry+0x30>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   27.27 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   18.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
   18.18 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    9.09 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:655
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000079a900 <ResourceOwnerForgetBuffer>:
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:627
    9.09 :	  79a900:       55                      push   %rbp
         :	        if (owner != NULL)
    0.00 :	  79a901:       48 85 ff                test   %rdi,%rdi
         :	 * We allow the case owner == NULL because the bufmgr is sometimes invoked
         :	 * outside any transaction (for example, during WAL recovery).
         :	 */
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
    0.00 :	  79a904:       48 89 e5                mov    %rsp,%rbp
    9.09 :	  79a907:       41 54                   push   %r12
   18.18 :	  79a909:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79a90c:       53                      push   %rbx
    9.09 :	  79a90d:       89 f3                   mov    %esi,%ebx
         :	        if (owner != NULL)
    0.00 :	  79a90f:       74 4d                   je     79a95e <ResourceOwnerForgetBuffer+0x5e>
         :	        {
         :	                Buffer     *buffers = owner->buffers;
         :	                int                     nb1 = owner->nbuffers - 1;
    0.00 :	  79a911:       8b 47 20                mov    0x20(%rdi),%eax
         :	void
         :	ResourceOwnerForgetBuffer(ResourceOwner owner, Buffer buffer)
         :	{
         :	        if (owner != NULL)
         :	        {
         :	                Buffer     *buffers = owner->buffers;
    0.00 :	  79a914:       48 8b 77 28             mov    0x28(%rdi),%rsi
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:639
   18.18 :	  79a918:       89 c7                   mov    %eax,%edi
    0.00 :	  79a91a:       83 ef 01                sub    $0x1,%edi
    0.00 :	  79a91d:       78 49                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a91f:       48 63 c7                movslq %edi,%rax
         :	                                while (i < nb1)
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
    0.00 :	  79a922:       89 fa                   mov    %edi,%edx
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a924:       39 1c 86                cmp    %ebx,(%rsi,%rax,4)
    0.00 :	  79a927:       74 30                   je     79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a929:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                /*
         :	                 * Scan back-to-front because it's more likely we are releasing a
         :	                 * recently pinned buffer.  This isn't always the case of course, but
         :	                 * it's the way to bet.
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
    0.00 :	  79a930:       83 ea 01                sub    $0x1,%edx
    0.00 :	  79a933:       78 33                   js     79a968 <ResourceOwnerForgetBuffer+0x68>
         :	                {
         :	                        if (buffers[i] == buffer)
    0.00 :	  79a935:       48 63 ca                movslq %edx,%rcx
    0.00 :	  79a938:       39 1c 8e                cmp    %ebx,(%rsi,%rcx,4)
    0.00 :	  79a93b:       75 f3                   jne    79a930 <ResourceOwnerForgetBuffer+0x30>
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a93d:       39 d7                   cmp    %edx,%edi
    0.00 :	  79a93f:       90                      nop
    0.00 :	  79a940:       7f 09                   jg     79a94b <ResourceOwnerForgetBuffer+0x4b>
    0.00 :	  79a942:       eb 15                   jmp    79a959 <ResourceOwnerForgetBuffer+0x59>
    0.00 :	  79a944:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  79a948:       48 63 ca                movslq %edx,%rcx
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a94b:       8b 44 8e 04             mov    0x4(%rsi,%rcx,4),%eax
         :	                                        i++;
    0.00 :	  79a94f:       83 c2 01                add    $0x1,%edx
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a952:       39 d7                   cmp    %edx,%edi
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
    0.00 :	  79a954:       89 04 8e                mov    %eax,(%rsi,%rcx,4)
         :	                 */
         :	                for (i = nb1; i >= 0; i--)
         :	                {
         :	                        if (buffers[i] == buffer)
         :	                        {
         :	                                while (i < nb1)
    0.00 :	  79a957:       7f ef                   jg     79a948 <ResourceOwnerForgetBuffer+0x48>
         :	                                {
         :	                                        buffers[i] = buffers[i + 1];
         :	                                        i++;
         :	                                }
         :	                                owner->nbuffers = nb1;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:648
   27.27 :	  79a959:       41 89 7c 24 20          mov    %edi,0x20(%r12)
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
         :	                         buffer, owner->name);
         :	        }
         :	}
    0.00 :	  79a95e:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/resowner/resowner.c:655
    9.09 :	  79a95f:       41 5c                   pop    %r12
    0.00 :	  79a961:       c9                      leaveq 
    0.00 :	  79a962:       c3                      retq   
    0.00 :	  79a963:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                }
         :	                                owner->nbuffers = nb1;
         :	                                return;
         :	                        }
         :	                }
         :	                elog(ERROR, "buffer %d is not owned by resource owner %s",
    0.00 :	  79a968:       ba 70 27 8e 00          mov    $0x8e2770,%edx
    0.00 :	  79a96d:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  79a972:       bf 90 22 8e 00          mov    $0x8e2290,%edi
    0.00 :	  79a977:       e8 a4 0a fe ff          callq  77b420 <elog_start>
    0.00 :	  79a97c:       49 8b 4c 24 18          mov    0x18(%r12),%rcx
    0.00 :	  79a981:       89 da                   mov    %ebx,%edx
    0.00 :	  79a983:       be b8 24 8e 00          mov    $0x8e24b8,%esi
    0.00 :	  79a988:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  79a98d:       31 c0                   xor    %eax,%eax
    0.00 :	  79a98f:       e8 9c 08 fe ff          callq  77b230 <elog_finish>
    0.00 :	  79a994:       e8 37 eb cc ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:66
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:77
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:85
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:87
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:89
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:100
   10.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a9440 <execTuplesMatch>:
         :	                                TupleTableSlot *slot2,
         :	                                int numCols,
         :	                                AttrNumber *matchColIdx,
         :	                                FmgrInfo *eqfunctions,
         :	                                MemoryContext evalContext)
         :	{
    0.00 :	  5a9440:       55                      push   %rbp
    0.00 :	  5a9441:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a9444:       41 57                   push   %r15
    0.00 :	  5a9446:       49 89 cf                mov    %rcx,%r15
    0.00 :	  5a9449:       41 56                   push   %r14
    0.00 :	  5a944b:       41 55                   push   %r13
    0.00 :	  5a944d:       41 54                   push   %r12
    0.00 :	  5a944f:       41 89 d4                mov    %edx,%r12d
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a9452:       45 89 e5                mov    %r12d,%r13d
    0.00 :	  5a9455:       53                      push   %rbx
    0.00 :	  5a9456:       4c 89 cb                mov    %r9,%rbx
    0.00 :	  5a9459:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  5a945d:       48 89 7d b8             mov    %rdi,-0x48(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            result;
         :	        int                     i;
         :
         :	        /* Reset and switch into the temp context. */
         :	        MemoryContextReset(evalContext);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:66
   20.00 :	  5a9461:       4c 89 cf                mov    %r9,%rdi
         :	                                TupleTableSlot *slot2,
         :	                                int numCols,
         :	                                AttrNumber *matchColIdx,
         :	                                FmgrInfo *eqfunctions,
         :	                                MemoryContext evalContext)
         :	{
    0.00 :	  5a9464:       48 89 75 b0             mov    %rsi,-0x50(%rbp)
    0.00 :	  5a9468:       4c 89 45 a8             mov    %r8,-0x58(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            result;
         :	        int                     i;
         :
         :	        /* Reset and switch into the temp context. */
         :	        MemoryContextReset(evalContext);
    0.00 :	  5a946c:       e8 3f f5 1e 00          callq  7989b0 <MemoryContextReset>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5a9471:       48 8b 05 e8 13 61 00    mov    0x6113e8(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5a9478:       48 89 1d e1 13 61 00    mov    %rbx,0x6113e1(%rip)        # bba860 <CurrentMemoryContext>
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:93
   20.00 :	  5a947f:       48 89 45 c0             mov    %rax,-0x40(%rbp)
    0.00 :	  5a9483:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	         * comparing at the last field (least significant sort key). That's the
         :	         * most likely to be different if we are dealing with sorted input.
         :	         */
         :	        result = true;
         :
         :	        for (i = numCols; --i >= 0;)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:77
   10.00 :	  5a9488:       41 83 ed 01             sub    $0x1,%r13d
    0.00 :	  5a948c:       78 72                   js     5a9500 <execTuplesMatch+0xc0>
         :	        {
         :	                AttrNumber      att = matchColIdx[i];
    0.00 :	  5a948e:       4d 63 e5                movslq %r13d,%r12
         :	                Datum           attr1,
         :	                                        attr2;
         :	                bool            isNull1,
         :	                                        isNull2;
         :
         :	                attr1 = slot_getattr(slot1, att, &isNull1);
    0.00 :	  5a9491:       48 8b 7d b8             mov    -0x48(%rbp),%rdi
    0.00 :	  5a9495:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5a9499:       43 0f bf 1c 67          movswl (%r15,%r12,2),%ebx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:85
   10.00 :	  5a949e:       89 de                   mov    %ebx,%esi
    0.00 :	  5a94a0:       e8 5b 5f ec ff          callq  46f400 <slot_getattr>
         :
         :	                attr2 = slot_getattr(slot2, att, &isNull2);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:87
   10.00 :	  5a94a5:       48 8b 7d b0             mov    -0x50(%rbp),%rdi
    0.00 :	  5a94a9:       48 8d 55 d6             lea    -0x2a(%rbp),%rdx
    0.00 :	  5a94ad:       89 de                   mov    %ebx,%esi
         :	                Datum           attr1,
         :	                                        attr2;
         :	                bool            isNull1,
         :	                                        isNull2;
         :
         :	                attr1 = slot_getattr(slot1, att, &isNull1);
    0.00 :	  5a94af:       49 89 c6                mov    %rax,%r14
         :
         :	                attr2 = slot_getattr(slot2, att, &isNull2);
    0.00 :	  5a94b2:       e8 49 5f ec ff          callq  46f400 <slot_getattr>
         :
         :	                if (isNull1 != isNull2)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:89
   10.00 :	  5a94b7:       0f b6 55 d7             movzbl -0x29(%rbp),%edx
    0.00 :	  5a94bb:       3a 55 d6                cmp    -0x2a(%rbp),%dl
    0.00 :	  5a94be:       75 21                   jne    5a94e1 <execTuplesMatch+0xa1>
         :	                {
         :	                        result = false;         /* one null and one not; they aren't equal */
         :	                        break;
         :	                }
         :
         :	                if (isNull1)
    0.00 :	  5a94c0:       84 d2                   test   %dl,%dl
    0.00 :	  5a94c2:       75 c4                   jne    5a9488 <execTuplesMatch+0x48>
         :	                        continue;                       /* both are null, treat as equal */
         :
         :	                /* Apply the type-specific equality function */
         :
         :	                if (!DatumGetBool(FunctionCall2(&eqfunctions[i],
    0.00 :	  5a94c4:       4b 8d 3c 64             lea    (%r12,%r12,2),%rdi
    0.00 :	  5a94c8:       31 f6                   xor    %esi,%esi
    0.00 :	  5a94ca:       48 89 c1                mov    %rax,%rcx
    0.00 :	  5a94cd:       4c 89 f2                mov    %r14,%rdx
    0.00 :	  5a94d0:       48 c1 e7 04             shl    $0x4,%rdi
    0.00 :	  5a94d4:       48 03 7d a8             add    -0x58(%rbp),%rdi
    0.00 :	  5a94d8:       e8 53 4b 1d 00          callq  77e030 <FunctionCall2Coll>
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:100
   10.00 :	  5a94dd:       84 c0                   test   %al,%al
    0.00 :	  5a94df:       75 a7                   jne    5a9488 <execTuplesMatch+0x48>
         :	         * comparing at the last field (least significant sort key). That's the
         :	         * most likely to be different if we are dealing with sorted input.
         :	         */
         :	        result = true;
         :
         :	        for (i = numCols; --i >= 0;)
    0.00 :	  5a94e1:       31 c0                   xor    %eax,%eax
         :
         :	        CurrentMemoryContext = context;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/../../../src/include/utils/palloc.h:95
   10.00 :	  5a94e3:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5a94e7:       48 89 15 72 13 61 00    mov    %rdx,0x611372(%rip)        # bba860 <CurrentMemoryContext>
         :	        }
         :
         :	        MemoryContextSwitchTo(oldContext);
         :
         :	        return result;
         :	}
    0.00 :	  5a94ee:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  5a94f2:       5b                      pop    %rbx
    0.00 :	  5a94f3:       41 5c                   pop    %r12
    0.00 :	  5a94f5:       41 5d                   pop    %r13
    0.00 :	  5a94f7:       41 5e                   pop    %r14
    0.00 :	  5a94f9:       41 5f                   pop    %r15
    0.00 :	  5a94fb:       c9                      leaveq 
    0.00 :	  5a94fc:       c3                      retq   
    0.00 :	  5a94fd:       0f 1f 00                nopl   (%rax)
         :	         * comparing at the last field (least significant sort key). That's the
         :	         * most likely to be different if we are dealing with sorted input.
         :	         */
         :	        result = true;
         :
         :	        for (i = numCols; --i >= 0;)
    0.00 :	  5a9500:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  5a9505:       eb dc                   jmp    5a94e3 <execTuplesMatch+0xa3>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   44.44 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1609
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1597
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068f3a0 <LWLockRelease>:
         :	/*
         :	 * LWLockRelease - release a previously acquired lock
         :	 */
         :	void
         :	LWLockRelease(LWLock *lock)
         :	{
    0.00 :	  68f3a0:       55                      push   %rbp
    0.00 :	  68f3a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68f3a4:       41 55                   push   %r13
    0.00 :	  68f3a6:       41 54                   push   %r12
    0.00 :	  68f3a8:       49 89 fc                mov    %rdi,%r12
    0.00 :	  68f3ab:       53                      push   %rbx
    0.00 :	  68f3ac:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f3b0:       8b 35 52 e6 4e 00       mov    0x4ee652(%rip),%esi        # b7da08 <num_held_lwlocks>
    0.00 :	  68f3b6:       89 f0                   mov    %esi,%eax
    0.00 :	  68f3b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68f3bf:       00 
    0.00 :	  68f3c0:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f3c3:       0f 88 1f 02 00 00       js     68f5e8 <LWLockRelease+0x248>
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
    0.00 :	  68f3c9:       48 63 d0                movslq %eax,%rdx
    0.00 :	  68f3cc:       41 b9 40 da b7 00       mov    $0xb7da40,%r9d
    0.00 :	  68f3d2:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f3d5:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f3d9:       48 8b 99 40 da b7 00    mov    0xb7da40(%rcx),%rbx
    0.00 :	  68f3e0:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	  68f3e3:       75 db                   jne    68f3c0 <LWLockRelease+0x20>
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3e5:       44 8d 46 ff             lea    -0x1(%rsi),%r8d
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
         :	        {
         :	                if (lock == held_lwlocks[i].lock)
         :	                {
         :	                        mode = held_lwlocks[i].mode;
    0.00 :	  68f3e9:       44 8b 91 48 da b7 00    mov    0xb7da48(%rcx),%r10d
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3f0:       41 39 c0                cmp    %eax,%r8d
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
    0.00 :	  68f3f3:       44 89 05 0e e6 4e 00    mov    %r8d,0x4ee60e(%rip)        # b7da08 <num_held_lwlocks>
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f3fa:       7f 09                   jg     68f405 <LWLockRelease+0x65>
    0.00 :	  68f3fc:       eb 3a                   jmp    68f438 <LWLockRelease+0x98>
    0.00 :	  68f3fe:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * Remove lock from list of locks held.  Usually, but not always, it will
         :	         * be the latest-acquired lock; so search array backwards.
         :	         */
         :	        for (i = num_held_lwlocks; --i >= 0;)
    0.00 :	  68f400:       89 f0                   mov    %esi,%eax
    0.00 :	  68f402:       48 89 fa                mov    %rdi,%rdx
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f405:       8d 70 01                lea    0x1(%rax),%esi
    0.00 :	  68f408:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  68f40b:       48 c1 e1 04             shl    $0x4,%rcx
    0.00 :	  68f40f:       48 63 fe                movslq %esi,%rdi
    0.00 :	  68f412:       48 89 fa                mov    %rdi,%rdx
    0.00 :	  68f415:       48 c1 e2 04             shl    $0x4,%rdx
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f419:       41 39 f0                cmp    %esi,%r8d
         :	                held_lwlocks[i] = held_lwlocks[i + 1];
    0.00 :	  68f41c:       48 8b 82 40 da b7 00    mov    0xb7da40(%rdx),%rax
    0.00 :	  68f423:       48 89 81 40 da b7 00    mov    %rax,0xb7da40(%rcx)
    0.00 :	  68f42a:       48 8b 82 48 da b7 00    mov    0xb7da48(%rdx),%rax
    0.00 :	  68f431:       49 89 44 09 08          mov    %rax,0x8(%r9,%rcx,1)
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
         :	        num_held_lwlocks--;
         :	        for (; i < num_held_lwlocks; i++)
    0.00 :	  68f436:       7f c8                   jg     68f400 <LWLockRelease+0x60>
         :
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
    0.00 :	  68f438:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f43b:       0f 84 77 01 00 00       je     68f5b8 <LWLockRelease+0x218>
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
         :	        else
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, 1);
    0.00 :	  68f441:       49 8d 54 24 04          lea    0x4(%r12),%rdx
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68f446:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68f44b:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   33.33 :	  68f44f:       8d 50 ff                lea    -0x1(%rax),%edx
         :	#ifndef PG_HAVE_ATOMIC_READ_U32
         :	#define PG_HAVE_ATOMIC_READ_U32
         :	static inline uint32
         :	pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *ptr)
         :	{
         :	        return *(&ptr->value);
    0.00 :	  68f452:       8b 43 08                mov    0x8(%rbx),%eax
         :	        /*
         :	         * Anybody we need to wakeup needs to have started queueing before we
         :	         * removed ourselves from the queue and the atomic operations above are
         :	         * full barriers. So we can just do plain read.
         :	         */
         :	        if (pg_atomic_read_u32(&lock->nwaiters) > 0)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1609
   11.11 :	  68f455:       85 c0                   test   %eax,%eax
    0.00 :	  68f457:       0f 84 3a 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	        /*
         :	         * If we just released an exclusive lock always wakeup waiters, even if
         :	         * lockcount is still > 0. A shared acquisition temporarily (and
         :	         * spuriously) might have increased the value.
         :	         */
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
    0.00 :	  68f45d:       45 85 d2                test   %r10d,%r10d
    0.00 :	  68f460:       0f 85 fc 01 00 00       jne    68f662 <LWLockRelease+0x2c2>
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f466:       4c 8d 6d d0             lea    -0x30(%rbp),%r13
    0.00 :	  68f46a:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f46e:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
         :	        /*
         :	         * We're still waiting for backends to get scheduled, don't wake them up
         :	         * again.
         :	         */
         :	        pg_read_barrier(); /* pairs with nwaiters-- */
         :	        if (!BOOL_ACCESS_ONCE(lock->releaseOK))
    0.00 :	  68f472:       0f b6 43 01             movzbl 0x1(%rbx),%eax
    0.00 :	  68f476:       84 c0                   test   %al,%al
    0.00 :	  68f478:       0f 84 19 01 00 00       je     68f597 <LWLockRelease+0x1f7>
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  68f47e:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  68f483:       f0 86 03                lock xchg %al,(%rbx)
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f486:       84 c0                   test   %al,%al
    0.00 :	  68f488:       0f 85 b2 01 00 00       jne    68f640 <LWLockRelease+0x2a0>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f48e:       48 8b 53 18             mov    0x18(%rbx),%rdx
    0.00 :	  68f492:       48 85 d2                test   %rdx,%rdx
    0.00 :	  68f495:       0f 84 bc 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f49b:       4d 8d 4c 24 10          lea    0x10(%r12),%r9
    0.00 :	  68f4a0:       48 8b 72 08             mov    0x8(%rdx),%rsi
    0.00 :	  68f4a4:       49 39 d1                cmp    %rdx,%r9
    0.00 :	  68f4a7:       0f 84 aa 01 00 00       je     68f657 <LWLockRelease+0x2b7>
    0.00 :	  68f4ad:       31 ff                   xor    %edi,%edi
    0.00 :	  68f4af:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f4b5:       eb 23                   jmp    68f4da <LWLockRelease+0x13a>
    0.00 :	  68f4b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  68f4be:       00 00 
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4c0:       80 7a fa 00             cmpb   $0x0,-0x6(%rdx)
    0.00 :	  68f4c4:       75 1d                   jne    68f4e3 <LWLockRelease+0x143>
    0.00 :	  68f4c6:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f4cb:       49 39 f1                cmp    %rsi,%r9
    0.00 :	  68f4ce:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f4d2:       74 6a                   je     68f53e <LWLockRelease+0x19e>
    0.00 :	  68f4d4:       48 89 f2                mov    %rsi,%rdx
    0.00 :	  68f4d7:       48 89 c6                mov    %rax,%rsi
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4da:       40 84 ff                test   %dil,%dil
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f4dd:       48 8d 4a b8             lea    -0x48(%rdx),%rcx
         :
         :	                if (wokeup_somebody && waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f4e1:       75 dd                   jne    68f4c0 <LWLockRelease+0x120>
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f4e3:       48 8b 51 48             mov    0x48(%rcx),%rdx
    0.00 :	  68f4e7:       48 8b 41 50             mov    0x50(%rcx),%rax
    0.00 :	  68f4eb:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f4ef:       48 8b 51 50             mov    0x50(%rcx),%rdx
    0.00 :	  68f4f3:       48 8b 41 48             mov    0x48(%rcx),%rax
    0.00 :	  68f4f7:       48 89 02                mov    %rax,(%rdx)
         :	 * Insert a node at the end of the list.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_push_tail(dlist_head *head, dlist_node *node)
         :	{
         :	        if (head->head.next == NULL)    /* convert NULL header to circular */
    0.00 :	  68f4fa:       48 83 7d d8 00          cmpq   $0x0,-0x28(%rbp)
         :	                        continue;
         :
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                dlist_push_tail(&wakeup, &waiter->lwWaitLink);
    0.00 :	  68f4ff:       48 8d 51 48             lea    0x48(%rcx),%rdx
    0.00 :	  68f503:       0f 84 cf 00 00 00       je     68f5d8 <LWLockRelease+0x238>
         :	                dlist_init(head);
         :
         :	        node->next = &head->head;
    0.00 :	  68f509:       4c 89 69 50             mov    %r13,0x50(%rcx)
         :	        node->prev = head->head.prev;
    0.00 :	  68f50d:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68f511:       48 89 41 48             mov    %rax,0x48(%rcx)
         :	        node->prev->next = node;
    0.00 :	  68f515:       48 89 50 08             mov    %rdx,0x8(%rax)
         :	        head->head.prev = node;
    0.00 :	  68f519:       48 89 55 d0             mov    %rdx,-0x30(%rbp)
         :
         :	                if (waiter->lwWaitMode != LW_WAIT_UNTIL_FREE)
    0.00 :	  68f51d:       0f b6 41 42             movzbl 0x42(%rcx),%eax
    0.00 :	  68f521:       3c 02                   cmp    $0x2,%al
    0.00 :	  68f523:       74 a6                   je     68f4cb <LWLockRelease+0x12b>
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f525:       84 c0                   test   %al,%al
    0.00 :	  68f527:       0f 84 0b 01 00 00       je     68f638 <LWLockRelease+0x298>
    0.00 :	  68f52d:       45 31 c0                xor    %r8d,%r8d
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f530:       49 39 f1                cmp    %rsi,%r9
         :
         :	                /*
         :	                 * Once we've woken up an exclusive lock, there's no point in waking
         :	                 * up anybody else.
         :	                 */
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
    0.00 :	  68f533:       bf 01 00 00 00          mov    $0x1,%edi
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f538:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  68f53c:       75 96                   jne    68f4d4 <LWLockRelease+0x134>
         :	                if(waiter->lwWaitMode == LW_EXCLUSIVE)
         :	                        break;
         :	        }
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
    0.00 :	  68f53e:       44 88 43 01             mov    %r8b,0x1(%rbx)
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f542:       48 8b 4d d8             mov    -0x28(%rbp),%rcx
         :
         :	        /* The SpinLockRelease() below provides barrier semantics */
         :	        BOOL_ACCESS_ONCE(lock->releaseOK) = releaseOK;
         :
         :	        /* We are done updating shared state of the lock queue. */
         :	        SpinLockRelease(&lock->mutex);
    0.00 :	  68f546:       41 c6 04 24 00          movb   $0x0,(%r12)
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f54b:       48 85 c9                test   %rcx,%rcx
    0.00 :	  68f54e:       74 47                   je     68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f550:       4c 39 e9                cmp    %r13,%rcx
    0.00 :	  68f553:       48 8b 59 08             mov    0x8(%rcx),%rbx
    0.00 :	  68f557:       75 0d                   jne    68f566 <LWLockRelease+0x1c6>
    0.00 :	  68f559:       eb 3c                   jmp    68f597 <LWLockRelease+0x1f7>
    0.00 :	  68f55b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  68f560:       48 89 d9                mov    %rbx,%rcx
    0.00 :	  68f563:       48 89 c3                mov    %rax,%rbx
         :	        {
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
    0.00 :	  68f566:       48 8d 79 b8             lea    -0x48(%rcx),%rdi
         :	 * Delete 'node' from its list (it must be in one).
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_delete(dlist_node *node)
         :	{
         :	        node->prev->next = node->next;
    0.00 :	  68f56a:       48 8b 57 48             mov    0x48(%rdi),%rdx
    0.00 :	  68f56e:       48 8b 47 50             mov    0x50(%rdi),%rax
    0.00 :	  68f572:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	        node->next->prev = node->prev;
    0.00 :	  68f576:       48 8b 57 50             mov    0x50(%rdi),%rdx
    0.00 :	  68f57a:       48 8b 47 48             mov    0x48(%rdi),%rax
    0.00 :	  68f57e:       48 89 02                mov    %rax,(%rdx)
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f581:       48 83 c7 10             add    $0x10,%rdi
         :	                PGPROC *waiter = dlist_container(PGPROC, lwWaitLink, iter.cur);
         :
         :	                LOG_LWDEBUG("LWLockRelease", lock, "release waiter");
         :	                dlist_delete(&waiter->lwWaitLink);
         :	                pg_write_barrier();
         :	                waiter->lwWaiting = false;
    0.00 :	  68f585:       c6 41 f9 00             movb   $0x0,-0x7(%rcx)
         :	                PGSemaphoreUnlock(&waiter->sem);
    0.00 :	  68f589:       e8 02 8b fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        SpinLockRelease(&lock->mutex);
         :
         :	        /*
         :	         * Awaken any waiters I removed from the queue.
         :	         */
         :	        dlist_foreach_modify(iter, &wakeup)
    0.00 :	  68f58e:       4c 39 eb                cmp    %r13,%rbx
    0.00 :	  68f591:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	  68f595:       75 c9                   jne    68f560 <LWLockRelease+0x1c0>
         :	        TRACE_POSTGRESQL_LWLOCK_RELEASE(T_NAME(lock), T_ID(lock));
         :
         :	        /*
         :	         * Now okay to allow cancel/die interrupts.
         :	         */
         :	        RESUME_INTERRUPTS();
    0.00 :	  68f597:       8b 05 fb aa 52 00       mov    0x52aafb(%rip),%eax        # bba098 <InterruptHoldoffCount>
    0.00 :	  68f59d:       83 e8 01                sub    $0x1,%eax
    0.00 :	  68f5a0:       89 05 f2 aa 52 00       mov    %eax,0x52aaf2(%rip)        # bba098 <InterruptHoldoffCount>
         :	}
    0.00 :	  68f5a6:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68f5aa:       5b                      pop    %rbx
    0.00 :	  68f5ab:       41 5c                   pop    %r12
    0.00 :	  68f5ad:       41 5d                   pop    %r13
    0.00 :	  68f5af:       c9                      leaveq 
    0.00 :	  68f5b0:       c3                      retq   
    0.00 :	  68f5b1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Release my hold on lock, after that it can immediately be acquired by
         :	         * others, even if we still have to wakeup other waiters.
         :	         */
         :	        if (mode == LW_EXCLUSIVE)
         :	                lockcount = pg_atomic_sub_fetch_u32(&lock->lockcount, EXCLUSIVE_LOCK);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1597
   11.11 :	  68f5b8:       49 8d 54 24 04          lea    0x4(%r12),%rdx
    0.00 :	  68f5bd:       b8 00 00 00 c0          mov    $0xc0000000,%eax
    0.00 :	  68f5c2:       f0 0f c1 02             lock xadd %eax,(%rdx)
         :	#if !defined(PG_HAVE_ATOMIC_SUB_FETCH_U32) && defined(PG_HAVE_ATOMIC_FETCH_SUB_U32)
         :	#define PG_HAVE_ATOMIC_SUB_FETCH_U32
         :	static inline uint32
         :	pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *ptr, int32 sub_)
         :	{
         :	        return pg_atomic_fetch_sub_u32_impl(ptr, sub_) - sub_;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/../../../../src/include/port/atomics/generic.h:247
   44.44 :	  68f5c6:       8d 90 00 00 00 c0       lea    -0x40000000(%rax),%edx
    0.00 :	  68f5cc:       e9 81 fe ff ff          jmpq   68f452 <LWLockRelease+0xb2>
    0.00 :	  68f5d1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * Previous state will be thrown away without any cleanup.
         :	 */
         :	STATIC_IF_INLINE void
         :	dlist_init(dlist_head *head)
         :	{
         :	        head->head.next = head->head.prev = &head->head;
    0.00 :	  68f5d8:       4c 89 6d d0             mov    %r13,-0x30(%rbp)
    0.00 :	  68f5dc:       4c 89 6d d8             mov    %r13,-0x28(%rbp)
    0.00 :	  68f5e0:       e9 24 ff ff ff          jmpq   68f509 <LWLockRelease+0x169>
    0.00 :	  68f5e5:       0f 1f 00                nopl   (%rax)
         :	                        mode = held_lwlocks[i].mode;
         :	                        break;
         :	                }
         :	        }
         :	        if (i < 0)
         :	                elog(ERROR, "lock %s %d is not held", T_NAME(lock), T_ID(lock));
    0.00 :	  68f5e8:       ba 10 d1 8a 00          mov    $0x8ad110,%edx
    0.00 :	  68f5ed:       be 31 06 00 00          mov    $0x631,%esi
    0.00 :	  68f5f2:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68f5f7:       e8 24 be 0e 00          callq  77b420 <elog_start>
    0.00 :	  68f5fc:       49 63 54 24 0c          movslq 0xc(%r12),%rdx
    0.00 :	  68f601:       48 8b 05 08 e4 4e 00    mov    0x4ee408(%rip),%rax        # b7da10 <LWLockTrancheArray>
    0.00 :	  68f608:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68f60d:       48 8b 34 d0             mov    (%rax,%rdx,8),%rsi
    0.00 :	  68f611:       31 d2                   xor    %edx,%edx
    0.00 :	  68f613:       4c 2b 66 08             sub    0x8(%rsi),%r12
    0.00 :	  68f617:       4c 89 e0                mov    %r12,%rax
    0.00 :	  68f61a:       48 f7 76 10             divq   0x10(%rsi)
    0.00 :	  68f61e:       48 8b 16                mov    (%rsi),%rdx
    0.00 :	  68f621:       be bf d0 8a 00          mov    $0x8ad0bf,%esi
    0.00 :	  68f626:       89 c1                   mov    %eax,%ecx
    0.00 :	  68f628:       31 c0                   xor    %eax,%eax
    0.00 :	  68f62a:       e8 01 bc 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68f62f:       e8 9c 9e dd ff          callq  4694d0 <abort@plt>
    0.00 :	  68f634:       0f 1f 40 00             nopl   0x0(%rax)
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f638:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  68f63b:       e9 fe fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :
         :	        /* Acquire mutex.  Time spent holding mutex should be short! */
         :	#ifdef LWLOCK_STATS
         :	        lwstats->spin_delay_count += SpinLockAcquire(&lock->mutex);
         :	#else
         :	        SpinLockAcquire(&lock->mutex);
    0.00 :	  68f640:       ba e1 02 00 00          mov    $0x2e1,%edx
    0.00 :	  68f645:       be 85 d0 8a 00          mov    $0x8ad085,%esi
    0.00 :	  68f64a:       48 89 df                mov    %rbx,%rdi
    0.00 :	  68f64d:       e8 ee 09 00 00          callq  690040 <s_lock>
    0.00 :	  68f652:       e9 37 fe ff ff          jmpq   68f48e <LWLockRelease+0xee>
         :	#endif
         :
         :	        /* remove the to-be-awakened PGPROCs from the queue */
         :	        releaseOK = true;
         :
         :	        dlist_foreach_modify(iter, &lock->waiters)
    0.00 :	  68f657:       41 b8 01 00 00 00       mov    $0x1,%r8d
    0.00 :	  68f65d:       e9 dc fe ff ff          jmpq   68f53e <LWLockRelease+0x19e>
         :	        if (mode == LW_EXCLUSIVE && have_waiters)
         :	                check_waiters = true;
         :	        /*
         :	         * nobody has this locked anymore, potential exclusive lockers get a chance
         :	         */
         :	        else if (lockcount == 0 && have_waiters)
    0.00 :	  68f662:       85 d2                   test   %edx,%edx
    0.00 :	  68f664:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  68f668:       0f 84 f8 fd ff ff       je     68f466 <LWLockRelease+0xc6>
    0.00 :	  68f66e:       66 90                   xchg   %ax,%ax
    0.00 :	  68f670:       e9 22 ff ff ff          jmpq   68f597 <LWLockRelease+0x1f7>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2558
   22.22 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2558
   11.11 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2567
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006d3bd0 <float84mi>:
         :	        PG_RETURN_FLOAT8(result);
         :	}
         :
         :	Datum
         :	float84mi(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2558
   22.22 :	  6d3bd0:       55                      push   %rbp
   66.67 :	  6d3bd1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6d3bd4:       53                      push   %rbx
    0.00 :	  6d3bd5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6d3bd8:       48 83 ec 18             sub    $0x18,%rsp
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
    0.00 :	  6d3bdc:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6d3be0:       e8 eb 9d 0a 00          callq  77d9d0 <DatumGetFloat8>
    0.00 :	  6d3be5:       f2 0f 11 45 e0          movsd  %xmm0,-0x20(%rbp)
         :	        float4          arg2 = PG_GETARG_FLOAT4(1);
    0.00 :	  6d3bea:       48 8b 7b 28             mov    0x28(%rbx),%rdi
    0.00 :	  6d3bee:       e8 bd 9d 0a 00          callq  77d9b0 <DatumGetFloat4>
    0.00 :	  6d3bf3:       f3 0f 11 45 ec          movss  %xmm0,-0x14(%rbp)
         :	        float8          result;
         :
         :	        result = arg1 - arg2;
    0.00 :	  6d3bf8:       0f 14 c0                unpcklps %xmm0,%xmm0
    0.00 :	  6d3bfb:       f2 0f 10 4d e0          movsd  -0x20(%rbp),%xmm1
    0.00 :	  6d3c00:       0f 5a c0                cvtps2pd %xmm0,%xmm0
    0.00 :	  6d3c03:       f2 0f 5c c8             subsd  %xmm0,%xmm1
    0.00 :	  6d3c07:       f2 0f 11 4d f0          movsd  %xmm1,-0x10(%rbp)
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
    0.00 :	  6d3c0c:       66 0f 28 c1             movapd %xmm1,%xmm0
    0.00 :	  6d3c10:       e8 db 5e d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3c15:       85 c0                   test   %eax,%eax
    0.00 :	  6d3c17:       74 0e                   je     6d3c27 <float84mi+0x57>
    0.00 :	  6d3c19:       f2 0f 10 45 e0          movsd  -0x20(%rbp),%xmm0
    0.00 :	  6d3c1e:       e8 cd 5e d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3c23:       85 c0                   test   %eax,%eax
    0.00 :	  6d3c25:       74 19                   je     6d3c40 <float84mi+0x70>
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3c27:       f2 0f 10 45 f0          movsd  -0x10(%rbp),%xmm0
         :	}
    0.00 :	  6d3c2c:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  6d3c30:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2567
   11.11 :	  6d3c31:       c9                      leaveq 
         :	        float8          result;
         :
         :	        result = arg1 - arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3c32:       e9 89 9d 0a 00          jmpq   77d9c0 <Float8GetDatum>
    0.00 :	  6d3c37:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6d3c3e:       00 00 
         :	        float4          arg2 = PG_GETARG_FLOAT4(1);
         :	        float8          result;
         :
         :	        result = arg1 - arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
    0.00 :	  6d3c40:       f3 0f 10 45 ec          movss  -0x14(%rbp),%xmm0
    0.00 :	  6d3c45:       e8 e6 5a d9 ff          callq  469730 <__isinff@plt>
    0.00 :	  6d3c4a:       85 c0                   test   %eax,%eax
    0.00 :	  6d3c4c:       75 d9                   jne    6d3c27 <float84mi+0x57>
    0.00 :	  6d3c4e:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d3c51:       b9 da b8 8b 00          mov    $0x8bb8da,%ecx
    0.00 :	  6d3c56:       ba 05 0a 00 00          mov    $0xa05,%edx
    0.00 :	  6d3c5b:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d3c60:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d3c65:       e8 56 6e 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d3c6a:       84 c0                   test   %al,%al
    0.00 :	  6d3c6c:       75 05                   jne    6d3c73 <float84mi+0xa3>
    0.00 :	  6d3c6e:       e8 5d 58 d9 ff          callq  4694d0 <abort@plt>
    0.00 :	  6d3c73:       bf 2f b4 8b 00          mov    $0x8bb42f,%edi
    0.00 :	  6d3c78:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3c7a:       e8 21 8c 0a 00          callq  77c8a0 <errmsg>
    0.00 :	  6d3c7f:       bf 82 00 00 03          mov    $0x3000082,%edi
    0.00 :	  6d3c84:       89 c3                   mov    %eax,%ebx
    0.00 :	  6d3c86:       e8 c5 90 0a 00          callq  77cd50 <errcode>
    0.00 :	  6d3c8b:       89 de                   mov    %ebx,%esi
    0.00 :	  6d3c8d:       89 c7                   mov    %eax,%edi
    0.00 :	  6d3c8f:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3c91:       e8 4a 69 0a 00          callq  77a5e0 <errfinish>
    0.00 :	  6d3c96:       eb d6                   jmp    6d3c6e <float84mi+0x9e>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   75.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:558
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:559
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:559
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a9510 <TupleHashTableMatch>:
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the compare functions.  (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static int
         :	TupleHashTableMatch(const void *key1, const void *key2, Size keysize)
         :	{
    0.00 :	  5a9510:       55                      push   %rbp
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:559
   12.50 :	  5a9511:       31 d2                   xor    %edx,%edx
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the compare functions.  (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static int
         :	TupleHashTableMatch(const void *key1, const void *key2, Size keysize)
         :	{
    0.00 :	  5a9513:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a9516:       41 54                   push   %r12
    0.00 :	  5a9518:       53                      push   %rbx
         :	#ifdef USE_ASSERT_CHECKING
         :	        MinimalTuple tuple2 = ((const TupleHashEntryData *) key2)->firstTuple;
         :	#endif
         :	        TupleTableSlot *slot1;
         :	        TupleTableSlot *slot2;
         :	        TupleHashTable hashtable = CurTupleHashTable;
    0.00 :	  5a9519:       48 8b 1d a0 03 5d 00    mov    0x5d03a0(%rip),%rbx        # b798c0 <CurTupleHashTable>
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
   12.50 :	  5a9520:       48 8b 3f                mov    (%rdi),%rdi
         :	         * argument being an actual table entry, and the second argument being
         :	         * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
         :	         * could be supported too, but is not currently used by dynahash.c.
         :	         */
         :	        Assert(tuple1 != NULL);
         :	        slot1 = hashtable->tableslot;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:558
   75.00 :	  5a9523:       4c 8b 63 40             mov    0x40(%rbx),%r12
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
    0.00 :	  5a9527:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5a952a:       e8 b1 ae 00 00          callq  5b43e0 <ExecStoreMinimalTuple>
         :	        Assert(tuple2 == NULL);
         :	        slot2 = hashtable->inputslot;
         :
         :	        /* For crosstype comparisons, the inputslot must be first */
         :	        if (execTuplesMatch(slot2,
    0.00 :	  5a952f:       48 8b 4b 10             mov    0x10(%rbx),%rcx
    0.00 :	  5a9533:       8b 53 08                mov    0x8(%rbx),%edx
    0.00 :	  5a9536:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5a9539:       48 8b 7b 48             mov    0x48(%rbx),%rdi
    0.00 :	  5a953d:       4c 8b 4b 30             mov    0x30(%rbx),%r9
    0.00 :	  5a9541:       4c 8b 43 58             mov    0x58(%rbx),%r8
    0.00 :	  5a9545:       e8 f6 fe ff ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5a954a:       84 c0                   test   %al,%al
         :	                                                hashtable->cur_eq_funcs,
         :	                                                hashtable->tempcxt))
         :	                return 0;
         :	        else
         :	                return 1;
         :	}
    0.00 :	  5a954c:       5b                      pop    %rbx
         :	        ExecStoreMinimalTuple(tuple1, slot1, false);
         :	        Assert(tuple2 == NULL);
         :	        slot2 = hashtable->inputslot;
         :
         :	        /* For crosstype comparisons, the inputslot must be first */
         :	        if (execTuplesMatch(slot2,
    0.00 :	  5a954d:       0f 94 c0                sete   %al
    0.00 :	  5a9550:       0f b6 c0                movzbl %al,%eax
         :	                                                hashtable->cur_eq_funcs,
         :	                                                hashtable->tempcxt))
         :	                return 0;
         :	        else
         :	                return 1;
         :	}
    0.00 :	  5a9553:       41 5c                   pop    %r12
    0.00 :	  5a9555:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2509
   37.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2509
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2509
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006d3ee0 <float48mul>:
         :	        PG_RETURN_FLOAT8(result);
         :	}
         :
         :	Datum
         :	float48mul(PG_FUNCTION_ARGS)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:2509
   50.00 :	  6d3ee0:       55                      push   %rbp
   37.50 :	  6d3ee1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6d3ee4:       53                      push   %rbx
   12.50 :	  6d3ee5:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6d3ee8:       48 83 ec 28             sub    $0x28,%rsp
         :	        float4          arg1 = PG_GETARG_FLOAT4(0);
    0.00 :	  6d3eec:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6d3ef0:       e8 bb 9a 0a 00          callq  77d9b0 <DatumGetFloat4>
    0.00 :	  6d3ef5:       f3 0f 11 45 e4          movss  %xmm0,-0x1c(%rbp)
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
    0.00 :	  6d3efa:       48 8b 7b 28             mov    0x28(%rbx),%rdi
    0.00 :	  6d3efe:       e8 cd 9a 0a 00          callq  77d9d0 <DatumGetFloat8>
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
    0.00 :	  6d3f03:       f3 0f 10 4d e4          movss  -0x1c(%rbp),%xmm1
         :
         :	Datum
         :	float48mul(PG_FUNCTION_ARGS)
         :	{
         :	        float4          arg1 = PG_GETARG_FLOAT4(0);
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
    0.00 :	  6d3f08:       f2 0f 11 45 e8          movsd  %xmm0,-0x18(%rbp)
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
    0.00 :	  6d3f0d:       0f 5a c9                cvtps2pd %xmm1,%xmm1
    0.00 :	  6d3f10:       f2 0f 59 c8             mulsd  %xmm0,%xmm1
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
    0.00 :	  6d3f14:       66 0f 28 c1             movapd %xmm1,%xmm0
    0.00 :	  6d3f18:       f2 0f 11 4d d0          movsd  %xmm1,-0x30(%rbp)
    0.00 :	  6d3f1d:       e8 ce 5b d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3f22:       85 c0                   test   %eax,%eax
    0.00 :	  6d3f24:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3f29:       75 45                   jne    6d3f70 <float48mul+0x90>
    0.00 :	  6d3f2b:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  6d3f2f:       66 0f 2e c8             ucomisd %xmm0,%xmm1
    0.00 :	  6d3f33:       75 29                   jne    6d3f5e <float48mul+0x7e>
    0.00 :	  6d3f35:       7a 27                   jp     6d3f5e <float48mul+0x7e>
    0.00 :	  6d3f37:       f3 0f 10 55 e4          movss  -0x1c(%rbp),%xmm2
    0.00 :	  6d3f3c:       0f 2e 15 9d e3 0d 00    ucomiss 0xde39d(%rip),%xmm2        # 7b22e0 <__func__.14992+0xd7>
    0.00 :	  6d3f43:       7a 02                   jp     6d3f47 <float48mul+0x67>
    0.00 :	  6d3f45:       74 17                   je     6d3f5e <float48mul+0x7e>
    0.00 :	  6d3f47:       f2 0f 10 55 e8          movsd  -0x18(%rbp),%xmm2
    0.00 :	  6d3f4c:       66 0f 2e d0             ucomisd %xmm0,%xmm2
    0.00 :	  6d3f50:       0f 8a 85 00 00 00       jp     6d3fdb <float48mul+0xfb>
    0.00 :	  6d3f56:       66 90                   xchg   %ax,%ax
    0.00 :	  6d3f58:       0f 85 7d 00 00 00       jne    6d3fdb <float48mul+0xfb>
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
         :	}
    0.00 :	  6d3f5e:       48 83 c4 28             add    $0x28,%rsp
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3f62:       66 0f 28 c1             movapd %xmm1,%xmm0
         :	}
    0.00 :	  6d3f66:       5b                      pop    %rbx
    0.00 :	  6d3f67:       c9                      leaveq 
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
         :	                                  arg1 == 0 || arg2 == 0);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d3f68:       e9 53 9a 0a 00          jmpq   77d9c0 <Float8GetDatum>
    0.00 :	  6d3f6d:       0f 1f 00                nopl   (%rax)
         :	        float4          arg1 = PG_GETARG_FLOAT4(0);
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
         :	        float8          result;
         :
         :	        result = arg1 * arg2;
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2),
    0.00 :	  6d3f70:       f3 0f 10 45 e4          movss  -0x1c(%rbp),%xmm0
    0.00 :	  6d3f75:       e8 b6 57 d9 ff          callq  469730 <__isinff@plt>
    0.00 :	  6d3f7a:       85 c0                   test   %eax,%eax
    0.00 :	  6d3f7c:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3f81:       75 a8                   jne    6d3f2b <float48mul+0x4b>
    0.00 :	  6d3f83:       f2 0f 10 45 e8          movsd  -0x18(%rbp),%xmm0
    0.00 :	  6d3f88:       e8 63 5b d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d3f8d:       85 c0                   test   %eax,%eax
    0.00 :	  6d3f8f:       f2 0f 10 4d d0          movsd  -0x30(%rbp),%xmm1
    0.00 :	  6d3f94:       75 95                   jne    6d3f2b <float48mul+0x4b>
    0.00 :	  6d3f96:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d3f99:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d3f9e:       b9 f9 b8 8b 00          mov    $0x8bb8f9,%ecx
    0.00 :	  6d3fa3:       ba d4 09 00 00          mov    $0x9d4,%edx
    0.00 :	  6d3fa8:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d3fad:       e8 0e 6b 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d3fb2:       84 c0                   test   %al,%al
    0.00 :	  6d3fb4:       bf 2f b4 8b 00          mov    $0x8bb42f,%edi
    0.00 :	  6d3fb9:       74 40                   je     6d3ffb <float48mul+0x11b>
    0.00 :	  6d3fbb:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3fbd:       e8 de 88 0a 00          callq  77c8a0 <errmsg>
    0.00 :	  6d3fc2:       bf 82 00 00 03          mov    $0x3000082,%edi
    0.00 :	  6d3fc7:       89 c3                   mov    %eax,%ebx
    0.00 :	  6d3fc9:       e8 82 8d 0a 00          callq  77cd50 <errcode>
    0.00 :	  6d3fce:       89 de                   mov    %ebx,%esi
    0.00 :	  6d3fd0:       89 c7                   mov    %eax,%edi
    0.00 :	  6d3fd2:       31 c0                   xor    %eax,%eax
    0.00 :	  6d3fd4:       e8 07 66 0a 00          callq  77a5e0 <errfinish>
    0.00 :	  6d3fd9:       eb 20                   jmp    6d3ffb <float48mul+0x11b>
    0.00 :	  6d3fdb:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d3fde:       b9 f9 b8 8b 00          mov    $0x8bb8f9,%ecx
    0.00 :	  6d3fe3:       ba d4 09 00 00          mov    $0x9d4,%edx
    0.00 :	  6d3fe8:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d3fed:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d3ff2:       e8 c9 6a 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d3ff7:       84 c0                   test   %al,%al
    0.00 :	  6d3ff9:       75 05                   jne    6d4000 <float48mul+0x120>
    0.00 :	  6d3ffb:       e8 d0 54 d9 ff          callq  4694d0 <abort@plt>
    0.00 :	  6d4000:       bf 4c b4 8b 00          mov    $0x8bb44c,%edi
    0.00 :	  6d4005:       eb b4                   jmp    6d3fbb <float48mul+0xdb>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   37.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:804
   37.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:809
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:809
   12.50 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:812
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006d4780 <float8pl>:
         :	 *              float8mul               - returns arg1 * arg2
         :	 *              float8div               - returns arg1 / arg2
         :	 */
         :	Datum
         :	float8pl(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6d4780:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:804
   37.50 :	  6d4781:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6d4784:       53                      push   %rbx
    0.00 :	  6d4785:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6d4788:       48 83 ec 18             sub    $0x18,%rsp
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
    0.00 :	  6d478c:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6d4790:       e8 3b 92 0a 00          callq  77d9d0 <DatumGetFloat8>
    0.00 :	  6d4795:       f2 0f 11 45 e0          movsd  %xmm0,-0x20(%rbp)
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
    0.00 :	  6d479a:       48 8b 7b 28             mov    0x28(%rbx),%rdi
    0.00 :	  6d479e:       e8 2d 92 0a 00          callq  77d9d0 <DatumGetFloat8>
    0.00 :	  6d47a3:       f2 0f 11 45 e8          movsd  %xmm0,-0x18(%rbp)
         :	        float8          result;
         :
         :	        result = arg1 + arg2;
    0.00 :	  6d47a8:       f2 0f 10 45 e0          movsd  -0x20(%rbp),%xmm0
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:809
   12.50 :	  6d47ad:       f2 0f 58 45 e8          addsd  -0x18(%rbp),%xmm0
   37.50 :	  6d47b2:       f2 0f 11 45 f0          movsd  %xmm0,-0x10(%rbp)
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
    0.00 :	  6d47b7:       e8 34 53 d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d47bc:       85 c0                   test   %eax,%eax
    0.00 :	  6d47be:       74 0e                   je     6d47ce <float8pl+0x4e>
    0.00 :	  6d47c0:       f2 0f 10 45 e0          movsd  -0x20(%rbp),%xmm0
    0.00 :	  6d47c5:       e8 26 53 d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d47ca:       85 c0                   test   %eax,%eax
    0.00 :	  6d47cc:       74 12                   je     6d47e0 <float8pl+0x60>
         :	        PG_RETURN_FLOAT8(result);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:812
   12.50 :	  6d47ce:       f2 0f 10 45 f0          movsd  -0x10(%rbp),%xmm0
         :	}
    0.00 :	  6d47d3:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  6d47d7:       5b                      pop    %rbx
    0.00 :	  6d47d8:       c9                      leaveq 
         :	        float8          result;
         :
         :	        result = arg1 + arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
         :	        PG_RETURN_FLOAT8(result);
    0.00 :	  6d47d9:       e9 e2 91 0a 00          jmpq   77d9c0 <Float8GetDatum>
    0.00 :	  6d47de:       66 90                   xchg   %ax,%ax
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
         :	        float8          result;
         :
         :	        result = arg1 + arg2;
         :
         :	        CHECKFLOATVAL(result, isinf(arg1) || isinf(arg2), true);
    0.00 :	  6d47e0:       f2 0f 10 45 e8          movsd  -0x18(%rbp),%xmm0
    0.00 :	  6d47e5:       e8 06 53 d9 ff          callq  469af0 <__isinf@plt>
    0.00 :	  6d47ea:       85 c0                   test   %eax,%eax
    0.00 :	  6d47ec:       75 e0                   jne    6d47ce <float8pl+0x4e>
    0.00 :	  6d47ee:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6d47f1:       b9 31 bb 8b 00          mov    $0x8bbb31,%ecx
    0.00 :	  6d47f6:       ba 2b 03 00 00          mov    $0x32b,%edx
    0.00 :	  6d47fb:       be 27 b4 8b 00          mov    $0x8bb427,%esi
    0.00 :	  6d4800:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6d4805:       e8 b6 62 0a 00          callq  77aac0 <errstart>
    0.00 :	  6d480a:       84 c0                   test   %al,%al
    0.00 :	  6d480c:       75 05                   jne    6d4813 <float8pl+0x93>
    0.00 :	  6d480e:       e8 bd 4c d9 ff          callq  4694d0 <abort@plt>
    0.00 :	  6d4813:       bf 2f b4 8b 00          mov    $0x8bb42f,%edi
    0.00 :	  6d4818:       31 c0                   xor    %eax,%eax
    0.00 :	  6d481a:       e8 81 80 0a 00          callq  77c8a0 <errmsg>
    0.00 :	  6d481f:       bf 82 00 00 03          mov    $0x3000082,%edi
    0.00 :	  6d4824:       89 c3                   mov    %eax,%ebx
    0.00 :	  6d4826:       e8 25 85 0a 00          callq  77cd50 <errcode>
    0.00 :	  6d482b:       89 de                   mov    %ebx,%esi
    0.00 :	  6d482d:       89 c7                   mov    %eax,%edi
    0.00 :	  6d482f:       31 c0                   xor    %eax,%eax
    0.00 :	  6d4831:       e8 aa 5d 0a 00          callq  77a5e0 <errfinish>
    0.00 :	  6d4836:       eb d6                   jmp    6d480e <float8pl+0x8e>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:513
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:493
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:479
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:504
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:526
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005a9120 <TupleHashTableHash>:
         :	 * Also, the caller must select an appropriate memory context for running
         :	 * the hash functions. (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static uint32
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:479
   14.29 :	  5a9120:       55                      push   %rbp
    0.00 :	  5a9121:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5a9124:       41 57                   push   %r15
    0.00 :	  5a9126:       41 56                   push   %r14
    0.00 :	  5a9128:       41 55                   push   %r13
    0.00 :	  5a912a:       41 54                   push   %r12
    0.00 :	  5a912c:       53                      push   %rbx
    0.00 :	  5a912d:       48 83 ec 18             sub    $0x18,%rsp
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
    0.00 :	  5a9131:       48 8b 1d 88 07 5d 00    mov    0x5d0788(%rip),%rbx        # b798c0 <CurTupleHashTable>
         :	 * the hash functions. (dynahash.c doesn't change CurrentMemoryContext.)
         :	 */
         :	static uint32
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
    0.00 :	  5a9138:       48 8b 3f                mov    (%rdi),%rdi
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
         :	        int                     numCols = hashtable->numCols;
    0.00 :	  5a913b:       8b 43 08                mov    0x8(%rbx),%eax
         :	        AttrNumber *keyColIdx = hashtable->keyColIdx;
         :	        FmgrInfo   *hashfunctions;
         :	        uint32          hashkey = 0;
         :	        int                     i;
         :
         :	        if (tuple == NULL)
    0.00 :	  5a913e:       48 85 ff                test   %rdi,%rdi
         :	TupleHashTableHash(const void *key, Size keysize)
         :	{
         :	        MinimalTuple tuple = ((const TupleHashEntryData *) key)->firstTuple;
         :	        TupleTableSlot *slot;
         :	        TupleHashTable hashtable = CurTupleHashTable;
         :	        int                     numCols = hashtable->numCols;
    0.00 :	  5a9141:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	        AttrNumber *keyColIdx = hashtable->keyColIdx;
    0.00 :	  5a9144:       4c 8b 63 10             mov    0x10(%rbx),%r12
         :	        FmgrInfo   *hashfunctions;
         :	        uint32          hashkey = 0;
         :	        int                     i;
         :
         :	        if (tuple == NULL)
    0.00 :	  5a9148:       0f 84 8a 00 00 00       je     5a91d8 <TupleHashTableHash+0xb8>
         :	        }
         :	        else
         :	        {
         :	                /* Process a tuple already stored in the table */
         :	                /* (this case never actually occurs in current dynahash.c code) */
         :	                slot = hashtable->tableslot;
    0.00 :	  5a914e:       4c 8b 7b 40             mov    0x40(%rbx),%r15
         :	                ExecStoreMinimalTuple(tuple, slot, false);
    0.00 :	  5a9152:       31 d2                   xor    %edx,%edx
    0.00 :	  5a9154:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5a9157:       e8 84 b2 00 00          callq  5b43e0 <ExecStoreMinimalTuple>
         :	                hashfunctions = hashtable->tab_hash_funcs;
    0.00 :	  5a915c:       48 8b 43 18             mov    0x18(%rbx),%rax
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a9160:       8b 55 c4                mov    -0x3c(%rbp),%edx
    0.00 :	  5a9163:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5a9166:       85 d2                   test   %edx,%edx
    0.00 :	  5a9168:       7e 58                   jle    5a91c2 <TupleHashTableHash+0xa2>
    0.00 :	  5a916a:       49 89 c6                mov    %rax,%r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:504
   14.29 :	  5a916d:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5a9170:       31 db                   xor    %ebx,%ebx
    0.00 :	  5a9172:       eb 14                   jmp    5a9188 <TupleHashTableHash+0x68>
    0.00 :	  5a9174:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  5a9178:       83 c3 01                add    $0x1,%ebx
    0.00 :	  5a917b:       49 83 c4 02             add    $0x2,%r12
    0.00 :	  5a917f:       49 83 c6 30             add    $0x30,%r14
    0.00 :	  5a9183:       39 5d c4                cmp    %ebx,-0x3c(%rbp)
    0.00 :	  5a9186:       7e 3a                   jle    5a91c2 <TupleHashTableHash+0xa2>
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
         :
         :	                attr = slot_getattr(slot, att, &isNull);
    0.00 :	  5a9188:       41 0f bf 34 24          movswl (%r12),%esi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:513
   28.57 :	  5a918d:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5a9191:       4c 89 ff                mov    %r15,%rdi
         :	                AttrNumber      att = keyColIdx[i];
         :	                Datum           attr;
         :	                bool            isNull;
         :
         :	                /* rotate hashkey left 1 bit at each step */
         :	                hashkey = (hashkey << 1) | ((hashkey & 0x80000000) ? 1 : 0);
    0.00 :	  5a9194:       41 d1 c5                rol    %r13d
         :
         :	                attr = slot_getattr(slot, att, &isNull);
    0.00 :	  5a9197:       e8 64 62 ec ff          callq  46f400 <slot_getattr>
         :
         :	                if (!isNull)                    /* treat nulls as having hash key 0 */
    0.00 :	  5a919c:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5a91a0:       75 d6                   jne    5a9178 <TupleHashTableHash+0x58>
         :	                {
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i],
    0.00 :	  5a91a2:       31 f6                   xor    %esi,%esi
    0.00 :	  5a91a4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5a91a7:       48 89 c2                mov    %rax,%rdx
    0.00 :	  5a91aa:       e8 21 4f 1d 00          callq  77e0d0 <FunctionCall1Coll>
         :	                slot = hashtable->tableslot;
         :	                ExecStoreMinimalTuple(tuple, slot, false);
         :	                hashfunctions = hashtable->tab_hash_funcs;
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a91af:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        uint32          hkey;
         :
         :	                        hkey = DatumGetUInt32(FunctionCall1(&hashfunctions[i],
         :	                                                                                                attr));
         :	                        hashkey ^= hkey;
    0.00 :	  5a91b2:       41 31 c5                xor    %eax,%r13d
         :	                slot = hashtable->tableslot;
         :	                ExecStoreMinimalTuple(tuple, slot, false);
         :	                hashfunctions = hashtable->tab_hash_funcs;
         :	        }
         :
         :	        for (i = 0; i < numCols; i++)
    0.00 :	  5a91b5:       49 83 c4 02             add    $0x2,%r12
    0.00 :	  5a91b9:       49 83 c6 30             add    $0x30,%r14
    0.00 :	  5a91bd:       39 5d c4                cmp    %ebx,-0x3c(%rbp)
    0.00 :	  5a91c0:       7f c6                   jg     5a9188 <TupleHashTableHash+0x68>
         :	                        hashkey ^= hkey;
         :	                }
         :	        }
         :
         :	        return hashkey;
         :	}
    0.00 :	  5a91c2:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5a91c6:       44 89 e8                mov    %r13d,%eax
    0.00 :	  5a91c9:       5b                      pop    %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:526
   14.29 :	  5a91ca:       41 5c                   pop    %r12
    0.00 :	  5a91cc:       41 5d                   pop    %r13
    0.00 :	  5a91ce:       41 5e                   pop    %r14
    0.00 :	  5a91d0:       41 5f                   pop    %r15
    0.00 :	  5a91d2:       c9                      leaveq 
    0.00 :	  5a91d3:       c3                      retq   
    0.00 :	  5a91d4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        int                     i;
         :
         :	        if (tuple == NULL)
         :	        {
         :	                /* Process the current input tuple for the table */
         :	                slot = hashtable->inputslot;
    0.00 :	  5a91d8:       4c 8b 7b 48             mov    0x48(%rbx),%r15
         :	                hashfunctions = hashtable->in_hash_funcs;
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execGrouping.c:493
   28.57 :	  5a91dc:       48 8b 43 50             mov    0x50(%rbx),%rax
    0.00 :	  5a91e0:       e9 7b ff ff ff          jmpq   5a9160 <TupleHashTableHash+0x40>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/../../../../src/include/storage/s_lock.h:224
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
   28.57 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3329
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006741d0 <TerminateBufferIO>:
         :	 * be 0, or BM_VALID if we just finished reading in the page.
         :	 */
         :	static void
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
   14.29 :	  6741d0:       55                      push   %rbp
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/../../../../src/include/storage/s_lock.h:224
   28.57 :	  6741d1:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6741d6:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6741d9:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3326
   28.57 :	  6741dd:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6741e1:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6741e4:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6741e8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  6741eb:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  6741ef:       41 89 d5                mov    %edx,%r13d
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  6741f2:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	  6741f6:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3329
   28.57 :	  6741f9:       84 c0                   test   %al,%al
    0.00 :	  6741fb:       75 53                   jne    674250 <TerminateBufferIO+0x80>
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  6741fd:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674201:       83 e0 e7                and    $0xffffffe7,%eax
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  674204:       45 84 e4                test   %r12b,%r12b
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
         :
         :	        Assert(buf->flags & BM_IO_IN_PROGRESS);
         :	        buf->flags &= ~(BM_IO_IN_PROGRESS | BM_IO_ERROR);
    0.00 :	  674207:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        if (clear_dirty && !(buf->flags & BM_JUST_DIRTIED))
    0.00 :	  67420b:       74 12                   je     67421f <TerminateBufferIO+0x4f>
    0.00 :	  67420d:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674211:       a8 20                   test   $0x20,%al
    0.00 :	  674213:       75 0a                   jne    67421f <TerminateBufferIO+0x4f>
         :	                buf->flags &= ~(BM_DIRTY | BM_CHECKPOINT_NEEDED);
    0.00 :	  674215:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674219:       24 7e                   and    $0x7e,%al
    0.00 :	  67421b:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	        buf->flags |= set_flag_bits;
    0.00 :	  67421f:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674223:       44 09 e8                or     %r13d,%eax
    0.00 :	  674226:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  67422a:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = NULL;
    0.00 :	  67422e:       48 c7 05 2f 8e 50 00    movq   $0x0,0x508e2f(%rip)        # b7d068 <InProgressBuf>
    0.00 :	  674235:       00 00 00 00 
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674239:       48 8b 7b 30             mov    0x30(%rbx),%rdi
         :	}
    0.00 :	  67423d:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674241:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674245:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674249:       c9                      leaveq 
         :
         :	        UnlockBufHdr(buf);
         :
         :	        InProgressBuf = NULL;
         :
         :	        LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67424a:       e9 51 b1 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67424f:       90                      nop
         :	TerminateBufferIO(volatile BufferDesc *buf, bool clear_dirty,
         :	                                  int set_flag_bits)
         :	{
         :	        Assert(buf == InProgressBuf);
         :
         :	        LockBufHdr(buf);
    0.00 :	  674250:       ba 01 0d 00 00          mov    $0xd01,%edx
    0.00 :	  674255:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67425a:       e8 e1 bd 01 00          callq  690040 <s_lock>
    0.00 :	  67425f:       eb 9c                   jmp    6741fd <TerminateBufferIO+0x2d>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   28.57 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:530
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:533
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:536
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000676570 <ReadBufferExtended>:
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
    0.00 :	  676570:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:509
   14.29 :	  676571:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  676574:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  676578:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  67657c:       48 89 fb                mov    %rdi,%rbx
   14.29 :	  67657f:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  676583:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  676587:       41 89 cd                mov    %ecx,%r13d
    0.00 :	  67658a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  67658e:       48 83 ec 40             sub    $0x40,%rsp
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676592:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * See buffer/README for details.
         :	 */
         :	Buffer
         :	ReadBufferExtended(Relation reln, ForkNumber forkNum, BlockNumber blockNum,
         :	                                   ReadBufferMode mode, BufferAccessStrategy strategy)
         :	{
   28.57 :	  676597:       41 89 f7                mov    %esi,%r15d
    0.00 :	  67659a:       41 89 d6                mov    %edx,%r14d
    0.00 :	  67659d:       4d 89 c4                mov    %r8,%r12
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6765a0:       0f 84 aa 00 00 00       je     676650 <ReadBufferExtended+0xe0>
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6765a6:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765aa:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
    0.00 :	  6765ae:       80 fa 74                cmp    $0x74,%dl
    0.00 :	  6765b1:       74 6d                   je     676620 <ReadBufferExtended+0xb0>
         :
         :	        /*
         :	         * Read the buffer, and update pgstat counters to reflect a cache hit or
         :	         * miss.
         :	         */
         :	        pgstat_count_buffer_read(reln);
    0.00 :	  6765b3:       48 8b 83 38 01 00 00    mov    0x138(%rbx),%rax
    0.00 :	  6765ba:       48 85 c0                test   %rax,%rax
    0.00 :	  6765bd:       74 0d                   je     6765cc <ReadBufferExtended+0x5c>
    0.00 :	  6765bf:       48 83 40 60 01          addq   $0x1,0x60(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:530
   14.29 :	  6765c4:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6765c8:       0f b6 50 6e             movzbl 0x6e(%rax),%edx
         :	        buf = ReadBuffer_common(reln->rd_smgr, reln->rd_rel->relpersistence,
    0.00 :	  6765cc:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  6765d0:       48 8d 45 d7             lea    -0x29(%rbp),%rax
    0.00 :	  6765d4:       0f be f2                movsbl %dl,%esi
    0.00 :	  6765d7:       4d 89 e1                mov    %r12,%r9
    0.00 :	  6765da:       45 89 e8                mov    %r13d,%r8d
    0.00 :	  6765dd:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  6765e0:       44 89 fa                mov    %r15d,%edx
    0.00 :	  6765e3:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	  6765e7:       e8 b4 f6 ff ff          callq  675ca0 <ReadBuffer_common>
         :	                                                        forkNum, blockNum, mode, strategy, &hit);
         :	        if (hit)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:533
   14.29 :	  6765ec:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  6765f0:       74 11                   je     676603 <ReadBufferExtended+0x93>
         :	                pgstat_count_buffer_hit(reln);
    0.00 :	  6765f2:       48 8b 93 38 01 00 00    mov    0x138(%rbx),%rdx
    0.00 :	  6765f9:       48 85 d2                test   %rdx,%rdx
    0.00 :	  6765fc:       74 05                   je     676603 <ReadBufferExtended+0x93>
    0.00 :	  6765fe:       48 83 42 68 01          addq   $0x1,0x68(%rdx)
         :	        return buf;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:536
   14.29 :	  676603:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  676607:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  67660b:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  67660f:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  676613:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  676617:       c9                      leaveq 
    0.00 :	  676618:       c3                      retq   
    0.00 :	  676619:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        /*
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  676620:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676624:       75 8d                   jne    6765b3 <ReadBufferExtended+0x43>
         :	                ereport(ERROR,
    0.00 :	  676626:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676629:       b9 c0 a0 8a 00          mov    $0x8aa0c0,%ecx
    0.00 :	  67662e:       ba 0c 02 00 00          mov    $0x20c,%edx
    0.00 :	  676633:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676638:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  67663d:       e8 7e 44 10 00          callq  77aac0 <errstart>
    0.00 :	  676642:       84 c0                   test   %al,%al
    0.00 :	  676644:       75 29                   jne    67666f <ReadBufferExtended+0xff>
    0.00 :	  676646:       e8 85 2e df ff          callq  4694d0 <abort@plt>
    0.00 :	  67664b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	{
         :	        bool            hit;
         :	        Buffer          buf;
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676650:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676653:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676656:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676659:       e8 d2 33 02 00          callq  699a30 <smgropen>
    0.00 :	  67665e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676662:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676665:       e8 96 2c 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67666a:       e9 37 ff ff ff          jmpq   6765a6 <ReadBufferExtended+0x36>
         :	         * Reject attempts to read non-local temporary relations; we would be
         :	         * likely to get wrong data since we have no visibility into the owning
         :	         * session's local buffers.
         :	         */
         :	        if (RELATION_IS_OTHER_TEMP(reln))
         :	                ereport(ERROR,
    0.00 :	  67666f:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  676674:       31 c0                   xor    %eax,%eax
    0.00 :	  676676:       e8 25 62 10 00          callq  77c8a0 <errmsg>
    0.00 :	  67667b:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  676680:       89 c3                   mov    %eax,%ebx
    0.00 :	  676682:       e8 c9 66 10 00          callq  77cd50 <errcode>
    0.00 :	  676687:       89 de                   mov    %ebx,%esi
    0.00 :	  676689:       89 c7                   mov    %eax,%edi
    0.00 :	  67668b:       31 c0                   xor    %eax,%eax
    0.00 :	  67668d:       e8 4e 3f 10 00          callq  77a5e0 <errfinish>
    0.00 :	  676692:       eb b2                   jmp    676646 <ReadBufferExtended+0xd6>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   57.14 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
   14.29 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:96
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000694ed0 <PageIsVerified>:
         :	 * treat such a page as empty and without free space.  Eventually, VACUUM
         :	 * will clean up such a page and make it usable.
         :	 */
         :	bool
         :	PageIsVerified(Page page, BlockNumber blkno)
         :	{
    0.00 :	  694ed0:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:82
   57.14 :	  694ed1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  694ed4:       41 55                   push   %r13
   14.29 :	  694ed6:       41 54                   push   %r12
    0.00 :	  694ed8:       41 89 f4                mov    %esi,%r12d
    0.00 :	  694edb:       53                      push   %rbx
    0.00 :	  694edc:       48 89 fb                mov    %rdi,%rbx
   14.29 :	  694edf:       48 83 ec 08             sub    $0x8,%rsp
         :	        uint16          checksum = 0;
         :
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
    0.00 :	  694ee3:       66 83 7f 0e 00          cmpw   $0x0,0xe(%rdi)
    0.00 :	  694ee8:       75 56                   jne    694f40 <PageIsVerified+0x70>
    0.00 :	  694eea:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694eed:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694ef0:       31 c9                   xor    %ecx,%ecx
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694ef2:       31 c0                   xor    %eax,%eax
    0.00 :	  694ef4:       eb 16                   jmp    694f0c <PageIsVerified+0x3c>
    0.00 :	  694ef6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  694efd:       00 00 00 
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f00:       48 83 c0 01             add    $0x1,%rax
         :	        }
         :
         :	        /* Check all-zeroes case */
         :	        all_zeroes = true;
         :	        pagebytes = (char *) page;
         :	        for (i = 0; i < BLCKSZ; i++)
    0.00 :	  694f04:       48 3d 00 20 00 00       cmp    $0x2000,%rax
    0.00 :	  694f0a:       74 24                   je     694f30 <PageIsVerified+0x60>
         :	        {
         :	                if (pagebytes[i] != 0)
    0.00 :	  694f0c:       80 3c 03 00             cmpb   $0x0,(%rbx,%rax,1)
    0.00 :	  694f10:       74 ee                   je     694f00 <PageIsVerified+0x30>
         :
         :	        /*
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
    0.00 :	  694f12:       84 c9                   test   %cl,%cl
    0.00 :	  694f14:       0f 85 86 00 00 00       jne    694fa0 <PageIsVerified+0xd0>
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f1a:       31 c0                   xor    %eax,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f1c:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  694f20:       5b                      pop    %rbx
    0.00 :	  694f21:       41 5c                   pop    %r12
    0.00 :	  694f23:       41 5d                   pop    %r13
    0.00 :	  694f25:       c9                      leaveq 
    0.00 :	  694f26:       c3                      retq   
    0.00 :	  694f27:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  694f2e:       00 00 
    0.00 :	  694f30:       48 83 c4 08             add    $0x8,%rsp
         :	                ereport(WARNING,
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694f34:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        return true;
         :	        }
         :
         :	        return false;
         :	}
    0.00 :	  694f39:       5b                      pop    %rbx
    0.00 :	  694f3a:       41 5c                   pop    %r12
    0.00 :	  694f3c:       41 5d                   pop    %r13
    0.00 :	  694f3e:       c9                      leaveq 
    0.00 :	  694f3f:       c3                      retq   
         :	        /*
         :	         * Don't verify page data unless the page passes basic non-zero test
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
 /home/Computational/mark/src/postgres-andres/src/backend/storage/page/bufpage.c:96
   14.29 :	  694f40:       e8 7b 80 e3 ff          callq  4ccfc0 <DataChecksumsEnabled>
    0.00 :	  694f45:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  694f48:       31 c9                   xor    %ecx,%ecx
    0.00 :	  694f4a:       84 c0                   test   %al,%al
    0.00 :	  694f4c:       0f 85 96 00 00 00       jne    694fe8 <PageIsVerified+0x118>
         :	                 * The following checks don't prove the header is correct, only that
         :	                 * it looks sane enough to allow into the buffer pool. Later usage of
         :	                 * the block can still reveal problems, which is why we offer the
         :	                 * checksum option.
         :	                 */
         :	                if ((p->pd_flags & ~PD_VALID_FLAG_BITS) == 0 &&
    0.00 :	  694f52:       0f b7 43 0a             movzwl 0xa(%rbx),%eax
    0.00 :	  694f56:       a9 f8 ff 00 00          test   $0xfff8,%eax
    0.00 :	  694f5b:       0f 85 7f 00 00 00       jne    694fe0 <PageIsVerified+0x110>
    0.00 :	  694f61:       0f b7 43 0e             movzwl 0xe(%rbx),%eax
    0.00 :	  694f65:       66 39 43 0c             cmp    %ax,0xc(%rbx)
    0.00 :	  694f69:       77 75                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f6b:       0f b7 53 10             movzwl 0x10(%rbx),%edx
    0.00 :	  694f6f:       66 39 d0                cmp    %dx,%ax
    0.00 :	  694f72:       77 6c                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f74:       66 81 fa 00 20          cmp    $0x2000,%dx
    0.00 :	  694f79:       77 65                   ja     694fe0 <PageIsVerified+0x110>
    0.00 :	  694f7b:       0f b7 d2                movzwl %dx,%edx
    0.00 :	  694f7e:       48 8d 42 07             lea    0x7(%rdx),%rax
    0.00 :	  694f82:       48 83 e0 f8             and    $0xfffffffffffffff8,%rax
    0.00 :	  694f86:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  694f89:       75 55                   jne    694fe0 <PageIsVerified+0x110>
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694f8b:       84 c9                   test   %cl,%cl
    0.00 :	  694f8d:       74 a1                   je     694f30 <PageIsVerified+0x60>
    0.00 :	  694f8f:       41 bc 01 00 00 00       mov    $0x1,%r12d
    0.00 :	  694f95:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  694f9a:       e9 53 ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
    0.00 :	  694f9f:       90                      nop
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  694fa0:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  694fa3:       b9 e4 de 8a 00          mov    $0x8adee4,%ecx
    0.00 :	  694fa8:       ba 91 00 00 00          mov    $0x91,%edx
    0.00 :	  694fad:       be 33 dc 8a 00          mov    $0x8adc33,%esi
    0.00 :	  694fb2:       bf 13 00 00 00          mov    $0x13,%edi
    0.00 :	  694fb7:       e8 04 5b 0e 00          callq  77aac0 <errstart>
    0.00 :	  694fbc:       84 c0                   test   %al,%al
    0.00 :	  694fbe:       75 42                   jne    695002 <PageIsVerified+0x132>
         :	                                (ERRCODE_DATA_CORRUPTED,
         :	                                 errmsg("page verification failed, calculated checksum %u but expected %u",
         :	                                                checksum, p->pd_checksum)));
         :
         :	                if (header_sane && ignore_checksum_failure)
    0.00 :	  694fc0:       45 84 e4                test   %r12b,%r12b
    0.00 :	  694fc3:       0f 84 51 ff ff ff       je     694f1a <PageIsVerified+0x4a>
    0.00 :	  694fc9:       80 3d b8 97 4e 00 00    cmpb   $0x0,0x4e97b8(%rip)        # b7e788 <ignore_checksum_failure>
    0.00 :	  694fd0:       0f 95 c0                setne  %al
    0.00 :	  694fd3:       e9 44 ff ff ff          jmpq   694f1c <PageIsVerified+0x4c>
    0.00 :	  694fd8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  694fdf:       00 
         :	                        p->pd_upper <= p->pd_special &&
         :	                        p->pd_special <= BLCKSZ &&
         :	                        p->pd_special == MAXALIGN(p->pd_special))
         :	                        header_sane = true;
         :
         :	                if (header_sane && !checksum_failure)
    0.00 :	  694fe0:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  694fe3:       e9 0a ff ff ff          jmpq   694ef2 <PageIsVerified+0x22>
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694fe8:       44 89 e6                mov    %r12d,%esi
    0.00 :	  694feb:       48 89 df                mov    %rbx,%rdi
    0.00 :	  694fee:       e8 7d 13 00 00          callq  696370 <pg_checksum_page>
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ff3:       66 3b 43 08             cmp    0x8(%rbx),%ax
         :	         */
         :	        if (!PageIsNew(page))
         :	        {
         :	                if (DataChecksumsEnabled())
         :	                {
         :	                        checksum = pg_checksum_page((char *) page, blkno);
    0.00 :	  694ff7:       41 89 c5                mov    %eax,%r13d
         :
         :	                        if (checksum != p->pd_checksum)
    0.00 :	  694ffa:       0f 95 c1                setne  %cl
    0.00 :	  694ffd:       e9 50 ff ff ff          jmpq   694f52 <PageIsVerified+0x82>
         :	         * Throw a WARNING if the checksum fails, but only after we've checked for
         :	         * the all-zeroes case.
         :	         */
         :	        if (checksum_failure)
         :	        {
         :	                ereport(WARNING,
    0.00 :	  695002:       0f b7 53 08             movzwl 0x8(%rbx),%edx
    0.00 :	  695006:       41 0f b7 f5             movzwl %r13w,%esi
    0.00 :	  69500a:       bf 78 dc 8a 00          mov    $0x8adc78,%edi
    0.00 :	  69500f:       31 c0                   xor    %eax,%eax
    0.00 :	  695011:       e8 8a 78 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  695016:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  69501b:       89 c6                   mov    %eax,%esi
    0.00 :	  69501d:       31 c0                   xor    %eax,%eax
    0.00 :	  69501f:       e8 bc 55 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  695024:       eb 9a                   jmp    694fc0 <PageIsVerified+0xf0>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:364
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005ac4a0 <ExecProcNode>:
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4a0:       0f b6 05 e9 db 60 00    movzbl 0x60dbe9(%rip),%eax        # bba090 <InterruptPending>
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4a7:       55                      push   %rbp
    0.00 :	  5ac4a8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5ac4ab:       41 54                   push   %r12
    0.00 :	  5ac4ad:       49 89 fc                mov    %rdi,%r12
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b0:       84 c0                   test   %al,%al
         :	 *              Execute the given node to return a(nother) tuple.
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
    0.00 :	  5ac4b2:       53                      push   %rbx
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac4b3:       75 6b                   jne    5ac520 <ExecProcNode+0x80>
         :
         :	        if (node->chgParam != NULL) /* something changed */
    0.00 :	  5ac4b5:       49 83 7c 24 50 00       cmpq   $0x0,0x50(%r12)
    0.00 :	  5ac4bb:       74 08                   je     5ac4c5 <ExecProcNode+0x25>
         :	                ExecReScan(node);               /* let ReScan handle this */
    0.00 :	  5ac4bd:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac4c0:       e8 db bf ff ff          callq  5a84a0 <ExecReScan>
         :
         :	        if (node->instrument)
    0.00 :	  5ac4c5:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:364
   16.67 :	  5ac4ca:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac4cd:       74 05                   je     5ac4d4 <ExecProcNode+0x34>
         :	                InstrStartNode(node->instrument);
    0.00 :	  5ac4cf:       e8 2c ba 00 00          callq  5b7f00 <InstrStartNode>
         :
         :	        switch (nodeTag(node))
    0.00 :	  5ac4d4:       41 8b 04 24             mov    (%r12),%eax
    0.00 :	  5ac4d8:       2d c9 00 00 00          sub    $0xc9,%eax
    0.00 :	  5ac4dd:       83 f8 21                cmp    $0x21,%eax
    0.00 :	  5ac4e0:       76 2e                   jbe    5ac510 <ExecProcNode+0x70>
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
         :	                        break;
         :
         :	                default:
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
    0.00 :	  5ac4e2:       ba e2 a3 88 00          mov    $0x88a3e2,%edx
    0.00 :	  5ac4e7:       be f8 01 00 00          mov    $0x1f8,%esi
    0.00 :	  5ac4ec:       bf 75 a0 88 00          mov    $0x88a075,%edi
    0.00 :	  5ac4f1:       e8 2a ef 1c 00          callq  77b420 <elog_start>
    0.00 :	  5ac4f6:       41 8b 14 24             mov    (%r12),%edx
    0.00 :	  5ac4fa:       be 5c 17 87 00          mov    $0x87175c,%esi
    0.00 :	  5ac4ff:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5ac504:       31 c0                   xor    %eax,%eax
    0.00 :	  5ac506:       e8 25 ed 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5ac50b:       e8 c0 cf eb ff          callq  4694d0 <abort@plt>
         :	                ExecReScan(node);               /* let ReScan handle this */
         :
         :	        if (node->instrument)
         :	                InstrStartNode(node->instrument);
         :
         :	        switch (nodeTag(node))
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:367
   16.67 :	  5ac510:       89 c0                   mov    %eax,%eax
    0.00 :	  5ac512:       ff 24 c5 a0 a1 88 00    jmpq   *0x88a1a0(,%rax,8)
    0.00 :	  5ac519:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	TupleTableSlot *
         :	ExecProcNode(PlanState *node)
         :	{
         :	        TupleTableSlot *result;
         :
         :	        CHECK_FOR_INTERRUPTS();
    0.00 :	  5ac520:       e8 7b fd 0e 00          callq  69c2a0 <ProcessInterrupts>
    0.00 :	  5ac525:       eb 8e                   jmp    5ac4b5 <ExecProcNode+0x15>
    0.00 :	  5ac527:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5ac52e:       00 00 
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
         :	                        break;
         :
         :	                case T_LimitState:
         :	                        result = ExecLimit((LimitState *) node);
    0.00 :	  5ac530:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac533:       e8 a8 3c 01 00          callq  5c01e0 <ExecLimit>
    0.00 :	  5ac538:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5ac53b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                        elog(ERROR, "unrecognized node type: %d", (int) nodeTag(node));
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
    0.00 :	  5ac540:       49 8b 7c 24 18          mov    0x18(%r12),%rdi
    0.00 :	  5ac545:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ac548:       74 20                   je     5ac56a <ExecProcNode+0xca>
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac54a:       48 85 db                test   %rbx,%rbx
    0.00 :	  5ac54d:       0f 84 ed 01 00 00       je     5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac553:       80 7b 04 00             cmpb   $0x0,0x4(%rbx)
    0.00 :	  5ac557:       0f 85 e3 01 00 00       jne    5ac740 <ExecProcNode+0x2a0>
    0.00 :	  5ac55d:       f2 0f 10 05 f3 2b 20    movsd  0x202bf3(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5ac564:       00 
    0.00 :	  5ac565:       e8 66 b6 00 00          callq  5b7bd0 <InstrStopNode>
         :
         :	        return result;
         :	}
    0.00 :	  5ac56a:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5ac56d:       5b                      pop    %rbx
    0.00 :	  5ac56e:       41 5c                   pop    %r12
    0.00 :	  5ac570:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:513
   16.67 :	  5ac571:       c3                      retq   
    0.00 :	  5ac572:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
         :	                        break;
         :
         :	                case T_LockRowsState:
         :	                        result = ExecLockRows((LockRowsState *) node);
    0.00 :	  5ac578:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac57b:       e8 a0 40 01 00          callq  5c0620 <ExecLockRows>
    0.00 :	  5ac580:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac583:       eb bb                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac585:       0f 1f 00                nopl   (%rax)
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
         :	                        break;
         :
         :	                case T_SetOpState:
         :	                        result = ExecSetOp((SetOpState *) node);
    0.00 :	  5ac588:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac58b:       e8 60 98 01 00          callq  5c5df0 <ExecSetOp>
    0.00 :	  5ac590:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac593:       eb ab                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac595:       0f 1f 00                nopl   (%rax)
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
         :	                        break;
         :
         :	                case T_HashState:
         :	                        result = ExecHash((HashState *) node);
    0.00 :	  5ac598:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac59b:       e8 d0 02 01 00          callq  5bc870 <ExecHash>
    0.00 :	  5ac5a0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5a3:       eb 9b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5a5:       0f 1f 00                nopl   (%rax)
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
         :	                        break;
         :
         :	                case T_UniqueState:
         :	                        result = ExecUnique((UniqueState *) node);
    0.00 :	  5ac5a8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5ab:       e8 20 a0 01 00          callq  5c65d0 <ExecUnique>
    0.00 :	  5ac5b0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5b3:       eb 8b                   jmp    5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5b5:       0f 1f 00                nopl   (%rax)
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
         :	                        break;
         :
         :	                case T_WindowAggState:
         :	                        result = ExecWindowAgg((WindowAggState *) node);
    0.00 :	  5ac5b8:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5bb:       e8 90 00 02 00          callq  5cc650 <ExecWindowAgg>
    0.00 :	  5ac5c0:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5c3:       e9 78 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
    0.00 :	  5ac5c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5ac5cf:       00 
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
         :	                        break;
         :
         :	                case T_AggState:
         :	                        result = ExecAgg((AggState *) node);
    0.00 :	  5ac5d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5d3:       e8 a8 d7 00 00          callq  5b9d80 <ExecAgg>
    0.00 :	  5ac5d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5db:       e9 60 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
         :	                        break;
         :
         :	                case T_GroupState:
         :	                        result = ExecGroup((GroupState *) node);
    0.00 :	  5ac5e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5e3:       e8 88 ab 01 00          callq  5c7170 <ExecGroup>
    0.00 :	  5ac5e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5eb:       e9 50 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
         :	                        break;
         :
         :	                case T_SortState:
         :	                        result = ExecSort((SortState *) node);
    0.00 :	  5ac5f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac5f3:       e8 48 9d 01 00          callq  5c6340 <ExecSort>
    0.00 :	  5ac5f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac5fb:       e9 40 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * materialization nodes
         :	                         */
         :	                case T_MaterialState:
         :	                        result = ExecMaterial((MaterialState *) node);
    0.00 :	  5ac600:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac603:       e8 38 47 01 00          callq  5c0d40 <ExecMaterial>
    0.00 :	  5ac608:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac60b:       e9 30 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
         :	                        break;
         :
         :	                case T_HashJoinState:
         :	                        result = ExecHashJoin((HashJoinState *) node);
    0.00 :	  5ac610:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac613:       e8 88 14 01 00          callq  5bdaa0 <ExecHashJoin>
    0.00 :	  5ac618:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac61b:       e9 20 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
         :	                        break;
         :
         :	                case T_MergeJoinState:
         :	                        result = ExecMergeJoin((MergeJoinState *) node);
    0.00 :	  5ac620:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac623:       e8 08 5a 01 00          callq  5c2030 <ExecMergeJoin>
    0.00 :	  5ac628:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac62b:       e9 10 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * join nodes
         :	                         */
         :	                case T_NestLoopState:
         :	                        result = ExecNestLoop((NestLoopState *) node);
    0.00 :	  5ac630:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac633:       e8 08 7c 01 00          callq  5c4240 <ExecNestLoop>
    0.00 :	  5ac638:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac63b:       e9 00 ff ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
         :	                        break;
         :
         :	                case T_ForeignScanState:
         :	                        result = ExecForeignScan((ForeignScanState *) node);
    0.00 :	  5ac640:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac643:       e8 f8 d2 01 00          callq  5c9940 <ExecForeignScan>
    0.00 :	  5ac648:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac64b:       e9 f0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
         :	                        break;
         :
         :	                case T_WorkTableScanState:
         :	                        result = ExecWorkTableScan((WorkTableScanState *) node);
    0.00 :	  5ac650:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac653:       e8 f8 a8 01 00          callq  5c6f50 <ExecWorkTableScan>
    0.00 :	  5ac658:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac65b:       e9 e0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
         :	                        break;
         :
         :	                case T_CteScanState:
         :	                        result = ExecCteScan((CteScanState *) node);
    0.00 :	  5ac660:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac663:       e8 28 a6 01 00          callq  5c6c90 <ExecCteScan>
    0.00 :	  5ac668:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac66b:       e9 d0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
         :	                        break;
         :
         :	                case T_ValuesScanState:
         :	                        result = ExecValuesScan((ValuesScanState *) node);
    0.00 :	  5ac670:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac673:       e8 18 a2 01 00          callq  5c6890 <ExecValuesScan>
    0.00 :	  5ac678:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac67b:       e9 c0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
         :	                        break;
         :
         :	                case T_FunctionScanState:
         :	                        result = ExecFunctionScan((FunctionScanState *) node);
    0.00 :	  5ac680:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac683:       e8 28 86 01 00          callq  5c4cb0 <ExecFunctionScan>
    0.00 :	  5ac688:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac68b:       e9 b0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
         :	                        break;
         :
         :	                case T_SubqueryScanState:
         :	                        result = ExecSubqueryScan((SubqueryScanState *) node);
    0.00 :	  5ac690:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac693:       e8 d8 c7 01 00          callq  5c8e70 <ExecSubqueryScan>
    0.00 :	  5ac698:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac69b:       e9 a0 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
         :	                        break;
         :
         :	                case T_TidScanState:
         :	                        result = ExecTidScan((TidScanState *) node);
    0.00 :	  5ac6a0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6a3:       e8 58 ca 01 00          callq  5c9100 <ExecTidScan>
    0.00 :	  5ac6a8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6ab:       e9 90 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        break;
         :
         :	                        /* BitmapIndexScanState does not yield tuples */
         :
         :	                case T_BitmapHeapScanState:
         :	                        result = ExecBitmapHeapScan((BitmapHeapScanState *) node);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execProcnode.c:414
   16.67 :	  5ac6b0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6b3:       e8 68 e8 00 00          callq  5baf20 <ExecBitmapHeapScan>
   33.33 :	  5ac6b8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6bb:       e9 80 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
         :	                        break;
         :
         :	                case T_IndexOnlyScanState:
         :	                        result = ExecIndexOnlyScan((IndexOnlyScanState *) node);
    0.00 :	  5ac6c0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6c3:       e8 b8 33 01 00          callq  5bfa80 <ExecIndexOnlyScan>
    0.00 :	  5ac6c8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6cb:       e9 70 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
         :	                        break;
         :
         :	                case T_IndexScanState:
         :	                        result = ExecIndexScan((IndexScanState *) node);
    0.00 :	  5ac6d0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6d3:       e8 08 2e 01 00          callq  5bf4e0 <ExecIndexScan>
    0.00 :	  5ac6d8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6db:       e9 60 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :
         :	                        /*
         :	                         * scan nodes
         :	                         */
         :	                case T_SeqScanState:
         :	                        result = ExecSeqScan((SeqScanState *) node);
    0.00 :	  5ac6e0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6e3:       e8 28 92 01 00          callq  5c5910 <ExecSeqScan>
    0.00 :	  5ac6e8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6eb:       e9 50 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
         :	                        break;
         :
         :	                case T_RecursiveUnionState:
         :	                        result = ExecRecursiveUnion((RecursiveUnionState *) node);
    0.00 :	  5ac6f0:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac6f3:       e8 d8 8b 01 00          callq  5c52d0 <ExecRecursiveUnion>
    0.00 :	  5ac6f8:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac6fb:       e9 40 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
         :	                        break;
         :
         :	                case T_MergeAppendState:
         :	                        result = ExecMergeAppend((MergeAppendState *) node);
    0.00 :	  5ac700:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac703:       e8 c8 48 01 00          callq  5c0fd0 <ExecMergeAppend>
    0.00 :	  5ac708:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac70b:       e9 30 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
         :	                        break;
         :
         :	                case T_AppendState:
         :	                        result = ExecAppend((AppendState *) node);
    0.00 :	  5ac710:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac713:       e8 68 ba 00 00          callq  5b8180 <ExecAppend>
    0.00 :	  5ac718:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac71b:       e9 20 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
         :	                        break;
         :
         :	                case T_ModifyTableState:
         :	                        result = ExecModifyTable((ModifyTableState *) node);
    0.00 :	  5ac720:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac723:       e8 d8 6a 01 00          callq  5c3200 <ExecModifyTable>
    0.00 :	  5ac728:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac72b:       e9 10 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	        {
         :	                        /*
         :	                         * control nodes
         :	                         */
         :	                case T_ResultState:
         :	                        result = ExecResult((ResultState *) node);
    0.00 :	  5ac730:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ac733:       e8 08 8f 01 00          callq  5c5640 <ExecResult>
    0.00 :	  5ac738:       48 89 c3                mov    %rax,%rbx
         :	                        break;
    0.00 :	  5ac73b:       e9 00 fe ff ff          jmpq   5ac540 <ExecProcNode+0xa0>
         :	                        result = NULL;
         :	                        break;
         :	        }
         :
         :	        if (node->instrument)
         :	                InstrStopNode(node->instrument, TupIsNull(result) ? 0.0 : 1.0);
    0.00 :	  5ac740:       66 0f 57 c0             xorpd  %xmm0,%xmm0
    0.00 :	  5ac744:       e9 1c fe ff ff          jmpq   5ac565 <ExecProcNode+0xc5>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1322
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1288
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679df0 <FileRead>:
         :	#endif
         :	}
         :
         :	int
         :	FileRead(File file, char *buffer, int amount)
         :	{
    0.00 :	  679df0:       55                      push   %rbp
    0.00 :	  679df1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679df4:       41 56                   push   %r14
    0.00 :	  679df6:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679df9:       41 55                   push   %r13
    0.00 :	  679dfb:       41 89 d5                mov    %edx,%r13d
    0.00 :	  679dfe:       41 54                   push   %r12
    0.00 :	  679e00:       41 89 fc                mov    %edi,%r12d
    0.00 :	  679e03:       53                      push   %rbx
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e04:       e8 17 fb ff ff          callq  679920 <FileAccess>
         :	        if (returnCode < 0)
    0.00 :	  679e09:       85 c0                   test   %eax,%eax
         :	        DO_DB(elog(LOG, "FileRead: %d (%s) " INT64_FORMAT " %d %p",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           amount, buffer));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679e0b:       89 c3                   mov    %eax,%ebx
         :	        if (returnCode < 0)
    0.00 :	  679e0d:       78 47                   js     679e56 <FileRead+0x66>
    0.00 :	  679e0f:       4d 63 e4                movslq %r12d,%r12
    0.00 :	  679e12:       4d 63 ed                movslq %r13d,%r13
    0.00 :	  679e15:       49 c1 e4 06             shl    $0x6,%r12
    0.00 :	  679e19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e20:       48 8b 05 71 33 50 00    mov    0x503371(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e27:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  679e2a:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679e2d:       42 8b 3c 20             mov    (%rax,%r12,1),%edi
    0.00 :	  679e31:       e8 da f7 de ff          callq  469610 <read@plt>
         :
         :	        if (returnCode >= 0)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1288
   33.33 :	  679e36:       85 c0                   test   %eax,%eax
         :	        returnCode = FileAccess(file);
         :	        if (returnCode < 0)
         :	                return returnCode;
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
    0.00 :	  679e38:       89 c3                   mov    %eax,%ebx
         :
         :	        if (returnCode >= 0)
    0.00 :	  679e3a:       79 2c                   jns    679e68 <FileRead+0x78>
         :	                                _dosmaperr(error);
         :	                                break;
         :	                }
         :	#endif
         :	                /* OK to retry if interrupted */
         :	                if (errno == EINTR)
    0.00 :	  679e3c:       e8 7f fe de ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  679e41:       83 38 04                cmpl   $0x4,(%rax)
    0.00 :	  679e44:       74 da                   je     679e20 <FileRead+0x30>
         :	                        goto retry;
         :
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
    0.00 :	  679e46:       48 8b 05 4b 33 50 00    mov    0x50334b(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679e4d:       4a c7 44 20 20 ff ff    movq   $0xffffffffffffffff,0x20(%rax,%r12,1)
    0.00 :	  679e54:       ff ff 
         :	        }
         :
         :	        return returnCode;
         :	}
    0.00 :	  679e56:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e58:       5b                      pop    %rbx
    0.00 :	  679e59:       41 5c                   pop    %r12
    0.00 :	  679e5b:       41 5d                   pop    %r13
    0.00 :	  679e5d:       41 5e                   pop    %r14
    0.00 :	  679e5f:       c9                      leaveq 
    0.00 :	  679e60:       c3                      retq   
    0.00 :	  679e61:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	retry:
         :	        returnCode = read(VfdCache[file].fd, buffer, amount);
         :
         :	        if (returnCode >= 0)
         :	                VfdCache[file].seekPos += returnCode;
    0.00 :	  679e68:       4c 03 25 29 33 50 00    add    0x503329(%rip),%r12        # b7d198 <VfdCache>
    0.00 :	  679e6f:       48 98                   cltq   
    0.00 :	  679e71:       49 01 44 24 20          add    %rax,0x20(%r12)
         :	                /* Trouble, so assume we don't know the file position anymore */
         :	                VfdCache[file].seekPos = FileUnknownPos;
         :	        }
         :
         :	        return returnCode;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1322
   66.67 :	  679e76:       89 d8                   mov    %ebx,%eax
    0.00 :	  679e78:       5b                      pop    %rbx
    0.00 :	  679e79:       41 5c                   pop    %r12
    0.00 :	  679e7b:       41 5d                   pop    %r13
    0.00 :	  679e7d:       41 5e                   pop    %r14
    0.00 :	  679e7f:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:673
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:731
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:673
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:731
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000698c00 <mdread>:
         :	 *      mdread() -- Read the specified block from a relation.
         :	 */
         :	void
         :	mdread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	           char *buffer)
         :	{
    0.00 :	  698c00:       55                      push   %rbp
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c01:       45 31 c0                xor    %r8d,%r8d
         :	 *      mdread() -- Read the specified block from a relation.
         :	 */
         :	void
         :	mdread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	           char *buffer)
         :	{
    0.00 :	  698c04:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  698c07:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:673
   16.67 :	  698c0b:       41 89 d6                mov    %edx,%r14d
    0.00 :	  698c0e:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  698c12:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  698c16:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
   33.33 :	  698c1a:       49 89 cc                mov    %rcx,%r12
    0.00 :	  698c1d:       48 83 ec 20             sub    $0x20,%rsp
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c21:       31 c9                   xor    %ecx,%ecx
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c23:       4c 89 f3                mov    %r14,%rbx
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c26:       e8 a5 f7 ff ff          callq  6983d0 <_mdfd_getseg>
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c2b:       81 e3 ff ff 01 00       and    $0x1ffff,%ebx
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
    0.00 :	  698c31:       8b 38                   mov    (%rax),%edi
    0.00 :	  698c33:       31 d2                   xor    %edx,%edx
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
    0.00 :	  698c35:       48 c1 e3 0d             shl    $0xd,%rbx
         :	                                                                                reln->smgr_rnode.node.spcNode,
         :	                                                                                reln->smgr_rnode.node.dbNode,
         :	                                                                                reln->smgr_rnode.node.relNode,
         :	                                                                                reln->smgr_rnode.backend);
         :
         :	        v = _mdfd_getseg(reln, forknum, blocknum, false, EXTENSION_FAIL);
    0.00 :	  698c39:       49 89 c5                mov    %rax,%r13
         :
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
    0.00 :	  698c3c:       48 89 de                mov    %rbx,%rsi
    0.00 :	  698c3f:       e8 4c 0e fe ff          callq  679a90 <FileSeek>
    0.00 :	  698c44:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  698c47:       75 56                   jne    698c9f <mdread+0x9f>
         :	                ereport(ERROR,
         :	                                (errcode_for_file_access(),
         :	                                 errmsg("could not seek to block %u in file \"%s\": %m",
         :	                                                blocknum, FilePathName(v->mdfd_vfd))));
         :
         :	        nbytes = FileRead(v->mdfd_vfd, buffer, BLCKSZ);
    0.00 :	  698c49:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698c4d:       ba 00 20 00 00          mov    $0x2000,%edx
    0.00 :	  698c52:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  698c55:       e8 96 11 fe ff          callq  679df0 <FileRead>
         :	                                                                           reln->smgr_rnode.node.relNode,
         :	                                                                           reln->smgr_rnode.backend,
         :	                                                                           nbytes,
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
    0.00 :	  698c5a:       3d 00 20 00 00          cmp    $0x2000,%eax
         :	                ereport(ERROR,
         :	                                (errcode_for_file_access(),
         :	                                 errmsg("could not seek to block %u in file \"%s\": %m",
         :	                                                blocknum, FilePathName(v->mdfd_vfd))));
         :
         :	        nbytes = FileRead(v->mdfd_vfd, buffer, BLCKSZ);
    0.00 :	  698c5f:       89 c3                   mov    %eax,%ebx
         :	                                                                           reln->smgr_rnode.node.relNode,
         :	                                                                           reln->smgr_rnode.backend,
         :	                                                                           nbytes,
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
    0.00 :	  698c61:       74 27                   je     698c8a <mdread+0x8a>
         :	        {
         :	                if (nbytes < 0)
    0.00 :	  698c63:       85 c0                   test   %eax,%eax
    0.00 :	  698c65:       78 61                   js     698cc8 <mdread+0xc8>
         :	                 * read a nonexistent block.  However, if zero_damaged_pages is ON or
         :	                 * we are InRecovery, we should instead return zeroes without
         :	                 * complaining.  This allows, for example, the case of trying to
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
    0.00 :	  698c67:       80 3d f2 43 4e 00 00    cmpb   $0x0,0x4e43f2(%rip)        # b7d060 <zero_damaged_pages>
    0.00 :	  698c6e:       75 0d                   jne    698c7d <mdread+0x7d>
    0.00 :	  698c70:       80 3d f1 04 4e 00 00    cmpb   $0x0,0x4e04f1(%rip)        # b79168 <InRecovery>
    0.00 :	  698c77:       0f 84 9a 00 00 00       je     698d17 <mdread+0x117>
         :	                        MemSet(buffer, 0, BLCKSZ);
    0.00 :	  698c7d:       b9 00 04 00 00          mov    $0x400,%ecx
    0.00 :	  698c82:       31 c0                   xor    %eax,%eax
    0.00 :	  698c84:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  698c87:       f3 48 ab                rep stos %rax,%es:(%rdi)
         :	                                        (errcode(ERRCODE_DATA_CORRUPTED),
         :	                                         errmsg("could not read block %u in file \"%s\": read only %d of %d bytes",
         :	                                                        blocknum, FilePathName(v->mdfd_vfd),
         :	                                                        nbytes, BLCKSZ)));
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:731
   16.67 :	  698c8a:       48 8b 1c 24             mov    (%rsp),%rbx
   33.33 :	  698c8e:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  698c93:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  698c98:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  698c9d:       c9                      leaveq 
    0.00 :	  698c9e:       c3                      retq   
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
         :	                ereport(ERROR,
    0.00 :	  698c9f:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698ca2:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698ca7:       ba b6 02 00 00          mov    $0x2b6,%edx
    0.00 :	  698cac:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698cb1:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698cb6:       e8 05 1e 0e 00          callq  77aac0 <errstart>
    0.00 :	  698cbb:       84 c0                   test   %al,%al
    0.00 :	  698cbd:       0f 85 b3 00 00 00       jne    698d76 <mdread+0x176>
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
         :	                        MemSet(buffer, 0, BLCKSZ);
         :	                else
         :	                        ereport(ERROR,
    0.00 :	  698cc3:       e8 08 08 dd ff          callq  4694d0 <abort@plt>
         :	                                                                           BLCKSZ);
         :
         :	        if (nbytes != BLCKSZ)
         :	        {
         :	                if (nbytes < 0)
         :	                        ereport(ERROR,
    0.00 :	  698cc8:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698ccb:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698cd0:       ba c8 02 00 00          mov    $0x2c8,%edx
    0.00 :	  698cd5:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698cda:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698cdf:       e8 dc 1d 0e 00          callq  77aac0 <errstart>
    0.00 :	  698ce4:       84 c0                   test   %al,%al
    0.00 :	  698ce6:       74 db                   je     698cc3 <mdread+0xc3>
    0.00 :	  698ce8:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698cec:       e8 bf f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698cf1:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698cf4:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698cf7:       bf e8 e2 8a 00          mov    $0x8ae2e8,%edi
    0.00 :	  698cfc:       31 c0                   xor    %eax,%eax
    0.00 :	  698cfe:       e8 9d 3b 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698d03:       89 c3                   mov    %eax,%ebx
    0.00 :	  698d05:       e8 e6 3d 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  698d0a:       89 de                   mov    %ebx,%esi
    0.00 :	  698d0c:       89 c7                   mov    %eax,%edi
    0.00 :	  698d0e:       31 c0                   xor    %eax,%eax
    0.00 :	  698d10:       e8 cb 18 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  698d15:       eb ac                   jmp    698cc3 <mdread+0xc3>
         :	                 * update a block that was later truncated away.
         :	                 */
         :	                if (zero_damaged_pages || InRecovery)
         :	                        MemSet(buffer, 0, BLCKSZ);
         :	                else
         :	                        ereport(ERROR,
    0.00 :	  698d17:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  698d1a:       b9 d9 e3 8a 00          mov    $0x8ae3d9,%ecx
    0.00 :	  698d1f:       ba d9 02 00 00          mov    $0x2d9,%edx
    0.00 :	  698d24:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  698d29:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  698d2e:       e8 8d 1d 0e 00          callq  77aac0 <errstart>
    0.00 :	  698d33:       84 c0                   test   %al,%al
    0.00 :	  698d35:       74 8c                   je     698cc3 <mdread+0xc3>
    0.00 :	  698d37:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698d3b:       e8 70 f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698d40:       89 d9                   mov    %ebx,%ecx
    0.00 :	  698d42:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698d45:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698d48:       41 b8 00 20 00 00       mov    $0x2000,%r8d
    0.00 :	  698d4e:       bf 18 e3 8a 00          mov    $0x8ae318,%edi
    0.00 :	  698d53:       31 c0                   xor    %eax,%eax
    0.00 :	  698d55:       e8 46 3b 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698d5a:       bf 28 0a 00 01          mov    $0x1000a28,%edi
    0.00 :	  698d5f:       89 c3                   mov    %eax,%ebx
    0.00 :	  698d61:       e8 ea 3f 0e 00          callq  77cd50 <errcode>
    0.00 :	  698d66:       89 de                   mov    %ebx,%esi
    0.00 :	  698d68:       89 c7                   mov    %eax,%edi
    0.00 :	  698d6a:       31 c0                   xor    %eax,%eax
    0.00 :	  698d6c:       e8 6f 18 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  698d71:       e9 4d ff ff ff          jmpq   698cc3 <mdread+0xc3>
         :	        seekpos = (off_t) BLCKSZ *(blocknum % ((BlockNumber) RELSEG_SIZE));
         :
         :	        Assert(seekpos < (off_t) BLCKSZ * RELSEG_SIZE);
         :
         :	        if (FileSeek(v->mdfd_vfd, seekpos, SEEK_SET) != seekpos)
         :	                ereport(ERROR,
    0.00 :	  698d76:       41 8b 7d 00             mov    0x0(%r13),%edi
    0.00 :	  698d7a:       e8 31 f5 fd ff          callq  6782b0 <FilePathName>
    0.00 :	  698d7f:       44 89 f6                mov    %r14d,%esi
    0.00 :	  698d82:       48 89 c2                mov    %rax,%rdx
    0.00 :	  698d85:       bf 18 e1 8a 00          mov    $0x8ae118,%edi
    0.00 :	  698d8a:       e9 6d ff ff ff          jmpq   698cfc <mdread+0xfc>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2190
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2181
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2181
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077d9b0 <DatumGetFloat4>:
         :
         :	#ifdef USE_FLOAT4_BYVAL
         :
         :	float4
         :	DatumGetFloat4(Datum X)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2181
   33.33 :	  77d9b0:       55                      push   %rbp
    0.00 :	  77d9b1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  77d9b4:       89 7d fc                mov    %edi,-0x4(%rbp)
   16.67 :	  77d9b7:       f3 0f 10 45 fc          movss  -0x4(%rbp),%xmm0
         :	                float4          retval;
         :	        }                       myunion;
         :
         :	        myunion.value = GET_4_BYTES(X);
         :	        return myunion.retval;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2190
   50.00 :	  77d9bc:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:593
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:587
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:592
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:605
   16.67 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:638
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000782de0 <CHashDelete>:
         :	 * Delete from a concurrent hash table.  entry need only contain the key field.
         :	 * Returns true if we find and delete a matching key and false otherwise.
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
    0.00 :	  782de0:       55                      push   %rbp
    0.00 :	  782de1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  782de4:       41 57                   push   %r15
    0.00 :	  782de6:       41 56                   push   %r14
    0.00 :	  782de8:       49 89 f6                mov    %rsi,%r14
    0.00 :	  782deb:       41 55                   push   %r13
    0.00 :	  782ded:       41 54                   push   %r12
    0.00 :	  782def:       53                      push   %rbx
    0.00 :	  782df0:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  782df3:       48 83 ec 58             sub    $0x58,%rsp
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
    0.00 :	  782df7:       0f b7 77 0e             movzwl 0xe(%rdi),%esi
    0.00 :	  782dfb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  782dfe:       e8 4d d5 d0 ff          callq  490350 <hash_any>
    0.00 :	  782e03:       41 89 c5                mov    %eax,%r13d
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e06:       8b 43 10                mov    0x10(%rbx),%eax
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e09:       0f b6 4b 14             movzbl 0x14(%rbx),%ecx
         :	 */
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
    0.00 :	  782e0d:       44 21 e8                and    %r13d,%eax
    0.00 :	  782e10:       89 45 8c                mov    %eax,-0x74(%rbp)
         :	        CHashPtr           *b = &table->bucket[bucket];
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e13:       8b 55 8c                mov    -0x74(%rbp),%edx
         :	bool
         :	CHashDelete(CHashTable table, void *entry)
         :	{
         :	        uint32  hashcode = hash_any(entry, table->desc.key_size);
         :	        uint32  bucket = hashcode & table->bucket_mask;
         :	        CHashPtr           *b = &table->bucket[bucket];
    0.00 :	  782e16:       89 c0                   mov    %eax,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:587
   16.67 :	  782e18:       4c 8d 24 85 00 00 00    lea    0x0(,%rax,4),%r12
    0.00 :	  782e1f:       00 
    0.00 :	  782e20:       4c 03 63 20             add    0x20(%rbx),%r12
         :	        CHashScanResult scan;
         :
         :	        /* Prevent garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] == NULL);
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
    0.00 :	  782e24:       d3 ea                   shr    %cl,%edx
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:592
   16.67 :	  782e26:       0f b6 4b 15             movzbl 0x15(%rbx),%ecx
    0.00 :	  782e2a:       89 d0                   mov    %edx,%eax
    0.00 :	  782e2c:       d3 e8                   shr    %cl,%eax
    0.00 :	  782e2e:       01 d0                   add    %edx,%eax
    0.00 :	  782e30:       48 8b 15 11 ab 3f 00    mov    0x3fab11(%rip),%rdx        # b7d948 <MyProc>
    0.00 :	  782e37:       48 c1 e0 02             shl    $0x2,%rax
    0.00 :	  782e3b:       48 03 43 28             add    0x28(%rbx),%rax
    0.00 :	  782e3f:       48 89 82 e8 02 00 00    mov    %rax,0x2e8(%rdx)
         :	        pg_memory_barrier();
    0.00 :	  782e46:       f0 83 04 24 00          lock addl $0x0,(%rsp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:593
   33.33 :	  782e4b:       4c 8d 7d b0             lea    -0x50(%rbp),%r15
    0.00 :	  782e4f:       eb 1e                   jmp    782e6f <CHashDelete+0x8f>
    0.00 :	  782e51:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        if (scan.found)
         :	        {
         :	                Assert(!CHashPtrIsMarked(scan.next));
         :
         :	                /* Attempt to apply delete-mark. */
         :	                if (!__sync_bool_compare_and_swap(&scan.target_node->next,
    0.00 :	  782e58:       8b 45 b4                mov    -0x4c(%rbp),%eax
    0.00 :	  782e5b:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  782e5f:       89 c1                   mov    %eax,%ecx
    0.00 :	  782e61:       83 c9 01                or     $0x1,%ecx
    0.00 :	  782e64:       f0 0f b1 0a             lock cmpxchg %ecx,(%rdx)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:605
   16.67 :	  782e68:       74 5e                   je     782ec8 <CHashDelete+0xe8>
         :	                                                                                  scan.next,
         :	                                                                                  CHashPtrMark(scan.next)))
         :	                {
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
    0.00 :	  782e6a:       48 83 43 78 01          addq   $0x1,0x78(%rbx)
         :	        MyProc->hazard[0] = CHashTableGetGarbageByBucket(table, bucket);
         :	        pg_memory_barrier();
         :
         :	        /* Scan bucket. */
         :	retry:
         :	        CHashBucketScan(table, b, hashcode, entry, &scan);
    0.00 :	  782e6f:       4d 89 f8                mov    %r15,%r8
    0.00 :	  782e72:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782e75:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782e78:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782e7b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782e7e:       e8 1d fe ff ff          callq  782ca0 <CHashBucketScan>
         :
         :	        /* If we found it, try to delete it. */
         :	        if (scan.found)
    0.00 :	  782e83:       80 7d c8 00             cmpb   $0x0,-0x38(%rbp)
    0.00 :	  782e87:       75 cf                   jne    782e58 <CHashDelete+0x78>
         :	                }
         :	        }
         :
         :	        /* Allow garbage collection for this bucket. */
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
    0.00 :	  782e89:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	        MyProc->hazard[0] = NULL;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/chash.c:638
   16.67 :	  782e8e:       48 8b 05 b3 aa 3f 00    mov    0x3faab3(%rip),%rax        # b7d948 <MyProc>
    0.00 :	  782e95:       48 c7 80 e8 02 00 00    movq   $0x0,0x2e8(%rax)
    0.00 :	  782e9c:       00 00 00 00 
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
         :	        if (!scan.found)
    0.00 :	  782ea0:       0f b6 45 c8             movzbl -0x38(%rbp),%eax
         :	        Assert(MyProc->hazard[0] != NULL);
         :	        pg_memory_barrier();
         :	        MyProc->hazard[0] = NULL;
         :
         :	        /* We're done. */
         :	        CHashTableIncrementStatistic(table, CHS_Delete);
    0.00 :	  782ea4:       48 83 43 68 01          addq   $0x1,0x68(%rbx)
         :	        if (!scan.found)
    0.00 :	  782ea9:       84 c0                   test   %al,%al
    0.00 :	  782eab:       75 05                   jne    782eb2 <CHashDelete+0xd2>
         :	                CHashTableIncrementStatistic(table, CHS_Delete_Failed);
    0.00 :	  782ead:       48 83 43 70 01          addq   $0x1,0x70(%rbx)
         :	        return scan.found;
         :	}
    0.00 :	  782eb2:       48 83 c4 58             add    $0x58,%rsp
    0.00 :	  782eb6:       5b                      pop    %rbx
    0.00 :	  782eb7:       41 5c                   pop    %r12
    0.00 :	  782eb9:       41 5d                   pop    %r13
    0.00 :	  782ebb:       41 5e                   pop    %r14
    0.00 :	  782ebd:       41 5f                   pop    %r15
    0.00 :	  782ebf:       c9                      leaveq 
    0.00 :	  782ec0:       c3                      retq   
    0.00 :	  782ec1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        CHashTableIncrementStatistic(table, CHS_Delete_Retry);
         :	                        goto retry;
         :	                }
         :
         :	                /* Deletion is done; attempt to remove node from list. */
         :	                if (__sync_bool_compare_and_swap(scan.pointer_to_target,
    0.00 :	  782ec8:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782ecb:       48 8b 75 b8             mov    -0x48(%rbp),%rsi
    0.00 :	  782ecf:       8b 4d b4                mov    -0x4c(%rbp),%ecx
    0.00 :	  782ed2:       89 d0                   mov    %edx,%eax
    0.00 :	  782ed4:       f0 0f b1 0e             lock cmpxchg %ecx,(%rsi)
    0.00 :	  782ed8:       75 16                   jne    782ef0 <CHashDelete+0x110>
         :	                                                                                 scan.target,
         :	                                                                                 scan.next))
         :	                        CHashAddToGarbage(table, bucket, scan.target);
    0.00 :	  782eda:       8b 55 b0                mov    -0x50(%rbp),%edx
    0.00 :	  782edd:       8b 75 8c                mov    -0x74(%rbp),%esi
    0.00 :	  782ee0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782ee3:       e8 68 fd ff ff          callq  782c50 <CHashAddToGarbage>
    0.00 :	  782ee8:       eb 9f                   jmp    782e89 <CHashDelete+0xa9>
    0.00 :	  782eea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         * like a regular bucket scan, except that we don't care
         :	                         * about the results.  We're just doing it to achieve the
         :	                         * side-effect of removing delete-marked nodes from the
         :	                         * bucket chain.
         :	                         */
         :	                        CHashTableIncrementStatistic(table, CHS_Cleanup_Scan);
    0.00 :	  782ef0:       48 83 83 98 00 00 00    addq   $0x1,0x98(%rbx)
    0.00 :	  782ef7:       01 
         :	                        CHashBucketScan(table, b, hashcode, entry, &cleanup_scan);
    0.00 :	  782ef8:       4c 8d 45 90             lea    -0x70(%rbp),%r8
    0.00 :	  782efc:       4c 89 f1                mov    %r14,%rcx
    0.00 :	  782eff:       44 89 ea                mov    %r13d,%edx
    0.00 :	  782f02:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  782f05:       48 89 df                mov    %rbx,%rdi
    0.00 :	  782f08:       e8 93 fd ff ff          callq  782ca0 <CHashBucketScan>
    0.00 :	  782f0d:       e9 77 ff ff ff          jmpq   782e89 <CHashDelete+0xa9>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   60.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ccfc0 <DataChecksumsEnabled>:
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfc0:       48 8b 05 d9 c1 6a 00    mov    0x6ac1d9(%rip),%rax        # b791a0 <ControlFile>
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4648
   60.00 :	  4ccfc7:       55                      push   %rbp
    0.00 :	  4ccfc8:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4ccfcb:       8b 80 ec 00 00 00       mov    0xec(%rax),%eax
         :	        Assert(ControlFile != NULL);
         :	        return (ControlFile->data_checksum_version > 0);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:4651
   40.00 :	  4ccfd1:       c9                      leaveq 
         :	/*
         :	 * Are checksums enabled for data pages?
         :	 */
         :	bool
         :	DataChecksumsEnabled(void)
         :	{
    0.00 :	  4ccfd2:       85 c0                   test   %eax,%eax
    0.00 :	  4ccfd4:       0f 95 c0                setne  %al

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b7f00 <InstrStartNode>:
         :	}
         :
         :	/* Entry to a plan node */
         :	void
         :	InstrStartNode(Instrumentation *instr)
         :	{
    0.00 :	  5b7f00:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:53
   20.00 :	  5b7f01:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b7f04:       53                      push   %rbx
    0.00 :	  5b7f05:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5b7f08:       48 83 ec 08             sub    $0x8,%rsp
         :	        if (instr->need_timer)
    0.00 :	  5b7f0c:       80 3f 00                cmpb   $0x0,(%rdi)
    0.00 :	  5b7f0f:       74 4a                   je     5b7f5b <InstrStartNode+0x5b>
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
    0.00 :	  5b7f11:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
    0.00 :	  5b7f16:       75 07                   jne    5b7f1f <InstrStartNode+0x1f>
    0.00 :	  5b7f18:       48 83 7f 08 00          cmpq   $0x0,0x8(%rdi)
    0.00 :	  5b7f1d:       74 31                   je     5b7f50 <InstrStartNode+0x50>
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
    0.00 :	  5b7f1f:       ba 98 b6 88 00          mov    $0x88b698,%edx
    0.00 :	  5b7f24:       be 3b 00 00 00          mov    $0x3b,%esi
    0.00 :	  5b7f29:       bf fa b5 88 00          mov    $0x88b5fa,%edi
    0.00 :	  5b7f2e:       e8 ed 34 1c 00          callq  77b420 <elog_start>
    0.00 :	  5b7f33:       be 58 b6 88 00          mov    $0x88b658,%esi
    0.00 :	  5b7f38:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  5b7f3d:       31 c0                   xor    %eax,%eax
    0.00 :	  5b7f3f:       e8 ec 32 1c 00          callq  77b230 <elog_finish>
    0.00 :	  5b7f44:       e8 87 15 eb ff          callq  4694d0 <abort@plt>
    0.00 :	  5b7f49:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	InstrStartNode(Instrumentation *instr)
         :	{
         :	        if (instr->need_timer)
         :	        {
         :	                if (INSTR_TIME_IS_ZERO(instr->starttime))
         :	                        INSTR_TIME_SET_CURRENT(instr->starttime);
    0.00 :	  5b7f50:       48 8d 7f 08             lea    0x8(%rdi),%rdi
    0.00 :	  5b7f54:       31 f6                   xor    %esi,%esi
    0.00 :	  5b7f56:       e8 65 16 eb ff          callq  4695c0 <gettimeofday@plt>
         :	                else
         :	                        elog(ERROR, "InstrStartNode called twice in a row");
         :	        }
         :
         :	        /* save buffer usage totals at node entry, if needed */
         :	        if (instr->need_bufusage)
    0.00 :	  5b7f5b:       80 7b 01 00             cmpb   $0x0,0x1(%rbx)
    0.00 :	  5b7f5f:       0f 84 a9 00 00 00       je     5b800e <InstrStartNode+0x10e>
         :	                instr->bufusage_start = pgBufferUsage;
    0.00 :	  5b7f65:       48 8b 05 f4 77 60 00    mov    0x6077f4(%rip),%rax        # bbf760 <pgBufferUsage>
    0.00 :	  5b7f6c:       48 89 43 38             mov    %rax,0x38(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/instrument.c:64
   40.00 :	  5b7f70:       48 8b 05 f1 77 60 00    mov    0x6077f1(%rip),%rax        # bbf768 <pgBufferUsage+0x8>
    0.00 :	  5b7f77:       48 89 43 40             mov    %rax,0x40(%rbx)
    0.00 :	  5b7f7b:       48 8b 05 ee 77 60 00    mov    0x6077ee(%rip),%rax        # bbf770 <pgBufferUsage+0x10>
    0.00 :	  5b7f82:       48 89 43 48             mov    %rax,0x48(%rbx)
    0.00 :	  5b7f86:       48 8b 05 eb 77 60 00    mov    0x6077eb(%rip),%rax        # bbf778 <pgBufferUsage+0x18>
    0.00 :	  5b7f8d:       48 89 43 50             mov    %rax,0x50(%rbx)
    0.00 :	  5b7f91:       48 8b 05 e8 77 60 00    mov    0x6077e8(%rip),%rax        # bbf780 <pgBufferUsage+0x20>
    0.00 :	  5b7f98:       48 89 43 58             mov    %rax,0x58(%rbx)
    0.00 :	  5b7f9c:       48 8b 05 e5 77 60 00    mov    0x6077e5(%rip),%rax        # bbf788 <pgBufferUsage+0x28>
    0.00 :	  5b7fa3:       48 89 43 60             mov    %rax,0x60(%rbx)
    0.00 :	  5b7fa7:       48 8b 05 e2 77 60 00    mov    0x6077e2(%rip),%rax        # bbf790 <pgBufferUsage+0x30>
    0.00 :	  5b7fae:       48 89 43 68             mov    %rax,0x68(%rbx)
    0.00 :	  5b7fb2:       48 8b 05 df 77 60 00    mov    0x6077df(%rip),%rax        # bbf798 <pgBufferUsage+0x38>
    0.00 :	  5b7fb9:       48 89 43 70             mov    %rax,0x70(%rbx)
    0.00 :	  5b7fbd:       48 8b 05 dc 77 60 00    mov    0x6077dc(%rip),%rax        # bbf7a0 <pgBufferUsage+0x40>
    0.00 :	  5b7fc4:       48 89 43 78             mov    %rax,0x78(%rbx)
    0.00 :	  5b7fc8:       48 8b 05 d9 77 60 00    mov    0x6077d9(%rip),%rax        # bbf7a8 <pgBufferUsage+0x48>
    0.00 :	  5b7fcf:       48 89 83 80 00 00 00    mov    %rax,0x80(%rbx)
    0.00 :	  5b7fd6:       48 8b 05 d3 77 60 00    mov    0x6077d3(%rip),%rax        # bbf7b0 <pgBufferUsage+0x50>
    0.00 :	  5b7fdd:       48 89 83 88 00 00 00    mov    %rax,0x88(%rbx)
    0.00 :	  5b7fe4:       48 8b 05 cd 77 60 00    mov    0x6077cd(%rip),%rax        # bbf7b8 <pgBufferUsage+0x58>
    0.00 :	  5b7feb:       48 89 83 90 00 00 00    mov    %rax,0x90(%rbx)
    0.00 :	  5b7ff2:       48 8b 05 c7 77 60 00    mov    0x6077c7(%rip),%rax        # bbf7c0 <pgBufferUsage+0x60>
    0.00 :	  5b7ff9:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
   40.00 :	  5b8000:       48 8b 05 c1 77 60 00    mov    0x6077c1(%rip),%rax        # bbf7c8 <pgBufferUsage+0x68>
    0.00 :	  5b8007:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :	}
    0.00 :	  5b800e:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  5b8012:       5b                      pop    %rbx
    0.00 :	  5b8013:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1401
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674d30 <UnpinBuffer>:
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d30:       55                      push   %rbp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d31:       31 d2                   xor    %edx,%edx
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d33:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674d36:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1360
   20.00 :	  674d3a:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
   20.00 :	  674d3e:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674d41:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
   20.00 :	  674d45:       48 83 ec 30             sub    $0x30,%rsp
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
    0.00 :	  674d49:       8b 7f 24                mov    0x24(%rdi),%edi
         :	 * Most but not all callers want CurrentResourceOwner to be adjusted.
         :	 * Those that don't should pass fixOwner = FALSE.
         :	 */
         :	static void
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
    0.00 :	  674d4c:       41 89 f4                mov    %esi,%r12d
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d4f:       31 f6                   xor    %esi,%esi
    0.00 :	  674d51:       83 c7 01                add    $0x1,%edi
    0.00 :	  674d54:       e8 c7 f7 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
    0.00 :	  674d59:       45 84 e4                test   %r12b,%r12b
         :	UnpinBuffer(volatile BufferDesc *buf, bool fixOwner)
         :	{
         :	        PrivateRefCountEntry *ref;
         :	        int                     b = buf->buf_id;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
    0.00 :	  674d5c:       49 89 c5                mov    %rax,%r13
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
    0.00 :	  674d5f:       0f 85 b3 00 00 00       jne    674e18 <UnpinBuffer+0xe8>
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
    0.00 :	  674d65:       41 8b 45 04             mov    0x4(%r13),%eax
    0.00 :	  674d69:       83 e8 01                sub    $0x1,%eax
         :	        if (ref->refcount == 0)
    0.00 :	  674d6c:       85 c0                   test   %eax,%eax
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
         :	                                                                  BufferDescriptorGetBuffer(buf));
         :
         :	        Assert(ref->refcount > 0);
         :	        ref->refcount--;
    0.00 :	  674d6e:       41 89 45 04             mov    %eax,0x4(%r13)
         :	        if (ref->refcount == 0)
    0.00 :	  674d72:       75 66                   jne    674dda <UnpinBuffer+0xaa>
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
    0.00 :	  674d74:       48 8d 7b 20             lea    0x20(%rbx),%rdi
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  674d78:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  674d7d:       f0 86 07                lock xchg %al,(%rdi)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1379
   20.00 :	  674d80:       84 c0                   test   %al,%al
    0.00 :	  674d82:       0f 85 a8 00 00 00       jne    674e30 <UnpinBuffer+0x100>
         :
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
    0.00 :	  674d88:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674d8b:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674d8e:       89 43 18                mov    %eax,0x18(%rbx)
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674d91:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674d95:       a8 40                   test   $0x40,%al
    0.00 :	  674d97:       75 57                   jne    674df0 <UnpinBuffer+0xc0>
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
         :	                        UnlockBufHdr(buf);
         :	                        ProcSendSignal(wait_backend_pid);
         :	                }
         :	                else
         :	                        UnlockBufHdr(buf);
    0.00 :	  674d99:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	static void
         :	ForgetPrivateRefCountEntry(PrivateRefCountEntry *ref)
         :	{
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
    0.00 :	  674d9d:       49 81 fd c0 d0 b7 00    cmp    $0xb7d0c0,%r13
    0.00 :	  674da4:       72 0d                   jb     674db3 <UnpinBuffer+0x83>
    0.00 :	  674da6:       49 81 fd 00 d1 b7 00    cmp    $0xb7d100,%r13
    0.00 :	  674dad:       0f 82 95 00 00 00       jb     674e48 <UnpinBuffer+0x118>
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674db3:       41 8b 45 00             mov    0x0(%r13),%eax
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674db7:       48 8b 3d ba 82 50 00    mov    0x5082ba(%rip),%rdi        # b7d078 <PrivateRefCountHash>
    0.00 :	  674dbe:       48 8d 4d e7             lea    -0x19(%rbp),%rcx
    0.00 :	  674dc2:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
    0.00 :	  674dc6:       ba 02 00 00 00          mov    $0x2,%edx
         :	                ref->buffer = InvalidBuffer;
         :	        }
         :	        else
         :	        {
         :	                bool found;
         :	                Buffer buffer = ref->buffer;
    0.00 :	  674dcb:       89 45 e0                mov    %eax,-0x20(%rbp)
         :	                hash_search(PrivateRefCountHash,
    0.00 :	  674dce:       e8 cd f8 10 00          callq  7846a0 <hash_search>
         :	                                        (void *) &buffer,
         :	                                        HASH_REMOVE,
         :	                                        &found);
         :	                Assert(found);
         :	                Assert(PrivateRefCountOverflowed > 0);
         :	                PrivateRefCountOverflowed--;
    0.00 :	  674dd3:       83 2d 96 82 50 00 01    subl   $0x1,0x508296(%rip)        # b7d070 <PrivateRefCountOverflowed>
         :	                else
         :	                        UnlockBufHdr(buf);
         :
         :	                ForgetPrivateRefCountEntry(ref);
         :	        }
         :	}
    0.00 :	  674dda:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  674dde:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  674de2:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  674de6:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1401
   20.00 :	  674de7:       c3                      retq   
    0.00 :	  674de8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  674def:       00 
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674df0:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674df3:       83 e8 01                sub    $0x1,%eax
    0.00 :	  674df6:       75 a1                   jne    674d99 <UnpinBuffer+0x69>
         :	                        buf->refcount == 1)
         :	                {
         :	                        /* we just released the last pin other than the waiter's */
         :	                        int                     wait_backend_pid = buf->wait_backend_pid;
    0.00 :	  674df8:       8b 7b 1c                mov    0x1c(%rbx),%edi
         :
         :	                        buf->flags &= ~BM_PIN_COUNT_WAITER;
    0.00 :	  674dfb:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674dff:       83 e0 bf                and    $0xffffffbf,%eax
    0.00 :	  674e02:       66 89 43 14             mov    %ax,0x14(%rbx)
         :	                        UnlockBufHdr(buf);
    0.00 :	  674e06:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                        ProcSendSignal(wait_backend_pid);
    0.00 :	  674e0a:       e8 b1 76 01 00          callq  68c4c0 <ProcSendSignal>
         :	                /* Decrement the shared reference count */
         :	                Assert(buf->refcount > 0);
         :	                buf->refcount--;
         :
         :	                /* Support LockBufferForCleanup() */
         :	                if ((buf->flags & BM_PIN_COUNT_WAITER) &&
    0.00 :	  674e0f:       eb 8c                   jmp    674d9d <UnpinBuffer+0x6d>
    0.00 :	  674e11:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, false, false);
         :	        Assert(ref != NULL);
         :
         :	        if (fixOwner)
         :	                ResourceOwnerForgetBuffer(CurrentResourceOwner,
    0.00 :	  674e18:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674e1b:       48 8b 3d 9e 5a 54 00    mov    0x545a9e(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  674e22:       83 c6 01                add    $0x1,%esi
    0.00 :	  674e25:       e8 d6 5a 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
    0.00 :	  674e2a:       e9 36 ff ff ff          jmpq   674d65 <UnpinBuffer+0x35>
    0.00 :	  674e2f:       90                      nop
         :	        {
         :	                /* I'd better not still hold any locks on the buffer */
         :	                Assert(!LWLockHeldByMe(buf->content_lock));
         :	                Assert(!LWLockHeldByMe(buf->io_in_progress_lock));
         :
         :	                LockBufHdr(buf);
    0.00 :	  674e30:       ba 63 05 00 00          mov    $0x563,%edx
    0.00 :	  674e35:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  674e3a:       e8 01 b2 01 00          callq  690040 <s_lock>
    0.00 :	  674e3f:       e9 44 ff ff ff          jmpq   674d88 <UnpinBuffer+0x58>
    0.00 :	  674e44:       0f 1f 40 00             nopl   0x0(%rax)
         :	        Assert(ref->refcount == 0);
         :
         :	        if (ref >= &PrivateRefCountArray[0] &&
         :	                ref < &PrivateRefCountArray[REFCOUNT_ARRAY_ENTRIES])
         :	        {
         :	                ref->buffer = InvalidBuffer;
    0.00 :	  674e48:       41 c7 45 00 00 00 00    movl   $0x0,0x0(%r13)
    0.00 :	  674e4f:       00 
    0.00 :	  674e50:       eb 88                   jmp    674dda <UnpinBuffer+0xaa>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1779
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1797
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006756f0 <BgBufferSync>:
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756f0:       55                      push   %rbp
    0.00 :	  6756f1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6756f4:       41 57                   push   %r15
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  6756f6:       48 8d 75 d0             lea    -0x30(%rbp),%rsi
    0.00 :	  6756fa:       48 8d 7d d4             lea    -0x2c(%rbp),%rdi
         :	 * or if the bgwriter has been effectively disabled by setting
         :	 * bgwriter_lru_maxpages to 0.)
         :	 */
         :	bool
         :	BgBufferSync(void)
         :	{
    0.00 :	  6756fe:       41 56                   push   %r14
    0.00 :	  675700:       41 55                   push   %r13
    0.00 :	  675702:       41 54                   push   %r12
    0.00 :	  675704:       53                      push   %rbx
    0.00 :	  675705:       48 83 ec 18             sub    $0x18,%rsp
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675709:       e8 22 1d 00 00          callq  677430 <StrategySyncStart>
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67570e:       44 8b 55 d0             mov    -0x30(%rbp),%r10d
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675712:       44 8b 1d 77 2f 4f 00    mov    0x4f2f77(%rip),%r11d        # b68690 <bgwriter_lru_maxpages>
         :
         :	        /*
         :	         * Find out where the freelist clock sweep currently is, and how many
         :	         * buffer allocations have happened since our last call.
         :	         */
         :	        strategy_buf_id = StrategySyncStart(&strategy_passes, &recent_alloc);
    0.00 :	  675719:       89 c6                   mov    %eax,%esi
         :
         :	        /* Report buffer alloc counts to pgstat */
         :	        BgWriterStats.m_buf_alloc += recent_alloc;
    0.00 :	  67571b:       45 89 d1                mov    %r10d,%r9d
    0.00 :	  67571e:       4c 01 0d 5b a3 54 00    add    %r9,0x54a35b(%rip)        # bbfa80 <BgWriterStats+0x40>
         :	        /*
         :	         * If we're not running the LRU scan, just stop after doing the stats
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
    0.00 :	  675725:       45 85 db                test   %r11d,%r11d
    0.00 :	  675728:       0f 8e a2 02 00 00       jle    6759d0 <BgBufferSync+0x2e0>
         :	         * see if we are still ahead of the clock sweep, and if so, how many
         :	         * buffers we could scan before we'd catch up with it and "lap" it. Note:
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
    0.00 :	  67572e:       80 3d 6f 79 50 00 00    cmpb   $0x0,0x50796f(%rip)        # b7d0a4 <saved_info_valid.17628>
    0.00 :	  675735:       0f 85 4d 01 00 00       jne    675888 <BgBufferSync+0x198>
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  67573b:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	#ifdef BGW_DEBUG
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
    0.00 :	  675740:       89 05 52 79 50 00       mov    %eax,0x507952(%rip)        # b7d098 <next_to_clean.17631>
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  675746:       8b 3d d4 33 4f 00       mov    0x4f33d4(%rip),%edi        # b68b20 <NBuffers>
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67574c:       8b 45 d4                mov    -0x2c(%rbp),%eax
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  67574f:       89 35 4b 79 50 00       mov    %esi,0x50794b(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
         :	        saved_info_valid = true;
    0.00 :	  675755:       c6 05 48 79 50 00 01    movb   $0x1,0x507948(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
    0.00 :	  67575c:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	                elog(DEBUG2, "bgwriter initializing: strategy %u-%u",
         :	                         strategy_passes, strategy_buf_id);
         :	#endif
         :	                strategy_delta = 0;
         :	                next_to_clean = strategy_buf_id;
         :	                next_passes = strategy_passes;
    0.00 :	  67575f:       89 05 2f 79 50 00       mov    %eax,0x50792f(%rip)        # b7d094 <next_passes.17632>
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  675765:       89 05 31 79 50 00       mov    %eax,0x507931(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	         * Estimate how many reusable buffers there are between the current
         :	         * strategy point and where we've scanned ahead to, based on the smoothed
         :	         * density estimate.
         :	         */
         :	        bufs_ahead = NBuffers - bufs_to_lap;
         :	        reusable_buffers_est = (float) bufs_ahead / smoothed_density;
    0.00 :	  67576b:       89 f8                   mov    %edi,%eax
    0.00 :	  67576d:       2b 45 c4                sub    -0x3c(%rbp),%eax
    0.00 :	  675770:       f3 0f 2a c0             cvtsi2ss %eax,%xmm0
    0.00 :	  675774:       f3 0f 5e 05 24 2f 4f    divss  0x4f2f24(%rip),%xmm0        # b686a0 <smoothed_density.17634>
    0.00 :	  67577b:       00 
    0.00 :	  67577c:       f3 44 0f 2c f8          cvttss2si %xmm0,%r15d
         :	        /*
         :	         * Track a moving average of recent buffer allocations.  Here, rather than
         :	         * a true average we want a fast-attack, slow-decline behavior: we
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
    0.00 :	  675781:       f3 0f 10 05 07 79 50    movss  0x507907(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675788:       00 
    0.00 :	  675789:       0f 2e d0                ucomiss %xmm0,%xmm2
    0.00 :	  67578c:       0f 82 1e 02 00 00       jb     6759b0 <BgBufferSync+0x2c0>
         :	                smoothed_alloc = recent_alloc;
    0.00 :	  675792:       f3 0f 11 15 f6 78 50    movss  %xmm2,0x5078f6(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  675799:       00 
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
         :	                        smoothing_samples;
         :
         :	        /* Scale the estimate by a GUC to allow more aggressive tuning. */
         :	        upcoming_alloc_est = (int) (smoothed_alloc * bgwriter_lru_multiplier);
    0.00 :	  67579a:       f3 0f 10 05 ee 78 50    movss  0x5078ee(%rip),%xmm0        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757a1:       00 
    0.00 :	  6757a2:       0f 5a c0                cvtps2pd %xmm0,%xmm0
    0.00 :	  6757a5:       f2 0f 59 05 eb 2e 4f    mulsd  0x4f2eeb(%rip),%xmm0        # b68698 <bgwriter_lru_multiplier>
    0.00 :	  6757ac:       00 
    0.00 :	  6757ad:       f2 0f 2c d0             cvttsd2si %xmm0,%edx
         :	         * kernel warnings on some platforms.  Once upcoming_alloc_est has gone to
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
    0.00 :	  6757b1:       85 d2                   test   %edx,%edx
    0.00 :	  6757b3:       75 0a                   jne    6757bf <BgBufferSync+0xcf>
         :	                smoothed_alloc = 0;
    0.00 :	  6757b5:       c7 05 d1 78 50 00 00    movl   $0x0,0x5078d1(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6757bc:       00 00 00 
    0.00 :	  6757bf:       f3 0f 2a 15 29 2e 4f    cvtsi2ssl 0x4f2e29(%rip),%xmm2        # b685f0 <BgWriterDelay>
    0.00 :	  6757c6:       00 
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757c7:       45 89 fc                mov    %r15d,%r12d
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757ca:       f3 0f 10 05 16 49 23    movss  0x234916(%rip),%xmm0        # 8aa0e8 <__func__.17063+0x15>
    0.00 :	  6757d1:       00 
    0.00 :	  6757d2:       f3 0f 2a cf             cvtsi2ss %edi,%xmm1
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757d6:       48 8b 3d e3 50 54 00    mov    0x5450e3(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	         * zero, there's no point in tracking smaller and smaller values of
         :	         * smoothed_alloc, so just reset it to exactly zero to avoid this
         :	         * syndrome.  It will pop back up as soon as recent_alloc increases.
         :	         */
         :	        if (upcoming_alloc_est == 0)
         :	                smoothed_alloc = 0;
    0.00 :	  6757dd:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  6757e1:       f3 0f 5e c8             divss  %xmm0,%xmm1
    0.00 :	  6757e5:       f3 0f 2c c1             cvttss2si %xmm1,%eax
    0.00 :	  6757e9:       45 8d 34 07             lea    (%r15,%rax,1),%r14d
    0.00 :	  6757ed:       41 39 d6                cmp    %edx,%r14d
    0.00 :	  6757f0:       44 0f 4c f2             cmovl  %edx,%r14d
         :	         * enough buffers to match our estimate of the next cycle's allocation
         :	         * requirements, or hit the bgwriter_lru_maxpages limit.
         :	         */
         :
         :	        /* Make sure we can handle the pin inside SyncOneBuffer */
         :	        ResourceOwnerEnlargeBuffers(CurrentResourceOwner);
    0.00 :	  6757f4:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  6757f7:       e8 74 56 12 00          callq  79ae70 <ResourceOwnerEnlargeBuffers>
    0.00 :	  6757fc:       8b 5d c4                mov    -0x3c(%rbp),%ebx
    0.00 :	  6757ff:       90                      nop
         :	        num_to_scan = bufs_to_lap;
         :	        num_written = 0;
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
    0.00 :	  675800:       85 db                   test   %ebx,%ebx
    0.00 :	  675802:       7e 09                   jle    67580d <BgBufferSync+0x11d>
    0.00 :	  675804:       45 39 e6                cmp    %r12d,%r14d
    0.00 :	  675807:       0f 8f 23 01 00 00       jg     675930 <BgBufferSync+0x240>
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
         :	                        reusable_buffers++;
         :	        }
         :
         :	        BgWriterStats.m_buf_written_clean += num_written;
    0.00 :	  67580d:       49 63 c5                movslq %r13d,%rax
    0.00 :	  675810:       48 01 05 49 a2 54 00    add    %rax,0x54a249(%rip)        # bbfa60 <BgWriterStats+0x20>
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675817:       8b 45 c4                mov    -0x3c(%rbp),%eax
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
    0.00 :	  67581a:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67581d:       44 29 fa                sub    %r15d,%edx
         :	         * effectively halves the moving average period in cases where both the
         :	         * strategy and the background writer are doing some useful scanning,
         :	         * which is helpful because a long memory isn't as desirable on the
         :	         * density estimates.
         :	         */
         :	        new_strategy_delta = bufs_to_lap - num_to_scan;
    0.00 :	  675820:       29 d8                   sub    %ebx,%eax
    0.00 :	  675822:       48 98                   cltq   
         :	        new_recent_alloc = reusable_buffers - reusable_buffers_est;
         :	        if (new_strategy_delta > 0 && new_recent_alloc > 0)
    0.00 :	  675824:       48 85 c0                test   %rax,%rax
    0.00 :	  675827:       7e 34                   jle    67585d <BgBufferSync+0x16d>
    0.00 :	  675829:       85 d2                   test   %edx,%edx
    0.00 :	  67582b:       74 30                   je     67585d <BgBufferSync+0x16d>
         :	        {
         :	                scans_per_alloc = (float) new_strategy_delta / (float) new_recent_alloc;
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  67582d:       f3 48 0f 2a c0          cvtsi2ss %rax,%xmm0
    0.00 :	  675832:       89 d0                   mov    %edx,%eax
    0.00 :	  675834:       f3 48 0f 2a c8          cvtsi2ss %rax,%xmm1
    0.00 :	  675839:       f3 0f 10 15 5f 2e 4f    movss  0x4f2e5f(%rip),%xmm2        # b686a0 <smoothed_density.17634>
    0.00 :	  675840:       00 
    0.00 :	  675841:       f3 0f 5e c1             divss  %xmm1,%xmm0
    0.00 :	  675845:       f3 0f 5c c2             subss  %xmm2,%xmm0
    0.00 :	  675849:       f3 0f 59 05 93 48 23    mulss  0x234893(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  675850:       00 
    0.00 :	  675851:       f3 0f 58 d0             addss  %xmm0,%xmm2
    0.00 :	  675855:       f3 0f 11 15 43 2e 4f    movss  %xmm2,0x4f2e43(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  67585c:       00 
         :	                         scans_per_alloc, smoothed_density);
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
    0.00 :	  67585d:       44 8b 55 c4             mov    -0x3c(%rbp),%r10d
    0.00 :	  675861:       31 c0                   xor    %eax,%eax
    0.00 :	  675863:       45 85 d2                test   %r10d,%r10d
    0.00 :	  675866:       75 0a                   jne    675872 <BgBufferSync+0x182>
    0.00 :	  675868:       44 8b 4d d0             mov    -0x30(%rbp),%r9d
    0.00 :	  67586c:       45 85 c9                test   %r9d,%r9d
    0.00 :	  67586f:       0f 94 c0                sete   %al
         :	}
    0.00 :	  675872:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  675876:       5b                      pop    %rbx
    0.00 :	  675877:       41 5c                   pop    %r12
    0.00 :	  675879:       41 5d                   pop    %r13
    0.00 :	  67587b:       41 5e                   pop    %r14
    0.00 :	  67587d:       41 5f                   pop    %r15
    0.00 :	  67587f:       c9                      leaveq 
    0.00 :	  675880:       c3                      retq   
    0.00 :	  675881:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * weird-looking coding of xxx_passes comparisons are to avoid bogus
         :	         * behavior when the passes counts wrap around.
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
    0.00 :	  675888:       44 8b 45 d4             mov    -0x2c(%rbp),%r8d
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  67588c:       89 c1                   mov    %eax,%ecx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67588e:       8b 3d 8c 32 4f 00       mov    0x4f328c(%rip),%edi        # b68b20 <NBuffers>
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  675894:       2b 0d 06 78 50 00       sub    0x507806(%rip),%ecx        # b7d0a0 <prev_strategy_buf_id.17629>
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  67589a:       44 89 c0                mov    %r8d,%eax
    0.00 :	  67589d:       2b 05 f9 77 50 00       sub    0x5077f9(%rip),%eax        # b7d09c <prev_strategy_passes.17630>
    0.00 :	  6758a3:       48 63 d7                movslq %edi,%rdx
    0.00 :	  6758a6:       89 7d c4                mov    %edi,-0x3c(%rbp)
         :	         */
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
    0.00 :	  6758a9:       48 63 c9                movslq %ecx,%rcx
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758ac:       48 98                   cltq   
    0.00 :	  6758ae:       48 0f af c2             imul   %rdx,%rax
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758b2:       8b 15 dc 77 50 00       mov    0x5077dc(%rip),%edx        # b7d094 <next_passes.17632>
         :	        if (saved_info_valid)
         :	        {
         :	                int32           passes_delta = strategy_passes - prev_strategy_passes;
         :
         :	                strategy_delta = strategy_buf_id - prev_strategy_buf_id;
         :	                strategy_delta += (long) passes_delta *NBuffers;
    0.00 :	  6758b8:       48 01 c1                add    %rax,%rcx
         :
         :	                Assert(strategy_delta >= 0);
         :
         :	                if ((int32) (next_passes - strategy_passes) > 0)
    0.00 :	  6758bb:       89 d0                   mov    %edx,%eax
    0.00 :	  6758bd:       44 29 c0                sub    %r8d,%eax
    0.00 :	  6758c0:       85 c0                   test   %eax,%eax
    0.00 :	  6758c2:       0f 8e 23 01 00 00       jle    6759eb <BgBufferSync+0x2fb>
         :	                {
         :	                        /* we're one pass ahead of the strategy point */
         :	                        bufs_to_lap = strategy_buf_id - next_to_clean;
    0.00 :	  6758c8:       89 f0                   mov    %esi,%eax
    0.00 :	  6758ca:       2b 05 c8 77 50 00       sub    0x5077c8(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  6758d0:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758d3:       48 85 c9                test   %rcx,%rcx
         :	                next_passes = strategy_passes;
         :	                bufs_to_lap = NBuffers;
         :	        }
         :
         :	        /* Update saved info for next time */
         :	        prev_strategy_buf_id = strategy_buf_id;
    0.00 :	  6758d6:       89 35 c4 77 50 00       mov    %esi,0x5077c4(%rip)        # b7d0a0 <prev_strategy_buf_id.17629>
         :	        prev_strategy_passes = strategy_passes;
    0.00 :	  6758dc:       44 89 05 b9 77 50 00    mov    %r8d,0x5077b9(%rip)        # b7d09c <prev_strategy_passes.17630>
         :	        saved_info_valid = true;
    0.00 :	  6758e3:       c6 05 ba 77 50 00 01    movb   $0x1,0x5077ba(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  6758ea:       0f 8e 2c 01 00 00       jle    675a1c <BgBufferSync+0x32c>
    0.00 :	  6758f0:       45 85 d2                test   %r10d,%r10d
    0.00 :	  6758f3:       0f 57 d2                xorps  %xmm2,%xmm2
    0.00 :	  6758f6:       0f 84 6f fe ff ff       je     67576b <BgBufferSync+0x7b>
         :	        {
         :	                scans_per_alloc = (float) strategy_delta / (float) recent_alloc;
    0.00 :	  6758fc:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
         :	                smoothed_density += (scans_per_alloc - smoothed_density) /
    0.00 :	  675901:       f3 48 0f 2a c1          cvtsi2ss %rcx,%xmm0
    0.00 :	  675906:       f3 0f 10 0d 92 2d 4f    movss  0x4f2d92(%rip),%xmm1        # b686a0 <smoothed_density.17634>
    0.00 :	  67590d:       00 
    0.00 :	  67590e:       f3 0f 5e c2             divss  %xmm2,%xmm0
    0.00 :	  675912:       f3 0f 5c c1             subss  %xmm1,%xmm0
    0.00 :	  675916:       f3 0f 59 05 c6 47 23    mulss  0x2347c6(%rip),%xmm0        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  67591d:       00 
    0.00 :	  67591e:       f3 0f 58 c8             addss  %xmm0,%xmm1
    0.00 :	  675922:       f3 0f 11 0d 76 2d 4f    movss  %xmm1,0x4f2d76(%rip)        # b686a0 <smoothed_density.17634>
    0.00 :	  675929:       00 
    0.00 :	  67592a:       e9 3c fe ff ff          jmpq   67576b <BgBufferSync+0x7b>
    0.00 :	  67592f:       90                      nop
         :	        reusable_buffers = reusable_buffers_est;
         :
         :	        /* Execute the LRU scan */
         :	        while (num_to_scan > 0 && reusable_buffers < upcoming_alloc_est)
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1779
   40.00 :	  675930:       8b 3d 62 77 50 00       mov    0x507762(%rip),%edi        # b7d098 <next_to_clean.17631>
    0.00 :	  675936:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  67593b:       e8 20 f9 ff ff          callq  675260 <SyncOneBuffer>
    0.00 :	  675940:       89 c2                   mov    %eax,%edx
         :
         :	                if (++next_to_clean >= NBuffers)
    0.00 :	  675942:       8b 05 50 77 50 00       mov    0x507750(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675948:       83 c0 01                add    $0x1,%eax
    0.00 :	  67594b:       3b 05 cf 31 4f 00       cmp    0x4f31cf(%rip),%eax        # b68b20 <NBuffers>
    0.00 :	  675951:       89 05 41 77 50 00       mov    %eax,0x507741(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675957:       7c 11                   jl     67596a <BgBufferSync+0x27a>
         :	                {
         :	                        next_to_clean = 0;
         :	                        next_passes++;
    0.00 :	  675959:       83 05 34 77 50 00 01    addl   $0x1,0x507734(%rip)        # b7d094 <next_passes.17632>
         :	        {
         :	                int                     buffer_state = SyncOneBuffer(next_to_clean, true);
         :
         :	                if (++next_to_clean >= NBuffers)
         :	                {
         :	                        next_to_clean = 0;
    0.00 :	  675960:       c7 05 2e 77 50 00 00    movl   $0x0,0x50772e(%rip)        # b7d098 <next_to_clean.17631>
    0.00 :	  675967:       00 00 00 
         :	                        next_passes++;
         :	                }
         :	                num_to_scan--;
    0.00 :	  67596a:       83 eb 01                sub    $0x1,%ebx
         :
         :	                if (buffer_state & BUF_WRITTEN)
    0.00 :	  67596d:       f6 c2 01                test   $0x1,%dl
    0.00 :	  675970:       74 26                   je     675998 <BgBufferSync+0x2a8>
         :	                {
         :	                        reusable_buffers++;
    0.00 :	  675972:       41 83 c4 01             add    $0x1,%r12d
         :	                        if (++num_written >= bgwriter_lru_maxpages)
    0.00 :	  675976:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  67597a:       44 3b 2d 0f 2d 4f 00    cmp    0x4f2d0f(%rip),%r13d        # b68690 <bgwriter_lru_maxpages>
    0.00 :	  675981:       0f 8c 79 fe ff ff       jl     675800 <BgBufferSync+0x110>
         :	                        {
         :	                                BgWriterStats.m_maxwritten_clean++;
    0.00 :	  675987:       48 83 05 d9 a0 54 00    addq   $0x1,0x54a0d9(%rip)        # bbfa68 <BgWriterStats+0x28>
    0.00 :	  67598e:       01 
         :	                                break;
    0.00 :	  67598f:       e9 79 fe ff ff          jmpq   67580d <BgBufferSync+0x11d>
    0.00 :	  675994:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        }
         :	                }
         :	                else if (buffer_state & BUF_REUSABLE)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1797
   40.00 :	  675998:       83 e2 02                and    $0x2,%edx
         :	                        reusable_buffers++;
    0.00 :	  67599b:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  67599e:       41 83 dc ff             sbb    $0xffffffff,%r12d
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1798
   20.00 :	  6759a2:       e9 59 fe ff ff          jmpq   675800 <BgBufferSync+0x110>
    0.00 :	  6759a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  6759ae:       00 00 
         :	         * immediately follow any increase.
         :	         */
         :	        if (smoothed_alloc <= (float) recent_alloc)
         :	                smoothed_alloc = recent_alloc;
         :	        else
         :	                smoothed_alloc += ((float) recent_alloc - smoothed_alloc) /
    0.00 :	  6759b0:       f3 0f 5c d0             subss  %xmm0,%xmm2
    0.00 :	  6759b4:       f3 0f 59 15 28 47 23    mulss  0x234728(%rip),%xmm2        # 8aa0e4 <__func__.17063+0x11>
    0.00 :	  6759bb:       00 
    0.00 :	  6759bc:       f3 0f 58 c2             addss  %xmm2,%xmm0
    0.00 :	  6759c0:       f3 0f 11 05 c8 76 50    movss  %xmm0,0x5076c8(%rip)        # b7d090 <smoothed_alloc.17633>
    0.00 :	  6759c7:       00 
    0.00 :	  6759c8:       e9 cd fd ff ff          jmpq   67579a <BgBufferSync+0xaa>
    0.00 :	  6759cd:       0f 1f 00                nopl   (%rax)
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759d0:       c6 05 cd 76 50 00 00    movb   $0x0,0x5076cd(%rip)        # b7d0a4 <saved_info_valid.17628>
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759d7:       48 83 c4 18             add    $0x18,%rsp
         :	         * stuff.  We mark the saved state invalid so that we can recover sanely
         :	         * if LRU scan is turned back on later.
         :	         */
         :	        if (bgwriter_lru_maxpages <= 0)
         :	        {
         :	                saved_info_valid = false;
    0.00 :	  6759db:       b8 01 00 00 00          mov    $0x1,%eax
         :	#endif
         :	        }
         :
         :	        /* Return true if OK to hibernate */
         :	        return (bufs_to_lap == 0 && recent_alloc == 0);
         :	}
    0.00 :	  6759e0:       5b                      pop    %rbx
    0.00 :	  6759e1:       41 5c                   pop    %r12
    0.00 :	  6759e3:       41 5d                   pop    %r13
    0.00 :	  6759e5:       41 5e                   pop    %r14
    0.00 :	  6759e7:       41 5f                   pop    %r15
    0.00 :	  6759e9:       c9                      leaveq 
    0.00 :	  6759ea:       c3                      retq   
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  6759eb:       41 39 d0                cmp    %edx,%r8d
    0.00 :	  6759ee:       74 12                   je     675a02 <BgBufferSync+0x312>
         :	                        elog(DEBUG2, "bgwriter behind: bgw %u-%u strategy %u-%u delta=%ld",
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta);
         :	#endif
         :	                        next_to_clean = strategy_buf_id;
    0.00 :	  6759f0:       89 35 a2 76 50 00       mov    %esi,0x5076a2(%rip)        # b7d098 <next_to_clean.17631>
         :	                        next_passes = strategy_passes;
    0.00 :	  6759f6:       44 89 05 97 76 50 00    mov    %r8d,0x507697(%rip)        # b7d094 <next_passes.17632>
    0.00 :	  6759fd:       e9 d1 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a02:       8b 05 90 76 50 00       mov    0x507690(%rip),%eax        # b7d098 <next_to_clean.17631>
    0.00 :	  675a08:       39 c6                   cmp    %eax,%esi
    0.00 :	  675a0a:       7f e4                   jg     6759f0 <BgBufferSync+0x300>
         :	                                 next_to_clean >= strategy_buf_id)
         :	                {
         :	                        /* on same pass, but ahead or at least not behind */
         :	                        bufs_to_lap = NBuffers - (next_to_clean - strategy_buf_id);
    0.00 :	  675a0c:       89 fa                   mov    %edi,%edx
    0.00 :	  675a0e:       29 c2                   sub    %eax,%edx
    0.00 :	  675a10:       89 d0                   mov    %edx,%eax
    0.00 :	  675a12:       01 f0                   add    %esi,%eax
    0.00 :	  675a14:       89 45 c4                mov    %eax,-0x3c(%rbp)
         :	                                 next_passes, next_to_clean,
         :	                                 strategy_passes, strategy_buf_id,
         :	                                 strategy_delta, bufs_to_lap);
         :	#endif
         :	                }
         :	                else if (next_passes == strategy_passes &&
    0.00 :	  675a17:       e9 b7 fe ff ff          jmpq   6758d3 <BgBufferSync+0x1e3>
         :	         * Compute how many buffers had to be scanned for each new allocation, ie,
         :	         * 1/density of reusable buffers, and track a moving average of that.
         :	         *
         :	         * If the strategy point didn't move, we don't update the density estimate
         :	         */
         :	        if (strategy_delta > 0 && recent_alloc > 0)
    0.00 :	  675a1c:       f3 49 0f 2a d1          cvtsi2ss %r9,%xmm2
    0.00 :	  675a21:       e9 45 fd ff ff          jmpq   67576b <BgBufferSync+0x7b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1448
   40.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1438
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1438
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679a90 <FileSeek>:
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a90:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1438
   20.00 :	  679a91:       89 f8                   mov    %edi,%eax
    0.00 :	  679a93:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679a96:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1448
   40.00 :	  679a9a:       4c 63 ef                movslq %edi,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679a9d:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aa1:       49 c1 e5 06             shl    $0x6,%r13
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679aa5:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  679aa9:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679aad:       4d 89 ec                mov    %r13,%r12
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
    0.00 :	  679ab0:       48 83 ec 20             sub    $0x20,%rsp
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ab4:       4c 03 25 dd 36 50 00    add    0x5036dd(%rip),%r12        # b7d198 <VfdCache>
         :	        return pg_fsync(VfdCache[file].fd);
         :	}
         :
         :	off_t
         :	FileSeek(File file, off_t offset, int whence)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1438
   40.00 :	  679abb:       49 89 f6                mov    %rsi,%r14
    0.00 :	  679abe:       89 d3                   mov    %edx,%ebx
         :	        DO_DB(elog(LOG, "FileSeek: %d (%s) " INT64_FORMAT " " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679ac0:       41 8b 3c 24             mov    (%r12),%edi
    0.00 :	  679ac4:       83 ff ff                cmp    $0xffffffff,%edi
    0.00 :	  679ac7:       74 6f                   je     679b38 <FileSeek+0xa8>
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ac9:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679acc:       0f 84 9e 00 00 00       je     679b70 <FileSeek+0xe0>
    0.00 :	  679ad2:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679ad5:       0f 84 05 01 00 00       je     679be0 <FileSeek+0x150>
    0.00 :	  679adb:       85 db                   test   %ebx,%ebx
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679add:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679ae2:       be d7 05 00 00          mov    $0x5d7,%esi
         :	                                break;
         :	                }
         :	        }
         :	        else
         :	        {
         :	                switch (whence)
    0.00 :	  679ae7:       75 27                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679ae9:       4d 85 f6                test   %r14,%r14
    0.00 :	  679aec:       0f 88 28 01 00 00       js     679c1a <FileSeek+0x18a>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                if (VfdCache[file].seekPos != offset)
    0.00 :	  679af2:       4d 39 74 24 20          cmp    %r14,0x20(%r12)
    0.00 :	  679af7:       0f 84 8b 00 00 00       je     679b88 <FileSeek+0xf8>
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679afd:       31 d2                   xor    %edx,%edx
    0.00 :	  679aff:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679b02:       e8 69 00 df ff          callq  469b70 <lseek@plt>
    0.00 :	  679b07:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679b0c:       eb 7a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b0e:       66 90                   xchg   %ax,%ax
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b10:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679b15:       e8 06 19 10 00          callq  77b420 <elog_start>
    0.00 :	  679b1a:       89 da                   mov    %ebx,%edx
    0.00 :	  679b1c:       be 3a a3 8a 00          mov    $0x8aa33a,%esi
    0.00 :	  679b21:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679b26:       31 c0                   xor    %eax,%eax
    0.00 :	  679b28:       e8 03 17 10 00          callq  77b230 <elog_finish>
    0.00 :	  679b2d:       e8 9e f9 de ff          callq  4694d0 <abort@plt>
    0.00 :	  679b32:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b38:       83 fa 01                cmp    $0x1,%edx
    0.00 :	  679b3b:       0f 84 cf 00 00 00       je     679c10 <FileSeek+0x180>
    0.00 :	  679b41:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  679b44:       74 6a                   je     679bb0 <FileSeek+0x120>
    0.00 :	  679b46:       85 db                   test   %ebx,%ebx
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                           offset, whence);
         :	                                break;
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
    0.00 :	  679b48:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b4d:       be bd 05 00 00          mov    $0x5bd,%esi
         :	                           (int64) VfdCache[file].seekPos,
         :	                           (int64) offset, whence));
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
    0.00 :	  679b52:       75 bc                   jne    679b10 <FileSeek+0x80>
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b54:       4d 85 f6                test   %r14,%r14
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679b57:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679b5c:       be af 05 00 00          mov    $0x5af,%esi
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
    0.00 :	  679b61:       0f 88 bd 00 00 00       js     679c24 <FileSeek+0x194>
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
    0.00 :	  679b67:       4d 89 74 24 20          mov    %r14,0x20(%r12)
         :	                                break;
    0.00 :	  679b6c:       eb 1a                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679b6e:       66 90                   xchg   %ax,%ax
         :	                                if (VfdCache[file].seekPos != offset)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
    0.00 :	  679b70:       48 85 f6                test   %rsi,%rsi
    0.00 :	  679b73:       0f 85 7f 00 00 00       jne    679bf8 <FileSeek+0x168>
    0.00 :	  679b79:       49 83 7c 24 20 ff       cmpq   $0xffffffffffffffff,0x20(%r12)
    0.00 :	  679b7f:       90                      nop
    0.00 :	  679b80:       74 76                   je     679bf8 <FileSeek+0x168>
    0.00 :	  679b82:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        default:
         :	                                elog(ERROR, "invalid whence: %d", whence);
         :	                                break;
         :	                }
         :	        }
         :	        return VfdCache[file].seekPos;
    0.00 :	  679b88:       48 8b 05 09 36 50 00    mov    0x503609(%rip),%rax        # b7d198 <VfdCache>
    0.00 :	  679b8f:       4a 8b 54 28 20          mov    0x20(%rax,%r13,1),%rdx
         :	}
    0.00 :	  679b94:       48 89 d0                mov    %rdx,%rax
    0.00 :	  679b97:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  679b9b:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  679ba0:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  679ba5:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
    0.00 :	  679baa:       c9                      leaveq 
    0.00 :	  679bab:       c3                      retq   
    0.00 :	  679bac:       0f 1f 40 00             nopl   0x0(%rax)
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
    0.00 :	  679bb0:       89 c7                   mov    %eax,%edi
    0.00 :	  679bb2:       e8 69 fd ff ff          callq  679920 <FileAccess>
         :	                                if (returnCode < 0)
    0.00 :	  679bb7:       85 c0                   test   %eax,%eax
         :	                                        return returnCode;
    0.00 :	  679bb9:       48 63 d0                movslq %eax,%rdx
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
         :	                                break;
         :	                        case SEEK_END:
         :	                                returnCode = FileAccess(file);
         :	                                if (returnCode < 0)
    0.00 :	  679bbc:       78 d6                   js     679b94 <FileSeek+0x104>
         :	                                        return returnCode;
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bbe:       4c 89 eb                mov    %r13,%rbx
    0.00 :	  679bc1:       48 03 1d d0 35 50 00    add    0x5035d0(%rip),%rbx        # b7d198 <VfdCache>
    0.00 :	  679bc8:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679bcd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679bd0:       8b 3b                   mov    (%rbx),%edi
    0.00 :	  679bd2:       e8 99 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bd7:       48 89 43 20             mov    %rax,0x20(%rbx)
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bdb:       eb ab                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bdd:       0f 1f 00                nopl   (%rax)
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_END:
         :	                                VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679be0:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  679be5:       e8 86 ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679bea:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679bef:       90                      nop
         :	                                                                                           offset, whence);
         :	                                break;
    0.00 :	  679bf0:       eb 96                   jmp    679b88 <FileSeek+0xf8>
    0.00 :	  679bf2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
         :	                                                                                                   offset, whence);
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                if (offset != 0 || VfdCache[file].seekPos == FileUnknownPos)
         :	                                        VfdCache[file].seekPos = lseek(VfdCache[file].fd,
    0.00 :	  679bf8:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  679bfd:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  679c00:       e8 6b ff de ff          callq  469b70 <lseek@plt>
    0.00 :	  679c05:       49 89 44 24 20          mov    %rax,0x20(%r12)
    0.00 :	  679c0a:       e9 79 ff ff ff          jmpq   679b88 <FileSeek+0xf8>
    0.00 :	  679c0f:       90                      nop
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
         :	                                                 (int64) offset);
         :	                                VfdCache[file].seekPos = offset;
         :	                                break;
         :	                        case SEEK_CUR:
         :	                                VfdCache[file].seekPos += offset;
    0.00 :	  679c10:       49 01 74 24 20          add    %rsi,0x20(%r12)
         :	                                break;
    0.00 :	  679c15:       e9 6e ff ff ff          jmpq   679b88 <FileSeek+0xf8>
         :	        {
         :	                switch (whence)
         :	                {
         :	                        case SEEK_SET:
         :	                                if (offset < 0)
         :	                                        elog(ERROR, "invalid seek offset: " INT64_FORMAT,
    0.00 :	  679c1a:       ba bf a9 8a 00          mov    $0x8aa9bf,%edx
    0.00 :	  679c1f:       be c8 05 00 00          mov    $0x5c8,%esi
    0.00 :	  679c24:       bf f1 a2 8a 00          mov    $0x8aa2f1,%edi
    0.00 :	  679c29:       e8 f2 17 10 00          callq  77b420 <elog_start>
    0.00 :	  679c2e:       4c 89 f2                mov    %r14,%rdx
    0.00 :	  679c31:       be 21 a3 8a 00          mov    $0x8aa321,%esi
    0.00 :	  679c36:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  679c3b:       31 c0                   xor    %eax,%eax
    0.00 :	  679c3d:       e8 ee 15 10 00          callq  77b230 <elog_finish>
    0.00 :	  679c42:       e8 89 f8 de ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1723
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1758
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1775
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1736
   20.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1736
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006983d0 <_mdfd_getseg>:
         :	 * EXTENSION_CREATE case.
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
    0.00 :	  6983d0:       55                      push   %rbp
    0.00 :	  6983d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6983d4:       41 57                   push   %r15
    0.00 :	  6983d6:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1723
   20.00 :	  6983d8:       41 55                   push   %r13
    0.00 :	  6983da:       41 54                   push   %r12
    0.00 :	  6983dc:       53                      push   %rbx
    0.00 :	  6983dd:       89 cb                   mov    %ecx,%ebx
    0.00 :	  6983df:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  6983e3:       89 55 c8                mov    %edx,-0x38(%rbp)
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983e6:       44 89 c2                mov    %r8d,%edx
         :	 * EXTENSION_CREATE case.
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
    0.00 :	  6983e9:       48 89 7d d0             mov    %rdi,-0x30(%rbp)
    0.00 :	  6983ed:       89 75 cc                mov    %esi,-0x34(%rbp)
    0.00 :	  6983f0:       44 89 45 c4             mov    %r8d,-0x3c(%rbp)
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983f4:       e8 47 f5 ff ff          callq  697940 <mdopen>
         :	        BlockNumber targetseg;
         :	        BlockNumber nextsegno;
         :
         :	        if (!v)
    0.00 :	  6983f9:       48 85 c0                test   %rax,%rax
         :	 */
         :	static MdfdVec *
         :	_mdfd_getseg(SMgrRelation reln, ForkNumber forknum, BlockNumber blkno,
         :	                         bool skipFsync, ExtensionBehavior behavior)
         :	{
         :	        MdfdVec    *v = mdopen(reln, forknum, behavior);
    0.00 :	  6983fc:       49 89 c4                mov    %rax,%r12
         :	        BlockNumber targetseg;
         :	        BlockNumber nextsegno;
         :
         :	        if (!v)
    0.00 :	  6983ff:       0f 84 d3 00 00 00       je     6984d8 <_mdfd_getseg+0x108>
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
    0.00 :	  698405:       44 8b 7d c8             mov    -0x38(%rbp),%r15d
    0.00 :	  698409:       41 c1 ef 11             shr    $0x11,%r15d
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  69840d:       45 85 ff                test   %r15d,%r15d
    0.00 :	  698410:       0f 84 c2 00 00 00       je     6984d8 <_mdfd_getseg+0x108>
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698416:       0f be db                movsbl %bl,%ebx
         :
         :	        if (!v)
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  698419:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  69841f:       41 be ff ff 01 00       mov    $0x1ffff,%r14d
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698425:       89 5d c0                mov    %ebx,-0x40(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1758
   20.00 :	  698428:       eb 1d                   jmp    698447 <_mdfd_getseg+0x77>
    0.00 :	  69842a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        if (v->mdfd_chain == NULL)
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1775
   20.00 :	  698430:       49 89 c4                mov    %rax,%r12
         :
         :	        if (!v)
         :	                return NULL;                    /* only possible if EXTENSION_RETURN_NULL */
         :
         :	        targetseg = blkno / ((BlockNumber) RELSEG_SIZE);
         :	        for (nextsegno = 1; nextsegno <= targetseg; nextsegno++)
    0.00 :	  698433:       41 83 c5 01             add    $0x1,%r13d
    0.00 :	  698437:       41 81 c6 00 00 02 00    add    $0x20000,%r14d
    0.00 :	  69843e:       45 39 ef                cmp    %r13d,%r15d
    0.00 :	  698441:       0f 82 91 00 00 00       jb     6984d8 <_mdfd_getseg+0x108>
         :	        {
         :	                Assert(nextsegno == v->mdfd_segno + 1);
         :
         :	                if (v->mdfd_chain == NULL)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:1736
   20.00 :	  698447:       49 8b 44 24 08          mov    0x8(%r12),%rax
   20.00 :	  69844c:       48 85 c0                test   %rax,%rax
    0.00 :	  69844f:       75 df                   jne    698430 <_mdfd_getseg+0x60>
         :	                         * active segment are of size RELSEG_SIZE; therefore, pad them out
         :	                         * with zeroes if needed.  (This only matters if caller is
         :	                         * extending the relation discontiguously, but that can happen in
         :	                         * hash indexes.)
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
    0.00 :	  698451:       83 7d c4 02             cmpl   $0x2,-0x3c(%rbp)
    0.00 :	  698455:       74 0d                   je     698464 <_mdfd_getseg+0x94>
    0.00 :	  698457:       80 3d 0a 0d 4e 00 00    cmpb   $0x0,0x4e0d0a(%rip)        # b79168 <InRecovery>
    0.00 :	  69845e:       0f 84 8c 00 00 00       je     6984f0 <_mdfd_getseg+0x120>
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
    0.00 :	  698464:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698467:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  69846b:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  69846e:       e8 9d f7 ff ff          callq  697c10 <_mdnblocks>
    0.00 :	  698473:       3d ff ff 01 00          cmp    $0x1ffff,%eax
    0.00 :	  698478:       76 7e                   jbe    6984f8 <_mdfd_getseg+0x128>
         :	                                        mdextend(reln, forknum,
         :	                                                         nextsegno * ((BlockNumber) RELSEG_SIZE) - 1,
         :	                                                         zerobuf, skipFsync);
         :	                                        pfree(zerobuf);
         :	                                }
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, +nextsegno, O_CREAT);
    0.00 :	  69847a:       b9 40 00 00 00          mov    $0x40,%ecx
         :	                        }
         :	                        else
         :	                        {
         :	                                /* We won't create segment if not existent */
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, nextsegno, 0);
    0.00 :	  69847f:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698482:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  698486:       44 89 ea                mov    %r13d,%edx
    0.00 :	  698489:       e8 72 f8 ff ff          callq  697d00 <_mdfd_openseg>
    0.00 :	  69848e:       49 89 44 24 08          mov    %rax,0x8(%r12)
         :	                        }
         :	                        if (v->mdfd_chain == NULL)
    0.00 :	  698493:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  698498:       4d 85 e4                test   %r12,%r12
    0.00 :	  69849b:       75 96                   jne    698433 <_mdfd_getseg+0x63>
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
    0.00 :	  69849d:       83 7d c4 01             cmpl   $0x1,-0x3c(%rbp)
    0.00 :	  6984a1:       75 0a                   jne    6984ad <_mdfd_getseg+0xdd>
    0.00 :	  6984a3:       e8 18 18 dd ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  6984a8:       83 38 02                cmpl   $0x2,(%rax)
    0.00 :	  6984ab:       74 2b                   je     6984d8 <_mdfd_getseg+0x108>
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
    0.00 :	  6984ad:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6984b0:       b9 72 e3 8a 00          mov    $0x8ae372,%ecx
    0.00 :	  6984b5:       ba f3 06 00 00          mov    $0x6f3,%edx
    0.00 :	  6984ba:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  6984bf:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6984c4:       e8 f7 25 0e 00          callq  77aac0 <errstart>
    0.00 :	  6984c9:       84 c0                   test   %al,%al
    0.00 :	  6984cb:       75 5b                   jne    698528 <_mdfd_getseg+0x158>
    0.00 :	  6984cd:       e8 fe 0f dd ff          callq  4694d0 <abort@plt>
    0.00 :	  6984d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        }
         :	                }
         :	                v = v->mdfd_chain;
         :	        }
         :	        return v;
         :	}
    0.00 :	  6984d8:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  6984dc:       4c 89 e0                mov    %r12,%rax
    0.00 :	  6984df:       5b                      pop    %rbx
    0.00 :	  6984e0:       41 5c                   pop    %r12
    0.00 :	  6984e2:       41 5d                   pop    %r13
    0.00 :	  6984e4:       41 5e                   pop    %r14
    0.00 :	  6984e6:       41 5f                   pop    %r15
    0.00 :	  6984e8:       c9                      leaveq 
    0.00 :	  6984e9:       c3                      retq   
    0.00 :	  6984ea:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, +nextsegno, O_CREAT);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* We won't create segment if not existent */
         :	                                v->mdfd_chain = _mdfd_openseg(reln, forknum, nextsegno, 0);
    0.00 :	  6984f0:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6984f2:       eb 8b                   jmp    69847f <_mdfd_getseg+0xaf>
    0.00 :	  6984f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
    0.00 :	  6984f8:       bf 00 20 00 00          mov    $0x2000,%edi
    0.00 :	  6984fd:       e8 6e 0a 10 00          callq  798f70 <palloc0>
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  698502:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  698506:       44 8b 45 c0             mov    -0x40(%rbp),%r8d
         :	                         */
         :	                        if (behavior == EXTENSION_CREATE || InRecovery)
         :	                        {
         :	                                if (_mdnblocks(reln, forknum, v) < RELSEG_SIZE)
         :	                                {
         :	                                        char       *zerobuf = palloc0(BLCKSZ);
    0.00 :	  69850a:       48 89 c3                mov    %rax,%rbx
         :
         :	                                        mdextend(reln, forknum,
    0.00 :	  69850d:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  698510:       48 89 c1                mov    %rax,%rcx
    0.00 :	  698513:       44 89 f2                mov    %r14d,%edx
    0.00 :	  698516:       e8 35 fc ff ff          callq  698150 <mdextend>
         :	                                                         nextsegno * ((BlockNumber) RELSEG_SIZE) - 1,
         :	                                                         zerobuf, skipFsync);
         :	                                        pfree(zerobuf);
    0.00 :	  69851b:       48 89 df                mov    %rbx,%rdi
    0.00 :	  69851e:       e8 5d 06 10 00          callq  798b80 <pfree>
    0.00 :	  698523:       e9 52 ff ff ff          jmpq   69847a <_mdfd_getseg+0xaa>
         :	                        if (v->mdfd_chain == NULL)
         :	                        {
         :	                                if (behavior == EXTENSION_RETURN_NULL &&
         :	                                        FILE_POSSIBLY_DELETED(errno))
         :	                                        return NULL;
         :	                                ereport(ERROR,
    0.00 :	  698528:       8b 75 cc                mov    -0x34(%rbp),%esi
    0.00 :	  69852b:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  69852f:       44 89 ea                mov    %r13d,%edx
    0.00 :	  698532:       e8 59 f7 ff ff          callq  697c90 <_mdfd_segpath>
    0.00 :	  698537:       8b 55 c8                mov    -0x38(%rbp),%edx
    0.00 :	  69853a:       48 89 c6                mov    %rax,%rsi
    0.00 :	  69853d:       bf b0 e1 8a 00          mov    $0x8ae1b0,%edi
    0.00 :	  698542:       31 c0                   xor    %eax,%eax
    0.00 :	  698544:       e8 57 43 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  698549:       89 c3                   mov    %eax,%ebx
    0.00 :	  69854b:       e8 a0 45 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  698550:       89 de                   mov    %ebx,%esi
    0.00 :	  698552:       89 c7                   mov    %eax,%edi
    0.00 :	  698554:       31 c0                   xor    %eax,%eax
    0.00 :	  698556:       e8 85 20 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  69855b:       e9 6d ff ff ff          jmpq   6984cd <_mdfd_getseg+0xfd>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   60.00 ??:0
   20.00 ??:0
   20.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000099390 <__gettimeofday>:
    0.00 :	   99390:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   99394:       48 8b 05 ad de 2d 00    mov    0x2ddead(%rip),%rax        # 377248 <__vdso_gettimeofday>
   60.00 :	   9939b:       48 c1 c8 11             ror    $0x11,%rax
   20.00 :	   9939f:       64 48 33 04 25 30 00    xor    %fs:0x30,%rax
    0.00 :	   993a6:       00 00 
    0.00 :	   993a8:       ff d0                   callq  *%rax
   20.00 :	   993aa:       3d 01 f0 ff ff          cmp    $0xfffff001,%eax
    0.00 :	   993af:       73 05                   jae    993b6 <__gettimeofday+0x26>
    0.00 :	   993b1:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   993b5:       c3                      retq   
    0.00 :	   993b6:       48 8b 0d 7b 8a 2d 00    mov    0x2d8a7b(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   993bd:       31 d2                   xor    %edx,%edx
    0.00 :	   993bf:       48 29 c2                sub    %rax,%rdx
    0.00 :	   993c2:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   993c5:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   993c9:       eb e6                   jmp    993b1 <__gettimeofday+0x21>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   80.00 ??:0
   20.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000cd5c0 <__read>:
    0.00 :	   cd5c0:       83 3d ed a0 2a 00 00    cmpl   $0x0,0x2aa0ed(%rip)        # 3776b4 <__libc_multiple_threads>
    0.00 :	   cd5c7:       75 10                   jne    cd5d9 <__read_nocancel+0x10>
         :
         :	00000000000cd5c9 <__read_nocancel>:
    0.00 :	   cd5c9:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5ce:       0f 05                   syscall 
   80.00 :	   cd5d0:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd5d6:       73 31                   jae    cd609 <__read_nocancel+0x40>
   20.00 :	   cd5d8:       c3                      retq   
    0.00 :	   cd5d9:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	   cd5dd:       e8 4e ac 01 00          callq  e8230 <__libc_enable_asynccancel>
    0.00 :	   cd5e2:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	   cd5e6:       b8 00 00 00 00          mov    $0x0,%eax
    0.00 :	   cd5eb:       0f 05                   syscall 
    0.00 :	   cd5ed:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	   cd5f1:       48 89 c2                mov    %rax,%rdx
    0.00 :	   cd5f4:       e8 97 ac 01 00          callq  e8290 <__libc_disable_asynccancel>
    0.00 :	   cd5f9:       48 89 d0                mov    %rdx,%rax
    0.00 :	   cd5fc:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	   cd600:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	   cd606:       73 01                   jae    cd609 <__read_nocancel+0x40>
    0.00 :	   cd608:       c3                      retq   
    0.00 :	   cd609:       48 8b 0d 28 48 2a 00    mov    0x2a4828(%rip),%rcx        # 371e38 <_DYNAMIC+0x2d8>
    0.00 :	   cd610:       31 d2                   xor    %edx,%edx
    0.00 :	   cd612:       48 29 c2                sub    %rax,%rdx
    0.00 :	   cd615:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	   cd618:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	   cd61c:       eb ea                   jmp    cd608 <__read_nocancel+0x3f>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:531
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:534
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:587
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:597
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9950 <advance_aggregates>:
         :	 *
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static void
         :	advance_aggregates(AggState *aggstate, AggStatePerGroup pergroup)
         :	{
    0.00 :	  5b9950:       55                      push   %rbp
    0.00 :	  5b9951:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9954:       41 57                   push   %r15
    0.00 :	  5b9956:       49 89 ff                mov    %rdi,%r15
    0.00 :	  5b9959:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:531
   25.00 :	  5b995b:       41 55                   push   %r13
    0.00 :	  5b995d:       41 54                   push   %r12
    0.00 :	  5b995f:       53                      push   %rbx
    0.00 :	  5b9960:       48 83 ec 18             sub    $0x18,%rsp
    0.00 :	  5b9964:       48 89 75 c0             mov    %rsi,-0x40(%rbp)
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9968:       44 8b 9f 98 00 00 00    mov    0x98(%rdi),%r11d
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:534
   25.00 :	  5b996f:       45 85 db                test   %r11d,%r11d
    0.00 :	  5b9972:       0f 8e c1 00 00 00       jle    5b9a39 <advance_aggregates+0xe9>
    0.00 :	  5b9978:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  5b997b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                AggStatePerAgg peraggstate = &aggstate->peragg[aggno];
    0.00 :	  5b9980:       4d 63 ee                movslq %r14d,%r13
    0.00 :	  5b9983:       49 69 dd a8 04 00 00    imul   $0x4a8,%r13,%rbx
    0.00 :	  5b998a:       49 03 9f b0 00 00 00    add    0xb0(%r15),%rbx
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
         :	                ExprState  *filter = peraggstate->aggrefstate->aggfilter;
    0.00 :	  5b9991:       48 8b 03                mov    (%rbx),%rax
         :	                int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5b9994:       44 8b 63 18             mov    0x18(%rbx),%r12d
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	        {
         :	                AggStatePerAgg peraggstate = &aggstate->peragg[aggno];
         :	                AggStatePerGroup pergroupstate = &pergroup[aggno];
         :	                ExprState  *filter = peraggstate->aggrefstate->aggfilter;
    0.00 :	  5b9998:       48 8b 78 28             mov    0x28(%rax),%rdi
         :	                int                     numTransInputs = peraggstate->numTransInputs;
         :	                int                     i;
         :	                TupleTableSlot *slot;
         :
         :	                /* Skip anything FILTERed out */
         :	                if (filter)
    0.00 :	  5b999c:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5b999f:       74 1c                   je     5b99bd <advance_aggregates+0x6d>
         :	                {
         :	                        Datum           res;
         :	                        bool            isnull;
         :
         :	                        res = ExecEvalExprSwitchContext(filter, aggstate->tmpcontext,
    0.00 :	  5b99a1:       49 8b b7 c0 00 00 00    mov    0xc0(%r15),%rsi
    0.00 :	  5b99a8:       48 8d 55 d7             lea    -0x29(%rbp),%rdx
    0.00 :	  5b99ac:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5b99ae:       e8 2d 35 ff ff          callq  5acee0 <ExecEvalExprSwitchContext>
         :	                                                                                        &isnull, NULL);
         :	                        if (isnull || !DatumGetBool(res))
    0.00 :	  5b99b3:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  5b99b7:       75 6f                   jne    5b9a28 <advance_aggregates+0xd8>
    0.00 :	  5b99b9:       84 c0                   test   %al,%al
    0.00 :	  5b99bb:       74 6b                   je     5b9a28 <advance_aggregates+0xd8>
         :	                                continue;
         :	                }
         :
         :	                /* Evaluate the current input expressions for this aggregate */
         :	                slot = ExecProject(peraggstate->evalproj, NULL);
    0.00 :	  5b99bd:       48 8b bb e0 00 00 00    mov    0xe0(%rbx),%rdi
    0.00 :	  5b99c4:       31 f6                   xor    %esi,%esi
    0.00 :	  5b99c6:       e8 35 36 ff ff          callq  5ad000 <ExecProject>
         :
         :	                if (peraggstate->numSortCols > 0)
    0.00 :	  5b99cb:       44 8b 93 8c 00 00 00    mov    0x8c(%rbx),%r10d
         :	                        if (isnull || !DatumGetBool(res))
         :	                                continue;
         :	                }
         :
         :	                /* Evaluate the current input expressions for this aggregate */
         :	                slot = ExecProject(peraggstate->evalproj, NULL);
    0.00 :	  5b99d2:       48 89 c1                mov    %rax,%rcx
         :
         :	                if (peraggstate->numSortCols > 0)
    0.00 :	  5b99d5:       45 85 d2                test   %r10d,%r10d
    0.00 :	  5b99d8:       7e 76                   jle    5b9a50 <advance_aggregates+0x100>
         :	                         * storing the row in the sorter, to save space if there are a lot
         :	                         * of nulls.  Note that we must only check numTransInputs columns,
         :	                         * not numInputs, since nullity in columns used only for sorting
         :	                         * is not relevant here.
         :	                         */
         :	                        if (peraggstate->transfn.fn_strict)
    0.00 :	  5b99da:       80 7b 36 00             cmpb   $0x0,0x36(%rbx)
    0.00 :	  5b99de:       74 2c                   je     5b9a0c <advance_aggregates+0xbc>
         :	                        {
         :	                                for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b99e0:       45 85 e4                test   %r12d,%r12d
    0.00 :	  5b99e3:       7e 27                   jle    5b9a0c <advance_aggregates+0xbc>
         :	                                {
         :	                                        if (slot->tts_isnull[i])
    0.00 :	  5b99e5:       48 8b 40 30             mov    0x30(%rax),%rax
    0.00 :	  5b99e9:       31 d2                   xor    %edx,%edx
    0.00 :	  5b99eb:       80 38 00                cmpb   $0x0,(%rax)
    0.00 :	  5b99ee:       48 89 c6                mov    %rax,%rsi
    0.00 :	  5b99f1:       74 11                   je     5b9a04 <advance_aggregates+0xb4>
    0.00 :	  5b99f3:       eb 33                   jmp    5b9a28 <advance_aggregates+0xd8>
    0.00 :	  5b99f5:       0f 1f 00                nopl   (%rax)
    0.00 :	  5b99f8:       0f b6 46 01             movzbl 0x1(%rsi),%eax
    0.00 :	  5b99fc:       48 83 c6 01             add    $0x1,%rsi
    0.00 :	  5b9a00:       84 c0                   test   %al,%al
    0.00 :	  5b9a02:       75 24                   jne    5b9a28 <advance_aggregates+0xd8>
         :	                         * not numInputs, since nullity in columns used only for sorting
         :	                         * is not relevant here.
         :	                         */
         :	                        if (peraggstate->transfn.fn_strict)
         :	                        {
         :	                                for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b9a04:       83 c2 01                add    $0x1,%edx
    0.00 :	  5b9a07:       41 39 d4                cmp    %edx,%r12d
    0.00 :	  5b9a0a:       7f ec                   jg     5b99f8 <advance_aggregates+0xa8>
         :	                                if (i < numTransInputs)
         :	                                        continue;
         :	                        }
         :
         :	                        /* OK, put the tuple into the tuplesort object */
         :	                        if (peraggstate->numInputs == 1)
    0.00 :	  5b9a0c:       83 7b 14 01             cmpl   $0x1,0x14(%rbx)
    0.00 :	  5b9a10:       0f 84 8a 00 00 00       je     5b9aa0 <advance_aggregates+0x150>
         :	                                tuplesort_putdatum(peraggstate->sortstate,
         :	                                                                   slot->tts_values[0],
         :	                                                                   slot->tts_isnull[0]);
         :	                        else
         :	                                tuplesort_puttupleslot(peraggstate->sortstate, slot);
    0.00 :	  5b9a16:       48 8b bb f8 00 00 00    mov    0xf8(%rbx),%rdi
    0.00 :	  5b9a1d:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  5b9a20:       e8 0b 56 1e 00          callq  79f030 <tuplesort_puttupleslot>
    0.00 :	  5b9a25:       0f 1f 00                nopl   (%rax)
         :	static void
         :	advance_aggregates(AggState *aggstate, AggStatePerGroup pergroup)
         :	{
         :	        int                     aggno;
         :
         :	        for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9a28:       41 83 c6 01             add    $0x1,%r14d
    0.00 :	  5b9a2c:       45 39 b7 98 00 00 00    cmp    %r14d,0x98(%r15)
    0.00 :	  5b9a33:       0f 8f 47 ff ff ff       jg     5b9980 <advance_aggregates+0x30>
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                }
         :	        }
         :	}
    0.00 :	  5b9a39:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  5b9a3d:       5b                      pop    %rbx
    0.00 :	  5b9a3e:       41 5c                   pop    %r12
    0.00 :	  5b9a40:       41 5d                   pop    %r13
    0.00 :	  5b9a42:       41 5e                   pop    %r14
    0.00 :	  5b9a44:       41 5f                   pop    %r15
    0.00 :	  5b9a46:       c9                      leaveq 
    0.00 :	  5b9a47:       c3                      retq   
    0.00 :	  5b9a48:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  5b9a4f:       00 
         :	                        if (peraggstate->numInputs == 1)
         :	                                tuplesort_putdatum(peraggstate->sortstate,
         :	                                                                   slot->tts_values[0],
         :	                                                                   slot->tts_isnull[0]);
         :	                        else
         :	                                tuplesort_puttupleslot(peraggstate->sortstate, slot);
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:587
   25.00 :	  5b9a50:       31 d2                   xor    %edx,%edx
         :	                        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        Assert(slot->tts_nvalid >= numTransInputs);
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5b9a52:       45 85 e4                test   %r12d,%r12d
    0.00 :	  5b9a55:       7e 31                   jle    5b9a88 <advance_aggregates+0x138>
    0.00 :	  5b9a57:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5b9a5e:       00 00 
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot->tts_values[i];
    0.00 :	  5b9a60:       48 8b 41 28             mov    0x28(%rcx),%rax
    0.00 :	  5b9a64:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5b9a68:       48 89 84 d3 28 01 00    mov    %rax,0x128(%rbx,%rdx,8)
    0.00 :	  5b9a6f:       00 
         :	                                fcinfo->argnull[i + 1] = slot->tts_isnull[i];
    0.00 :	  5b9a70:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  5b9a74:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5b9a78:       88 84 13 41 04 00 00    mov    %al,0x441(%rbx,%rdx,1)
    0.00 :	  5b9a7f:       48 83 c2 01             add    $0x1,%rdx
         :	                        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        Assert(slot->tts_nvalid >= numTransInputs);
         :	                        for (i = 0; i < numTransInputs; i++)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:597
   25.00 :	  5b9a83:       41 39 d4                cmp    %edx,%r12d
    0.00 :	  5b9a86:       7f d8                   jg     5b9a60 <advance_aggregates+0x110>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5b9a88:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  5b9a8c:       49 c1 e5 04             shl    $0x4,%r13
    0.00 :	  5b9a90:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5b9a93:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9a96:       4c 01 ea                add    %r13,%rdx
    0.00 :	  5b9a99:       e8 f2 fc ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5b9a9e:       eb 88                   jmp    5b9a28 <advance_aggregates+0xd8>
         :	                                        continue;
         :	                        }
         :
         :	                        /* OK, put the tuple into the tuplesort object */
         :	                        if (peraggstate->numInputs == 1)
         :	                                tuplesort_putdatum(peraggstate->sortstate,
    0.00 :	  5b9aa0:       48 8b 41 30             mov    0x30(%rcx),%rax
    0.00 :	  5b9aa4:       48 8b bb f8 00 00 00    mov    0xf8(%rbx),%rdi
    0.00 :	  5b9aab:       0f be 10                movsbl (%rax),%edx
    0.00 :	  5b9aae:       48 8b 41 28             mov    0x28(%rcx),%rax
    0.00 :	  5b9ab2:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5b9ab5:       e8 66 54 1e 00          callq  79ef20 <tuplesort_putdatum>
    0.00 :	  5b9aba:       e9 69 ff ff ff          jmpq   5b9a28 <advance_aggregates+0xd8>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1350
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1057
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b9d80 <ExecAgg>:
         :	 *        stored in the expression context to be used when ExecProject evaluates
         :	 *        the result tuple.
         :	 */
         :	TupleTableSlot *
         :	ExecAgg(AggState *node)
         :	{
    0.00 :	  5b9d80:       55                      push   %rbp
    0.00 :	  5b9d81:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5b9d84:       41 57                   push   %r15
    0.00 :	  5b9d86:       41 56                   push   %r14
    0.00 :	  5b9d88:       49 89 fe                mov    %rdi,%r14
    0.00 :	  5b9d8b:       41 55                   push   %r13
    0.00 :	  5b9d8d:       41 54                   push   %r12
    0.00 :	  5b9d8f:       53                      push   %rbx
    0.00 :	  5b9d90:       48 81 ec d8 00 00 00    sub    $0xd8,%rsp
         :	        /*
         :	         * Check to see if we're still projecting out tuples from a previous agg
         :	         * tuple (because there is a function-returning-set in the projection
         :	         * expressions).  If so, try to project another one.
         :	         */
         :	        if (node->ss.ps.ps_TupFromTlist)
    0.00 :	  5b9d97:       80 7f 70 00             cmpb   $0x0,0x70(%rdi)
    0.00 :	  5b9d9b:       74 1c                   je     5b9db9 <ExecAgg+0x39>
         :	        {
         :	                TupleTableSlot *result;
         :	                ExprDoneCond isDone;
         :
         :	                result = ExecProject(node->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5b9d9d:       48 8b 7f 68             mov    0x68(%rdi),%rdi
    0.00 :	  5b9da1:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5b9da5:       e8 56 32 ff ff          callq  5ad000 <ExecProject>
         :	                if (isDone == ExprMultipleResult)
    0.00 :	  5b9daa:       83 7d d4 01             cmpl   $0x1,-0x2c(%rbp)
    0.00 :	  5b9dae:       0f 84 04 02 00 00       je     5b9fb8 <ExecAgg+0x238>
         :	                        return result;
         :	                /* Done with that source tuple... */
         :	                node->ss.ps.ps_TupFromTlist = false;
    0.00 :	  5b9db4:       41 c6 46 70 00          movb   $0x0,0x70(%r14)
         :	        /*
         :	         * Exit if nothing left to do.  (We must do the ps_TupFromTlist check
         :	         * first, because in some cases agg_done gets set before we emit the final
         :	         * aggregate tuple, and we have to finish running SRFs for it.)
         :	         */
         :	        if (node->agg_done)
    0.00 :	  5b9db9:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9dbb:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9dc2:       00 
    0.00 :	  5b9dc3:       0f 85 ef 01 00 00       jne    5b9fb8 <ExecAgg+0x238>
         :	                return NULL;
         :
         :	        /* Dispatch based on strategy */
         :	        if (((Agg *) node->ss.ps.plan)->aggstrategy == AGG_HASHED)
    0.00 :	  5b9dc9:       49 8b 46 08             mov    0x8(%r14),%rax
    0.00 :	  5b9dcd:       48 89 85 10 ff ff ff    mov    %rax,-0xf0(%rbp)
    0.00 :	  5b9dd4:       83 78 60 02             cmpl   $0x2,0x60(%rax)
    0.00 :	  5b9dd8:       0f 85 ec 01 00 00       jne    5b9fca <ExecAgg+0x24a>
         :	        {
         :	                if (!node->table_filled)
    0.00 :	  5b9dde:       31 c0                   xor    %eax,%eax
    0.00 :	  5b9de0:       41 80 be 00 01 00 00    cmpb   $0x0,0x100(%r14)
    0.00 :	  5b9de7:       00 
    0.00 :	  5b9de8:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5b9def:       0f 84 5d 07 00 00       je     5ba552 <ExecAgg+0x7d2>
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9df5:       4d 8b 6e 60             mov    0x60(%r14),%r13
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9df9:       49 8b 55 40             mov    0x40(%r13),%rdx
    0.00 :	  5b9dfd:       48 89 95 30 ff ff ff    mov    %rdx,-0xd0(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9e04:       49 8b 55 48             mov    0x48(%r13),%rdx
    0.00 :	  5b9e08:       48 89 95 28 ff ff ff    mov    %rdx,-0xd8(%rbp)
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9e0f:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
    0.00 :	  5b9e16:       48 89 95 20 ff ff ff    mov    %rdx,-0xe0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5b9e1d:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
    0.00 :	  5b9e24:       48 89 95 18 ff ff ff    mov    %rdx,-0xe8(%rbp)
         :
         :	        /*
         :	         * We loop retrieving groups until we find one satisfying
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9e2b:       84 c0                   test   %al,%al
    0.00 :	  5b9e2d:       0f 85 83 01 00 00       jne    5b9fb6 <ExecAgg+0x236>
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e33:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9e36:       e8 85 9c 1c 00          callq  783ac0 <hash_seq_search>
         :	                if (entry == NULL)
    0.00 :	  5b9e3b:       48 85 c0                test   %rax,%rax
         :	        while (!aggstate->agg_done)
         :	        {
         :	                /*
         :	                 * Find the next entry in the hash table
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
    0.00 :	  5b9e3e:       49 89 c4                mov    %rax,%r12
         :	                if (entry == NULL)
    0.00 :	  5b9e41:       0f 84 fc 06 00 00       je     5ba543 <ExecAgg+0x7c3>
         :	                 *
         :	                 * We intentionally don't use ReScanExprContext here; if any aggs have
         :	                 * registered shutdown callbacks, they mustn't be called yet, since we
         :	                 * might not be done with that agg.
         :	                 */
         :	                ResetExprContext(econtext);
    0.00 :	  5b9e47:       49 8b 7d 28             mov    0x28(%r13),%rdi
    0.00 :	  5b9e4b:       e8 60 eb 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                /*
         :	                 * Store the copied first input tuple in the tuple table slot reserved
         :	                 * for it, so that it can be used in ExecProject.
         :	                 */
         :	                ExecStoreMinimalTuple(entry->shared.firstTuple,
    0.00 :	  5b9e50:       48 8b b5 18 ff ff ff    mov    -0xe8(%rbp),%rsi
    0.00 :	  5b9e57:       49 8b 3c 24             mov    (%r12),%rdi
    0.00 :	  5b9e5b:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9e5d:       e8 7e a5 ff ff          callq  5b43e0 <ExecStoreMinimalTuple>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e62:       41 8b 96 98 00 00 00    mov    0x98(%r14),%edx
    0.00 :	  5b9e69:       85 d2                   test   %edx,%edx
    0.00 :	  5b9e6b:       7e 49                   jle    5b9eb6 <ExecAgg+0x136>
    0.00 :	  5b9e6d:       31 db                   xor    %ebx,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e6f:       48 8b 85 30 ff ff ff    mov    -0xd0(%rbp),%rax
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5b9e76:       48 63 fb                movslq %ebx,%rdi
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9e79:       83 c3 01                add    $0x1,%ebx
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
         :
         :	                        Assert(peraggstate->numSortCols == 0);
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9e7c:       48 69 f7 a8 04 00 00    imul   $0x4a8,%rdi,%rsi
    0.00 :	  5b9e83:       48 03 b5 20 ff ff ff    add    -0xe0(%rbp),%rsi
    0.00 :	  5b9e8a:       48 8d 0c f8             lea    (%rax,%rdi,8),%rcx
    0.00 :	  5b9e8e:       48 89 f8                mov    %rdi,%rax
    0.00 :	  5b9e91:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5b9e95:       49 8d 54 04 08          lea    0x8(%r12,%rax,1),%rdx
    0.00 :	  5b9e9a:       48 8b 85 28 ff ff ff    mov    -0xd8(%rbp),%rax
    0.00 :	  5b9ea1:       4c 8d 04 38             lea    (%rax,%rdi,1),%r8
    0.00 :	  5b9ea5:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9ea8:       e8 13 fc ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Finalize each aggregate calculation, and stash results in the
         :	                 * per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9ead:       41 3b 9e 98 00 00 00    cmp    0x98(%r14),%ebx
    0.00 :	  5b9eb4:       7c b9                   jl     5b9e6f <ExecAgg+0xef>
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9eb6:       48 8b 95 18 ff ff ff    mov    -0xe8(%rbp),%rdx
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ebd:       4c 89 ee                mov    %r13,%rsi
         :
         :	                /*
         :	                 * Use the representative input tuple for any references to
         :	                 * non-aggregated input columns in the qual and tlist.
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5b9ec0:       49 89 55 18             mov    %rdx,0x18(%r13)
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9ec4:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9ec8:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9eca:       e8 41 30 ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9ecf:       84 c0                   test   %al,%al
    0.00 :	  5b9ed1:       0f 85 4e 06 00 00       jne    5ba525 <ExecAgg+0x7a5>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9ed7:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9edb:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9ede:       74 18                   je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5b9ee0:       f2 0f 10 05 70 52 1f    movsd  0x1f5270(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9ee7:       00 
    0.00 :	  5b9ee8:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9eef:       00 
    0.00 :	  5b9ef0:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9ef7:       00 
    0.00 :	  5b9ef8:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5b9eff:       00 
    0.00 :	  5b9f00:       e9 26 ff ff ff          jmpq   5b9e2b <ExecAgg+0xab>
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
         :	        }
         :
         :	        if (slot2)
    0.00 :	  5b9f05:       4d 85 ff                test   %r15,%r15
    0.00 :	  5b9f08:       74 08                   je     5b9f12 <ExecAgg+0x192>
         :	                ExecClearTuple(slot2);
    0.00 :	  5b9f0a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5b9f0d:       e8 fe a1 ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        tuplesort_end(peraggstate->sortstate);
    0.00 :	  5b9f12:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5b9f19:       00 
    0.00 :	  5b9f1a:       e8 c1 52 1e 00          callq  79f1e0 <tuplesort_end>
         :	        peraggstate->sortstate = NULL;
    0.00 :	  5b9f1f:       49 c7 84 24 f8 00 00    movq   $0x0,0xf8(%r12)
    0.00 :	  5b9f26:       00 00 00 00 00 
         :	                                        process_ordered_aggregate_multi(aggstate,
         :	                                                                                                        peraggstate,
         :	                                                                                                        pergroupstate);
         :	                        }
         :
         :	                        finalize_aggregate(aggstate, peraggstate, pergroupstate,
    0.00 :	  5b9f2b:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	  5b9f2f:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	  5b9f36:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5b9f39:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5b9f3c:       48 8d 0c d0             lea    (%rax,%rdx,8),%rcx
    0.00 :	  5b9f40:       48 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%rax
    0.00 :	  5b9f47:       4c 8d 04 10             lea    (%rax,%rdx,1),%r8
    0.00 :	  5b9f4b:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5b9f52:       e8 69 fb ff ff          callq  5b9ac0 <finalize_aggregate>
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5b9f57:       83 85 44 ff ff ff 01    addl   $0x1,-0xbc(%rbp)
    0.00 :	  5b9f5e:       8b 95 44 ff ff ff       mov    -0xbc(%rbp),%edx
    0.00 :	  5b9f64:       41 3b 96 98 00 00 00    cmp    0x98(%r14),%edx
    0.00 :	  5b9f6b:       0f 8c f6 01 00 00       jl     5ba167 <ExecAgg+0x3e7>
         :
         :	                /*
         :	                 * Check the qual (HAVING clause); if the group does not match, ignore
         :	                 * it and loop back to try to process another group.
         :	                 */
         :	                if (ExecQual(aggstate->ss.ps.qual, econtext, false))
    0.00 :	  5b9f71:       49 8b 7e 28             mov    0x28(%r14),%rdi
    0.00 :	  5b9f75:       48 8b b5 78 ff ff ff    mov    -0x88(%rbp),%rsi
    0.00 :	  5b9f7c:       31 d2                   xor    %edx,%edx
    0.00 :	  5b9f7e:       e8 8d 2f ff ff          callq  5acf10 <ExecQual>
    0.00 :	  5b9f83:       84 c0                   test   %al,%al
    0.00 :	  5b9f85:       0f 85 18 05 00 00       jne    5ba4a3 <ExecAgg+0x723>
         :	                                        (isDone == ExprMultipleResult);
         :	                                return result;
         :	                        }
         :	                }
         :	                else
         :	                        InstrCountFiltered1(aggstate, 1);
    0.00 :	  5b9f8b:       49 8b 46 18             mov    0x18(%r14),%rax
    0.00 :	  5b9f8f:       48 85 c0                test   %rax,%rax
    0.00 :	  5b9f92:       74 18                   je     5b9fac <ExecAgg+0x22c>
    0.00 :	  5b9f94:       f2 0f 10 05 bc 51 1f    movsd  0x1f51bc(%rip),%xmm0        # 7af158 <__func__.15777+0x10>
    0.00 :	  5b9f9b:       00 
    0.00 :	  5b9f9c:       f2 0f 58 80 c8 00 00    addsd  0xc8(%rax),%xmm0
    0.00 :	  5b9fa3:       00 
    0.00 :	  5b9fa4:       f2 0f 11 80 c8 00 00    movsd  %xmm0,0xc8(%rax)
    0.00 :	  5b9fab:       00 
         :
         :	        /*
         :	         * We loop retrieving groups until we find one matching
         :	         * aggstate->ss.ps.qual
         :	         */
         :	        while (!aggstate->agg_done)
    0.00 :	  5b9fac:       41 80 be d0 00 00 00    cmpb   $0x0,0xd0(%r14)
    0.00 :	  5b9fb3:       00 
    0.00 :	  5b9fb4:       74 75                   je     5ba02b <ExecAgg+0x2ab>
    0.00 :	  5b9fb6:       31 c0                   xor    %eax,%eax
         :	                        agg_fill_hash_table(node);
         :	                return agg_retrieve_hash_table(node);
         :	        }
         :	        else
         :	                return agg_retrieve_direct(node);
         :	}
    0.00 :	  5b9fb8:       48 81 c4 d8 00 00 00    add    $0xd8,%rsp
    0.00 :	  5b9fbf:       5b                      pop    %rbx
    0.00 :	  5b9fc0:       41 5c                   pop    %r12
    0.00 :	  5b9fc2:       41 5d                   pop    %r13
    0.00 :	  5b9fc4:       41 5e                   pop    %r14
    0.00 :	  5b9fc6:       41 5f                   pop    %r15
    0.00 :	  5b9fc8:       c9                      leaveq 
    0.00 :	  5b9fc9:       c3                      retq   
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fca:       49 8b 56 60             mov    0x60(%r14),%rdx
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fce:       49 8b 46 30             mov    0x30(%r14),%rax
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
    0.00 :	  5b9fd2:       48 89 95 78 ff ff ff    mov    %rdx,-0x88(%rbp)
         :	        int                     aggno;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5b9fd9:       48 89 45 80             mov    %rax,-0x80(%rbp)
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
    0.00 :	  5b9fdd:       48 8b 42 40             mov    0x40(%rdx),%rax
    0.00 :	  5b9fe1:       48 89 85 68 ff ff ff    mov    %rax,-0x98(%rbp)
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9fe8:       48 8b 52 48             mov    0x48(%rdx),%rdx
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5b9fec:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
    0.00 :	  5b9ff3:       48 89 95 60 ff ff ff    mov    %rdx,-0xa0(%rbp)
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5b9ffa:       49 8b 96 b0 00 00 00    mov    0xb0(%r14),%rdx
         :	        /* econtext is the per-output-tuple expression context */
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba001:       48 89 85 70 ff ff ff    mov    %rax,-0x90(%rbp)
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba008:       49 8b 86 d8 00 00 00    mov    0xd8(%r14),%rax
         :	        econtext = aggstate->ss.ps.ps_ExprContext;
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
    0.00 :	  5ba00f:       48 89 95 58 ff ff ff    mov    %rdx,-0xa8(%rbp)
         :	        pergroup = aggstate->pergroup;
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba016:       49 8b 96 88 00 00 00    mov    0x88(%r14),%rdx
         :	        aggvalues = econtext->ecxt_aggvalues;
         :	        aggnulls = econtext->ecxt_aggnulls;
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
         :	        peragg = aggstate->peragg;
         :	        pergroup = aggstate->pergroup;
    0.00 :	  5ba01d:       48 89 85 50 ff ff ff    mov    %rax,-0xb0(%rbp)
         :	        firstSlot = aggstate->ss.ss_ScanTupleSlot;
    0.00 :	  5ba024:       48 89 95 48 ff ff ff    mov    %rdx,-0xb8(%rbp)
         :	        {
         :	                /*
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
    0.00 :	  5ba02b:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	  5ba032:       00 
    0.00 :	  5ba033:       0f 84 a4 04 00 00       je     5ba4dd <ExecAgg+0x75d>
         :	                 * We use ReScanExprContext not just ResetExprContext because we want
         :	                 * any registered shutdown callbacks to be called.  That allows
         :	                 * aggregate functions to ensure they've cleaned up any non-memory
         :	                 * resources.
         :	                 */
         :	                ReScanExprContext(econtext);
    0.00 :	  5ba039:       48 8b bd 78 ff ff ff    mov    -0x88(%rbp),%rdi
    0.00 :	  5ba040:       e8 3b b1 ff ff          callq  5b5180 <ReScanExprContext>
         :
         :	                MemoryContextResetAndDeleteChildren(aggstate->aggcontext);
    0.00 :	  5ba045:       49 8b be b8 00 00 00    mov    0xb8(%r14),%rdi
    0.00 :	  5ba04c:       e8 bf eb 1d 00          callq  798c10 <MemoryContextResetAndDeleteChildren>
         :
         :	                /*
         :	                 * Initialize working state for a new input tuple group
         :	                 */
         :	                initialize_aggregates(aggstate, peragg, pergroup);
    0.00 :	  5ba051:       48 8b 95 50 ff ff ff    mov    -0xb0(%rbp),%rdx
    0.00 :	  5ba058:       48 8b b5 58 ff ff ff    mov    -0xa8(%rbp),%rsi
    0.00 :	  5ba05f:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba062:       e8 69 f5 ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                if (aggstate->grp_firstTuple != NULL)
    0.00 :	  5ba067:       49 8b be e0 00 00 00    mov    0xe0(%r14),%rdi
    0.00 :	  5ba06e:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5ba071:       0f 84 c5 00 00 00       je     5ba13c <ExecAgg+0x3bc>
         :	                        /*
         :	                         * Store the copied first input tuple in the tuple table slot
         :	                         * reserved for it.  The tuple will be deleted when it is cleared
         :	                         * from the slot.
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
    0.00 :	  5ba077:       48 8b b5 48 ff ff ff    mov    -0xb8(%rbp),%rsi
    0.00 :	  5ba07e:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba080:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  5ba085:       e8 f6 a3 ff ff          callq  5b4480 <ExecStoreTuple>
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba08a:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba091:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
         :	                         */
         :	                        ExecStoreTuple(aggstate->grp_firstTuple,
         :	                                                   firstSlot,
         :	                                                   InvalidBuffer,
         :	                                                   true);
         :	                        aggstate->grp_firstTuple = NULL;        /* don't keep two pointers */
    0.00 :	  5ba098:       49 c7 86 e0 00 00 00    movq   $0x0,0xe0(%r14)
    0.00 :	  5ba09f:       00 00 00 00 
         :
         :	                        /* set up for first advance_aggregates call */
         :	                        tmpcontext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba0a3:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                         * Process each outer-plan tuple, and then fetch the next one,
         :	                         * until we exhaust the outer plan or cross a group boundary.
         :	                         */
         :	                        for (;;)
         :	                        {
         :	                                advance_aggregates(aggstate, pergroup);
    0.00 :	  5ba0a7:       48 8b b5 50 ff ff ff    mov    -0xb0(%rbp),%rsi
    0.00 :	  5ba0ae:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba0b1:       e8 9a f8 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
    0.00 :	  5ba0b6:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  5ba0bd:       48 8b 7a 28             mov    0x28(%rdx),%rdi
    0.00 :	  5ba0c1:       e8 ea e8 1d 00          callq  7989b0 <MemoryContextReset>
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0c6:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba0ca:       e8 d1 23 ff ff          callq  5ac4a0 <ExecProcNode>
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0cf:       48 85 c0                test   %rax,%rax
         :	                                advance_aggregates(aggstate, pergroup);
         :
         :	                                /* Reset per-input-tuple context after each tuple */
         :	                                ResetExprContext(tmpcontext);
         :
         :	                                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba0d2:       48 89 c3                mov    %rax,%rbx
         :	                                if (TupIsNull(outerslot))
    0.00 :	  5ba0d5:       0f 84 f5 03 00 00       je     5ba4d0 <ExecAgg+0x750>
    0.00 :	  5ba0db:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba0df:       0f 85 eb 03 00 00       jne    5ba4d0 <ExecAgg+0x750>
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
         :	                                        break;
         :	                                }
         :	                                /* set up for next advance_aggregates call */
         :	                                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba0e5:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba0ec:       48 89 58 18             mov    %rbx,0x18(%rax)
         :
         :	                                /*
         :	                                 * If we are grouping, check whether we've crossed a group
         :	                                 * boundary.
         :	                                 */
         :	                                if (node->aggstrategy == AGG_SORTED)
    0.00 :	  5ba0f0:       48 8b 95 10 ff ff ff    mov    -0xf0(%rbp),%rdx
    0.00 :	  5ba0f7:       83 7a 60 01             cmpl   $0x1,0x60(%rdx)
    0.00 :	  5ba0fb:       75 aa                   jne    5ba0a7 <ExecAgg+0x327>
         :	                                {
         :	                                        if (!execTuplesMatch(firstSlot,
    0.00 :	  5ba0fd:       48 8b 85 70 ff ff ff    mov    -0x90(%rbp),%rax
    0.00 :	  5ba104:       48 8b 4a 68             mov    0x68(%rdx),%rcx
    0.00 :	  5ba108:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba10b:       8b 52 64                mov    0x64(%rdx),%edx
    0.00 :	  5ba10e:       4d 8b 86 a0 00 00 00    mov    0xa0(%r14),%r8
    0.00 :	  5ba115:       48 8b bd 48 ff ff ff    mov    -0xb8(%rbp),%rdi
    0.00 :	  5ba11c:       4c 8b 48 28             mov    0x28(%rax),%r9
    0.00 :	  5ba120:       e8 1b f3 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba125:       84 c0                   test   %al,%al
    0.00 :	  5ba127:       0f 85 7a ff ff ff       jne    5ba0a7 <ExecAgg+0x327>
         :	                                                                                 tmpcontext->ecxt_per_tuple_memory))
         :	                                        {
         :	                                                /*
         :	                                                 * Save the first input tuple of the next group.
         :	                                                 */
         :	                                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba12d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba130:       e8 7b 9e ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba135:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
         :	                 * qual, and the tlist.  (If we are not grouping, and there are no
         :	                 * input rows at all, we will come here with an empty firstSlot ...
         :	                 * but if not grouping, there can't be any references to
         :	                 * non-aggregated input columns, so no problem.)
         :	                 */
         :	                econtext->ecxt_outertuple = firstSlot;
    0.00 :	  5ba13c:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	  5ba143:       48 8b 95 78 ff ff ff    mov    -0x88(%rbp),%rdx
    0.00 :	  5ba14a:       48 89 42 18             mov    %rax,0x18(%rdx)
         :
         :	                /*
         :	                 * Done scanning input tuple group. Finalize each aggregate
         :	                 * calculation, and stash results in the per-output-tuple context.
         :	                 */
         :	                for (aggno = 0; aggno < aggstate->numaggs; aggno++)
    0.00 :	  5ba14e:       41 8b 86 98 00 00 00    mov    0x98(%r14),%eax
    0.00 :	  5ba155:       85 c0                   test   %eax,%eax
    0.00 :	  5ba157:       0f 8e 14 fe ff ff       jle    5b9f71 <ExecAgg+0x1f1>
    0.00 :	  5ba15d:       c7 85 44 ff ff ff 00    movl   $0x0,-0xbc(%rbp)
    0.00 :	  5ba164:       00 00 00 
         :	                {
         :	                        AggStatePerAgg peraggstate = &peragg[aggno];
    0.00 :	  5ba167:       48 63 95 44 ff ff ff    movslq -0xbc(%rbp),%rdx
    0.00 :	  5ba16e:       4c 8b a5 58 ff ff ff    mov    -0xa8(%rbp),%r12
    0.00 :	  5ba175:       48 69 c2 a8 04 00 00    imul   $0x4a8,%rdx,%rax
    0.00 :	  5ba17c:       48 89 55 88             mov    %rdx,-0x78(%rbp)
    0.00 :	  5ba180:       49 01 c4                add    %rax,%r12
         :	                        AggStatePerGroup pergroupstate = &pergroup[aggno];
    0.00 :	  5ba183:       48 89 d0                mov    %rdx,%rax
    0.00 :	  5ba186:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	  5ba18a:       48 03 85 50 ff ff ff    add    -0xb0(%rbp),%rax
    0.00 :	  5ba191:       48 89 85 38 ff ff ff    mov    %rax,-0xc8(%rbp)
         :
         :	                        if (peraggstate->numSortCols > 0)
    0.00 :	  5ba198:       41 8b 84 24 8c 00 00    mov    0x8c(%r12),%eax
    0.00 :	  5ba19f:       00 
    0.00 :	  5ba1a0:       85 c0                   test   %eax,%eax
    0.00 :	  5ba1a2:       0f 8e 83 fd ff ff       jle    5b9f2b <ExecAgg+0x1ab>
         :	                        {
         :	                                if (peraggstate->numInputs == 1)
    0.00 :	  5ba1a8:       41 83 7c 24 14 01       cmpl   $0x1,0x14(%r12)
    0.00 :	  5ba1ae:       0f 84 3e 01 00 00       je     5ba2f2 <ExecAgg+0x572>
         :	static void
         :	process_ordered_aggregate_multi(AggState *aggstate,
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba1b4:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
    0.00 :	  5ba1bb:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba1bf:       48 89 45 c0             mov    %rax,-0x40(%rbp)
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
         :	        int                     numTransInputs = peraggstate->numTransInputs;
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1c3:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba1ca:       00 
         :	                                                                AggStatePerAgg peraggstate,
         :	                                                                AggStatePerGroup pergroupstate)
         :	{
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
         :	        FunctionCallInfo fcinfo = &peraggstate->transfn_fcinfo;
         :	        TupleTableSlot *slot1 = peraggstate->evalslot;
    0.00 :	  5ba1cb:       49 8b 9c 24 e8 00 00    mov    0xe8(%r12),%rbx
    0.00 :	  5ba1d2:       00 
         :	        TupleTableSlot *slot2 = peraggstate->uniqslot;
    0.00 :	  5ba1d3:       4d 8b bc 24 f0 00 00    mov    0xf0(%r12),%r15
    0.00 :	  5ba1da:       00 
         :	        int                     numTransInputs = peraggstate->numTransInputs;
    0.00 :	  5ba1db:       45 8b 6c 24 18          mov    0x18(%r12),%r13d
         :	        int                     numDistinctCols = peraggstate->numDistinctCols;
    0.00 :	  5ba1e0:       89 45 bc                mov    %eax,-0x44(%rbp)
         :	        bool            haveOldValue = false;
         :	        int                     i;
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba1e3:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba1ea:       00 
    0.00 :	  5ba1eb:       e8 00 7e 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        ExecClearTuple(slot1);
    0.00 :	  5ba1f0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba1f3:       e8 18 9f ff ff          callq  5b4110 <ExecClearTuple>
         :	        if (slot2)
    0.00 :	  5ba1f8:       4d 85 ff                test   %r15,%r15
    0.00 :	  5ba1fb:       74 08                   je     5ba205 <ExecAgg+0x485>
         :	                ExecClearTuple(slot2);
    0.00 :	  5ba1fd:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba200:       e8 0b 9f ff ff          callq  5b4110 <ExecClearTuple>
    0.00 :	  5ba205:       c6 45 bb 00             movb   $0x0,-0x45(%rbp)
    0.00 :	  5ba209:       eb 3d                   jmp    5ba248 <ExecAgg+0x4c8>
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba20b:       80 7d bb 00             cmpb   $0x0,-0x45(%rbp)
    0.00 :	  5ba20f:       90                      nop
    0.00 :	  5ba210:       74 6c                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba212:       49 8b 8c 24 98 00 00    mov    0x98(%r12),%rcx
    0.00 :	  5ba219:       00 
    0.00 :	  5ba21a:       4c 8b 4d c0             mov    -0x40(%rbp),%r9
    0.00 :	  5ba21e:       4c 89 fe                mov    %r15,%rsi
    0.00 :	  5ba221:       4d 8b 84 24 b8 00 00    mov    0xb8(%r12),%r8
    0.00 :	  5ba228:       00 
    0.00 :	  5ba229:       8b 55 bc                mov    -0x44(%rbp),%edx
    0.00 :	  5ba22c:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba22f:       e8 0c f2 fe ff          callq  5a9440 <execTuplesMatch>
    0.00 :	  5ba234:       84 c0                   test   %al,%al
    0.00 :	  5ba236:       74 46                   je     5ba27e <ExecAgg+0x4fe>
    0.00 :	  5ba238:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba23c:       0f 1f 40 00             nopl   0x0(%rax)
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
         :	                        MemoryContextReset(workcontext);
         :
         :	                ExecClearTuple(slot1);
    0.00 :	  5ba240:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba243:       e8 c8 9e ff ff          callq  5b4110 <ExecClearTuple>
         :
         :	        ExecClearTuple(slot1);
         :	        if (slot2)
         :	                ExecClearTuple(slot2);
         :
         :	        while (tuplesort_gettupleslot(peraggstate->sortstate, true, slot1))
    0.00 :	  5ba248:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba24f:       00 
    0.00 :	  5ba250:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba253:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba258:       e8 33 40 1e 00          callq  79e290 <tuplesort_gettupleslot>
    0.00 :	  5ba25d:       84 c0                   test   %al,%al
    0.00 :	  5ba25f:       0f 84 a0 fc ff ff       je     5b9f05 <ExecAgg+0x185>
         :	                /*
         :	                 * Extract the first numTransInputs columns as datums to pass to the
         :	                 * transfn.  (This will help execTuplesMatch too, so we do it
         :	                 * immediately.)
         :	                 */
         :	                slot_getsomeattrs(slot1, numTransInputs);
    0.00 :	  5ba265:       44 89 ee                mov    %r13d,%esi
    0.00 :	  5ba268:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba26b:       e8 f0 4f eb ff          callq  46f260 <slot_getsomeattrs>
         :
         :	                if (numDistinctCols == 0 ||
    0.00 :	  5ba270:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba273:       85 c0                   test   %eax,%eax
    0.00 :	  5ba275:       0f 94 85 0f ff ff ff    sete   -0xf1(%rbp)
    0.00 :	  5ba27c:       75 8d                   jne    5ba20b <ExecAgg+0x48b>
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba27e:       45 85 ed                test   %r13d,%r13d
    0.00 :	  5ba281:       7e 2e                   jle    5ba2b1 <ExecAgg+0x531>
    0.00 :	  5ba283:       31 d2                   xor    %edx,%edx
    0.00 :	  5ba285:       0f 1f 00                nopl   (%rax)
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
    0.00 :	  5ba288:       48 8b 43 28             mov    0x28(%rbx),%rax
    0.00 :	  5ba28c:       48 8b 04 d0             mov    (%rax,%rdx,8),%rax
    0.00 :	  5ba290:       49 89 84 d4 28 01 00    mov    %rax,0x128(%r12,%rdx,8)
    0.00 :	  5ba297:       00 
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
    0.00 :	  5ba298:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  5ba29c:       0f b6 04 10             movzbl (%rax,%rdx,1),%eax
    0.00 :	  5ba2a0:       41 88 84 14 41 04 00    mov    %al,0x441(%r12,%rdx,1)
    0.00 :	  5ba2a7:       00 
    0.00 :	  5ba2a8:       48 83 c2 01             add    $0x1,%rdx
         :	                                                         peraggstate->equalfns,
         :	                                                         workcontext))
         :	                {
         :	                        /* Load values into fcinfo */
         :	                        /* Start from 1, since the 0th arg will be the transition value */
         :	                        for (i = 0; i < numTransInputs; i++)
    0.00 :	  5ba2ac:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  5ba2af:       7f d7                   jg     5ba288 <ExecAgg+0x508>
         :	                        {
         :	                                fcinfo->arg[i + 1] = slot1->tts_values[i];
         :	                                fcinfo->argnull[i + 1] = slot1->tts_isnull[i];
         :	                        }
         :
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba2b1:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba2b8:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba2bb:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba2be:       e8 cd f4 ff ff          callq  5b9790 <advance_transition_function>
         :
         :	                        if (numDistinctCols > 0)
    0.00 :	  5ba2c3:       8b 45 bc                mov    -0x44(%rbp),%eax
    0.00 :	  5ba2c6:       85 c0                   test   %eax,%eax
    0.00 :	  5ba2c8:       7e 0d                   jle    5ba2d7 <ExecAgg+0x557>
    0.00 :	  5ba2ca:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba2cd:       c6 45 bb 01             movb   $0x1,-0x45(%rbp)
    0.00 :	  5ba2d1:       4c 89 fb                mov    %r15,%rbx
    0.00 :	  5ba2d4:       49 89 ff                mov    %rdi,%r15
         :	                                haveOldValue = true;
         :	                        }
         :	                }
         :
         :	                /* Reset context each time, unless execTuplesMatch did it for us */
         :	                if (numDistinctCols == 0)
    0.00 :	  5ba2d7:       80 bd 0f ff ff ff 00    cmpb   $0x0,-0xf1(%rbp)
    0.00 :	  5ba2de:       0f 84 5c ff ff ff       je     5ba240 <ExecAgg+0x4c0>
         :	                        MemoryContextReset(workcontext);
    0.00 :	  5ba2e4:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  5ba2e8:       e8 c3 e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba2ed:       e9 4e ff ff ff          jmpq   5ba240 <ExecAgg+0x4c0>
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba2f2:       49 8b 86 c0 00 00 00    mov    0xc0(%r14),%rax
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba2f9:       45 31 ed                xor    %r13d,%r13d
    0.00 :	  5ba2fc:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  5ba301:       45 31 ff                xor    %r15d,%r15d
         :	                                                                 AggStatePerGroup pergroupstate)
         :	{
         :	        Datum           oldVal = (Datum) 0;
         :	        bool            oldIsNull = true;
         :	        bool            haveOldVal = false;
         :	        MemoryContext workcontext = aggstate->tmpcontext->ecxt_per_tuple_memory;
    0.00 :	  5ba304:       48 8b 40 28             mov    0x28(%rax),%rax
    0.00 :	  5ba308:       48 89 45 a8             mov    %rax,-0x58(%rbp)
         :	        MemoryContext oldContext;
         :	        bool            isDistinct = (peraggstate->numDistinctCols > 0);
    0.00 :	  5ba30c:       41 8b 84 24 90 00 00    mov    0x90(%r12),%eax
    0.00 :	  5ba313:       00 
    0.00 :	  5ba314:       89 45 b4                mov    %eax,-0x4c(%rbp)
         :	        Datum      *newVal;
         :	        bool       *isNull;
         :
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
    0.00 :	  5ba317:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba31e:       00 
    0.00 :	  5ba31f:       e8 cc 7c 1e 00          callq  7a1ff0 <tuplesort_performsort>
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba324:       49 8d 94 24 28 01 00    lea    0x128(%r12),%rdx
    0.00 :	  5ba32b:       00 
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba32c:       49 8d 84 24 41 04 00    lea    0x441(%r12),%rax
    0.00 :	  5ba333:       00 
         :	        Assert(peraggstate->numDistinctCols < 2);
         :
         :	        tuplesort_performsort(peraggstate->sortstate);
         :
         :	        /* Load the column into argument 1 (arg 0 will be transition value) */
         :	        newVal = fcinfo->arg + 1;
    0.00 :	  5ba334:       48 89 55 98             mov    %rdx,-0x68(%rbp)
         :	        isNull = fcinfo->argnull + 1;
    0.00 :	  5ba338:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	  5ba33c:       eb 3c                   jmp    5ba37a <ExecAgg+0x5fa>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba33e:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba345:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba348:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba34b:       e8 40 f4 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba350:       84 db                   test   %bl,%bl
    0.00 :	  5ba352:       0f 84 98 00 00 00       je     5ba3f0 <ExecAgg+0x670>
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
         :	                        oldIsNull = *isNull;
    0.00 :	  5ba358:       41 0f b6 9c 24 41 04    movzbl 0x441(%r12),%ebx
    0.00 :	  5ba35f:       00 00 
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
         :	                                pfree(DatumGetPointer(oldVal));
         :	                        /* and remember the new one for subsequent equality checks */
         :	                        oldVal = *newVal;
    0.00 :	  5ba361:       4d 8b bc 24 28 01 00    mov    0x128(%r12),%r15
    0.00 :	  5ba368:       00 
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba369:       48 8b 55 a0             mov    -0x60(%rbp),%rdx
    0.00 :	  5ba36d:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  5ba373:       48 89 15 e6 04 60 00    mov    %rdx,0x6004e6(%rip)        # bba860 <CurrentMemoryContext>
         :	         * Note: if input type is pass-by-ref, the datums returned by the sort are
         :	         * freshly palloc'd in the per-query context, so we must be careful to
         :	         * pfree them when they are no longer needed.
         :	         */
         :
         :	        while (tuplesort_getdatum(peraggstate->sortstate, true,
    0.00 :	  5ba37a:       49 8b bc 24 f8 00 00    mov    0xf8(%r12),%rdi
    0.00 :	  5ba381:       00 
    0.00 :	  5ba382:       48 8b 4d 90             mov    -0x70(%rbp),%rcx
    0.00 :	  5ba386:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  5ba38b:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	  5ba38f:       e8 2c 3e 1e 00          callq  79e1c0 <tuplesort_getdatum>
    0.00 :	  5ba394:       84 c0                   test   %al,%al
    0.00 :	  5ba396:       0f 84 e0 00 00 00       je     5ba47c <ExecAgg+0x6fc>
         :	        {
         :	                /*
         :	                 * Clear and select the working context for evaluation of the equality
         :	                 * function and transition function.
         :	                 */
         :	                MemoryContextReset(workcontext);
    0.00 :	  5ba39c:       48 8b 7d a8             mov    -0x58(%rbp),%rdi
    0.00 :	  5ba3a0:       e8 0b e6 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba3a5:       48 8b 45 a8             mov    -0x58(%rbp),%rax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3a9:       48 8b 15 b0 04 60 00    mov    0x6004b0(%rip),%rdx        # bba860 <CurrentMemoryContext>
         :
         :	        CurrentMemoryContext = context;
    0.00 :	  5ba3b0:       48 89 05 a9 04 60 00    mov    %rax,0x6004a9(%rip)        # bba860 <CurrentMemoryContext>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba3b7:       8b 45 b4                mov    -0x4c(%rbp),%eax
         :	#endif   /* !PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(MCXT_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE MemoryContext
         :	MemoryContextSwitchTo(MemoryContext context)
         :	{
         :	        MemoryContext old = CurrentMemoryContext;
    0.00 :	  5ba3ba:       48 89 55 a0             mov    %rdx,-0x60(%rbp)
    0.00 :	  5ba3be:       85 c0                   test   %eax,%eax
    0.00 :	  5ba3c0:       0f 8e 78 ff ff ff       jle    5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3c6:       45 84 ed                test   %r13b,%r13b
    0.00 :	  5ba3c9:       0f 84 6f ff ff ff       je     5ba33e <ExecAgg+0x5be>
    0.00 :	  5ba3cf:       84 db                   test   %bl,%bl
    0.00 :	  5ba3d1:       75 39                   jne    5ba40c <ExecAgg+0x68c>
    0.00 :	  5ba3d3:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba3da:       00 00 
    0.00 :	  5ba3dc:       74 50                   je     5ba42e <ExecAgg+0x6ae>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba3de:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba3e5:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba3e8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba3eb:       e8 a0 f3 ff ff          callq  5b9790 <advance_transition_function>
         :	                        /* forget the old value, if any */
         :	                        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba3f0:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba3f7:       00 00 
    0.00 :	  5ba3f9:       0f 85 59 ff ff ff       jne    5ba358 <ExecAgg+0x5d8>
         :	                                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba3ff:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba402:       e8 79 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba407:       e9 4c ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba40c:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba413:       00 00 
    0.00 :	  5ba415:       75 35                   jne    5ba44c <ExecAgg+0x6cc>
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
         :	                                pfree(DatumGetPointer(*newVal));
         :	                }
         :	                else
         :	                {
         :	                        advance_transition_function(aggstate, peraggstate, pergroupstate);
    0.00 :	  5ba417:       48 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%rdx
    0.00 :	  5ba41e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba421:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba424:       e8 67 f3 ff ff          callq  5b9790 <advance_transition_function>
    0.00 :	  5ba429:       e9 2a ff ff ff          jmpq   5ba358 <ExecAgg+0x5d8>
         :	                /*
         :	                 * If DISTINCT mode, and not distinct from prior, skip it.
         :	                 *
         :	                 * Note: we assume equality functions don't care about collation.
         :	                 */
         :	                if (isDistinct &&
    0.00 :	  5ba42e:       49 8b 8c 24 28 01 00    mov    0x128(%r12),%rcx
    0.00 :	  5ba435:       00 
    0.00 :	  5ba436:       49 8b bc 24 b8 00 00    mov    0xb8(%r12),%rdi
    0.00 :	  5ba43d:       00 
    0.00 :	  5ba43e:       31 f6                   xor    %esi,%esi
    0.00 :	  5ba440:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  5ba443:       e8 e8 3b 1c 00          callq  77e030 <FunctionCall2Coll>
    0.00 :	  5ba448:       84 c0                   test   %al,%al
    0.00 :	  5ba44a:       74 92                   je     5ba3de <ExecAgg+0x65e>
         :	                         (!oldIsNull && !*isNull &&
         :	                          DatumGetBool(FunctionCall2(&peraggstate->equalfns[0],
         :	                                                                                 oldVal, *newVal)))))
         :	                {
         :	                        /* equal to prior, so forget this one */
         :	                        if (!peraggstate->inputtypeByVal && !*isNull)
    0.00 :	  5ba44c:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba453:       00 00 
    0.00 :	  5ba455:       0f 85 0e ff ff ff       jne    5ba369 <ExecAgg+0x5e9>
    0.00 :	  5ba45b:       41 80 bc 24 41 04 00    cmpb   $0x0,0x441(%r12)
    0.00 :	  5ba462:       00 00 
    0.00 :	  5ba464:       0f 85 ff fe ff ff       jne    5ba369 <ExecAgg+0x5e9>
         :	                                pfree(DatumGetPointer(*newVal));
    0.00 :	  5ba46a:       49 8b bc 24 28 01 00    mov    0x128(%r12),%rdi
    0.00 :	  5ba471:       00 
    0.00 :	  5ba472:       e8 09 e7 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba477:       e9 ed fe ff ff          jmpq   5ba369 <ExecAgg+0x5e9>
         :	                }
         :
         :	                MemoryContextSwitchTo(oldContext);
         :	        }
         :
         :	        if (!oldIsNull && !peraggstate->inputtypeByVal)
    0.00 :	  5ba47c:       84 db                   test   %bl,%bl
    0.00 :	  5ba47e:       0f 85 8e fa ff ff       jne    5b9f12 <ExecAgg+0x192>
    0.00 :	  5ba484:       41 80 bc 24 d0 00 00    cmpb   $0x0,0xd0(%r12)
    0.00 :	  5ba48b:       00 00 
    0.00 :	  5ba48d:       0f 1f 00                nopl   (%rax)
    0.00 :	  5ba490:       0f 85 7c fa ff ff       jne    5b9f12 <ExecAgg+0x192>
         :	                pfree(DatumGetPointer(oldVal));
    0.00 :	  5ba496:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba499:       e8 e2 e6 1d 00          callq  798b80 <pfree>
    0.00 :	  5ba49e:       e9 6f fa ff ff          jmpq   5b9f12 <ExecAgg+0x192>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba4a3:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba4a7:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba4ab:       e8 50 2b ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba4b0:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba4b3:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba4b6:       0f 84 f0 fa ff ff       je     5b9fac <ExecAgg+0x22c>
         :	                        {
         :	                                aggstate->ss.ps.ps_TupFromTlist =
    0.00 :	  5ba4bc:       83 ea 01                sub    $0x1,%edx
    0.00 :	  5ba4bf:       41 0f 94 46 70          sete   0x70(%r14)
    0.00 :	  5ba4c4:       e9 ef fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
    0.00 :	  5ba4c9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                                outerslot = ExecProcNode(outerPlan);
         :	                                if (TupIsNull(outerslot))
         :	                                {
         :	                                        /* no more outer-plan tuples available */
         :	                                        aggstate->agg_done = true;
    0.00 :	  5ba4d0:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba4d7:       01 
    0.00 :	  5ba4d8:       e9 5f fc ff ff          jmpq   5ba13c <ExecAgg+0x3bc>
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4dd:       48 8b 7d 80             mov    -0x80(%rbp),%rdi
    0.00 :	  5ba4e1:       e8 ba 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4e6:       48 85 c0                test   %rax,%rax
         :	                 * If we don't already have the first tuple of the new group, fetch it
         :	                 * from the outer plan.
         :	                 */
         :	                if (aggstate->grp_firstTuple == NULL)
         :	                {
         :	                        outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba4e9:       48 89 c7                mov    %rax,%rdi
         :	                        if (!TupIsNull(outerslot))
    0.00 :	  5ba4ec:       74 06                   je     5ba4f4 <ExecAgg+0x774>
    0.00 :	  5ba4ee:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5ba4f2:       74 1f                   je     5ba513 <ExecAgg+0x793>
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba4f4:       48 8b 85 10 ff ff ff    mov    -0xf0(%rbp),%rax
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* outer plan produced no tuples at all */
         :	                                aggstate->agg_done = true;
    0.00 :	  5ba4fb:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba502:       01 
         :	                                /* If we are grouping, we should produce no tuples too */
         :	                                if (node->aggstrategy != AGG_PLAIN)
    0.00 :	  5ba503:       8b 40 60                mov    0x60(%rax),%eax
    0.00 :	  5ba506:       85 c0                   test   %eax,%eax
    0.00 :	  5ba508:       0f 84 2b fb ff ff       je     5ba039 <ExecAgg+0x2b9>
    0.00 :	  5ba50e:       e9 a3 fa ff ff          jmpq   5b9fb6 <ExecAgg+0x236>
         :	                        {
         :	                                /*
         :	                                 * Make a copy of the first input tuple; we will use this for
         :	                                 * comparisons (in group mode) and for projection.
         :	                                 */
         :	                                aggstate->grp_firstTuple = ExecCopySlotTuple(outerslot);
    0.00 :	  5ba513:       e8 98 9a ff ff          callq  5b3fb0 <ExecCopySlotTuple>
    0.00 :	  5ba518:       49 89 86 e0 00 00 00    mov    %rax,0xe0(%r14)
    0.00 :	  5ba51f:       90                      nop
    0.00 :	  5ba520:       e9 14 fb ff ff          jmpq   5ba039 <ExecAgg+0x2b9>
         :	                         * and the representative input tuple.
         :	                         */
         :	                        TupleTableSlot *result;
         :	                        ExprDoneCond isDone;
         :
         :	                        result = ExecProject(aggstate->ss.ps.ps_ProjInfo, &isDone);
    0.00 :	  5ba525:       49 8b 7e 68             mov    0x68(%r14),%rdi
    0.00 :	  5ba529:       48 8d 75 d4             lea    -0x2c(%rbp),%rsi
    0.00 :	  5ba52d:       e8 ce 2a ff ff          callq  5ad000 <ExecProject>
         :
         :	                        if (isDone != ExprEndResult)
    0.00 :	  5ba532:       8b 55 d4                mov    -0x2c(%rbp),%edx
    0.00 :	  5ba535:       83 fa 02                cmp    $0x2,%edx
    0.00 :	  5ba538:       0f 84 ba f9 ff ff       je     5b9ef8 <ExecAgg+0x178>
    0.00 :	  5ba53e:       e9 79 ff ff ff          jmpq   5ba4bc <ExecAgg+0x73c>
         :	                 */
         :	                entry = (AggHashEntry) ScanTupleHashTable(&aggstate->hashiter);
         :	                if (entry == NULL)
         :	                {
         :	                        /* No more entries in hashtable, so done */
         :	                        aggstate->agg_done = TRUE;
    0.00 :	  5ba543:       41 c6 86 d0 00 00 00    movb   $0x1,0xd0(%r14)
    0.00 :	  5ba54a:       01 
    0.00 :	  5ba54b:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba54d:       e9 66 fa ff ff          jmpq   5b9fb8 <ExecAgg+0x238>
         :	        TupleTableSlot *outerslot;
         :
         :	        /*
         :	         * get state info from node
         :	         */
         :	        outerPlan = outerPlanState(aggstate);
    0.00 :	  5ba552:       4d 8b 6e 30             mov    0x30(%r14),%r13
         :	        /* tmpcontext is the per-input-tuple expression context */
         :	        tmpcontext = aggstate->tmpcontext;
    0.00 :	  5ba556:       4d 8b be c0 00 00 00    mov    0xc0(%r14),%r15
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba55d:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  5ba560:       e8 3b 1f ff ff          callq  5ac4a0 <ExecProcNode>
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba565:       48 85 c0                test   %rax,%rax
         :	         * Process each outer-plan tuple, and then fetch the next one, until we
         :	         * exhaust the outer plan.
         :	         */
         :	        for (;;)
         :	        {
         :	                outerslot = ExecProcNode(outerPlan);
    0.00 :	  5ba568:       48 89 c3                mov    %rax,%rbx
         :	                if (TupIsNull(outerslot))
    0.00 :	  5ba56b:       0f 84 db 00 00 00       je     5ba64c <ExecAgg+0x8cc>
    0.00 :	  5ba571:       80 78 04 00             cmpb   $0x0,0x4(%rax)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1350
   25.00 :	  5ba575:       0f 85 d1 00 00 00       jne    5ba64c <ExecAgg+0x8cc>
         :	                        break;
         :	                /* set up for advance_aggregates call */
         :	                tmpcontext->ecxt_outertuple = outerslot;
    0.00 :	  5ba57b:       49 89 47 18             mov    %rax,0x18(%r15)
         :	 * When called, CurrentMemoryContext should be the per-query context.
         :	 */
         :	static AggHashEntry
         :	lookup_hash_entry(AggState *aggstate, TupleTableSlot *inputslot)
         :	{
         :	        TupleTableSlot *hashslot = aggstate->hashslot;
    0.00 :	  5ba57f:       4d 8b a6 f0 00 00 00    mov    0xf0(%r14),%r12
         :	        ListCell   *l;
         :	        AggHashEntry entry;
         :	        bool            isnew;
         :
         :	        /* if first time through, initialize hashslot by cloning input slot */
         :	        if (hashslot->tts_tupleDescriptor == NULL)
    0.00 :	  5ba586:       49 83 7c 24 10 00       cmpq   $0x0,0x10(%r12)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1035
   50.00 :	  5ba58c:       75 14                   jne    5ba5a2 <ExecAgg+0x822>
         :	        {
         :	                ExecSetSlotDescriptor(hashslot, inputslot->tts_tupleDescriptor);
    0.00 :	  5ba58e:       48 8b 70 10             mov    0x10(%rax),%rsi
    0.00 :	  5ba592:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba595:       e8 16 a0 ff ff          callq  5b45b0 <ExecSetSlotDescriptor>
         :	                /* Make sure all unused columns are NULLs */
         :	                ExecStoreAllNullTuple(hashslot);
    0.00 :	  5ba59a:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  5ba59d:       e8 1e 9d ff ff          callq  5b42c0 <ExecStoreAllNullTuple>
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
    0.00 :	  5ba5a2:       49 8b 96 f8 00 00 00    mov    0xf8(%r14),%rdx
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  5ba5a9:       31 c0                   xor    %eax,%eax
    0.00 :	  5ba5ab:       48 85 d2                test   %rdx,%rdx
    0.00 :	  5ba5ae:       74 04                   je     5ba5b4 <ExecAgg+0x834>
    0.00 :	  5ba5b0:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	  5ba5b4:       8b 30                   mov    (%rax),%esi
    0.00 :	  5ba5b6:       48 89 df                mov    %rbx,%rdi
    0.00 :	  5ba5b9:       e8 a2 4c eb ff          callq  46f260 <slot_getsomeattrs>
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5be:       49 8b 86 f8 00 00 00    mov    0xf8(%r14),%rax
    0.00 :	  5ba5c5:       48 85 c0                test   %rax,%rax
    0.00 :	  5ba5c8:       74 3a                   je     5ba604 <ExecAgg+0x884>
    0.00 :	  5ba5ca:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  5ba5ce:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba5d1:       74 31                   je     5ba604 <ExecAgg+0x884>
         :	        {
         :	                int                     varNumber = lfirst_int(l) - 1;
         :
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
    0.00 :	  5ba5d3:       8b 06                   mov    (%rsi),%eax
    0.00 :	  5ba5d5:       48 8b 53 28             mov    0x28(%rbx),%rdx
    0.00 :	  5ba5d9:       49 8b 4c 24 28          mov    0x28(%r12),%rcx
    0.00 :	  5ba5de:       83 e8 01                sub    $0x1,%eax
    0.00 :	  5ba5e1:       48 98                   cltq   
    0.00 :	  5ba5e3:       48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
    0.00 :	  5ba5e7:       48 89 14 c1             mov    %rdx,(%rcx,%rax,8)
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
    0.00 :	  5ba5eb:       48 8b 53 30             mov    0x30(%rbx),%rdx
    0.00 :	  5ba5ef:       49 8b 4c 24 30          mov    0x30(%r12),%rcx
    0.00 :	  5ba5f4:       0f b6 14 02             movzbl (%rdx,%rax,1),%edx
    0.00 :	  5ba5f8:       88 14 01                mov    %dl,(%rcx,%rax,1)
         :	                ExecStoreAllNullTuple(hashslot);
         :	        }
         :
         :	        /* transfer just the needed columns into hashslot */
         :	        slot_getsomeattrs(inputslot, linitial_int(aggstate->hash_needed));
         :	        foreach(l, aggstate->hash_needed)
    0.00 :	  5ba5fb:       48 8b 76 08             mov    0x8(%rsi),%rsi
    0.00 :	  5ba5ff:       48 85 f6                test   %rsi,%rsi
    0.00 :	  5ba602:       75 cf                   jne    5ba5d3 <ExecAgg+0x853>
         :	                hashslot->tts_values[varNumber] = inputslot->tts_values[varNumber];
         :	                hashslot->tts_isnull[varNumber] = inputslot->tts_isnull[varNumber];
         :	        }
         :
         :	        /* find or create the hashtable entry using the filtered tuple */
         :	        entry = (AggHashEntry) LookupTupleHashEntry(aggstate->hashtable,
    0.00 :	  5ba604:       49 8b be e8 00 00 00    mov    0xe8(%r14),%rdi
    0.00 :	  5ba60b:       48 8d 55 d4             lea    -0x2c(%rbp),%rdx
    0.00 :	  5ba60f:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  5ba612:       e8 59 e8 fe ff          callq  5a8e70 <LookupTupleHashEntry>
         :	                                                                                                hashslot,
         :	                                                                                                &isnew);
         :
         :	        if (isnew)
    0.00 :	  5ba617:       80 7d d4 00             cmpb   $0x0,-0x2c(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeAgg.c:1057
   25.00 :	  5ba61b:       48 8d 58 08             lea    0x8(%rax),%rbx
    0.00 :	  5ba61f:       74 12                   je     5ba633 <ExecAgg+0x8b3>
         :	        {
         :	                /* initialize aggregates for new tuple group */
         :	                initialize_aggregates(aggstate, aggstate->peragg, entry->pergroup);
    0.00 :	  5ba621:       49 8b b6 b0 00 00 00    mov    0xb0(%r14),%rsi
    0.00 :	  5ba628:       48 89 da                mov    %rbx,%rdx
    0.00 :	  5ba62b:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba62e:       e8 9d ef ff ff          callq  5b95d0 <initialize_aggregates>
         :
         :	                /* Find or build hashtable entry for this tuple's group */
         :	                entry = lookup_hash_entry(aggstate, outerslot);
         :
         :	                /* Advance the aggregates */
         :	                advance_aggregates(aggstate, entry->pergroup);
    0.00 :	  5ba633:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  5ba636:       48 89 de                mov    %rbx,%rsi
    0.00 :	  5ba639:       e8 12 f3 ff ff          callq  5b9950 <advance_aggregates>
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
    0.00 :	  5ba63e:       49 8b 7f 28             mov    0x28(%r15),%rdi
    0.00 :	  5ba642:       e8 69 e3 1d 00          callq  7989b0 <MemoryContextReset>
    0.00 :	  5ba647:       e9 11 ff ff ff          jmpq   5ba55d <ExecAgg+0x7dd>
         :	        }
         :
         :	        aggstate->table_filled = true;
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba64c:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
         :
         :	                /* Reset per-input-tuple context after each tuple */
         :	                ResetExprContext(tmpcontext);
         :	        }
         :
         :	        aggstate->table_filled = true;
    0.00 :	  5ba653:       41 c6 86 00 01 00 00    movb   $0x1,0x100(%r14)
    0.00 :	  5ba65a:       01 
         :	        /* Initialize to walk the hash table */
         :	        ResetTupleHashIterator(aggstate->hashtable, &aggstate->hashiter);
    0.00 :	  5ba65b:       4d 8d be 08 01 00 00    lea    0x108(%r14),%r15
    0.00 :	  5ba662:       48 8b 38                mov    (%rax),%rdi
    0.00 :	  5ba665:       e8 f6 92 1c 00          callq  783960 <hash_freeze>
    0.00 :	  5ba66a:       49 8b 86 e8 00 00 00    mov    0xe8(%r14),%rax
    0.00 :	  5ba671:       4c 89 ff                mov    %r15,%rdi
    0.00 :	  5ba674:       48 8b 30                mov    (%rax),%rsi
    0.00 :	  5ba677:       e8 b4 97 1c 00          callq  783e30 <hash_seq_init>
    0.00 :	  5ba67c:       41 0f b6 86 d0 00 00    movzbl 0xd0(%r14),%eax
    0.00 :	  5ba683:       00 
    0.00 :	  5ba684:       e9 6c f7 ff ff          jmpq   5b9df5 <ExecAgg+0x75>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:91
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673de0 <BufTableLookup>:
         :	 * BufTableLookup
         :	 *              Lookup the given BufferTag; return buffer ID, or -1 if not found
         :	 */
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
    0.00 :	  673de0:       55                      push   %rbp
    0.00 :	  673de1:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:83
   25.00 :	  673de4:       48 83 ec 20             sub    $0x20,%rsp
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673de8:       48 8b 07                mov    (%rdi),%rax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673deb:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673def:       48 89 45 e0             mov    %rax,-0x20(%rbp)
    0.00 :	  673df3:       48 8b 47 08             mov    0x8(%rdi),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:86
   25.00 :	  673df7:       48 89 45 e8             mov    %rax,-0x18(%rbp)
   25.00 :	  673dfb:       8b 47 10                mov    0x10(%rdi),%eax
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673dfe:       48 8b 3d 53 92 50 00    mov    0x509253(%rip),%rdi        # b7d058 <SharedBufHash>
         :	int
         :	BufTableLookup(BufferTag *tagPtr)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673e05:       89 45 f0                mov    %eax,-0x10(%rbp)
         :	        if (!CHashSearch(SharedBufHash, &ent))
    0.00 :	  673e08:       e8 e3 f4 10 00          callq  7832f0 <CHashSearch>
    0.00 :	  673e0d:       89 c2                   mov    %eax,%edx
    0.00 :	  673e0f:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  673e14:       84 d2                   test   %dl,%dl
    0.00 :	  673e16:       0f 45 45 f4             cmovne -0xc(%rbp),%eax
         :	                return -1;
         :
         :	        return ent.id;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:91
   25.00 :	  673e1a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1321
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1317
   25.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1317
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077e030 <FunctionCall2Coll>:
         :	        return result;
         :	}
         :
         :	Datum
         :	FunctionCall2Coll(FmgrInfo *flinfo, Oid collation, Datum arg1, Datum arg2)
         :	{
    0.00 :	  77e030:       55                      push   %rbp
    0.00 :	  77e031:       48 89 f8                mov    %rdi,%rax
    0.00 :	  77e034:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  77e037:       48 81 ec b0 03 00 00    sub    $0x3b0,%rsp
         :	         * utils/sort/tuplesort.c!
         :	         */
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 2, collation, NULL, NULL);
    0.00 :	  77e03e:       48 89 bd 50 fc ff ff    mov    %rdi,-0x3b0(%rbp)
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1317
   25.00 :	  77e045:       48 c7 85 58 fc ff ff    movq   $0x0,-0x3a8(%rbp)
    0.00 :	  77e04c:       00 00 00 00 
         :	        fcinfo.arg[0] = arg1;
         :	        fcinfo.arg[1] = arg2;
         :	        fcinfo.argnull[0] = false;
         :	        fcinfo.argnull[1] = false;
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e050:       48 8d bd 50 fc ff ff    lea    -0x3b0(%rbp),%rdi
         :	         * utils/sort/tuplesort.c!
         :	         */
         :	        FunctionCallInfoData fcinfo;
         :	        Datum           result;
         :
         :	        InitFunctionCallInfoData(fcinfo, flinfo, 2, collation, NULL, NULL);
    0.00 :	  77e057:       48 c7 85 60 fc ff ff    movq   $0x0,-0x3a0(%rbp)
    0.00 :	  77e05e:       00 00 00 00 
    0.00 :	  77e062:       89 b5 68 fc ff ff       mov    %esi,-0x398(%rbp)
    0.00 :	  77e068:       c6 85 6c fc ff ff 00    movb   $0x0,-0x394(%rbp)
   25.00 :	  77e06f:       66 c7 85 6e fc ff ff    movw   $0x2,-0x392(%rbp)
    0.00 :	  77e076:       02 00 
         :
         :	        fcinfo.arg[0] = arg1;
    0.00 :	  77e078:       48 89 95 70 fc ff ff    mov    %rdx,-0x390(%rbp)
         :	        fcinfo.arg[1] = arg2;
    0.00 :	  77e07f:       48 89 8d 78 fc ff ff    mov    %rcx,-0x388(%rbp)
         :	        fcinfo.argnull[0] = false;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:1321
   50.00 :	  77e086:       c6 45 90 00             movb   $0x0,-0x70(%rbp)
         :	        fcinfo.argnull[1] = false;
    0.00 :	  77e08a:       c6 45 91 00             movb   $0x0,-0x6f(%rbp)
         :
         :	        result = FunctionCallInvoke(&fcinfo);
    0.00 :	  77e08e:       ff 10                   callq  *(%rax)
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
    0.00 :	  77e090:       80 bd 6c fc ff ff 00    cmpb   $0x0,-0x394(%rbp)
    0.00 :	  77e097:       75 02                   jne    77e09b <FunctionCall2Coll+0x6b>
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
         :
         :	        return result;
         :	}
    0.00 :	  77e099:       c9                      leaveq 
    0.00 :	  77e09a:       c3                      retq   
         :
         :	        result = FunctionCallInvoke(&fcinfo);
         :
         :	        /* Check for null result, since caller is clearly not expecting one */
         :	        if (unlikely(fcinfo.isnull))
         :	                elog(ERROR, "function %u returned NULL", fcinfo.flinfo->fn_oid);
    0.00 :	  77e09b:       ba 40 52 8d 00          mov    $0x8d5240,%edx
    0.00 :	  77e0a0:       be 30 05 00 00          mov    $0x530,%esi
    0.00 :	  77e0a5:       bf b3 47 8d 00          mov    $0x8d47b3,%edi
    0.00 :	  77e0aa:       e8 71 d3 ff ff          callq  77b420 <elog_start>
    0.00 :	  77e0af:       48 8b 85 50 fc ff ff    mov    -0x3b0(%rbp),%rax
    0.00 :	  77e0b6:       be 97 4c 8d 00          mov    $0x8d4c97,%esi
    0.00 :	  77e0bb:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  77e0c0:       8b 50 08                mov    0x8(%rax),%edx
    0.00 :	  77e0c3:       31 c0                   xor    %eax,%eax
    0.00 :	  77e0c5:       e8 66 d1 ff ff          callq  77b230 <elog_finish>
    0.00 :	  77e0ca:       e8 01 b4 ce ff          callq  4694d0 <abort@plt>

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   50.00 ??:0
   25.00 ??:0
   25.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000084750 <memcpy>:
    0.00 :	   84750:       48 83 fa 20             cmp    $0x20,%rdx
    0.00 :	   84754:       48 89 f8                mov    %rdi,%rax
    0.00 :	   84757:       73 77                   jae    847d0 <memcpy+0x80>
    0.00 :	   84759:       f6 c2 01                test   $0x1,%dl
    0.00 :	   8475c:       74 0b                   je     84769 <memcpy+0x19>
    0.00 :	   8475e:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   84761:       88 0f                   mov    %cl,(%rdi)
    0.00 :	   84763:       48 ff c6                inc    %rsi
    0.00 :	   84766:       48 ff c7                inc    %rdi
    0.00 :	   84769:       f6 c2 02                test   $0x2,%dl
    0.00 :	   8476c:       74 12                   je     84780 <memcpy+0x30>
    0.00 :	   8476e:       0f b7 0e                movzwl (%rsi),%ecx
    0.00 :	   84771:       66 89 0f                mov    %cx,(%rdi)
    0.00 :	   84774:       48 83 c6 02             add    $0x2,%rsi
    0.00 :	   84778:       48 83 c7 02             add    $0x2,%rdi
    0.00 :	   8477c:       0f 1f 40 00             nopl   0x0(%rax)
 ??:0
   25.00 :	   84780:       f6 c2 04                test   $0x4,%dl
    0.00 :	   84783:       74 0c                   je     84791 <memcpy+0x41>
    0.00 :	   84785:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	   84787:       89 0f                   mov    %ecx,(%rdi)
    0.00 :	   84789:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	   8478d:       48 83 c7 04             add    $0x4,%rdi
    0.00 :	   84791:       f6 c2 08                test   $0x8,%dl
    0.00 :	   84794:       74 0e                   je     847a4 <memcpy+0x54>
    0.00 :	   84796:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   84799:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   8479c:       48 83 c6 08             add    $0x8,%rsi
   50.00 :	   847a0:       48 83 c7 08             add    $0x8,%rdi
    0.00 :	   847a4:       81 e2 f0 00 00 00       and    $0xf0,%edx
    0.00 :	   847aa:       74 1f                   je     847cb <memcpy+0x7b>
    0.00 :	   847ac:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   847b0:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :	   847b3:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   847b7:       48 89 0f                mov    %rcx,(%rdi)
    0.00 :	   847ba:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   847be:       83 ea 10                sub    $0x10,%edx
    0.00 :	   847c1:       48 8d 76 10             lea    0x10(%rsi),%rsi
    0.00 :	   847c5:       48 8d 7f 10             lea    0x10(%rdi),%rdi
    0.00 :	   847c9:       75 e5                   jne    847b0 <memcpy+0x60>
    0.00 :	   847cb:       f3 c3                   repz retq 
    0.00 :	   847cd:       0f 1f 00                nopl   (%rax)
   25.00 :	   847d0:       48 89 44 24 f8          mov    %rax,-0x8(%rsp)
    0.00 :	   847d5:       89 f1                   mov    %esi,%ecx
    0.00 :	   847d7:       83 e1 07                and    $0x7,%ecx
    0.00 :	   847da:       74 34                   je     84810 <memcpy+0xc0>
    0.00 :	   847dc:       48 8d 54 11 f8          lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	   847e1:       83 e9 08                sub    $0x8,%ecx
    0.00 :	   847e4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   847eb:       00 00 00 00 00 
    0.00 :	   847f0:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	   847f3:       88 07                   mov    %al,(%rdi)
    0.00 :	   847f5:       ff c1                   inc    %ecx
    0.00 :	   847f7:       48 8d 76 01             lea    0x1(%rsi),%rsi
    0.00 :	   847fb:       48 8d 7f 01             lea    0x1(%rdi),%rdi
    0.00 :	   847ff:       75 ef                   jne    847f0 <memcpy+0xa0>
    0.00 :	   84801:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   84808:       0f 1f 84 00 00 00 00 
    0.00 :	   8480f:       00 
    0.00 :	   84810:       48 81 fa 00 04 00 00    cmp    $0x400,%rdx
    0.00 :	   84817:       77 77                   ja     84890 <memcpy+0x140>
    0.00 :	   84819:       89 d1                   mov    %edx,%ecx
    0.00 :	   8481b:       c1 e9 05                shr    $0x5,%ecx
    0.00 :	   8481e:       74 60                   je     84880 <memcpy+0x130>
    0.00 :	   84820:       ff c9                   dec    %ecx
    0.00 :	   84822:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84825:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84829:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8482d:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84831:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84834:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84838:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8483c:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84840:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   84844:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84848:       74 36                   je     84880 <memcpy+0x130>
    0.00 :	   8484a:       ff c9                   dec    %ecx
    0.00 :	   8484c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   8484f:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84853:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84857:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8485b:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   8485e:       4c 89 47 08             mov    %r8,0x8(%rdi)
    0.00 :	   84862:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84866:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8486a:       48 8d 76 20             lea    0x20(%rsi),%rsi
    0.00 :	   8486e:       48 8d 7f 20             lea    0x20(%rdi),%rdi
    0.00 :	   84872:       75 ac                   jne    84820 <memcpy+0xd0>
    0.00 :	   84874:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8487b:       00 00 00 00 00 
    0.00 :	   84880:       83 e2 1f                and    $0x1f,%edx
    0.00 :	   84883:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84888:       0f 85 cb fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   8488e:       f3 c3                   repz retq 
    0.00 :	   84890:       4c 8b 1d 79 d8 2e 00    mov    0x2ed879(%rip),%r11        # 372110 <__x86_64_data_cache_size_half>
    0.00 :	   84897:       49 39 d3                cmp    %rdx,%r11
    0.00 :	   8489a:       4c 0f 47 da             cmova  %rdx,%r11
    0.00 :	   8489e:       4c 89 d9                mov    %r11,%rcx
    0.00 :	   848a1:       49 83 e3 f8             and    $0xfffffffffffffff8,%r11
    0.00 :	   848a5:       48 c1 e9 03             shr    $0x3,%rcx
    0.00 :	   848a9:       74 05                   je     848b0 <memcpy+0x160>
    0.00 :	   848ab:       f3 48 a5                rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	   848ae:       66 90                   xchg   %ax,%ax
    0.00 :	   848b0:       4c 29 da                sub    %r11,%rdx
    0.00 :	   848b3:       48 f7 c2 f8 ff ff ff    test   $0xfffffffffffffff8,%rdx
    0.00 :	   848ba:       75 14                   jne    848d0 <memcpy+0x180>
    0.00 :	   848bc:       83 e2 07                and    $0x7,%edx
    0.00 :	   848bf:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   848c4:       0f 85 8f fe ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   848ca:       f3 c3                   repz retq 
    0.00 :	   848cc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   848d0:       4c 8b 05 59 d8 2e 00    mov    0x2ed859(%rip),%r8        # 372130 <__x86_64_shared_cache_size_half>
    0.00 :	   848d7:       49 39 d0                cmp    %rdx,%r8
    0.00 :	   848da:       4c 0f 47 c2             cmova  %rdx,%r8
    0.00 :	   848de:       4c 89 c1                mov    %r8,%rcx
    0.00 :	   848e1:       49 83 e0 c0             and    $0xffffffffffffffc0,%r8
    0.00 :	   848e5:       48 c1 e9 06             shr    $0x6,%rcx
    0.00 :	   848e9:       0f 84 ab 01 00 00       je     84a9a <memcpy+0x34a>
    0.00 :	   848ef:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   848f4:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   848f9:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   848fe:       48 89 5c 24 d8          mov    %rbx,-0x28(%rsp)
    0.00 :	   84903:       83 3d 06 2b 2f 00 00    cmpl   $0x0,0x2f2b06(%rip)        # 377410 <__x86_64_prefetchw>
    0.00 :	   8490a:       0f 84 c0 00 00 00       je     849d0 <memcpy+0x280>
    0.00 :	   84910:       48 ff c9                dec    %rcx
    0.00 :	   84913:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84916:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   8491a:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8491e:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84922:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84926:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   8492a:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8492e:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84932:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   84939:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84940:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84943:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84947:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8494b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8494f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84953:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84957:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   8495b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   8495f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84963:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84967:       0f 84 19 01 00 00       je     84a86 <memcpy+0x336>
    0.00 :	   8496d:       48 ff c9                dec    %rcx
    0.00 :	   84970:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84973:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84977:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   8497b:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   8497f:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84983:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84987:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   8498b:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   8498f:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84992:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84996:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   8499a:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   8499e:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   849a2:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   849a6:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   849aa:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   849ae:       0f 0d 8f 40 03 00 00    prefetchw 0x340(%rdi)
    0.00 :	   849b5:       0f 0d 8f 80 03 00 00    prefetchw 0x380(%rdi)
    0.00 :	   849bc:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   849c0:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   849c4:       0f 85 46 ff ff ff       jne    84910 <memcpy+0x1c0>
    0.00 :	   849ca:       e9 b7 00 00 00          jmpq   84a86 <memcpy+0x336>
    0.00 :	   849cf:       90                      nop
    0.00 :	   849d0:       48 ff c9                dec    %rcx
    0.00 :	   849d3:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   849d6:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   849da:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   849de:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   849e2:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   849e6:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   849ea:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   849ee:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   849f2:       0f 18 8e 80 03 00 00    prefetcht0 0x380(%rsi)
    0.00 :	   849f9:       0f 18 8e c0 03 00 00    prefetcht0 0x3c0(%rsi)
    0.00 :	   84a00:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a03:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a07:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a0b:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a0f:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a13:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a17:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a1b:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a1f:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a23:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a27:       74 5d                   je     84a86 <memcpy+0x336>
    0.00 :	   84a29:       48 ff c9                dec    %rcx
    0.00 :	   84a2c:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84a2f:       48 8b 5e 08             mov    0x8(%rsi),%rbx
    0.00 :	   84a33:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84a37:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84a3b:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84a3f:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84a43:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84a47:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84a4b:       0f 18 8f 40 03 00 00    prefetcht0 0x340(%rdi)
    0.00 :	   84a52:       0f 18 8f 80 03 00 00    prefetcht0 0x380(%rdi)
    0.00 :	   84a59:       48 89 07                mov    %rax,(%rdi)
    0.00 :	   84a5c:       48 89 5f 08             mov    %rbx,0x8(%rdi)
    0.00 :	   84a60:       4c 89 4f 10             mov    %r9,0x10(%rdi)
    0.00 :	   84a64:       4c 89 57 18             mov    %r10,0x18(%rdi)
    0.00 :	   84a68:       4c 89 5f 20             mov    %r11,0x20(%rdi)
    0.00 :	   84a6c:       4c 89 67 28             mov    %r12,0x28(%rdi)
    0.00 :	   84a70:       4c 89 6f 30             mov    %r13,0x30(%rdi)
    0.00 :	   84a74:       4c 89 77 38             mov    %r14,0x38(%rdi)
    0.00 :	   84a78:       48 8d 76 40             lea    0x40(%rsi),%rsi
    0.00 :	   84a7c:       48 8d 7f 40             lea    0x40(%rdi),%rdi
    0.00 :	   84a80:       0f 85 4a ff ff ff       jne    849d0 <memcpy+0x280>
    0.00 :	   84a86:       48 8b 5c 24 d8          mov    -0x28(%rsp),%rbx
    0.00 :	   84a8b:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84a90:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84a95:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84a9a:       4c 29 c2                sub    %r8,%rdx
    0.00 :	   84a9d:       48 f7 c2 c0 ff ff ff    test   $0xffffffffffffffc0,%rdx
    0.00 :	   84aa4:       75 1a                   jne    84ac0 <memcpy+0x370>
    0.00 :	   84aa6:       83 e2 3f                and    $0x3f,%edx
    0.00 :	   84aa9:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84aae:       0f 85 a5 fc ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84ab4:       f3 c3                   repz retq 
    0.00 :	   84ab6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   84abd:       00 00 00 
    0.00 :	   84ac0:       48 89 d1                mov    %rdx,%rcx
    0.00 :	   84ac3:       48 c1 e9 07             shr    $0x7,%rcx
    0.00 :	   84ac7:       0f 84 d8 00 00 00       je     84ba5 <memcpy+0x455>
    0.00 :	   84acd:       4c 89 74 24 f0          mov    %r14,-0x10(%rsp)
    0.00 :	   84ad2:       4c 89 6c 24 e8          mov    %r13,-0x18(%rsp)
    0.00 :	   84ad7:       4c 89 64 24 e0          mov    %r12,-0x20(%rsp)
    0.00 :	   84adc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   84ae0:       0f 18 86 00 03 00 00    prefetchnta 0x300(%rsi)
    0.00 :	   84ae7:       0f 18 86 40 03 00 00    prefetchnta 0x340(%rsi)
    0.00 :	   84aee:       48 ff c9                dec    %rcx
    0.00 :	   84af1:       48 8b 06                mov    (%rsi),%rax
    0.00 :	   84af4:       4c 8b 46 08             mov    0x8(%rsi),%r8
    0.00 :	   84af8:       4c 8b 4e 10             mov    0x10(%rsi),%r9
    0.00 :	   84afc:       4c 8b 56 18             mov    0x18(%rsi),%r10
    0.00 :	   84b00:       4c 8b 5e 20             mov    0x20(%rsi),%r11
    0.00 :	   84b04:       4c 8b 66 28             mov    0x28(%rsi),%r12
    0.00 :	   84b08:       4c 8b 6e 30             mov    0x30(%rsi),%r13
    0.00 :	   84b0c:       4c 8b 76 38             mov    0x38(%rsi),%r14
    0.00 :	   84b10:       48 0f c3 07             movnti %rax,(%rdi)
    0.00 :	   84b14:       4c 0f c3 47 08          movnti %r8,0x8(%rdi)
    0.00 :	   84b19:       4c 0f c3 4f 10          movnti %r9,0x10(%rdi)
    0.00 :	   84b1e:       4c 0f c3 57 18          movnti %r10,0x18(%rdi)
    0.00 :	   84b23:       4c 0f c3 5f 20          movnti %r11,0x20(%rdi)
    0.00 :	   84b28:       4c 0f c3 67 28          movnti %r12,0x28(%rdi)
    0.00 :	   84b2d:       4c 0f c3 6f 30          movnti %r13,0x30(%rdi)
    0.00 :	   84b32:       4c 0f c3 77 38          movnti %r14,0x38(%rdi)
    0.00 :	   84b37:       48 8b 46 40             mov    0x40(%rsi),%rax
    0.00 :	   84b3b:       4c 8b 46 48             mov    0x48(%rsi),%r8
    0.00 :	   84b3f:       4c 8b 4e 50             mov    0x50(%rsi),%r9
    0.00 :	   84b43:       4c 8b 56 58             mov    0x58(%rsi),%r10
    0.00 :	   84b47:       4c 8b 5e 60             mov    0x60(%rsi),%r11
    0.00 :	   84b4b:       4c 8b 66 68             mov    0x68(%rsi),%r12
    0.00 :	   84b4f:       4c 8b 6e 70             mov    0x70(%rsi),%r13
    0.00 :	   84b53:       4c 8b 76 78             mov    0x78(%rsi),%r14
    0.00 :	   84b57:       48 0f c3 47 40          movnti %rax,0x40(%rdi)
    0.00 :	   84b5c:       4c 0f c3 47 48          movnti %r8,0x48(%rdi)
    0.00 :	   84b61:       4c 0f c3 4f 50          movnti %r9,0x50(%rdi)
    0.00 :	   84b66:       4c 0f c3 57 58          movnti %r10,0x58(%rdi)
    0.00 :	   84b6b:       4c 0f c3 5f 60          movnti %r11,0x60(%rdi)
    0.00 :	   84b70:       4c 0f c3 67 68          movnti %r12,0x68(%rdi)
    0.00 :	   84b75:       4c 0f c3 6f 70          movnti %r13,0x70(%rdi)
    0.00 :	   84b7a:       4c 0f c3 77 78          movnti %r14,0x78(%rdi)
    0.00 :	   84b7f:       48 8d b6 80 00 00 00    lea    0x80(%rsi),%rsi
    0.00 :	   84b86:       48 8d bf 80 00 00 00    lea    0x80(%rdi),%rdi
    0.00 :	   84b8d:       0f 85 4d ff ff ff       jne    84ae0 <memcpy+0x390>
    0.00 :	   84b93:       0f ae f8                sfence 
    0.00 :	   84b96:       4c 8b 64 24 e0          mov    -0x20(%rsp),%r12
    0.00 :	   84b9b:       4c 8b 6c 24 e8          mov    -0x18(%rsp),%r13
    0.00 :	   84ba0:       4c 8b 74 24 f0          mov    -0x10(%rsp),%r14
    0.00 :	   84ba5:       83 e2 7f                and    $0x7f,%edx
    0.00 :	   84ba8:       48 8b 44 24 f8          mov    -0x8(%rsp),%rax
    0.00 :	   84bad:       0f 85 a6 fb ff ff       jne    84759 <memcpy+0x9>
    0.00 :	   84bb3:       f3 c3                   repz retq 

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

   75.00 ??:0
   25.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000d1e50 <posix_fadvise>:
    0.00 :	   d1e50:       4c 63 d1                movslq %ecx,%r10
   75.00 :	   d1e53:       48 63 ff                movslq %edi,%rdi
    0.00 :	   d1e56:       b8 dd 00 00 00          mov    $0xdd,%eax
    0.00 :	   d1e5b:       0f 05                   syscall 
    0.00 :	   d1e5d:       89 c1                   mov    %eax,%ecx
    0.00 :	   d1e5f:       89 c2                   mov    %eax,%edx
    0.00 :	   d1e61:       31 c0                   xor    %eax,%eax
    0.00 :	   d1e63:       f7 da                   neg    %edx
    0.00 :	   d1e65:       81 f9 00 f0 ff ff       cmp    $0xfffff000,%ecx
   25.00 :	   d1e6b:       0f 47 c2                cmova  %edx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000490660 <hash_uint32>:
         :	        register uint32 a,
         :	                                b,
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
    0.00 :	  490660:       81 ef ac a9 8c 61       sub    $0x618ca9ac,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490666:       55                      push   %rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490667:       81 f7 64 d8 6a 2a       xor    $0x2a6ad864,%edi
    0.00 :	  49066d:       81 ef 53 21 c3 56       sub    $0x56c32153,%edi
         :	 *              hash_any(&k, sizeof(uint32))
         :	 * but is faster and doesn't force the caller to store k into memory.
         :	 */
         :	Datum
         :	hash_uint32(uint32 k)
         :	{
    0.00 :	  490673:       48 89 e5                mov    %rsp,%rbp
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
    0.00 :	  490676:       89 fe                   mov    %edi,%esi
    0.00 :	  490678:       89 f8                   mov    %edi,%eax
    0.00 :	  49067a:       c1 c8 07                ror    $0x7,%eax
 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:519
   33.33 :	  49067d:       81 f6 54 56 73 9e       xor    $0x9e735654,%esi
    0.00 :	  490683:       29 c6                   sub    %eax,%esi
         :
         :	        /* report the result */
         :	        return UInt32GetDatum(c);
         :	}
    0.00 :	  490685:       c9                      leaveq 
         :	                                c;
         :
         :	        a = b = c = 0x9e3779b9 + (uint32) sizeof(uint32) + 3923095;
         :	        a += k;
         :
         :	        final(a, b, c);
   66.67 :	  490686:       89 f0                   mov    %esi,%eax
    0.00 :	  490688:       89 f2                   mov    %esi,%edx
    0.00 :	  49068a:       c1 ca 10                ror    $0x10,%edx
    0.00 :	  49068d:       35 64 d8 6a 2a          xor    $0x2a6ad864,%eax
    0.00 :	  490692:       29 d0                   sub    %edx,%eax
    0.00 :	  490694:       89 c2                   mov    %eax,%edx
    0.00 :	  490696:       89 c1                   mov    %eax,%ecx
    0.00 :	  490698:       c1 c9 1c                ror    $0x1c,%ecx
    0.00 :	  49069b:       31 fa                   xor    %edi,%edx
    0.00 :	  49069d:       29 ca                   sub    %ecx,%edx
    0.00 :	  49069f:       89 d1                   mov    %edx,%ecx
    0.00 :	  4906a1:       c1 ca 12                ror    $0x12,%edx
    0.00 :	  4906a4:       31 f1                   xor    %esi,%ecx
    0.00 :	  4906a6:       29 d1                   sub    %edx,%ecx
    0.00 :	  4906a8:       31 c8                   xor    %ecx,%eax
    0.00 :	  4906aa:       c1 c9 08                ror    $0x8,%ecx
    0.00 :	  4906ad:       29 c8                   sub    %ecx,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/hash/hashfunc.c:48
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004906f0 <hashint4>:
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4906f0:       55                      push   %rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
   66.67 :	  4906f1:       48 8b 7f 20             mov    0x20(%rdi),%rdi
         :	        return hash_uint32((int32) PG_GETARG_INT16(0));
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  4906f5:       48 89 e5                mov    %rsp,%rbp
         :	        return hash_uint32(PG_GETARG_INT32(0));
         :	}
    0.00 :	  4906f8:       c9                      leaveq 
         :	}
         :
         :	Datum
         :	hashint4(PG_FUNCTION_ARGS)
         :	{
         :	        return hash_uint32(PG_GETARG_INT32(0));
   33.33 :	  4906f9:       e9 62 ff ff ff          jmpq   490660 <hash_uint32>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:95
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000049f650 <heap_page_prune_opt>:
         :	 * OldestXmin is the cutoff XID used to distinguish whether tuples are DEAD
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
    0.00 :	  49f650:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:75
   33.33 :	  49f651:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  49f654:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  49f658:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  49f65c:       41 89 f4                mov    %esi,%r12d
    0.00 :	  49f65f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  49f663:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  49f667:       49 89 fe                mov    %rdi,%r14
    0.00 :	  49f66a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
   33.33 :	  49f66e:       48 83 ec 40             sub    $0x40,%rsp
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f672:       85 f6                   test   %esi,%esi
    0.00 :	  49f674:       0f 88 fe 00 00 00       js     49f778 <heap_page_prune_opt+0x128>
    0.00 :	  49f67a:       41 8d 44 24 ff          lea    -0x1(%r12),%eax
    0.00 :	  49f67f:       48 63 d8                movslq %eax,%rbx
    0.00 :	  49f682:       48 c1 e3 0d             shl    $0xd,%rbx
    0.00 :	  49f686:       48 03 1d 6b 04 72 00    add    0x72046b(%rip),%rbx        # bbfaf8 <BufferBlocks>
         :	        /*
         :	         * We can't write WAL in recovery mode, so there's no point trying to
         :	         * clean the page. The master will likely issue a cleaning WAL record soon
         :	         * anyway, so this is no particular loss.
         :	         */
         :	        if (RecoveryInProgress())
    0.00 :	  49f68d:       e8 2e de 02 00          callq  4cd4c0 <RecoveryInProgress>
    0.00 :	  49f692:       84 c0                   test   %al,%al
    0.00 :	  49f694:       74 1a                   je     49f6b0 <heap_page_prune_opt+0x60>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
         :	        }
         :	}
    0.00 :	  49f696:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  49f69a:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  49f69e:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  49f6a2:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  49f6a6:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  49f6aa:       c9                      leaveq 
    0.00 :	  49f6ab:       c3                      retq   
    0.00 :	  49f6ac:       0f 1f 40 00             nopl   0x0(%rax)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f6b0:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f6b3:       e8 28 37 04 00          callq  4e2de0 <IsCatalogRelation>
 /home/Computational/mark/src/postgres-andres/src/backend/access/heap/pruneheap.c:95
   33.33 :	  49f6b8:       84 c0                   test   %al,%al
    0.00 :	  49f6ba:       0f 84 d0 00 00 00       je     49f790 <heap_page_prune_opt+0x140>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
    0.00 :	  49f6c0:       44 8b 3d 39 b2 71 00    mov    0x71b239(%rip),%r15d        # bba900 <RecentGlobalXmin>
         :	         * Let's see if we really need pruning.
         :	         *
         :	         * Forget it if page is not hinted to contain something prunable that's
         :	         * older than OldestXmin.
         :	         */
         :	        if (!PageIsPrunable(page, OldestXmin))
    0.00 :	  49f6c7:       8b 7b 14                mov    0x14(%rbx),%edi
    0.00 :	  49f6ca:       85 ff                   test   %edi,%edi
    0.00 :	  49f6cc:       74 c8                   je     49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f6ce:       44 89 fe                mov    %r15d,%esi
    0.00 :	  49f6d1:       e8 0a 09 02 00          callq  4bffe0 <TransactionIdPrecedes>
    0.00 :	  49f6d6:       84 c0                   test   %al,%al
    0.00 :	  49f6d8:       74 bc                   je     49f696 <heap_page_prune_opt+0x46>
         :	         * unlikely to be *seriously* wrong, though, since reading either pd_lower
         :	         * or pd_upper is probably atomic.  Avoiding taking a lock seems more
         :	         * important than sometimes getting a wrong answer in what is after all
         :	         * just a heuristic estimate.
         :	         */
         :	        minfree = RelationGetTargetPageFreeSpace(relation,
    0.00 :	  49f6da:       49 8b 96 98 00 00 00    mov    0x98(%r14),%rdx
    0.00 :	  49f6e1:       41 bd 33 03 00 00       mov    $0x333,%r13d
    0.00 :	  49f6e7:       48 85 d2                test   %rdx,%rdx
    0.00 :	  49f6ea:       74 2f                   je     49f71b <heap_page_prune_opt+0xcb>
    0.00 :	  49f6ec:       b9 64 00 00 00          mov    $0x64,%ecx
    0.00 :	  49f6f1:       2b 4a 04                sub    0x4(%rdx),%ecx
    0.00 :	  49f6f4:       ba 1f 85 eb 51          mov    $0x51eb851f,%edx
    0.00 :	  49f6f9:       c1 e1 0d                shl    $0xd,%ecx
    0.00 :	  49f6fc:       89 c8                   mov    %ecx,%eax
    0.00 :	  49f6fe:       c1 f9 1f                sar    $0x1f,%ecx
    0.00 :	  49f701:       f7 ea                   imul   %edx
    0.00 :	  49f703:       b8 33 03 00 00          mov    $0x333,%eax
    0.00 :	  49f708:       c1 fa 05                sar    $0x5,%edx
    0.00 :	  49f70b:       29 ca                   sub    %ecx,%edx
    0.00 :	  49f70d:       4c 63 ea                movslq %edx,%r13
    0.00 :	  49f710:       49 81 fd 33 03 00 00    cmp    $0x333,%r13
    0.00 :	  49f717:       4c 0f 42 e8             cmovb  %rax,%r13
         :	                                                                                         HEAP_DEFAULT_FILLFACTOR);
         :	        minfree = Max(minfree, BLCKSZ / 10);
         :
         :	        if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f71b:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f71f:       75 11                   jne    49f732 <heap_page_prune_opt+0xe2>
    0.00 :	  49f721:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f724:       e8 37 56 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f729:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f72c:       0f 83 64 ff ff ff       jae    49f696 <heap_page_prune_opt+0x46>
         :	        {
         :	                /* OK, try to get exclusive buffer lock */
         :	                if (!ConditionalLockBufferForCleanup(buffer))
    0.00 :	  49f732:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f735:       e8 26 78 1d 00          callq  676f60 <ConditionalLockBufferForCleanup>
    0.00 :	  49f73a:       84 c0                   test   %al,%al
    0.00 :	  49f73c:       0f 84 54 ff ff ff       je     49f696 <heap_page_prune_opt+0x46>
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f742:       f6 43 0a 02             testb  $0x2,0xa(%rbx)
    0.00 :	  49f746:       74 68                   je     49f7b0 <heap_page_prune_opt+0x160>
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f748:       4c 8d 45 d4             lea    -0x2c(%rbp),%r8
    0.00 :	  49f74c:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  49f751:       44 89 fa                mov    %r15d,%edx
    0.00 :	  49f754:       44 89 e6                mov    %r12d,%esi
    0.00 :	  49f757:       4c 89 f7                mov    %r14,%rdi
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
         :	                {
         :	                        TransactionId ignore = InvalidTransactionId;            /* return value not
    0.00 :	  49f75a:       c7 45 d4 00 00 00 00    movl   $0x0,-0x2c(%rbp)
         :	                                                                                                                                 * needed */
         :
         :	                        /* OK to prune */
         :	                        (void) heap_page_prune(relation, buffer, OldestXmin, true, &ignore);
    0.00 :	  49f761:       e8 5a f4 ff ff          callq  49ebc0 <heap_page_prune>
         :	                }
         :
         :	                /* And release buffer lock */
         :	                LockBuffer(buffer, BUFFER_LOCK_UNLOCK);
    0.00 :	  49f766:       31 f6                   xor    %esi,%esi
    0.00 :	  49f768:       44 89 e7                mov    %r12d,%edi
    0.00 :	  49f76b:       e8 a0 4f 1d 00          callq  674710 <LockBuffer>
    0.00 :	  49f770:       e9 21 ff ff ff          jmpq   49f696 <heap_page_prune_opt+0x46>
    0.00 :	  49f775:       0f 1f 00                nopl   (%rax)
         :	 * or RECENTLY_DEAD (see HeapTupleSatisfiesVacuum).
         :	 */
         :	void
         :	heap_page_prune_opt(Relation relation, Buffer buffer)
         :	{
         :	        Page            page = BufferGetPage(buffer);
    0.00 :	  49f778:       89 f0                   mov    %esi,%eax
    0.00 :	  49f77a:       48 8b 15 97 d9 6d 00    mov    0x6dd997(%rip),%rdx        # b7d118 <LocalBufferBlockPointers>
    0.00 :	  49f781:       f7 d0                   not    %eax
    0.00 :	  49f783:       48 98                   cltq   
    0.00 :	  49f785:       48 8b 1c c2             mov    (%rdx,%rax,8),%rbx
    0.00 :	  49f789:       e9 ff fe ff ff          jmpq   49f68d <heap_page_prune_opt+0x3d>
    0.00 :	  49f78e:       66 90                   xchg   %ax,%ax
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f790:       83 3d c5 99 6d 00 02    cmpl   $0x2,0x6d99c5(%rip)        # b7915c <wal_level>
    0.00 :	  49f797:       7e 0a                   jle    49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f799:       49 8b 46 30             mov    0x30(%r14),%rax
    0.00 :	  49f79d:       80 78 6e 70             cmpb   $0x70,0x6e(%rax)
    0.00 :	  49f7a1:       74 25                   je     49f7c8 <heap_page_prune_opt+0x178>
         :	                RelationIsAccessibleInLogicalDecoding(relation))
         :	                OldestXmin = RecentGlobalXmin;
         :	        else
         :	                OldestXmin = RecentGlobalDataXmin;
    0.00 :	  49f7a3:       44 8b 3d 5a b1 71 00    mov    0x71b15a(%rip),%r15d        # bba904 <RecentGlobalDataXmin>
    0.00 :	  49f7aa:       e9 18 ff ff ff          jmpq   49f6c7 <heap_page_prune_opt+0x77>
    0.00 :	  49f7af:       90                      nop
         :	                 * Now that we have buffer lock, get accurate information about the
         :	                 * page's free space, and recheck the heuristic about whether to
         :	                 * prune. (We needn't recheck PageIsPrunable, since no one else could
         :	                 * have pruned while we hold pin.)
         :	                 */
         :	                if (PageIsFull(page) || PageGetHeapFreeSpace(page) < minfree)
    0.00 :	  49f7b0:       48 89 df                mov    %rbx,%rdi
    0.00 :	  49f7b3:       e8 a8 55 1f 00          callq  694d60 <PageGetHeapFreeSpace>
    0.00 :	  49f7b8:       4c 39 e8                cmp    %r13,%rax
    0.00 :	  49f7bb:       73 a9                   jae    49f766 <heap_page_prune_opt+0x116>
    0.00 :	  49f7bd:       0f 1f 00                nopl   (%rax)
    0.00 :	  49f7c0:       eb 86                   jmp    49f748 <heap_page_prune_opt+0xf8>
    0.00 :	  49f7c2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * catalog relation or a user defined, additional, catalog relation, we
         :	         * need to use the horizon that includes slots, otherwise the data-only
         :	         * horizon can be used. Note that the toast relation of user defined
         :	         * relations are *not* considered catalog relations.
         :	         */
         :	        if (IsCatalogRelation(relation) ||
    0.00 :	  49f7c8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  49f7cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  49f7d0:       e8 0b 36 04 00          callq  4e2de0 <IsCatalogRelation>
    0.00 :	  49f7d5:       84 c0                   test   %al,%al
    0.00 :	  49f7d7:       0f 85 e3 fe ff ff       jne    49f6c0 <heap_page_prune_opt+0x70>
    0.00 :	  49f7dd:       49 8b 86 98 00 00 00    mov    0x98(%r14),%rax
    0.00 :	  49f7e4:       48 85 c0                test   %rax,%rax
    0.00 :	  49f7e7:       74 ba                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7e9:       80 78 48 00             cmpb   $0x0,0x48(%rax)
    0.00 :	  49f7ed:       74 b4                   je     49f7a3 <heap_page_prune_opt+0x153>
    0.00 :	  49f7ef:       90                      nop
    0.00 :	  49f7f0:       e9 cb fe ff ff          jmpq   49f6c0 <heap_page_prune_opt+0x70>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:102
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:109
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:109
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2db0 <IsCatalogClass>:
         :	 *
         :	 * Check IsCatalogRelation() for details.
         :	 */
         :	bool
         :	IsCatalogClass(Oid relid, Form_pg_class reltuple)
         :	{
    0.00 :	  4e2db0:       55                      push   %rbp
    0.00 :	  4e2db1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4e2db4:       53                      push   %rbx
    0.00 :	  4e2db5:       89 fb                   mov    %edi,%ebx
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:102
   33.33 :	  4e2db7:       48 83 ec 08             sub    $0x8,%rsp
         :	        Oid                     relnamespace = reltuple->relnamespace;
    0.00 :	  4e2dbb:       8b 7e 40                mov    0x40(%rsi),%edi
         :
         :	        /*
         :	         * Never consider relations outside pg_catalog/pg_toast to be catalog
         :	         * relations.
         :	         */
         :	        if (!IsSystemNamespace(relnamespace) && !IsToastNamespace(relnamespace))
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:109
   33.33 :	  4e2dbe:       83 ff 0b                cmp    $0xb,%edi
    0.00 :	  4e2dc1:       74 0b                   je     4e2dce <IsCatalogClass+0x1e>
    0.00 :	  4e2dc3:       e8 98 ff ff ff          callq  4e2d60 <IsToastNamespace>
    0.00 :	  4e2dc8:       31 d2                   xor    %edx,%edx
   33.33 :	  4e2dca:       84 c0                   test   %al,%al
    0.00 :	  4e2dcc:       74 09                   je     4e2dd7 <IsCatalogClass+0x27>
         :	         * property (c.f. GetNewObjectId()) and it has the advantage that it works
         :	         * correctly even if a user decides to create a relation in the pg_catalog
         :	         * namespace.
         :	         * ----
         :	         */
         :	        return relid < FirstNormalObjectId;
    0.00 :	  4e2dce:       81 fb ff 3f 00 00       cmp    $0x3fff,%ebx
    0.00 :	  4e2dd4:       0f 96 c2                setbe  %dl
         :	}
    0.00 :	  4e2dd7:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  4e2ddb:       89 d0                   mov    %edx,%eax
    0.00 :	  4e2ddd:       5b                      pop    %rbx
    0.00 :	  4e2dde:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3259
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674440 <StartBufferIO>:
         :	 * Returns TRUE if we successfully marked the buffer as I/O busy,
         :	 * FALSE if someone else already did the work.
         :	 */
         :	static bool
         :	StartBufferIO(volatile BufferDesc *buf, bool forInput)
         :	{
    0.00 :	  674440:       55                      push   %rbp
    0.00 :	  674441:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674444:       41 56                   push   %r14
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3259
   33.33 :	  674446:       41 89 f6                mov    %esi,%r14d
    0.00 :	  674449:       41 55                   push   %r13
         :	static __inline__ int
         :	tas(volatile slock_t *lock)
         :	{
         :	        register slock_t _res = 1;
         :
         :	        __asm__ __volatile__(
    0.00 :	  67444b:       41 bd 01 00 00 00       mov    $0x1,%r13d
    0.00 :	  674451:       41 54                   push   %r12
    0.00 :	  674453:       4c 8d 67 20             lea    0x20(%rdi),%r12
    0.00 :	  674457:       53                      push   %rbx
    0.00 :	  674458:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  67445b:       eb 20                   jmp    67447d <StartBufferIO+0x3d>
    0.00 :	  67445d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
         :
         :	                LockBufHdr(buf);
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  674460:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  674464:       a8 08                   test   $0x8,%al
    0.00 :	  674466:       74 46                   je     6744ae <StartBufferIO+0x6e>
         :	                 * The only way BM_IO_IN_PROGRESS could be set when the io_in_progress
         :	                 * lock isn't held is if the process doing the I/O is recovering from
         :	                 * an error (see AbortBufferIO).  If that's the case, we must wait for
         :	                 * him to get unwedged.
         :	                 */
         :	                UnlockBufHdr(buf);
    0.00 :	  674468:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67446c:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674470:       e8 2b af 01 00          callq  68f3a0 <LWLockRelease>
         :	                WaitIO(buf);
    0.00 :	  674475:       48 89 df                mov    %rbx,%rdi
    0.00 :	  674478:       e8 43 ff ff ff          callq  6743c0 <WaitIO>
         :	        {
         :	                /*
         :	                 * Grab the io_in_progress lock so that other processes can wait for
         :	                 * me to finish the I/O.
         :	                 */
         :	                LWLockAcquire(buf->io_in_progress_lock, LW_EXCLUSIVE);
    0.00 :	  67447d:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674481:       31 f6                   xor    %esi,%esi
    0.00 :	  674483:       e8 68 b6 01 00          callq  68faf0 <LWLockAcquire>
    0.00 :	  674488:       44 89 e8                mov    %r13d,%eax
    0.00 :	  67448b:       f0 41 86 04 24          lock xchg %al,(%r12)
         :
         :	                LockBufHdr(buf);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3270
   66.67 :	  674490:       84 c0                   test   %al,%al
    0.00 :	  674492:       74 cc                   je     674460 <StartBufferIO+0x20>
    0.00 :	  674494:       ba c6 0c 00 00          mov    $0xcc6,%edx
    0.00 :	  674499:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  67449e:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  6744a1:       e8 9a bb 01 00          callq  690040 <s_lock>
         :
         :	                if (!(buf->flags & BM_IO_IN_PROGRESS))
    0.00 :	  6744a6:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744aa:       a8 08                   test   $0x8,%al
    0.00 :	  6744ac:       75 ba                   jne    674468 <StartBufferIO+0x28>
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744ae:       45 84 f6                test   %r14b,%r14b
    0.00 :	  6744b1:       74 3d                   je     6744f0 <StartBufferIO+0xb0>
    0.00 :	  6744b3:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744b7:       d1 e8                   shr    %eax
    0.00 :	  6744b9:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744bc:       84 c0                   test   %al,%al
    0.00 :	  6744be:       75 3d                   jne    6744fd <StartBufferIO+0xbd>
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
         :	                return false;
         :	        }
         :
         :	        buf->flags |= BM_IO_IN_PROGRESS;
    0.00 :	  6744c0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744c4:       83 c8 08                or     $0x8,%eax
    0.00 :	  6744c7:       66 89 43 14             mov    %ax,0x14(%rbx)
         :
         :	        UnlockBufHdr(buf);
    0.00 :	  6744cb:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :
         :	        InProgressBuf = buf;
    0.00 :	  6744cf:       48 89 1d 92 8b 50 00    mov    %rbx,0x508b92(%rip)        # b7d068 <InProgressBuf>
         :	        IsForInput = forInput;
    0.00 :	  6744d6:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	  6744db:       44 88 35 c3 8b 50 00    mov    %r14b,0x508bc3(%rip)        # b7d0a5 <IsForInput>
         :
         :	        return true;
         :	}
    0.00 :	  6744e2:       5b                      pop    %rbx
    0.00 :	  6744e3:       41 5c                   pop    %r12
    0.00 :	  6744e5:       41 5d                   pop    %r13
    0.00 :	  6744e7:       41 5e                   pop    %r14
    0.00 :	  6744e9:       c9                      leaveq 
    0.00 :	  6744ea:       c3                      retq   
    0.00 :	  6744eb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                WaitIO(buf);
         :	        }
         :
         :	        /* Once we get here, there is definitely no I/O active on this buffer */
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
    0.00 :	  6744f0:       0f b7 43 14             movzwl 0x14(%rbx),%eax
    0.00 :	  6744f4:       f7 d0                   not    %eax
    0.00 :	  6744f6:       83 e0 01                and    $0x1,%eax
    0.00 :	  6744f9:       84 c0                   test   %al,%al
    0.00 :	  6744fb:       74 c3                   je     6744c0 <StartBufferIO+0x80>
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
    0.00 :	  6744fd:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  674501:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  674505:       e8 96 ae 01 00          callq  68f3a0 <LWLockRelease>
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  67450a:       5b                      pop    %rbx
    0.00 :	  67450b:       41 5c                   pop    %r12
    0.00 :	  67450d:       41 5d                   pop    %r13
         :
         :	        if (forInput ? (buf->flags & BM_VALID) : !(buf->flags & BM_DIRTY))
         :	        {
         :	                /* someone else already did the I/O */
         :	                UnlockBufHdr(buf);
         :	                LWLockRelease(buf->io_in_progress_lock);
    0.00 :	  67450f:       31 c0                   xor    %eax,%eax
         :
         :	        InProgressBuf = buf;
         :	        IsForInput = forInput;
         :
         :	        return true;
         :	}
    0.00 :	  674511:       41 5e                   pop    %r14
    0.00 :	  674513:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3020
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3013
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674710 <LockBuffer>:
         :	/*
         :	 * Acquire or release the content_lock for the buffer.
         :	 */
         :	void
         :	LockBuffer(Buffer buffer, int mode)
         :	{
    0.00 :	  674710:       55                      push   %rbp
    0.00 :	  674711:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674714:       53                      push   %rbx
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3003
   33.33 :	  674715:       89 f3                   mov    %esi,%ebx
    0.00 :	  674717:       48 83 ec 08             sub    $0x8,%rsp
         :	        volatile BufferDesc *buf;
         :
         :	        Assert(BufferIsValid(buffer));
         :	        if (BufferIsLocal(buffer))
    0.00 :	  67471b:       85 ff                   test   %edi,%edi
    0.00 :	  67471d:       78 31                   js     674750 <LockBuffer+0x40>
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
    0.00 :	  67471f:       48 63 c7                movslq %edi,%rax
    0.00 :	  674722:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	  674726:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67472a:       48 03 05 cf b3 54 00    add    0x54b3cf(%rip),%rax        # bbfb00 <BufferDescriptors>
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
    0.00 :	  674731:       85 f6                   test   %esi,%esi
    0.00 :	  674733:       74 2b                   je     674760 <LockBuffer+0x50>
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
    0.00 :	  674735:       83 fe 01                cmp    $0x1,%esi
    0.00 :	  674738:       74 36                   je     674770 <LockBuffer+0x60>
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
    0.00 :	  67473a:       83 fe 02                cmp    $0x2,%esi
    0.00 :	  67473d:       75 45                   jne    674784 <LockBuffer+0x74>
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67473f:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674743:       48 83 c4 08             add    $0x8,%rsp
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  674747:       31 f6                   xor    %esi,%esi
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674749:       5b                      pop    %rbx
    0.00 :	  67474a:       c9                      leaveq 
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
    0.00 :	  67474b:       e9 a0 b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674750:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674754:       5b                      pop    %rbx
    0.00 :	  674755:       c9                      leaveq 
    0.00 :	  674756:       c3                      retq   
    0.00 :	  674757:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  67475e:       00 00 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
    0.00 :	  674760:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3020
   33.33 :	  674764:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674768:       5b                      pop    %rbx
    0.00 :	  674769:       c9                      leaveq 
         :	                return;                                 /* local buffers need no lock */
         :
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:3013
   33.33 :	  67476a:       e9 31 ac 01 00          jmpq   68f3a0 <LWLockRelease>
    0.00 :	  67476f:       90                      nop
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674770:       48 8b 78 38             mov    0x38(%rax),%rdi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  674774:       48 83 c4 08             add    $0x8,%rsp
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  674778:       be 01 00 00 00          mov    $0x1,%esi
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
         :	}
    0.00 :	  67477d:       5b                      pop    %rbx
    0.00 :	  67477e:       c9                      leaveq 
         :	        buf = &(BufferDescriptors[buffer - 1]);
         :
         :	        if (mode == BUFFER_LOCK_UNLOCK)
         :	                LWLockRelease(buf->content_lock);
         :	        else if (mode == BUFFER_LOCK_SHARE)
         :	                LWLockAcquire(buf->content_lock, LW_SHARED);
    0.00 :	  67477f:       e9 6c b3 01 00          jmpq   68faf0 <LWLockAcquire>
         :	        else if (mode == BUFFER_LOCK_EXCLUSIVE)
         :	                LWLockAcquire(buf->content_lock, LW_EXCLUSIVE);
         :	        else
         :	                elog(ERROR, "unrecognized buffer lock mode: %d", mode);
    0.00 :	  674784:       ba 15 a0 8a 00          mov    $0x8aa015,%edx
    0.00 :	  674789:       be cb 0b 00 00          mov    $0xbcb,%esi
    0.00 :	  67478e:       bf 53 9d 8a 00          mov    $0x8a9d53,%edi
    0.00 :	  674793:       e8 88 6c 10 00          callq  77b420 <elog_start>
    0.00 :	  674798:       89 da                   mov    %ebx,%edx
    0.00 :	  67479a:       be f8 9d 8a 00          mov    $0x8a9df8,%esi
    0.00 :	  67479f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  6747a4:       31 c0                   xor    %eax,%eax
    0.00 :	  6747a6:       e8 85 6a 10 00          callq  77b230 <elog_finish>
    0.00 :	  6747ab:       e8 20 4d df ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:916
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:934
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:934
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679920 <FileAccess>:
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  679920:       55                      push   %rbp
    0.00 :	  679921:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679924:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  679928:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  67992c:       4c 63 e7                movslq %edi,%r12
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  67992f:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  679933:       48 83 ec 20             sub    $0x20,%rsp
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679937:       48 8b 0d 5a 38 50 00    mov    0x50385a(%rip),%rcx        # b7d198 <VfdCache>
    0.00 :	  67993e:       49 c1 e4 06             shl    $0x6,%r12
         :	}
         :
         :	/* returns 0 on success, -1 on re-open failure (with errno set) */
         :	static int
         :	FileAccess(File file)
         :	{
    0.00 :	  679942:       41 89 fd                mov    %edi,%r13d
         :	        /*
         :	         * Is the file open?  If not, open it and put it at the head of the LRU
         :	         * ring (possibly closing the least recently used file to get an FD).
         :	         */
         :
         :	        if (FileIsNotOpen(file))
    0.00 :	  679945:       4a 8d 1c 21             lea    (%rcx,%r12,1),%rbx
    0.00 :	  679949:       83 3b ff                cmpl   $0xffffffff,(%rbx)
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:916
   33.33 :	  67994c:       74 52                   je     6799a0 <FileAccess+0x80>
         :	        {
         :	                returnValue = LruInsert(file);
         :	                if (returnValue != 0)
         :	                        return returnValue;
         :	        }
         :	        else if (VfdCache[0].lruLessRecently != file)
    0.00 :	  67994e:       31 c0                   xor    %eax,%eax
    0.00 :	  679950:       39 79 18                cmp    %edi,0x18(%rcx)
    0.00 :	  679953:       74 3c                   je     679991 <FileAccess+0x71>
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
         :
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = vfdP->lruMoreRecently;
    0.00 :	  679955:       48 63 43 18             movslq 0x18(%rbx),%rax
    0.00 :	  679959:       8b 53 14                mov    0x14(%rbx),%edx
    0.00 :	  67995c:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  679960:       89 54 01 14             mov    %edx,0x14(%rcx,%rax,1)
         :	        VfdCache[vfdP->lruMoreRecently].lruLessRecently = vfdP->lruLessRecently;
    0.00 :	  679964:       48 63 43 14             movslq 0x14(%rbx),%rax
    0.00 :	  679968:       8b 53 18                mov    0x18(%rbx),%edx
    0.00 :	  67996b:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67996f:       89 54 01 18             mov    %edx,0x18(%rcx,%rax,1)
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
         :
         :	        vfdP->lruMoreRecently = 0;
    0.00 :	  679973:       c7 43 14 00 00 00 00    movl   $0x0,0x14(%rbx)
         :	        vfdP->lruLessRecently = VfdCache[0].lruLessRecently;
    0.00 :	  67997a:       8b 41 18                mov    0x18(%rcx),%eax
    0.00 :	  67997d:       89 43 18                mov    %eax,0x18(%rbx)
         :	        VfdCache[0].lruLessRecently = file;
    0.00 :	  679980:       89 79 18                mov    %edi,0x18(%rcx)
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = file;
    0.00 :	  679983:       48 63 43 18             movslq 0x18(%rbx),%rax
    0.00 :	  679987:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  67998b:       89 7c 01 14             mov    %edi,0x14(%rcx,%rax,1)
    0.00 :	  67998f:       31 c0                   xor    %eax,%eax
         :	                Delete(file);
         :	                Insert(file);
         :	        }
         :
         :	        return 0;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:934
   33.33 :	  679991:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  679995:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  679999:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  67999d:       c9                      leaveq 
   33.33 :	  67999e:       c3                      retq   
    0.00 :	  67999f:       90                      nop
         :	        vfdP = &VfdCache[file];
         :
         :	        if (FileIsNotOpen(file))
         :	        {
         :	                /* Close excess kernel FDs. */
         :	                ReleaseLruFiles();
    0.00 :	  6799a0:       e8 8b ee ff ff          callq  678830 <ReleaseLruFiles>
         :	                /*
         :	                 * The open could still fail for lack of file descriptors, eg due to
         :	                 * overall system file table being full.  So, be prepared to release
         :	                 * another FD if necessary...
         :	                 */
         :	                vfdP->fd = BasicOpenFile(vfdP->fileName, vfdP->fileFlags,
    0.00 :	  6799a5:       8b 53 3c                mov    0x3c(%rbx),%edx
    0.00 :	  6799a8:       8b 73 38                mov    0x38(%rbx),%esi
    0.00 :	  6799ab:       48 8b 7b 30             mov    0x30(%rbx),%rdi
    0.00 :	  6799af:       e8 ac fd ff ff          callq  679760 <BasicOpenFile>
    0.00 :	  6799b4:       89 c1                   mov    %eax,%ecx
    0.00 :	  6799b6:       89 03                   mov    %eax,(%rbx)
         :	                                                                 vfdP->fileMode);
         :	                if (vfdP->fd < 0)
    0.00 :	  6799b8:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  6799bd:       85 c9                   test   %ecx,%ecx
    0.00 :	  6799bf:       78 d0                   js     679991 <FileAccess+0x71>
         :	                        return -1;
         :	                }
         :	                else
         :	                {
         :	                        DO_DB(elog(LOG, "RE_OPEN SUCCESS"));
         :	                        ++nfile;
    0.00 :	  6799c1:       83 05 b8 37 50 00 01    addl   $0x1,0x5037b8(%rip)        # b7d180 <nfile>
         :	                }
         :
         :	                /* seek to the right position */
         :	                if (vfdP->seekPos != (off_t) 0)
    0.00 :	  6799c8:       48 8b 73 20             mov    0x20(%rbx),%rsi
    0.00 :	  6799cc:       48 85 f6                test   %rsi,%rsi
    0.00 :	  6799cf:       75 2f                   jne    679a00 <FileAccess+0xe0>
         :
         :	        DO_DB(elog(LOG, "Insert %d (%s)",
         :	                           file, VfdCache[file].fileName));
         :	        DO_DB(_dump_lru());
         :
         :	        vfdP = &VfdCache[file];
    0.00 :	  6799d1:       48 8b 0d c0 37 50 00    mov    0x5037c0(%rip),%rcx        # b7d198 <VfdCache>
    0.00 :	  6799d8:       4a 8d 14 21             lea    (%rcx,%r12,1),%rdx
         :
         :	        vfdP->lruMoreRecently = 0;
    0.00 :	  6799dc:       c7 42 14 00 00 00 00    movl   $0x0,0x14(%rdx)
         :	        vfdP->lruLessRecently = VfdCache[0].lruLessRecently;
    0.00 :	  6799e3:       8b 41 18                mov    0x18(%rcx),%eax
    0.00 :	  6799e6:       89 42 18                mov    %eax,0x18(%rdx)
         :	        VfdCache[0].lruLessRecently = file;
    0.00 :	  6799e9:       44 89 69 18             mov    %r13d,0x18(%rcx)
         :	        VfdCache[vfdP->lruLessRecently].lruMoreRecently = file;
    0.00 :	  6799ed:       48 63 42 18             movslq 0x18(%rdx),%rax
    0.00 :	  6799f1:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  6799f5:       44 89 6c 01 14          mov    %r13d,0x14(%rcx,%rax,1)
    0.00 :	  6799fa:       31 c0                   xor    %eax,%eax
    0.00 :	  6799fc:       eb 93                   jmp    679991 <FileAccess+0x71>
    0.00 :	  6799fe:       66 90                   xchg   %ax,%ax
         :	                /* seek to the right position */
         :	                if (vfdP->seekPos != (off_t) 0)
         :	                {
         :	                        off_t returnValue PG_USED_FOR_ASSERTS_ONLY;
         :
         :	                        returnValue = lseek(vfdP->fd, vfdP->seekPos, SEEK_SET);
    0.00 :	  679a00:       31 d2                   xor    %edx,%edx
    0.00 :	  679a02:       89 cf                   mov    %ecx,%edi
    0.00 :	  679a04:       e8 67 01 df ff          callq  469b70 <lseek@plt>
    0.00 :	  679a09:       eb c6                   jmp    6799d1 <FileAccess+0xb1>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000697940 <mdopen>:
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697940:       55                      push   %rbp
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:570
   33.33 :	  697941:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  697944:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697948:       4c 63 ee                movslq %esi,%r13
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  69794b:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
   33.33 :	  69794f:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  697953:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  697957:       49 89 fc                mov    %rdi,%r12
    0.00 :	  69795a:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  69795e:       48 83 ec 30             sub    $0x30,%rsp
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  697962:       4a 8b 5c ef 28          mov    0x28(%rdi,%r13,8),%rbx
         :	 * EXTENSION_CREATE means it's OK to extend an existing relation, not to
         :	 * invent one out of whole cloth.
         :	 */
         :	static MdfdVec *
         :	mdopen(SMgrRelation reln, ForkNumber forknum, ExtensionBehavior behavior)
         :	{
    0.00 :	  697967:       41 89 d7                mov    %edx,%r15d
         :	        MdfdVec    *mdfd;
         :	        char       *path;
         :	        File            fd;
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
    0.00 :	  69796a:       48 85 db                test   %rbx,%rbx
    0.00 :	  69796d:       74 21                   je     697990 <mdopen+0x50>
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  69796f:       48 89 d8                mov    %rbx,%rax
    0.00 :	  697972:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  697976:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  69797a:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  69797e:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  697982:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  697986:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/md.c:617
   33.33 :	  697987:       c3                      retq   
    0.00 :	  697988:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  69798f:       00 
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  697990:       8b 4f 0c                mov    0xc(%rdi),%ecx
    0.00 :	  697993:       8b 57 08                mov    0x8(%rdi),%edx
    0.00 :	  697996:       41 89 f0                mov    %esi,%r8d
    0.00 :	  697999:       8b 7f 04                mov    0x4(%rdi),%edi
    0.00 :	  69799c:       41 8b 34 24             mov    (%r12),%esi
    0.00 :	  6979a0:       e8 2b 6c 11 00          callq  7ae5d0 <GetRelationPath>
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979a5:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  6979aa:       be 02 00 00 00          mov    $0x2,%esi
    0.00 :	  6979af:       48 89 c7                mov    %rax,%rdi
         :
         :	        /* No work if already open */
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
    0.00 :	  6979b2:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979b6:       e8 45 25 fe ff          callq  679f00 <PathNameOpenFile>
         :
         :	        if (fd < 0)
    0.00 :	  6979bb:       85 c0                   test   %eax,%eax
         :	        if (reln->md_fd[forknum])
         :	                return reln->md_fd[forknum];
         :
         :	        path = relpath(reln->smgr_rnode, forknum);
         :
         :	        fd = PathNameOpenFile(path, O_RDWR | PG_BINARY, 0600);
    0.00 :	  6979bd:       41 89 c6                mov    %eax,%r14d
         :
         :	        if (fd < 0)
    0.00 :	  6979c0:       78 3e                   js     697a00 <mdopen+0xc0>
         :	                                        (errcode_for_file_access(),
         :	                                         errmsg("could not open file \"%s\": %m", path)));
         :	                }
         :	        }
         :
         :	        pfree(path);
    0.00 :	  6979c2:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  6979c6:       e8 b5 11 10 00          callq  798b80 <pfree>
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979cb:       48 8b 3d de 6d 4e 00    mov    0x4e6dde(%rip),%rdi        # b7e7b0 <MdCxt>
    0.00 :	  6979d2:       be 10 00 00 00          mov    $0x10,%esi
    0.00 :	  6979d7:       e8 b4 14 10 00          callq  798e90 <MemoryContextAlloc>
         :	                }
         :	        }
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
    0.00 :	  6979dc:       4b 89 44 ec 28          mov    %rax,0x28(%r12,%r13,8)
         :	 *      _fdvec_alloc() -- Make a MdfdVec object.
         :	 */
         :	static MdfdVec *
         :	_fdvec_alloc(void)
         :	{
         :	        return (MdfdVec *) MemoryContextAlloc(MdCxt, sizeof(MdfdVec));
    0.00 :	  6979e1:       48 89 c3                mov    %rax,%rbx
         :
         :	        pfree(path);
         :
         :	        reln->md_fd[forknum] = mdfd = _fdvec_alloc();
         :
         :	        mdfd->mdfd_vfd = fd;
    0.00 :	  6979e4:       44 89 30                mov    %r14d,(%rax)
         :	        mdfd->mdfd_segno = 0;
    0.00 :	  6979e7:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%rax)
         :	        mdfd->mdfd_chain = NULL;
    0.00 :	  6979ee:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  6979f5:       00 
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  6979f6:       e9 74 ff ff ff          jmpq   69796f <mdopen+0x2f>
    0.00 :	  6979fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * During bootstrap, there are cases where a system relation will be
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
    0.00 :	  697a00:       8b 05 36 11 4d 00       mov    0x4d1136(%rip),%eax        # b68b3c <Mode>
    0.00 :	  697a06:       85 c0                   test   %eax,%eax
    0.00 :	  697a08:       74 36                   je     697a40 <mdopen+0x100>
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
    0.00 :	  697a0a:       41 83 ef 01             sub    $0x1,%r15d
    0.00 :	  697a0e:       75 0a                   jne    697a1a <mdopen+0xda>
    0.00 :	  697a10:       e8 ab 22 dd ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  697a15:       83 38 02                cmpl   $0x2,(%rax)
    0.00 :	  697a18:       74 6a                   je     697a84 <mdopen+0x144>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a1a:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  697a1d:       b9 7f e3 8a 00          mov    $0x8ae37f,%ecx
    0.00 :	  697a22:       ba 5b 02 00 00          mov    $0x25b,%edx
    0.00 :	  697a27:       be db 5b 87 00          mov    $0x875bdb,%esi
    0.00 :	  697a2c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  697a31:       e8 8a 30 0e 00          callq  77aac0 <errstart>
    0.00 :	  697a36:       84 c0                   test   %al,%al
    0.00 :	  697a38:       75 26                   jne    697a60 <mdopen+0x120>
    0.00 :	  697a3a:       e8 91 1a dd ff          callq  4694d0 <abort@plt>
    0.00 :	  697a3f:       90                      nop
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a40:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a44:       ba 80 01 00 00          mov    $0x180,%edx
    0.00 :	  697a49:       be c2 00 00 00          mov    $0xc2,%esi
    0.00 :	  697a4e:       e8 ad 24 fe ff          callq  679f00 <PathNameOpenFile>
         :	                if (fd < 0)
    0.00 :	  697a53:       85 c0                   test   %eax,%eax
         :	                 * accessed (by internal backend processes) before the bootstrap
         :	                 * script nominally creates it.  Therefore, accept mdopen() as a
         :	                 * substitute for mdcreate() in bootstrap mode only. (See mdcreate)
         :	                 */
         :	                if (IsBootstrapProcessingMode())
         :	                        fd = PathNameOpenFile(path, O_RDWR | O_CREAT | O_EXCL | PG_BINARY, 0600);
    0.00 :	  697a55:       41 89 c6                mov    %eax,%r14d
         :	                if (fd < 0)
    0.00 :	  697a58:       0f 89 64 ff ff ff       jns    6979c2 <mdopen+0x82>
    0.00 :	  697a5e:       eb aa                   jmp    697a0a <mdopen+0xca>
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
         :	                                return NULL;
         :	                        }
         :	                        ereport(ERROR,
    0.00 :	  697a60:       48 8b 75 d0             mov    -0x30(%rbp),%rsi
    0.00 :	  697a64:       bf 53 31 7b 00          mov    $0x7b3153,%edi
    0.00 :	  697a69:       31 c0                   xor    %eax,%eax
    0.00 :	  697a6b:       e8 30 4e 0e 00          callq  77c8a0 <errmsg>
    0.00 :	  697a70:       89 c3                   mov    %eax,%ebx
    0.00 :	  697a72:       e8 79 50 0e 00          callq  77caf0 <errcode_for_file_access>
    0.00 :	  697a77:       89 de                   mov    %ebx,%esi
    0.00 :	  697a79:       89 c7                   mov    %eax,%edi
    0.00 :	  697a7b:       31 c0                   xor    %eax,%eax
    0.00 :	  697a7d:       e8 5e 2b 0e 00          callq  77a5e0 <errfinish>
    0.00 :	  697a82:       eb b6                   jmp    697a3a <mdopen+0xfa>
         :	                if (fd < 0)
         :	                {
         :	                        if (behavior == EXTENSION_RETURN_NULL &&
         :	                                FILE_POSSIBLY_DELETED(errno))
         :	                        {
         :	                                pfree(path);
    0.00 :	  697a84:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  697a88:       e8 f3 10 10 00          callq  798b80 <pfree>
    0.00 :	  697a8d:       0f 1f 00                nopl   (%rax)
         :	        mdfd->mdfd_segno = 0;
         :	        mdfd->mdfd_chain = NULL;
         :	        Assert(_mdnblocks(reln, forknum, mdfd) <= ((BlockNumber) RELSEG_SIZE));
         :
         :	        return mdfd;
         :	}
    0.00 :	  697a90:       e9 da fe ff ff          jmpq   69796f <mdopen+0x2f>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   66.67 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:627
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:628
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000699410 <smgrread>:
         :	 *              return pages in the format that POSTGRES expects.
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
    0.00 :	  699410:       55                      push   %rbp
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:627
   66.67 :	  699411:       48 63 47 24             movslq 0x24(%rdi),%rax
         :	 *              return pages in the format that POSTGRES expects.
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
    0.00 :	  699415:       48 89 e5                mov    %rsp,%rbp
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
    0.00 :	  699418:       48 c1 e0 07             shl    $0x7,%rax
    0.00 :	  69941c:       4c 8b 98 a0 e4 8a 00    mov    0x8ae4a0(%rax),%r11
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/storage/smgr/smgr.c:628
   33.33 :	  699423:       c9                      leaveq 
         :	 */
         :	void
         :	smgrread(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
         :	                 char *buffer)
         :	{
         :	        (*(smgrsw[reln->smgr_which].smgr_read)) (reln, forknum, blocknum, buffer);
    0.00 :	  699424:       41 ff e3                jmpq   *%r11

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2217
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2217
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2217
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000077d9d0 <DatumGetFloat8>:
         :
         :	#ifdef USE_FLOAT8_BYVAL
         :
         :	float8
         :	DatumGetFloat8(Datum X)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/utils/fmgr/fmgr.c:2217
   33.33 :	  77d9d0:       55                      push   %rbp
    0.00 :	  77d9d1:       48 89 e5                mov    %rsp,%rbp
   33.33 :	  77d9d4:       48 89 7d f8             mov    %rdi,-0x8(%rbp)
   33.33 :	  77d9d8:       f2 0f 10 45 f8          movsd  -0x8(%rbp),%xmm0
         :	                float8          retval;
         :	        }                       myunion;
         :
         :	        myunion.value = GET_8_BYTES(X);
         :	        return myunion.retval;
         :	}
    0.00 :	  77d9dd:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:816
   33.33 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000007846a0 <hash_search>:
         :	void *
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
    0.00 :	  7846a0:       55                      push   %rbp
    0.00 :	  7846a1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  7846a4:       48 89 5d e0             mov    %rbx,-0x20(%rbp)
    0.00 :	  7846a8:       4c 89 65 e8             mov    %r12,-0x18(%rbp)
    0.00 :	  7846ac:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  7846af:       4c 89 6d f0             mov    %r13,-0x10(%rbp)
    0.00 :	  7846b3:       4c 89 75 f8             mov    %r14,-0x8(%rbp)
    0.00 :	  7846b7:       49 89 f5                mov    %rsi,%r13
    0.00 :	  7846ba:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  7846be:       41 89 d6                mov    %edx,%r14d
    0.00 :	  7846c1:       49 89 cc                mov    %rcx,%r12
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846c4:       48 8b 77 48             mov    0x48(%rdi),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   33.33 :	  7846c8:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7846cb:       ff 53 10                callq  *0x10(%rbx)
    0.00 :	  7846ce:       4d 89 e0                mov    %r12,%r8
    0.00 :	  7846d1:       44 89 f1                mov    %r14d,%ecx
    0.00 :	  7846d4:       4c 89 ee                mov    %r13,%rsi
    0.00 :	  7846d7:       48 89 df                mov    %rbx,%rdi
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:816
   33.33 :	  7846da:       4c 8b 64 24 08          mov    0x8(%rsp),%r12
    0.00 :	  7846df:       48 8b 1c 24             mov    (%rsp),%rbx
    0.00 :	  7846e3:       4c 8b 6c 24 10          mov    0x10(%rsp),%r13
    0.00 :	  7846e8:       4c 8b 74 24 18          mov    0x18(%rsp),%r14
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
    0.00 :	  7846ed:       89 c2                   mov    %eax,%edx
         :	                                                                           keyPtr,
         :	                                                                           hashp->hash(keyPtr, hashp->keysize),
         :	                                                                           action,
         :	                                                                           foundPtr);
         :	}
    0.00 :	  7846ef:       c9                      leaveq 
         :	hash_search(HTAB *hashp,
         :	                        const void *keyPtr,
         :	                        HASHACTION action,
         :	                        bool *foundPtr)
         :	{
         :	        return hash_search_with_hash_value(hashp,
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:811
   33.33 :	  7846f0:       e9 5b f9 ff ff          jmpq   784050 <hash_search_with_hash_value>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
----------------------------------------------

   33.33 ??:0
   33.33 ??:0
   33.33 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/igb/igb.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000700 <igb_update_stats>:
    0.00 :	     700:       53                      push   %rbx
    0.00 :	     731:       48 89 fb 48 83          mov    $0x2b8,%edi
    0.00 :	     736:       ec 10 66                xor    %r10d,%r10d
    0.00 :	     739:       83 bf f8                xor    %r9d,%r9d
    0.00 :	     73c:       03 00                   test   %edi,%edi
    0.00 :	     73e:       00 00                   jle    78c <dma_unmap_page+0x75c>
    0.00 :	     740:       48 8b 87                mov    %rbx,%r8
    0.00 :	     743:       a0 04                   xor    %edi,%edi
    0.00 :	     745:       00 00 74                xor    %r10d,%r10d
    0.00 :	     748:       09 83 b8                xor    %r9d,%r9d
    0.00 :	     74b:       88 00 00 00 01          mov    $0xc030,%ecx
    0.00 :	     750:       74 0e 48                mov    %rcx,%rax
    0.00 :	     753:       83 c4 10 5b c3 0f 1f    add    0x570(%rbx),%rax
    0.00 :	     75a:       84 00                   mov    (%rax),%eax
    0.00 :	     75c:       00 00                   test   %eax,%eax
    0.00 :	     75e:       00 00 8b bf b8 02 00    mov    0x2c0(%r8),%rdx
    0.00 :	     765:       00 45                   je     771 <dma_unmap_page+0x741>
    0.00 :	     767:       31 d2                   mov    %eax,%eax
    0.00 :	     769:       45 31 c9 85             add    %rax,0x68(%rdx)
    0.00 :	     76d:       ff 7e 4c 49             add    %rax,0x70(%rsi)
    0.00 :	     771:       89 d8 31 ff             add    0x60(%rdx),%r10
    0.00 :	     775:       45 31 d2 45             add    0x58(%rdx),%r9
    0.00 :	     779:       31 c9 b9                add    $0x1,%edi
    0.00 :	     77c:       30 c0 00 00             add    $0x40,%rcx
    0.00 :	     780:       48 89 c8 48             add    $0x8,%r8
    0.00 :	     784:       03 83 70 05 00 00       cmp    %edi,0x2b8(%rbx)
    0.00 :	     78a:       8b 00                   jg     750 <dma_unmap_page+0x720>
    0.00 :	     78c:       85 c0 49 8b             mov    %r10,0x10(%rsi)
    0.00 :	     790:       90 c0 02                mov    %r9,(%rsi)
    0.00 :	     793:       00 00                   xor    %edi,%edi
    0.00 :	     795:       74 0a 89 c0 48 01 42    mov    0x234(%rbx),%r8d
    0.00 :	     79c:       68 48                   xor    %ecx,%ecx
    0.00 :	     79e:       01 46 70                test   %r8d,%r8d
    0.00 :	     7a1:       4c 03                   jle    7c9 <dma_unmap_page+0x799>
    0.00 :	     7a3:       52 60                   xor    %edi,%edi
    0.00 :	     7a5:       4c 03                   xor    %ecx,%ecx
    0.00 :	     7a7:       4a 58                   xor    %edx,%edx
    0.00 :	     7a9:       83 c7 01 48 83 c1 40    nopl   0x0(%rax)
    0.00 :	     7b0:       49 83 c0 08 39 bb b8    mov    0x238(%rbx,%rdx,8),%rax
    0.00 :	     7b7:       02 
    0.00 :	     7b8:       00 00 7f c4             add    $0x1,%rdx
    0.00 :	     7bc:       4c 89 56 10             add    0x58(%rax),%rdi
    0.00 :	     7c0:       4c 89 0e 31             add    0x50(%rax),%rcx
    0.00 :	     7c4:       ff 44 8b                cmp    %edx,%r8d
    0.00 :	     7c7:       83 34                   jg     7b0 <dma_unmap_page+0x780>
    0.00 :	     7c9:       02 00 00 31             mov    %rdi,0x18(%rsi)
    0.00 :	     7cd:       c9 45 85 c0             mov    %rcx,0x8(%rsi)
    0.00 :	     7d1:       7e 26 31 ff 31 c9 31    mov    0x570(%rbx),%rax
    0.00 :	     7d8:       d2 0f 1f 80 00 00 00    mov    0x9c8(%rbx),%rdx
    0.00 :	     7df:       00 48 8b 84 d3 38       add    $0x4000,%rax
    0.00 :	     7e5:       02 00                   mov    (%rax),%eax
    0.00 :	     7e7:       00 48                   mov    %eax,%eax
    0.00 :	     7e9:       83 c2 01                add    %rdx,%rax
    0.00 :	     7ec:       48 03 78 58 48 03 48    mov    0xa98(%rbx),%rdx
    0.00 :	     7f3:       50 41 39 d0 7f e7 48    mov    %rax,0x9c8(%rbx)
    0.00 :	     7fa:       89 7e 18 48 89 4e 08    mov    0x570(%rbx),%rax
    0.00 :	     801:       48 8b 83 70 05 00       add    $0x4074,%rax
    0.00 :	     807:       00 48                   mov    (%rax),%eax
    0.00 :	     809:       8b 93                   mov    %eax,%eax
    0.00 :	     80b:       c8 09 00                add    %rdx,%rax
    0.00 :	     80e:       00 48 05 00 40 00 00    mov    0xab8(%rbx),%rdx
    0.00 :	     815:       8b 00 89 c0 48 01 d0    mov    %rax,0xa98(%rbx)
    0.00 :	     81c:       48 8b 93 98 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     823:       48 89 83 c8 09 00       add    $0x4088,%rax
    0.00 :	     829:       00 48                   mov    (%rax),%eax
 ??:0
   33.33 :	     82b:       8b 83                   mov    %eax,%eax
    0.00 :	     82d:       70 05 00                add    %rdx,%rax
    0.00 :	     830:       00 48 05 74 40 00 00    mov    %rax,0xab8(%rbx)
    0.00 :	     837:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     83e:       48 8b 93 b8 0a 00       add    $0x408c,%rax
    0.00 :	     844:       00 48                   mov    (%rax),%eax
    0.00 :	     846:       89 83 98 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     84d:       8b 83 70 05 00 00 48    mov    0xaa0(%rbx),%rdx
    0.00 :	     854:       05 88 40 00 00 8b       add    $0x4078,%rax
    0.00 :	     85a:       00 89                   mov    (%rax),%eax
    0.00 :	     85c:       c0 48                   mov    %eax,%eax
    0.00 :	     85e:       01 d0 48                add    %rdx,%rax
    0.00 :	     861:       89 83 b8 0a 00 00 48    mov    0xaa8(%rbx),%rdx
    0.00 :	     868:       8b 83 70 05 00 00 48    mov    %rax,0xaa0(%rbx)
    0.00 :	     86f:       05 8c 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     876:       48 8b 83 70 05 00       add    $0x407c,%rax
    0.00 :	     87c:       00 48                   mov    (%rax),%eax
    0.00 :	     87e:       8b 93                   mov    %eax,%eax
    0.00 :	     880:       a0 0a 00                add    %rdx,%rax
    0.00 :	     883:       00 48 05 78 40 00 00    mov    0xae0(%rbx),%rdx
    0.00 :	     88a:       8b 00 89 c0 48 01 d0    mov    %rax,0xaa8(%rbx)
    0.00 :	     891:       48 8b 93 a8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     898:       48 89 83 a0 0a 00       add    $0x40ac,%rax
    0.00 :	     89e:       00 48                   mov    (%rax),%eax
    0.00 :	     8a0:       8b 83                   mov    %eax,%eax
    0.00 :	     8a2:       70 05 00                add    %rdx,%rax
    0.00 :	     8a5:       00 48 05 7c 40 00 00    mov    0xa68(%rbx),%rdx
    0.00 :	     8ac:       8b 00 89 c0 48 01 d0    mov    %rax,0xae0(%rbx)
    0.00 :	     8b3:       48 8b 93 e0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8ba:       48 89 83 a8 0a 00       add    $0x405c,%rax
    0.00 :	     8c0:       00 48                   mov    (%rax),%eax
    0.00 :	     8c2:       8b 83                   mov    %eax,%eax
    0.00 :	     8c4:       70 05 00                add    %rdx,%rax
    0.00 :	     8c7:       00 48 05 ac 40 00 00    mov    0xa70(%rbx),%rdx
    0.00 :	     8ce:       8b 00 89 c0 48 01 d0    mov    %rax,0xa68(%rbx)
    0.00 :	     8d5:       48 8b 93 68 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8dc:       48 89 83 e0 0a 00       add    $0x4060,%rax
    0.00 :	     8e2:       00 48                   mov    (%rax),%eax
    0.00 :	     8e4:       8b 83                   mov    %eax,%eax
    0.00 :	     8e6:       70 05 00                add    %rdx,%rax
    0.00 :	     8e9:       00 48 05 5c 40 00 00    mov    0xa78(%rbx),%rdx
    0.00 :	     8f0:       8b 00 89 c0 48 01 d0    mov    %rax,0xa70(%rbx)
    0.00 :	     8f7:       48 8b 93 70 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     8fe:       48 89 83 68 0a 00       add    $0x4064,%rax
    0.00 :	     904:       00 48                   mov    (%rax),%eax
    0.00 :	     906:       8b 83                   mov    %eax,%eax
    0.00 :	     908:       70 05 00                add    %rdx,%rax
    0.00 :	     90b:       00 48 05 60 40 00 00    mov    0xa80(%rbx),%rdx
    0.00 :	     912:       8b 00 89 c0 48 01 d0    mov    %rax,0xa78(%rbx)
    0.00 :	     919:       48 8b 93 78 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     920:       48 89 83 70 0a 00       add    $0x4068,%rax
    0.00 :	     926:       00 48                   mov    (%rax),%eax
    0.00 :	     928:       8b 83                   mov    %eax,%eax
    0.00 :	     92a:       70 05 00                add    %rdx,%rax
    0.00 :	     92d:       00 48 05 64 40 00 00    mov    0xa88(%rbx),%rdx
    0.00 :	     934:       8b 00 89 c0 48 01 d0    mov    %rax,0xa80(%rbx)
    0.00 :	     93b:       48 8b 93 80 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     942:       48 89 83 78 0a 00       add    $0x406c,%rax
    0.00 :	     948:       00 48                   mov    (%rax),%eax
   33.33 :	     94a:       8b 83                   mov    %eax,%eax
    0.00 :	     94c:       70 05 00                add    %rdx,%rax
    0.00 :	     94f:       00 48 05 68 40 00 00    mov    0xa90(%rbx),%rdx
    0.00 :	     956:       8b 00 89 c0 48 01 d0    mov    %rax,0xa88(%rbx)
    0.00 :	     95d:       48 8b 93 88 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     964:       48 89 83 80 0a 00       add    $0x4070,%rax
    0.00 :	     96a:       00 48                   mov    (%rax),%eax
    0.00 :	     96c:       8b 83                   mov    %eax,%eax
    0.00 :	     96e:       70 05 00                add    %rdx,%rax
    0.00 :	     971:       00 48 05 6c 40 00 00    mov    0x9d8(%rbx),%rdx
    0.00 :	     978:       8b 00 89 c0 48 01 d0    mov    %rax,0xa90(%rbx)
    0.00 :	     97f:       48 8b 93 90 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     986:       48 89 83 88 0a 00       add    $0x4008,%rax
    0.00 :	     98c:       00 48                   mov    (%rax),%eax
    0.00 :	     98e:       8b 83                   mov    %eax,%eax
    0.00 :	     990:       70 05 00                add    %rdx,%rax
    0.00 :	     993:       00 48 05 70 40 00 00    mov    0xa28(%rbx),%rdx
    0.00 :	     99a:       8b 00 89 c0 48 01 d0    mov    %rax,0x9d8(%rbx)
    0.00 :	     9a1:       48 8b 93 d8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     9a8:       48 89 83 90 0a 00       add    $0x4038,%rax
    0.00 :	     9ae:       00 48                   mov    (%rax),%eax
    0.00 :	     9b0:       8b 83                   mov    %eax,%eax
    0.00 :	     9b2:       70 05 00                add    %rdx,%rax
    0.00 :	     9b5:       00 48 05 08 40 00 00    mov    %rax,0xa28(%rbx)
    0.00 :	     9bc:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     9c3:       48 8b 93 28 0a 00       add    $0x4010,%rax
    0.00 :	     9c9:       00 48                   mov    (%rax),%eax
    0.00 :	     9cb:       89 83                   mov    %eax,%eax
    0.00 :	     9cd:       d8 09 00 00 48 8b 83    add    %rax,0x9e8(%rbx)
    0.00 :	     9d4:       70 05 00 00             add    %rax,0x70(%rsi)
    0.00 :	     9d8:       48 05 38 40 00 00 8b    mov    0x570(%rbx),%rax
    0.00 :	     9df:       00 89 c0 48 01 d0 48    mov    0x9f0(%rbx),%rdx
    0.00 :	     9e6:       89 83 28 0a 00 00       add    $0x4014,%rax
    0.00 :	     9ec:       48 8b                   mov    (%rax),%eax
    0.00 :	     9ee:       83 70                   mov    %eax,%eax
    0.00 :	     9f0:       05 00 00                add    %rdx,%rax
    0.00 :	     9f3:       48 05 10 40 00 00 8b    mov    0x9f8(%rbx),%rdx
    0.00 :	     9fa:       00 89 c0 48 01 83 e8    mov    %rax,0x9f0(%rbx)
    0.00 :	     a01:       09 00 00 48 01 46 70    mov    0x570(%rbx),%rax
    0.00 :	     a08:       48 8b 83 70 05 00       add    $0x4018,%rax
    0.00 :	     a0e:       00 48                   mov    (%rax),%eax
    0.00 :	     a10:       8b 93                   mov    %eax,%eax
    0.00 :	     a12:       f0 09 00                add    %rdx,%rax
    0.00 :	     a15:       00 48 05 14 40 00 00    mov    0xa00(%rbx),%rdx
    0.00 :	     a1c:       8b 00 89 c0 48 01 d0    mov    %rax,0x9f8(%rbx)
    0.00 :	     a23:       48 8b 93 f8 09 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a2a:       48 89 83 f0 09 00       add    $0x401c,%rax
    0.00 :	     a30:       00 48                   mov    (%rax),%eax
    0.00 :	     a32:       8b 83                   mov    %eax,%eax
    0.00 :	     a34:       70 05 00                add    %rdx,%rax
    0.00 :	     a37:       00 48 05 18 40 00 00    mov    0xa08(%rbx),%rdx
    0.00 :	     a3e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa00(%rbx)
    0.00 :	     a45:       48 8b 93 00 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a4c:       48 89 83 f8 09 00       add    $0x4020,%rax
    0.00 :	     a52:       00 48                   mov    (%rax),%eax
    0.00 :	     a54:       8b 83                   mov    %eax,%eax
    0.00 :	     a56:       70 05 00                add    %rdx,%rax
    0.00 :	     a59:       00 48 05 1c 40 00 00    mov    0xa18(%rbx),%rdx
    0.00 :	     a60:       8b 00 89 c0 48 01 d0    mov    %rax,0xa08(%rbx)
    0.00 :	     a67:       48 8b 93 08 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a6e:       48 89 83 00 0a 00       add    $0x4030,%rax
    0.00 :	     a74:       00 48                   mov    (%rax),%eax
    0.00 :	     a76:       8b 83                   mov    %eax,%eax
    0.00 :	     a78:       70 05 00                add    %rdx,%rax
    0.00 :	     a7b:       00 48 05 20 40 00 00    mov    0xa38(%rbx),%rdx
    0.00 :	     a82:       8b 00 89 c0 48 01 d0    mov    %rax,0xa18(%rbx)
    0.00 :	     a89:       48 8b 93 18 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     a90:       48 89 83 08 0a 00       add    $0x4040,%rax
    0.00 :	     a96:       00 48                   mov    (%rax),%eax
    0.00 :	     a98:       8b 83                   mov    %eax,%eax
    0.00 :	     a9a:       70 05 00                add    %rdx,%rax
    0.00 :	     a9d:       00 48 05 30 40 00 00    mov    0xa40(%rbx),%rdx
    0.00 :	     aa4:       8b 00 89 c0 48 01 d0    mov    %rax,0xa38(%rbx)
    0.00 :	     aab:       48 8b 93 38 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ab2:       48 89 83 18 0a 00       add    $0x4048,%rax
    0.00 :	     ab8:       00 48                   mov    (%rax),%eax
    0.00 :	     aba:       8b 83                   mov    %eax,%eax
    0.00 :	     abc:       70 05 00                add    %rdx,%rax
    0.00 :	     abf:       00 48 05 40 40 00 00    mov    0xa48(%rbx),%rdx
    0.00 :	     ac6:       8b 00 89 c0 48 01 d0    mov    %rax,0xa40(%rbx)
    0.00 :	     acd:       48 8b 93 40 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ad4:       48 89 83 38 0a 00       add    $0x404c,%rax
    0.00 :	     ada:       00 48                   mov    (%rax),%eax
    0.00 :	     adc:       8b 83                   mov    %eax,%eax
    0.00 :	     ade:       70 05 00                add    %rdx,%rax
    0.00 :	     ae1:       00 48 05 48 40 00 00    mov    0xa50(%rbx),%rdx
    0.00 :	     ae8:       8b 00 89 c0 48 01 d0    mov    %rax,0xa48(%rbx)
    0.00 :	     aef:       48 8b 93 48 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     af6:       48 89 83 40 0a 00       add    $0x4050,%rax
    0.00 :	     afc:       00 48                   mov    (%rax),%eax
    0.00 :	     afe:       8b 83                   mov    %eax,%eax
    0.00 :	     b00:       70 05 00                add    %rdx,%rax
    0.00 :	     b03:       00 48 05 4c 40 00 00    mov    0xa58(%rbx),%rdx
    0.00 :	     b0a:       8b 00 89 c0 48 01 d0    mov    %rax,0xa50(%rbx)
    0.00 :	     b11:       48 8b 93 50 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b18:       48 89 83 48 0a 00       add    $0x4054,%rax
    0.00 :	     b1e:       00 48                   mov    (%rax),%eax
    0.00 :	     b20:       8b 83                   mov    %eax,%eax
    0.00 :	     b22:       70 05 00                add    %rdx,%rax
    0.00 :	     b25:       00 48 05 50 40 00 00    mov    0xa60(%rbx),%rdx
    0.00 :	     b2c:       8b 00 89 c0 48 01 d0    mov    %rax,0xa58(%rbx)
    0.00 :	     b33:       48 8b 93 58 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b3a:       48 89 83 50 0a 00       add    $0x4058,%rax
    0.00 :	     b40:       00 48                   mov    (%rax),%eax
    0.00 :	     b42:       8b 83                   mov    %eax,%eax
    0.00 :	     b44:       70 05 00                add    %rdx,%rax
    0.00 :	     b47:       00 48 05 54 40 00 00    mov    0xab0(%rbx),%rdx
    0.00 :	     b4e:       8b 00 89 c0 48 01 d0    mov    %rax,0xa60(%rbx)
    0.00 :	     b55:       48 8b 93 60 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b5c:       48 89 83 58 0a 00       add    $0x4080,%rax
    0.00 :	     b62:       00 48                   mov    (%rax),%eax
    0.00 :	     b64:       8b 83                   mov    %eax,%eax
    0.00 :	     b66:       70 05 00                add    %rdx,%rax
    0.00 :	     b69:       00 48 05 58 40 00 00    mov    0xac0(%rbx),%rdx
    0.00 :	     b70:       8b 00 89 c0 48 01 d0    mov    %rax,0xab0(%rbx)
    0.00 :	     b77:       48 8b 93 b0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     b7e:       48 89 83 60 0a 00       add    $0x4090,%rax
    0.00 :	     b84:       00 48                   mov    (%rax),%eax
    0.00 :	     b86:       8b 83                   mov    %eax,%eax
    0.00 :	     b88:       70 05 00                add    %rdx,%rax
    0.00 :	     b8b:       00 48 05 80 40 00 00    mov    %rax,0xac0(%rbx)
    0.00 :	     b92:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     b99:       48 8b 93 c0 0a 00       add    $0x4094,%rax
    0.00 :	     b9f:       00 48                   mov    (%rax),%eax
    0.00 :	     ba1:       89 83 b0 0a 00 00 48    mov    0x570(%rbx),%rax
    0.00 :	     ba8:       8b 83 70 05 00 00 48    mov    0xac8(%rbx),%rdx
    0.00 :	     baf:       05 90 40 00 00 8b       add    $0x40a0,%rax
    0.00 :	     bb5:       00 89                   mov    (%rax),%eax
    0.00 :	     bb7:       c0 48                   mov    %eax,%eax
    0.00 :	     bb9:       01 d0 48                add    %rdx,%rax
    0.00 :	     bbc:       89 83 c0 0a 00 00 48    mov    0xad0(%rbx),%rdx
    0.00 :	     bc3:       8b 83 70 05 00 00 48    mov    %rax,0xac8(%rbx)
    0.00 :	     bca:       05 94 40 00 00 8b 00    mov    0x570(%rbx),%rax
    0.00 :	     bd1:       48 8b 83 70 05 00       add    $0x40a4,%rax
    0.00 :	     bd7:       00 48                   mov    (%rax),%eax
    0.00 :	     bd9:       8b 93                   mov    %eax,%eax
    0.00 :	     bdb:       c8 0a 00                add    %rdx,%rax
    0.00 :	     bde:       00 48 05 a0 40 00 00    mov    0xad8(%rbx),%rdx
    0.00 :	     be5:       8b 00 89 c0 48 01 d0    mov    %rax,0xad0(%rbx)
    0.00 :	     bec:       48 8b 93 d0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     bf3:       48 89 83 c8 0a 00       add    $0x40a8,%rax
    0.00 :	     bf9:       00 48                   mov    (%rax),%eax
    0.00 :	     bfb:       8b 83                   mov    %eax,%eax
    0.00 :	     bfd:       70 05 00                add    %rdx,%rax
    0.00 :	     c00:       00 48 05 a4 40 00 00    mov    0xae8(%rbx),%rdx
    0.00 :	     c07:       8b 00 89 c0 48 01 d0    mov    %rax,0xad8(%rbx)
    0.00 :	     c0e:       48 8b 93 d8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c15:       48 89 83 d0 0a 00       add    $0x40b0,%rax
    0.00 :	     c1b:       00 48                   mov    (%rax),%eax
   33.33 :	     c1d:       8b 83                   mov    %eax,%eax
    0.00 :	     c1f:       70 05 00                add    %rdx,%rax
    0.00 :	     c22:       00 48 05 a8 40 00 00    mov    0xb08(%rbx),%rdx
    0.00 :	     c29:       8b 00 89 c0 48 01 d0    mov    %rax,0xae8(%rbx)
    0.00 :	     c30:       48 8b 93 e8 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c37:       48 89 83 d8 0a 00       add    $0x40c4,%rax
    0.00 :	     c3d:       00 48                   mov    (%rax),%eax
    0.00 :	     c3f:       8b 83                   mov    %eax,%eax
    0.00 :	     c41:       70 05 00                add    %rdx,%rax
    0.00 :	     c44:       00 48 05 b0 40 00 00    mov    0xb10(%rbx),%rdx
    0.00 :	     c4b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb08(%rbx)
    0.00 :	     c52:       48 8b 93 08 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c59:       48 89 83 e8 0a 00       add    $0x40cc,%rax
    0.00 :	     c5f:       00 48                   mov    (%rax),%eax
    0.00 :	     c61:       8b 83                   mov    %eax,%eax
    0.00 :	     c63:       70 05 00                add    %rdx,%rax
    0.00 :	     c66:       00 48 05 c4 40 00 00    mov    0xb18(%rbx),%rdx
    0.00 :	     c6d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb10(%rbx)
    0.00 :	     c74:       48 8b 93 10 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c7b:       48 89 83 08 0b 00       add    $0x40d0,%rax
    0.00 :	     c81:       00 48                   mov    (%rax),%eax
    0.00 :	     c83:       8b 83                   mov    %eax,%eax
    0.00 :	     c85:       70 05 00                add    %rdx,%rax
    0.00 :	     c88:       00 48 05 cc 40 00 00    mov    0xb28(%rbx),%rdx
    0.00 :	     c8f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb18(%rbx)
    0.00 :	     c96:       48 8b 93 18 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     c9d:       48 89 83 10 0b 00       add    $0x40d8,%rax
    0.00 :	     ca3:       00 48                   mov    (%rax),%eax
    0.00 :	     ca5:       8b 83                   mov    %eax,%eax
    0.00 :	     ca7:       70 05 00                add    %rdx,%rax
    0.00 :	     caa:       00 48 05 d0 40 00 00    mov    0xb30(%rbx),%rdx
    0.00 :	     cb1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb28(%rbx)
    0.00 :	     cb8:       48 8b 93 28 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     cbf:       48 89 83 18 0b 00       add    $0x40dc,%rax
    0.00 :	     cc5:       00 48                   mov    (%rax),%eax
    0.00 :	     cc7:       8b 83                   mov    %eax,%eax
    0.00 :	     cc9:       70 05 00                add    %rdx,%rax
    0.00 :	     ccc:       00 48 05 d8 40 00 00    mov    0xb38(%rbx),%rdx
    0.00 :	     cd3:       8b 00 89 c0 48 01 d0    mov    %rax,0xb30(%rbx)
    0.00 :	     cda:       48 8b 93 30 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ce1:       48 89 83 28 0b 00       add    $0x40e0,%rax
    0.00 :	     ce7:       00 48                   mov    (%rax),%eax
    0.00 :	     ce9:       8b 83                   mov    %eax,%eax
    0.00 :	     ceb:       70 05 00                add    %rdx,%rax
    0.00 :	     cee:       00 48 05 dc 40 00 00    mov    0xb40(%rbx),%rdx
    0.00 :	     cf5:       8b 00 89 c0 48 01 d0    mov    %rax,0xb38(%rbx)
    0.00 :	     cfc:       48 8b 93 38 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d03:       48 89 83 30 0b 00       add    $0x40e4,%rax
    0.00 :	     d09:       00 48                   mov    (%rax),%eax
    0.00 :	     d0b:       8b 83                   mov    %eax,%eax
    0.00 :	     d0d:       70 05 00                add    %rdx,%rax
    0.00 :	     d10:       00 48 05 e0 40 00 00    mov    0xb48(%rbx),%rdx
    0.00 :	     d17:       8b 00 89 c0 48 01 d0    mov    %rax,0xb40(%rbx)
    0.00 :	     d1e:       48 8b 93 40 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d25:       48 89 83 38 0b 00       add    $0x40e8,%rax
    0.00 :	     d2b:       00 48                   mov    (%rax),%eax
    0.00 :	     d2d:       8b 83                   mov    %eax,%eax
    0.00 :	     d2f:       70 05 00                add    %rdx,%rax
    0.00 :	     d32:       00 48 05 e4 40 00 00    mov    0xb50(%rbx),%rdx
    0.00 :	     d39:       8b 00 89 c0 48 01 d0    mov    %rax,0xb48(%rbx)
    0.00 :	     d40:       48 8b 93 48 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d47:       48 89 83 40 0b 00       add    $0x40ec,%rax
    0.00 :	     d4d:       00 48                   mov    (%rax),%eax
    0.00 :	     d4f:       8b 83                   mov    %eax,%eax
    0.00 :	     d51:       70 05 00                add    %rdx,%rax
    0.00 :	     d54:       00 48 05 e8 40 00 00    mov    0xb58(%rbx),%rdx
    0.00 :	     d5b:       8b 00 89 c0 48 01 d0    mov    %rax,0xb50(%rbx)
    0.00 :	     d62:       48 8b 93 50 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d69:       48 89 83 48 0b 00       add    $0x40f0,%rax
    0.00 :	     d6f:       00 48                   mov    (%rax),%eax
    0.00 :	     d71:       8b 83                   mov    %eax,%eax
    0.00 :	     d73:       70 05 00                add    %rdx,%rax
    0.00 :	     d76:       00 48 05 ec 40 00 00    mov    0xb60(%rbx),%rdx
    0.00 :	     d7d:       8b 00 89 c0 48 01 d0    mov    %rax,0xb58(%rbx)
    0.00 :	     d84:       48 8b 93 58 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     d8b:       48 89 83 50 0b 00       add    $0x40f4,%rax
    0.00 :	     d91:       00 48                   mov    (%rax),%eax
    0.00 :	     d93:       8b 83                   mov    %eax,%eax
    0.00 :	     d95:       70 05 00                add    %rdx,%rax
    0.00 :	     d98:       00 48 05 f0 40 00 00    mov    0xb20(%rbx),%rdx
    0.00 :	     d9f:       8b 00 89 c0 48 01 d0    mov    %rax,0xb60(%rbx)
    0.00 :	     da6:       48 8b 93 60 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dad:       48 89 83 58 0b 00       add    $0x40d4,%rax
    0.00 :	     db3:       00 48                   mov    (%rax),%eax
    0.00 :	     db5:       8b 83                   mov    %eax,%eax
    0.00 :	     db7:       70 05 00                add    %rdx,%rax
    0.00 :	     dba:       00 48 05 f4 40 00 00    mov    0xa10(%rbx),%rdx
    0.00 :	     dc1:       8b 00 89 c0 48 01 d0    mov    %rax,0xb20(%rbx)
    0.00 :	     dc8:       48 8b 93 20 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     dcf:       48 89 83 60 0b 00       add    $0x4028,%rax
    0.00 :	     dd5:       00 48                   mov    (%rax),%eax
    0.00 :	     dd7:       8b 83                   mov    %eax,%eax
    0.00 :	     dd9:       70 05 00                add    %rdx,%rax
    0.00 :	     ddc:       00 48 05 d4 40 00 00    mov    0x9d0(%rbx),%rdx
    0.00 :	     de3:       8b 00 89 c0 48 01 d0    mov    %rax,0xa10(%rbx)
    0.00 :	     dea:       48 8b 93 10 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     df1:       48 89 83 20 0b 00       add    $0x4004,%rax
    0.00 :	     df7:       00 48                   mov    (%rax),%eax
    0.00 :	     df9:       8b 83                   mov    %eax,%eax
    0.00 :	     dfb:       70 05 00                add    %rdx,%rax
    0.00 :	     dfe:       00 48 05 28 40 00 00    mov    %rax,0x9d0(%rbx)
    0.00 :	     e05:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	     e0c:       48 8b 93 d0             add    $0x18,%rax
    0.00 :	     e10:       09 00                   mov    (%rax),%eax
    0.00 :	     e12:       00 48 89 83 10          test   $0xc00000,%eax
    0.00 :	     e17:       0a 00                   jne    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e19:       00 48 8b 83 70 05 00    mov    0x570(%rbx),%rax
    0.00 :	     e20:       00 48 05 04 40 00 00    mov    0x9e0(%rbx),%rdx
    0.00 :	     e27:       8b 00 89 c0 48 01       add    $0x400c,%rax
    0.00 :	     e2d:       d0 48                   mov    (%rax),%eax
    0.00 :	     e2f:       89 83                   mov    %eax,%eax
    0.00 :	     e31:       d0 09 00                add    %rdx,%rax
    0.00 :	     e34:       00 48 8b 83 70 05 00    mov    %rax,0x9e0(%rbx)
    0.00 :	     e3b:       00 48 83 c0 18 8b       mov    0x5e4(%rbx),%eax
    0.00 :	     e41:       00 a9 00                sub    $0x5,%eax
    0.00 :	     e44:       00 c0 00                cmp    $0x1,%eax
    0.00 :	     e47:       75 53                   jbe    e6c <dma_unmap_page+0xe3c>
    0.00 :	     e49:       48 8b 83 70 05 00 00    mov    0x570(%rbx),%rdx
    0.00 :	     e50:       48 8b 93 e0 09 00 00    mov    0xa20(%rbx),%rax
    0.00 :	     e57:       48 05 0c 40 00 00 8b    add    $0x4034,%rdx
    0.00 :	     e5e:       00 89                   mov    (%rdx),%edx
    0.00 :	     e60:       c0 48                   mov    %edx,%edx
    0.00 :	     e62:       01 d0 48                add    %rax,%rdx
    0.00 :	     e65:       89 83 e0 09 00 00 8b    mov    %rdx,0xa20(%rbx)
    0.00 :	     e6c:       83 e4 05 00 00 83 e8    mov    0x570(%rbx),%rax
    0.00 :	     e73:       05 83 f8 01 76 23 48    mov    0xb68(%rbx),%rdx
    0.00 :	     e7a:       8b 93 70 05 00 00       add    $0x40f8,%rax
    0.00 :	     e80:       48 8b                   mov    (%rax),%eax
    0.00 :	     e82:       83 20                   mov    %eax,%eax
    0.00 :	     e84:       0a 00 00                add    %rdx,%rax
    0.00 :	     e87:       48 81 c2 34 40 00 00    mov    0xb70(%rbx),%rdx
    0.00 :	     e8e:       8b 12 89 d2 48 01 c2    mov    %rax,0xb68(%rbx)
    0.00 :	     e95:       48 89 93 20 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	     e9c:       48 8b 83 70 05 00       add    $0x40fc,%rax
    0.00 :	     ea2:       00 48                   mov    (%rax),%eax
    0.00 :	     ea4:       8b 93                   mov    %eax,%eax
    0.00 :	     ea6:       68 0b 00                add    %rdx,%rax
    0.00 :	     ea9:       00 48 05 f8 40 00 00    mov    0xb78(%rbx),%rdx
    0.00 :	     eb0:       8b 00 89 c0 48 01 d0    mov    %rax,0xb70(%rbx)
    0.00 :	     eb7:       48 8b 93 70 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ebe:       48 89 83 68 0b 00       add    $0x4100,%rax
    0.00 :	     ec4:       00 48                   mov    (%rax),%eax
    0.00 :	     ec6:       8b 83                   mov    %eax,%eax
    0.00 :	     ec8:       70 05 00                add    %rdx,%rax
    0.00 :	     ecb:       00 48 05 fc 40 00 00    mov    0xbb8(%rbx),%rdx
    0.00 :	     ed2:       8b 00 89 c0 48 01 d0    mov    %rax,0xb78(%rbx)
    0.00 :	     ed9:       48 8b 93 78 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     ee0:       48 89 83 70 0b 00       add    $0x4124,%rax
    0.00 :	     ee6:       00 48                   mov    (%rax),%eax
    0.00 :	     ee8:       8b 83                   mov    %eax,%eax
    0.00 :	     eea:       70 05 00                add    %rdx,%rax
    0.00 :	     eed:       00 48 05 00 41 00 00    mov    0xb80(%rbx),%rdx
    0.00 :	     ef4:       8b 00 89 c0 48 01 d0    mov    %rax,0xbb8(%rbx)
    0.00 :	     efb:       48 8b 93 b8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f02:       48 89 83 78 0b 00       add    $0x4104,%rax
    0.00 :	     f08:       00 48                   mov    (%rax),%eax
    0.00 :	     f0a:       8b 83                   mov    %eax,%eax
    0.00 :	     f0c:       70 05 00                add    %rdx,%rax
    0.00 :	     f0f:       00 48 05 24 41 00 00    mov    0xb88(%rbx),%rdx
    0.00 :	     f16:       8b 00 89 c0 48 01 d0    mov    %rax,0xb80(%rbx)
    0.00 :	     f1d:       48 8b 93 80 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f24:       48 89 83 b8 0b 00       add    $0x4108,%rax
    0.00 :	     f2a:       00 48                   mov    (%rax),%eax
    0.00 :	     f2c:       8b 83                   mov    %eax,%eax
    0.00 :	     f2e:       70 05 00                add    %rdx,%rax
    0.00 :	     f31:       00 48 05 04 41 00 00    mov    0xb90(%rbx),%rdx
    0.00 :	     f38:       8b 00 89 c0 48 01 d0    mov    %rax,0xb88(%rbx)
    0.00 :	     f3f:       48 8b 93 88 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f46:       48 89 83 80 0b 00       add    $0x410c,%rax
    0.00 :	     f4c:       00 48                   mov    (%rax),%eax
    0.00 :	     f4e:       8b 83                   mov    %eax,%eax
    0.00 :	     f50:       70 05 00                add    %rdx,%rax
    0.00 :	     f53:       00 48 05 08 41 00 00    mov    0xb98(%rbx),%rdx
    0.00 :	     f5a:       8b 00 89 c0 48 01 d0    mov    %rax,0xb90(%rbx)
    0.00 :	     f61:       48 8b 93 90 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f68:       48 89 83 88 0b 00       add    $0x4110,%rax
    0.00 :	     f6e:       00 48                   mov    (%rax),%eax
    0.00 :	     f70:       8b 83                   mov    %eax,%eax
    0.00 :	     f72:       70 05 00                add    %rdx,%rax
    0.00 :	     f75:       00 48 05 0c 41 00 00    mov    0xba0(%rbx),%rdx
    0.00 :	     f7c:       8b 00 89 c0 48 01 d0    mov    %rax,0xb98(%rbx)
    0.00 :	     f83:       48 8b 93 98 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     f8a:       48 89 83 90 0b 00       add    $0x4118,%rax
    0.00 :	     f90:       00 48                   mov    (%rax),%eax
    0.00 :	     f92:       8b 83                   mov    %eax,%eax
    0.00 :	     f94:       70 05 00                add    %rdx,%rax
    0.00 :	     f97:       00 48 05 10 41 00 00    mov    0xba8(%rbx),%rdx
    0.00 :	     f9e:       8b 00 89 c0 48 01 d0    mov    %rax,0xba0(%rbx)
    0.00 :	     fa5:       48 8b 93 a0 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fac:       48 89 83 98 0b 00       add    $0x411c,%rax
    0.00 :	     fb2:       00 48                   mov    (%rax),%eax
    0.00 :	     fb4:       8b 83                   mov    %eax,%eax
    0.00 :	     fb6:       70 05 00                add    %rdx,%rax
    0.00 :	     fb9:       00 48 05 18 41 00 00    mov    0xbb0(%rbx),%rdx
    0.00 :	     fc0:       8b 00 89 c0 48 01 d0    mov    %rax,0xba8(%rbx)
    0.00 :	     fc7:       48 8b 93 a8 0b 00 00    mov    0x570(%rbx),%rax
    0.00 :	     fce:       48 89 83 a0 0b 00       add    $0x4120,%rax
    0.00 :	     fd4:       00 48                   mov    (%rax),%eax
    0.00 :	     fd6:       8b 83                   mov    %eax,%eax
    0.00 :	     fd8:       70 05 00                add    %rdx,%rax
    0.00 :	     fdb:       00 48 05 1c 41 00 00    mov    %rax,0xbb0(%rbx)
    0.00 :	     fe2:       8b 00 89 c0 48 01 d0    mov    0xaa8(%rbx),%rax
    0.00 :	     fe9:       48 8b 93 b0             mov    %rax,0x40(%rsi)
    0.00 :	     fed:       0b 00 00 48 89 83 a8    mov    0xa10(%rbx),%rax
    0.00 :	     ff4:       0b 00 00 48             mov    %rax,0x48(%rsi)
    0.00 :	     ff8:       8b 83 70 05 00 00 48    mov    0x9c8(%rbx),%rax
    0.00 :	     fff:       05 20 41 00 00 8b 00    add    0x9e0(%rbx),%rax
    0.00 :	    1006:       89 c0 48 01 d0 48 89    add    0x9d0(%rbx),%rax
    0.00 :	    100d:       83 b0 0b 00 00 48 8b    add    0xad0(%rbx),%rax
    0.00 :	    1014:       83 a8 0a 00 00 48 89    add    0xae0(%rbx),%rax
    0.00 :	    101b:       46 40 48 8b 83 10 0a    add    0xa30(%rbx),%rax
    0.00 :	    1022:       00 00 48 89             mov    %rax,0x20(%rsi)
    0.00 :	    1026:       46 48 48 8b 83 c8 09    mov    0xae0(%rbx),%rax
    0.00 :	    102d:       00 00 48 03 83 e0 09    add    0xad0(%rbx),%rax
    0.00 :	    1034:       00 00 48 03             mov    %rax,0x50(%rsi)
    0.00 :	    1038:       83 d0 09 00 00 48 03    mov    0x9c8(%rbx),%rax
    0.00 :	    103f:       83 d0 0a 00             mov    %rax,0x60(%rsi)
    0.00 :	    1043:       00 48 03 83 e0 0a 00    mov    0x9d0(%rbx),%rax
    0.00 :	    104a:       00 48 03 83             mov    %rax,0x68(%rsi)
    0.00 :	    104e:       30 0a 00 00 48 89 46    mov    0x9e8(%rbx),%rax
    0.00 :	    1055:       20 48 8b 83             mov    %rax,0x78(%rsi)
    0.00 :	    1059:       e0 0a 00 00 48 03 83    mov    0xa08(%rbx),%rax
    0.00 :	    1060:       d0 0a 00 00 48 89 46    add    0x9f8(%rbx),%rax
    0.00 :	    1067:       50 48 8b 83             mov    %rax,0x28(%rsi)
    0.00 :	    106b:       c8 09 00 00 48 89 46    mov    0x9f8(%rbx),%rax
    0.00 :	    1072:       60 48 8b 83 d0 09 00    mov    %rax,0x80(%rsi)
    0.00 :	    1079:       00 48 89 46 68 48 8b    mov    0xa08(%rbx),%rax
    0.00 :	    1080:       83 e8 09 00 00 48 89    mov    %rax,0xa0(%rsi)
    0.00 :	    1087:       46 78 48 8b 83 08 0a    mov    0xa20(%rbx),%rax
    0.00 :	    108e:       00 00 48 03 83 f8 09    mov    %rax,0x88(%rsi)
    0.00 :	    1095:       00 00 48 89 46 28 48    cmpl   $0x1,0x8bc(%rbx)
    0.00 :	    109c:       8b 83 f8 09 00 00       je     11b0 <dma_unmap_page+0x1180>
    0.00 :	    10a2:       48 89 86 80 00 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10a9:       48 8b 83 08 0a 00 00    mov    0xb00(%rbx),%rdx
    0.00 :	    10b0:       48 89 86 a0 00 00       add    $0x40bc,%rax
    0.00 :	    10b6:       00 48                   mov    (%rax),%eax
    0.00 :	    10b8:       8b 83                   mov    %eax,%eax
    0.00 :	    10ba:       20 0a 00                add    %rdx,%rax
    0.00 :	    10bd:       00 48 89 86 88 00 00    mov    0xaf0(%rbx),%rdx
    0.00 :	    10c4:       00 83 bb bc 08 00 00    mov    %rax,0xb00(%rbx)
    0.00 :	    10cb:       01 0f 84 0e 01 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10d2:       48 8b 83 70 05 00       add    $0x40b4,%rax
    0.00 :	    10d8:       00 48                   mov    (%rax),%eax
    0.00 :	    10da:       8b 93                   mov    %eax,%eax
    0.00 :	    10dc:       00 0b 00                add    %rdx,%rax
    0.00 :	    10df:       00 48 05 bc 40 00 00    mov    0xaf8(%rbx),%rdx
    0.00 :	    10e6:       8b 00 89 c0 48 01 d0    mov    %rax,0xaf0(%rbx)
    0.00 :	    10ed:       48 8b 93 f0 0a 00 00    mov    0x570(%rbx),%rax
    0.00 :	    10f4:       48 89 83 00 0b 00       add    $0x40b8,%rax
    0.00 :	    10fa:       00 48                   mov    (%rax),%eax
    0.00 :	    10fc:       8b 83                   mov    %eax,%eax
    0.00 :	    10fe:       70 05 00                add    %rdx,%rax
    0.00 :	    1101:       00 48 05 b4 40 00 00    mov    %rax,0xaf8(%rbx)
    0.00 :	    1108:       8b 00 89 c0 48 01 d0    mov    0x570(%rbx),%rax
    0.00 :	    110f:       48 8b 93 f8 0a 00       add    $0x5820,%rax
    0.00 :	    1115:       00 48                   mov    (%rax),%eax
    0.00 :	    1117:       89 83 f0 0a 00          test   $0x10000000,%eax
    0.00 :	    111c:       00 48 8b 83 70 05       je     722 <dma_unmap_page+0x6f2>
    0.00 :	    1122:       00 00 48 05 b8 40 00    mov    0x570(%rbx),%rax
    0.00 :	    1129:       00 8b 00 89 c0 48 01    mov    0xc28(%rbx),%rdx
    0.00 :	    1130:       d0 48 89 83 f8 0a       add    $0x8fe4,%rax
    0.00 :	    1136:       00 00                   mov    (%rax),%eax
    0.00 :	    1138:       48 8b                   mov    %eax,%eax
    0.00 :	    113a:       83 70 05                add    %rdx,%rax
    0.00 :	    113d:       00 00 48 05 20 58 00    mov    0xc30(%rbx),%rdx
    0.00 :	    1144:       00 8b 00 a9 00 00 00    mov    %rax,0xc28(%rbx)
    0.00 :	    114b:       10 0f 84 00 f6 ff ff    mov    0x570(%rbx),%rax
    0.00 :	    1152:       48 8b 83 70 05 00       add    $0x415c,%rax
    0.00 :	    1158:       00 48                   mov    (%rax),%eax
    0.00 :	    115a:       8b 93                   mov    %eax,%eax
    0.00 :	    115c:       28 0c 00                add    %rdx,%rax
    0.00 :	    115f:       00 48 05 e4 8f 00 00    mov    0xc38(%rbx),%rdx
    0.00 :	    1166:       8b 00 89 c0 48 01 d0    mov    %rax,0xc30(%rbx)
    0.00 :	    116d:       48 8b 93 30 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1174:       48 89 83 28 0c 00       add    $0x8fe0,%rax
    0.00 :	    117a:       00 48                   mov    (%rax),%eax
    0.00 :	    117c:       8b 83                   mov    %eax,%eax
    0.00 :	    117e:       70 05 00                add    %rdx,%rax
    0.00 :	    1181:       00 48 05 5c 41 00 00    mov    0xc40(%rbx),%rdx
    0.00 :	    1188:       8b 00 89 c0 48 01 d0    mov    %rax,0xc38(%rbx)
    0.00 :	    118f:       48 8b 93 38 0c 00 00    mov    0x570(%rbx),%rax
    0.00 :	    1196:       48 89 83 30 0c 00       add    $0x4158,%rax
    0.00 :	    119c:       00 48                   mov    (%rax),%eax
    0.00 :	    119e:       8b 83                   mov    %eax,%eax
    0.00 :	    11a0:       70 05 00                add    %rdx,%rax
    0.00 :	    11a3:       00 48 05 e0 8f 00 00    mov    %rax,0xc40(%rbx)
    0.00 :	    11aa:       8b 00 89 c0             add    $0x10,%rsp
    0.00 :	    11ae:       48                      pop    %rbx
    0.00 :	    11af:       01                      retq   
    0.00 :	    11b0:       d0 48 8b 93 40 0c 00    cmpw   $0x3e8,0x3f8(%rbx)
    0.00 :	    11b7:       00 48 
    0.00 :	    11b9:       89 83 38 0c 00 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11bf:       48 8b 83 70 05 00 00    mov    0x860(%rbx),%rax
    0.00 :	    11c6:       48 05 58                test   %rax,%rax
    0.00 :	    11c9:       41 00                   je     11e6 <dma_unmap_page+0x11b6>
    0.00 :	    11cb:       00 8b 00 89 c0          lea    0xe(%rsp),%rdx
    0.00 :	    11d0:       48 01 d0 48 89 83 40    lea    0x568(%rbx),%rdi
    0.00 :	    11d7:       0c 00 00 48 83          mov    $0xa,%esi
    0.00 :	    11dc:       c4 10                   callq  *%rax
    0.00 :	    11de:       5b c3                   test   %eax,%eax
    0.00 :	    11e0:       66 81 bb f8 03 00       jne    10a2 <dma_unmap_page+0x1072>
    0.00 :	    11e6:       00 e8 03 0f 85          movzbl 0xe(%rsp),%eax
    0.00 :	    11eb:       e3 fe ff ff 48          mov    %ax,0xe(%rsp)
    0.00 :	    11f0:       8b 83 60                movzwl %ax,%eax
    0.00 :	    11f3:       08 00 00 48 85 c0       add    %eax,0xcf8(%rbx)
    0.00 :	    11f9:       74 1b 48 8d 54          jmpq   10a2 <dma_unmap_page+0x1072>
         :	    11fe:       24 0e                   xchg   %ax,%ax
         :	    1200:       48 8d bb 68             sub    $0x18,%rsp
         :	    1204:       05 00 00 be             mov    %rbx,(%rsp)
         :	    1208:       0a 00 00 00 ff          mov    %rbp,0x8(%rsp)
         :	    120d:       d0 85 c0                mov    %rdi,%rbx
         :	    1210:       0f 85 bc fe ff          mov    %r12,0x10(%rsp)
         :	    1215:       ff 0f b6 44             mov    0x20(%rdi),%rsi
         :	    1219:       24 0e 66                mov    (%rdi),%rbp
         :	    121c:       89 44 24                test   %rsi,%rsi
         :	    121f:       0e 0f b7 c0 01 83       je     13b0 <dma_unmap_page+0x1380>
         :	    1225:       f8 0c 00 00 e9 a4 fe    testb  $0x3,0x220(%rbp)
         :	    122c:       ff ff                   je     127b <dma_unmap_page+0x124b>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000088b0 <ixgbe_clean_tx_irq>:
         :	 * @q_vector: structure containing interrupt and ring information
         :	 * @tx_ring: tx ring to clean
         :	 **/
         :	static bool ixgbe_clean_tx_irq(struct ixgbe_q_vector *q_vector,
         :	                               struct ixgbe_ring *tx_ring)
         :	{
    0.00 :	    88b0:       41 57                   push   %r15
    0.00 :	    88b2:       41 56                   push   %r14
    0.00 :	    88b4:       49 89 f6                mov    %rsi,%r14
    0.00 :	    88b7:       41 55                   push   %r13
    0.00 :	    88b9:       41 54                   push   %r12
    0.00 :	    88bb:       55                      push   %rbp
    0.00 :	    88bc:       53                      push   %rbx
    0.00 :	    88bd:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	    88c1:       48 89 7c 24 10          mov    %rdi,0x10(%rsp)
         :	        struct ixgbe_adapter *adapter = q_vector->adapter;
    0.00 :	    88c6:       4c 8b 3f                mov    (%rdi),%r15
         :	        struct ixgbe_tx_buffer *tx_buffer;
         :	        union ixgbe_adv_tx_desc *tx_desc;
         :	        unsigned int total_bytes = 0, total_packets = 0;
         :	        unsigned int budget = q_vector->tx.work_limit;
    0.00 :	    88c9:       0f b7 4f 38             movzwl 0x38(%rdi),%ecx
         :	        unsigned int i = tx_ring->next_to_clean;
    0.00 :	    88cd:       0f b7 56 52             movzwl 0x52(%rsi),%edx
         :	        return oldbit;
         :	}
         :
         :	static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)
         :	{
         :	        return ((1UL << (nr % BITS_PER_LONG)) &
 ??:0
   50.00 :	    88d1:       49 8b 87 10 02 00 00    mov    0x210(%r15),%rax
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
    0.00 :	    88d8:       a8 04                   test   $0x4,%al
    0.00 :	    88da:       0f 85 88 02 00 00       jne    8b68 <ixgbe_clean_tx_irq+0x2b8>
         :	        struct ixgbe_adapter *adapter = q_vector->adapter;
         :	        struct ixgbe_tx_buffer *tx_buffer;
         :	        union ixgbe_adv_tx_desc *tx_desc;
         :	        unsigned int total_bytes = 0, total_packets = 0;
         :	        unsigned int budget = q_vector->tx.work_limit;
         :	        unsigned int i = tx_ring->next_to_clean;
    0.00 :	    88e0:       0f b7 c2                movzwl %dx,%eax
         :	{
         :	        struct ixgbe_adapter *adapter = q_vector->adapter;
         :	        struct ixgbe_tx_buffer *tx_buffer;
         :	        union ixgbe_adv_tx_desc *tx_desc;
         :	        unsigned int total_bytes = 0, total_packets = 0;
         :	        unsigned int budget = q_vector->tx.work_limit;
    0.00 :	    88e3:       0f b7 c9                movzwl %cx,%ecx
         :	        unsigned int i = tx_ring->next_to_clean;
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
         :	                return true;
         :
         :	        tx_buffer = &tx_ring->tx_buffer_info[i];
    0.00 :	    88e6:       89 c2                   mov    %eax,%edx
         :	{
         :	        struct ixgbe_adapter *adapter = q_vector->adapter;
         :	        struct ixgbe_tx_buffer *tx_buffer;
         :	        union ixgbe_adv_tx_desc *tx_desc;
         :	        unsigned int total_bytes = 0, total_packets = 0;
         :	        unsigned int budget = q_vector->tx.work_limit;
    0.00 :	    88e8:       89 4c 24 24             mov    %ecx,0x24(%rsp)
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
         :	                return true;
         :
         :	        tx_buffer = &tx_ring->tx_buffer_info[i];
         :	        tx_desc = IXGBE_TX_DESC(tx_ring, i);
         :	        i -= tx_ring->count;
    0.00 :	    88ec:       41 89 c4                mov    %eax,%r12d
         :	        unsigned int i = tx_ring->next_to_clean;
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
         :	                return true;
         :
         :	        tx_buffer = &tx_ring->tx_buffer_info[i];
    0.00 :	    88ef:       48 8d 1c 52             lea    (%rdx,%rdx,2),%rbx
         :	        tx_desc = IXGBE_TX_DESC(tx_ring, i);
    0.00 :	    88f3:       48 89 d5                mov    %rdx,%rbp
         :	        i -= tx_ring->count;
    0.00 :	    88f6:       0f b7 56 4c             movzwl 0x4c(%rsi),%edx
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
         :	                return true;
         :
         :	        tx_buffer = &tx_ring->tx_buffer_info[i];
         :	        tx_desc = IXGBE_TX_DESC(tx_ring, i);
    0.00 :	    88fa:       48 c1 e5 04             shl    $0x4,%rbp
    0.00 :	    88fe:       48 03 6e 20             add    0x20(%rsi),%rbp
         :	        unsigned int i = tx_ring->next_to_clean;
         :
         :	        if (test_bit(__IXGBE_DOWN, &adapter->state))
         :	                return true;
         :
         :	        tx_buffer = &tx_ring->tx_buffer_info[i];
    0.00 :	    8902:       48 c1 e3 04             shl    $0x4,%rbx
    0.00 :	    8906:       48 03 5e 28             add    0x28(%rsi),%rbx
         :	        tx_desc = IXGBE_TX_DESC(tx_ring, i);
         :	        i -= tx_ring->count;
    0.00 :	    890a:       c7 44 24 1c 00 00 00    movl   $0x0,0x1c(%rsp)
    0.00 :	    8911:       00 
    0.00 :	    8912:       c7 44 24 20 00 00 00    movl   $0x0,0x20(%rsp)
    0.00 :	    8919:       00 
    0.00 :	    891a:       41 29 d4                sub    %edx,%r12d
    0.00 :	    891d:       0f 1f 00                nopl   (%rax)
         :
         :	        do {
         :	                union ixgbe_adv_tx_desc *eop_desc = tx_buffer->next_to_watch;
    0.00 :	    8920:       4c 8b 2b                mov    (%rbx),%r13
         :
         :	                /* if next_to_watch is not set then there is no work pending */
         :	                if (!eop_desc)
    0.00 :	    8923:       4d 85 ed                test   %r13,%r13
    0.00 :	    8926:       0f 84 f5 00 00 00       je     8a21 <ixgbe_clean_tx_irq+0x171>
         :	                        break;
         :
         :	                /* prevent any other reads prior to eop_desc */
         :	                rmb();
    0.00 :	    892c:       0f ae e8                lfence 
         :
         :	                /* if DD is not set pending work has not been completed */
         :	                if (!(eop_desc->wb.status & cpu_to_le32(IXGBE_TXD_STAT_DD)))
    0.00 :	    892f:       41 f6 45 0c 01          testb  $0x1,0xc(%r13)
    0.00 :	    8934:       0f 84 e7 00 00 00       je     8a21 <ixgbe_clean_tx_irq+0x171>
         :
         :	                /* clear next_to_watch to prevent false hangs */
         :	                tx_buffer->next_to_watch = NULL;
         :
         :	                /* update the statistics for this packet */
         :	                total_bytes += tx_buffer->bytecount;
    0.00 :	    893a:       8b 43 18                mov    0x18(%rbx),%eax
         :	                /* if DD is not set pending work has not been completed */
         :	                if (!(eop_desc->wb.status & cpu_to_le32(IXGBE_TXD_STAT_DD)))
         :	                        break;
         :
         :	                /* clear next_to_watch to prevent false hangs */
         :	                tx_buffer->next_to_watch = NULL;
    0.00 :	    893d:       48 c7 03 00 00 00 00    movq   $0x0,(%rbx)
         :
         :	                /* update the statistics for this packet */
         :	                total_bytes += tx_buffer->bytecount;
    0.00 :	    8944:       01 44 24 1c             add    %eax,0x1c(%rsp)
         :	                total_packets += tx_buffer->gso_segs;
    0.00 :	    8948:       0f b7 43 1c             movzwl 0x1c(%rbx),%eax
    0.00 :	    894c:       01 44 24 20             add    %eax,0x20(%rsp)
         :	                                              tx_buffer->skb);
         :
         :
         :	#endif
         :	                /* free the skb */
         :	                dev_kfree_skb_any(tx_buffer->skb);
    0.00 :	    8950:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	    8954:       e8 00 00 00 00          callq  8959 <ixgbe_clean_tx_irq+0xa9>
         :
         :	                /* unmap skb header data */
         :	                dma_unmap_single(tx_ring->dev,
    0.00 :	    8959:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	    895d:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    8960:       48 8b 73 20             mov    0x20(%rbx),%rsi
         :	static inline struct dma_map_ops *get_dma_ops(struct device *dev)
         :	{
         :	#ifdef CONFIG_X86_32
         :	        return dma_ops;
         :	#else
         :	        if (unlikely(!dev) || !dev->archdata.dma_ops)
    0.00 :	    8964:       48 85 ff                test   %rdi,%rdi
    0.00 :	    8967:       0f 84 83 01 00 00       je     8af0 <ixgbe_clean_tx_irq+0x240>
    0.00 :	    896d:       48 8b 87 00 02 00 00    mov    0x200(%rdi),%rax
    0.00 :	    8974:       48 85 c0                test   %rax,%rax
    0.00 :	    8977:       0f 84 73 01 00 00       je     8af0 <ixgbe_clean_tx_irq+0x240>
         :	                                          struct dma_attrs *attrs)
         :	{
         :	        struct dma_map_ops *ops = get_dma_ops(dev);
         :
         :	        BUG_ON(!valid_dma_direction(dir));
         :	        if (ops->unmap_page)
    0.00 :	    897d:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	    8981:       48 85 c0                test   %rax,%rax
    0.00 :	    8984:       74 0c                   je     8992 <ixgbe_clean_tx_irq+0xe2>
         :	                ops->unmap_page(dev, addr, size, dir, attrs);
    0.00 :	    8986:       89 d2                   mov    %edx,%edx
    0.00 :	    8988:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    898b:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    8990:       ff d0                   callq  *%rax
         :	                                 dma_unmap_addr(tx_buffer, dma),
         :	                                 dma_unmap_len(tx_buffer, len),
         :	                                 DMA_TO_DEVICE);
         :
         :	                /* clear tx_buffer data */
         :	                tx_buffer->skb = NULL;
    0.00 :	    8992:       48 c7 43 10 00 00 00    movq   $0x0,0x10(%rbx)
    0.00 :	    8999:       00 
         :	                dma_unmap_len_set(tx_buffer, len, 0);
    0.00 :	    899a:       c7 43 28 00 00 00 00    movl   $0x0,0x28(%rbx)
         :
         :	                /* unmap remaining buffers */
         :	                while (tx_desc != eop_desc) {
    0.00 :	    89a1:       4c 39 ed                cmp    %r13,%rbp
    0.00 :	    89a4:       74 5a                   je     8a00 <ixgbe_clean_tx_irq+0x150>
         :	                        tx_buffer++;
         :	                        tx_desc++;
         :	                        i++;
         :	                        if (unlikely(!i)) {
    0.00 :	    89a6:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	    89aa:       0f 84 4c 01 00 00       je     8afc <ixgbe_clean_tx_irq+0x24c>
         :	                tx_buffer->skb = NULL;
         :	                dma_unmap_len_set(tx_buffer, len, 0);
         :
         :	                /* unmap remaining buffers */
         :	                while (tx_desc != eop_desc) {
         :	                        tx_buffer++;
    0.00 :	    89b0:       48 83 c3 30             add    $0x30,%rbx
         :	                        tx_desc++;
    0.00 :	    89b4:       48 83 c5 10             add    $0x10,%rbp
         :	                                tx_buffer = tx_ring->tx_buffer_info;
         :	                                tx_desc = IXGBE_TX_DESC(tx_ring, 0);
         :	                        }
         :
         :	                        /* unmap any remaining paged data */
         :	                        if (dma_unmap_len(tx_buffer, len)) {
    0.00 :	    89b8:       8b 53 28                mov    0x28(%rbx),%edx
    0.00 :	    89bb:       85 d2                   test   %edx,%edx
    0.00 :	    89bd:       74 e2                   je     89a1 <ixgbe_clean_tx_irq+0xf1>
         :	                                dma_unmap_page(tx_ring->dev,
    0.00 :	    89bf:       49 8b 7e 18             mov    0x18(%r14),%rdi
    0.00 :	    89c3:       48 8b 73 20             mov    0x20(%rbx),%rsi
    0.00 :	    89c7:       48 85 ff                test   %rdi,%rdi
    0.00 :	    89ca:       0f 84 10 01 00 00       je     8ae0 <ixgbe_clean_tx_irq+0x230>
    0.00 :	    89d0:       48 8b 87 00 02 00 00    mov    0x200(%rdi),%rax
    0.00 :	    89d7:       48 85 c0                test   %rax,%rax
    0.00 :	    89da:       0f 84 00 01 00 00       je     8ae0 <ixgbe_clean_tx_irq+0x230>
         :	                                  size_t size, enum dma_data_direction dir)
         :	{
         :	        struct dma_map_ops *ops = get_dma_ops(dev);
         :
         :	        BUG_ON(!valid_dma_direction(dir));
         :	        if (ops->unmap_page)
    0.00 :	    89e0:       48 8b 40 18             mov    0x18(%rax),%rax
    0.00 :	    89e4:       48 85 c0                test   %rax,%rax
    0.00 :	    89e7:       74 b1                   je     899a <ixgbe_clean_tx_irq+0xea>
         :	                ops->unmap_page(dev, addr, size, dir, NULL);
    0.00 :	    89e9:       89 d2                   mov    %edx,%edx
    0.00 :	    89eb:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    89ee:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    89f3:       ff d0                   callq  *%rax
    0.00 :	    89f5:       eb a3                   jmp    899a <ixgbe_clean_tx_irq+0xea>
    0.00 :	    89f7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    89fe:       00 00 
         :
         :	                /* move us one more past the eop_desc for start of next pkt */
         :	                tx_buffer++;
         :	                tx_desc++;
         :	                i++;
         :	                if (unlikely(!i)) {
    0.00 :	    8a00:       41 83 c4 01             add    $0x1,%r12d
    0.00 :	    8a04:       0f 84 10 02 00 00       je     8c1a <ixgbe_clean_tx_irq+0x36a>
         :	                                dma_unmap_len_set(tx_buffer, len, 0);
         :	                        }
         :	                }
         :
         :	                /* move us one more past the eop_desc for start of next pkt */
         :	                tx_buffer++;
    0.00 :	    8a0a:       48 83 c3 30             add    $0x30,%rbx
         :	                tx_desc++;
    0.00 :	    8a0e:       48 83 c5 10             add    $0x10,%rbp
         :	 * It's not worth to care about 3dnow prefetches for the K6
         :	 * because they are microcoded there and very slow.
         :	 */
         :	static inline void prefetch(const void *x)
         :	{
         :	        alternative_input(BASE_PREFETCH,
    0.00 :	    8a12:       0f 18 4d 00             prefetcht0 0x0(%rbp)
         :	                /* issue prefetch for next Tx descriptor */
         :	                prefetch(tx_desc);
         :
         :	                /* update budget accounting */
         :	                budget--;
         :	        } while (likely(budget));
    0.00 :	    8a16:       83 6c 24 24 01          subl   $0x1,0x24(%rsp)
    0.00 :	    8a1b:       0f 85 ff fe ff ff       jne    8920 <ixgbe_clean_tx_irq+0x70>
         :
         :	        i += tx_ring->count;
    0.00 :	    8a21:       41 0f b7 46 4c          movzwl 0x4c(%r14),%eax
         :	        tx_ring->next_to_clean = i;
         :	        tx_ring->stats.bytes += total_bytes;
         :	        tx_ring->stats.packets += total_packets;
         :	        q_vector->tx.total_bytes += total_bytes;
    0.00 :	    8a26:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
         :	        q_vector->tx.total_packets += total_packets;
         :
         :	        if (check_for_tx_hang(tx_ring) && ixgbe_check_tx_hang(tx_ring)) {
    0.00 :	    8a2b:       49 8d 4e 30             lea    0x30(%r14),%rcx
         :
         :	                /* update budget accounting */
         :	                budget--;
         :	        } while (likely(budget));
         :
         :	        i += tx_ring->count;
    0.00 :	    8a2f:       41 8d 1c 04             lea    (%r12,%rax,1),%ebx
         :	        tx_ring->next_to_clean = i;
         :	        tx_ring->stats.bytes += total_bytes;
    0.00 :	    8a33:       8b 44 24 1c             mov    0x1c(%rsp),%eax
    0.00 :	    8a37:       49 01 46 60             add    %rax,0x60(%r14)
         :	        tx_ring->stats.packets += total_packets;
    0.00 :	    8a3b:       8b 44 24 20             mov    0x20(%rsp),%eax
    0.00 :	    8a3f:       49 01 46 58             add    %rax,0x58(%r14)
         :	                /* update budget accounting */
         :	                budget--;
         :	        } while (likely(budget));
         :
         :	        i += tx_ring->count;
         :	        tx_ring->next_to_clean = i;
    0.00 :	    8a43:       66 41 89 5e 52          mov    %bx,0x52(%r14)
         :	        tx_ring->stats.bytes += total_bytes;
         :	        tx_ring->stats.packets += total_packets;
         :	        q_vector->tx.total_bytes += total_bytes;
    0.00 :	    8a48:       8b 44 24 1c             mov    0x1c(%rsp),%eax
    0.00 :	    8a4c:       01 42 30                add    %eax,0x30(%rdx)
         :	        q_vector->tx.total_packets += total_packets;
    0.00 :	    8a4f:       8b 44 24 20             mov    0x20(%rsp),%eax
    0.00 :	    8a53:       01 42 34                add    %eax,0x34(%rdx)
    0.00 :	    8a56:       49 8b 46 30             mov    0x30(%r14),%rax
         :
         :	        if (check_for_tx_hang(tx_ring) && ixgbe_check_tx_hang(tx_ring)) {
    0.00 :	    8a5a:       a8 02                   test   $0x2,%al
    0.00 :	    8a5c:       74 63                   je     8ac1 <ixgbe_clean_tx_irq+0x211>
         :	        return ring->stats.packets;
         :	}
         :
         :	static u64 ixgbe_get_tx_pending(struct ixgbe_ring *ring)
         :	{
         :	        struct ixgbe_adapter *adapter = ring->q_vector->adapter;
    0.00 :	    8a5e:       49 8b 46 08             mov    0x8(%r14),%rax
         :	        return ((head <= tail) ? tail : tail + ring->count) - head;
         :	}
         :
         :	static bool ixgbe_check_tx_hang(struct ixgbe_ring *tx_ring)
         :	{
         :	        u32 tx_done = ixgbe_get_tx_completed(tx_ring);
    0.00 :	    8a62:       41 8b 7e 58             mov    0x58(%r14),%edi
         :	        u32 tx_done_old = tx_ring->tx_stats.tx_done_old;
    0.00 :	    8a66:       4d 8b 46 78             mov    0x78(%r14),%r8
         :	        return ring->stats.packets;
         :	}
         :
         :	static u64 ixgbe_get_tx_pending(struct ixgbe_ring *ring)
         :	{
         :	        struct ixgbe_adapter *adapter = ring->q_vector->adapter;
    0.00 :	    8a6a:       48 8b 10                mov    (%rax),%rdx
         :	{ asm volatile("mov" size " %0,%1": :reg (val), \
         :	"m" (*(volatile type __force *)addr) barrier); }
         :
         :	build_mmio_read(readb, "b", unsigned char, "=q", :"memory")
         :	build_mmio_read(readw, "w", unsigned short, "=r", :"memory")
         :	build_mmio_read(readl, "l", unsigned int, "=r", :"memory")
    0.00 :	    8a6d:       41 0f b6 46 4f          movzbl 0x4f(%r14),%eax
    0.00 :	    8a72:       c1 e0 06                shl    $0x6,%eax
    0.00 :	    8a75:       48 98                   cltq   
    0.00 :	    8a77:       48 05 10 60 00 00       add    $0x6010,%rax
    0.00 :	    8a7d:       48 03 82 80 0e 00 00    add    0xe80(%rdx),%rax
    0.00 :	    8a84:       8b 30                   mov    (%rax),%esi
   50.00 :	    8a86:       41 0f b6 46 4f          movzbl 0x4f(%r14),%eax
    0.00 :	    8a8b:       c1 e0 06                shl    $0x6,%eax
    0.00 :	    8a8e:       48 98                   cltq   
    0.00 :	    8a90:       48 05 18 60 00 00       add    $0x6018,%rax
    0.00 :	    8a96:       48 03 82 80 0e 00 00    add    0xe80(%rdx),%rax
    0.00 :	    8a9d:       8b 10                   mov    (%rax),%edx
         :	        struct ixgbe_hw *hw = &adapter->hw;
         :
         :	        u32 head = IXGBE_READ_REG(hw, IXGBE_TDH(ring->reg_idx));
         :	        u32 tail = IXGBE_READ_REG(hw, IXGBE_TDT(ring->reg_idx));
         :
         :	        return ((head <= tail) ? tail : tail + ring->count) - head;
    0.00 :	    8a9f:       39 d6                   cmp    %edx,%esi
    0.00 :	    8aa1:       76 07                   jbe    8aaa <ixgbe_clean_tx_irq+0x1fa>
    0.00 :	    8aa3:       41 0f b7 46 4c          movzwl 0x4c(%r14),%eax
    0.00 :	    8aa8:       01 c2                   add    %eax,%edx
         :	 */
         :	static __always_inline void
         :	clear_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        if (IS_IMMEDIATE(nr)) {
         :	                asm volatile(LOCK_PREFIX "andb %1,%0"
    0.00 :	    8aaa:       f0 41 80 66 30 fd       lock andb $0xfd,0x30(%r14)
         :	         * requiring this to fail twice we avoid races with
         :	         * PFC clearing the ARMED bit and conditions where we
         :	         * run the check_tx_hang logic with a transmit completion
         :	         * pending but without time to complete it yet.
         :	         */
         :	        if ((tx_done_old == tx_done) && tx_pending) {
    0.00 :	    8ab0:       44 39 c7                cmp    %r8d,%edi
    0.00 :	    8ab3:       74 5c                   je     8b11 <ixgbe_clean_tx_irq+0x261>
         :	                /* make sure it is true for two checks in a row */
         :	                ret = test_and_set_bit(__IXGBE_HANG_CHECK_ARMED,
         :	                                       &tx_ring->state);
         :	        } else {
         :	                /* update completed stats and continue */
         :	                tx_ring->tx_stats.tx_done_old = tx_done;
    0.00 :	    8ab5:       89 ff                   mov    %edi,%edi
    0.00 :	    8ab7:       49 89 7e 78             mov    %rdi,0x78(%r14)
    0.00 :	    8abb:       f0 41 80 66 30 fb       lock andb $0xfb,0x30(%r14)
         :	                /* the adapter is about to reset, no point in enabling stuff */
         :	                return true;
         :	        }
         :
         :	#define TX_WAKE_THRESHOLD (DESC_NEEDED * 2)
         :	        if (unlikely(total_packets && netif_carrier_ok(netdev_ring(tx_ring)) &&
    0.00 :	    8ac1:       8b 7c 24 20             mov    0x20(%rsp),%edi
    0.00 :	    8ac5:       85 ff                   test   %edi,%edi
    0.00 :	    8ac7:       0f 85 af 00 00 00       jne    8b7c <ixgbe_clean_tx_irq+0x2cc>
         :	                        ++tx_ring->tx_stats.restart_queue;
         :	                }
         :	#endif
         :	        }
         :
         :	        return !!budget;
    0.00 :	    8acd:       8b 74 24 24             mov    0x24(%rsp),%esi
    0.00 :	    8ad1:       85 f6                   test   %esi,%esi
    0.00 :	    8ad3:       0f 95 c0                setne  %al
         :	}
    0.00 :	    8ad6:       e9 92 00 00 00          jmpq   8b6d <ixgbe_clean_tx_irq+0x2bd>
    0.00 :	    8adb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                return dma_ops;
    0.00 :	    8ae0:       48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 8ae7 <ixgbe_clean_tx_irq+0x237>
    0.00 :	    8ae7:       e9 f4 fe ff ff          jmpq   89e0 <ixgbe_clean_tx_irq+0x130>
    0.00 :	    8aec:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    8af0:       48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 8af7 <ixgbe_clean_tx_irq+0x247>
    0.00 :	    8af7:       e9 81 fe ff ff          jmpq   897d <ixgbe_clean_tx_irq+0xcd>
         :	                while (tx_desc != eop_desc) {
         :	                        tx_buffer++;
         :	                        tx_desc++;
         :	                        i++;
         :	                        if (unlikely(!i)) {
         :	                                i -= tx_ring->count;
    0.00 :	    8afc:       45 0f b7 66 4c          movzwl 0x4c(%r14),%r12d
         :	                                tx_buffer = tx_ring->tx_buffer_info;
    0.00 :	    8b01:       49 8b 5e 28             mov    0x28(%r14),%rbx
         :	                                tx_desc = IXGBE_TX_DESC(tx_ring, 0);
    0.00 :	    8b05:       49 8b 6e 20             mov    0x20(%r14),%rbp
         :	                while (tx_desc != eop_desc) {
         :	                        tx_buffer++;
         :	                        tx_desc++;
         :	                        i++;
         :	                        if (unlikely(!i)) {
         :	                                i -= tx_ring->count;
    0.00 :	    8b09:       41 f7 dc                neg    %r12d
    0.00 :	    8b0c:       e9 a7 fe ff ff          jmpq   89b8 <ixgbe_clean_tx_irq+0x108>
         :	         * requiring this to fail twice we avoid races with
         :	         * PFC clearing the ARMED bit and conditions where we
         :	         * run the check_tx_hang logic with a transmit completion
         :	         * pending but without time to complete it yet.
         :	         */
         :	        if ((tx_done_old == tx_done) && tx_pending) {
    0.00 :	    8b11:       39 f2                   cmp    %esi,%edx
    0.00 :	    8b13:       74 a0                   je     8ab5 <ixgbe_clean_tx_irq+0x205>
         :	 */
         :	static inline int test_and_set_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        int oldbit;
         :
         :	        asm volatile(LOCK_PREFIX "bts %2,%1\n\t"
    0.00 :	    8b15:       f0 0f ba 29 02          lock btsl $0x2,(%rcx)
    0.00 :	    8b1a:       19 c0                   sbb    %eax,%eax
         :	        tx_ring->stats.bytes += total_bytes;
         :	        tx_ring->stats.packets += total_packets;
         :	        q_vector->tx.total_bytes += total_bytes;
         :	        q_vector->tx.total_packets += total_packets;
         :
         :	        if (check_for_tx_hang(tx_ring) && ixgbe_check_tx_hang(tx_ring)) {
    0.00 :	    8b1c:       85 c0                   test   %eax,%eax
    0.00 :	    8b1e:       74 a1                   je     8ac1 <ixgbe_clean_tx_irq+0x211>
         :	                        "  next_to_use          <%x>\n"
         :	                        "  next_to_clean        <%x>\n",
         :	                        tx_ring->queue_index,
         :	                        IXGBE_READ_REG(hw, IXGBE_TDH(tx_ring->reg_idx)),
         :	                        IXGBE_READ_REG(hw, IXGBE_TDT(tx_ring->reg_idx)),
         :	                        tx_ring->next_to_use, i);
    0.00 :	    8b20:       41 f6 87 a8 14 00 00    testb  $0x1,0x14a8(%r15)
    0.00 :	    8b27:       01 
    0.00 :	    8b28:       0f 85 34 01 00 00       jne    8c62 <ixgbe_clean_tx_irq+0x3b2>
         :
         :	static inline
         :	struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,
         :	                                         unsigned int index)
         :	{
         :	        return &dev->_tx[index];
    0.00 :	    8b2e:       49 8b 46 10             mov    0x10(%r14),%rax
         :	                e_err(drv, "tx_buffer_info[next_to_clean]\n"
         :	                        "  time_stamp           <%lx>\n"
         :	                        "  jiffies              <%lx>\n",
         :	                        tx_ring->tx_buffer_info[i].time_stamp, jiffies);
         :
         :	                netif_stop_subqueue(netdev_ring(tx_ring),
    0.00 :	    8b32:       41 0f b6 5e 4e          movzbl 0x4e(%r14),%ebx
    0.00 :	    8b37:       48 8b a8 80 03 00 00    mov    0x380(%rax),%rbp
         :	 */
         :	static inline void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
         :	{
         :	        struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
         :	#ifdef CONFIG_NETPOLL_TRAP
         :	        if (netpoll_trap())
    0.00 :	    8b3e:       e8 00 00 00 00          callq  8b43 <ixgbe_clean_tx_irq+0x293>
    0.00 :	    8b43:       85 c0                   test   %eax,%eax
    0.00 :	    8b45:       0f 84 01 01 00 00       je     8c4c <ixgbe_clean_tx_irq+0x39c>
         :	                                    ring_queue_index(tx_ring));
         :
         :	                e_info(probe,
    0.00 :	    8b4b:       41 f6 87 a8 14 00 00    testb  $0x2,0x14a8(%r15)
    0.00 :	    8b52:       02 
    0.00 :	    8b53:       0f 85 a0 01 00 00       jne    8cf9 <ixgbe_clean_tx_irq+0x449>
         :	        return oldbit;
         :	}
         :
         :	static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)
         :	{
         :	        return ((1UL << (nr % BITS_PER_LONG)) &
    0.00 :	    8b59:       49 8b 87 10 02 00 00    mov    0x210(%r15),%rax
         :	 **/
         :	static void ixgbe_tx_timeout_reset(struct ixgbe_adapter *adapter)
         :	{
         :
         :	        /* Do the reset outside of interrupt context */
         :	        if (!test_bit(__IXGBE_DOWN, &adapter->state)) {
    0.00 :	    8b60:       a8 04                   test   $0x4,%al
    0.00 :	    8b62:       0f 84 c7 00 00 00       je     8c2f <ixgbe_clean_tx_irq+0x37f>
         :	                        ++tx_ring->tx_stats.restart_queue;
         :	                }
         :	#endif
         :	        }
         :
         :	        return !!budget;
    0.00 :	    8b68:       b8 01 00 00 00          mov    $0x1,%eax
         :	}
    0.00 :	    8b6d:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	    8b71:       5b                      pop    %rbx
    0.00 :	    8b72:       5d                      pop    %rbp
    0.00 :	    8b73:       41 5c                   pop    %r12
    0.00 :	    8b75:       41 5d                   pop    %r13
    0.00 :	    8b77:       41 5e                   pop    %r14
    0.00 :	    8b79:       41 5f                   pop    %r15
    0.00 :	    8b7b:       c3                      retq   
         :	 *
         :	 * Check if carrier is present on device
         :	 */
         :	static inline int netif_carrier_ok(const struct net_device *dev)
         :	{
         :	        return !test_bit(__LINK_STATE_NOCARRIER, &dev->state);
    0.00 :	    8b7c:       49 8b 46 10             mov    0x10(%r14),%rax
    0.00 :	    8b80:       48 8b 40 78             mov    0x78(%rax),%rax
         :	                /* the adapter is about to reset, no point in enabling stuff */
         :	                return true;
         :	        }
         :
         :	#define TX_WAKE_THRESHOLD (DESC_NEEDED * 2)
         :	        if (unlikely(total_packets && netif_carrier_ok(netdev_ring(tx_ring)) &&
    0.00 :	    8b84:       a8 04                   test   $0x4,%al
    0.00 :	    8b86:       0f 85 41 ff ff ff       jne    8acd <ixgbe_clean_tx_irq+0x21d>
         :	}
         :
         :	/* ixgbe_desc_unused - calculate if we have unused descriptors */
         :	static inline u16 ixgbe_desc_unused(struct ixgbe_ring *ring)
         :	{
         :	        u16 ntc = ring->next_to_clean;
    0.00 :	    8b8c:       41 0f b7 46 52          movzwl 0x52(%r14),%eax
         :	        u16 ntu = ring->next_to_use;
    0.00 :	    8b91:       41 0f b7 4e 50          movzwl 0x50(%r14),%ecx
         :
         :	        return ((ntc > ntu) ? 0 : ring->count) + ntc - ntu - 1;
    0.00 :	    8b96:       31 d2                   xor    %edx,%edx
    0.00 :	    8b98:       66 39 c8                cmp    %cx,%ax
    0.00 :	    8b9b:       77 05                   ja     8ba2 <ixgbe_clean_tx_irq+0x2f2>
    0.00 :	    8b9d:       41 0f b7 56 4c          movzwl 0x4c(%r14),%edx
    0.00 :	    8ba2:       83 e8 01                sub    $0x1,%eax
    0.00 :	    8ba5:       66 29 c8                sub    %cx,%ax
    0.00 :	    8ba8:       01 d0                   add    %edx,%eax
    0.00 :	    8baa:       66 83 f8 2b             cmp    $0x2b,%ax
    0.00 :	    8bae:       0f 86 19 ff ff ff       jbe    8acd <ixgbe_clean_tx_irq+0x21d>
         :	                     (ixgbe_desc_unused(tx_ring) >= TX_WAKE_THRESHOLD))) {
         :	                /* Make sure that anybody stopping the queue after this
         :	                 * sees the new next_to_clean.
         :	                 */
         :	                smp_mb();
    0.00 :	    8bb4:       0f ae f0                mfence 
         :
         :	static inline
         :	struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,
         :	                                         unsigned int index)
         :	{
         :	        return &dev->_tx[index];
    0.00 :	    8bb7:       41 0f b6 5e 4e          movzbl 0x4e(%r14),%ebx
    0.00 :	    8bbc:       49 8b 46 10             mov    0x10(%r14),%rax
    0.00 :	    8bc0:       48 c1 e3 08             shl    $0x8,%rbx
    0.00 :	    8bc4:       48 03 98 80 03 00 00    add    0x380(%rax),%rbx
    0.00 :	    8bcb:       48 8b 43 10             mov    0x10(%rbx),%rax
         :	        }
         :	}
         :
         :	static inline int netif_tx_queue_stopped(const struct netdev_queue *dev_queue)
         :	{
         :	        return test_bit(__QUEUE_STATE_XOFF, &dev_queue->state);
    0.00 :	    8bcf:       48 8d 6b 10             lea    0x10(%rbx),%rbp
         :	#ifdef HAVE_TX_MQ
         :	                if (__netif_subqueue_stopped(netdev_ring(tx_ring),
    0.00 :	    8bd3:       a8 01                   test   $0x1,%al
    0.00 :	    8bd5:       0f 84 f2 fe ff ff       je     8acd <ixgbe_clean_tx_irq+0x21d>
    0.00 :	    8bdb:       48 8b 54 24 10          mov    0x10(%rsp),%rdx
    0.00 :	    8be0:       48 8b 02                mov    (%rdx),%rax
    0.00 :	    8be3:       48 8b 80 10 02 00 00    mov    0x210(%rax),%rax
    0.00 :	    8bea:       a8 04                   test   $0x4,%al
    0.00 :	    8bec:       0f 85 db fe ff ff       jne    8acd <ixgbe_clean_tx_irq+0x21d>
         :	 */
         :	static inline void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
         :	{
         :	        struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
         :	#ifdef CONFIG_NETPOLL_TRAP
         :	        if (netpoll_trap())
    0.00 :	    8bf2:       e8 00 00 00 00          callq  8bf7 <ixgbe_clean_tx_irq+0x347>
    0.00 :	    8bf7:       85 c0                   test   %eax,%eax
    0.00 :	    8bf9:       75 15                   jne    8c10 <ixgbe_clean_tx_irq+0x360>
         :	 */
         :	static inline int test_and_clear_bit(int nr, volatile unsigned long *addr)
         :	{
         :	        int oldbit;
         :
         :	        asm volatile(LOCK_PREFIX "btr %2,%1\n\t"
    0.00 :	    8bfb:       f0 0f ba 75 00 00       lock btrl $0x0,0x0(%rbp)
    0.00 :	    8c01:       19 c0                   sbb    %eax,%eax
         :	                return;
         :	#endif
         :	        if (test_and_clear_bit(__QUEUE_STATE_XOFF, &txq->state))
    0.00 :	    8c03:       85 c0                   test   %eax,%eax
    0.00 :	    8c05:       74 09                   je     8c10 <ixgbe_clean_tx_irq+0x360>
         :	                __netif_schedule(txq->qdisc);
    0.00 :	    8c07:       48 8b 7b 08             mov    0x8(%rbx),%rdi
    0.00 :	    8c0b:       e8 00 00 00 00          callq  8c10 <ixgbe_clean_tx_irq+0x360>
         :	                                             ring_queue_index(tx_ring))
         :	                    && !test_bit(__IXGBE_DOWN, &q_vector->adapter->state)) {
         :	                        netif_wake_subqueue(netdev_ring(tx_ring),
         :	                                            ring_queue_index(tx_ring));
         :	                        ++tx_ring->tx_stats.restart_queue;
    0.00 :	    8c10:       49 83 46 68 01          addq   $0x1,0x68(%r14)
    0.00 :	    8c15:       e9 b3 fe ff ff          jmpq   8acd <ixgbe_clean_tx_irq+0x21d>
         :	                /* move us one more past the eop_desc for start of next pkt */
         :	                tx_buffer++;
         :	                tx_desc++;
         :	                i++;
         :	                if (unlikely(!i)) {
         :	                        i -= tx_ring->count;
    0.00 :	    8c1a:       45 0f b7 66 4c          movzwl 0x4c(%r14),%r12d
         :	                        tx_buffer = tx_ring->tx_buffer_info;
    0.00 :	    8c1f:       49 8b 5e 28             mov    0x28(%r14),%rbx
         :	                        tx_desc = IXGBE_TX_DESC(tx_ring, 0);
    0.00 :	    8c23:       49 8b 6e 20             mov    0x20(%r14),%rbp
         :	                /* move us one more past the eop_desc for start of next pkt */
         :	                tx_buffer++;
         :	                tx_desc++;
         :	                i++;
         :	                if (unlikely(!i)) {
         :	                        i -= tx_ring->count;
    0.00 :	    8c27:       41 f7 dc                neg    %r12d
    0.00 :	    8c2a:       e9 e3 fd ff ff          jmpq   8a12 <ixgbe_clean_tx_irq+0x162>
         :	static void ixgbe_tx_timeout_reset(struct ixgbe_adapter *adapter)
         :	{
         :
         :	        /* Do the reset outside of interrupt context */
         :	        if (!test_bit(__IXGBE_DOWN, &adapter->state)) {
         :	                adapter->flags2 |= IXGBE_FLAG2_RESET_REQUESTED;
    0.00 :	    8c2f:       41 81 8f 1c 02 00 00    orl    $0x80,0x21c(%r15)
    0.00 :	    8c36:       80 00 00 00 
         :	                ixgbe_service_event_schedule(adapter);
    0.00 :	    8c3a:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    8c3d:       e8 9e 85 ff ff          callq  11e0 <ixgbe_service_event_schedule>
    0.00 :	    8c42:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	    8c47:       e9 21 ff ff ff          jmpq   8b6d <ixgbe_clean_tx_irq+0x2bd>
         :	        struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
         :	#ifdef CONFIG_NETPOLL_TRAP
         :	        if (netpoll_trap())
         :	                return;
         :	#endif
         :	        netif_tx_stop_queue(txq);
    0.00 :	    8c4c:       0f b6 fb                movzbl %bl,%edi
    0.00 :	    8c4f:       48 c1 e7 08             shl    $0x8,%rdi
    0.00 :	    8c53:       48 8d 7c 3d 00          lea    0x0(%rbp,%rdi,1),%rdi
    0.00 :	    8c58:       e8 e3 a9 ff ff          callq  3640 <netif_tx_stop_queue>
    0.00 :	    8c5d:       e9 e9 fe ff ff          jmpq   8b4b <ixgbe_clean_tx_irq+0x29b>
    0.00 :	    8c62:       41 0f b6 46 4f          movzbl 0x4f(%r14),%eax
         :	                        "  next_to_use          <%x>\n"
         :	                        "  next_to_clean        <%x>\n",
         :	                        tx_ring->queue_index,
         :	                        IXGBE_READ_REG(hw, IXGBE_TDH(tx_ring->reg_idx)),
         :	                        IXGBE_READ_REG(hw, IXGBE_TDT(tx_ring->reg_idx)),
         :	                        tx_ring->next_to_use, i);
    0.00 :	    8c67:       45 0f b7 4e 50          movzwl 0x50(%r14),%r9d
    0.00 :	    8c6c:       c1 e0 06                shl    $0x6,%eax
    0.00 :	    8c6f:       48 98                   cltq   
    0.00 :	    8c71:       48 05 18 60 00 00       add    $0x6018,%rax
    0.00 :	    8c77:       49 03 87 80 0e 00 00    add    0xe80(%r15),%rax
    0.00 :	    8c7e:       44 8b 00                mov    (%rax),%r8d
    0.00 :	    8c81:       41 0f b6 46 4f          movzbl 0x4f(%r14),%eax
    0.00 :	    8c86:       c1 e0 06                shl    $0x6,%eax
    0.00 :	    8c89:       48 98                   cltq   
    0.00 :	    8c8b:       48 05 10 60 00 00       add    $0x6010,%rax
    0.00 :	    8c91:       49 03 87 80 0e 00 00    add    0xe80(%r15),%rax
    0.00 :	    8c98:       8b 08                   mov    (%rax),%ecx
    0.00 :	    8c9a:       41 0f b6 56 4e          movzbl 0x4e(%r14),%edx
    0.00 :	    8c9f:       49 8b bf 00 02 00 00    mov    0x200(%r15),%rdi
    0.00 :	    8ca6:       31 c0                   xor    %eax,%eax
    0.00 :	    8ca8:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    8caf:       89 1c 24                mov    %ebx,(%rsp)
    0.00 :	    8cb2:       e8 00 00 00 00          callq  8cb7 <ixgbe_clean_tx_irq+0x407>
         :	                e_err(drv, "tx_buffer_info[next_to_clean]\n"
         :	                        "  time_stamp           <%lx>\n"
         :	                        "  jiffies              <%lx>\n",
         :	                        tx_ring->tx_buffer_info[i].time_stamp, jiffies);
    0.00 :	    8cb7:       41 f6 87 a8 14 00 00    testb  $0x1,0x14a8(%r15)
    0.00 :	    8cbe:       01 
    0.00 :	    8cbf:       0f 84 69 fe ff ff       je     8b2e <ixgbe_clean_tx_irq+0x27e>
    0.00 :	    8cc5:       89 d8                   mov    %ebx,%eax
    0.00 :	    8cc7:       49 8b 56 28             mov    0x28(%r14),%rdx
    0.00 :	    8ccb:       48 8b 0d 00 00 00 00    mov    0x0(%rip),%rcx        # 8cd2 <ixgbe_clean_tx_irq+0x422>
    0.00 :	    8cd2:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	    8cd6:       49 8b bf 00 02 00 00    mov    0x200(%r15),%rdi
    0.00 :	    8cdd:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    8ce4:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :	    8ce8:       48 8b 54 02 08          mov    0x8(%rdx,%rax,1),%rdx
    0.00 :	    8ced:       31 c0                   xor    %eax,%eax
    0.00 :	    8cef:       e8 00 00 00 00          callq  8cf4 <ixgbe_clean_tx_irq+0x444>
    0.00 :	    8cf4:       e9 35 fe ff ff          jmpq   8b2e <ixgbe_clean_tx_irq+0x27e>
         :	                netif_stop_subqueue(netdev_ring(tx_ring),
         :	                                    ring_queue_index(tx_ring));
         :
         :	                e_info(probe,
         :	                       "tx hang %d detected on queue %d, resetting adapter\n",
         :	                       adapter->tx_timeout_count + 1, tx_ring->queue_index);
    0.00 :	    8cf9:       41 8b 97 d0 04 00 00    mov    0x4d0(%r15),%edx
    0.00 :	    8d00:       41 0f b6 4e 4e          movzbl 0x4e(%r14),%ecx
    0.00 :	    8d05:       48 c7 c6 00 00 00 00    mov    $0x0,%rsi
    0.00 :	    8d0c:       49 8b bf 00 02 00 00    mov    0x200(%r15),%rdi
    0.00 :	    8d13:       31 c0                   xor    %eax,%eax
    0.00 :	    8d15:       83 c2 01                add    $0x1,%edx
    0.00 :	    8d18:       e8 00 00 00 00          callq  8d1d <ixgbe_clean_tx_irq+0x46d>
    0.00 :	    8d1d:       e9 37 fe ff ff          jmpq   8b59 <ixgbe_clean_tx_irq+0x2a9>

Sorted summary for file /lib64/ld-2.11.3.so
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib64/ld-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000000b070 <_dl_relocate_object>:
    0.00 :	    b070:       55                      push   %rbp
    0.00 :	    b071:       48 89 e5                mov    %rsp,%rbp
    0.00 :	    b074:       41 57                   push   %r15
    0.00 :	    b076:       41 56                   push   %r14
    0.00 :	    b078:       49 89 fe                mov    %rdi,%r14
    0.00 :	    b07b:       41 55                   push   %r13
    0.00 :	    b07d:       41 54                   push   %r12
    0.00 :	    b07f:       41 89 d4                mov    %edx,%r12d
    0.00 :	    b082:       41 83 e4 01             and    $0x1,%r12d
    0.00 :	    b086:       53                      push   %rbx
    0.00 :	    b087:       48 81 ec b8 00 00 00    sub    $0xb8,%rsp
    0.00 :	    b08e:       81 e2 00 00 00 08       and    $0x8000000,%edx
    0.00 :	    b094:       48 89 b5 58 ff ff ff    mov    %rsi,-0xa8(%rbp)
    0.00 :	    b09b:       89 8d 54 ff ff ff       mov    %ecx,-0xac(%rbp)
    0.00 :	    b0a1:       75 15                   jne    b0b8 <_dl_relocate_object+0x48>
    0.00 :	    b0a3:       31 c0                   xor    %eax,%eax
    0.00 :	    b0a5:       48 83 3d 83 3c 21 00    cmpq   $0x0,0x213c83(%rip)        # 21ed30 <_rtld_global_ro+0x110>
    0.00 :	    b0ac:       00 
    0.00 :	    b0ad:       0f 95 c0                setne  %al
    0.00 :	    b0b0:       09 c1                   or     %eax,%ecx
    0.00 :	    b0b2:       89 8d 54 ff ff ff       mov    %ecx,-0xac(%rbp)
    0.00 :	    b0b8:       41 f6 86 14 03 00 00    testb  $0x4,0x314(%r14)
    0.00 :	    b0bf:       04 
    0.00 :	    b0c0:       0f 85 1a 02 00 00       jne    b2e0 <_dl_relocate_object+0x270>
    0.00 :	    b0c6:       44 8b 8d 54 ff ff ff    mov    -0xac(%rbp),%r9d
    0.00 :	    b0cd:       45 85 c9                test   %r9d,%r9d
    0.00 :	    b0d0:       0f 84 52 0a 00 00       je     bb28 <_dl_relocate_object+0xab8>
    0.00 :	    b0d6:       f6 05 43 3b 21 00 20    testb  $0x20,0x213b43(%rip)        # 21ec20 <_rtld_global_ro>
    0.00 :	    b0dd:       0f 85 cf 0f 00 00       jne    c0b2 <_dl_relocate_object+0x1042>
    0.00 :	    b0e3:       49 83 be f0 00 00 00    cmpq   $0x0,0xf0(%r14)
    0.00 :	    b0ea:       00 
    0.00 :	    b0eb:       0f 85 ba 0e 00 00       jne    bfab <_dl_relocate_object+0xf3b>
    0.00 :	    b0f1:       48 c7 85 68 ff ff ff    movq   $0x0,-0x98(%rbp)
    0.00 :	    b0f8:       00 00 00 00 
    0.00 :	    b0fc:       49 8b 46 68             mov    0x68(%r14),%rax
    0.00 :	    b100:       45 85 e4                test   %r12d,%r12d
    0.00 :	    b103:       0f 95 c3                setne  %bl
    0.00 :	    b106:       49 83 be f8 00 00 00    cmpq   $0x0,0xf8(%r14)
    0.00 :	    b10d:       00 
    0.00 :	    b10e:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b112:       48 89 85 60 ff ff ff    mov    %rax,-0xa0(%rbp)
    0.00 :	    b119:       0f 85 19 07 00 00       jne    b838 <_dl_relocate_object+0x7c8>
    0.00 :	    b11f:       84 db                   test   %bl,%bl
    0.00 :	    b121:       49 8b 86 88 02 00 00    mov    0x288(%r14),%rax
    0.00 :	    b128:       74 17                   je     b141 <_dl_relocate_object+0xd1>
    0.00 :	    b12a:       48 85 c0                test   %rax,%rax
    0.00 :	    b12d:       74 12                   je     b141 <_dl_relocate_object+0xd1>
    0.00 :	    b12f:       49 8b 16                mov    (%r14),%rdx
    0.00 :	    b132:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b136:       48 8d 0d 53 aa 00 00    lea    0xaa53(%rip),%rcx        # 15b90 <_dl_tlsdesc_resolve_rela>
    0.00 :	    b13d:       48 89 0c 02             mov    %rcx,(%rdx,%rax,1)
    0.00 :	    b141:       49 8b 46 78             mov    0x78(%r14),%rax
    0.00 :	    b145:       c7 45 a0 00 00 00 00    movl   $0x0,-0x60(%rbp)
    0.00 :	    b14c:       48 c7 45 b0 00 00 00    movq   $0x0,-0x50(%rbp)
    0.00 :	    b153:       00 
    0.00 :	    b154:       48 c7 45 98 00 00 00    movq   $0x0,-0x68(%rbp)
    0.00 :	    b15b:       00 
    0.00 :	    b15c:       48 c7 45 90 00 00 00    movq   $0x0,-0x70(%rbp)
    0.00 :	    b163:       00 
    0.00 :	    b164:       48 85 c0                test   %rax,%rax
    0.00 :	    b167:       74 17                   je     b180 <_dl_relocate_object+0x110>
    0.00 :	    b169:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b16d:       48 89 45 90             mov    %rax,-0x70(%rbp)
    0.00 :	    b171:       49 8b 86 80 00 00 00    mov    0x80(%r14),%rax
    0.00 :	    b178:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b17c:       48 89 45 98             mov    %rax,-0x68(%rbp)
    0.00 :	    b180:       49 83 be e0 00 00 00    cmpq   $0x0,0xe0(%r14)
    0.00 :	    b187:       00 
    0.00 :	    b188:       74 37                   je     b1c1 <_dl_relocate_object+0x151>
    0.00 :	    b18a:       49 8b 86 f8 00 00 00    mov    0xf8(%r14),%rax
    0.00 :	    b191:       84 db                   test   %bl,%bl
    0.00 :	    b193:       48 8b 48 08             mov    0x8(%rax),%rcx
    0.00 :	    b197:       75 14                   jne    b1ad <_dl_relocate_object+0x13d>
    0.00 :	    b199:       48 8b 55 98             mov    -0x68(%rbp),%rdx
    0.00 :	    b19d:       48 89 d0                mov    %rdx,%rax
    0.00 :	    b1a0:       48 03 45 90             add    -0x70(%rbp),%rax
    0.00 :	    b1a4:       48 39 c8                cmp    %rcx,%rax
    0.00 :	    b1a7:       0f 84 b1 0a 00 00       je     bc5e <_dl_relocate_object+0xbee>
    0.00 :	    b1ad:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	    b1b1:       48 89 4d a8             mov    %rcx,-0x58(%rbp)
    0.00 :	    b1b5:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b1b9:       44 89 65 b8             mov    %r12d,-0x48(%rbp)
    0.00 :	    b1bd:       48 89 45 b0             mov    %rax,-0x50(%rbp)
    0.00 :	    b1c1:       48 8d 75 90             lea    -0x70(%rbp),%rsi
    0.00 :	    b1c5:       48 8d 45 c8             lea    -0x38(%rbp),%rax
    0.00 :	    b1c9:       48 89 b5 48 ff ff ff    mov    %rsi,-0xb8(%rbp)
    0.00 :	    b1d0:       48 89 75 88             mov    %rsi,-0x78(%rbp)
    0.00 :	    b1d4:       48 89 85 40 ff ff ff    mov    %rax,-0xc0(%rbp)
    0.00 :	    b1db:       48 8b 55 88             mov    -0x78(%rbp),%rdx
    0.00 :	    b1df:       4d 8b 1e                mov    (%r14),%r11
    0.00 :	    b1e2:       48 8b 4a 08             mov    0x8(%rdx),%rcx
    0.00 :	    b1e6:       48 8b 1a                mov    (%rdx),%rbx
    0.00 :	    b1e9:       48 8d 34 0b             lea    (%rbx,%rcx,1),%rsi
    0.00 :	    b1ed:       48 89 b5 78 ff ff ff    mov    %rsi,-0x88(%rbp)
    0.00 :	    b1f4:       8b 7a 10                mov    0x10(%rdx),%edi
    0.00 :	    b1f7:       85 ff                   test   %edi,%edi
    0.00 :	    b1f9:       0f 84 31 01 00 00       je     b330 <_dl_relocate_object+0x2c0>
    0.00 :	    b1ff:       48 39 f3                cmp    %rsi,%rbx
    0.00 :	    b202:       72 52                   jb     b256 <_dl_relocate_object+0x1e6>
    0.00 :	    b204:       e9 87 00 00 00          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b209:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    b210:       48 83 f8 24             cmp    $0x24,%rax
    0.00 :	    b214:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b218:       0f 84 d2 00 00 00       je     b2f0 <_dl_relocate_object+0x280>
    0.00 :	    b21e:       48 83 f8 25             cmp    $0x25,%rax
    0.00 :	    b222:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    b228:       0f 85 53 0c 00 00       jne    be81 <_dl_relocate_object+0xe11>
    0.00 :	    b22e:       48 8b 43 10             mov    0x10(%rbx),%rax
    0.00 :	    b232:       49 03 06                add    (%r14),%rax
    0.00 :	    b235:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b23c:       ff d0                   callq  *%rax
    0.00 :	    b23e:       49 89 04 24             mov    %rax,(%r12)
    0.00 :	    b242:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b249:       48 83 c3 18             add    $0x18,%rbx
    0.00 :	    b24d:       48 39 9d 78 ff ff ff    cmp    %rbx,-0x88(%rbp)
    0.00 :	    b254:       76 3a                   jbe    b290 <_dl_relocate_object+0x220>
    0.00 :	    b256:       8b 43 08                mov    0x8(%rbx),%eax
    0.00 :	    b259:       4d 89 dc                mov    %r11,%r12
    0.00 :	    b25c:       4c 03 23                add    (%rbx),%r12
    0.00 :	    b25f:       48 83 f8 07             cmp    $0x7,%rax
    0.00 :	    b263:       75 ab                   jne    b210 <_dl_relocate_object+0x1a0>
    0.00 :	    b265:       49 8b 96 e8 03 00 00    mov    0x3e8(%r14),%rdx
    0.00 :	    b26c:       48 85 d2                test   %rdx,%rdx
    0.00 :	    b26f:       0f 85 9b 00 00 00       jne    b310 <_dl_relocate_object+0x2a0>
    0.00 :	    b275:       4d 01 1c 24             add    %r11,(%r12)
    0.00 :	    b279:       48 83 c3 18             add    $0x18,%rbx
    0.00 :	    b27d:       48 39 9d 78 ff ff ff    cmp    %rbx,-0x88(%rbp)
    0.00 :	    b284:       77 d0                   ja     b256 <_dl_relocate_object+0x1e6>
    0.00 :	    b286:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    b28d:       00 00 00 
    0.00 :	    b290:       48 8b 85 48 ff ff ff    mov    -0xb8(%rbp),%rax
    0.00 :	    b297:       48 83 45 88 18          addq   $0x18,-0x78(%rbp)
    0.00 :	    b29c:       48 83 c0 30             add    $0x30,%rax
    0.00 :	    b2a0:       48 39 45 88             cmp    %rax,-0x78(%rbp)
    0.00 :	    b2a4:       0f 85 31 ff ff ff       jne    b1db <_dl_relocate_object+0x16b>
    0.00 :	    b2aa:       8b 85 54 ff ff ff       mov    -0xac(%rbp),%eax
    0.00 :	    b2b0:       85 c0                   test   %eax,%eax
    0.00 :	    b2b2:       0f 85 84 0e 00 00       jne    c13c <_dl_relocate_object+0x10cc>
    0.00 :	    b2b8:       41 80 8e 14 03 00 00    orb    $0x4,0x314(%r14)
    0.00 :	    b2bf:       04 
    0.00 :	    b2c0:       48 83 bd 68 ff ff ff    cmpq   $0x0,-0x98(%rbp)
    0.00 :	    b2c7:       00 
    0.00 :	    b2c8:       0f 85 37 0e 00 00       jne    c105 <_dl_relocate_object+0x1095>
    0.00 :	    b2ce:       49 83 be 60 04 00 00    cmpq   $0x0,0x460(%r14)
    0.00 :	    b2d5:       00 
    0.00 :	    b2d6:       74 08                   je     b2e0 <_dl_relocate_object+0x270>
    0.00 :	    b2d8:       4c 89 f7                mov    %r14,%rdi
    0.00 :	    b2db:       e8 90 fb ff ff          callq  ae70 <_dl_protect_relro>
    0.00 :	    b2e0:       48 8d 65 d8             lea    -0x28(%rbp),%rsp
    0.00 :	    b2e4:       5b                      pop    %rbx
    0.00 :	    b2e5:       41 5c                   pop    %r12
    0.00 :	    b2e7:       41 5d                   pop    %r13
    0.00 :	    b2e9:       41 5e                   pop    %r14
    0.00 :	    b2eb:       41 5f                   pop    %r15
    0.00 :	    b2ed:       c9                      leaveq 
    0.00 :	    b2ee:       c3                      retq   
    0.00 :	    b2ef:       90                      nop
    0.00 :	    b2f0:       49 89 5c 24 08          mov    %rbx,0x8(%r12)
    0.00 :	    b2f5:       49 8b 96 90 02 00 00    mov    0x290(%r14),%rdx
    0.00 :	    b2fc:       49 8b 06                mov    (%r14),%rax
    0.00 :	    b2ff:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    b303:       49 89 04 24             mov    %rax,(%r12)
    0.00 :	    b307:       e9 3d ff ff ff          jmpq   b249 <_dl_relocate_object+0x1d9>
    0.00 :	    b30c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b310:       4c 89 e0                mov    %r12,%rax
    0.00 :	    b313:       49 2b 86 f0 03 00 00    sub    0x3f0(%r14),%rax
    0.00 :	    b31a:       48 8d 04 42             lea    (%rdx,%rax,2),%rax
    0.00 :	    b31e:       49 89 04 24             mov    %rax,(%r12)
    0.00 :	    b322:       e9 22 ff ff ff          jmpq   b249 <_dl_relocate_object+0x1d9>
    0.00 :	    b327:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    b32e:       00 00 
    0.00 :	    b330:       49 8b 46 70             mov    0x70(%r14),%rax
    0.00 :	    b334:       49 8b 96 80 01 00 00    mov    0x180(%r14),%rdx
    0.00 :	    b33b:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b33f:       48 89 45 80             mov    %rax,-0x80(%rbp)
    0.00 :	    b343:       31 c0                   xor    %eax,%eax
    0.00 :	    b345:       48 85 d2                test   %rdx,%rdx
    0.00 :	    b348:       74 2a                   je     b374 <_dl_relocate_object+0x304>
    0.00 :	    b34a:       8b 72 08                mov    0x8(%rdx),%esi
    0.00 :	    b34d:       48 89 c8                mov    %rcx,%rax
    0.00 :	    b350:       48 ba ab aa aa aa aa    movabs $0xaaaaaaaaaaaaaaab,%rdx
    0.00 :	    b357:       aa aa aa 
    0.00 :	    b35a:       48 f7 e2                mul    %rdx
    0.00 :	    b35d:       48 c1 ea 04             shr    $0x4,%rdx
    0.00 :	    b361:       48 39 d6                cmp    %rdx,%rsi
    0.00 :	    b364:       48 0f 46 d6             cmovbe %rsi,%rdx
    0.00 :	    b368:       48 8d 14 52             lea    (%rdx,%rdx,2),%rdx
    0.00 :	    b36c:       48 8d 04 d5 00 00 00    lea    0x0(,%rdx,8),%rax
    0.00 :	    b373:       00 
    0.00 :	    b374:       4c 8d 24 03             lea    (%rbx,%rax,1),%r12
    0.00 :	    b378:       48 8d 05 51 46 21 00    lea    0x214651(%rip),%rax        # 21f9d0 <_rtld_global+0x970>
    0.00 :	    b37f:       49 39 c6                cmp    %rax,%r14
    0.00 :	    b382:       74 39                   je     b3bd <_dl_relocate_object+0x34d>
    0.00 :	    b384:       4d 85 db                test   %r11,%r11
    0.00 :	    b387:       0f 84 93 04 00 00       je     b820 <_dl_relocate_object+0x7b0>
    0.00 :	    b38d:       4c 39 e3                cmp    %r12,%rbx
    0.00 :	    b390:       73 2b                   jae    b3bd <_dl_relocate_object+0x34d>
    0.00 :	    b392:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
    0.00 :	    b398:       83 7b 08 08             cmpl   $0x8,0x8(%rbx)
    0.00 :	    b39c:       48 8b 03                mov    (%rbx),%rax
    0.00 :	    b39f:       90                      nop
    0.00 :	    b3a0:       0f 85 ea 0a 00 00       jne    be90 <_dl_relocate_object+0xe20>
    0.00 :	    b3a6:       4a 8d 14 18             lea    (%rax,%r11,1),%rdx
    0.00 :	    b3aa:       4c 89 d8                mov    %r11,%rax
 ??:0
   50.00 :	    b3ad:       48 03 43 10             add    0x10(%rbx),%rax
    0.00 :	    b3b1:       48 83 c3 18             add    $0x18,%rbx
    0.00 :	    b3b5:       49 39 dc                cmp    %rbx,%r12
    0.00 :	    b3b8:       48 89 02                mov    %rax,(%rdx)
    0.00 :	    b3bb:       77 db                   ja     b398 <_dl_relocate_object+0x328>
    0.00 :	    b3bd:       49 8b 86 c8 01 00 00    mov    0x1c8(%r14),%rax
    0.00 :	    b3c4:       48 85 c0                test   %rax,%rax
    0.00 :	    b3c7:       0f 84 cf 01 00 00       je     b59c <_dl_relocate_object+0x52c>
    0.00 :	    b3cd:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b3d4:       48 8b 40 08             mov    0x8(%rax),%rax
    0.00 :	    b3d8:       48 89 85 70 ff ff ff    mov    %rax,-0x90(%rbp)
    0.00 :	    b3df:       0f 86 ab fe ff ff       jbe    b290 <_dl_relocate_object+0x220>
    0.00 :	    b3e5:       0f 1f 00                nopl   (%rax)
    0.00 :	    b3e8:       41 8b 44 24 0c          mov    0xc(%r12),%eax
    0.00 :	    b3ed:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	    b3f4:       4d 89 da                mov    %r11,%r10
    0.00 :	    b3f7:       48 8b 4d 80             mov    -0x80(%rbp),%rcx
    0.00 :	    b3fb:       4d 03 14 24             add    (%r12),%r10
    0.00 :	    b3ff:       4d 8b 86 e0 02 00 00    mov    0x2e0(%r14),%r8
    0.00 :	    b406:       0f b7 3c 42             movzwl (%rdx,%rax,2),%edi
    0.00 :	    b40a:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	    b40e:       4c 8d 2c c1             lea    (%rcx,%rax,8),%r13
    0.00 :	    b412:       4c 89 6d c8             mov    %r13,-0x38(%rbp)
    0.00 :	    b416:       41 8b 5c 24 08          mov    0x8(%r12),%ebx
    0.00 :	    b41b:       48 83 fb 08             cmp    $0x8,%rbx
    0.00 :	    b41f:       0f 84 4b 03 00 00       je     b770 <_dl_relocate_object+0x700>
    0.00 :	    b425:       48 85 db                test   %rbx,%rbx
    0.00 :	    b428:       0f 84 2a 03 00 00       je     b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b42e:       41 0f b6 45 04          movzbl 0x4(%r13),%eax
    0.00 :	    b433:       4d 89 f7                mov    %r14,%r15
    0.00 :	    b436:       4c 89 ea                mov    %r13,%rdx
    0.00 :	    b439:       c0 e8 04                shr    $0x4,%al
    0.00 :	    b43c:       84 c0                   test   %al,%al
    0.00 :	    b43e:       0f 84 d5 00 00 00       je     b519 <_dl_relocate_object+0x4a9>
    0.00 :	    b444:       4d 3b ae 00 04 00 00    cmp    0x400(%r14),%r13
    0.00 :	    b44b:       0f 84 7f 06 00 00       je     bad0 <_dl_relocate_object+0xa60>
    0.00 :	    b451:       48 83 fb 07             cmp    $0x7,%rbx
    0.00 :	    b455:       40 0f 94 c6             sete   %sil
    0.00 :	    b459:       48 83 fb 10             cmp    $0x10,%rbx
    0.00 :	    b45d:       0f 94 c2                sete   %dl
    0.00 :	    b460:       84 d2                   test   %dl,%dl
    0.00 :	    b462:       75 09                   jne    b46d <_dl_relocate_object+0x3fd>
    0.00 :	    b464:       40 84 f6                test   %sil,%sil
    0.00 :	    b467:       0f 84 db 01 00 00       je     b648 <_dl_relocate_object+0x5d8>
    0.00 :	    b46d:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    b472:       89 c8                   mov    %ecx,%eax
    0.00 :	    b474:       83 c8 02                or     $0x2,%eax
    0.00 :	    b477:       48 83 fb 05             cmp    $0x5,%rbx
    0.00 :	    b47b:       0f 44 c8                cmove  %eax,%ecx
    0.00 :	    b47e:       48 89 f8                mov    %rdi,%rax
    0.00 :	    b481:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    b485:       41 89 8e 08 04 00 00    mov    %ecx,0x408(%r14)
    0.00 :	    b48c:       25 ff 7f 00 00          and    $0x7fff,%eax
    0.00 :	    b491:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	    b495:       49 89 96 00 04 00 00    mov    %rdx,0x400(%r14)
    0.00 :	    b49c:       49 8d 04 c0             lea    (%r8,%rax,8),%rax
    0.00 :	    b4a0:       48 85 c0                test   %rax,%rax
    0.00 :	    b4a3:       74 0e                   je     b4b3 <_dl_relocate_object+0x443>
    0.00 :	    b4a5:       8b 70 08                mov    0x8(%rax),%esi
    0.00 :	    b4a8:       85 f6                   test   %esi,%esi
    0.00 :	    b4aa:       be 00 00 00 00          mov    $0x0,%esi
    0.00 :	    b4af:       48 0f 44 c6             cmove  %rsi,%rax
    0.00 :	    b4b3:       8b 3a                   mov    (%rdx),%edi
    0.00 :	    b4b5:       41 89 c9                mov    %ecx,%r9d
    0.00 :	    b4b8:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	    b4bf:       48 03 bd 60 ff ff ff    add    -0xa0(%rbp),%rdi
    0.00 :	    b4c6:       48 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%rcx
    0.00 :	    b4cd:       49 89 c0                mov    %rax,%r8
    0.00 :	    b4d0:       4c 89 f6                mov    %r14,%rsi
    0.00 :	    b4d3:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    b4da:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b4e1:       48 c7 44 24 08 00 00    movq   $0x0,0x8(%rsp)
    0.00 :	    b4e8:       00 00 
    0.00 :	    b4ea:       c7 04 24 01 00 00 00    movl   $0x1,(%rsp)
    0.00 :	    b4f1:       e8 7a e6 ff ff          callq  9b70 <_dl_lookup_symbol_x>
    0.00 :	    b4f6:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    b4fa:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b501:       49 89 c7                mov    %rax,%r15
    0.00 :	    b504:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    b50b:       49 89 86 10 04 00 00    mov    %rax,0x410(%r14)
    0.00 :	    b512:       49 89 96 18 04 00 00    mov    %rdx,0x418(%r14)
    0.00 :	    b519:       31 c9                   xor    %ecx,%ecx
    0.00 :	    b51b:       48 85 d2                test   %rdx,%rdx
    0.00 :	    b51e:       74 17                   je     b537 <_dl_relocate_object+0x4c7>
    0.00 :	    b520:       0f b6 42 04             movzbl 0x4(%rdx),%eax
   50.00 :	    b524:       48 8b 4a 08             mov    0x8(%rdx),%rcx
    0.00 :	    b528:       49 03 0f                add    (%r15),%rcx
    0.00 :	    b52b:       83 e0 0f                and    $0xf,%eax
    0.00 :	    b52e:       83 f8 0a                cmp    $0xa,%eax
    0.00 :	    b531:       0f 84 99 02 00 00       je     b7d0 <_dl_relocate_object+0x760>
    0.00 :	    b537:       48 83 fb 25             cmp    $0x25,%rbx
    0.00 :	    b53b:       0f 86 57 02 00 00       jbe    b798 <_dl_relocate_object+0x728>
    0.00 :	    b541:       31 d2                   xor    %edx,%edx
    0.00 :	    b543:       89 de                   mov    %ebx,%esi
    0.00 :	    b545:       4c 89 f7                mov    %r14,%rdi
    0.00 :	    b548:       e8 43 f8 ff ff          callq  ad90 <_dl_reloc_bad_type>
    0.00 :	    b54d:       48 83 7d c8 00          cmpq   $0x0,-0x38(%rbp)
    0.00 :	    b552:       0f 84 57 09 00 00       je     beaf <_dl_relocate_object+0xe3f>
    0.00 :	    b558:       49 8b 87 48 04 00 00    mov    0x448(%r15),%rax
    0.00 :	    b55f:       48 83 f8 01             cmp    $0x1,%rax
    0.00 :	    b563:       0f 84 d5 09 00 00       je     bf3e <_dl_relocate_object+0xece>
    0.00 :	    b569:       48 85 c0                test   %rax,%rax
    0.00 :	    b56c:       0f 84 a0 09 00 00       je     bf12 <_dl_relocate_object+0xea2>
    0.00 :	    b572:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    b576:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    b57b:       48 8d 0d 4e a5 00 00    lea    0xa54e(%rip),%rcx        # 15ad0 <_dl_tlsdesc_return>
    0.00 :	    b582:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    b586:       49 2b 87 48 04 00 00    sub    0x448(%r15),%rax
    0.00 :	    b58d:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    b591:       49 89 0a                mov    %rcx,(%r10)
    0.00 :	    b594:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b598:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b59c:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b5a3:       0f 86 e7 fc ff ff       jbe    b290 <_dl_relocate_object+0x220>
    0.00 :	    b5a9:       41 8b 44 24 0c          mov    0xc(%r12),%eax
    0.00 :	    b5ae:       48 8b 55 80             mov    -0x80(%rbp),%rdx
    0.00 :	    b5b2:       4d 89 da                mov    %r11,%r10
    0.00 :	    b5b5:       4d 03 14 24             add    (%r12),%r10
    0.00 :	    b5b9:       48 8d 04 40             lea    (%rax,%rax,2),%rax
    0.00 :	    b5bd:       4c 8d 2c c2             lea    (%rdx,%rax,8),%r13
    0.00 :	    b5c1:       4c 89 6d c8             mov    %r13,-0x38(%rbp)
    0.00 :	    b5c5:       41 8b 5c 24 08          mov    0x8(%r12),%ebx
    0.00 :	    b5ca:       48 83 fb 08             cmp    $0x8,%rbx
    0.00 :	    b5ce:       0f 84 34 02 00 00       je     b808 <_dl_relocate_object+0x798>
    0.00 :	    b5d4:       48 85 db                test   %rbx,%rbx
    0.00 :	    b5d7:       74 bf                   je     b598 <_dl_relocate_object+0x528>
    0.00 :	    b5d9:       41 0f b6 45 04          movzbl 0x4(%r13),%eax
    0.00 :	    b5de:       4d 89 f7                mov    %r14,%r15
    0.00 :	    b5e1:       4c 89 ea                mov    %r13,%rdx
    0.00 :	    b5e4:       c0 e8 04                shr    $0x4,%al
    0.00 :	    b5e7:       84 c0                   test   %al,%al
    0.00 :	    b5e9:       0f 84 01 01 00 00       je     b6f0 <_dl_relocate_object+0x680>
    0.00 :	    b5ef:       4d 3b ae 00 04 00 00    cmp    0x400(%r14),%r13
    0.00 :	    b5f6:       74 7d                   je     b675 <_dl_relocate_object+0x605>
    0.00 :	    b5f8:       48 83 fb 07             cmp    $0x7,%rbx
    0.00 :	    b5fc:       40 0f 94 c6             sete   %sil
    0.00 :	    b600:       48 83 fb 10             cmp    $0x10,%rbx
    0.00 :	    b604:       0f 94 c2                sete   %dl
    0.00 :	    b607:       84 d2                   test   %dl,%dl
    0.00 :	    b609:       0f 85 81 05 00 00       jne    bb90 <_dl_relocate_object+0xb20>
    0.00 :	    b60f:       40 84 f6                test   %sil,%sil
    0.00 :	    b612:       0f 85 78 05 00 00       jne    bb90 <_dl_relocate_object+0xb20>
    0.00 :	    b618:       48 83 fb 11             cmp    $0x11,%rbx
    0.00 :	    b61c:       0f 84 6e 05 00 00       je     bb90 <_dl_relocate_object+0xb20>
    0.00 :	    b622:       48 83 fb 12             cmp    $0x12,%rbx
    0.00 :	    b626:       0f 84 64 05 00 00       je     bb90 <_dl_relocate_object+0xb20>
    0.00 :	    b62c:       48 83 fb 24             cmp    $0x24,%rbx
    0.00 :	    b630:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	    b635:       0f 84 66 05 00 00       je     bba1 <_dl_relocate_object+0xb31>
    0.00 :	    b63b:       30 d2                   xor    %dl,%dl
    0.00 :	    b63d:       0f 1f 00                nopl   (%rax)
    0.00 :	    b640:       e9 50 05 00 00          jmpq   bb95 <_dl_relocate_object+0xb25>
    0.00 :	    b645:       0f 1f 00                nopl   (%rax)
    0.00 :	    b648:       48 83 fb 11             cmp    $0x11,%rbx
    0.00 :	    b64c:       0f 84 1b fe ff ff       je     b46d <_dl_relocate_object+0x3fd>
    0.00 :	    b652:       48 83 fb 12             cmp    $0x12,%rbx
    0.00 :	    b656:       0f 84 11 fe ff ff       je     b46d <_dl_relocate_object+0x3fd>
    0.00 :	    b65c:       48 83 fb 24             cmp    $0x24,%rbx
    0.00 :	    b660:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    b665:       0f 84 13 fe ff ff       je     b47e <_dl_relocate_object+0x40e>
    0.00 :	    b66b:       30 c9                   xor    %cl,%cl
    0.00 :	    b66d:       0f 1f 00                nopl   (%rax)
    0.00 :	    b670:       e9 fd fd ff ff          jmpq   b472 <_dl_relocate_object+0x402>
    0.00 :	    b675:       48 83 fb 07             cmp    $0x7,%rbx
    0.00 :	    b679:       40 0f 94 c6             sete   %sil
    0.00 :	    b67d:       48 83 fb 10             cmp    $0x10,%rbx
    0.00 :	    b681:       0f 94 c2                sete   %dl
    0.00 :	    b684:       40 84 f6                test   %sil,%sil
    0.00 :	    b687:       0f 85 7b 08 00 00       jne    bf08 <_dl_relocate_object+0xe98>
    0.00 :	    b68d:       84 d2                   test   %dl,%dl
    0.00 :	    b68f:       0f 85 73 08 00 00       jne    bf08 <_dl_relocate_object+0xe98>
    0.00 :	    b695:       48 83 fb 11             cmp    $0x11,%rbx
    0.00 :	    b699:       0f 84 69 08 00 00       je     bf08 <_dl_relocate_object+0xe98>
    0.00 :	    b69f:       48 83 fb 12             cmp    $0x12,%rbx
    0.00 :	    b6a3:       0f 84 5f 08 00 00       je     bf08 <_dl_relocate_object+0xe98>
    0.00 :	    b6a9:       48 83 fb 24             cmp    $0x24,%rbx
    0.00 :	    b6ad:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    b6b2:       74 0e                   je     b6c2 <_dl_relocate_object+0x652>
    0.00 :	    b6b4:       30 c9                   xor    %cl,%cl
    0.00 :	    b6b6:       89 c8                   mov    %ecx,%eax
    0.00 :	    b6b8:       83 c8 02                or     $0x2,%eax
    0.00 :	    b6bb:       48 83 fb 05             cmp    $0x5,%rbx
    0.00 :	    b6bf:       0f 44 c8                cmove  %eax,%ecx
    0.00 :	    b6c2:       41 39 8e 08 04 00 00    cmp    %ecx,0x408(%r14)
    0.00 :	    b6c9:       0f 85 38 ff ff ff       jne    b607 <_dl_relocate_object+0x597>
    0.00 :	    b6cf:       48 83 05 e1 42 21 00    addq   $0x1,0x2142e1(%rip)        # 21f9b8 <_rtld_global+0x958>
    0.00 :	    b6d6:       01 
    0.00 :	    b6d7:       49 8b 86 18 04 00 00    mov    0x418(%r14),%rax
    0.00 :	    b6de:       4d 8b be 10 04 00 00    mov    0x410(%r14),%r15
    0.00 :	    b6e5:       48 89 45 c8             mov    %rax,-0x38(%rbp)
    0.00 :	    b6e9:       48 89 c2                mov    %rax,%rdx
    0.00 :	    b6ec:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b6f0:       31 c9                   xor    %ecx,%ecx
    0.00 :	    b6f2:       48 85 d2                test   %rdx,%rdx
    0.00 :	    b6f5:       74 17                   je     b70e <_dl_relocate_object+0x69e>
    0.00 :	    b6f7:       0f b6 42 04             movzbl 0x4(%rdx),%eax
    0.00 :	    b6fb:       48 8b 4a 08             mov    0x8(%rdx),%rcx
    0.00 :	    b6ff:       49 03 0f                add    (%r15),%rcx
    0.00 :	    b702:       83 e0 0f                and    $0xf,%eax
    0.00 :	    b705:       83 f8 0a                cmp    $0xa,%eax
    0.00 :	    b708:       0f 84 2f 04 00 00       je     bb3d <_dl_relocate_object+0xacd>
    0.00 :	    b70e:       48 83 fb 25             cmp    $0x25,%rbx
    0.00 :	    b712:       0f 87 29 fe ff ff       ja     b541 <_dl_relocate_object+0x4d1>
    0.00 :	    b718:       48 8d 35 21 d3 00 00    lea    0xd321(%rip),%rsi        # 18a40 <expected2.12835+0x17>
    0.00 :	    b71f:       48 63 04 9e             movslq (%rsi,%rbx,4),%rax
    0.00 :	    b723:       48 01 f0                add    %rsi,%rax
    0.00 :	    b726:       ff e0                   jmpq   *%rax
    0.00 :	    b728:       48 83 7d c8 00          cmpq   $0x0,-0x38(%rbp)
    0.00 :	    b72d:       74 29                   je     b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b72f:       49 83 bf 48 04 00 00    cmpq   $0x1,0x448(%r15)
    0.00 :	    b736:       01 
    0.00 :	    b737:       0f 86 a2 07 00 00       jbe    bedf <_dl_relocate_object+0xe6f>
    0.00 :	    b73d:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    b741:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    b746:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    b74a:       49 2b 87 48 04 00 00    sub    0x448(%r15),%rax
    0.00 :	    b751:       49 89 02                mov    %rax,(%r10)
    0.00 :	    b754:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b758:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b75c:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b763:       0f 87 7f fc ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    b769:       e9 22 fb ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b76e:       66 90                   xchg   %ax,%ax
    0.00 :	    b770:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    b775:       49 03 06                add    (%r14),%rax
    0.00 :	    b778:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b77c:       49 89 02                mov    %rax,(%r10)
    0.00 :	    b77f:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b786:       0f 87 5c fc ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    b78c:       e9 ff fa ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b791:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    b798:       48 8d 15 39 d3 00 00    lea    0xd339(%rip),%rdx        # 18ad8 <expected2.12835+0xaf>
    0.00 :	    b79f:       48 63 04 9a             movslq (%rdx,%rbx,4),%rax
    0.00 :	    b7a3:       48 01 d0                add    %rdx,%rax
    0.00 :	    b7a6:       ff e0                   jmpq   *%rax
    0.00 :	    b7a8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	    b7af:       00 
    0.00 :	    b7b0:       49 03 4c 24 10          add    0x10(%r12),%rcx
    0.00 :	    b7b5:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b7b9:       49 89 0a                mov    %rcx,(%r10)
    0.00 :	    b7bc:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b7c3:       0f 87 1f fc ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    b7c9:       e9 c2 fa ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b7ce:       66 90                   xchg   %ax,%ax
    0.00 :	    b7d0:       66 83 7a 06 00          cmpw   $0x0,0x6(%rdx)
    0.00 :	    b7d5:       0f 84 5c fd ff ff       je     b537 <_dl_relocate_object+0x4c7>
    0.00 :	    b7db:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    b7e2:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b7e9:       ff d1                   callq  *%rcx
    0.00 :	    b7eb:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b7f2:       48 89 c1                mov    %rax,%rcx
    0.00 :	    b7f5:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    b7fc:       e9 36 fd ff ff          jmpq   b537 <_dl_relocate_object+0x4c7>
    0.00 :	    b801:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    b808:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    b80d:       49 03 06                add    (%r14),%rax
    0.00 :	    b810:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b814:       49 89 02                mov    %rax,(%r10)
    0.00 :	    b817:       e9 80 fd ff ff          jmpq   b59c <_dl_relocate_object+0x52c>
    0.00 :	    b81c:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b820:       49 83 be 38 02 00 00    cmpq   $0x0,0x238(%r14)
    0.00 :	    b827:       00 
    0.00 :	    b828:       0f 85 8f fb ff ff       jne    b3bd <_dl_relocate_object+0x34d>
    0.00 :	    b82e:       e9 5a fb ff ff          jmpq   b38d <_dl_relocate_object+0x31d>
    0.00 :	    b833:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    b838:       84 db                   test   %bl,%bl
    0.00 :	    b83a:       0f 84 df f8 ff ff       je     b11f <_dl_relocate_object+0xaf>
    0.00 :	    b840:       49 8b 46 58             mov    0x58(%r14),%rax
    0.00 :	    b844:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	    b848:       48 8b 42 08             mov    0x8(%rdx),%rax
    0.00 :	    b84c:       48 85 c0                test   %rax,%rax
    0.00 :	    b84f:       74 15                   je     b866 <_dl_relocate_object+0x7f6>
    0.00 :	    b851:       49 03 06                add    (%r14),%rax
    0.00 :	    b854:       49 89 86 e8 03 00 00    mov    %rax,0x3e8(%r14)
    0.00 :	    b85b:       48 8d 42 18             lea    0x18(%rdx),%rax
    0.00 :	    b85f:       49 89 86 f0 03 00 00    mov    %rax,0x3f0(%r14)
    0.00 :	    b866:       4c 89 72 08             mov    %r14,0x8(%rdx)
    0.00 :	    b86a:       44 8b 85 54 ff ff ff    mov    -0xac(%rbp),%r8d
    0.00 :	    b871:       45 85 c0                test   %r8d,%r8d
    0.00 :	    b874:       0f 84 f4 02 00 00       je     bb6e <_dl_relocate_object+0xafe>
    0.00 :	    b87a:       48 8d 0d 7f 84 00 00    lea    0x847f(%rip),%rcx        # 13d00 <_dl_runtime_profile>
    0.00 :	    b881:       48 89 4a 10             mov    %rcx,0x10(%rdx)
    0.00 :	    b885:       48 8b 3d 14 34 21 00    mov    0x213414(%rip),%rdi        # 21eca0 <_rtld_global_ro+0x80>
    0.00 :	    b88c:       48 85 ff                test   %rdi,%rdi
    0.00 :	    b88f:       0f 84 8a f8 ff ff       je     b11f <_dl_relocate_object+0xaf>
    0.00 :	    b895:       4c 89 f6                mov    %r14,%rsi
    0.00 :	    b898:       e8 e3 32 00 00          callq  eb80 <_dl_name_match_p>
    0.00 :	    b89d:       85 c0                   test   %eax,%eax
    0.00 :	    b89f:       0f 84 7a f8 ff ff       je     b11f <_dl_relocate_object+0xaf>
    0.00 :	    b8a5:       4c 89 35 fc 40 21 00    mov    %r14,0x2140fc(%rip)        # 21f9a8 <_rtld_global+0x948>
    0.00 :	    b8ac:       e9 6e f8 ff ff          jmpq   b11f <_dl_relocate_object+0xaf>
    0.00 :	    b8b1:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    b8b6:       49 03 06                add    (%r14),%rax
    0.00 :	    b8b9:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b8bd:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    b8c4:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b8cb:       ff d0                   callq  *%rax
    0.00 :	    b8cd:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    b8d4:       49 89 02                mov    %rax,(%r10)
    0.00 :	    b8d7:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b8de:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b8e5:       0f 87 fd fa ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    b8eb:       e9 a0 f9 ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b8f0:       48 89 c8                mov    %rcx,%rax
    0.00 :	    b8f3:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	    b8f8:       ba ff ff ff ff          mov    $0xffffffff,%edx
    0.00 :	    b8fd:       48 39 d0                cmp    %rdx,%rax
    0.00 :	    b900:       41 89 02                mov    %eax,(%r10)
    0.00 :	    b903:       0f 86 4f fe ff ff       jbe    b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b909:       48 8d 3d e8 01 01 00    lea    0x101e8(%rip),%rdi        # 1baf8 <__PRETTY_FUNCTION__.3644+0x1787>
    0.00 :	    b910:       48 8b 05 f1 32 21 00    mov    0x2132f1(%rip),%rax        # 21ec08 <_dl_argv>
    0.00 :	    b917:       49 8b 76 68             mov    0x68(%r14),%rsi
    0.00 :	    b91b:       48 8d 0d 88 dc 00 00    lea    0xdc88(%rip),%rcx        # 195aa <intel_02_known+0x2ca>
    0.00 :	    b922:       48 8b 10                mov    (%rax),%rdx
    0.00 :	    b925:       48 85 d2                test   %rdx,%rdx
    0.00 :	    b928:       48 0f 44 d1             cmove  %rcx,%rdx
    0.00 :	    b92c:       41 8b 4d 00             mov    0x0(%r13),%ecx
    0.00 :	    b930:       31 c0                   xor    %eax,%eax
    0.00 :	    b932:       48 03 4e 08             add    0x8(%rsi),%rcx
    0.00 :	    b936:       48 89 fe                mov    %rdi,%rsi
    0.00 :	    b939:       bf 02 00 00 00          mov    $0x2,%edi
    0.00 :	    b93e:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b945:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    b949:       e8 b2 38 00 00          callq  f200 <_dl_dprintf>
    0.00 :	    b94e:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    b955:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b95c:       0f 87 86 fa ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    b962:       e9 29 f9 ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    b967:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    b96e:       00 00 
    0.00 :	    b970:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    b974:       48 85 c0                test   %rax,%rax
    0.00 :	    b977:       0f 84 db fd ff ff       je     b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b97d:       49 8b 55 10             mov    0x10(%r13),%rdx
    0.00 :	    b981:       48 39 50 10             cmp    %rdx,0x10(%rax)
    0.00 :	    b985:       48 89 ce                mov    %rcx,%rsi
    0.00 :	    b988:       48 0f 46 50 10          cmovbe 0x10(%rax),%rdx
    0.00 :	    b98d:       4c 89 d7                mov    %r10,%rdi
    0.00 :	    b990:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    b997:       e8 54 b9 00 00          callq  172f0 <memcpy>
    0.00 :	    b99c:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    b9a0:       49 8b 75 10             mov    0x10(%r13),%rsi
    0.00 :	    b9a4:       48 8d 3d cd 01 01 00    lea    0x101cd(%rip),%rdi        # 1bb78 <__PRETTY_FUNCTION__.3644+0x1807>
    0.00 :	    b9ab:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    b9b2:       48 39 70 10             cmp    %rsi,0x10(%rax)
    0.00 :	    b9b6:       0f 87 54 ff ff ff       ja     b910 <_dl_relocate_object+0x8a0>
    0.00 :	    b9bc:       0f 83 96 fd ff ff       jae    b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b9c2:       8b 0d 8c 32 21 00       mov    0x21328c(%rip),%ecx        # 21ec54 <_rtld_global_ro+0x34>
    0.00 :	    b9c8:       48 8d 3d a9 01 01 00    lea    0x101a9(%rip),%rdi        # 1bb78 <__PRETTY_FUNCTION__.3644+0x1807>
    0.00 :	    b9cf:       85 c9                   test   %ecx,%ecx
    0.00 :	    b9d1:       0f 85 39 ff ff ff       jne    b910 <_dl_relocate_object+0x8a0>
    0.00 :	    b9d7:       e9 7c fd ff ff          jmpq   b758 <_dl_relocate_object+0x6e8>
    0.00 :	    b9dc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	    b9e0:       48 89 c8                mov    %rcx,%rax
    0.00 :	    b9e3:       48 8d 3d 4e 01 01 00    lea    0x1014e(%rip),%rdi        # 1bb38 <__PRETTY_FUNCTION__.3644+0x17c7>
    0.00 :	    b9ea:       4c 29 d0                sub    %r10,%rax
    0.00 :	    b9ed:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	    b9f2:       48 63 d0                movslq %eax,%rdx
    0.00 :	    b9f5:       41 89 02                mov    %eax,(%r10)
    0.00 :	    b9f8:       48 39 d0                cmp    %rdx,%rax
    0.00 :	    b9fb:       0f 85 0f ff ff ff       jne    b910 <_dl_relocate_object+0x8a0>
    0.00 :	    ba01:       e9 52 fd ff ff          jmpq   b758 <_dl_relocate_object+0x6e8>
    0.00 :	    ba06:       48 83 7d c8 00          cmpq   $0x0,-0x38(%rbp)
    0.00 :	    ba0b:       0f 84 b6 04 00 00       je     bec7 <_dl_relocate_object+0xe57>
    0.00 :	    ba11:       49 8b 87 48 04 00 00    mov    0x448(%r15),%rax
    0.00 :	    ba18:       48 83 f8 01             cmp    $0x1,%rax
    0.00 :	    ba1c:       0f 84 79 02 00 00       je     bc9b <_dl_relocate_object+0xc2b>
    0.00 :	    ba22:       48 85 c0                test   %rax,%rax
    0.00 :	    ba25:       0f 84 44 02 00 00       je     bc6f <_dl_relocate_object+0xbff>
    0.00 :	    ba2b:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    ba2f:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    ba34:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    ba38:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    ba3c:       49 2b 87 48 04 00 00    sub    0x448(%r15),%rax
    0.00 :	    ba43:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    ba47:       48 8d 05 82 a0 00 00    lea    0xa082(%rip),%rax        # 15ad0 <_dl_tlsdesc_return>
    0.00 :	    ba4e:       49 89 02                mov    %rax,(%r10)
    0.00 :	    ba51:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    ba58:       0f 87 8a f9 ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    ba5e:       e9 2d f8 ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    ba63:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    ba68:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    ba6c:       48 85 d2                test   %rdx,%rdx
    0.00 :	    ba6f:       0f 84 e3 fc ff ff       je     b758 <_dl_relocate_object+0x6e8>
    0.00 :	    ba75:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    ba7a:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    ba7e:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    ba82:       49 89 02                mov    %rax,(%r10)
    0.00 :	    ba85:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    ba8c:       0f 87 56 f9 ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    ba92:       e9 f9 f7 ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    ba97:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    ba9e:       00 00 
    0.00 :	    baa0:       4d 85 ff                test   %r15,%r15
    0.00 :	    baa3:       0f 84 af fc ff ff       je     b758 <_dl_relocate_object+0x6e8>
    0.00 :	    baa9:       49 8b 87 50 04 00 00    mov    0x450(%r15),%rax
    0.00 :	    bab0:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    bab4:       49 89 02                mov    %rax,(%r10)
    0.00 :	    bab7:       4c 39 a5 78 ff ff ff    cmp    %r12,-0x88(%rbp)
    0.00 :	    babe:       0f 87 24 f9 ff ff       ja     b3e8 <_dl_relocate_object+0x378>
    0.00 :	    bac4:       e9 c7 f7 ff ff          jmpq   b290 <_dl_relocate_object+0x220>
    0.00 :	    bac9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    bad0:       48 83 fb 07             cmp    $0x7,%rbx
    0.00 :	    bad4:       40 0f 94 c6             sete   %sil
    0.00 :	    bad8:       48 83 fb 10             cmp    $0x10,%rbx
    0.00 :	    badc:       0f 94 c2                sete   %dl
    0.00 :	    badf:       40 84 f6                test   %sil,%sil
    0.00 :	    bae2:       0f 84 41 01 00 00       je     bc29 <_dl_relocate_object+0xbb9>
    0.00 :	    bae8:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    baed:       89 c8                   mov    %ecx,%eax
    0.00 :	    baef:       83 c8 02                or     $0x2,%eax
    0.00 :	    baf2:       48 83 fb 05             cmp    $0x5,%rbx
    0.00 :	    baf6:       0f 44 c8                cmove  %eax,%ecx
    0.00 :	    baf9:       41 39 8e 08 04 00 00    cmp    %ecx,0x408(%r14)
    0.00 :	    bb00:       0f 85 5a f9 ff ff       jne    b460 <_dl_relocate_object+0x3f0>
    0.00 :	    bb06:       48 83 05 aa 3e 21 00    addq   $0x1,0x213eaa(%rip)        # 21f9b8 <_rtld_global+0x958>
    0.00 :	    bb0d:       01 
    0.00 :	    bb0e:       49 8b 86 18 04 00 00    mov    0x418(%r14),%rax
    0.00 :	    bb15:       4d 8b be 10 04 00 00    mov    0x410(%r14),%r15
    0.00 :	    bb1c:       48 89 45 c8             mov    %rax,-0x38(%rbp)
    0.00 :	    bb20:       48 89 c2                mov    %rax,%rdx
    0.00 :	    bb23:       e9 f1 f9 ff ff          jmpq   b519 <_dl_relocate_object+0x4a9>
    0.00 :	    bb28:       49 83 be 00 01 00 00    cmpq   $0x0,0x100(%r14)
    0.00 :	    bb2f:       00 
    0.00 :	    bb30:       44 0f 45 a5 54 ff ff    cmovne -0xac(%rbp),%r12d
    0.00 :	    bb37:       ff 
    0.00 :	    bb38:       e9 99 f5 ff ff          jmpq   b0d6 <_dl_relocate_object+0x66>
    0.00 :	    bb3d:       66 83 7a 06 00          cmpw   $0x0,0x6(%rdx)
    0.00 :	    bb42:       0f 84 c6 fb ff ff       je     b70e <_dl_relocate_object+0x69e>
    0.00 :	    bb48:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bb4f:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bb56:       ff d1                   callq  *%rcx
    0.00 :	    bb58:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bb5f:       48 89 c1                mov    %rax,%rcx
    0.00 :	    bb62:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bb69:       e9 a0 fb ff ff          jmpq   b70e <_dl_relocate_object+0x69e>
    0.00 :	    bb6e:       48 8d 35 1b 81 00 00    lea    0x811b(%rip),%rsi        # 13c90 <_dl_runtime_resolve>
    0.00 :	    bb75:       84 db                   test   %bl,%bl
    0.00 :	    bb77:       48 89 72 10             mov    %rsi,0x10(%rdx)
    0.00 :	    bb7b:       49 8b 86 88 02 00 00    mov    0x288(%r14),%rax
    0.00 :	    bb82:       0f 84 b9 f5 ff ff       je     b141 <_dl_relocate_object+0xd1>
    0.00 :	    bb88:       e9 9d f5 ff ff          jmpq   b12a <_dl_relocate_object+0xba>
    0.00 :	    bb8d:       0f 1f 00                nopl   (%rax)
    0.00 :	    bb90:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	    bb95:       89 d0                   mov    %edx,%eax
    0.00 :	    bb97:       83 c8 02                or     $0x2,%eax
    0.00 :	    bb9a:       48 83 fb 05             cmp    $0x5,%rbx
    0.00 :	    bb9e:       0f 44 d0                cmove  %eax,%edx
    0.00 :	    bba1:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    bba5:       41 89 96 08 04 00 00    mov    %edx,0x408(%r14)
    0.00 :	    bbac:       41 89 d1                mov    %edx,%r9d
    0.00 :	    bbaf:       48 8b 8d 58 ff ff ff    mov    -0xa8(%rbp),%rcx
    0.00 :	    bbb6:       48 8b 95 40 ff ff ff    mov    -0xc0(%rbp),%rdx
    0.00 :	    bbbd:       45 31 c0                xor    %r8d,%r8d
    0.00 :	    bbc0:       4c 89 f6                mov    %r14,%rsi
    0.00 :	    bbc3:       49 89 86 00 04 00 00    mov    %rax,0x400(%r14)
    0.00 :	    bbca:       8b 38                   mov    (%rax),%edi
    0.00 :	    bbcc:       48 03 bd 60 ff ff ff    add    -0xa0(%rbp),%rdi
    0.00 :	    bbd3:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bbda:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bbe1:       48 c7 44 24 08 00 00    movq   $0x0,0x8(%rsp)
    0.00 :	    bbe8:       00 00 
    0.00 :	    bbea:       c7 04 24 01 00 00 00    movl   $0x1,(%rsp)
    0.00 :	    bbf1:       e8 7a df ff ff          callq  9b70 <_dl_lookup_symbol_x>
    0.00 :	    bbf6:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    bbfa:       31 c9                   xor    %ecx,%ecx
    0.00 :	    bbfc:       49 89 c7                mov    %rax,%r15
    0.00 :	    bbff:       49 89 86 10 04 00 00    mov    %rax,0x410(%r14)
    0.00 :	    bc06:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bc0d:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bc14:       48 85 d2                test   %rdx,%rdx
    0.00 :	    bc17:       49 89 96 18 04 00 00    mov    %rdx,0x418(%r14)
    0.00 :	    bc1e:       0f 85 d3 fa ff ff       jne    b6f7 <_dl_relocate_object+0x687>
    0.00 :	    bc24:       e9 e5 fa ff ff          jmpq   b70e <_dl_relocate_object+0x69e>
    0.00 :	    bc29:       84 d2                   test   %dl,%dl
    0.00 :	    bc2b:       0f 85 b7 fe ff ff       jne    bae8 <_dl_relocate_object+0xa78>
    0.00 :	    bc31:       48 83 fb 11             cmp    $0x11,%rbx
    0.00 :	    bc35:       0f 1f 00                nopl   (%rax)
    0.00 :	    bc38:       0f 84 aa fe ff ff       je     bae8 <_dl_relocate_object+0xa78>
    0.00 :	    bc3e:       48 83 fb 12             cmp    $0x12,%rbx
    0.00 :	    bc42:       0f 84 a0 fe ff ff       je     bae8 <_dl_relocate_object+0xa78>
    0.00 :	    bc48:       48 83 fb 24             cmp    $0x24,%rbx
    0.00 :	    bc4c:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    bc51:       0f 84 a2 fe ff ff       je     baf9 <_dl_relocate_object+0xa89>
    0.00 :	    bc57:       30 c9                   xor    %cl,%cl
    0.00 :	    bc59:       e9 8f fe ff ff          jmpq   baed <_dl_relocate_object+0xa7d>
    0.00 :	    bc5e:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	    bc62:       48 03 50 08             add    0x8(%rax),%rdx
    0.00 :	    bc66:       48 89 55 98             mov    %rdx,-0x68(%rbp)
    0.00 :	    bc6a:       e9 52 f5 ff ff          jmpq   b1c1 <_dl_relocate_object+0x151>
    0.00 :	    bc6f:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bc72:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bc79:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bc80:       e8 db f2 ff ff          callq  af60 <_dl_try_allocate_static_tls>
    0.00 :	    bc85:       85 c0                   test   %eax,%eax
    0.00 :	    bc87:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bc8e:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bc95:       0f 84 90 fd ff ff       je     ba2b <_dl_relocate_object+0x9bb>
    0.00 :	    bc9b:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    bc9f:       49 8b 74 24 10          mov    0x10(%r12),%rsi
    0.00 :	    bca4:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bca7:       48 03 70 08             add    0x8(%rax),%rsi
    0.00 :	    bcab:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bcb2:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bcb9:       e8 42 99 00 00          callq  15600 <_dl_make_tlsdesc_dynamic>
    0.00 :	    bcbe:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bcc5:       48 8d 35 24 9e 00 00    lea    0x9e24(%rip),%rsi        # 15af0 <_dl_tlsdesc_dynamic>
    0.00 :	    bccc:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    bcd0:       49 89 32                mov    %rsi,(%r10)
    0.00 :	    bcd3:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bcda:       e9 79 fa ff ff          jmpq   b758 <_dl_relocate_object+0x6e8>
    0.00 :	    bcdf:       49 03 4c 24 10          add    0x10(%r12),%rcx
    0.00 :	    bce4:       49 83 c4 18             add    $0x18,%r12
    0.00 :	    bce8:       49 89 0a                mov    %rcx,(%r10)
    0.00 :	    bceb:       e9 ac f8 ff ff          jmpq   b59c <_dl_relocate_object+0x52c>
    0.00 :	    bcf0:       4d 85 ff                test   %r15,%r15
    0.00 :	    bcf3:       0f 84 9f f8 ff ff       je     b598 <_dl_relocate_object+0x528>
    0.00 :	    bcf9:       49 8b 87 50 04 00 00    mov    0x450(%r15),%rax
    0.00 :	    bd00:       49 89 02                mov    %rax,(%r10)
    0.00 :	    bd03:       e9 90 f8 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    bd08:       48 89 c8                mov    %rcx,%rax
    0.00 :	    bd0b:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	    bd10:       be ff ff ff ff          mov    $0xffffffff,%esi
    0.00 :	    bd15:       48 39 f0                cmp    %rsi,%rax
    0.00 :	    bd18:       41 89 02                mov    %eax,(%r10)
    0.00 :	    bd1b:       0f 86 77 f8 ff ff       jbe    b598 <_dl_relocate_object+0x528>
    0.00 :	    bd21:       48 8d 3d d0 fd 00 00    lea    0xfdd0(%rip),%rdi        # 1baf8 <__PRETTY_FUNCTION__.3644+0x1787>
    0.00 :	    bd28:       48 8b 05 d9 2e 21 00    mov    0x212ed9(%rip),%rax        # 21ec08 <_dl_argv>
    0.00 :	    bd2f:       49 8b 76 68             mov    0x68(%r14),%rsi
    0.00 :	    bd33:       41 8b 4d 00             mov    0x0(%r13),%ecx
    0.00 :	    bd37:       48 8b 10                mov    (%rax),%rdx
    0.00 :	    bd3a:       48 8d 05 69 d8 00 00    lea    0xd869(%rip),%rax        # 195aa <intel_02_known+0x2ca>
    0.00 :	    bd41:       48 85 d2                test   %rdx,%rdx
    0.00 :	    bd44:       48 0f 44 d0             cmove  %rax,%rdx
    0.00 :	    bd48:       48 03 4e 08             add    0x8(%rsi),%rcx
    0.00 :	    bd4c:       31 c0                   xor    %eax,%eax
    0.00 :	    bd4e:       48 89 fe                mov    %rdi,%rsi
    0.00 :	    bd51:       bf 02 00 00 00          mov    $0x2,%edi
    0.00 :	    bd56:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bd5d:       e8 9e 34 00 00          callq  f200 <_dl_dprintf>
    0.00 :	    bd62:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bd69:       e9 2a f8 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    bd6e:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    bd72:       48 85 c0                test   %rax,%rax
    0.00 :	    bd75:       0f 84 1d f8 ff ff       je     b598 <_dl_relocate_object+0x528>
    0.00 :	    bd7b:       49 8b 55 10             mov    0x10(%r13),%rdx
    0.00 :	    bd7f:       48 39 50 10             cmp    %rdx,0x10(%rax)
    0.00 :	    bd83:       4c 89 d7                mov    %r10,%rdi
    0.00 :	    bd86:       48 0f 46 50 10          cmovbe 0x10(%rax),%rdx
    0.00 :	    bd8b:       48 89 ce                mov    %rcx,%rsi
    0.00 :	    bd8e:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bd95:       e8 56 b5 00 00          callq  172f0 <memcpy>
    0.00 :	    bd9a:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    bd9e:       49 8b 55 10             mov    0x10(%r13),%rdx
    0.00 :	    bda2:       48 8d 3d cf fd 00 00    lea    0xfdcf(%rip),%rdi        # 1bb78 <__PRETTY_FUNCTION__.3644+0x1807>
    0.00 :	    bda9:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bdb0:       48 39 50 10             cmp    %rdx,0x10(%rax)
    0.00 :	    bdb4:       0f 87 6e ff ff ff       ja     bd28 <_dl_relocate_object+0xcb8>
    0.00 :	    bdba:       0f 83 d8 f7 ff ff       jae    b598 <_dl_relocate_object+0x528>
    0.00 :	    bdc0:       8b 15 8e 2e 21 00       mov    0x212e8e(%rip),%edx        # 21ec54 <_rtld_global_ro+0x34>
    0.00 :	    bdc6:       48 8d 3d ab fd 00 00    lea    0xfdab(%rip),%rdi        # 1bb78 <__PRETTY_FUNCTION__.3644+0x1807>
    0.00 :	    bdcd:       85 d2                   test   %edx,%edx
    0.00 :	    bdcf:       0f 85 53 ff ff ff       jne    bd28 <_dl_relocate_object+0xcb8>
    0.00 :	    bdd5:       e9 be f7 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    bdda:       48 89 c8                mov    %rcx,%rax
    0.00 :	    bddd:       48 8d 3d 54 fd 00 00    lea    0xfd54(%rip),%rdi        # 1bb38 <__PRETTY_FUNCTION__.3644+0x17c7>
    0.00 :	    bde4:       4c 29 d0                sub    %r10,%rax
    0.00 :	    bde7:       49 03 44 24 10          add    0x10(%r12),%rax
    0.00 :	    bdec:       48 63 d0                movslq %eax,%rdx
    0.00 :	    bdef:       41 89 02                mov    %eax,(%r10)
    0.00 :	    bdf2:       48 39 d0                cmp    %rdx,%rax
    0.00 :	    bdf5:       0f 85 2d ff ff ff       jne    bd28 <_dl_relocate_object+0xcb8>
    0.00 :	    bdfb:       e9 98 f7 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    be00:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    be05:       49 03 06                add    (%r14),%rax
    0.00 :	    be08:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    be0f:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    be16:       ff d0                   callq  *%rax
    0.00 :	    be18:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    be1f:       49 89 02                mov    %rax,(%r10)
    0.00 :	    be22:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    be29:       e9 6a f7 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    be2e:       48 83 7d c8 00          cmpq   $0x0,-0x38(%rbp)
    0.00 :	    be33:       0f 84 5f f7 ff ff       je     b598 <_dl_relocate_object+0x528>
    0.00 :	    be39:       49 83 bf 48 04 00 00    cmpq   $0x1,0x448(%r15)
    0.00 :	    be40:       01 
    0.00 :	    be41:       0f 86 3b 01 00 00       jbe    bf82 <_dl_relocate_object+0xf12>
    0.00 :	    be47:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    be4b:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    be50:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    be54:       49 2b 87 48 04 00 00    sub    0x448(%r15),%rax
    0.00 :	    be5b:       49 89 02                mov    %rax,(%r10)
    0.00 :	    be5e:       e9 35 f7 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    be63:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	    be67:       48 85 d2                test   %rdx,%rdx
    0.00 :	    be6a:       0f 84 28 f7 ff ff       je     b598 <_dl_relocate_object+0x528>
    0.00 :	    be70:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    be75:       48 03 42 08             add    0x8(%rdx),%rax
    0.00 :	    be79:       49 89 02                mov    %rax,(%r10)
    0.00 :	    be7c:       e9 17 f7 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    be81:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	    be86:       89 c6                   mov    %eax,%esi
    0.00 :	    be88:       4c 89 f7                mov    %r14,%rdi
    0.00 :	    be8b:       e8 00 ef ff ff          callq  ad90 <_dl_reloc_bad_type>
    0.00 :	    be90:       48 8d 0d 19 08 01 00    lea    0x10819(%rip),%rcx        # 1c6b0 <__PRETTY_FUNCTION__.11640>
    0.00 :	    be97:       48 8d 35 4a e7 00 00    lea    0xe74a(%rip),%rsi        # 1a5e8 <__PRETTY_FUNCTION__.3644+0x277>
    0.00 :	    be9e:       48 8d 3d 63 e7 00 00    lea    0xe763(%rip),%rdi        # 1a608 <__PRETTY_FUNCTION__.3644+0x297>
    0.00 :	    bea5:       ba d2 01 00 00          mov    $0x1d2,%edx
    0.00 :	    beaa:       e8 c1 8e 00 00          callq  14d70 <__GI___assert_fail>
    0.00 :	    beaf:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    beb4:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    beb8:       48 8d 05 21 9c 00 00    lea    0x9c21(%rip),%rax        # 15ae0 <_dl_tlsdesc_undefweak>
    0.00 :	    bebf:       49 89 02                mov    %rax,(%r10)
    0.00 :	    bec2:       e9 d1 f6 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    bec7:       49 8b 44 24 10          mov    0x10(%r12),%rax
    0.00 :	    becc:       48 8d 0d 0d 9c 00 00    lea    0x9c0d(%rip),%rcx        # 15ae0 <_dl_tlsdesc_undefweak>
    0.00 :	    bed3:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    bed7:       49 89 0a                mov    %rcx,(%r10)
    0.00 :	    beda:       e9 79 f8 ff ff          jmpq   b758 <_dl_relocate_object+0x6e8>
    0.00 :	    bedf:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bee2:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bee9:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bef0:       e8 3b f1 ff ff          callq  b030 <_dl_allocate_static_tls>
    0.00 :	    bef5:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    befc:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bf03:       e9 35 f8 ff ff          jmpq   b73d <_dl_relocate_object+0x6cd>
    0.00 :	    bf08:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	    bf0d:       e9 a4 f7 ff ff          jmpq   b6b6 <_dl_relocate_object+0x646>
    0.00 :	    bf12:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bf15:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bf1c:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bf23:       e8 38 f0 ff ff          callq  af60 <_dl_try_allocate_static_tls>
    0.00 :	    bf28:       85 c0                   test   %eax,%eax
    0.00 :	    bf2a:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bf31:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bf38:       0f 84 34 f6 ff ff       je     b572 <_dl_relocate_object+0x502>
    0.00 :	    bf3e:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	    bf42:       49 8b 74 24 10          mov    0x10(%r12),%rsi
    0.00 :	    bf47:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bf4a:       48 03 70 08             add    0x8(%rax),%rsi
    0.00 :	    bf4e:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bf55:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bf5c:       e8 9f 96 00 00          callq  15600 <_dl_make_tlsdesc_dynamic>
    0.00 :	    bf61:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bf68:       48 8d 15 81 9b 00 00    lea    0x9b81(%rip),%rdx        # 15af0 <_dl_tlsdesc_dynamic>
    0.00 :	    bf6f:       49 89 42 08             mov    %rax,0x8(%r10)
    0.00 :	    bf73:       49 89 12                mov    %rdx,(%r10)
    0.00 :	    bf76:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bf7d:       e9 16 f6 ff ff          jmpq   b598 <_dl_relocate_object+0x528>
    0.00 :	    bf82:       4c 89 ff                mov    %r15,%rdi
    0.00 :	    bf85:       4c 89 95 38 ff ff ff    mov    %r10,-0xc8(%rbp)
    0.00 :	    bf8c:       4c 89 9d 30 ff ff ff    mov    %r11,-0xd0(%rbp)
    0.00 :	    bf93:       e8 98 f0 ff ff          callq  b030 <_dl_allocate_static_tls>
    0.00 :	    bf98:       4c 8b 9d 30 ff ff ff    mov    -0xd0(%rbp),%r11
    0.00 :	    bf9f:       4c 8b 95 38 ff ff ff    mov    -0xc8(%rbp),%r10
    0.00 :	    bfa6:       e9 9c fe ff ff          jmpq   be47 <_dl_relocate_object+0xdd7>
    0.00 :	    bfab:       41 0f b7 8e b0 02 00    movzwl 0x2b0(%r14),%ecx
    0.00 :	    bfb2:       00 
    0.00 :	    bfb3:       49 8b 9e a0 02 00 00    mov    0x2a0(%r14),%rbx
    0.00 :	    bfba:       48 8d 14 cd 00 00 00    lea    0x0(,%rcx,8),%rdx
    0.00 :	    bfc1:       00 
    0.00 :	    bfc2:       48 89 c8                mov    %rcx,%rax
    0.00 :	    bfc5:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	    bfc9:       48 29 d0                sub    %rdx,%rax
    0.00 :	    bfcc:       48 8d 04 03             lea    (%rbx,%rax,1),%rax
    0.00 :	    bfd0:       48 39 c3                cmp    %rax,%rbx
    0.00 :	    bfd3:       0f 83 18 f1 ff ff       jae    b0f1 <_dl_relocate_object+0x81>
    0.00 :	    bfd9:       48 c7 85 68 ff ff ff    movq   $0x0,-0x98(%rbp)
    0.00 :	    bfe0:       00 00 00 00 
    0.00 :	    bfe4:       49 bf ff ff ff ff 02    movabs $0x2ffffffff,%r15
    0.00 :	    bfeb:       00 00 00 
    0.00 :	    bfee:       eb 26                   jmp    c016 <_dl_relocate_object+0xfa6>
    0.00 :	    bff0:       48 8d 14 cd 00 00 00    lea    0x0(,%rcx,8),%rdx
    0.00 :	    bff7:       00 
    0.00 :	    bff8:       48 89 c8                mov    %rcx,%rax
    0.00 :	    bffb:       48 83 c3 38             add    $0x38,%rbx
    0.00 :	    bfff:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	    c003:       48 29 d0                sub    %rdx,%rax
    0.00 :	    c006:       49 03 86 a0 02 00 00    add    0x2a0(%r14),%rax
    0.00 :	    c00d:       48 39 c3                cmp    %rax,%rbx
    0.00 :	    c010:       0f 83 e6 f0 ff ff       jae    b0fc <_dl_relocate_object+0x8c>
    0.00 :	    c016:       4c 89 f8                mov    %r15,%rax
    0.00 :	    c019:       48 23 03                and    (%rbx),%rax
    0.00 :	    c01c:       48 83 e8 01             sub    $0x1,%rax
    0.00 :	    c020:       75 ce                   jne    bff0 <_dl_relocate_object+0xf80>
    0.00 :	    c022:       48 8b 4b 10             mov    0x10(%rbx),%rcx
    0.00 :	    c026:       48 8b 35 0b 2c 21 00    mov    0x212c0b(%rip),%rsi        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    c02d:       48 83 ec 30             sub    $0x30,%rsp
    0.00 :	    c031:       4c 8d 6c 24 1f          lea    0x1f(%rsp),%r13
    0.00 :	    c036:       48 89 ca                mov    %rcx,%rdx
    0.00 :	    c039:       48 03 53 28             add    0x28(%rbx),%rdx
    0.00 :	    c03d:       48 89 f0                mov    %rsi,%rax
    0.00 :	    c040:       48 f7 d8                neg    %rax
    0.00 :	    c043:       49 83 e5 f0             and    $0xfffffffffffffff0,%r13
    0.00 :	    c047:       48 8d 74 16 ff          lea    -0x1(%rsi,%rdx,1),%rsi
    0.00 :	    c04c:       ba 03 00 00 00          mov    $0x3,%edx
    0.00 :	    c051:       48 21 c6                and    %rax,%rsi
    0.00 :	    c054:       48 21 c8                and    %rcx,%rax
    0.00 :	    c057:       48 29 c6                sub    %rax,%rsi
    0.00 :	    c05a:       49 89 75 08             mov    %rsi,0x8(%r13)
    0.00 :	    c05e:       48 8b 3d d3 2b 21 00    mov    0x212bd3(%rip),%rdi        # 21ec38 <_rtld_global_ro+0x18>
    0.00 :	    c065:       48 f7 df                neg    %rdi
    0.00 :	    c068:       48 23 7b 10             and    0x10(%rbx),%rdi
    0.00 :	    c06c:       49 03 3e                add    (%r14),%rdi
    0.00 :	    c06f:       49 89 7d 00             mov    %rdi,0x0(%r13)
    0.00 :	    c073:       e8 b8 a1 00 00          callq  16230 <__mprotect>
    0.00 :	    c078:       85 c0                   test   %eax,%eax
    0.00 :	    c07a:       78 71                   js     c0ed <_dl_relocate_object+0x107d>
    0.00 :	    c07c:       8b 4b 04                mov    0x4(%rbx),%ecx
    0.00 :	    c07f:       b8 40 62 51 73          mov    $0x73516240,%eax
    0.00 :	    c084:       83 e1 07                and    $0x7,%ecx
    0.00 :	    c087:       c1 e1 02                shl    $0x2,%ecx
    0.00 :	    c08a:       d3 f8                   sar    %cl,%eax
    0.00 :	    c08c:       83 e0 0f                and    $0xf,%eax
    0.00 :	    c08f:       41 89 45 10             mov    %eax,0x10(%r13)
    0.00 :	    c093:       48 8b 85 68 ff ff ff    mov    -0x98(%rbp),%rax
    0.00 :	    c09a:       49 89 45 18             mov    %rax,0x18(%r13)
    0.00 :	    c09e:       4c 89 ad 68 ff ff ff    mov    %r13,-0x98(%rbp)
    0.00 :	    c0a5:       41 0f b7 8e b0 02 00    movzwl 0x2b0(%r14),%ecx
    0.00 :	    c0ac:       00 
    0.00 :	    c0ad:       e9 3e ff ff ff          jmpq   bff0 <_dl_relocate_object+0xf80>
    0.00 :	    c0b2:       49 8b 76 08             mov    0x8(%r14),%rsi
    0.00 :	    c0b6:       48 8d 15 20 d7 00 00    lea    0xd720(%rip),%rdx        # 197dd <intel_02_known+0x4fd>
    0.00 :	    c0bd:       48 8d 05 35 dc 00 00    lea    0xdc35(%rip),%rax        # 19cf9 <__PRETTY_FUNCTION__.12494+0x1a>
    0.00 :	    c0c4:       45 85 e4                test   %r12d,%r12d
    0.00 :	    c0c7:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	    c0cb:       80 3e 00                cmpb   $0x0,(%rsi)
    0.00 :	    c0ce:       75 0a                   jne    c0da <_dl_relocate_object+0x106a>
    0.00 :	    c0d0:       48 8b 05 31 2b 21 00    mov    0x212b31(%rip),%rax        # 21ec08 <_dl_argv>
    0.00 :	    c0d7:       48 8b 30                mov    (%rax),%rsi
    0.00 :	    c0da:       48 8d 3d 20 dc 00 00    lea    0xdc20(%rip),%rdi        # 19d01 <__PRETTY_FUNCTION__.12494+0x22>
    0.00 :	    c0e1:       31 c0                   xor    %eax,%eax
    0.00 :	    c0e3:       e8 68 32 00 00          callq  f350 <_dl_debug_printf>
    0.00 :	    c0e8:       e9 f6 ef ff ff          jmpq   b0e3 <_dl_relocate_object+0x73>
    0.00 :	    c0ed:       48 8d 0d d4 f9 00 00    lea    0xf9d4(%rip),%rcx        # 1bac8 <__PRETTY_FUNCTION__.3644+0x1757>
    0.00 :	    c0f4:       49 8b 76 08             mov    0x8(%r14),%rsi
    0.00 :	    c0f8:       8b 3d 86 40 21 00       mov    0x214086(%rip),%edi        # 220184 <rtld_errno>
    0.00 :	    c0fe:       31 d2                   xor    %edx,%edx
    0.00 :	    c100:       e8 fb 1d 00 00          callq  df00 <_dl_signal_error>
    0.00 :	    c105:       48 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%rcx
    0.00 :	    c10c:       8b 51 10                mov    0x10(%rcx),%edx
    0.00 :	    c10f:       48 8b 71 08             mov    0x8(%rcx),%rsi
    0.00 :	    c113:       48 8b 39                mov    (%rcx),%rdi
    0.00 :	    c116:       e8 15 a1 00 00          callq  16230 <__mprotect>
    0.00 :	    c11b:       85 c0                   test   %eax,%eax
    0.00 :	    c11d:       78 7d                   js     c19c <_dl_relocate_object+0x112c>
    0.00 :	    c11f:       48 8b b5 68 ff ff ff    mov    -0x98(%rbp),%rsi
    0.00 :	    c126:       48 8b 76 18             mov    0x18(%rsi),%rsi
    0.00 :	    c12a:       48 85 f6                test   %rsi,%rsi
    0.00 :	    c12d:       48 89 b5 68 ff ff ff    mov    %rsi,-0x98(%rbp)
    0.00 :	    c134:       0f 84 94 f1 ff ff       je     b2ce <_dl_relocate_object+0x25e>
    0.00 :	    c13a:       eb c9                   jmp    c105 <_dl_relocate_object+0x1095>
    0.00 :	    c13c:       49 8b 46 50             mov    0x50(%r14),%rax
    0.00 :	    c140:       48 85 c0                test   %rax,%rax
    0.00 :	    c143:       74 63                   je     c1a8 <_dl_relocate_object+0x1138>
    0.00 :	    c145:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	    c149:       bf 20 00 00 00          mov    $0x20,%edi
    0.00 :	    c14e:       e8 7d 49 ff ff          callq  ad0 <calloc@plt>
    0.00 :	    c153:       48 85 c0                test   %rax,%rax
    0.00 :	    c156:       49 89 86 28 03 00 00    mov    %rax,0x328(%r14)
    0.00 :	    c15d:       48 8d 35 8c fa 00 00    lea    0xfa8c(%rip),%rsi        # 1bbf0 <__PRETTY_FUNCTION__.3644+0x187f>
    0.00 :	    c164:       0f 85 4e f1 ff ff       jne    b2b8 <_dl_relocate_object+0x248>
    0.00 :	    c16a:       48 8b 05 97 2a 21 00    mov    0x212a97(%rip),%rax        # 21ec08 <_dl_argv>
    0.00 :	    c171:       49 8b 4e 08             mov    0x8(%r14),%rcx
    0.00 :	    c175:       48 8d 15 2e d4 00 00    lea    0xd42e(%rip),%rdx        # 195aa <intel_02_known+0x2ca>
    0.00 :	    c17c:       bf 02 00 00 00          mov    $0x2,%edi
    0.00 :	    c181:       48 8b 00                mov    (%rax),%rax
    0.00 :	    c184:       48 85 c0                test   %rax,%rax
    0.00 :	    c187:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	    c18b:       31 c0                   xor    %eax,%eax
    0.00 :	    c18d:       e8 6e 30 00 00          callq  f200 <_dl_dprintf>
    0.00 :	    c192:       bf 7f 00 00 00          mov    $0x7f,%edi
    0.00 :	    c197:       e8 24 a1 00 00          callq  162c0 <_Exit>
    0.00 :	    c19c:       48 8d 0d 85 fa 00 00    lea    0xfa85(%rip),%rcx        # 1bc28 <__PRETTY_FUNCTION__.3644+0x18b7>
    0.00 :	    c1a3:       e9 4c ff ff ff          jmpq   c0f4 <_dl_relocate_object+0x1084>
    0.00 :	    c1a8:       48 8d 35 19 fa 00 00    lea    0xfa19(%rip),%rsi        # 1bbc8 <__PRETTY_FUNCTION__.3644+0x1857>
    0.00 :	    c1af:       eb b9                   jmp    c16a <_dl_relocate_object+0x10fa>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:87
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000470370 <heap_compute_data_size>:
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
   50.00 :	  470370:       55                      push   %rbp
    0.00 :	  470371:       49 89 f0                mov    %rsi,%r8
    0.00 :	  470374:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  470377:       41 57                   push   %r15
    0.00 :	  470379:       41 56                   push   %r14
    0.00 :	  47037b:       49 89 d6                mov    %rdx,%r14
    0.00 :	  47037e:       41 55                   push   %r13
   50.00 :	  470380:       41 54                   push   %r12
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470382:       45 31 e4                xor    %r12d,%r12d
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470385:       53                      push   %rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470386:       31 db                   xor    %ebx,%ebx
         :	 */
         :	Size
         :	heap_compute_data_size(TupleDesc tupleDesc,
         :	                                           Datum *values,
         :	                                           bool *isnull)
         :	{
    0.00 :	  470388:       48 83 ec 08             sub    $0x8,%rsp
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  47038c:       44 8b 2f                mov    (%rdi),%r13d
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  47038f:       4c 8b 7f 08             mov    0x8(%rdi),%r15
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470393:       45 85 ed                test   %r13d,%r13d
    0.00 :	  470396:       7f 43                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470398:       e9 c3 00 00 00          jmpq   470460 <heap_compute_data_size+0xf0>
    0.00 :	  47039d:       0f 1f 00                nopl   (%rax)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  4703a0:       0f b6 42 5e             movzbl 0x5e(%rdx),%eax
    0.00 :	  4703a4:       3c 69                   cmp    $0x69,%al
    0.00 :	  4703a6:       0f 84 cc 00 00 00       je     470478 <heap_compute_data_size+0x108>
    0.00 :	  4703ac:       3c 63                   cmp    $0x63,%al
    0.00 :	  4703ae:       66 90                   xchg   %ax,%ax
    0.00 :	  4703b0:       74 10                   je     4703c2 <heap_compute_data_size+0x52>
    0.00 :	  4703b2:       3c 64                   cmp    $0x64,%al
    0.00 :	  4703b4:       0f 84 ce 00 00 00       je     470488 <heap_compute_data_size+0x118>
    0.00 :	  4703ba:       49 83 c4 01             add    $0x1,%r12
    0.00 :	  4703be:       49 83 e4 fe             and    $0xfffffffffffffffe,%r12
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  4703c2:       66 85 c9                test   %cx,%cx
    0.00 :	  4703c5:       7e 71                   jle    470438 <heap_compute_data_size+0xc8>
    0.00 :	  4703c7:       48 0f bf c1             movswq %cx,%rax
    0.00 :	  4703cb:       49 01 c4                add    %rax,%r12
    0.00 :	  4703ce:       48 83 c3 01             add    $0x1,%rbx
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  4703d2:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  4703d5:       0f 8e 85 00 00 00       jle    470460 <heap_compute_data_size+0xf0>
         :	        {
         :	                Datum           val;
         :
         :	                if (isnull[i])
    0.00 :	  4703db:       41 80 3c 1e 00          cmpb   $0x0,(%r14,%rbx,1)
    0.00 :	  4703e0:       75 ec                   jne    4703ce <heap_compute_data_size+0x5e>
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4703e2:       49 8b 14 df             mov    (%r15,%rbx,8),%rdx
         :	                Datum           val;
         :
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
    0.00 :	  4703e6:       49 8b 3c d8             mov    (%r8,%rbx,8),%rdi
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4703ea:       0f b7 4a 4c             movzwl 0x4c(%rdx),%ecx
    0.00 :	  4703ee:       66 83 f9 ff             cmp    $0xffff,%cx
    0.00 :	  4703f2:       75 ac                   jne    4703a0 <heap_compute_data_size+0x30>
    0.00 :	  4703f4:       80 7a 5d 70             cmpb   $0x70,0x5d(%rdx)
    0.00 :	  4703f8:       0f 84 c2 00 00 00       je     4704c0 <heap_compute_data_size+0x150>
    0.00 :	  4703fe:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  470401:       40 f6 c6 03             test   $0x3,%sil
    0.00 :	  470405:       75 12                   jne    470419 <heap_compute_data_size+0xa9>
    0.00 :	  470407:       8b 07                   mov    (%rdi),%eax
    0.00 :	  470409:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  47040c:       83 e8 04                sub    $0x4,%eax
    0.00 :	  47040f:       48 83 c0 01             add    $0x1,%rax
    0.00 :	  470413:       48 83 f8 7f             cmp    $0x7f,%rax
    0.00 :	  470417:       76 b2                   jbe    4703cb <heap_compute_data_size+0x5b>
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  470419:       83 e6 01                and    $0x1,%esi
    0.00 :	  47041c:       74 82                   je     4703a0 <heap_compute_data_size+0x30>
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47041e:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	  470421:       3c 01                   cmp    $0x1,%al
    0.00 :	  470423:       74 73                   je     470498 <heap_compute_data_size+0x128>
    0.00 :	  470425:       a8 01                   test   $0x1,%al
    0.00 :	  470427:       0f 84 a3 00 00 00       je     4704d0 <heap_compute_data_size+0x160>
    0.00 :	  47042d:       d0 e8                   shr    %al
    0.00 :	  47042f:       0f b6 c0                movzbl %al,%eax
    0.00 :	  470432:       eb 97                   jmp    4703cb <heap_compute_data_size+0x5b>
    0.00 :	  470434:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  470438:       66 83 c1 01             add    $0x1,%cx
    0.00 :	  47043c:       74 e0                   je     47041e <heap_compute_data_size+0xae>
    0.00 :	  47043e:       4c 89 45 d0             mov    %r8,-0x30(%rbp)
    0.00 :	  470442:       48 83 c3 01             add    $0x1,%rbx
    0.00 :	  470446:       e8 05 94 ff ff          callq  469850 <strlen@plt>
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47044b:       41 39 dd                cmp    %ebx,%r13d
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  47044e:       4d 8d 64 04 01          lea    0x1(%r12,%rax,1),%r12
    0.00 :	  470453:       4c 8b 45 d0             mov    -0x30(%rbp),%r8
         :	        Size            data_length = 0;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
         :	        Form_pg_attribute *att = tupleDesc->attrs;
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470457:       7f 82                   jg     4703db <heap_compute_data_size+0x6b>
    0.00 :	  470459:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                                                                                          val);
         :	                }
         :	        }
         :
         :	        return data_length;
         :	}
    0.00 :	  470460:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  470464:       4c 89 e0                mov    %r12,%rax
    0.00 :	  470467:       5b                      pop    %rbx
    0.00 :	  470468:       41 5c                   pop    %r12
    0.00 :	  47046a:       41 5d                   pop    %r13
    0.00 :	  47046c:       41 5e                   pop    %r14
    0.00 :	  47046e:       41 5f                   pop    %r15
    0.00 :	  470470:       c9                      leaveq 
    0.00 :	  470471:       c3                      retq   
    0.00 :	  470472:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                         */
         :	                        data_length += VARATT_CONVERTED_SHORT_SIZE(DatumGetPointer(val));
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
    0.00 :	  470478:       49 83 c4 03             add    $0x3,%r12
    0.00 :	  47047c:       49 83 e4 fc             and    $0xfffffffffffffffc,%r12
    0.00 :	  470480:       e9 3d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470485:       0f 1f 00                nopl   (%rax)
    0.00 :	  470488:       49 83 c4 07             add    $0x7,%r12
    0.00 :	  47048c:       49 83 e4 f8             and    $0xfffffffffffffff8,%r12
    0.00 :	  470490:       e9 2d ff ff ff          jmpq   4703c2 <heap_compute_data_size+0x52>
    0.00 :	  470495:       0f 1f 00                nopl   (%rax)
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  470498:       0f b6 57 01             movzbl 0x1(%rdi),%edx
    0.00 :	  47049c:       b8 0a 00 00 00          mov    $0xa,%eax
    0.00 :	  4704a1:       80 fa 01                cmp    $0x1,%dl
    0.00 :	  4704a4:       0f 84 21 ff ff ff       je     4703cb <heap_compute_data_size+0x5b>
    0.00 :	  4704aa:       80 fa 12                cmp    $0x12,%dl
    0.00 :	  4704ad:       b8 03 00 00 00          mov    $0x3,%eax
    0.00 :	  4704b2:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4704b7:       48 0f 44 c2             cmove  %rdx,%rax
    0.00 :	  4704bb:       e9 0b ff ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>
         :	                if (isnull[i])
         :	                        continue;
         :
         :	                val = values[i];
         :
         :	                if (ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  4704c0:       0f b6 37                movzbl (%rdi),%esi
    0.00 :	  4704c3:       e9 51 ff ff ff          jmpq   470419 <heap_compute_data_size+0xa9>
    0.00 :	  4704c8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  4704cf:       00 
         :	                }
         :	                else
         :	                {
         :	                        data_length = att_align_datum(data_length, att[i]->attalign,
         :	                                                                                  att[i]->attlen, val);
         :	                        data_length = att_addlength_datum(data_length, att[i]->attlen,
    0.00 :	  4704d0:       8b 07                   mov    (%rdi),%eax
    0.00 :	  4704d2:       c1 e8 02                shr    $0x2,%eax
    0.00 :	  4704d5:       89 c0                   mov    %eax,%eax
    0.00 :	  4704d7:       e9 ef fe ff ff          jmpq   4703cb <heap_compute_data_size+0x5b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:91
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004e2de0 <IsCatalogRelation>:
         :	 *              but this function returns true only for toast relations of system
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
    0.00 :	  4e2de0:       55                      push   %rbp
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
    0.00 :	  4e2de1:       48 8b 77 30             mov    0x30(%rdi),%rsi
 /home/Computational/mark/src/postgres-andres/src/backend/catalog/catalog.c:91
  100.00 :	  4e2de5:       8b 7f 40                mov    0x40(%rdi),%edi
         :	 *              but this function returns true only for toast relations of system
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
    0.00 :	  4e2de8:       48 89 e5                mov    %rsp,%rbp
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
         :	}
    0.00 :	  4e2deb:       c9                      leaveq 
         :	 *              catalogs.
         :	 */
         :	bool
         :	IsCatalogRelation(Relation relation)
         :	{
         :	        return IsCatalogClass(RelationGetRelid(relation), relation->rd_rel);
    0.00 :	  4e2dec:       e9 bf ff ff ff          jmpq   4e2db0 <IsCatalogClass>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1235
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1252
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006766c0 <ReleaseAndReadBuffer>:
         :	 */
         :	Buffer
         :	ReleaseAndReadBuffer(Buffer buffer,
         :	                                         Relation relation,
         :	                                         BlockNumber blockNum)
         :	{
    0.00 :	  6766c0:       55                      push   %rbp
    0.00 :	  6766c1:       89 f9                   mov    %edi,%ecx
    0.00 :	  6766c3:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6766c6:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6766ca:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6766ce:       48 89 f3                mov    %rsi,%rbx
    0.00 :	  6766d1:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6766d5:       48 83 ec 20             sub    $0x20,%rsp
         :	        ForkNumber      forkNum = MAIN_FORKNUM;
         :	        volatile BufferDesc *bufHdr;
         :
         :	        if (BufferIsValid(buffer))
   50.00 :	  6766d9:       83 ff 00                cmp    $0x0,%edi
         :	 */
         :	Buffer
         :	ReleaseAndReadBuffer(Buffer buffer,
         :	                                         Relation relation,
         :	                                         BlockNumber blockNum)
         :	{
    0.00 :	  6766dc:       41 89 d4                mov    %edx,%r12d
         :	        ForkNumber      forkNum = MAIN_FORKNUM;
         :	        volatile BufferDesc *bufHdr;
         :
         :	        if (BufferIsValid(buffer))
    0.00 :	  6766df:       74 2d                   je     67670e <ReleaseAndReadBuffer+0x4e>
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
    0.00 :	  6766e1:       7c 4d                   jl     676730 <ReleaseAndReadBuffer+0x70>
         :	                        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
         :	                        LocalRefCount[-buffer - 1]--;
         :	                }
         :	                else
         :	                {
         :	                        bufHdr = &BufferDescriptors[buffer - 1];
    0.00 :	  6766e3:       48 63 c7                movslq %edi,%rax
    0.00 :	  6766e6:       48 8d 78 ff             lea    -0x1(%rax),%rdi
    0.00 :	  6766ea:       48 c1 e7 06             shl    $0x6,%rdi
    0.00 :	  6766ee:       48 03 3d 0b 94 54 00    add    0x54940b(%rip),%rdi        # bbfb00 <BufferDescriptors>
         :	                        /* we have pin, so it's ok to examine tag without spinlock */
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  6766f5:       8b 47 10                mov    0x10(%rdi),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1252
   50.00 :	  6766f8:       39 d0                   cmp    %edx,%eax
    0.00 :	  6766fa:       75 08                   jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  6766fc:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  6766ff:       3b 46 08                cmp    0x8(%rsi),%eax
    0.00 :	  676702:       74 7c                   je     676780 <ReleaseAndReadBuffer+0xc0>
         :	                                RelFileNodeEquals(bufHdr->tag.rnode, relation->rd_node) &&
         :	                                bufHdr->tag.forkNum == forkNum)
         :	                                return buffer;
         :	                        UnpinBuffer(bufHdr, true);
    0.00 :	  676704:       be 01 00 00 00          mov    $0x1,%esi
    0.00 :	  676709:       e8 22 e6 ff ff          callq  674d30 <UnpinBuffer>
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
    0.00 :	  67670e:       44 89 e6                mov    %r12d,%esi
    0.00 :	  676711:       48 89 df                mov    %rbx,%rdi
         :	}
    0.00 :	  676714:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  676718:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  67671c:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  676720:       c9                      leaveq 
         :	                                return buffer;
         :	                        UnpinBuffer(bufHdr, true);
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
    0.00 :	  676721:       e9 7a ff ff ff          jmpq   6766a0 <ReadBuffer>
    0.00 :	  676726:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  67672d:       00 00 00 
         :	        if (BufferIsValid(buffer))
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
         :	                {
         :	                        bufHdr = &LocalBufferDescriptors[-buffer - 1];
    0.00 :	  676730:       89 f8                   mov    %edi,%eax
    0.00 :	  676732:       f7 d0                   not    %eax
    0.00 :	  676734:       4c 63 e8                movslq %eax,%r13
    0.00 :	  676737:       4c 89 ea                mov    %r13,%rdx
    0.00 :	  67673a:       48 c1 e2 06             shl    $0x6,%rdx
    0.00 :	  67673e:       48 03 15 cb 69 50 00    add    0x5069cb(%rip),%rdx        # b7d110 <LocalBufferDescriptors>
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  676745:       8b 42 10                mov    0x10(%rdx),%eax
    0.00 :	  676748:       44 39 e0                cmp    %r12d,%eax
    0.00 :	  67674b:       75 08                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  67674d:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  676750:       3b 46 08                cmp    0x8(%rsi),%eax
    0.00 :	  676753:       74 53                   je     6767a8 <ReleaseAndReadBuffer+0xe8>
         :	                                RelFileNodeEquals(bufHdr->tag.rnode, relation->rd_node) &&
         :	                                bufHdr->tag.forkNum == forkNum)
         :	                                return buffer;
         :	                        ResourceOwnerForgetBuffer(CurrentResourceOwner, buffer);
    0.00 :	  676755:       48 8b 3d 64 41 54 00    mov    0x544164(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
    0.00 :	  67675c:       89 ce                   mov    %ecx,%esi
    0.00 :	  67675e:       e8 9d 41 12 00          callq  79a900 <ResourceOwnerForgetBuffer>
         :	                        LocalRefCount[-buffer - 1]--;
    0.00 :	  676763:       4a 8d 04 ad 00 00 00    lea    0x0(,%r13,4),%rax
    0.00 :	  67676a:       00 
    0.00 :	  67676b:       48 03 05 ae 69 50 00    add    0x5069ae(%rip),%rax        # b7d120 <LocalRefCount>
    0.00 :	  676772:       83 28 01                subl   $0x1,(%rax)
    0.00 :	  676775:       eb 97                   jmp    67670e <ReleaseAndReadBuffer+0x4e>
    0.00 :	  676777:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  67677e:       00 00 
         :	                }
         :	                else
         :	                {
         :	                        bufHdr = &BufferDescriptors[buffer - 1];
         :	                        /* we have pin, so it's ok to examine tag without spinlock */
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  676780:       8b 47 04                mov    0x4(%rdi),%eax
    0.00 :	  676783:       3b 46 04                cmp    0x4(%rsi),%eax
    0.00 :	  676786:       0f 85 78 ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  67678c:       8b 07                   mov    (%rdi),%eax
    0.00 :	  67678e:       3b 06                   cmp    (%rsi),%eax
    0.00 :	  676790:       0f 85 6e ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  676796:       8b 47 0c                mov    0xc(%rdi),%eax
    0.00 :	  676799:       85 c0                   test   %eax,%eax
    0.00 :	  67679b:       0f 85 63 ff ff ff       jne    676704 <ReleaseAndReadBuffer+0x44>
    0.00 :	  6767a1:       eb 1c                   jmp    6767bf <ReleaseAndReadBuffer+0xff>
    0.00 :	  6767a3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        {
         :	                Assert(BufferIsPinned(buffer));
         :	                if (BufferIsLocal(buffer))
         :	                {
         :	                        bufHdr = &LocalBufferDescriptors[-buffer - 1];
         :	                        if (bufHdr->tag.blockNum == blockNum &&
    0.00 :	  6767a8:       8b 42 04                mov    0x4(%rdx),%eax
    0.00 :	  6767ab:       3b 46 04                cmp    0x4(%rsi),%eax
    0.00 :	  6767ae:       66 90                   xchg   %ax,%ax
    0.00 :	  6767b0:       75 a3                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  6767b2:       8b 02                   mov    (%rdx),%eax
    0.00 :	  6767b4:       3b 06                   cmp    (%rsi),%eax
    0.00 :	  6767b6:       75 9d                   jne    676755 <ReleaseAndReadBuffer+0x95>
    0.00 :	  6767b8:       8b 42 0c                mov    0xc(%rdx),%eax
    0.00 :	  6767bb:       85 c0                   test   %eax,%eax
    0.00 :	  6767bd:       75 96                   jne    676755 <ReleaseAndReadBuffer+0x95>
         :	                        UnpinBuffer(bufHdr, true);
         :	                }
         :	        }
         :
         :	        return ReadBuffer(relation, blockNum);
         :	}
    0.00 :	  6767bf:       89 c8                   mov    %ecx,%eax
    0.00 :	  6767c1:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  6767c5:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  6767c9:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  6767cd:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:458
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:435
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006767d0 <PrefetchBuffer>:
         :	 * block will not be delayed by the I/O.  Prefetching is optional.
         :	 * No-op if prefetching isn't compiled in.
         :	 */
         :	void
         :	PrefetchBuffer(Relation reln, ForkNumber forkNum, BlockNumber blockNum)
         :	{
    0.00 :	  6767d0:       55                      push   %rbp
    0.00 :	  6767d1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  6767d4:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  6767d8:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  6767dc:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6767df:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  6767e3:       48 83 ec 40             sub    $0x40,%rsp
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6767e7:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)
         :	 * block will not be delayed by the I/O.  Prefetching is optional.
         :	 * No-op if prefetching isn't compiled in.
         :	 */
         :	void
         :	PrefetchBuffer(Relation reln, ForkNumber forkNum, BlockNumber blockNum)
         :	{
    0.00 :	  6767ec:       41 89 f5                mov    %esi,%r13d
    0.00 :	  6767ef:       41 89 d4                mov    %edx,%r12d
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  6767f2:       74 6c                   je     676860 <PrefetchBuffer+0x90>
         :
         :	        if (RelationUsesLocalBuffers(reln))
    0.00 :	  6767f4:       48 8b 43 30             mov    0x30(%rbx),%rax
    0.00 :	  6767f8:       80 78 6e 74             cmpb   $0x74,0x6e(%rax)
    0.00 :	  6767fc:       75 2a                   jne    676828 <PrefetchBuffer+0x58>
         :	        {
         :	                /* see comments in ReadBufferExtended */
         :	                if (RELATION_IS_OTHER_TEMP(reln))
    0.00 :	  6767fe:       80 7b 20 00             cmpb   $0x0,0x20(%rbx)
    0.00 :	  676802:       74 7b                   je     67687f <PrefetchBuffer+0xaf>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
         :	                                errmsg("cannot access temporary tables of other sessions")));
         :
         :	                /* pass it off to localbuf.c */
         :	                LocalPrefetchBuffer(reln->rd_smgr, forkNum, blockNum);
    0.00 :	  676804:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  676808:       44 89 e2                mov    %r12d,%edx
    0.00 :	  67680b:       44 89 ee                mov    %r13d,%esi
    0.00 :	  67680e:       e8 0d 1a 00 00          callq  678220 <LocalPrefetchBuffer>
         :	                 * real fix would involve some additional per-buffer state, and it's
         :	                 * not clear that there's enough of a problem to justify that.
         :	                 */
         :	        }
         :	#endif   /* USE_PREFETCH */
         :	}
    0.00 :	  676813:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  676817:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  67681b:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  67681f:       c9                      leaveq 
   50.00 :	  676820:       c3                      retq   
    0.00 :	  676821:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                BufferTag       newTag;         /* identity of requested block */
         :	                int                     buf_id;
         :
         :	                /* create a tag so we can lookup the buffer */
         :	                INIT_BUFFERTAG(newTag, reln->rd_smgr->smgr_rnode.node,
    0.00 :	  676828:       48 8b 53 10             mov    0x10(%rbx),%rdx
         :	                                           forkNum, blockNum);
         :
         :	                /* see if the block is in the buffer pool already */
         :	                buf_id = BufTableLookup(&newTag);
    0.00 :	  67682c:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
         :	        {
         :	                BufferTag       newTag;         /* identity of requested block */
         :	                int                     buf_id;
         :
         :	                /* create a tag so we can lookup the buffer */
         :	                INIT_BUFFERTAG(newTag, reln->rd_smgr->smgr_rnode.node,
    0.00 :	  676830:       48 8b 02                mov    (%rdx),%rax
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:435
   50.00 :	  676833:       48 89 45 c0             mov    %rax,-0x40(%rbp)
    0.00 :	  676837:       8b 42 08                mov    0x8(%rdx),%eax
    0.00 :	  67683a:       44 89 6d cc             mov    %r13d,-0x34(%rbp)
    0.00 :	  67683e:       44 89 65 d0             mov    %r12d,-0x30(%rbp)
    0.00 :	  676842:       89 45 c8                mov    %eax,-0x38(%rbp)
         :	                                           forkNum, blockNum);
         :
         :	                /* see if the block is in the buffer pool already */
         :	                buf_id = BufTableLookup(&newTag);
    0.00 :	  676845:       e8 96 d5 ff ff          callq  673de0 <BufTableLookup>
         :
         :	                /* If not in buffers, initiate prefetch */
         :	                if (buf_id < 0)
    0.00 :	  67684a:       85 c0                   test   %eax,%eax
    0.00 :	  67684c:       79 c5                   jns    676813 <PrefetchBuffer+0x43>
         :	                        smgrprefetch(reln->rd_smgr, forkNum, blockNum);
    0.00 :	  67684e:       48 8b 7b 10             mov    0x10(%rbx),%rdi
    0.00 :	  676852:       44 89 e2                mov    %r12d,%edx
    0.00 :	  676855:       44 89 ee                mov    %r13d,%esi
    0.00 :	  676858:       e8 93 2b 02 00          callq  6993f0 <smgrprefetch>
    0.00 :	  67685d:       eb b4                   jmp    676813 <PrefetchBuffer+0x43>
    0.00 :	  67685f:       90                      nop
         :	#ifdef USE_PREFETCH
         :	        Assert(RelationIsValid(reln));
         :	        Assert(BlockNumberIsValid(blockNum));
         :
         :	        /* Open it at the smgr level if not already done */
         :	        RelationOpenSmgr(reln);
    0.00 :	  676860:       8b 57 1c                mov    0x1c(%rdi),%edx
    0.00 :	  676863:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  676866:       48 8b 3f                mov    (%rdi),%rdi
    0.00 :	  676869:       e8 c2 31 02 00          callq  699a30 <smgropen>
    0.00 :	  67686e:       48 8d 7b 10             lea    0x10(%rbx),%rdi
    0.00 :	  676872:       48 89 c6                mov    %rax,%rsi
    0.00 :	  676875:       e8 86 2a 02 00          callq  699300 <smgrsetowner>
    0.00 :	  67687a:       e9 75 ff ff ff          jmpq   6767f4 <PrefetchBuffer+0x24>
         :
         :	        if (RelationUsesLocalBuffers(reln))
         :	        {
         :	                /* see comments in ReadBufferExtended */
         :	                if (RELATION_IS_OTHER_TEMP(reln))
         :	                        ereport(ERROR,
    0.00 :	  67687f:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  676882:       b9 d3 a0 8a 00          mov    $0x8aa0d3,%ecx
    0.00 :	  676887:       ba a8 01 00 00          mov    $0x1a8,%edx
    0.00 :	  67688c:       be 53 9d 8a 00          mov    $0x8a9d53,%esi
    0.00 :	  676891:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  676896:       e8 25 42 10 00          callq  77aac0 <errstart>
    0.00 :	  67689b:       84 c0                   test   %al,%al
    0.00 :	  67689d:       75 05                   jne    6768a4 <PrefetchBuffer+0xd4>
    0.00 :	  67689f:       e8 2c 2c df ff          callq  4694d0 <abort@plt>
    0.00 :	  6768a4:       bf 08 9f 8a 00          mov    $0x8a9f08,%edi
    0.00 :	  6768a9:       31 c0                   xor    %eax,%eax
    0.00 :	  6768ab:       e8 f0 5f 10 00          callq  77c8a0 <errmsg>
    0.00 :	  6768b0:       bf 40 04 00 00          mov    $0x440,%edi
    0.00 :	  6768b5:       89 c3                   mov    %eax,%ebx
    0.00 :	  6768b7:       e8 94 64 10 00          callq  77cd50 <errcode>
    0.00 :	  6768bc:       89 de                   mov    %ebx,%esi
    0.00 :	  6768be:       89 c7                   mov    %eax,%edi
    0.00 :	  6768c0:       31 c0                   xor    %eax,%eax
    0.00 :	  6768c2:       e8 19 3d 10 00          callq  77a5e0 <errfinish>
    0.00 :	  6768c7:       eb d6                   jmp    67689f <PrefetchBuffer+0xcf>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1092
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:897
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000068faf0 <LWLockAcquire>:
         :	 *
         :	 * Side effect: cancel/die interrupts are held off until lock release.
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
    0.00 :	  68faf0:       55                      push   %rbp
    0.00 :	  68faf1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  68faf4:       41 57                   push   %r15
    0.00 :	  68faf6:       41 89 f7                mov    %esi,%r15d
    0.00 :	  68faf9:       41 56                   push   %r14
    0.00 :	  68fafb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  68fafe:       41 55                   push   %r13
    0.00 :	  68fb00:       41 54                   push   %r12
    0.00 :	  68fb02:       53                      push   %rbx
    0.00 :	  68fb03:       48 83 ec 18             sub    $0x18,%rsp
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb07:       81 3d f7 de 4e 00 c7    cmpl   $0xc7,0x4edef7(%rip)        # b7da08 <num_held_lwlocks>
    0.00 :	  68fb0e:       00 00 00 
         :
         :	/* internal function to implement LWLockAcquire and LWLockAcquireWithVar */
         :	static inline bool
         :	LWLockAcquireCommon(LWLock *lock, LWLockMode mode, uint64 *valptr, uint64 val)
         :	{
         :	        PGPROC     *proc = MyProc;
    0.00 :	  68fb11:       4c 8b 25 30 de 4e 00    mov    0x4ede30(%rip),%r12        # b7d948 <MyProc>
         :	         * to catch unsafe coding practices.
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
    0.00 :	  68fb18:       0f 8f 0c 01 00 00       jg     68fc2a <LWLockAcquire+0x13a>
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb1e:       8b 05 74 a5 52 00       mov    0x52a574(%rip),%eax        # bba098 <InterruptHoldoffCount>
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb24:       48 8d 57 08             lea    0x8(%rdi),%rdx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb28:       4d 8d 6c 24 10          lea    0x10(%r12),%r13
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
         :
         :	                /* not waiting anymore */
         :	                pg_atomic_fetch_sub_u32(&lock->nwaiters, 1);
    0.00 :	  68fb2d:       31 db                   xor    %ebx,%ebx
    0.00 :	  68fb2f:       c6 45 c7 01             movb   $0x1,-0x39(%rbp)
    0.00 :	  68fb33:       48 89 55 c8             mov    %rdx,-0x38(%rbp)
         :	        /*
         :	         * Lock out cancel/die interrupts until we exit the code section protected
         :	         * by the LWLock.  This ensures that interrupts will not interfere with
         :	         * manipulations of data structures in shared memory.
         :	         */
         :	        HOLD_INTERRUPTS();
    0.00 :	  68fb37:       83 c0 01                add    $0x1,%eax
    0.00 :	  68fb3a:       89 05 58 a5 52 00       mov    %eax,0x52a558(%rip)        # bba098 <InterruptHoldoffCount>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb40:       48 8d 47 01             lea    0x1(%rdi),%rax
    0.00 :	  68fb44:       48 89 45 d0             mov    %rax,-0x30(%rbp)
    0.00 :	  68fb48:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  68fb4f:       00 
         :	                bool            mustwait;
         :
         :	                /*
         :	                 * try to grab the lock the first time, we're not in the waitqueue yet.
         :	                 */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb50:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb52:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb55:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb58:       e8 63 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                if (!mustwait)
    0.00 :	  68fb5d:       84 c0                   test   %al,%al
    0.00 :	  68fb5f:       74 79                   je     68fbda <LWLockAcquire+0xea>
         :	                 * other lock will see our queue entries when releasing since they
         :	                 * existed before we checked for the lock.
         :	                 */
         :
         :	                /* add to the queue */
         :	                LWLockQueueSelf(lock, mode);
    0.00 :	  68fb61:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb64:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb67:       e8 14 f5 ff ff          callq  68f080 <LWLockQueueSelf>
         :
         :	                /* we're now guaranteed to be woken up if necessary */
         :	                mustwait = LWLockAttemptLock(lock, mode, NULL);
    0.00 :	  68fb6c:       31 d2                   xor    %edx,%edx
    0.00 :	  68fb6e:       44 89 fe                mov    %r15d,%esi
    0.00 :	  68fb71:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fb74:       e8 47 f3 ff ff          callq  68eec0 <LWLockAttemptLock>
         :
         :	                /* ok, grabbed the lock the second time round, need to undo queueing */
         :	                if (!mustwait)
    0.00 :	  68fb79:       84 c0                   test   %al,%al
    0.00 :	  68fb7b:       75 06                   jne    68fb83 <LWLockAcquire+0x93>
    0.00 :	  68fb7d:       eb 30                   jmp    68fbaf <LWLockAcquire+0xbf>
    0.00 :	  68fb7f:       90                      nop
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
         :	                        if (!proc->lwWaiting)
         :	                                break;
         :	                        extraWaits++;
    0.00 :	  68fb80:       83 c3 01                add    $0x1,%ebx
         :	                TRACE_POSTGRESQL_LWLOCK_WAIT_START(T_NAME(lock), T_ID(lock), mode);
         :
         :	                for (;;)
         :	                {
         :	                        /* "false" means cannot accept cancel/die interrupt here. */
         :	                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fb83:       31 f6                   xor    %esi,%esi
    0.00 :	  68fb85:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fb88:       e8 93 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                        if (!proc->lwWaiting)
    0.00 :	  68fb8d:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fb93:       75 eb                   jne    68fb80 <LWLockAcquire+0x90>
         :	                                break;
         :	                        extraWaits++;
         :	                }
         :
         :	                /* The atomic subtraction provides the barrier */
         :	                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fb95:       48 8b 45 d0             mov    -0x30(%rbp),%rax
    0.00 :	  68fb99:       c6 00 01                movb   $0x1,(%rax)
         :	#define PG_HAVE_ATOMIC_FETCH_ADD_U32
         :	static inline uint32
         :	pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *ptr, int32 add_)
         :	{
         :	        uint32 res;
         :	        __asm__ __volatile__(
    0.00 :	  68fb9c:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  68fba1:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  68fba5:       f0 0f c1 02             lock xadd %eax,(%rdx)
    0.00 :	  68fba9:       c6 45 c7 00             movb   $0x0,-0x39(%rbp)
    0.00 :	  68fbad:       eb a1                   jmp    68fb50 <LWLockAcquire+0x60>
         :	                        LOG_LWDEBUG("LWLockAcquire", lock, "acquired, undoing queue");
         :
         :	#ifdef LWLOCK_STATS
         :	                        lwstats->dequeue_self_count++;
         :	#endif
         :	                        if (!LWLockDequeueSelf(lock))
    0.00 :	  68fbaf:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  68fbb2:       e8 19 f6 ff ff          callq  68f1d0 <LWLockDequeueSelf>
    0.00 :	  68fbb7:       84 c0                   test   %al,%al
    0.00 :	  68fbb9:       75 1f                   jne    68fbda <LWLockAcquire+0xea>
    0.00 :	  68fbbb:       eb 06                   jmp    68fbc3 <LWLockAcquire+0xd3>
    0.00 :	  68fbbd:       0f 1f 00                nopl   (%rax)
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
         :	                                        if (!proc->lwWaiting)
         :	                                                break;
         :	                                        extraWaits++;
    0.00 :	  68fbc0:       83 c3 01                add    $0x1,%ebx
         :	                                 * reset at some inconvenient point later, and releaseOk
         :	                                 * wouldn't be managed correctly.
         :	                                 */
         :	                                for (;;)
         :	                                {
         :	                                        PGSemaphoreLock(&proc->sem, false);
    0.00 :	  68fbc3:       31 f6                   xor    %esi,%esi
    0.00 :	  68fbc5:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fbc8:       e8 53 85 fa ff          callq  638120 <PGSemaphoreLock>
         :	                                        if (!proc->lwWaiting)
    0.00 :	  68fbcd:       41 80 7c 24 41 00       cmpb   $0x0,0x41(%r12)
    0.00 :	  68fbd3:       75 eb                   jne    68fbc0 <LWLockAcquire+0xd0>
         :	                                /*
         :	                                 * Reset releaseOk - if somebody woke us they'll have set it
         :	                                 * to false. No need for a barrier here - we got the lock and
         :	                                 * will perform wakeup if necessary.
         :	                                 */
         :	                                BOOL_ACCESS_ONCE(lock->releaseOK) = true;
    0.00 :	  68fbd5:       41 c6 46 01 01          movb   $0x1,0x1(%r14)
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:1092
   50.00 :	  68fbda:       8b 15 28 de 4e 00       mov    0x4ede28(%rip),%edx        # b7da08 <num_held_lwlocks>
    0.00 :	  68fbe0:       48 63 c2                movslq %edx,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbe3:       83 c2 01                add    $0x1,%edx
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbe6:       48 c1 e0 04             shl    $0x4,%rax
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fbea:       85 db                   test   %ebx,%ebx
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbec:       89 15 16 de 4e 00       mov    %edx,0x4ede16(%rip)        # b7da08 <num_held_lwlocks>
         :	                *valptr = val;
         :
         :	        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(T_NAME(lock), T_ID(lock), mode);
         :
         :	        /* Add lock to list of locks held by this backend */
         :	        held_lwlocks[num_held_lwlocks].lock = lock;
    0.00 :	  68fbf2:       4c 89 b0 40 da b7 00    mov    %r14,0xb7da40(%rax)
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
    0.00 :	  68fbf9:       44 89 b8 48 da b7 00    mov    %r15d,0xb7da48(%rax)
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc00:       7e 15                   jle    68fc17 <LWLockAcquire+0x127>
    0.00 :	  68fc02:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                PGSemaphoreUnlock(&proc->sem);
    0.00 :	  68fc08:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  68fc0b:       83 eb 01                sub    $0x1,%ebx
    0.00 :	  68fc0e:       e8 7d 84 fa ff          callq  638090 <PGSemaphoreUnlock>
         :	        held_lwlocks[num_held_lwlocks++].mode = mode;
         :
         :	        /*
         :	         * Fix the process wait semaphore's count for any absorbed wakeups.
         :	         */
         :	        while (extraWaits-- > 0)
    0.00 :	  68fc13:       85 db                   test   %ebx,%ebx
    0.00 :	  68fc15:       7f f1                   jg     68fc08 <LWLockAcquire+0x118>
         :	 */
         :	bool
         :	LWLockAcquire(LWLock *l, LWLockMode mode)
         :	{
         :	        return LWLockAcquireCommon(l, mode, NULL, 0);
         :	}
    0.00 :	  68fc17:       0f b6 45 c7             movzbl -0x39(%rbp),%eax
    0.00 :	  68fc1b:       48 83 c4 18             add    $0x18,%rsp
    0.00 :	  68fc1f:       5b                      pop    %rbx
    0.00 :	  68fc20:       41 5c                   pop    %r12
    0.00 :	  68fc22:       41 5d                   pop    %r13
    0.00 :	  68fc24:       41 5e                   pop    %r14
    0.00 :	  68fc26:       41 5f                   pop    %r15
    0.00 :	  68fc28:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/storage/lmgr/lwlock.c:897
   50.00 :	  68fc29:       c3                      retq   
         :	         */
         :	        Assert(!(proc == NULL && IsUnderPostmaster));
         :
         :	        /* Ensure we will have room to remember the lock */
         :	        if (num_held_lwlocks >= MAX_SIMUL_LWLOCKS)
         :	                elog(ERROR, "too many LWLocks taken");
    0.00 :	  68fc2a:       ba 70 d1 8a 00          mov    $0x8ad170,%edx
    0.00 :	  68fc2f:       be b0 03 00 00          mov    $0x3b0,%esi
    0.00 :	  68fc34:       bf 85 d0 8a 00          mov    $0x8ad085,%edi
    0.00 :	  68fc39:       e8 e2 b7 0e 00          callq  77b420 <elog_start>
    0.00 :	  68fc3e:       be 8e d0 8a 00          mov    $0x8ad08e,%esi
    0.00 :	  68fc43:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  68fc48:       31 c0                   xor    %eax,%eax
    0.00 :	  68fc4a:       e8 e1 b5 0e 00          callq  77b230 <elog_finish>
    0.00 :	  68fc4f:       e8 7c 98 dd ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:654
   50.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798110 <AllocSetAlloc>:
         :	 *              MAXALIGN_DOWN(SIZE_MAX) - ALLOC_BLOCKHDRSZ - ALLOC_CHUNKHDRSZ
         :	 * All callers use a much-lower limit.
         :	 */
         :	static void *
         :	AllocSetAlloc(MemoryContext context, Size size)
         :	{
    0.00 :	  798110:       55                      push   %rbp
    0.00 :	  798111:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:654
   50.00 :	  798114:       4c 89 65 e0             mov    %r12,-0x20(%rbp)
    0.00 :	  798118:       4c 89 75 f0             mov    %r14,-0x10(%rbp)
    0.00 :	  79811c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  79811f:       48 89 5d d8             mov    %rbx,-0x28(%rbp)
    0.00 :	  798123:       4c 89 6d e8             mov    %r13,-0x18(%rbp)
    0.00 :	  798127:       49 89 f6                mov    %rsi,%r14
    0.00 :	  79812a:       4c 89 7d f8             mov    %r15,-0x8(%rbp)
    0.00 :	  79812e:       48 83 ec 30             sub    $0x30,%rsp
         :
         :	        /*
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
    0.00 :	  798132:       48 39 b7 b0 00 00 00    cmp    %rsi,0xb0(%rdi)
    0.00 :	  798139:       72 6d                   jb     7981a8 <AllocSetAlloc+0x98>
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  79813b:       31 f6                   xor    %esi,%esi
    0.00 :	  79813d:       49 83 fe 08             cmp    $0x8,%r14
    0.00 :	  798141:       77 3d                   ja     798180 <AllocSetAlloc+0x70>
         :	         * corresponding free list to see if there is a free chunk we could reuse.
         :	         * If one is found, remove it from the free list, make it again a member
         :	         * of the alloc set and return its data address.
         :	         */
         :	        fidx = AllocSetFreeIndex(size);
         :	        chunk = set->freelist[fidx];
    0.00 :	  798143:       48 63 c6                movslq %esi,%rax
    0.00 :	  798146:       48 8d 48 08             lea    0x8(%rax),%rcx
    0.00 :	  79814a:       49 8b 14 cc             mov    (%r12,%rcx,8),%rdx
         :	        if (chunk != NULL)
    0.00 :	  79814e:       48 85 d2                test   %rdx,%rdx
    0.00 :	  798151:       0f 84 c9 00 00 00       je     798220 <AllocSetAlloc+0x110>
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
    0.00 :	  798157:       48 8b 02                mov    (%rdx),%rax
    0.00 :	  79815a:       49 89 04 cc             mov    %rax,(%r12,%rcx,8)
         :	                /* fill the allocated space with junk */
         :	                randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	                AllocAllocInfo(set, chunk);
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  79815e:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        {
         :	                Assert(chunk->size >= size);
         :
         :	                set->freelist[fidx] = (AllocChunk) chunk->aset;
         :
         :	                chunk->aset = (void *) set;
    0.00 :	  798162:       4c 89 22                mov    %r12,(%rdx)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798165:       48 8b 5d d8             mov    -0x28(%rbp),%rbx
    0.00 :	  798169:       4c 8b 65 e0             mov    -0x20(%rbp),%r12
    0.00 :	  79816d:       4c 8b 6d e8             mov    -0x18(%rbp),%r13
    0.00 :	  798171:       4c 8b 75 f0             mov    -0x10(%rbp),%r14
    0.00 :	  798175:       4c 8b 7d f8             mov    -0x8(%rbp),%r15
    0.00 :	  798179:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/aset.c:928
   50.00 :	  79817a:       c3                      retq   
    0.00 :	  79817b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  798180:       49 8d 46 ff             lea    -0x1(%r14),%rax
    0.00 :	  798184:       48 89 c2                mov    %rax,%rdx
    0.00 :	  798187:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  79818b:       89 d0                   mov    %edx,%eax
    0.00 :	  79818d:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798190:       85 c0                   test   %eax,%eax
    0.00 :	  798192:       74 7c                   je     798210 <AllocSetAlloc+0x100>
    0.00 :	  798194:       89 c0                   mov    %eax,%eax
    0.00 :	  798196:       0f b6 80 80 1e 8e 00    movzbl 0x8e1e80(%rax),%eax
    0.00 :	  79819d:       8d 70 08                lea    0x8(%rax),%esi
    0.00 :	  7981a0:       eb a1                   jmp    798143 <AllocSetAlloc+0x33>
    0.00 :	  7981a2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * If requested size exceeds maximum for chunks, allocate an entire block
         :	         * for this request.
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
    0.00 :	  7981a8:       48 8d 5e 07             lea    0x7(%rsi),%rbx
    0.00 :	  7981ac:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  7981b0:       4c 8d 6b 30             lea    0x30(%rbx),%r13
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981b4:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  7981b7:       e8 74 14 cd ff          callq  469630 <malloc@plt>
         :	                if (block == NULL)
    0.00 :	  7981bc:       48 85 c0                test   %rax,%rax
         :	         */
         :	        if (size > set->allocChunkLimit)
         :	        {
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
    0.00 :	  7981bf:       48 89 c2                mov    %rax,%rdx
         :	                if (block == NULL)
    0.00 :	  7981c2:       0f 84 2e 02 00 00       je     7983f6 <AllocSetAlloc+0x2e6>
         :	                        ereport(ERROR,
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
    0.00 :	  7981c8:       4c 89 20                mov    %r12,(%rax)
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
    0.00 :	  7981cb:       48 8d 72 20             lea    0x20(%rdx),%rsi
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981cf:       4a 8d 04 28             lea    (%rax,%r13,1),%rax
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
    0.00 :	  7981d3:       4c 89 62 20             mov    %r12,0x20(%rdx)
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :	                block->aset = set;
         :	                block->freeptr = block->endptr = ((char *) block) + blksize;
    0.00 :	  7981d7:       48 89 42 18             mov    %rax,0x18(%rdx)
    0.00 :	  7981db:       48 89 42 10             mov    %rax,0x10(%rdx)
         :
         :	                chunk = (AllocChunk) (((char *) block) + ALLOC_BLOCKHDRSZ);
         :	                chunk->aset = set;
         :	                chunk->size = chunk_size;
    0.00 :	  7981df:       48 89 5e 08             mov    %rbx,0x8(%rsi)
         :
         :	                /*
         :	                 * Stick the new block underneath the active allocation block, so that
         :	                 * we don't lose the use of the space remaining therein.
         :	                 */
         :	                if (set->blocks != NULL)
    0.00 :	  7981e3:       49 8b 4c 24 38          mov    0x38(%r12),%rcx
    0.00 :	  7981e8:       48 85 c9                test   %rcx,%rcx
    0.00 :	  7981eb:       0f 84 cf 01 00 00       je     7983c0 <AllocSetAlloc+0x2b0>
         :	                {
         :	                        block->next = set->blocks->next;
    0.00 :	  7981f1:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  7981f5:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                        set->blocks->next = block;
    0.00 :	  7981f9:       48 89 51 08             mov    %rdx,0x8(%rcx)
         :	                 * if any, NOACCESS.
         :	                 */
         :	                VALGRIND_MAKE_MEM_NOACCESS((char *) chunk + ALLOC_CHUNK_PUBLIC,
         :	                                                 chunk_size + ALLOC_CHUNKHDRSZ - ALLOC_CHUNK_PUBLIC);
         :
         :	                return AllocChunkGetPointer(chunk);
    0.00 :	  7981fd:       48 8d 46 10             lea    0x10(%rsi),%rax
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  798201:       e9 5f ff ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  798206:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  79820d:       00 00 00 
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798210:       89 d0                   mov    %edx,%eax
    0.00 :	  798212:       0f b6 b0 80 1e 8e 00    movzbl 0x8e1e80(%rax),%esi
    0.00 :	  798219:       e9 25 ff ff ff          jmpq   798143 <AllocSetAlloc+0x33>
    0.00 :	  79821e:       66 90                   xchg   %ax,%ax
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798220:       4d 8b 4c 24 38          mov    0x38(%r12),%r9
         :	        }
         :
         :	        /*
         :	         * Choose the actual chunk size to allocate.
         :	         */
         :	        chunk_size = (1 << ALLOC_MINBITS) << fidx;
    0.00 :	  798225:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  79822a:       89 f1                   mov    %esi,%ecx
    0.00 :	  79822c:       d3 e0                   shl    %cl,%eax
    0.00 :	  79822e:       4c 63 f8                movslq %eax,%r15
         :
         :	        /*
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
    0.00 :	  798231:       4d 85 c9                test   %r9,%r9
    0.00 :	  798234:       0f 84 ce 00 00 00       je     798308 <AllocSetAlloc+0x1f8>
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  79823a:       49 8b 79 10             mov    0x10(%r9),%rdi
    0.00 :	  79823e:       4d 8b 41 18             mov    0x18(%r9),%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798242:       49 8d 47 10             lea    0x10(%r15),%rax
         :	         * If there is enough room in the active allocation block, we will put the
         :	         * chunk into that block.  Else must start a new one.
         :	         */
         :	        if ((block = set->blocks) != NULL)
         :	        {
         :	                Size            availspace = block->endptr - block->freeptr;
    0.00 :	  798246:       49 29 f8                sub    %rdi,%r8
         :
         :	                if (availspace < (chunk_size + ALLOC_CHUNKHDRSZ))
    0.00 :	  798249:       49 39 c0                cmp    %rax,%r8
    0.00 :	  79824c:       0f 83 52 01 00 00       jae    7983a4 <AllocSetAlloc+0x294>
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  798252:       49 83 f8 17             cmp    $0x17,%r8
    0.00 :	  798256:       0f 86 ac 00 00 00       jbe    798308 <AllocSetAlloc+0x1f8>
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  79825c:       41 ba 01 00 00 00       mov    $0x1,%r10d
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798262:       49 c7 c3 f0 ff ff ff    mov    $0xfffffffffffffff0,%r11
    0.00 :	  798269:       eb 5d                   jmp    7982c8 <AllocSetAlloc+0x1b8>
    0.00 :	  79826b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  798270:       89 c0                   mov    %eax,%eax
    0.00 :	  798272:       0f b6 88 80 1e 8e 00    movzbl 0x8e1e80(%rax),%ecx
    0.00 :	  798279:       4c 89 d0                mov    %r10,%rax
    0.00 :	  79827c:       8d 51 08                lea    0x8(%rcx),%edx
    0.00 :	  79827f:       83 c1 0b                add    $0xb,%ecx
    0.00 :	  798282:       48 d3 e0                shl    %cl,%rax
         :	                                /*
         :	                                 * In most cases, we'll get back the index of the next larger
         :	                                 * freelist than the one we need to put this chunk on.  The
         :	                                 * exception is when availchunk is exactly a power of 2.
         :	                                 */
         :	                                if (availchunk != ((Size) 1 << (a_fidx + ALLOC_MINBITS)))
    0.00 :	  798285:       48 39 c6                cmp    %rax,%rsi
    0.00 :	  798288:       74 0c                   je     798296 <AllocSetAlloc+0x186>
         :	                                {
         :	                                        a_fidx--;
    0.00 :	  79828a:       83 ea 01                sub    $0x1,%edx
         :	                                        Assert(a_fidx >= 0);
         :	                                        availchunk = ((Size) 1 << (a_fidx + ALLOC_MINBITS));
    0.00 :	  79828d:       4c 89 d6                mov    %r10,%rsi
    0.00 :	  798290:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  798293:       48 d3 e6                shl    %cl,%rsi
         :	                                chunk = (AllocChunk) (block->freeptr);
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  798296:       48 8d 44 37 10          lea    0x10(%rdi,%rsi,1),%rax
    0.00 :	  79829b:       49 89 41 10             mov    %rax,0x10(%r9)
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  79829f:       4c 89 d8                mov    %r11,%rax
         :
         :	                                chunk->size = availchunk;
    0.00 :	  7982a2:       48 89 77 08             mov    %rsi,0x8(%rdi)
         :
         :	                                /* Prepare to initialize the chunk header. */
         :	                                VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	                                block->freeptr += (availchunk + ALLOC_CHUNKHDRSZ);
         :	                                availspace -= (availchunk + ALLOC_CHUNKHDRSZ);
    0.00 :	  7982a6:       48 29 f0                sub    %rsi,%rax
    0.00 :	  7982a9:       49 01 c0                add    %rax,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982ac:       48 63 c2                movslq %edx,%rax
    0.00 :	  7982af:       48 83 c0 08             add    $0x8,%rax
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982b3:       49 83 f8 17             cmp    $0x17,%r8
         :
         :	                                chunk->size = availchunk;
         :	#ifdef MEMORY_CONTEXT_CHECKING
         :	                                chunk->requested_size = 0;              /* mark it free */
         :	#endif
         :	                                chunk->aset = (void *) set->freelist[a_fidx];
    0.00 :	  7982b7:       49 8b 14 c4             mov    (%r12,%rax,8),%rdx
    0.00 :	  7982bb:       48 89 17                mov    %rdx,(%rdi)
         :	                                set->freelist[a_fidx] = chunk;
    0.00 :	  7982be:       49 89 3c c4             mov    %rdi,(%r12,%rax,8)
         :	                         *
         :	                         * Because we can only get here when there's less than
         :	                         * ALLOC_CHUNK_LIMIT left in the block, this loop cannot iterate
         :	                         * more than ALLOCSET_NUM_FREELISTS-1 times.
         :	                         */
         :	                        while (availspace >= ((1 << ALLOC_MINBITS) + ALLOC_CHUNKHDRSZ))
    0.00 :	  7982c2:       76 44                   jbe    798308 <AllocSetAlloc+0x1f8>
    0.00 :	  7982c4:       49 8b 79 10             mov    0x10(%r9),%rdi
         :	                        {
         :	                                Size            availchunk = availspace - ALLOC_CHUNKHDRSZ;
    0.00 :	  7982c8:       49 8d 70 f0             lea    -0x10(%r8),%rsi
         :	{
         :	        int                     idx;
         :	        unsigned int t,
         :	                                tsize;
         :
         :	        if (size > (1 << ALLOC_MINBITS))
    0.00 :	  7982cc:       31 d2                   xor    %edx,%edx
    0.00 :	  7982ce:       b8 08 00 00 00          mov    $0x8,%eax
    0.00 :	  7982d3:       48 83 fe 08             cmp    $0x8,%rsi
    0.00 :	  7982d7:       76 ac                   jbe    798285 <AllocSetAlloc+0x175>
         :	        {
         :	                tsize = (size - 1) >> ALLOC_MINBITS;
    0.00 :	  7982d9:       49 8d 40 ef             lea    -0x11(%r8),%rax
    0.00 :	  7982dd:       48 89 c2                mov    %rax,%rdx
    0.00 :	  7982e0:       48 c1 ea 03             shr    $0x3,%rdx
         :	                 * justify micro-optimization effort.  The best approach seems to be
         :	                 * to use a lookup table.  Note that this code assumes that
         :	                 * ALLOCSET_NUM_FREELISTS <= 17, since we only cope with two bytes of
         :	                 * the tsize value.
         :	                 */
         :	                t = tsize >> 8;
    0.00 :	  7982e4:       89 d0                   mov    %edx,%eax
    0.00 :	  7982e6:       c1 e8 08                shr    $0x8,%eax
         :	                idx = t ? LogTable256[t] + 8 : LogTable256[tsize];
    0.00 :	  7982e9:       85 c0                   test   %eax,%eax
    0.00 :	  7982eb:       75 83                   jne    798270 <AllocSetAlloc+0x160>
    0.00 :	  7982ed:       89 d0                   mov    %edx,%eax
    0.00 :	  7982ef:       0f b6 90 80 1e 8e 00    movzbl 0x8e1e80(%rax),%edx
    0.00 :	  7982f6:       4c 89 d0                mov    %r10,%rax
    0.00 :	  7982f9:       8d 4a 03                lea    0x3(%rdx),%ecx
    0.00 :	  7982fc:       48 d3 e0                shl    %cl,%rax
    0.00 :	  7982ff:       eb 84                   jmp    798285 <AllocSetAlloc+0x175>
    0.00 :	  798301:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
    0.00 :	  798308:       49 8b 94 24 a8 00 00    mov    0xa8(%r12),%rdx
    0.00 :	  79830f:       00 
         :	                set->nextBlockSize <<= 1;
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798310:       49 8b 8c 24 a0 00 00    mov    0xa0(%r12),%rcx
    0.00 :	  798317:       00 
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  798318:       48 8d 04 12             lea    (%rdx,%rdx,1),%rax
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  79831c:       48 39 c8                cmp    %rcx,%rax
         :	                /*
         :	                 * The first such block has size initBlockSize, and we double the
         :	                 * space in each succeeding block, but not more than maxBlockSize.
         :	                 */
         :	                blksize = set->nextBlockSize;
         :	                set->nextBlockSize <<= 1;
    0.00 :	  79831f:       49 89 84 24 a8 00 00    mov    %rax,0xa8(%r12)
    0.00 :	  798326:       00 
         :	                if (set->nextBlockSize > set->maxBlockSize)
    0.00 :	  798327:       76 08                   jbe    798331 <AllocSetAlloc+0x221>
         :	                        set->nextBlockSize = set->maxBlockSize;
    0.00 :	  798329:       49 89 8c 24 a8 00 00    mov    %rcx,0xa8(%r12)
    0.00 :	  798330:       00 
         :
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
    0.00 :	  798331:       4d 8d 6f 30             lea    0x30(%r15),%r13
         :	                while (blksize < required_size)
    0.00 :	  798335:       4c 39 ea                cmp    %r13,%rdx
    0.00 :	  798338:       73 0e                   jae    798348 <AllocSetAlloc+0x238>
    0.00 :	  79833a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        blksize <<= 1;
    0.00 :	  798340:       48 01 d2                add    %rdx,%rdx
         :	                /*
         :	                 * If initBlockSize is less than ALLOC_CHUNK_LIMIT, we could need more
         :	                 * space... but try to keep it a power of 2.
         :	                 */
         :	                required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                while (blksize < required_size)
    0.00 :	  798343:       49 39 d5                cmp    %rdx,%r13
    0.00 :	  798346:       77 f8                   ja     798340 <AllocSetAlloc+0x230>
    0.00 :	  798348:       48 89 d3                mov    %rdx,%rbx
    0.00 :	  79834b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                while (block == NULL && blksize > 1024 * 1024)
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  798350:       48 89 df                mov    %rbx,%rdi
    0.00 :	  798353:       e8 d8 12 cd ff          callq  469630 <malloc@plt>
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798358:       48 85 c0                test   %rax,%rax
         :	                {
         :	                        blksize >>= 1;
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
    0.00 :	  79835b:       48 89 c2                mov    %rax,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  79835e:       74 78                   je     7983d8 <AllocSetAlloc+0x2c8>
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798360:       48 85 d2                test   %rdx,%rdx
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  798363:       49 89 d1                mov    %rdx,%r9
         :	                        if (blksize < required_size)
         :	                                break;
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
    0.00 :	  798366:       0f 84 10 01 00 00       je     79847c <AllocSetAlloc+0x36c>
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  79836c:       48 8d 42 20             lea    0x20(%rdx),%rax
         :	                                        (errcode(ERRCODE_OUT_OF_MEMORY),
         :	                                         errmsg("out of memory"),
         :	                                         errdetail("Failed on request of size %zu.", size)));
         :	                }
         :
         :	                block->aset = set;
    0.00 :	  798370:       4c 89 22                mov    %r12,(%rdx)
         :	                block->freeptr = ((char *) block) + ALLOC_BLOCKHDRSZ;
    0.00 :	  798373:       48 89 42 10             mov    %rax,0x10(%rdx)
         :	                block->endptr = ((char *) block) + blksize;
    0.00 :	  798377:       48 8d 04 1a             lea    (%rdx,%rbx,1),%rax
    0.00 :	  79837b:       48 89 42 18             mov    %rax,0x18(%rdx)
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  79837f:       49 83 bc 24 b8 00 00    cmpq   $0x0,0xb8(%r12)
    0.00 :	  798386:       00 00 
    0.00 :	  798388:       0f 84 99 00 00 00       je     798427 <AllocSetAlloc+0x317>
         :
         :	                /* Mark unallocated space NOACCESS. */
         :	                VALGRIND_MAKE_MEM_NOACCESS(block->freeptr,
         :	                                                                   blksize - ALLOC_BLOCKHDRSZ);
         :
         :	                block->next = set->blocks;
    0.00 :	  79838e:       49 8b 44 24 38          mov    0x38(%r12),%rax
    0.00 :	  798393:       48 89 42 08             mov    %rax,0x8(%rdx)
         :	                set->blocks = block;
    0.00 :	  798397:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  79839c:       49 8d 47 10             lea    0x10(%r15),%rax
    0.00 :	  7983a0:       48 8b 7a 10             mov    0x10(%rdx),%rdi
         :	        chunk = (AllocChunk) (block->freeptr);
         :
         :	        /* Prepare to initialize the chunk header. */
         :	        VALGRIND_MAKE_MEM_UNDEFINED(chunk, ALLOC_CHUNK_USED);
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
    0.00 :	  7983a4:       48 8d 04 07             lea    (%rdi,%rax,1),%rax
    0.00 :	  7983a8:       49 89 41 10             mov    %rax,0x10(%r9)
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
    0.00 :	  7983ac:       4c 89 27                mov    %r12,(%rdi)
         :	        /* fill the allocated space with junk */
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
    0.00 :	  7983af:       48 8d 47 10             lea    0x10(%rdi),%rax
         :
         :	        block->freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);
         :	        Assert(block->freeptr <= block->endptr);
         :
         :	        chunk->aset = (void *) set;
         :	        chunk->size = chunk_size;
    0.00 :	  7983b3:       4c 89 7f 08             mov    %r15,0x8(%rdi)
         :	        randomize_mem((char *) AllocChunkGetPointer(chunk), size);
         :	#endif
         :
         :	        AllocAllocInfo(set, chunk);
         :	        return AllocChunkGetPointer(chunk);
         :	}
    0.00 :	  7983b7:       e9 a9 fd ff ff          jmpq   798165 <AllocSetAlloc+0x55>
    0.00 :	  7983bc:       0f 1f 40 00             nopl   0x0(%rax)
         :	                        block->next = set->blocks->next;
         :	                        set->blocks->next = block;
         :	                }
         :	                else
         :	                {
         :	                        block->next = NULL;
    0.00 :	  7983c0:       48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)
    0.00 :	  7983c7:       00 
         :	                        set->blocks = block;
    0.00 :	  7983c8:       49 89 54 24 38          mov    %rdx,0x38(%r12)
    0.00 :	  7983cd:       e9 2b fe ff ff          jmpq   7981fd <AllocSetAlloc+0xed>
    0.00 :	  7983d2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :
         :	                /*
         :	                 * We could be asking for pretty big blocks here, so cope if malloc
         :	                 * fails.  But give up if there's less than a meg or so available...
         :	                 */
         :	                while (block == NULL && blksize > 1024 * 1024)
    0.00 :	  7983d8:       48 81 fb 00 00 10 00    cmp    $0x100000,%rbx
    0.00 :	  7983df:       0f 86 7b ff ff ff       jbe    798360 <AllocSetAlloc+0x250>
         :	                {
         :	                        blksize >>= 1;
    0.00 :	  7983e5:       48 d1 eb                shr    %rbx
         :	                        if (blksize < required_size)
    0.00 :	  7983e8:       49 39 dd                cmp    %rbx,%r13
    0.00 :	  7983eb:       0f 86 5f ff ff ff       jbe    798350 <AllocSetAlloc+0x240>
    0.00 :	  7983f1:       e9 6a ff ff ff          jmpq   798360 <AllocSetAlloc+0x250>
         :	                chunk_size = MAXALIGN(size);
         :	                blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;
         :	                block = (AllocBlock) malloc(blksize);
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  7983f6:       48 8b 3d 6b 24 42 00    mov    0x42246b(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  7983fd:       e8 3e 07 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798402:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  798405:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  79840a:       ba a7 02 00 00          mov    $0x2a7,%edx
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  79840f:       be 6d 1d 8e 00          mov    $0x8e1d6d,%esi
    0.00 :	  798414:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  798419:       e8 a2 26 fe ff          callq  77aac0 <errstart>
    0.00 :	  79841e:       84 c0                   test   %al,%al
    0.00 :	  798420:       75 20                   jne    798442 <AllocSetAlloc+0x332>
    0.00 :	  798422:       e8 a9 10 cd ff          callq  4694d0 <abort@plt>
         :	                 * cycling even for contexts created with minContextSize = 0; that way
         :	                 * we don't have to force space to be allocated in contexts that might
         :	                 * never need any space.  Don't mark an oversize block as a keeper,
         :	                 * however.
         :	                 */
         :	                if (set->keeper == NULL && blksize == set->initBlockSize)
    0.00 :	  798427:       49 39 9c 24 98 00 00    cmp    %rbx,0x98(%r12)
    0.00 :	  79842e:       00 
    0.00 :	  79842f:       0f 85 59 ff ff ff       jne    79838e <AllocSetAlloc+0x27e>
         :	                        set->keeper = block;
    0.00 :	  798435:       49 89 94 24 b8 00 00    mov    %rdx,0xb8(%r12)
    0.00 :	  79843c:       00 
    0.00 :	  79843d:       e9 4c ff ff ff          jmpq   79838e <AllocSetAlloc+0x27e>
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
         :	                        ereport(ERROR,
    0.00 :	  798442:       4c 89 f6                mov    %r14,%rsi
    0.00 :	  798445:       bf a8 1d 8e 00          mov    $0x8e1da8,%edi
    0.00 :	  79844a:       31 c0                   xor    %eax,%eax
    0.00 :	  79844c:       e8 df 40 fe ff          callq  77c530 <errdetail>
    0.00 :	  798451:       bf 04 9c 7b 00          mov    $0x7b9c04,%edi
    0.00 :	  798456:       41 89 c4                mov    %eax,%r12d
    0.00 :	  798459:       31 c0                   xor    %eax,%eax
    0.00 :	  79845b:       e8 40 44 fe ff          callq  77c8a0 <errmsg>
    0.00 :	  798460:       bf c5 20 00 00          mov    $0x20c5,%edi
    0.00 :	  798465:       89 c3                   mov    %eax,%ebx
    0.00 :	  798467:       e8 e4 48 fe ff          callq  77cd50 <errcode>
    0.00 :	  79846c:       44 89 e2                mov    %r12d,%edx
    0.00 :	  79846f:       89 c7                   mov    %eax,%edi
    0.00 :	  798471:       89 de                   mov    %ebx,%esi
    0.00 :	  798473:       31 c0                   xor    %eax,%eax
    0.00 :	  798475:       e8 66 21 fe ff          callq  77a5e0 <errfinish>
    0.00 :	  79847a:       eb a6                   jmp    798422 <AllocSetAlloc+0x312>
         :	                        block = (AllocBlock) malloc(blksize);
         :	                }
         :
         :	                if (block == NULL)
         :	                {
         :	                        MemoryContextStats(TopMemoryContext);
    0.00 :	  79847c:       48 8b 3d e5 23 42 00    mov    0x4223e5(%rip),%rdi        # bba868 <TopMemoryContext>
    0.00 :	  798483:       e8 b8 06 00 00          callq  798b40 <MemoryContextStats>
         :	                        ereport(ERROR,
    0.00 :	  798488:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  79848b:       b9 80 1f 8e 00          mov    $0x8e1f80,%ecx
    0.00 :	  798490:       ba 69 03 00 00          mov    $0x369,%edx
    0.00 :	  798495:       e9 75 ff ff ff          jmpq   79840f <AllocSetAlloc+0x2ff>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

   50.00 ??:0
   50.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000013c0 <do_get_write_access>:
    0.00 :	    13c0:       41 57                   push   %r15
    0.00 :	    13f2:       41 56                   xor    %dh,%dh
    0.00 :	    13f4:       41 55                   add    %al,(%rdx)
    0.00 :	    13f6:       41 54 49 89 f4 55       jne    16c2 <__journal_refile_buffer+0x1372>
    0.00 :	    13fc:       53 48 81 ec 88          lea    0x40(%rsp),%rdx
    0.00 :	    1401:       00 00 00 48 89          lea    0x40(%rsp),%r15
    0.00 :	    1406:       7c 24 28 89 54 24 24    movq   $0x0,0x38(%rsp)
    0.00 :	    140d:       f6 47 
    0.00 :	    140f:       14 04 0f 85 db 02 00    mov    %gs:0x0,%rax
    0.00 :	    1416:       00 4c 
    0.00 :	    1418:       8b 2f 49 8b 45          mov    %rdx,0x8(%rsp)
    0.00 :	    141d:       00 48 89 44             add    $0x28,%rdx
    0.00 :	    1421:       24 30 f6 00 02          mov    %rax,0x18(%rsp)
    0.00 :	    1426:       0f 85 c6 02 00          mov    %rdx,0x10(%rsp)
    0.00 :	    142b:       00 48 8d 54             add    $0x10,%r15
    0.00 :	    142f:       24                      nop
    0.00 :	    1430:       40 4c 8d 7c             mov    (%r12),%rbp
    0.00 :	    1434:       24 40 48 c7 44 24       lock btsl $0x2,0x0(%rbp)
    0.00 :	    143a:       38 00                   sbb    %eax,%eax
    0.00 :	    143c:       00 00                   test   %eax,%eax
    0.00 :	    143e:       00 65 48 8b 04 25       jne    15f8 <__journal_refile_buffer+0x12a8>
    0.00 :	    1444:       00 00 00 00 48 89       lock btsl $0x14,0x0(%rbp)
 ??:0
   50.00 :	    144a:       54 24                   sbb    %eax,%eax
    0.00 :	    144c:       08 48                   test   %eax,%eax
    0.00 :	    144e:       83 c2                   je     1469 <__journal_refile_buffer+0x1119>
    0.00 :	    1450:       28 48                   pause  
    0.00 :	    1452:       89 44 24 18             mov    0x0(%rbp),%rax
    0.00 :	    1456:       48 89 54 24 10          test   $0x100000,%eax
    0.00 :	    145b:       49 83                   jne    1450 <__journal_refile_buffer+0x1100>
    0.00 :	    145d:       c7 10 90 49 8b 2c       lock btsl $0x14,0x0(%rbp)
    0.00 :	    1463:       24 f0                   sbb    %eax,%eax
    0.00 :	    1465:       0f ba                   test   %eax,%eax
    0.00 :	    1467:       6d 00                   jne    1450 <__journal_refile_buffer+0x1100>
    0.00 :	    1469:       02 19 c0 85             mov    0x0(%rbp),%rax
    0.00 :	    146d:       c0 0f 85 b4             lea    0x2(%rbp),%r14
    0.00 :	    1471:       01 00                   test   $0x2,%al
    0.00 :	    1473:       00 f0                   je     14cf <__journal_refile_buffer+0x117f>
    0.00 :	    1475:       0f ba 6d 00 14          mov    0x28(%r12),%rax
    0.00 :	    147a:       19 c0 85                test   %rax,%rax
    0.00 :	    147d:       c0 74                   je     14c1 <__journal_refile_buffer+0x1171>
    0.00 :	    147f:       19 f3 90                cmp    %r13,%rax
    0.00 :	    1482:       48 8b 45 00 a9 00       jne    17f0 <__journal_refile_buffer+0x14a0>
    0.00 :	    1488:       00 10 00 75 f3          mov    0x30(%r12),%rax
    0.00 :	    148d:       f0 0f ba                test   %rax,%rax
    0.00 :	    1490:       6d 00                   je     149b <__journal_refile_buffer+0x114b>
    0.00 :	    1492:       14 19 c0                cmp    %r13,%rax
    0.00 :	    1495:       85 c0 75 e7 48 8b       jne    1808 <__journal_refile_buffer+0x14b8>
    0.00 :	    149b:       45 00 4c 8d             mov    0x18(%rbp),%rbx
    0.00 :	    149f:       75 02 a8 02             mov    0x30(%rbp),%rdi
    0.00 :	    14a3:       74 5a 49 8b 44          lea    0x40(%rsp),%rsi
    0.00 :	    14a8:       24 28 48 85 c0          callq  14ad <__journal_refile_buffer+0x115d>
    0.00 :	    14ad:       74 42 4c                mov    %rbx,%rdx
    0.00 :	    14b0:       39 e8 0f                mov    %rax,%rsi
    0.00 :	    14b3:       85 68 03 00 00 49 8b    mov    $0x0,%rdi
    0.00 :	    14ba:       44 24                   xor    %eax,%eax
    0.00 :	    14bc:       30 48 85 c0 74          callq  14c1 <__journal_refile_buffer+0x1171>
    0.00 :	    14c1:       09 4c 39 e8 0f          lock andb $0xfd,0x0(%rbp)
    0.00 :	    14c6:       85 6d 03 00             lea    0x2(%rbp),%r14
    0.00 :	    14ca:       00 48 8b 5d 18          lock orb $0x8,0x2(%rbp)
    0.00 :	    14cf:       48 8b 7d                mov    %rbp,%rdi
    0.00 :	    14d2:       30 48 8d 74 24          callq  14d7 <__journal_refile_buffer+0x1187>
    0.00 :	    14d7:       40 e8 00 00 00          mov    0x28(%rsp),%rax
    0.00 :	    14dc:       00 48 89 da             testb  $0x4,0x14(%rax)
    0.00 :	    14e0:       48 89                   je     150c <__journal_refile_buffer+0x11bc>
    0.00 :	    14e2:       c6 48 c7 c7 00          lock andb $0xef,(%r14)
    0.00 :	    14e7:       00 00 00 31 c0          mov    $0xffffffe2,%ebx
    0.00 :	    14ec:       e8 00 00 00 00 f0       cmpq   $0x0,0x38(%rsp)
    0.00 :	    14f2:       80 65 00 fd 4c 8d       jne    1838 <__journal_refile_buffer+0x14e8>
    0.00 :	    14f8:       75 02 f0 80 4d 02 08    add    $0x88,%rsp
   50.00 :	    14ff:       48 89                   mov    %ebx,%eax
    0.00 :	    1501:       ef                      pop    %rbx
    0.00 :	    1502:       e8                      pop    %rbp
    0.00 :	    1503:       00 00                   pop    %r12
    0.00 :	    1505:       00 00                   pop    %r13
    0.00 :	    1507:       48 8b                   pop    %r14
    0.00 :	    1509:       44 24                   pop    %r15
    0.00 :	    150b:       28                      retq   
    0.00 :	    150c:       f6 40 14                mov    (%rax),%rax
    0.00 :	    150f:       04 74 2a                mov    (%rax),%rax
    0.00 :	    1512:       f0 41 80                testb  $0x2,(%rax)
    0.00 :	    1515:       26 ef                   jne    14e2 <__journal_refile_buffer+0x1192>
    0.00 :	    1517:       bb e2 ff ff ff          cmp    %r13,0x28(%r12)
    0.00 :	    151c:       48 83 7c 24 38 00       je     16a9 <__journal_refile_buffer+0x1359>
    0.00 :	    1522:       0f 85 40 03 00          cmp    %r13,0x30(%r12)
    0.00 :	    1527:       00 48 81 c4 88 00       je     16a9 <__journal_refile_buffer+0x1359>
    0.00 :	    152d:       00 00 89 d8 5b 5d       cmpq   $0x0,0x18(%r12)
    0.00 :	    1533:       41 5c 41 5d 41 5e 41    movl   $0x0,0x10(%r12)
    0.00 :	    153a:       5f c3 
    0.00 :	    153c:       48 8b 00 48 8b 00       jne    17a9 <__journal_refile_buffer+0x1459>
    0.00 :	    1542:       f6 00 02 75 cb          mov    0x28(%r12),%rdx
    0.00 :	    1547:       4d 39 6c                test   %rdx,%rdx
    0.00 :	    154a:       24 28 0f 84 87 01       je     1755 <__journal_refile_buffer+0x1405>
    0.00 :	    1550:       00 00 4d                cmp    %r13,%rdx
    0.00 :	    1553:       39 6c 24 30 0f 84       je     179e <__journal_refile_buffer+0x144e>
    0.00 :	    1559:       7c 01 00 00 49 83       cmpq   $0x0,0x30(%r12)
    0.00 :	    155f:       7c                      nop
    0.00 :	    1560:       24 18 00 41 c7 44       jne    17df <__journal_refile_buffer+0x148f>
    0.00 :	    1566:       24 10 00 00 00          mov    0x30(%rsp),%rax
    0.00 :	    156b:       00 0f 85 67             cmp    0x58(%rax),%rdx
    0.00 :	    156f:       02                      nop
    0.00 :	    1570:       00 00 49 8b 54 24       jne    17e8 <__journal_refile_buffer+0x1498>
    0.00 :	    1576:       28 48 85 d2 0f          mov    0xc(%r12),%eax
    0.00 :	    157b:       84 05 02                cmp    $0x5,%eax
    0.00 :	    157e:       00 00 4c 39 ea 0f       je     16cc <__journal_refile_buffer+0x137c>
    0.00 :	    1584:       84 45 02                cmp    $0x3,%eax
    0.00 :	    1587:       00 00                   je     1605 <__journal_refile_buffer+0x12b5>
    0.00 :	    1589:       49 83 7c 24 30 00       cmpq   $0x0,0x38(%rsp)
    0.00 :	    158f:       90                      nop
    0.00 :	    1590:       0f 85 79 02 00 00       jne    17c1 <__journal_refile_buffer+0x1471>
    0.00 :	    1596:       48 8b 44 24 30          lock andb $0xef,(%r14)
    0.00 :	    159b:       48 3b 50 58             mov    (%r12),%rax
    0.00 :	    159f:       90 0f 85 72 02          mov    $0xffffffff,%esi
    0.00 :	    15a4:       00 00 41 8b             mov    0x20(%rax),%rax
    0.00 :	    15a8:       44 24 0c 83             sub    $0x1,%rax
    0.00 :	    15ac:       f8 05 0f 84             shr    $0xb,%rax
    0.00 :	    15b0:       48 01 00                add    $0x1,%esi
    0.00 :	    15b3:       00 83 f8                shr    %rax
    0.00 :	    15b6:       03 74                   jne    15b0 <__journal_refile_buffer+0x1260>
    0.00 :	    15b8:       7c 48 83 7c 24          mov    $0x50,%edi
    0.00 :	    15bd:       38 00 90 0f 85          callq  15c2 <__journal_refile_buffer+0x1272>
    0.00 :	    15c2:       2b 02 00                test   %rax,%rax
    0.00 :	    15c5:       00 f0 41 80 26          mov    %rax,0x38(%rsp)
    0.00 :	    15ca:       ef 49 8b 04 24 be       jne    1430 <__journal_refile_buffer+0x10e0>
    0.00 :	    15d0:       ff ff ff ff 48 8b 40    mov    $0x0,%rsi
    0.00 :	    15d7:       20 48 83 e8 01 48 c1    mov    $0x0,%rdi
    0.00 :	    15de:       e8 0b 83 c6 01          mov    $0xfffffff4,%ebx
    0.00 :	    15e3:       48 d1 e8 75 f8          callq  15e8 <__journal_refile_buffer+0x1298>
    0.00 :	    15e8:       bf 50 00                mov    %rbp,%rdi
    0.00 :	    15eb:       00 00 e8 00 00          callq  10 <journal_release_buffer-0x20>
    0.00 :	    15f0:       00 00 48 85 c0          jmpq   16ab <__journal_refile_buffer+0x135b>
    0.00 :	    15f5:       48 89 44                nopl   (%rax)
    0.00 :	    15f8:       24 38 0f                mov    %rbp,%rdi
    0.00 :	    15fb:       85 60 fe ff ff          callq  1600 <__journal_refile_buffer+0x12b0>
    0.00 :	    1600:       48 c7 c6 00 00          jmpq   1444 <__journal_refile_buffer+0x10f4>
    0.00 :	    1605:       00 00 48 c7             mov    0x24(%rsp),%eax
    0.00 :	    1609:       c7 00                   test   %eax,%eax
    0.00 :	    160b:       00 00 00 bb f4 ff       jne    1589 <__journal_refile_buffer+0x1239>
    0.00 :	    1611:       ff ff e8                xor    %r15d,%r15d
    0.00 :	    1614:       00 00 00 00 48          mov    %r13,0x30(%r12)
    0.00 :	    1619:       89 ef e8                mov    %rdx,%rax
    0.00 :	    161c:       20 ea ff                test   %rax,%rax
    0.00 :	    161f:       ff e9 b6 00 00 00       je     1758 <__journal_refile_buffer+0x1408>
    0.00 :	    1625:       0f 1f                   xor    %ebx,%ebx
    0.00 :	    1627:       00 48 89                test   %r15d,%r15d
    0.00 :	    162a:       ef e8                   je     16ab <__journal_refile_buffer+0x135b>
    0.00 :	    162c:       00 00 00 00             mov    (%r12),%rdx
    0.00 :	    1630:       e9 3f fe                mov    (%rdx),%rax
    0.00 :	    1633:       ff ff                   test   $0x1,%al
    0.00 :	    1635:       8b 44 24 24 85 c0       je     180c <__journal_refile_buffer+0x14bc>
    0.00 :	    163b:       0f 85 78 ff             mov    0x10(%rdx),%rsi
    0.00 :	    163f:       ff ff 45 31             mov    0x28(%rdx),%rdx
    0.00 :	    1643:       ff 4d 89 6c 24 30 48    mov    %gs:0x0,%rbx
    0.00 :	    164a:       89 d0 
    0.00 :	    164c:       48 85 c0 0f 84 33 01    sub    $0x1fd8,%rbx
    0.00 :	    1653:       00 00 31 db 45 85       and    $0xfff,%edx
    0.00 :	    1659:       ff 74 7f 49             addl   $0x1,0x1c(%rbx)
    0.00 :	    165d:       8b 14 24 48 8b 02 a8    movabs $0x160000000000,%rax
    0.00 :	    1664:       01 0f 84 
    0.00 :	    1667:       d1 01 00 00             mov    (%r12),%rcx
    0.00 :	    166b:       48 8b 72                movslq %edx,%rdx
    0.00 :	    166e:       10 48 8b                add    %rax,%rsi
    0.00 :	    1671:       52 28 65 48 8b 1c 25    movabs $0x6db6db6db6db6db7,%rax
    0.00 :	    1678:       00 00 00 
    0.00 :	    167b:       00 48 81 eb d8          mov    0x18(%r12),%rdi
    0.00 :	    1680:       1f 00 00 81             sar    $0x3,%rsi
    0.00 :	    1684:       e2 ff 0f 00             imul   %rax,%rsi
    0.00 :	    1688:       00 83 43 1c 01 48 b8    movabs $0xffff880000000000,%rax
    0.00 :	    168f:       00 00 00 
    0.00 :	    1692:       00 00 16 00             shl    $0xc,%rsi
    0.00 :	    1696:       00 49 8b                add    %rax,%rsi
    0.00 :	    1699:       0c 24 48                add    %rdx,%rsi
    0.00 :	    169c:       63 d2 48 01             mov    0x20(%rcx),%rdx
    0.00 :	    16a0:       c6 48 b8 b7 6d          callq  16a5 <__journal_refile_buffer+0x1355>
    0.00 :	    16a5:       db b6 6d db             subl   $0x1,0x1c(%rbx)
    0.00 :	    16a9:       b6 6d                   xor    %ebx,%ebx
    0.00 :	    16ab:       49 8b 7c 24 18          lock andb $0xef,(%r14)
    0.00 :	    16b0:       48 c1 fe 03 48          mov    0x28(%rsp),%rdi
    0.00 :	    16b5:       0f af f0                mov    %r12,%rsi
    0.00 :	    16b8:       48 b8 00 00 00          callq  16bd <__journal_refile_buffer+0x136d>
    0.00 :	    16bd:       00 00 88 ff ff          jmpq   14ec <__journal_refile_buffer+0x119c>
    0.00 :	    16c2:       48 c1 e6 0c 48          mov    $0xffffffe2,%ebx
    0.00 :	    16c7:       01 c6 48 01 d6          jmpq   14f8 <__journal_refile_buffer+0x11a8>
    0.00 :	    16cc:       48 8b 51 20 e8          mov    0x8(%rsp),%rdi
    0.00 :	    16d1:       00 00                   xor    %eax,%eax
    0.00 :	    16d3:       00 00 83 6b 1c          mov    $0x7,%ecx
    0.00 :	    16d8:       01 31 db f0 41          mov    $0x16,%esi
    0.00 :	    16dd:       80 26 ef                rep stos %rax,%es:(%rdi)
    0.00 :	    16e0:       48 8b 7c                mov    %rbp,%rdi
    0.00 :	    16e3:       24 28 4c 89 e6          mov    %rbp,0x40(%rsp)
    0.00 :	    16e8:       e8 00 00 00 00 e9 2a    movl   $0x16,0x48(%rsp)
    0.00 :	    16ef:       fe 
    0.00 :	    16f0:       ff ff bb e2 ff ff ff    movq   $0x0,0x60(%rsp)
    0.00 :	    16f7:       e9 2c 
    0.00 :	    16f9:       fe ff ff 48 8b          mov    0x10(%rsp),%rax
    0.00 :	    16fe:       7c 24 08 31 c0          mov    0x18(%rsp),%rdx
    0.00 :	    1703:       b9 07 00 00 00          mov    %rax,0x68(%rsp)
    0.00 :	    1708:       be 16 00 00 00          mov    %rdx,0x58(%rsp)
    0.00 :	    170d:       f3 48 ab 48 89          mov    %rax,0x70(%rsp)
    0.00 :	    1712:       ef 48 89 6c 24          callq  1717 <__journal_refile_buffer+0x13c7>
    0.00 :	    1717:       40 c7 44                mov    %rax,%rbx
    0.00 :	    171a:       24 48 16 00 00          lock andb $0xef,(%r14)
    0.00 :	    171f:       00 48                   jmp    172d <__journal_refile_buffer+0x13dd>
    0.00 :	    1721:       c7 44 24 60 00 00 00    nopl   0x0(%rax)
    0.00 :	    1728:       00 48 8b 44 24          callq  172d <__journal_refile_buffer+0x13dd>
    0.00 :	    172d:       10 48 8b 54 24          mov    $0x2,%edx
    0.00 :	    1732:       18 48 89                mov    %r15,%rsi
    0.00 :	    1735:       44 24 68                mov    %rbx,%rdi
    0.00 :	    1738:       48 89 54 24 58          callq  173d <__journal_refile_buffer+0x13ed>
    0.00 :	    173d:       48 89 44 24 70 e8       cmpl   $0x5,0xc(%r12)
    0.00 :	    1743:       00 00                   je     1728 <__journal_refile_buffer+0x13d8>
    0.00 :	    1745:       00 00 48                mov    %r15,%rsi
    0.00 :	    1748:       89 c3 f0                mov    %rbx,%rdi
    0.00 :	    174b:       41 80 26 ef eb          callq  1750 <__journal_refile_buffer+0x1400>
    0.00 :	    1750:       0c 0f 1f 80 00          jmpq   1430 <__journal_refile_buffer+0x10e0>
    0.00 :	    1755:       00 00 00                xor    %r15d,%r15d
    0.00 :	    1758:       e8 00 00 00 00 ba       cmpq   $0x0,0x30(%r12)
    0.00 :	    175e:       02 00 00 00 4c 89       jne    1864 <__journal_refile_buffer+0x1514>
    0.00 :	    1764:       fe 48 89 df e8          mov    0x30(%rsp),%rbx
    0.00 :	    1769:       00 00 00 00 41          mov    %r13,0x28(%r12)
    0.00 :	    176e:       83 7c 24 0c 05 74 e3    add    $0x14c,%rbx
    0.00 :	    1775:       4c 89 fe                mov    %rbx,%rdi
    0.00 :	    1778:       48 89 df e8 00          callq  177d <__journal_refile_buffer+0x142d>
    0.00 :	    177d:       00 00 00 e9 db          mov    $0x7,%edx
    0.00 :	    1782:       fc ff ff                mov    %r13,%rsi
    0.00 :	    1785:       45 31 ff                mov    %r12,%rdi
    0.00 :	    1788:       49 83 7c 24 30          callq  178d <__journal_refile_buffer+0x143d>
    0.00 :	    178d:       00 0f 85 00 01          mov    0x30(%rsp),%rdx
    0.00 :	    1792:       00 00 48 8b 5c 24 30    incw   0x14c(%rdx)
    0.00 :	    1799:       4d 89 6c 24 28          jmpq   1625 <__journal_refile_buffer+0x12d5>
    0.00 :	    179e:       48 81 c3                mov    %r13,%rax
    0.00 :	    17a1:       4c 01 00                xor    %r15d,%r15d
    0.00 :	    17a4:       00 48 89 df e8          jmpq   161c <__journal_refile_buffer+0x12cc>
    0.00 :	    17a9:       00 00 00 00 ba 07       cmpq   $0x0,0x30(%r12)
    0.00 :	    17af:       00 00 00 4c 89 ee       jne    1860 <__journal_refile_buffer+0x1510>
    0.00 :	    17b5:       4c 89 e7 e8 00          mov    %r13,0x30(%r12)
    0.00 :	    17ba:       00 00                   xor    %ebx,%ebx
    0.00 :	    17bc:       00 48 8b 54 24          jmpq   16ab <__journal_refile_buffer+0x135b>
    0.00 :	    17c1:       30 66 ff 82 4c          mov    0x38(%rsp),%rax
    0.00 :	    17c6:       01 00 00 e9 87 fe       mov    $0x1,%r15d
    0.00 :	    17cc:       ff ff 4c 89 e8 45 31    movq   $0x0,0x38(%rsp)
    0.00 :	    17d3:       ff e9 
    0.00 :	    17d5:       73 fe ff ff 49          mov    %rax,0x18(%r12)
    0.00 :	    17da:       83 7c 24 30 00          jmpq   1614 <__journal_refile_buffer+0x12c4>
    0.00 :	    17df:       0f 85                   ud2    
    0.00 :	    17e1:       ab 00                   jmp    17e1 <__journal_refile_buffer+0x1491>
    0.00 :	    17e3:       00 00 4d 89 6c          nopl   0x0(%rax,%rax,1)
    0.00 :	    17e8:       24 30                   ud2    
    0.00 :	    17ea:       31 db                   jmp    17ea <__journal_refile_buffer+0x149a>
    0.00 :	    17ec:       e9 ea fe ff             nopl   0x0(%rax)
    0.00 :	    17f0:       ff 48 8b 44 24          mov    0x30(%rsp),%rdx
    0.00 :	    17f5:       38 41 bf 01             cmp    0x58(%rdx),%rax
    0.00 :	    17f9:       00 00 00 48 c7 44       je     1488 <__journal_refile_buffer+0x1138>
    0.00 :	    17ff:       24 38                   ud2    
    0.00 :	    1801:       00 00                   jmp    1801 <__journal_refile_buffer+0x14b1>
    0.00 :	    1803:       00 00 49 89 44          nopl   0x0(%rax,%rax,1)
    0.00 :	    1808:       24 18                   ud2    
    0.00 :	    180a:       e9 35                   jmp    180a <__journal_refile_buffer+0x14ba>
    0.00 :	    180c:       fe ff ff 0f 0b eb fe    mov    $0x0,%rsi
    0.00 :	    1813:       0f 1f 44 00 00 0f 0b    mov    $0x0,%rdi
    0.00 :	    181a:       eb fe                   xor    %eax,%eax
    0.00 :	    181c:       0f 1f 40 00 48          callq  1821 <__journal_refile_buffer+0x14d1>
    0.00 :	    1821:       8b 54 24 30 48 3b 42    mov    $0x0,%rdi
    0.00 :	    1828:       58 0f                   xor    %eax,%eax
    0.00 :	    182a:       84 89 fc ff ff          callq  182f <__journal_refile_buffer+0x14df>
    0.00 :	    182f:       0f 0b eb fe             mov    (%r12),%rdx
    0.00 :	    1833:       0f 1f 44 00 00          jmpq   163b <__journal_refile_buffer+0x12eb>
    0.00 :	    1838:       0f 0b eb fe             mov    0x20(%rbp),%rax
    0.00 :	    183c:       48 c7 c6 00 00          mov    $0xffffffff,%esi
    0.00 :	    1841:       00 00 48 c7             sub    $0x1,%rax
    0.00 :	    1845:       c7 00 00 00             shr    $0xb,%rax
    0.00 :	    1849:       00 31 c0                add    $0x1,%esi
    0.00 :	    184c:       e8 00 00                shr    %rax
    0.00 :	    184f:       00 00                   jne    1849 <__journal_refile_buffer+0x14f9>
    0.00 :	    1851:       48 c7 c7 00 00          mov    0x38(%rsp),%rdi
    0.00 :	    1856:       00 00 31 c0 e8          callq  185b <__journal_refile_buffer+0x150b>
    0.00 :	    185b:       00 00 00 00 49          jmpq   14f8 <__journal_refile_buffer+0x11a8>
    0.00 :	    1860:       8b 14                   ud2    
    0.00 :	    1862:       24 e9                   jmp    1862 <__journal_refile_buffer+0x1512>
    0.00 :	    1864:       03 fe                   ud2    
    0.00 :	    1866:       ff ff                   jmp    1866 <__journal_refile_buffer+0x1516>
         :	    1868:       48 8b 45 20 be ff ff    nopl   0x0(%rax,%rax,1)
         :	    186f:       ff 
         :	    1870:       ff 48 83 e8             sub    $0x18,%rsp
         :	    1874:       01 48 c1 e8 0b          mov    %rbx,0x8(%rsp)
         :	    1879:       83 c6 01                mov    %rdi,%rbx
         :	    187c:       48 d1 e8                mov    %rsi,%rdi
         :	    187f:       75 f8 48 8b 7c          mov    %r12,0x10(%rsp)
         :	    1884:       24 38 e8 00 00          callq  1889 <__journal_refile_buffer+0x1539>
         :	    1889:       00 00 e9                mov    %rbx,%rdi
         :	    188c:       98 fc ff                mov    %rax,%r12
         :	    188f:       ff 0f                   xor    %edx,%edx
         :	    1891:       0b eb fe                mov    %rax,%rsi
         :	    1894:       0f 0b eb fe 0f          callq  13c0 <__journal_refile_buffer+0x1070>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib64/ld-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/ld-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000000e290 <_dl_init>:
    0.00 :	    e290:       41 57                   push   %r15
    0.00 :	    e292:       41 89 f7                mov    %esi,%r15d
    0.00 :	    e295:       41 56                   push   %r14
    0.00 :	    e297:       49 89 d6                mov    %rdx,%r14
    0.00 :	    e29a:       41 55                   push   %r13
    0.00 :	    e29c:       49 89 cd                mov    %rcx,%r13
    0.00 :	    e29f:       41 54                   push   %r12
    0.00 :	    e2a1:       49 89 fc                mov    %rdi,%r12
    0.00 :	    e2a4:       55                      push   %rbp
    0.00 :	    e2a5:       53                      push   %rbx
    0.00 :	    e2a6:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	    e2aa:       4c 8b 87 40 01 00 00    mov    0x140(%rdi),%r8
    0.00 :	    e2b1:       48 8b 9f 48 01 00 00    mov    0x148(%rdi),%rbx
    0.00 :	    e2b8:       48 8b 3d d9 16 21 00    mov    0x2116d9(%rip),%rdi        # 21f998 <_rtld_global+0x938>
    0.00 :	    e2bf:       48 85 ff                test   %rdi,%rdi
    0.00 :	    e2c2:       0f 85 9e 00 00 00       jne    e366 <_dl_init+0xd6>
    0.00 :	    e2c8:       4d 85 c0                test   %r8,%r8
    0.00 :	    e2cb:       74 15                   je     e2e2 <_dl_init+0x52>
    0.00 :	    e2cd:       48 85 db                test   %rbx,%rbx
    0.00 :	    e2d0:       74 10                   je     e2e2 <_dl_init+0x52>
    0.00 :	    e2d2:       48 8b 43 08             mov    0x8(%rbx),%rax
    0.00 :	    e2d6:       48 c1 e8 03             shr    $0x3,%rax
    0.00 :	    e2da:       85 c0                   test   %eax,%eax
    0.00 :	    e2dc:       89 44 24 10             mov    %eax,0x10(%rsp)
    0.00 :	    e2e0:       75 4e                   jne    e330 <_dl_init+0xa0>
    0.00 :	    e2e2:       41 8b 84 24 c0 02 00    mov    0x2c0(%r12),%eax
    0.00 :	    e2e9:       00 
    0.00 :	    e2ea:       85 c0                   test   %eax,%eax
    0.00 :	    e2ec:       74 2e                   je     e31c <_dl_init+0x8c>
    0.00 :	    e2ee:       8d 58 ff                lea    -0x1(%rax),%ebx
    0.00 :	    e2f1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	    e2f8:       49 8b 94 24 b8 03 00    mov    0x3b8(%r12),%rdx
    0.00 :	    e2ff:       00 
 ??:0
  100.00 :	    e300:       89 d8                   mov    %ebx,%eax
    0.00 :	    e302:       4c 89 e9                mov    %r13,%rcx
    0.00 :	    e305:       44 89 fe                mov    %r15d,%esi
    0.00 :	    e308:       83 eb 01                sub    $0x1,%ebx
    0.00 :	    e30b:       48 8b 3c c2             mov    (%rdx,%rax,8),%rdi
    0.00 :	    e30f:       4c 89 f2                mov    %r14,%rdx
    0.00 :	    e312:       e8 29 fe ff ff          callq  e140 <call_init>
    0.00 :	    e317:       83 fb ff                cmp    $0xffffffff,%ebx
    0.00 :	    e31a:       75 dc                   jne    e2f8 <_dl_init+0x68>
    0.00 :	    e31c:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	    e320:       5b                      pop    %rbx
    0.00 :	    e321:       5d                      pop    %rbp
    0.00 :	    e322:       41 5c                   pop    %r12
    0.00 :	    e324:       41 5d                   pop    %r13
    0.00 :	    e326:       41 5e                   pop    %r14
    0.00 :	    e328:       41 5f                   pop    %r15
    0.00 :	    e32a:       c3                      retq   
    0.00 :	    e32b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    e330:       f6 05 e9 08 21 00 02    testb  $0x2,0x2108e9(%rip)        # 21ec20 <_rtld_global_ro>
    0.00 :	    e337:       75 4c                   jne    e385 <_dl_init+0xf5>
    0.00 :	    e339:       49 8b 2c 24             mov    (%r12),%rbp
    0.00 :	    e33d:       49 03 68 08             add    0x8(%r8),%rbp
    0.00 :	    e341:       31 db                   xor    %ebx,%ebx
    0.00 :	    e343:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    e348:       4c 89 ea                mov    %r13,%rdx
    0.00 :	    e34b:       4c 89 f6                mov    %r14,%rsi
    0.00 :	    e34e:       44 89 ff                mov    %r15d,%edi
    0.00 :	    e351:       83 c3 01                add    $0x1,%ebx
    0.00 :	    e354:       ff 55 00                callq  *0x0(%rbp)
    0.00 :	    e357:       48 83 c5 08             add    $0x8,%rbp
    0.00 :	    e35b:       39 5c 24 10             cmp    %ebx,0x10(%rsp)
    0.00 :	    e35f:       77 e7                   ja     e348 <_dl_init+0xb8>
    0.00 :	    e361:       e9 7c ff ff ff          jmpq   e2e2 <_dl_init+0x52>
    0.00 :	    e366:       4c 89 44 24 08          mov    %r8,0x8(%rsp)
    0.00 :	    e36b:       e8 d0 fd ff ff          callq  e140 <call_init>
    0.00 :	    e370:       48 c7 05 1d 16 21 00    movq   $0x0,0x21161d(%rip)        # 21f998 <_rtld_global+0x938>
    0.00 :	    e377:       00 00 00 00 
    0.00 :	    e37b:       4c 8b 44 24 08          mov    0x8(%rsp),%r8
    0.00 :	    e380:       e9 43 ff ff ff          jmpq   e2c8 <_dl_init+0x38>
    0.00 :	    e385:       49 8b 74 24 08          mov    0x8(%r12),%rsi
    0.00 :	    e38a:       80 3e 00                cmpb   $0x0,(%rsi)
    0.00 :	    e38d:       75 0a                   jne    e399 <_dl_init+0x109>
    0.00 :	    e38f:       48 8b 05 72 08 21 00    mov    0x210872(%rip),%rax        # 21ec08 <_dl_argv>
    0.00 :	    e396:       48 8b 30                mov    (%rax),%rsi
    0.00 :	    e399:       48 8d 3d 2b ba 00 00    lea    0xba2b(%rip),%rdi        # 19dcb <_dl_out_of_memory+0x22>
    0.00 :	    e3a0:       31 c0                   xor    %eax,%eax
    0.00 :	    e3a2:       4c 89 44 24 08          mov    %r8,0x8(%rsp)
    0.00 :	    e3a7:       e8 a4 0f 00 00          callq  f350 <_dl_debug_printf>
    0.00 :	    e3ac:       4c 8b 44 24 08          mov    0x8(%rsp),%r8
    0.00 :	    e3b1:       eb 86                   jmp    e339 <_dl_init+0xa9>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib64/libc-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libc-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000007f150 <__GI_strcmp>:
    0.00 :	   7f150:       89 f1                   mov    %esi,%ecx
    0.00 :	   7f152:       89 f8                   mov    %edi,%eax
    0.00 :	   7f154:       48 83 e1 3f             and    $0x3f,%rcx
    0.00 :	   7f158:       48 83 e0 3f             and    $0x3f,%rax
    0.00 :	   7f15c:       83 f9 30                cmp    $0x30,%ecx
    0.00 :	   7f15f:       77 3f                   ja     7f1a0 <__GI_strcmp+0x50>
    0.00 :	   7f161:       83 f8 30                cmp    $0x30,%eax
    0.00 :	   7f164:       77 3a                   ja     7f1a0 <__GI_strcmp+0x50>
    0.00 :	   7f166:       66 0f 12 0f             movlpd (%rdi),%xmm1
    0.00 :	   7f16a:       66 0f 12 16             movlpd (%rsi),%xmm2
    0.00 :	   7f16e:       66 0f 16 4f 08          movhpd 0x8(%rdi),%xmm1
    0.00 :	   7f173:       66 0f 16 56 08          movhpd 0x8(%rsi),%xmm2
    0.00 :	   7f178:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f17c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f180:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f184:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f188:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f18c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f192:       0f 85 c8 13 00 00       jne    80560 <__GI_strcmp+0x1410>
    0.00 :	   7f198:       48 83 c6 10             add    $0x10,%rsi
    0.00 :	   7f19c:       48 83 c7 10             add    $0x10,%rdi
    0.00 :	   7f1a0:       48 83 e6 f0             and    $0xfffffffffffffff0,%rsi
    0.00 :	   7f1a4:       48 83 e7 f0             and    $0xfffffffffffffff0,%rdi
    0.00 :	   7f1a8:       ba ff ff 00 00          mov    $0xffff,%edx
    0.00 :	   7f1ad:       45 31 c0                xor    %r8d,%r8d
    0.00 :	   7f1b0:       83 e1 0f                and    $0xf,%ecx
    0.00 :	   7f1b3:       83 e0 0f                and    $0xf,%eax
    0.00 :	   7f1b6:       39 c1                   cmp    %eax,%ecx
    0.00 :	   7f1b8:       74 26                   je     7f1e0 <__GI_strcmp+0x90>
    0.00 :	   7f1ba:       77 07                   ja     7f1c3 <__GI_strcmp+0x73>
    0.00 :	   7f1bc:       41 89 d0                mov    %edx,%r8d
    0.00 :	   7f1bf:       91                      xchg   %eax,%ecx
    0.00 :	   7f1c0:       48 87 f7                xchg   %rsi,%rdi
    0.00 :	   7f1c3:       4c 8d 48 0f             lea    0xf(%rax),%r9
    0.00 :	   7f1c7:       49 29 c9                sub    %rcx,%r9
    0.00 :	   7f1ca:       4c 8d 15 37 6f 0b 00    lea    0xb6f37(%rip),%r10        # 136108 <zeroes+0x68>
    0.00 :	   7f1d1:       4f 63 0c 8a             movslq (%r10,%r9,4),%r9
    0.00 :	   7f1d5:       4f 8d 14 0a             lea    (%r10,%r9,1),%r10
    0.00 :	   7f1d9:       41 ff e2                jmpq   *%r10
    0.00 :	   7f1dc:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	   7f1e0:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f1e4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f1e8:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
 ??:0
  100.00 :	   7f1ec:       66 0f 74 0f             pcmpeqb (%rdi),%xmm1
    0.00 :	   7f1f0:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f1f4:       66 44 0f d7 c9          pmovmskb %xmm1,%r9d
    0.00 :	   7f1f9:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f1fb:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f1fe:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f201:       0f 85 3e 13 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f207:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f20e:       49 c7 c1 10 00 00 00    mov    $0x10,%r9
    0.00 :	   7f215:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f219:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	   7f220:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f225:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f22a:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f22e:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f232:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f236:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f23a:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f240:       0f 85 fa 12 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f246:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f24a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f24f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f254:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f258:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f25c:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f260:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f264:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f26a:       0f 85 d0 12 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f270:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f274:       eb aa                   jmp    7f220 <__GI_strcmp+0xd0>
    0.00 :	   7f276:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	   7f27d:       00 00 00 
    0.00 :	   7f280:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f284:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f288:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f28c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f290:       66 0f 73 fa 0f          pslldq $0xf,%xmm2
    0.00 :	   7f295:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f299:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f29d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f2a2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f2a4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f2a7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f2aa:       0f 85 95 12 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f2b0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f2b4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f2b8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f2bf:       41 b9 01 00 00 00       mov    $0x1,%r9d
    0.00 :	   7f2c5:       4c 8d 57 01             lea    0x1(%rdi),%r10
    0.00 :	   7f2c9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f2d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f2d7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f2de:       00 00 
    0.00 :	   7f2e0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f2e4:       0f 8f 96 00 00 00       jg     7f380 <__GI_strcmp+0x230>
    0.00 :	   7f2ea:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f2ef:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f2f4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f2f8:       66 0f 73 db 01          psrldq $0x1,%xmm3
    0.00 :	   7f2fd:       66 0f 73 fa 0f          pslldq $0xf,%xmm2
    0.00 :	   7f302:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f306:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f30a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f30e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f312:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f316:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f31c:       0f 85 1e 12 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f322:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f326:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f32a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f32e:       7f 50                   jg     7f380 <__GI_strcmp+0x230>
    0.00 :	   7f330:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f335:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f33a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f33e:       66 0f 73 db 01          psrldq $0x1,%xmm3
    0.00 :	   7f343:       66 0f 73 fa 0f          pslldq $0xf,%xmm2
    0.00 :	   7f348:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f34c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f350:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f354:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f358:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f35c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f362:       0f 85 d8 11 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f368:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f36c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f370:       e9 6b ff ff ff          jmpq   7f2e0 <__GI_strcmp+0x190>
    0.00 :	   7f375:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f37c:       00 00 00 00 
    0.00 :	   7f380:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f384:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f388:       f7 c2 fe ff 00 00       test   $0xfffe,%edx
    0.00 :	   7f38e:       75 10                   jne    7f3a0 <__GI_strcmp+0x250>
    0.00 :	   7f390:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f394:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f39b:       e9 4a ff ff ff          jmpq   7f2ea <__GI_strcmp+0x19a>
    0.00 :	   7f3a0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f3a5:       66 0f 73 d8 01          psrldq $0x1,%xmm0
    0.00 :	   7f3aa:       66 0f 73 db 01          psrldq $0x1,%xmm3
    0.00 :	   7f3af:       e9 7c 11 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f3b4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f3bb:       00 00 00 00 00 
    0.00 :	   7f3c0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f3c4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f3c8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f3cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f3d0:       66 0f 73 fa 0e          pslldq $0xe,%xmm2
    0.00 :	   7f3d5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f3d9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f3dd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f3e2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f3e4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f3e7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f3ea:       0f 85 55 11 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f3f0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f3f4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f3f8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f3ff:       41 b9 02 00 00 00       mov    $0x2,%r9d
    0.00 :	   7f405:       4c 8d 57 02             lea    0x2(%rdi),%r10
    0.00 :	   7f409:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f410:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f417:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f41e:       00 00 
    0.00 :	   7f420:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f424:       0f 8f 96 00 00 00       jg     7f4c0 <__GI_strcmp+0x370>
    0.00 :	   7f42a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f42f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f434:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f438:       66 0f 73 db 02          psrldq $0x2,%xmm3
    0.00 :	   7f43d:       66 0f 73 fa 0e          pslldq $0xe,%xmm2
    0.00 :	   7f442:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f446:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f44a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f44e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f452:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f456:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f45c:       0f 85 de 10 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f462:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f466:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f46a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f46e:       7f 50                   jg     7f4c0 <__GI_strcmp+0x370>
    0.00 :	   7f470:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f475:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f47a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f47e:       66 0f 73 db 02          psrldq $0x2,%xmm3
    0.00 :	   7f483:       66 0f 73 fa 0e          pslldq $0xe,%xmm2
    0.00 :	   7f488:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f48c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f490:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f494:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f498:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f49c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f4a2:       0f 85 98 10 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f4a8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f4ac:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f4b0:       e9 6b ff ff ff          jmpq   7f420 <__GI_strcmp+0x2d0>
    0.00 :	   7f4b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f4bc:       00 00 00 00 
    0.00 :	   7f4c0:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f4c4:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f4c8:       f7 c2 fc ff 00 00       test   $0xfffc,%edx
    0.00 :	   7f4ce:       75 10                   jne    7f4e0 <__GI_strcmp+0x390>
    0.00 :	   7f4d0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f4d4:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f4db:       e9 4a ff ff ff          jmpq   7f42a <__GI_strcmp+0x2da>
    0.00 :	   7f4e0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f4e5:       66 0f 73 d8 02          psrldq $0x2,%xmm0
    0.00 :	   7f4ea:       66 0f 73 db 02          psrldq $0x2,%xmm3
    0.00 :	   7f4ef:       e9 3c 10 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f4f4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f4fb:       00 00 00 00 00 
    0.00 :	   7f500:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f504:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f508:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f50c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f510:       66 0f 73 fa 0d          pslldq $0xd,%xmm2
    0.00 :	   7f515:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f519:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f51d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f522:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f524:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f527:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f52a:       0f 85 15 10 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f530:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f534:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f538:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f53f:       41 b9 03 00 00 00       mov    $0x3,%r9d
    0.00 :	   7f545:       4c 8d 57 03             lea    0x3(%rdi),%r10
    0.00 :	   7f549:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f550:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f557:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f55e:       00 00 
    0.00 :	   7f560:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f564:       0f 8f 96 00 00 00       jg     7f600 <__GI_strcmp+0x4b0>
    0.00 :	   7f56a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f56f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f574:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f578:       66 0f 73 db 03          psrldq $0x3,%xmm3
    0.00 :	   7f57d:       66 0f 73 fa 0d          pslldq $0xd,%xmm2
    0.00 :	   7f582:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f586:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f58a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f58e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f592:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f596:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f59c:       0f 85 9e 0f 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f5a2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f5a6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f5aa:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f5ae:       7f 50                   jg     7f600 <__GI_strcmp+0x4b0>
    0.00 :	   7f5b0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f5b5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f5ba:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f5be:       66 0f 73 db 03          psrldq $0x3,%xmm3
    0.00 :	   7f5c3:       66 0f 73 fa 0d          pslldq $0xd,%xmm2
    0.00 :	   7f5c8:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f5cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f5d0:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f5d4:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f5d8:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f5dc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f5e2:       0f 85 58 0f 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f5e8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f5ec:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f5f0:       e9 6b ff ff ff          jmpq   7f560 <__GI_strcmp+0x410>
    0.00 :	   7f5f5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f5fc:       00 00 00 00 
    0.00 :	   7f600:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f604:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f608:       f7 c2 f8 ff 00 00       test   $0xfff8,%edx
    0.00 :	   7f60e:       75 10                   jne    7f620 <__GI_strcmp+0x4d0>
    0.00 :	   7f610:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f614:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f61b:       e9 4a ff ff ff          jmpq   7f56a <__GI_strcmp+0x41a>
    0.00 :	   7f620:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f625:       66 0f 73 d8 03          psrldq $0x3,%xmm0
    0.00 :	   7f62a:       66 0f 73 db 03          psrldq $0x3,%xmm3
    0.00 :	   7f62f:       e9 fc 0e 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f634:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f63b:       00 00 00 00 00 
    0.00 :	   7f640:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f644:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f648:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f64c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f650:       66 0f 73 fa 0c          pslldq $0xc,%xmm2
    0.00 :	   7f655:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f659:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f65d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f662:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f664:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f667:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f66a:       0f 85 d5 0e 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f670:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f674:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f678:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f67f:       41 b9 04 00 00 00       mov    $0x4,%r9d
    0.00 :	   7f685:       4c 8d 57 04             lea    0x4(%rdi),%r10
    0.00 :	   7f689:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f690:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f697:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f69e:       00 00 
    0.00 :	   7f6a0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f6a4:       0f 8f 96 00 00 00       jg     7f740 <__GI_strcmp+0x5f0>
    0.00 :	   7f6aa:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f6af:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f6b4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f6b8:       66 0f 73 db 04          psrldq $0x4,%xmm3
    0.00 :	   7f6bd:       66 0f 73 fa 0c          pslldq $0xc,%xmm2
    0.00 :	   7f6c2:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f6c6:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f6ca:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f6ce:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f6d2:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f6d6:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f6dc:       0f 85 5e 0e 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f6e2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f6e6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f6ea:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f6ee:       7f 50                   jg     7f740 <__GI_strcmp+0x5f0>
    0.00 :	   7f6f0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f6f5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f6fa:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f6fe:       66 0f 73 db 04          psrldq $0x4,%xmm3
    0.00 :	   7f703:       66 0f 73 fa 0c          pslldq $0xc,%xmm2
    0.00 :	   7f708:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f70c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f710:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f714:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f718:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f71c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f722:       0f 85 18 0e 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f728:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f72c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f730:       e9 6b ff ff ff          jmpq   7f6a0 <__GI_strcmp+0x550>
    0.00 :	   7f735:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f73c:       00 00 00 00 
    0.00 :	   7f740:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f744:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f748:       f7 c2 f0 ff 00 00       test   $0xfff0,%edx
    0.00 :	   7f74e:       75 10                   jne    7f760 <__GI_strcmp+0x610>
    0.00 :	   7f750:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f754:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f75b:       e9 4a ff ff ff          jmpq   7f6aa <__GI_strcmp+0x55a>
    0.00 :	   7f760:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f765:       66 0f 73 d8 04          psrldq $0x4,%xmm0
    0.00 :	   7f76a:       66 0f 73 db 04          psrldq $0x4,%xmm3
    0.00 :	   7f76f:       e9 bc 0d 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f774:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f77b:       00 00 00 00 00 
    0.00 :	   7f780:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f784:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f788:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f78c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f790:       66 0f 73 fa 0b          pslldq $0xb,%xmm2
    0.00 :	   7f795:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f799:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f79d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f7a2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f7a4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f7a7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f7aa:       0f 85 95 0d 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f7b0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f7b4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f7b8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f7bf:       41 b9 05 00 00 00       mov    $0x5,%r9d
    0.00 :	   7f7c5:       4c 8d 57 05             lea    0x5(%rdi),%r10
    0.00 :	   7f7c9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f7d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f7d7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f7de:       00 00 
    0.00 :	   7f7e0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f7e4:       0f 8f 96 00 00 00       jg     7f880 <__GI_strcmp+0x730>
    0.00 :	   7f7ea:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f7ef:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f7f4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f7f8:       66 0f 73 db 05          psrldq $0x5,%xmm3
    0.00 :	   7f7fd:       66 0f 73 fa 0b          pslldq $0xb,%xmm2
    0.00 :	   7f802:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f806:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f80a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f80e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f812:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f816:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f81c:       0f 85 1e 0d 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f822:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f826:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f82a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f82e:       7f 50                   jg     7f880 <__GI_strcmp+0x730>
    0.00 :	   7f830:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f835:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f83a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f83e:       66 0f 73 db 05          psrldq $0x5,%xmm3
    0.00 :	   7f843:       66 0f 73 fa 0b          pslldq $0xb,%xmm2
    0.00 :	   7f848:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f84c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f850:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f854:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f858:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f85c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f862:       0f 85 d8 0c 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f868:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f86c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f870:       e9 6b ff ff ff          jmpq   7f7e0 <__GI_strcmp+0x690>
    0.00 :	   7f875:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f87c:       00 00 00 00 
    0.00 :	   7f880:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f884:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f888:       f7 c2 e0 ff 00 00       test   $0xffe0,%edx
    0.00 :	   7f88e:       75 10                   jne    7f8a0 <__GI_strcmp+0x750>
    0.00 :	   7f890:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f894:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f89b:       e9 4a ff ff ff          jmpq   7f7ea <__GI_strcmp+0x69a>
    0.00 :	   7f8a0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f8a5:       66 0f 73 d8 05          psrldq $0x5,%xmm0
    0.00 :	   7f8aa:       66 0f 73 db 05          psrldq $0x5,%xmm3
    0.00 :	   7f8af:       e9 7c 0c 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f8b4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f8bb:       00 00 00 00 00 
    0.00 :	   7f8c0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f8c4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7f8c8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7f8cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f8d0:       66 0f 73 fa 0a          pslldq $0xa,%xmm2
    0.00 :	   7f8d5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7f8d9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7f8dd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7f8e2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7f8e4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7f8e7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7f8ea:       0f 85 55 0c 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7f8f0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7f8f4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f8f8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7f8ff:       41 b9 06 00 00 00       mov    $0x6,%r9d
    0.00 :	   7f905:       4c 8d 57 06             lea    0x6(%rdi),%r10
    0.00 :	   7f909:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7f910:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f917:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7f91e:       00 00 
    0.00 :	   7f920:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f924:       0f 8f 96 00 00 00       jg     7f9c0 <__GI_strcmp+0x870>
    0.00 :	   7f92a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f92f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f934:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f938:       66 0f 73 db 06          psrldq $0x6,%xmm3
    0.00 :	   7f93d:       66 0f 73 fa 0a          pslldq $0xa,%xmm2
    0.00 :	   7f942:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f946:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f94a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f94e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f952:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f956:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f95c:       0f 85 de 0b 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f962:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f966:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f96a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7f96e:       7f 50                   jg     7f9c0 <__GI_strcmp+0x870>
    0.00 :	   7f970:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f975:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7f97a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7f97e:       66 0f 73 db 06          psrldq $0x6,%xmm3
    0.00 :	   7f983:       66 0f 73 fa 0a          pslldq $0xa,%xmm2
    0.00 :	   7f988:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7f98c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7f990:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7f994:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7f998:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7f99c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7f9a2:       0f 85 98 0b 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7f9a8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7f9ac:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7f9b0:       e9 6b ff ff ff          jmpq   7f920 <__GI_strcmp+0x7d0>
    0.00 :	   7f9b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f9bc:       00 00 00 00 
    0.00 :	   7f9c0:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7f9c4:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7f9c8:       f7 c2 c0 ff 00 00       test   $0xffc0,%edx
    0.00 :	   7f9ce:       75 10                   jne    7f9e0 <__GI_strcmp+0x890>
    0.00 :	   7f9d0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7f9d4:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7f9db:       e9 4a ff ff ff          jmpq   7f92a <__GI_strcmp+0x7da>
    0.00 :	   7f9e0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7f9e5:       66 0f 73 d8 06          psrldq $0x6,%xmm0
    0.00 :	   7f9ea:       66 0f 73 db 06          psrldq $0x6,%xmm3
    0.00 :	   7f9ef:       e9 3c 0b 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7f9f4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7f9fb:       00 00 00 00 00 
    0.00 :	   7fa00:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fa04:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7fa08:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7fa0c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fa10:       66 0f 73 fa 09          pslldq $0x9,%xmm2
    0.00 :	   7fa15:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7fa19:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7fa1d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7fa22:       d3 ea                   shr    %cl,%edx
    0.00 :	   7fa24:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7fa27:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7fa2a:       0f 85 15 0b 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7fa30:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7fa34:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fa38:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7fa3f:       41 b9 07 00 00 00       mov    $0x7,%r9d
    0.00 :	   7fa45:       4c 8d 57 07             lea    0x7(%rdi),%r10
    0.00 :	   7fa49:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7fa50:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fa57:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7fa5e:       00 00 
    0.00 :	   7fa60:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fa64:       0f 8f 96 00 00 00       jg     7fb00 <__GI_strcmp+0x9b0>
    0.00 :	   7fa6a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fa6f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fa74:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fa78:       66 0f 73 db 07          psrldq $0x7,%xmm3
    0.00 :	   7fa7d:       66 0f 73 fa 09          pslldq $0x9,%xmm2
    0.00 :	   7fa82:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fa86:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fa8a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fa8e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fa92:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fa96:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fa9c:       0f 85 9e 0a 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7faa2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7faa6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7faaa:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7faae:       7f 50                   jg     7fb00 <__GI_strcmp+0x9b0>
    0.00 :	   7fab0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fab5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7faba:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fabe:       66 0f 73 db 07          psrldq $0x7,%xmm3
    0.00 :	   7fac3:       66 0f 73 fa 09          pslldq $0x9,%xmm2
    0.00 :	   7fac8:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7facc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fad0:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fad4:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fad8:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fadc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fae2:       0f 85 58 0a 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fae8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7faec:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7faf0:       e9 6b ff ff ff          jmpq   7fa60 <__GI_strcmp+0x910>
    0.00 :	   7faf5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fafc:       00 00 00 00 
    0.00 :	   7fb00:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7fb04:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7fb08:       f7 c2 80 ff 00 00       test   $0xff80,%edx
    0.00 :	   7fb0e:       75 10                   jne    7fb20 <__GI_strcmp+0x9d0>
    0.00 :	   7fb10:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fb14:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fb1b:       e9 4a ff ff ff          jmpq   7fa6a <__GI_strcmp+0x91a>
    0.00 :	   7fb20:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fb25:       66 0f 73 d8 07          psrldq $0x7,%xmm0
    0.00 :	   7fb2a:       66 0f 73 db 07          psrldq $0x7,%xmm3
    0.00 :	   7fb2f:       e9 fc 09 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7fb34:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fb3b:       00 00 00 00 00 
    0.00 :	   7fb40:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fb44:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7fb48:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7fb4c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fb50:       66 0f 73 fa 08          pslldq $0x8,%xmm2
    0.00 :	   7fb55:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7fb59:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7fb5d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7fb62:       d3 ea                   shr    %cl,%edx
    0.00 :	   7fb64:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7fb67:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7fb6a:       0f 85 d5 09 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7fb70:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7fb74:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fb78:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7fb7f:       41 b9 08 00 00 00       mov    $0x8,%r9d
    0.00 :	   7fb85:       4c 8d 57 08             lea    0x8(%rdi),%r10
    0.00 :	   7fb89:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7fb90:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fb97:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7fb9e:       00 00 
    0.00 :	   7fba0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fba4:       0f 8f 96 00 00 00       jg     7fc40 <__GI_strcmp+0xaf0>
    0.00 :	   7fbaa:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fbaf:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fbb4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fbb8:       66 0f 73 db 08          psrldq $0x8,%xmm3
    0.00 :	   7fbbd:       66 0f 73 fa 08          pslldq $0x8,%xmm2
    0.00 :	   7fbc2:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fbc6:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fbca:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fbce:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fbd2:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fbd6:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fbdc:       0f 85 5e 09 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fbe2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7fbe6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fbea:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fbee:       7f 50                   jg     7fc40 <__GI_strcmp+0xaf0>
    0.00 :	   7fbf0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fbf5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fbfa:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fbfe:       66 0f 73 db 08          psrldq $0x8,%xmm3
    0.00 :	   7fc03:       66 0f 73 fa 08          pslldq $0x8,%xmm2
    0.00 :	   7fc08:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fc0c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fc10:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fc14:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fc18:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fc1c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fc22:       0f 85 18 09 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fc28:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7fc2c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fc30:       e9 6b ff ff ff          jmpq   7fba0 <__GI_strcmp+0xa50>
    0.00 :	   7fc35:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fc3c:       00 00 00 00 
    0.00 :	   7fc40:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7fc44:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7fc48:       f7 c2 00 ff 00 00       test   $0xff00,%edx
    0.00 :	   7fc4e:       75 10                   jne    7fc60 <__GI_strcmp+0xb10>
    0.00 :	   7fc50:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fc54:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fc5b:       e9 4a ff ff ff          jmpq   7fbaa <__GI_strcmp+0xa5a>
    0.00 :	   7fc60:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fc65:       66 0f 73 d8 08          psrldq $0x8,%xmm0
    0.00 :	   7fc6a:       66 0f 73 db 08          psrldq $0x8,%xmm3
    0.00 :	   7fc6f:       e9 bc 08 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7fc74:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fc7b:       00 00 00 00 00 
    0.00 :	   7fc80:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fc84:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7fc88:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7fc8c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fc90:       66 0f 73 fa 07          pslldq $0x7,%xmm2
    0.00 :	   7fc95:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7fc99:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7fc9d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7fca2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7fca4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7fca7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7fcaa:       0f 85 95 08 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7fcb0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7fcb4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fcb8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7fcbf:       41 b9 09 00 00 00       mov    $0x9,%r9d
    0.00 :	   7fcc5:       4c 8d 57 09             lea    0x9(%rdi),%r10
    0.00 :	   7fcc9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7fcd0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fcd7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7fcde:       00 00 
    0.00 :	   7fce0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fce4:       0f 8f 96 00 00 00       jg     7fd80 <__GI_strcmp+0xc30>
    0.00 :	   7fcea:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fcef:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fcf4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fcf8:       66 0f 73 db 09          psrldq $0x9,%xmm3
    0.00 :	   7fcfd:       66 0f 73 fa 07          pslldq $0x7,%xmm2
    0.00 :	   7fd02:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fd06:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fd0a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fd0e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fd12:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fd16:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fd1c:       0f 85 1e 08 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fd22:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7fd26:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fd2a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fd2e:       7f 50                   jg     7fd80 <__GI_strcmp+0xc30>
    0.00 :	   7fd30:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fd35:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fd3a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fd3e:       66 0f 73 db 09          psrldq $0x9,%xmm3
    0.00 :	   7fd43:       66 0f 73 fa 07          pslldq $0x7,%xmm2
    0.00 :	   7fd48:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fd4c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fd50:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fd54:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fd58:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fd5c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fd62:       0f 85 d8 07 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fd68:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7fd6c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fd70:       e9 6b ff ff ff          jmpq   7fce0 <__GI_strcmp+0xb90>
    0.00 :	   7fd75:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fd7c:       00 00 00 00 
    0.00 :	   7fd80:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7fd84:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7fd88:       f7 c2 00 fe 00 00       test   $0xfe00,%edx
    0.00 :	   7fd8e:       75 10                   jne    7fda0 <__GI_strcmp+0xc50>
    0.00 :	   7fd90:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fd94:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fd9b:       e9 4a ff ff ff          jmpq   7fcea <__GI_strcmp+0xb9a>
    0.00 :	   7fda0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fda5:       66 0f 73 d8 09          psrldq $0x9,%xmm0
    0.00 :	   7fdaa:       66 0f 73 db 09          psrldq $0x9,%xmm3
    0.00 :	   7fdaf:       e9 7c 07 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7fdb4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fdbb:       00 00 00 00 00 
    0.00 :	   7fdc0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fdc4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7fdc8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7fdcc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fdd0:       66 0f 73 fa 06          pslldq $0x6,%xmm2
    0.00 :	   7fdd5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7fdd9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7fddd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7fde2:       d3 ea                   shr    %cl,%edx
    0.00 :	   7fde4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7fde7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7fdea:       0f 85 55 07 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7fdf0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7fdf4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fdf8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7fdff:       41 b9 0a 00 00 00       mov    $0xa,%r9d
    0.00 :	   7fe05:       4c 8d 57 0a             lea    0xa(%rdi),%r10
    0.00 :	   7fe09:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7fe10:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fe17:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7fe1e:       00 00 
    0.00 :	   7fe20:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fe24:       0f 8f 96 00 00 00       jg     7fec0 <__GI_strcmp+0xd70>
    0.00 :	   7fe2a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fe2f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fe34:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fe38:       66 0f 73 db 0a          psrldq $0xa,%xmm3
    0.00 :	   7fe3d:       66 0f 73 fa 06          pslldq $0x6,%xmm2
    0.00 :	   7fe42:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fe46:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fe4a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fe4e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fe52:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fe56:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fe5c:       0f 85 de 06 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fe62:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7fe66:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fe6a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7fe6e:       7f 50                   jg     7fec0 <__GI_strcmp+0xd70>
    0.00 :	   7fe70:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fe75:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7fe7a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7fe7e:       66 0f 73 db 0a          psrldq $0xa,%xmm3
    0.00 :	   7fe83:       66 0f 73 fa 06          pslldq $0x6,%xmm2
    0.00 :	   7fe88:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7fe8c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7fe90:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7fe94:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7fe98:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7fe9c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7fea2:       0f 85 98 06 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7fea8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7feac:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7feb0:       e9 6b ff ff ff          jmpq   7fe20 <__GI_strcmp+0xcd0>
    0.00 :	   7feb5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7febc:       00 00 00 00 
    0.00 :	   7fec0:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   7fec4:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   7fec8:       f7 c2 00 fc 00 00       test   $0xfc00,%edx
    0.00 :	   7fece:       75 10                   jne    7fee0 <__GI_strcmp+0xd90>
    0.00 :	   7fed0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7fed4:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7fedb:       e9 4a ff ff ff          jmpq   7fe2a <__GI_strcmp+0xcda>
    0.00 :	   7fee0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7fee5:       66 0f 73 d8 0a          psrldq $0xa,%xmm0
    0.00 :	   7feea:       66 0f 73 db 0a          psrldq $0xa,%xmm3
    0.00 :	   7feef:       e9 3c 06 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   7fef4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fefb:       00 00 00 00 00 
    0.00 :	   7ff00:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7ff04:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   7ff08:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   7ff0c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7ff10:       66 0f 73 fa 05          pslldq $0x5,%xmm2
    0.00 :	   7ff15:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   7ff19:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   7ff1d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   7ff22:       d3 ea                   shr    %cl,%edx
    0.00 :	   7ff24:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   7ff27:       44 29 ca                sub    %r9d,%edx
    0.00 :	   7ff2a:       0f 85 15 06 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   7ff30:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   7ff34:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   7ff38:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   7ff3f:       41 b9 0b 00 00 00       mov    $0xb,%r9d
    0.00 :	   7ff45:       4c 8d 57 0b             lea    0xb(%rdi),%r10
    0.00 :	   7ff49:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   7ff50:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   7ff57:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   7ff5e:       00 00 
    0.00 :	   7ff60:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7ff64:       0f 8f 96 00 00 00       jg     80000 <__GI_strcmp+0xeb0>
    0.00 :	   7ff6a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7ff6f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7ff74:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7ff78:       66 0f 73 db 0b          psrldq $0xb,%xmm3
    0.00 :	   7ff7d:       66 0f 73 fa 05          pslldq $0x5,%xmm2
    0.00 :	   7ff82:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7ff86:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7ff8a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7ff8e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7ff92:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7ff96:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7ff9c:       0f 85 9e 05 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7ffa2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7ffa6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7ffaa:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   7ffae:       7f 50                   jg     80000 <__GI_strcmp+0xeb0>
    0.00 :	   7ffb0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   7ffb5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   7ffba:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   7ffbe:       66 0f 73 db 0b          psrldq $0xb,%xmm3
    0.00 :	   7ffc3:       66 0f 73 fa 05          pslldq $0x5,%xmm2
    0.00 :	   7ffc8:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   7ffcc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   7ffd0:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   7ffd4:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   7ffd8:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   7ffdc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   7ffe2:       0f 85 58 05 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   7ffe8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   7ffec:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   7fff0:       e9 6b ff ff ff          jmpq   7ff60 <__GI_strcmp+0xe10>
    0.00 :	   7fff5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   7fffc:       00 00 00 00 
    0.00 :	   80000:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   80004:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   80008:       f7 c2 00 f8 00 00       test   $0xf800,%edx
    0.00 :	   8000e:       75 10                   jne    80020 <__GI_strcmp+0xed0>
    0.00 :	   80010:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80014:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   8001b:       e9 4a ff ff ff          jmpq   7ff6a <__GI_strcmp+0xe1a>
    0.00 :	   80020:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   80025:       66 0f 73 d8 0b          psrldq $0xb,%xmm0
    0.00 :	   8002a:       66 0f 73 db 0b          psrldq $0xb,%xmm3
    0.00 :	   8002f:       e9 fc 04 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   80034:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8003b:       00 00 00 00 00 
    0.00 :	   80040:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80044:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   80048:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   8004c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80050:       66 0f 73 fa 04          pslldq $0x4,%xmm2
    0.00 :	   80055:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   80059:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   8005d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   80062:       d3 ea                   shr    %cl,%edx
    0.00 :	   80064:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   80067:       44 29 ca                sub    %r9d,%edx
    0.00 :	   8006a:       0f 85 d5 04 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   80070:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   80074:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80078:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   8007f:       41 b9 0c 00 00 00       mov    $0xc,%r9d
    0.00 :	   80085:       4c 8d 57 0c             lea    0xc(%rdi),%r10
    0.00 :	   80089:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   80090:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   80097:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   8009e:       00 00 
    0.00 :	   800a0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   800a4:       0f 8f 96 00 00 00       jg     80140 <__GI_strcmp+0xff0>
    0.00 :	   800aa:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   800af:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   800b4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   800b8:       66 0f 73 db 0c          psrldq $0xc,%xmm3
    0.00 :	   800bd:       66 0f 73 fa 04          pslldq $0x4,%xmm2
    0.00 :	   800c2:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   800c6:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   800ca:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   800ce:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   800d2:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   800d6:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   800dc:       0f 85 5e 04 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   800e2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   800e6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   800ea:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   800ee:       7f 50                   jg     80140 <__GI_strcmp+0xff0>
    0.00 :	   800f0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   800f5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   800fa:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   800fe:       66 0f 73 db 0c          psrldq $0xc,%xmm3
    0.00 :	   80103:       66 0f 73 fa 04          pslldq $0x4,%xmm2
    0.00 :	   80108:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   8010c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80110:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   80114:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80118:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   8011c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   80122:       0f 85 18 04 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   80128:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   8012c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   80130:       e9 6b ff ff ff          jmpq   800a0 <__GI_strcmp+0xf50>
    0.00 :	   80135:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8013c:       00 00 00 00 
    0.00 :	   80140:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   80144:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   80148:       f7 c2 00 f0 00 00       test   $0xf000,%edx
    0.00 :	   8014e:       75 10                   jne    80160 <__GI_strcmp+0x1010>
    0.00 :	   80150:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80154:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   8015b:       e9 4a ff ff ff          jmpq   800aa <__GI_strcmp+0xf5a>
    0.00 :	   80160:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   80165:       66 0f 73 d8 0c          psrldq $0xc,%xmm0
    0.00 :	   8016a:       66 0f 73 db 0c          psrldq $0xc,%xmm3
    0.00 :	   8016f:       e9 bc 03 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   80174:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8017b:       00 00 00 00 00 
    0.00 :	   80180:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80184:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   80188:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   8018c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80190:       66 0f 73 fa 03          pslldq $0x3,%xmm2
    0.00 :	   80195:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   80199:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   8019d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   801a2:       d3 ea                   shr    %cl,%edx
    0.00 :	   801a4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   801a7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   801aa:       0f 85 95 03 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   801b0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   801b4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   801b8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   801bf:       41 b9 0d 00 00 00       mov    $0xd,%r9d
    0.00 :	   801c5:       4c 8d 57 0d             lea    0xd(%rdi),%r10
    0.00 :	   801c9:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   801d0:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   801d7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   801de:       00 00 
    0.00 :	   801e0:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   801e4:       0f 8f 96 00 00 00       jg     80280 <__GI_strcmp+0x1130>
    0.00 :	   801ea:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   801ef:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   801f4:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   801f8:       66 0f 73 db 0d          psrldq $0xd,%xmm3
    0.00 :	   801fd:       66 0f 73 fa 03          pslldq $0x3,%xmm2
    0.00 :	   80202:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   80206:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   8020a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   8020e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80212:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   80216:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8021c:       0f 85 1e 03 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   80222:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   80226:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   8022a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   8022e:       7f 50                   jg     80280 <__GI_strcmp+0x1130>
    0.00 :	   80230:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   80235:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   8023a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   8023e:       66 0f 73 db 0d          psrldq $0xd,%xmm3
    0.00 :	   80243:       66 0f 73 fa 03          pslldq $0x3,%xmm2
    0.00 :	   80248:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   8024c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80250:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   80254:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80258:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   8025c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   80262:       0f 85 d8 02 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   80268:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   8026c:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   80270:       e9 6b ff ff ff          jmpq   801e0 <__GI_strcmp+0x1090>
    0.00 :	   80275:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8027c:       00 00 00 00 
    0.00 :	   80280:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   80284:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   80288:       f7 c2 00 e0 00 00       test   $0xe000,%edx
    0.00 :	   8028e:       75 10                   jne    802a0 <__GI_strcmp+0x1150>
    0.00 :	   80290:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80294:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   8029b:       e9 4a ff ff ff          jmpq   801ea <__GI_strcmp+0x109a>
    0.00 :	   802a0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   802a5:       66 0f 73 d8 0d          psrldq $0xd,%xmm0
    0.00 :	   802aa:       66 0f 73 db 0d          psrldq $0xd,%xmm3
    0.00 :	   802af:       e9 7c 02 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   802b4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   802bb:       00 00 00 00 00 
    0.00 :	   802c0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   802c4:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   802c8:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   802cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   802d0:       66 0f 73 fa 02          pslldq $0x2,%xmm2
    0.00 :	   802d5:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   802d9:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   802dd:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   802e2:       d3 ea                   shr    %cl,%edx
    0.00 :	   802e4:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   802e7:       44 29 ca                sub    %r9d,%edx
    0.00 :	   802ea:       0f 85 55 02 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   802f0:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   802f4:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   802f8:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   802ff:       41 b9 0e 00 00 00       mov    $0xe,%r9d
    0.00 :	   80305:       4c 8d 57 0e             lea    0xe(%rdi),%r10
    0.00 :	   80309:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   80310:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   80317:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   8031e:       00 00 
    0.00 :	   80320:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   80324:       0f 8f 96 00 00 00       jg     803c0 <__GI_strcmp+0x1270>
    0.00 :	   8032a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   8032f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   80334:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   80338:       66 0f 73 db 0e          psrldq $0xe,%xmm3
    0.00 :	   8033d:       66 0f 73 fa 02          pslldq $0x2,%xmm2
    0.00 :	   80342:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   80346:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   8034a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   8034e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80352:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   80356:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8035c:       0f 85 de 01 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   80362:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   80366:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   8036a:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   8036e:       7f 50                   jg     803c0 <__GI_strcmp+0x1270>
    0.00 :	   80370:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   80375:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   8037a:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   8037e:       66 0f 73 db 0e          psrldq $0xe,%xmm3
    0.00 :	   80383:       66 0f 73 fa 02          pslldq $0x2,%xmm2
    0.00 :	   80388:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   8038c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80390:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   80394:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80398:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   8039c:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   803a2:       0f 85 98 01 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   803a8:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   803ac:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   803b0:       e9 6b ff ff ff          jmpq   80320 <__GI_strcmp+0x11d0>
    0.00 :	   803b5:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   803bc:       00 00 00 00 
    0.00 :	   803c0:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   803c4:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   803c8:       f7 c2 00 c0 00 00       test   $0xc000,%edx
    0.00 :	   803ce:       75 10                   jne    803e0 <__GI_strcmp+0x1290>
    0.00 :	   803d0:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   803d4:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   803db:       e9 4a ff ff ff          jmpq   8032a <__GI_strcmp+0x11da>
    0.00 :	   803e0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   803e5:       66 0f 73 d8 0e          psrldq $0xe,%xmm0
    0.00 :	   803ea:       66 0f 73 db 0e          psrldq $0xe,%xmm3
    0.00 :	   803ef:       e9 3c 01 00 00          jmpq   80530 <__GI_strcmp+0x13e0>
    0.00 :	   803f4:       66 66 66 2e 0f 1f 84    data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   803fb:       00 00 00 00 00 
    0.00 :	   80400:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80404:       66 0f 6f 17             movdqa (%rdi),%xmm2
    0.00 :	   80408:       66 0f 6f 0e             movdqa (%rsi),%xmm1
    0.00 :	   8040c:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   80410:       66 0f 73 fa 01          pslldq $0x1,%xmm2
    0.00 :	   80415:       66 0f 74 d1             pcmpeqb %xmm1,%xmm2
    0.00 :	   80419:       66 0f f8 d0             psubb  %xmm0,%xmm2
    0.00 :	   8041d:       66 44 0f d7 ca          pmovmskb %xmm2,%r9d
    0.00 :	   80422:       d3 ea                   shr    %cl,%edx
    0.00 :	   80424:       41 d3 e9                shr    %cl,%r9d
    0.00 :	   80427:       44 29 ca                sub    %r9d,%edx
    0.00 :	   8042a:       0f 85 15 01 00 00       jne    80545 <__GI_strcmp+0x13f5>
    0.00 :	   80430:       66 0f 6f 1f             movdqa (%rdi),%xmm3
    0.00 :	   80434:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80438:       48 c7 c1 10 00 00 00    mov    $0x10,%rcx
    0.00 :	   8043f:       41 b9 0f 00 00 00       mov    $0xf,%r9d
    0.00 :	   80445:       4c 8d 57 0f             lea    0xf(%rdi),%r10
    0.00 :	   80449:       49 81 e2 ff 0f 00 00    and    $0xfff,%r10
    0.00 :	   80450:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   80457:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	   8045e:       00 00 
    0.00 :	   80460:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   80464:       0f 8f 96 00 00 00       jg     80500 <__GI_strcmp+0x13b0>
    0.00 :	   8046a:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   8046f:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   80474:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   80478:       66 0f 73 db 0f          psrldq $0xf,%xmm3
    0.00 :	   8047d:       66 0f 73 fa 01          pslldq $0x1,%xmm2
    0.00 :	   80482:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   80486:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   8048a:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   8048e:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80492:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   80496:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   8049c:       0f 85 9e 00 00 00       jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   804a2:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   804a6:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   804aa:       49 83 c2 10             add    $0x10,%r10
    0.00 :	   804ae:       7f 50                   jg     80500 <__GI_strcmp+0x13b0>
    0.00 :	   804b0:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   804b5:       66 0f 6f 14 0f          movdqa (%rdi,%rcx,1),%xmm2
    0.00 :	   804ba:       66 0f 6f e2             movdqa %xmm2,%xmm4
    0.00 :	   804be:       66 0f 73 db 0f          psrldq $0xf,%xmm3
    0.00 :	   804c3:       66 0f 73 fa 01          pslldq $0x1,%xmm2
    0.00 :	   804c8:       66 0f eb d3             por    %xmm3,%xmm2
    0.00 :	   804cc:       66 0f 74 c1             pcmpeqb %xmm1,%xmm0
    0.00 :	   804d0:       66 0f 74 ca             pcmpeqb %xmm2,%xmm1
    0.00 :	   804d4:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   804d8:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   804dc:       81 ea ff ff 00 00       sub    $0xffff,%edx
    0.00 :	   804e2:       75 5c                   jne    80540 <__GI_strcmp+0x13f0>
    0.00 :	   804e4:       48 83 c1 10             add    $0x10,%rcx
    0.00 :	   804e8:       66 0f 6f dc             movdqa %xmm4,%xmm3
    0.00 :	   804ec:       e9 6f ff ff ff          jmpq   80460 <__GI_strcmp+0x1310>
    0.00 :	   804f1:       66 66 66 66 66 66 2e    data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   804f8:       0f 1f 84 00 00 00 00 
    0.00 :	   804ff:       00 
    0.00 :	   80500:       66 0f 74 c3             pcmpeqb %xmm3,%xmm0
    0.00 :	   80504:       66 0f d7 d0             pmovmskb %xmm0,%edx
    0.00 :	   80508:       f7 c2 00 80 00 00       test   $0x8000,%edx
    0.00 :	   8050e:       75 10                   jne    80520 <__GI_strcmp+0x13d0>
    0.00 :	   80510:       66 0f ef c0             pxor   %xmm0,%xmm0
    0.00 :	   80514:       49 81 ea 00 10 00 00    sub    $0x1000,%r10
    0.00 :	   8051b:       e9 4a ff ff ff          jmpq   8046a <__GI_strcmp+0x131a>
    0.00 :	   80520:       66 0f 6f 0c 0e          movdqa (%rsi,%rcx,1),%xmm1
    0.00 :	   80525:       66 0f 73 db 0f          psrldq $0xf,%xmm3
    0.00 :	   8052a:       66 0f 73 d8 0f          psrldq $0xf,%xmm0
    0.00 :	   8052f:       90                      nop
    0.00 :	   80530:       66 0f 74 cb             pcmpeqb %xmm3,%xmm1
    0.00 :	   80534:       66 0f f8 c8             psubb  %xmm0,%xmm1
    0.00 :	   80538:       66 0f d7 d1             pmovmskb %xmm1,%edx
    0.00 :	   8053c:       f7 d2                   not    %edx
    0.00 :	   8053e:       66 90                   xchg   %ax,%ax
    0.00 :	   80540:       49 8d 44 09 f0          lea    -0x10(%r9,%rcx,1),%rax
    0.00 :	   80545:       48 8d 3c 07             lea    (%rdi,%rax,1),%rdi
    0.00 :	   80549:       48 8d 34 0e             lea    (%rsi,%rcx,1),%rsi
    0.00 :	   8054d:       45 85 c0                test   %r8d,%r8d
    0.00 :	   80550:       74 0e                   je     80560 <__GI_strcmp+0x1410>
    0.00 :	   80552:       48 87 f7                xchg   %rsi,%rdi
    0.00 :	   80555:       66 66 2e 0f 1f 84 00    data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   8055c:       00 00 00 00 
    0.00 :	   80560:       48 0f bc d2             bsf    %rdx,%rdx
    0.00 :	   80564:       0f b6 0c 16             movzbl (%rsi,%rdx,1),%ecx
    0.00 :	   80568:       0f b6 04 17             movzbl (%rdi,%rdx,1),%eax
    0.00 :	   8056c:       29 c8                   sub    %ecx,%eax
    0.00 :	   8056e:       c3                      retq   
    0.00 :	   8056f:       31 c0                   xor    %eax,%eax
    0.00 :	   80571:       c3                      retq   
    0.00 :	   80572:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	   80579:       1f 84 00 00 00 00 00 
    0.00 :	   80580:       0f b6 0e                movzbl (%rsi),%ecx
    0.00 :	   80583:       0f b6 07                movzbl (%rdi),%eax
    0.00 :	   80586:       29 c8                   sub    %ecx,%eax

Sorted summary for file /bin/bash
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /bin/bash
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	0000000000416270 <getpid@plt>:
 ??:0
  100.00 :	  416270:       ff 25 12 40 27 00       jmpq   *0x274012(%rip)        # 68a288 <compgen_doc+0x2113d8>
    0.00 :	  416276:       68 4e 00 00 00          pushq  $0x4e
    0.00 :	  41627b:       e9 00 fb ff ff          jmpq   415d80 <_init+0x20>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	00000000004695c0 <gettimeofday@plt>:
 ??:0
  100.00 :	  4695c0:       ff 25 82 db 6f 00       jmpq   *0x6fdb82(%rip)        # b67148 <_GLOBAL_OFFSET_TABLE_+0x148>
    0.00 :	  4695c6:       68 26 00 00 00          pushq  $0x26
    0.00 :	  4695cb:       e9 80 fd ff ff          jmpq   469350 <_init+0x20>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046f260 <slot_getsomeattrs>:
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f260:       55                      push   %rbp
    0.00 :	  46f261:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46f264:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  46f268:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  46f26c:       49 89 fc                mov    %rdi,%r12
    0.00 :	  46f26f:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  46f273:       48 83 ec 20             sub    $0x20,%rsp
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f277:       39 77 24                cmp    %esi,0x24(%rdi)
         :	 *              This function forces the entries of the slot's Datum/isnull
         :	 *              arrays to be valid at least up through the attnum'th entry.
         :	 */
         :	void
         :	slot_getsomeattrs(TupleTableSlot *slot, int attnum)
         :	{
    0.00 :	  46f27a:       41 89 f5                mov    %esi,%r13d
         :	        HeapTuple       tuple;
         :	        int                     attno;
         :
         :	        /* Quick out if we have 'em all already */
         :	        if (slot->tts_nvalid >= attnum)
    0.00 :	  46f27d:       7d 67                   jge    46f2e6 <slot_getsomeattrs+0x86>
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
    0.00 :	  46f27f:       85 f6                   test   %esi,%esi
    0.00 :	  46f281:       7e 75                   jle    46f2f8 <slot_getsomeattrs+0x98>
    0.00 :	  46f283:       48 8b 47 10             mov    0x10(%rdi),%rax
    0.00 :	  46f287:       3b 30                   cmp    (%rax),%esi
    0.00 :	  46f289:       7f 6d                   jg     46f2f8 <slot_getsomeattrs+0x98>
         :
         :	        /*
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
    0.00 :	  46f28b:       48 8b 47 08             mov    0x8(%rdi),%rax
         :	        if (tuple == NULL)                      /* internal error */
    0.00 :	  46f28f:       48 85 c0                test   %rax,%rax
    0.00 :	  46f292:       0f 84 8d 00 00 00       je     46f325 <slot_getsomeattrs+0xc5>
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
         :
         :	        /*
         :	         * load up any slots available from physical tuple
         :	         */
         :	        attno = HeapTupleHeaderGetNatts(tuple->t_data);
    0.00 :	  46f298:       48 8b 40 10             mov    0x10(%rax),%rax
    0.00 :	  46f29c:       0f b7 40 12             movzwl 0x12(%rax),%eax
    0.00 :	  46f2a0:       25 ff 07 00 00          and    $0x7ff,%eax
         :	        attno = Min(attno, attnum);
    0.00 :	  46f2a5:       39 c6                   cmp    %eax,%esi
    0.00 :	  46f2a7:       89 c3                   mov    %eax,%ebx
    0.00 :	  46f2a9:       0f 4e de                cmovle %esi,%ebx
         :
         :	        slot_deform_tuple(slot, attno);
    0.00 :	  46f2ac:       89 de                   mov    %ebx,%esi
    0.00 :	  46f2ae:       e8 5d fc ff ff          callq  46ef10 <slot_deform_tuple>
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2b3:       41 39 dd                cmp    %ebx,%r13d
    0.00 :	  46f2b6:       7e 29                   jle    46f2e1 <slot_getsomeattrs+0x81>
    0.00 :	  46f2b8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  46f2bf:       00 
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2c0:       49 8b 54 24 28          mov    0x28(%r12),%rdx
    0.00 :	  46f2c5:       48 63 c3                movslq %ebx,%rax
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2c8:       83 c3 01                add    $0x1,%ebx
    0.00 :	  46f2cb:       41 39 dd                cmp    %ebx,%r13d
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
    0.00 :	  46f2ce:       48 c7 04 c2 00 00 00    movq   $0x0,(%rdx,%rax,8)
    0.00 :	  46f2d5:       00 
         :	                slot->tts_isnull[attno] = true;
    0.00 :	  46f2d6:       49 8b 54 24 30          mov    0x30(%r12),%rdx
    0.00 :	  46f2db:       c6 04 02 01             movb   $0x1,(%rdx,%rax,1)
         :
         :	        /*
         :	         * If tuple doesn't have all the atts indicated by tupleDesc, read the
         :	         * rest as null
         :	         */
         :	        for (; attno < attnum; attno++)
    0.00 :	  46f2df:       7f df                   jg     46f2c0 <slot_getsomeattrs+0x60>
         :	        {
         :	                slot->tts_values[attno] = (Datum) 0;
         :	                slot->tts_isnull[attno] = true;
         :	        }
         :	        slot->tts_nvalid = attnum;
    0.00 :	  46f2e1:       45 89 6c 24 24          mov    %r13d,0x24(%r12)
         :	}
    0.00 :	  46f2e6:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  46f2ea:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1334
  100.00 :	  46f2ee:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  46f2f2:       c9                      leaveq 
    0.00 :	  46f2f3:       c3                      retq   
    0.00 :	  46f2f4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        if (slot->tts_nvalid >= attnum)
         :	                return;
         :
         :	        /* Check for caller error */
         :	        if (attnum <= 0 || attnum > slot->tts_tupleDescriptor->natts)
         :	                elog(ERROR, "invalid attribute number %d", attnum);
    0.00 :	  46f2f8:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f2fd:       be 1a 05 00 00          mov    $0x51a,%esi
    0.00 :	  46f302:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f307:       e8 14 c1 30 00          callq  77b420 <elog_start>
    0.00 :	  46f30c:       44 89 ea                mov    %r13d,%edx
    0.00 :	  46f30f:       be 13 f6 7a 00          mov    $0x7af613,%esi
    0.00 :	  46f314:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f319:       31 c0                   xor    %eax,%eax
    0.00 :	  46f31b:       e8 10 bf 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f320:       e8 ab a1 ff ff          callq  4694d0 <abort@plt>
         :	         * otherwise we had better have a physical tuple (tts_nvalid should equal
         :	         * natts in all virtual-tuple cases)
         :	         */
         :	        tuple = slot->tts_tuple;
         :	        if (tuple == NULL)                      /* internal error */
         :	                elog(ERROR, "cannot extract attribute from empty tuple slot");
    0.00 :	  46f325:       ba c0 f6 7a 00          mov    $0x7af6c0,%edx
    0.00 :	  46f32a:       be 22 05 00 00          mov    $0x522,%esi
    0.00 :	  46f32f:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  46f334:       e8 e7 c0 30 00          callq  77b420 <elog_start>
    0.00 :	  46f339:       be b0 f7 7a 00          mov    $0x7af7b0,%esi
    0.00 :	  46f33e:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  46f343:       31 c0                   xor    %eax,%eax
    0.00 :	  46f345:       e8 e6 be 30 00          callq  77b230 <elog_finish>
    0.00 :	  46f34a:       e8 81 a1 ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000046ff60 <heap_fill_tuple>:
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff60:       55                      push   %rbp
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff61:       45 31 d2                xor    %r10d,%r10d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff64:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  46ff67:       41 57                   push   %r15
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff69:       45 31 ff                xor    %r15d,%r15d
         :	void
         :	heap_fill_tuple(TupleDesc tupleDesc,
         :	                                Datum *values, bool *isnull,
         :	                                char *data, Size data_size,
         :	                                uint16 *infomask, bits8 *bit)
         :	{
    0.00 :	  46ff6c:       41 56                   push   %r14
    0.00 :	  46ff6e:       41 55                   push   %r13
    0.00 :	  46ff70:       49 89 cd                mov    %rcx,%r13
    0.00 :	  46ff73:       41 54                   push   %r12
    0.00 :	  46ff75:       53                      push   %rbx
    0.00 :	  46ff76:       48 83 ec 38             sub    $0x38,%rsp
    0.00 :	  46ff7a:       4c 8b 5d 10             mov    0x10(%rbp),%r11
    0.00 :	  46ff7e:       48 89 75 c8             mov    %rsi,-0x38(%rbp)
    0.00 :	  46ff82:       48 89 55 c0             mov    %rdx,-0x40(%rbp)
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff86:       8b 07                   mov    (%rdi),%eax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff88:       4d 85 db                test   %r11,%r11
         :	                                uint16 *infomask, bits8 *bit)
         :	{
         :	        bits8      *bitP;
         :	        int                     bitmask;
         :	        int                     i;
         :	        int                     numberOfAttributes = tupleDesc->natts;
    0.00 :	  46ff8b:       89 45 d4                mov    %eax,-0x2c(%rbp)
         :	        Form_pg_attribute *att = tupleDesc->attrs;
    0.00 :	  46ff8e:       48 8b 47 08             mov    0x8(%rdi),%rax
         :
         :	#ifdef USE_ASSERT_CHECKING
         :	        char       *start = data;
         :	#endif
         :
         :	        if (bit != NULL)
    0.00 :	  46ff92:       74 0a                   je     46ff9e <heap_fill_tuple+0x3e>
         :	        {
         :	                bitP = &bit[-1];
    0.00 :	  46ff94:       4d 8d 53 ff             lea    -0x1(%r11),%r10
    0.00 :	  46ff98:       41 bf 80 00 00 00       mov    $0x80,%r15d
         :	                /* just to keep compiler quiet */
         :	                bitP = NULL;
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
    0.00 :	  46ff9e:       66 41 83 21 f8          andw   $0xfff8,(%r9)
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffa3:       8b 4d d4                mov    -0x2c(%rbp),%ecx
    0.00 :	  46ffa6:       85 c9                   test   %ecx,%ecx
    0.00 :	  46ffa8:       0f 8e 5c 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
    0.00 :	  46ffae:       49 89 c0                mov    %rax,%r8
    0.00 :	  46ffb1:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  46ffb4:       eb 21                   jmp    46ffd7 <heap_fill_tuple+0x77>
    0.00 :	  46ffb6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  46ffbd:       00 00 00 
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
    0.00 :	  46ffc0:       66 41 83 09 01          orw    $0x1,(%r9)
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :
         :	                data += data_length;
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:251
  100.00 :	  46ffc5:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  46ffc9:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  46ffcd:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  46ffd1:       0f 8e 33 01 00 00       jle    47010a <heap_fill_tuple+0x1aa>
         :	        {
         :	                Size            data_length;
         :
         :	                if (bit != NULL)
    0.00 :	  46ffd7:       4d 85 db                test   %r11,%r11
    0.00 :	  46ffda:       74 1e                   je     46fffa <heap_fill_tuple+0x9a>
         :	                {
         :	                        if (bitmask != HIGHBIT)
    0.00 :	  46ffdc:       41 81 ff 80 00 00 00    cmp    $0x80,%r15d
    0.00 :	  46ffe3:       0f 84 37 01 00 00       je     470120 <heap_fill_tuple+0x1c0>
         :	                                bitmask <<= 1;
    0.00 :	  46ffe9:       45 01 ff                add    %r15d,%r15d
         :	                                bitP += 1;
         :	                                *bitP = 0x0;
         :	                                bitmask = 1;
         :	                        }
         :
         :	                        if (isnull[i])
    0.00 :	  46ffec:       48 8b 55 c0             mov    -0x40(%rbp),%rdx
    0.00 :	  46fff0:       42 80 3c 32 00          cmpb   $0x0,(%rdx,%r14,1)
    0.00 :	  46fff5:       75 c9                   jne    46ffc0 <heap_fill_tuple+0x60>
         :	                        {
         :	                                *infomask |= HEAP_HASNULL;
         :	                                continue;
         :	                        }
         :
         :	                        *bitP |= bitmask;
    0.00 :	  46fff7:       45 08 3a                or     %r15b,(%r10)
         :	                /*
         :	                 * XXX we use the att_align macros on the pointer value itself, not on
         :	                 * an offset.  This is a bit of a hack.
         :	                 */
         :
         :	                if (att[i]->attbyval)
    0.00 :	  46fffa:       49 8b 08                mov    (%r8),%rcx
    0.00 :	  46fffd:       80 79 5c 00             cmpb   $0x0,0x5c(%rcx)
    0.00 :	  470001:       74 7d                   je     470080 <heap_fill_tuple+0x120>
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470003:       0f b6 41 5e             movzbl 0x5e(%rcx),%eax
    0.00 :	  470007:       3c 69                   cmp    $0x69,%al
    0.00 :	  470009:       0f 84 f1 01 00 00       je     470200 <heap_fill_tuple+0x2a0>
    0.00 :	  47000f:       3c 63                   cmp    $0x63,%al
    0.00 :	  470011:       74 10                   je     470023 <heap_fill_tuple+0xc3>
    0.00 :	  470013:       3c 64                   cmp    $0x64,%al
    0.00 :	  470015:       0f 84 55 02 00 00       je     470270 <heap_fill_tuple+0x310>
    0.00 :	  47001b:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  47001f:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470023:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470027:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  47002b:       0f 84 e5 01 00 00       je     470216 <heap_fill_tuple+0x2b6>
    0.00 :	  470031:       0f 8f 01 01 00 00       jg     470138 <heap_fill_tuple+0x1d8>
    0.00 :	  470037:       66 83 e8 01             sub    $0x1,%ax
    0.00 :	  47003b:       0f 84 07 02 00 00       je     470248 <heap_fill_tuple+0x2e8>
    0.00 :	  470041:       ba 30 f7 7a 00          mov    $0x7af730,%edx
    0.00 :	  470046:       be c3 00 00 00          mov    $0xc3,%esi
    0.00 :	  47004b:       bf f4 f5 7a 00          mov    $0x7af5f4,%edi
    0.00 :	  470050:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470054:       e8 c7 b3 30 00          callq  77b420 <elog_start>
    0.00 :	  470059:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  47005d:       be 2f f6 7a 00          mov    $0x7af62f,%esi
    0.00 :	  470062:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  470067:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47006a:       0f bf 50 4c             movswl 0x4c(%rax),%edx
    0.00 :	  47006e:       31 c0                   xor    %eax,%eax
    0.00 :	  470070:       e8 bb b1 30 00          callq  77b230 <elog_finish>
    0.00 :	  470075:       e8 56 94 ff ff          callq  4694d0 <abort@plt>
    0.00 :	  47007a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
    0.00 :	  470080:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
    0.00 :	  470084:       66 83 f8 ff             cmp    $0xffff,%ax
    0.00 :	  470088:       0f 84 da 00 00 00       je     470168 <heap_fill_tuple+0x208>
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
    0.00 :	  47008e:       66 83 f8 fe             cmp    $0xfffe,%ax
    0.00 :	  470092:       0f 84 e8 01 00 00       je     470280 <heap_fill_tuple+0x320>
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470098:       0f b6 49 5e             movzbl 0x5e(%rcx),%ecx
    0.00 :	  47009c:       80 f9 69                cmp    $0x69,%cl
    0.00 :	  47009f:       0f 84 bb 01 00 00       je     470260 <heap_fill_tuple+0x300>
    0.00 :	  4700a5:       80 f9 63                cmp    $0x63,%cl
    0.00 :	  4700a8:       74 14                   je     4700be <heap_fill_tuple+0x15e>
    0.00 :	  4700aa:       80 f9 64                cmp    $0x64,%cl
    0.00 :	  4700ad:       0f 1f 00                nopl   (%rax)
    0.00 :	  4700b0:       0f 84 3a 02 00 00       je     4702f0 <heap_fill_tuple+0x390>
    0.00 :	  4700b6:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4700ba:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700be:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        Assert(att[i]->attlen > 0);
         :	                        data_length = att[i]->attlen;
    0.00 :	  4700c2:       4c 0f bf e0             movswq %ax,%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4700c6:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4700c9:       4a 8b 34 f2             mov    (%rdx,%r14,8),%rsi
    0.00 :	  4700cd:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4700d0:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4700d4:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4700d8:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  4700dc:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4700e0:       e8 0b 9b ff ff          callq  469bf0 <memcpy@plt>
    0.00 :	  4700e5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4700e9:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4700ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4700f1:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
         :	                }
         :
         :	                data += data_length;
    0.00 :	  4700f5:       4d 01 e5                add    %r12,%r13
    0.00 :	  4700f8:       49 83 c6 01             add    $0x1,%r14
    0.00 :	  4700fc:       49 83 c0 08             add    $0x8,%r8
         :	                bitmask = 0;
         :	        }
         :
         :	        *infomask &= ~(HEAP_HASNULL | HEAP_HASVARWIDTH | HEAP_HASEXTERNAL);
         :
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470100:       44 39 75 d4             cmp    %r14d,-0x2c(%rbp)
    0.00 :	  470104:       0f 8f cd fe ff ff       jg     46ffd7 <heap_fill_tuple+0x77>
         :
         :	                data += data_length;
         :	        }
         :
         :	        Assert((data - start) == data_size);
         :	}
    0.00 :	  47010a:       48 83 c4 38             add    $0x38,%rsp
    0.00 :	  47010e:       5b                      pop    %rbx
    0.00 :	  47010f:       41 5c                   pop    %r12
    0.00 :	  470111:       41 5d                   pop    %r13
    0.00 :	  470113:       41 5e                   pop    %r14
    0.00 :	  470115:       41 5f                   pop    %r15
    0.00 :	  470117:       c9                      leaveq 
    0.00 :	  470118:       c3                      retq   
    0.00 :	  470119:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        if (bitmask != HIGHBIT)
         :	                                bitmask <<= 1;
         :	                        else
         :	                        {
         :	                                bitP += 1;
    0.00 :	  470120:       49 83 c2 01             add    $0x1,%r10
         :	                                *bitP = 0x0;
    0.00 :	  470124:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :	  47012a:       41 c6 02 00             movb   $0x0,(%r10)
    0.00 :	  47012e:       e9 b9 fe ff ff          jmpq   46ffec <heap_fill_tuple+0x8c>
    0.00 :	  470133:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470138:       66 83 f8 04             cmp    $0x4,%ax
    0.00 :	  47013c:       0f 84 ee 00 00 00       je     470230 <heap_fill_tuple+0x2d0>
    0.00 :	  470142:       66 83 f8 08             cmp    $0x8,%ax
    0.00 :	  470146:       0f 85 f5 fe ff ff       jne    470041 <heap_fill_tuple+0xe1>
    0.00 :	  47014c:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470150:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470154:       49 89 45 00             mov    %rax,0x0(%r13)
         :	                        data_length = att[i]->attlen;
    0.00 :	  470158:       49 8b 00                mov    (%r8),%rax
    0.00 :	  47015b:       4c 0f bf 60 4c          movswq 0x4c(%rax),%r12
    0.00 :	  470160:       eb 93                   jmp    4700f5 <heap_fill_tuple+0x195>
    0.00 :	  470162:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470168:       48 8b 45 c8             mov    -0x38(%rbp),%rax
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  47016c:       41 0f b7 11             movzwl (%r9),%edx
         :	                        data_length = att[i]->attlen;
         :	                }
         :	                else if (att[i]->attlen == -1)
         :	                {
         :	                        /* varlena */
         :	                        Pointer         val = DatumGetPointer(values[i]);
    0.00 :	  470170:       4a 8b 34 f0             mov    (%rax,%r14,8),%rsi
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  470174:       89 d0                   mov    %edx,%eax
    0.00 :	  470176:       83 c8 02                or     $0x2,%eax
    0.00 :	  470179:       66 41 89 01             mov    %ax,(%r9)
         :	                        if (VARATT_IS_EXTERNAL(val))
    0.00 :	  47017d:       0f b6 06                movzbl (%rsi),%eax
    0.00 :	  470180:       3c 01                   cmp    $0x1,%al
    0.00 :	  470182:       0f 84 38 01 00 00       je     4702c0 <heap_fill_tuple+0x360>
         :	                                *infomask |= HEAP_HASEXTERNAL;
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
    0.00 :	  470188:       0f b6 d0                movzbl %al,%edx
    0.00 :	  47018b:       f6 c2 01                test   $0x1,%dl
    0.00 :	  47018e:       0f 85 6c 01 00 00       jne    470300 <heap_fill_tuple+0x3a0>
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470194:       49 8b 00                mov    (%r8),%rax
    0.00 :	  470197:       80 78 5d 70             cmpb   $0x70,0x5d(%rax)
    0.00 :	  47019b:       74 09                   je     4701a6 <heap_fill_tuple+0x246>
    0.00 :	  47019d:       83 e2 03                and    $0x3,%edx
    0.00 :	  4701a0:       0f 84 6a 01 00 00       je     470310 <heap_fill_tuple+0x3b0>
    0.00 :	  4701a6:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  4701a8:       c1 e9 02                shr    $0x2,%ecx
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  4701ab:       0f b6 40 5e             movzbl 0x5e(%rax),%eax
    0.00 :	  4701af:       3c 69                   cmp    $0x69,%al
    0.00 :	  4701b1:       0f 84 99 01 00 00       je     470350 <heap_fill_tuple+0x3f0>
    0.00 :	  4701b7:       3c 63                   cmp    $0x63,%al
    0.00 :	  4701b9:       74 10                   je     4701cb <heap_fill_tuple+0x26b>
    0.00 :	  4701bb:       3c 64                   cmp    $0x64,%al
    0.00 :	  4701bd:       0f 84 9a 01 00 00       je     47035d <heap_fill_tuple+0x3fd>
    0.00 :	  4701c3:       49 83 c5 01             add    $0x1,%r13
    0.00 :	  4701c7:       49 83 e5 fe             and    $0xfffffffffffffffe,%r13
         :	                                                                                                  att[i]->attalign);
         :	                                data_length = VARSIZE(val);
    0.00 :	  4701cb:       41 89 cc                mov    %ecx,%r12d
         :	                                memcpy(data, val, data_length);
    0.00 :	  4701ce:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4701d1:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4701d4:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  4701d8:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  4701dc:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  4701e0:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  4701e4:       e8 07 9a ff ff          callq  469bf0 <memcpy@plt>
    0.00 :	  4701e9:       4c 8b 45 b8             mov    -0x48(%rbp),%r8
    0.00 :	  4701ed:       4c 8b 4d b0             mov    -0x50(%rbp),%r9
    0.00 :	  4701f1:       4c 8b 55 a8             mov    -0x58(%rbp),%r10
    0.00 :	  4701f5:       4c 8b 5d a0             mov    -0x60(%rbp),%r11
    0.00 :	  4701f9:       e9 f7 fe ff ff          jmpq   4700f5 <heap_fill_tuple+0x195>
    0.00 :	  4701fe:       66 90                   xchg   %ax,%ax
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  470200:       0f b7 41 4c             movzwl 0x4c(%rcx),%eax
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470204:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470208:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
         :	                        store_att_byval(data, values[i], att[i]->attlen);
    0.00 :	  47020c:       66 83 f8 02             cmp    $0x2,%ax
    0.00 :	  470210:       0f 85 1b fe ff ff       jne    470031 <heap_fill_tuple+0xd1>
    0.00 :	  470216:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47021a:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  47021e:       66 41 89 45 00          mov    %ax,0x0(%r13)
    0.00 :	  470223:       e9 30 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470228:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  47022f:       00 
    0.00 :	  470230:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  470234:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470238:       41 89 45 00             mov    %eax,0x0(%r13)
    0.00 :	  47023c:       e9 17 ff ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470241:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  470248:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  47024c:       4a 8b 04 f2             mov    (%rdx,%r14,8),%rax
    0.00 :	  470250:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470254:       e9 ff fe ff ff          jmpq   470158 <heap_fill_tuple+0x1f8>
    0.00 :	  470259:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470260:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470264:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470268:       e9 51 fe ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  47026d:       0f 1f 00                nopl   (%rax)
         :	                 */
         :
         :	                if (att[i]->attbyval)
         :	                {
         :	                        /* pass-by-value */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  470270:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470274:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470278:       e9 a6 fd ff ff          jmpq   470023 <heap_fill_tuple+0xc3>
    0.00 :	  47027d:       0f 1f 00                nopl   (%rax)
         :	                        }
         :	                }
         :	                else if (att[i]->attlen == -2)
         :	                {
         :	                        /* cstring ... never needs alignment */
         :	                        *infomask |= HEAP_HASVARWIDTH;
    0.00 :	  470280:       66 41 83 09 02          orw    $0x2,(%r9)
         :	                        Assert(att[i]->attalign == 'c');
         :	                        data_length = strlen(DatumGetCString(values[i])) + 1;
    0.00 :	  470285:       48 8b 45 c8             mov    -0x38(%rbp),%rax
    0.00 :	  470289:       4a 8b 1c f0             mov    (%rax,%r14,8),%rbx
    0.00 :	  47028d:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470291:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
    0.00 :	  470295:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470299:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
    0.00 :	  47029d:       48 89 df                mov    %rbx,%rdi
    0.00 :	  4702a0:       e8 ab 95 ff ff          callq  469850 <strlen@plt>
    0.00 :	  4702a5:       4c 8d 60 01             lea    0x1(%rax),%r12
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
    0.00 :	  4702a9:       48 89 de                mov    %rbx,%rsi
    0.00 :	  4702ac:       4c 89 ef                mov    %r13,%rdi
    0.00 :	  4702af:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  4702b2:       e9 2d ff ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  4702b7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  4702be:       00 00 
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c0:       83 ca 06                or     $0x6,%edx
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702c3:       41 bc 0a 00 00 00       mov    $0xa,%r12d
         :	                        Pointer         val = DatumGetPointer(values[i]);
         :
         :	                        *infomask |= HEAP_HASVARWIDTH;
         :	                        if (VARATT_IS_EXTERNAL(val))
         :	                        {
         :	                                *infomask |= HEAP_HASEXTERNAL;
    0.00 :	  4702c9:       66 41 89 11             mov    %dx,(%r9)
         :	                                /* no alignment, since it's short by definition */
         :	                                data_length = VARSIZE_EXTERNAL(val);
    0.00 :	  4702cd:       0f b6 46 01             movzbl 0x1(%rsi),%eax
    0.00 :	  4702d1:       3c 01                   cmp    $0x1,%al
    0.00 :	  4702d3:       0f 84 f5 fe ff ff       je     4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702d9:       3c 12                   cmp    $0x12,%al
    0.00 :	  4702db:       41 bc 03 00 00 00       mov    $0x3,%r12d
    0.00 :	  4702e1:       ba 12 00 00 00          mov    $0x12,%edx
    0.00 :	  4702e6:       4c 0f 44 e2             cmove  %rdx,%r12
    0.00 :	  4702ea:       e9 df fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  4702ef:       90                      nop
         :	                        memcpy(data, DatumGetPointer(values[i]), data_length);
         :	                }
         :	                else
         :	                {
         :	                        /* fixed-length pass-by-reference */
         :	                        data = (char *) att_align_nominal(data, att[i]->attalign);
    0.00 :	  4702f0:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  4702f4:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  4702f8:       e9 c1 fd ff ff          jmpq   4700be <heap_fill_tuple+0x15e>
    0.00 :	  4702fd:       0f 1f 00                nopl   (%rax)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARATT_IS_SHORT(val))
         :	                        {
         :	                                /* no alignment for short varlenas */
         :	                                data_length = VARSIZE_SHORT(val);
    0.00 :	  470300:       d0 e8                   shr    %al
    0.00 :	  470302:       44 0f b6 e0             movzbl %al,%r12d
    0.00 :	  470306:       e9 c3 fe ff ff          jmpq   4701ce <heap_fill_tuple+0x26e>
    0.00 :	  47030b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                                memcpy(data, val, data_length);
         :	                        }
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
    0.00 :	  470310:       8b 0e                   mov    (%rsi),%ecx
    0.00 :	  470312:       c1 e9 02                shr    $0x2,%ecx
    0.00 :	  470315:       8d 51 fc                lea    -0x4(%rcx),%edx
    0.00 :	  470318:       4c 8d 62 01             lea    0x1(%rdx),%r12
    0.00 :	  47031c:       49 83 fc 7f             cmp    $0x7f,%r12
    0.00 :	  470320:       0f 87 85 fe ff ff       ja     4701ab <heap_fill_tuple+0x24b>
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470326:       43 8d 04 24             lea    (%r12,%r12,1),%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47032a:       49 8d 7d 01             lea    0x1(%r13),%rdi
    0.00 :	  47032e:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	  470332:       4c 89 45 b8             mov    %r8,-0x48(%rbp)
    0.00 :	  470336:       4c 89 4d b0             mov    %r9,-0x50(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  47033a:       83 c8 01                or     $0x1,%eax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
    0.00 :	  47033d:       4c 89 55 a8             mov    %r10,-0x58(%rbp)
    0.00 :	  470341:       4c 89 5d a0             mov    %r11,-0x60(%rbp)
         :	                        else if (VARLENA_ATT_IS_PACKABLE(att[i]) &&
         :	                                         VARATT_CAN_MAKE_SHORT(val))
         :	                        {
         :	                                /* convert to short varlena -- no alignment */
         :	                                data_length = VARATT_CONVERTED_SHORT_SIZE(val);
         :	                                SET_VARSIZE_SHORT(data, data_length);
    0.00 :	  470345:       41 88 45 00             mov    %al,0x0(%r13)
    0.00 :	  470349:       e9 96 fe ff ff          jmpq   4701e4 <heap_fill_tuple+0x284>
    0.00 :	  47034e:       66 90                   xchg   %ax,%ax
         :	                                memcpy(data + 1, VARDATA(val), data_length - 1);
         :	                        }
         :	                        else
         :	                        {
         :	                                /* full 4-byte header varlena */
         :	                                data = (char *) att_align_nominal(data,
    0.00 :	  470350:       49 83 c5 03             add    $0x3,%r13
    0.00 :	  470354:       49 83 e5 fc             and    $0xfffffffffffffffc,%r13
    0.00 :	  470358:       e9 6e fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>
    0.00 :	  47035d:       49 83 c5 07             add    $0x7,%r13
    0.00 :	  470361:       49 83 e5 f8             and    $0xfffffffffffffff8,%r13
    0.00 :	  470365:       e9 61 fe ff ff          jmpq   4701cb <heap_fill_tuple+0x26b>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1440
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004704e0 <heap_form_minimal_tuple>:
         :	 */
         :	MinimalTuple
         :	heap_form_minimal_tuple(TupleDesc tupleDescriptor,
         :	                                                Datum *values,
         :	                                                bool *isnull)
         :	{
    0.00 :	  4704e0:       55                      push   %rbp
    0.00 :	  4704e1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  4704e4:       41 57                   push   %r15
    0.00 :	  4704e6:       49 89 d7                mov    %rdx,%r15
    0.00 :	  4704e9:       41 56                   push   %r14
    0.00 :	  4704eb:       49 89 fe                mov    %rdi,%r14
    0.00 :	  4704ee:       41 55                   push   %r13
    0.00 :	  4704f0:       41 54                   push   %r12
    0.00 :	  4704f2:       53                      push   %rbx
    0.00 :	  4704f3:       48 83 ec 28             sub    $0x28,%rsp
    0.00 :	  4704f7:       48 89 75 c0             mov    %rsi,-0x40(%rbp)
         :	        MinimalTuple tuple;                     /* return tuple */
         :	        Size            len,
         :	                                data_len;
         :	        int                     hoff;
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
    0.00 :	  4704fb:       44 8b 2f                mov    (%rdi),%r13d
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
    0.00 :	  4704fe:       41 81 fd 80 06 00 00    cmp    $0x680,%r13d
    0.00 :	  470505:       0f 8f fb 00 00 00       jg     470606 <heap_form_minimal_tuple+0x126>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  47050b:       45 85 ed                test   %r13d,%r13d
    0.00 :	  47050e:       7e 28                   jle    470538 <heap_form_minimal_tuple+0x58>
         :	        {
         :	                if (isnull[i])
    0.00 :	  470510:       48 89 d1                mov    %rdx,%rcx
    0.00 :	  470513:       31 d2                   xor    %edx,%edx
    0.00 :	  470515:       41 80 3f 00             cmpb   $0x0,(%r15)
    0.00 :	  470519:       74 15                   je     470530 <heap_form_minimal_tuple+0x50>
    0.00 :	  47051b:       e9 d0 00 00 00          jmpq   4705f0 <heap_form_minimal_tuple+0x110>
    0.00 :	  470520:       0f b6 41 01             movzbl 0x1(%rcx),%eax
    0.00 :	  470524:       48 83 c1 01             add    $0x1,%rcx
    0.00 :	  470528:       84 c0                   test   %al,%al
    0.00 :	  47052a:       0f 85 c0 00 00 00       jne    4705f0 <heap_form_minimal_tuple+0x110>
         :	                                                numberOfAttributes, MaxTupleAttributeNumber)));
         :
         :	        /*
         :	         * Check for nulls
         :	         */
         :	        for (i = 0; i < numberOfAttributes; i++)
    0.00 :	  470530:       83 c2 01                add    $0x1,%edx
    0.00 :	  470533:       41 39 d5                cmp    %edx,%r13d
    0.00 :	  470536:       7f e8                   jg     470520 <heap_form_minimal_tuple+0x40>
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
    0.00 :	  470538:       ba 0f 00 00 00          mov    $0xf,%edx
    0.00 :	  47053d:       c6 45 d7 00             movb   $0x0,-0x29(%rbp)
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
    0.00 :	  470541:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
    0.00 :	  470546:       48 8d 42 04             lea    0x4(%rdx),%rax
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47054a:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  47054e:       4c 89 f7                mov    %r14,%rdi
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
    0.00 :	  470551:       48 0f 45 d0             cmovne %rax,%rdx
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
    0.00 :	  470555:       48 8d 5a 07             lea    0x7(%rdx),%rbx
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470559:       4c 89 fa                mov    %r15,%rdx
         :	                len += BITMAPLEN(numberOfAttributes);
         :
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
    0.00 :	  47055c:       48 83 e3 f8             and    $0xfffffffffffffff8,%rbx
    0.00 :	  470560:       89 5d d0                mov    %ebx,-0x30(%rbp)
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  470563:       e8 08 fe ff ff          callq  470370 <heap_compute_data_size>
         :
         :	        len += data_len;
    0.00 :	  470568:       48 01 c3                add    %rax,%rbx
         :	        if (tupleDescriptor->tdhasoid)
         :	                len += sizeof(Oid);
         :
         :	        hoff = len = MAXALIGN(len); /* align user data safely */
         :
         :	        data_len = heap_compute_data_size(tupleDescriptor, values, isnull);
    0.00 :	  47056b:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
    0.00 :	  47056f:       48 89 df                mov    %rbx,%rdi
    0.00 :	  470572:       e8 f9 89 32 00          callq  798f70 <palloc0>
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
    0.00 :	  470577:       89 18                   mov    %ebx,(%rax)
         :	        len += data_len;
         :
         :	        /*
         :	         * Allocate and zero the space needed.
         :	         */
         :	        tuple = (MinimalTuple) palloc0(len);
    0.00 :	  470579:       49 89 c4                mov    %rax,%r12
         :
         :	        /*
         :	         * And fill in the information.
         :	         */
         :	        tuple->t_len = len;
         :	        HeapTupleHeaderSetNatts(tuple, numberOfAttributes);
    0.00 :	  47057c:       0f b7 40 0a             movzwl 0xa(%rax),%eax
    0.00 :	  470580:       66 25 00 f8             and    $0xf800,%ax
    0.00 :	  470584:       44 09 e8                or     %r13d,%eax
    0.00 :	  470587:       66 41 89 44 24 0a       mov    %ax,0xa(%r12)
         :	        tuple->t_hoff = hoff + MINIMAL_TUPLE_OFFSET;
    0.00 :	  47058d:       0f b6 45 d0             movzbl -0x30(%rbp),%eax
    0.00 :	  470591:       83 c0 08                add    $0x8,%eax
    0.00 :	  470594:       41 88 44 24 0e          mov    %al,0xe(%r12)
         :
         :	        if (tupleDescriptor->tdhasoid)          /* else leave infomask = 0 */
    0.00 :	  470599:       41 80 7e 20 00          cmpb   $0x0,0x20(%r14)
    0.00 :	  47059e:       74 08                   je     4705a8 <heap_form_minimal_tuple+0xc8>
         :	                tuple->t_infomask = HEAP_HASOID;
    0.00 :	  4705a0:       66 41 c7 44 24 0c 08    movw   $0x8,0xc(%r12)
    0.00 :	  4705a7:       00 
         :
         :	        heap_fill_tuple(tupleDescriptor,
    0.00 :	  4705a8:       48 63 4d d0             movslq -0x30(%rbp),%rcx
    0.00 :	  4705ac:       31 d2                   xor    %edx,%edx
    0.00 :	  4705ae:       80 7d d7 00             cmpb   $0x0,-0x29(%rbp)
    0.00 :	  4705b2:       49 8d 44 24 0f          lea    0xf(%r12),%rax
    0.00 :	  4705b7:       4c 8b 45 c8             mov    -0x38(%rbp),%r8
    0.00 :	  4705bb:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  4705bf:       4d 8d 4c 24 0c          lea    0xc(%r12),%r9
    0.00 :	  4705c4:       4c 89 f7                mov    %r14,%rdi
    0.00 :	  4705c7:       48 0f 45 d0             cmovne %rax,%rdx
    0.00 :	  4705cb:       49 8d 0c 0c             lea    (%r12,%rcx,1),%rcx
    0.00 :	  4705cf:       48 89 14 24             mov    %rdx,(%rsp)
    0.00 :	  4705d3:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  4705d6:       e8 85 f9 ff ff          callq  46ff60 <heap_fill_tuple>
         :	                                        data_len,
         :	                                        &tuple->t_infomask,
         :	                                        (hasnull ? tuple->t_bits : NULL));
         :
         :	        return tuple;
         :	}
    0.00 :	  4705db:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  4705df:       4c 89 e0                mov    %r12,%rax
    0.00 :	  4705e2:       5b                      pop    %rbx
    0.00 :	  4705e3:       41 5c                   pop    %r12
    0.00 :	  4705e5:       41 5d                   pop    %r13
    0.00 :	  4705e7:       41 5e                   pop    %r14
    0.00 :	  4705e9:       41 5f                   pop    %r15
    0.00 :	  4705eb:       c9                      leaveq 
    0.00 :	  4705ec:       c3                      retq   
    0.00 :	  4705ed:       0f 1f 00                nopl   (%rax)
         :	         * Determine total space needed
         :	         */
         :	        len = offsetof(MinimalTupleData, t_bits);
         :
         :	        if (hasnull)
         :	                len += BITMAPLEN(numberOfAttributes);
 /home/Computational/mark/src/postgres-andres/src/backend/access/common/heaptuple.c:1440
  100.00 :	  4705f0:       41 8d 45 07             lea    0x7(%r13),%eax
    0.00 :	  4705f4:       c6 45 d7 01             movb   $0x1,-0x29(%rbp)
    0.00 :	  4705f8:       c1 f8 03                sar    $0x3,%eax
    0.00 :	  4705fb:       48 98                   cltq   
    0.00 :	  4705fd:       48 8d 50 0f             lea    0xf(%rax),%rdx
    0.00 :	  470601:       e9 3b ff ff ff          jmpq   470541 <heap_form_minimal_tuple+0x61>
         :	        bool            hasnull = false;
         :	        int                     numberOfAttributes = tupleDescriptor->natts;
         :	        int                     i;
         :
         :	        if (numberOfAttributes > MaxTupleAttributeNumber)
         :	                ereport(ERROR,
    0.00 :	  470606:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  470609:       b9 90 f6 7a 00          mov    $0x7af690,%ecx
    0.00 :	  47060e:       ba 8c 05 00 00          mov    $0x58c,%edx
    0.00 :	  470613:       be f4 f5 7a 00          mov    $0x7af5f4,%esi
    0.00 :	  470618:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  47061d:       e8 9e a4 30 00          callq  77aac0 <errstart>
    0.00 :	  470622:       84 c0                   test   %al,%al
    0.00 :	  470624:       74 2b                   je     470651 <heap_form_minimal_tuple+0x171>
    0.00 :	  470626:       44 89 ee                mov    %r13d,%esi
    0.00 :	  470629:       ba 80 06 00 00          mov    $0x680,%edx
    0.00 :	  47062e:       bf e0 f7 7a 00          mov    $0x7af7e0,%edi
    0.00 :	  470633:       31 c0                   xor    %eax,%eax
    0.00 :	  470635:       e8 66 c2 30 00          callq  77c8a0 <errmsg>
    0.00 :	  47063a:       bf 05 01 04 01          mov    $0x1040105,%edi
    0.00 :	  47063f:       89 c3                   mov    %eax,%ebx
    0.00 :	  470641:       e8 0a c7 30 00          callq  77cd50 <errcode>
    0.00 :	  470646:       89 de                   mov    %ebx,%esi
    0.00 :	  470648:       89 c7                   mov    %eax,%edi
    0.00 :	  47064a:       31 c0                   xor    %eax,%eax
    0.00 :	  47064c:       e8 8f 9f 30 00          callq  77a5e0 <errfinish>
    0.00 :	  470651:       e8 7a 8e ff ff          callq  4694d0 <abort@plt>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/access/transam/xlog.c:7339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004cd4c0 <RecoveryInProgress>:
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4c0:       31 c0                   xor    %eax,%eax
    0.00 :	  4cd4c2:       80 3d 97 a9 69 00 00    cmpb   $0x0,0x69a997(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	 * As a side-effect, we initialize the local TimeLineID and RedoRecPtr
         :	 * variables the first time we see that recovery is finished.
         :	 */
         :	bool
         :	RecoveryInProgress(void)
         :	{
  100.00 :	  4cd4c9:       55                      push   %rbp
    0.00 :	  4cd4ca:       48 89 e5                mov    %rsp,%rbp
         :	        /*
         :	         * We check shared state each time only until we leave recovery mode. We
         :	         * can't re-enter recovery, so there's no need to keep checking after the
         :	         * shared variable has once been seen false.
         :	         */
         :	        if (!LocalRecoveryInProgress)
    0.00 :	  4cd4cd:       74 1f                   je     4cd4ee <RecoveryInProgress+0x2e>
         :	        {
         :	                /*
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
    0.00 :	  4cd4cf:       48 8b 05 c2 bc 6a 00    mov    0x6abcc2(%rip),%rax        # b79198 <XLogCtl>
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4d6:       0f b6 80 5c 05 00 00    movzbl 0x55c(%rax),%eax
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4dd:       84 c0                   test   %al,%al
         :	                 * use volatile pointer to make sure we make a fresh read of the
         :	                 * shared variable.
         :	                 */
         :	                volatile XLogCtlData *xlogctl = XLogCtl;
         :
         :	                LocalRecoveryInProgress = xlogctl->SharedRecoveryInProgress;
    0.00 :	  4cd4df:       88 05 7b a9 69 00       mov    %al,0x69a97b(%rip)        # b67e60 <LocalRecoveryInProgress>
         :	                 * Initialize TimeLineID and RedoRecPtr when we discover that recovery
         :	                 * is finished. InitPostgres() relies upon this behaviour to ensure
         :	                 * that InitXLOGAccess() is called at backend startup.  (If you change
         :	                 * this, see also LocalSetXLogInsertAllowed.)
         :	                 */
         :	                if (!LocalRecoveryInProgress)
    0.00 :	  4cd4e5:       74 09                   je     4cd4f0 <RecoveryInProgress+0x30>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4e7:       0f b6 05 72 a9 69 00    movzbl 0x69a972(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
         :	        }
         :	}
    0.00 :	  4cd4ee:       c9                      leaveq 
    0.00 :	  4cd4ef:       c3                      retq   
         :	                        /*
         :	                         * If we just exited recovery, make sure we read TimeLineID and
         :	                         * RedoRecPtr after SharedRecoveryInProgress (for machines with
         :	                         * weak memory ordering).
         :	                         */
         :	                        pg_memory_barrier();
    0.00 :	  4cd4f0:       f0 83 04 24 00          lock addl $0x0,(%rsp)
         :	                        InitXLOGAccess();
    0.00 :	  4cd4f5:       e8 a6 ff ff ff          callq  4cd4a0 <InitXLOGAccess>
         :	                 * Note: We don't need a memory barrier when we're still in recovery.
         :	                 * We might exit recovery immediately after return, so the caller
         :	                 * can't rely on 'true' meaning that we're still in recovery anyway.
         :	                 */
         :
         :	                return LocalRecoveryInProgress;
    0.00 :	  4cd4fa:       0f b6 05 5f a9 69 00    movzbl 0x69a95f(%rip),%eax        # b67e60 <LocalRecoveryInProgress>
    0.00 :	  4cd501:       eb eb                   jmp    4cd4ee <RecoveryInProgress+0x2e>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/catalog/namespace.c:2988
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004ec980 <isTempToastNamespace>:
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
    0.00 :	  4ec980:       8b 15 4a cd 68 00       mov    0x68cd4a(%rip),%edx        # b796d0 <myTempToastNamespace>
         :	 * isTempToastNamespace - is the given namespace my temporary-toast-table
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
  100.00 :	  4ec986:       55                      push   %rbp
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
    0.00 :	  4ec987:       31 c0                   xor    %eax,%eax
         :	 * isTempToastNamespace - is the given namespace my temporary-toast-table
         :	 *              namespace?
         :	 */
         :	bool
         :	isTempToastNamespace(Oid namespaceId)
         :	{
    0.00 :	  4ec989:       48 89 e5                mov    %rsp,%rbp
         :	        if (OidIsValid(myTempToastNamespace) && myTempToastNamespace == namespaceId)
    0.00 :	  4ec98c:       85 d2                   test   %edx,%edx
    0.00 :	  4ec98e:       74 05                   je     4ec995 <isTempToastNamespace+0x15>
    0.00 :	  4ec990:       39 fa                   cmp    %edi,%edx
    0.00 :	  4ec992:       0f 94 c0                sete   %al
         :	                return true;
         :	        return false;
         :	}
    0.00 :	  4ec995:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/commands/tablecmds.c:11380
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000057e740 <AtEOXact_on_commit_actions>:
         :	 * During commit, remove entries that were deleted during this transaction;
         :	 * during abort, remove those created during this transaction.
         :	 */
         :	void
         :	AtEOXact_on_commit_actions(bool isCommit)
         :	{
    0.00 :	  57e740:       55                      push   %rbp
    0.00 :	  57e741:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  57e744:       41 55                   push   %r13
    0.00 :	  57e746:       41 89 fd                mov    %edi,%r13d
    0.00 :	  57e749:       41 54                   push   %r12
    0.00 :	  57e74b:       53                      push   %rbx
    0.00 :	  57e74c:       48 83 ec 08             sub    $0x8,%rsp
         :	        ListCell   *cur_item;
         :	        ListCell   *prev_item;
         :
         :	        prev_item = NULL;
         :	        cur_item = list_head(on_commits);
    0.00 :	  57e750:       48 8b 05 f1 b0 5f 00    mov    0x5fb0f1(%rip),%rax        # b79848 <on_commits>
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  57e757:       48 85 c0                test   %rax,%rax
    0.00 :	  57e75a:       0f 84 7d 00 00 00       je     57e7dd <AtEOXact_on_commit_actions+0x9d>
    0.00 :	  57e760:       48 8b 48 08             mov    0x8(%rax),%rcx
         :
         :	        while (cur_item != NULL)
    0.00 :	  57e764:       48 85 c9                test   %rcx,%rcx
    0.00 :	  57e767:       74 74                   je     57e7dd <AtEOXact_on_commit_actions+0x9d>
    0.00 :	  57e769:       45 31 e4                xor    %r12d,%r12d
    0.00 :	  57e76c:       eb 2b                   jmp    57e799 <AtEOXact_on_commit_actions+0x59>
    0.00 :	  57e76e:       66 90                   xchg   %ax,%ax
         :	        {
         :	                OnCommitItem *oc = (OnCommitItem *) lfirst(cur_item);
         :
         :	                if (isCommit ? oc->deleting_subid != InvalidSubTransactionId :
    0.00 :	  57e770:       8b 7b 0c                mov    0xc(%rbx),%edi
    0.00 :	  57e773:       85 ff                   test   %edi,%edi
    0.00 :	  57e775:       0f 95 c0                setne  %al
    0.00 :	  57e778:       84 c0                   test   %al,%al
    0.00 :	  57e77a:       75 31                   jne    57e7ad <AtEOXact_on_commit_actions+0x6d>
         :	                                cur_item = list_head(on_commits);
         :	                }
         :	                else
         :	                {
         :	                        /* cur_item must be preserved */
         :	                        oc->creating_subid = InvalidSubTransactionId;
    0.00 :	  57e77c:       c7 43 08 00 00 00 00    movl   $0x0,0x8(%rbx)
         :	                        oc->deleting_subid = InvalidSubTransactionId;
    0.00 :	  57e783:       c7 43 0c 00 00 00 00    movl   $0x0,0xc(%rbx)
         :	                        prev_item = cur_item;
         :	                        cur_item = lnext(prev_item);
    0.00 :	  57e78a:       49 89 cc                mov    %rcx,%r12
    0.00 :	  57e78d:       48 8b 71 08             mov    0x8(%rcx),%rsi
         :	        ListCell   *prev_item;
         :
         :	        prev_item = NULL;
         :	        cur_item = list_head(on_commits);
         :
         :	        while (cur_item != NULL)
    0.00 :	  57e791:       48 85 f6                test   %rsi,%rsi
    0.00 :	  57e794:       74 47                   je     57e7dd <AtEOXact_on_commit_actions+0x9d>
    0.00 :	  57e796:       48 89 f1                mov    %rsi,%rcx
         :	        {
         :	                OnCommitItem *oc = (OnCommitItem *) lfirst(cur_item);
         :
         :	                if (isCommit ? oc->deleting_subid != InvalidSubTransactionId :
    0.00 :	  57e799:       45 84 ed                test   %r13b,%r13b
         :	        prev_item = NULL;
         :	        cur_item = list_head(on_commits);
         :
         :	        while (cur_item != NULL)
         :	        {
         :	                OnCommitItem *oc = (OnCommitItem *) lfirst(cur_item);
    0.00 :	  57e79c:       48 8b 19                mov    (%rcx),%rbx
         :
         :	                if (isCommit ? oc->deleting_subid != InvalidSubTransactionId :
    0.00 :	  57e79f:       75 cf                   jne    57e770 <AtEOXact_on_commit_actions+0x30>
    0.00 :	  57e7a1:       8b 73 08                mov    0x8(%rbx),%esi
    0.00 :	  57e7a4:       85 f6                   test   %esi,%esi
    0.00 :	  57e7a6:       0f 95 c0                setne  %al
    0.00 :	  57e7a9:       84 c0                   test   %al,%al
    0.00 :	  57e7ab:       74 cf                   je     57e77c <AtEOXact_on_commit_actions+0x3c>
         :	                        oc->creating_subid != InvalidSubTransactionId)
         :	                {
         :	                        /* cur_item must be removed */
         :	                        on_commits = list_delete_cell(on_commits, cur_item, prev_item);
    0.00 :	  57e7ad:       48 8b 3d 94 b0 5f 00    mov    0x5fb094(%rip),%rdi        # b79848 <on_commits>
    0.00 :	  57e7b4:       4c 89 e2                mov    %r12,%rdx
    0.00 :	  57e7b7:       48 89 ce                mov    %rcx,%rsi
    0.00 :	  57e7ba:       e8 a1 39 06 00          callq  5e2160 <list_delete_cell>
         :	                        pfree(oc);
    0.00 :	  57e7bf:       48 89 df                mov    %rbx,%rdi
         :
         :	                if (isCommit ? oc->deleting_subid != InvalidSubTransactionId :
         :	                        oc->creating_subid != InvalidSubTransactionId)
         :	                {
         :	                        /* cur_item must be removed */
         :	                        on_commits = list_delete_cell(on_commits, cur_item, prev_item);
    0.00 :	  57e7c2:       48 89 05 7f b0 5f 00    mov    %rax,0x5fb07f(%rip)        # b79848 <on_commits>
         :	                        pfree(oc);
    0.00 :	  57e7c9:       e8 b2 a3 21 00          callq  798b80 <pfree>
         :	                        if (prev_item)
    0.00 :	  57e7ce:       4d 85 e4                test   %r12,%r12
    0.00 :	  57e7d1:       74 1d                   je     57e7f0 <AtEOXact_on_commit_actions+0xb0>
         :	                                cur_item = lnext(prev_item);
    0.00 :	  57e7d3:       49 8b 74 24 08          mov    0x8(%r12),%rsi
         :	        ListCell   *prev_item;
         :
         :	        prev_item = NULL;
         :	        cur_item = list_head(on_commits);
         :
         :	        while (cur_item != NULL)
    0.00 :	  57e7d8:       48 85 f6                test   %rsi,%rsi
    0.00 :	  57e7db:       75 b9                   jne    57e796 <AtEOXact_on_commit_actions+0x56>
         :	                        oc->deleting_subid = InvalidSubTransactionId;
         :	                        prev_item = cur_item;
         :	                        cur_item = lnext(prev_item);
         :	                }
         :	        }
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/commands/tablecmds.c:11380
  100.00 :	  57e7dd:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  57e7e1:       5b                      pop    %rbx
    0.00 :	  57e7e2:       41 5c                   pop    %r12
    0.00 :	  57e7e4:       41 5d                   pop    %r13
    0.00 :	  57e7e6:       c9                      leaveq 
    0.00 :	  57e7e7:       c3                      retq   
    0.00 :	  57e7e8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  57e7ef:       00 
         :	                        on_commits = list_delete_cell(on_commits, cur_item, prev_item);
         :	                        pfree(oc);
         :	                        if (prev_item)
         :	                                cur_item = lnext(prev_item);
         :	                        else
         :	                                cur_item = list_head(on_commits);
    0.00 :	  57e7f0:       48 8b 05 51 b0 5f 00    mov    0x5fb051(%rip),%rax        # b79848 <on_commits>
    0.00 :	  57e7f7:       48 85 c0                test   %rax,%rax
    0.00 :	  57e7fa:       74 e1                   je     57e7dd <AtEOXact_on_commit_actions+0x9d>
    0.00 :	  57e7fc:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  57e800:       eb 8f                   jmp    57e791 <AtEOXact_on_commit_actions+0x51>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:508
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005b3a20 <ExecStoreVirtualTuple>:
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
         :	        slot->tts_nvalid = slot->tts_tupleDescriptor->natts;
    0.00 :	  5b3a20:       48 8b 47 10             mov    0x10(%rdi),%rax
         :	 * This is a bit unclean but it avoids one round of data copying.
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecStoreVirtualTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3a24:       55                      push   %rbp
         :	         */
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
    0.00 :	  5b3a25:       c6 47 04 00             movb   $0x0,0x4(%rdi)
         :	 * This is a bit unclean but it avoids one round of data copying.
         :	 * --------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecStoreVirtualTuple(TupleTableSlot *slot)
         :	{
    0.00 :	  5b3a29:       48 89 e5                mov    %rsp,%rbp
         :	        Assert(slot != NULL);
         :	        Assert(slot->tts_tupleDescriptor != NULL);
         :	        Assert(slot->tts_isempty);
         :
         :	        slot->tts_isempty = false;
         :	        slot->tts_nvalid = slot->tts_tupleDescriptor->natts;
    0.00 :	  5b3a2c:       8b 00                   mov    (%rax),%eax
 /home/Computational/mark/src/postgres-andres/src/backend/executor/execTuples.c:508
  100.00 :	  5b3a2e:       89 47 24                mov    %eax,0x24(%rdi)
         :
         :	        return slot;
         :	}
    0.00 :	  5b3a31:       48 89 f8                mov    %rdi,%rax
    0.00 :	  5b3a34:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:439
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005baf20 <ExecBitmapHeapScan>:
         :	 *              ExecBitmapHeapScan(node)
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
 /home/Computational/mark/src/postgres-andres/src/backend/executor/nodeBitmapHeapscan.c:439
  100.00 :	  5baf20:       55                      push   %rbp
         :	        return ExecScan(&node->ss,
    0.00 :	  5baf21:       ba 40 af 5b 00          mov    $0x5baf40,%edx
    0.00 :	  5baf26:       be 80 af 5b 00          mov    $0x5baf80,%esi
         :	 *              ExecBitmapHeapScan(node)
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
    0.00 :	  5baf2b:       48 89 e5                mov    %rsp,%rbp
         :	        return ExecScan(&node->ss,
         :	                                        (ExecScanAccessMtd) BitmapHeapNext,
         :	                                        (ExecScanRecheckMtd) BitmapHeapRecheck);
         :	}
    0.00 :	  5baf2e:       c9                      leaveq 
         :	 * ----------------------------------------------------------------
         :	 */
         :	TupleTableSlot *
         :	ExecBitmapHeapScan(BitmapHeapScanState *node)
         :	{
         :	        return ExecScan(&node->ss,
    0.00 :	  5baf2f:       e9 1c 88 ff ff          jmpq   5b3750 <ExecScan>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:941
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005e3af0 <tbm_mark_page_lossy>:
         :	 * This may cause the table to exceed the desired memory size.  It is
         :	 * up to the caller to call tbm_lossify() at the next safe point if so.
         :	 */
         :	static void
         :	tbm_mark_page_lossy(TIDBitmap *tbm, BlockNumber pageno)
         :	{
    0.00 :	  5e3af0:       55                      push   %rbp
    0.00 :	  5e3af1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5e3af4:       41 54                   push   %r12
    0.00 :	  5e3af6:       53                      push   %rbx
    0.00 :	  5e3af7:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  5e3afa:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  5e3afe:       89 75 dc                mov    %esi,-0x24(%rbp)
         :	        int                     bitno;
         :	        int                     wordnum;
         :	        int                     bitnum;
         :
         :	        /* We force the bitmap into hashtable mode whenever it's lossy */
         :	        if (tbm->status != TBM_HASH)
    0.00 :	  5e3b01:       83 7f 10 02             cmpl   $0x2,0x10(%rdi)
    0.00 :	  5e3b05:       74 05                   je     5e3b0c <tbm_mark_page_lossy+0x1c>
         :	                tbm_create_pagetable(tbm);
    0.00 :	  5e3b07:       e8 04 ff ff ff          callq  5e3a10 <tbm_create_pagetable>
         :
         :	        bitno = pageno % PAGES_PER_CHUNK;
    0.00 :	  5e3b0c:       8b 45 dc                mov    -0x24(%rbp),%eax
    0.00 :	  5e3b0f:       44 0f b6 e0             movzbl %al,%r12d
         :	        chunk_pageno = pageno - bitno;
    0.00 :	  5e3b13:       44 29 e0                sub    %r12d,%eax
         :
         :	        /*
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
    0.00 :	  5e3b16:       45 85 e4                test   %r12d,%r12d
         :	        /* We force the bitmap into hashtable mode whenever it's lossy */
         :	        if (tbm->status != TBM_HASH)
         :	                tbm_create_pagetable(tbm);
         :
         :	        bitno = pageno % PAGES_PER_CHUNK;
         :	        chunk_pageno = pageno - bitno;
    0.00 :	  5e3b19:       89 45 e8                mov    %eax,-0x18(%rbp)
         :
         :	        /*
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
    0.00 :	  5e3b1c:       0f 85 06 01 00 00       jne    5e3c28 <tbm_mark_page_lossy+0x138>
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
         :	                }
         :	        }
         :
         :	        /* Look up or create entry for chunk-header page */
         :	        page = (PagetableEntry *) hash_search(tbm->pagetable,
    0.00 :	  5e3b22:       48 8b 7b 18             mov    0x18(%rbx),%rdi
    0.00 :	  5e3b26:       48 8d 75 e8             lea    -0x18(%rbp),%rsi
    0.00 :	  5e3b2a:       48 8d 4d ef             lea    -0x11(%rbp),%rcx
    0.00 :	  5e3b2e:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  5e3b33:       e8 68 0b 1a 00          callq  7846a0 <hash_search>
         :	                                                                                  (void *) &chunk_pageno,
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
    0.00 :	  5e3b38:       80 7d ef 00             cmpb   $0x0,-0x11(%rbp)
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
         :	                }
         :	        }
         :
         :	        /* Look up or create entry for chunk-header page */
         :	        page = (PagetableEntry *) hash_search(tbm->pagetable,
    0.00 :	  5e3b3c:       48 89 c6                mov    %rax,%rsi
         :	                                                                                  (void *) &chunk_pageno,
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
    0.00 :	  5e3b3f:       75 6f                   jne    5e3bb0 <tbm_mark_page_lossy+0xc0>
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3b41:       a8 07                   test   $0x7,%al
    0.00 :	  5e3b43:       0f 85 c7 00 00 00       jne    5e3c10 <tbm_mark_page_lossy+0x120>
    0.00 :	  5e3b49:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5e3b50:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  5e3b57:       00 
    0.00 :	  5e3b58:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5e3b5f:       00 
    0.00 :	  5e3b60:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  5e3b67:       00 
    0.00 :	  5e3b68:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  5e3b6f:       00 
    0.00 :	  5e3b70:       48 c7 40 28 00 00 00    movq   $0x0,0x28(%rax)
    0.00 :	  5e3b77:       00 
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3b78:       8b 45 e8                mov    -0x18(%rbp),%eax
         :	                page->ischunk = true;
    0.00 :	  5e3b7b:       c6 46 04 01             movb   $0x1,0x4(%rsi)
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3b7f:       89 06                   mov    %eax,(%rsi)
         :	                page->ischunk = true;
         :	                /* must count it too */
         :	                tbm->nentries++;
    0.00 :	  5e3b81:       83 43 20 01             addl   $0x1,0x20(%rbx)
         :	                tbm->nchunks++;
    0.00 :	  5e3b85:       83 43 2c 01             addl   $0x1,0x2c(%rbx)
         :	                tbm->nchunks++;
         :	                tbm->npages--;
         :	        }
         :
         :	        /* Now set the original target page's bit */
         :	        wordnum = WORDNUM(bitno);
    0.00 :	  5e3b89:       44 89 e2                mov    %r12d,%edx
         :	        bitnum = BITNUM(bitno);
         :	        page->words[wordnum] |= ((bitmapword) 1 << bitnum);
    0.00 :	  5e3b8c:       41 83 e4 1f             and    $0x1f,%r12d
    0.00 :	  5e3b90:       b8 01 00 00 00          mov    $0x1,%eax
         :	                tbm->nchunks++;
         :	                tbm->npages--;
         :	        }
         :
         :	        /* Now set the original target page's bit */
         :	        wordnum = WORDNUM(bitno);
    0.00 :	  5e3b95:       c1 fa 05                sar    $0x5,%edx
         :	        bitnum = BITNUM(bitno);
         :	        page->words[wordnum] |= ((bitmapword) 1 << bitnum);
    0.00 :	  5e3b98:       44 89 e1                mov    %r12d,%ecx
    0.00 :	  5e3b9b:       48 63 d2                movslq %edx,%rdx
    0.00 :	  5e3b9e:       d3 e0                   shl    %cl,%eax
    0.00 :	  5e3ba0:       09 44 96 08             or     %eax,0x8(%rsi,%rdx,4)
         :	}
    0.00 :	  5e3ba4:       48 83 c4 20             add    $0x20,%rsp
    0.00 :	  5e3ba8:       5b                      pop    %rbx
    0.00 :	  5e3ba9:       41 5c                   pop    %r12
    0.00 :	  5e3bab:       c9                      leaveq 
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/tidbitmap.c:941
  100.00 :	  5e3bac:       c3                      retq   
    0.00 :	  5e3bad:       0f 1f 00                nopl   (%rax)
         :	                page->ischunk = true;
         :	                /* must count it too */
         :	                tbm->nentries++;
         :	                tbm->nchunks++;
         :	        }
         :	        else if (!page->ischunk)
    0.00 :	  5e3bb0:       80 78 04 00             cmpb   $0x0,0x4(%rax)
    0.00 :	  5e3bb4:       75 d3                   jne    5e3b89 <tbm_mark_page_lossy+0x99>
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3bb6:       a8 07                   test   $0x7,%al
    0.00 :	  5e3bb8:       0f 85 9a 00 00 00       jne    5e3c58 <tbm_mark_page_lossy+0x168>
    0.00 :	  5e3bbe:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  5e3bc5:       48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax)
    0.00 :	  5e3bcc:       00 
    0.00 :	  5e3bcd:       48 c7 40 10 00 00 00    movq   $0x0,0x10(%rax)
    0.00 :	  5e3bd4:       00 
    0.00 :	  5e3bd5:       48 c7 40 18 00 00 00    movq   $0x0,0x18(%rax)
    0.00 :	  5e3bdc:       00 
    0.00 :	  5e3bdd:       48 c7 40 20 00 00 00    movq   $0x0,0x20(%rax)
    0.00 :	  5e3be4:       00 
    0.00 :	  5e3be5:       48 c7 40 28 00 00 00    movq   $0x0,0x28(%rax)
    0.00 :	  5e3bec:       00 
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3bed:       8b 45 e8                mov    -0x18(%rbp),%eax
         :	                page->ischunk = true;
    0.00 :	  5e3bf0:       c6 46 04 01             movb   $0x1,0x4(%rsi)
         :	                /* we assume it had some tuple bit(s) set, so mark it lossy */
         :	                page->words[0] = ((bitmapword) 1 << 0);
    0.00 :	  5e3bf4:       c7 46 08 01 00 00 00    movl   $0x1,0x8(%rsi)
         :	        }
         :	        else if (!page->ischunk)
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
         :	                page->blockno = chunk_pageno;
    0.00 :	  5e3bfb:       89 06                   mov    %eax,(%rsi)
         :	                page->ischunk = true;
         :	                /* we assume it had some tuple bit(s) set, so mark it lossy */
         :	                page->words[0] = ((bitmapword) 1 << 0);
         :	                /* adjust counts */
         :	                tbm->nchunks++;
    0.00 :	  5e3bfd:       83 43 2c 01             addl   $0x1,0x2c(%rbx)
         :	                tbm->npages--;
    0.00 :	  5e3c01:       83 6b 28 01             subl   $0x1,0x28(%rbx)
    0.00 :	  5e3c05:       eb 82                   jmp    5e3b89 <tbm_mark_page_lossy+0x99>
    0.00 :	  5e3c07:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
    0.00 :	  5e3c0e:       00 00 
         :	                                                                                  HASH_ENTER, &found);
         :
         :	        /* Initialize it if not present before */
         :	        if (!found)
         :	        {
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3c10:       b9 06 00 00 00          mov    $0x6,%ecx
    0.00 :	  5e3c15:       31 c0                   xor    %eax,%eax
    0.00 :	  5e3c17:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5e3c1a:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	  5e3c1d:       e9 56 ff ff ff          jmpq   5e3b78 <tbm_mark_page_lossy+0x88>
    0.00 :	  5e3c22:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	         * Remove any extant non-lossy entry for the page.  If the page is its own
         :	         * chunk header, however, we skip this and handle the case below.
         :	         */
         :	        if (bitno != 0)
         :	        {
         :	                if (hash_search(tbm->pagetable,
    0.00 :	  5e3c28:       48 8b 7b 18             mov    0x18(%rbx),%rdi
    0.00 :	  5e3c2c:       48 8d 75 dc             lea    -0x24(%rbp),%rsi
    0.00 :	  5e3c30:       31 c9                   xor    %ecx,%ecx
    0.00 :	  5e3c32:       ba 02 00 00 00          mov    $0x2,%edx
    0.00 :	  5e3c37:       e8 64 0a 1a 00          callq  7846a0 <hash_search>
    0.00 :	  5e3c3c:       48 85 c0                test   %rax,%rax
    0.00 :	  5e3c3f:       0f 84 dd fe ff ff       je     5e3b22 <tbm_mark_page_lossy+0x32>
         :	                                                (void *) &pageno,
         :	                                                HASH_REMOVE, NULL) != NULL)
         :	                {
         :	                        /* It was present, so adjust counts */
         :	                        tbm->nentries--;
    0.00 :	  5e3c45:       83 6b 20 01             subl   $0x1,0x20(%rbx)
         :	                        tbm->npages--;          /* assume it must have been non-lossy */
    0.00 :	  5e3c49:       83 6b 28 01             subl   $0x1,0x28(%rbx)
    0.00 :	  5e3c4d:       e9 d0 fe ff ff          jmpq   5e3b22 <tbm_mark_page_lossy+0x32>
    0.00 :	  5e3c52:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                tbm->nchunks++;
         :	        }
         :	        else if (!page->ischunk)
         :	        {
         :	                /* chunk header page was formerly non-lossy, make it lossy */
         :	                MemSet(page, 0, sizeof(PagetableEntry));
    0.00 :	  5e3c58:       b9 06 00 00 00          mov    $0x6,%ecx
    0.00 :	  5e3c5d:       31 c0                   xor    %eax,%eax
    0.00 :	  5e3c5f:       48 89 f7                mov    %rsi,%rdi
    0.00 :	  5e3c62:       f3 48 ab                rep stos %rax,%es:(%rdi)
    0.00 :	  5e3c65:       eb 86                   jmp    5e3bed <tbm_mark_page_lossy+0xfd>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/copyfuncs.c:1976
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005eab70 <_copyRangeTblEntry>:
         :	 * ****************************************************************
         :	 */
         :
         :	static RangeTblEntry *
         :	_copyRangeTblEntry(const RangeTblEntry *from)
         :	{
    0.00 :	  5eab70:       55                      push   %rbp
         :	        RangeTblEntry *newnode = makeNode(RangeTblEntry);
    0.00 :	  5eab71:       be a8 00 00 00          mov    $0xa8,%esi
         :	 * ****************************************************************
         :	 */
         :
         :	static RangeTblEntry *
         :	_copyRangeTblEntry(const RangeTblEntry *from)
         :	{
    0.00 :	  5eab76:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  5eab79:       41 54                   push   %r12
    0.00 :	  5eab7b:       49 89 fc                mov    %rdi,%r12
         :	        RangeTblEntry *newnode = makeNode(RangeTblEntry);
    0.00 :	  5eab7e:       48 8b 3d db fc 5c 00    mov    0x5cfcdb(%rip),%rdi        # bba860 <CurrentMemoryContext>
         :	 * ****************************************************************
         :	 */
         :
         :	static RangeTblEntry *
         :	_copyRangeTblEntry(const RangeTblEntry *from)
         :	{
    0.00 :	  5eab85:       53                      push   %rbx
         :	        RangeTblEntry *newnode = makeNode(RangeTblEntry);
    0.00 :	  5eab86:       e8 85 e2 1a 00          callq  798e10 <MemoryContextAllocZeroAligned>
    0.00 :	  5eab8b:       48 89 c3                mov    %rax,%rbx
    0.00 :	  5eab8e:       c7 00 9a 03 00 00       movl   $0x39a,(%rax)
         :
         :	        COPY_SCALAR_FIELD(rtekind);
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/copyfuncs.c:1976
  100.00 :	  5eab94:       41 8b 44 24 04          mov    0x4(%r12),%eax
    0.00 :	  5eab99:       89 43 04                mov    %eax,0x4(%rbx)
         :	        COPY_SCALAR_FIELD(relid);
    0.00 :	  5eab9c:       41 8b 44 24 08          mov    0x8(%r12),%eax
    0.00 :	  5eaba1:       89 43 08                mov    %eax,0x8(%rbx)
         :	        COPY_SCALAR_FIELD(relkind);
    0.00 :	  5eaba4:       41 0f b6 44 24 0c       movzbl 0xc(%r12),%eax
    0.00 :	  5eabaa:       88 43 0c                mov    %al,0xc(%rbx)
         :	        COPY_NODE_FIELD(subquery);
    0.00 :	  5eabad:       49 8b 7c 24 10          mov    0x10(%r12),%rdi
    0.00 :	  5eabb2:       e8 d9 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eabb7:       48 89 43 10             mov    %rax,0x10(%rbx)
         :	        COPY_SCALAR_FIELD(security_barrier);
    0.00 :	  5eabbb:       41 0f b6 44 24 18       movzbl 0x18(%r12),%eax
    0.00 :	  5eabc1:       88 43 18                mov    %al,0x18(%rbx)
         :	        COPY_SCALAR_FIELD(jointype);
    0.00 :	  5eabc4:       41 8b 44 24 1c          mov    0x1c(%r12),%eax
    0.00 :	  5eabc9:       89 43 1c                mov    %eax,0x1c(%rbx)
         :	        COPY_NODE_FIELD(joinaliasvars);
    0.00 :	  5eabcc:       49 8b 7c 24 20          mov    0x20(%r12),%rdi
    0.00 :	  5eabd1:       e8 ba 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eabd6:       48 89 43 20             mov    %rax,0x20(%rbx)
         :	        COPY_NODE_FIELD(functions);
    0.00 :	  5eabda:       49 8b 7c 24 28          mov    0x28(%r12),%rdi
    0.00 :	  5eabdf:       e8 ac 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eabe4:       48 89 43 28             mov    %rax,0x28(%rbx)
         :	        COPY_SCALAR_FIELD(funcordinality);
    0.00 :	  5eabe8:       41 0f b6 44 24 30       movzbl 0x30(%r12),%eax
    0.00 :	  5eabee:       88 43 30                mov    %al,0x30(%rbx)
         :	        COPY_NODE_FIELD(values_lists);
    0.00 :	  5eabf1:       49 8b 7c 24 38          mov    0x38(%r12),%rdi
    0.00 :	  5eabf6:       e8 95 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eabfb:       48 89 43 38             mov    %rax,0x38(%rbx)
         :	        COPY_NODE_FIELD(values_collations);
    0.00 :	  5eabff:       49 8b 7c 24 40          mov    0x40(%r12),%rdi
    0.00 :	  5eac04:       e8 87 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac09:       48 89 43 40             mov    %rax,0x40(%rbx)
         :	        COPY_STRING_FIELD(ctename);
    0.00 :	  5eac0d:       49 8b 7c 24 48          mov    0x48(%r12),%rdi
    0.00 :	  5eac12:       31 c0                   xor    %eax,%eax
    0.00 :	  5eac14:       48 85 ff                test   %rdi,%rdi
    0.00 :	  5eac17:       74 05                   je     5eac1e <_copyRangeTblEntry+0xae>
    0.00 :	  5eac19:       e8 32 e3 1a 00          callq  798f50 <pstrdup>
    0.00 :	  5eac1e:       48 89 43 48             mov    %rax,0x48(%rbx)
         :	        COPY_SCALAR_FIELD(ctelevelsup);
    0.00 :	  5eac22:       41 8b 44 24 50          mov    0x50(%r12),%eax
    0.00 :	  5eac27:       89 43 50                mov    %eax,0x50(%rbx)
         :	        COPY_SCALAR_FIELD(self_reference);
    0.00 :	  5eac2a:       41 0f b6 44 24 54       movzbl 0x54(%r12),%eax
    0.00 :	  5eac30:       88 43 54                mov    %al,0x54(%rbx)
         :	        COPY_NODE_FIELD(ctecoltypes);
    0.00 :	  5eac33:       49 8b 7c 24 58          mov    0x58(%r12),%rdi
    0.00 :	  5eac38:       e8 53 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac3d:       48 89 43 58             mov    %rax,0x58(%rbx)
         :	        COPY_NODE_FIELD(ctecoltypmods);
    0.00 :	  5eac41:       49 8b 7c 24 60          mov    0x60(%r12),%rdi
    0.00 :	  5eac46:       e8 45 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac4b:       48 89 43 60             mov    %rax,0x60(%rbx)
         :	        COPY_NODE_FIELD(ctecolcollations);
    0.00 :	  5eac4f:       49 8b 7c 24 68          mov    0x68(%r12),%rdi
    0.00 :	  5eac54:       e8 37 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac59:       48 89 43 68             mov    %rax,0x68(%rbx)
         :	        COPY_NODE_FIELD(alias);
    0.00 :	  5eac5d:       49 8b 7c 24 70          mov    0x70(%r12),%rdi
    0.00 :	  5eac62:       e8 29 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac67:       48 89 43 70             mov    %rax,0x70(%rbx)
         :	        COPY_NODE_FIELD(eref);
    0.00 :	  5eac6b:       49 8b 7c 24 78          mov    0x78(%r12),%rdi
    0.00 :	  5eac70:       e8 1b 95 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eac75:       48 89 43 78             mov    %rax,0x78(%rbx)
         :	        COPY_SCALAR_FIELD(lateral);
    0.00 :	  5eac79:       41 0f b6 84 24 80 00    movzbl 0x80(%r12),%eax
    0.00 :	  5eac80:       00 00 
    0.00 :	  5eac82:       88 83 80 00 00 00       mov    %al,0x80(%rbx)
         :	        COPY_SCALAR_FIELD(inh);
    0.00 :	  5eac88:       41 0f b6 84 24 81 00    movzbl 0x81(%r12),%eax
    0.00 :	  5eac8f:       00 00 
    0.00 :	  5eac91:       88 83 81 00 00 00       mov    %al,0x81(%rbx)
         :	        COPY_SCALAR_FIELD(inFromCl);
    0.00 :	  5eac97:       41 0f b6 84 24 82 00    movzbl 0x82(%r12),%eax
    0.00 :	  5eac9e:       00 00 
    0.00 :	  5eaca0:       88 83 82 00 00 00       mov    %al,0x82(%rbx)
         :	        COPY_SCALAR_FIELD(requiredPerms);
    0.00 :	  5eaca6:       41 8b 84 24 84 00 00    mov    0x84(%r12),%eax
    0.00 :	  5eacad:       00 
    0.00 :	  5eacae:       89 83 84 00 00 00       mov    %eax,0x84(%rbx)
         :	        COPY_SCALAR_FIELD(checkAsUser);
    0.00 :	  5eacb4:       41 8b 84 24 88 00 00    mov    0x88(%r12),%eax
    0.00 :	  5eacbb:       00 
    0.00 :	  5eacbc:       89 83 88 00 00 00       mov    %eax,0x88(%rbx)
         :	        COPY_BITMAPSET_FIELD(selectedCols);
    0.00 :	  5eacc2:       49 8b bc 24 90 00 00    mov    0x90(%r12),%rdi
    0.00 :	  5eacc9:       00 
    0.00 :	  5eacca:       e8 31 84 ff ff          callq  5e3100 <bms_copy>
    0.00 :	  5eaccf:       48 89 83 90 00 00 00    mov    %rax,0x90(%rbx)
         :	        COPY_BITMAPSET_FIELD(modifiedCols);
    0.00 :	  5eacd6:       49 8b bc 24 98 00 00    mov    0x98(%r12),%rdi
    0.00 :	  5eacdd:       00 
    0.00 :	  5eacde:       e8 1d 84 ff ff          callq  5e3100 <bms_copy>
    0.00 :	  5eace3:       48 89 83 98 00 00 00    mov    %rax,0x98(%rbx)
         :	        COPY_NODE_FIELD(securityQuals);
    0.00 :	  5eacea:       49 8b bc 24 a0 00 00    mov    0xa0(%r12),%rdi
    0.00 :	  5eacf1:       00 
    0.00 :	  5eacf2:       e8 99 94 ff ff          callq  5e4190 <copyObject>
    0.00 :	  5eacf7:       48 89 83 a0 00 00 00    mov    %rax,0xa0(%rbx)
         :
         :	        return newnode;
         :	}
    0.00 :	  5eacfe:       48 89 d8                mov    %rbx,%rax
    0.00 :	  5ead01:       5b                      pop    %rbx
    0.00 :	  5ead02:       41 5c                   pop    %r12
    0.00 :	  5ead04:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/nodes/read.c:138
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000005fef30 <pg_strtok>:
         :	 * code should add backslashes to a string constant to ensure it is treated
         :	 * as a single token.
         :	 */
         :	char *
         :	pg_strtok(int *length)
         :	{
    0.00 :	  5fef30:       55                      push   %rbp
         :	        char       *local_str;          /* working pointer to string */
         :	        char       *ret_str;            /* start of token to return */
         :
         :	        local_str = pg_strtok_ptr;
    0.00 :	  5fef31:       48 8b 0d d8 ca 57 00    mov    0x57cad8(%rip),%rcx        # b7ba10 <pg_strtok_ptr>
         :	 * code should add backslashes to a string constant to ensure it is treated
         :	 * as a single token.
         :	 */
         :	char *
         :	pg_strtok(int *length)
         :	{
    0.00 :	  5fef38:       48 89 e5                mov    %rsp,%rbp
         :	        char       *local_str;          /* working pointer to string */
         :	        char       *ret_str;            /* start of token to return */
         :
         :	        local_str = pg_strtok_ptr;
         :
         :	        while (*local_str == ' ' || *local_str == '\n' || *local_str == '\t')
    0.00 :	  5fef3b:       eb 07                   jmp    5fef44 <pg_strtok+0x14>
    0.00 :	  5fef3d:       0f 1f 00                nopl   (%rax)
         :	                local_str++;
    0.00 :	  5fef40:       48 83 c1 01             add    $0x1,%rcx
         :	        char       *local_str;          /* working pointer to string */
         :	        char       *ret_str;            /* start of token to return */
         :
         :	        local_str = pg_strtok_ptr;
         :
         :	        while (*local_str == ' ' || *local_str == '\n' || *local_str == '\t')
    0.00 :	  5fef44:       0f b6 11                movzbl (%rcx),%edx
    0.00 :	  5fef47:       80 fa 20                cmp    $0x20,%dl
    0.00 :	  5fef4a:       74 f4                   je     5fef40 <pg_strtok+0x10>
    0.00 :	  5fef4c:       80 fa 0a                cmp    $0xa,%dl
    0.00 :	  5fef4f:       74 ef                   je     5fef40 <pg_strtok+0x10>
    0.00 :	  5fef51:       80 fa 09                cmp    $0x9,%dl
    0.00 :	  5fef54:       74 ea                   je     5fef40 <pg_strtok+0x10>
         :	                local_str++;
         :
         :	        if (*local_str == '\0')
    0.00 :	  5fef56:       84 d2                   test   %dl,%dl
    0.00 :	  5fef58:       0f 84 9d 00 00 00       je     5feffb <pg_strtok+0xcb>
         :	        /*
         :	         * Now pointing at start of next token.
         :	         */
         :	        ret_str = local_str;
         :
         :	        if (*local_str == '(' || *local_str == ')' ||
    0.00 :	  5fef5e:       8d 42 d8                lea    -0x28(%rdx),%eax
    0.00 :	  5fef61:       3c 01                   cmp    $0x1,%al
    0.00 :	  5fef63:       76 63                   jbe    5fefc8 <pg_strtok+0x98>
    0.00 :	  5fef65:       80 fa 7b                cmp    $0x7b,%dl
    0.00 :	  5fef68:       74 5e                   je     5fefc8 <pg_strtok+0x98>
    0.00 :	  5fef6a:       80 fa 7d                cmp    $0x7d,%dl
    0.00 :	  5fef6d:       49 89 c8                mov    %rcx,%r8
    0.00 :	  5fef70:       75 0c                   jne    5fef7e <pg_strtok+0x4e>
    0.00 :	  5fef72:       eb 54                   jmp    5fefc8 <pg_strtok+0x98>
    0.00 :	  5fef74:       0f 1f 40 00             nopl   0x0(%rax)
         :	                           *local_str != ' ' && *local_str != '\n' &&
         :	                           *local_str != '\t' &&
         :	                           *local_str != '(' && *local_str != ')' &&
         :	                           *local_str != '{' && *local_str != '}')
         :	                {
         :	                        if (*local_str == '\\' && local_str[1] != '\0')
    0.00 :	  5fef78:       0f b6 16                movzbl (%rsi),%edx
    0.00 :	  5fef7b:       49 89 f0                mov    %rsi,%r8
         :	                local_str++;
         :	        }
         :	        else
         :	        {
         :	                /* Normal token, possibly containing backslashes */
         :	                while (*local_str != '\0' &&
    0.00 :	  5fef7e:       84 d2                   test   %dl,%dl
    0.00 :	  5fef80:       74 4a                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fef82:       80 fa 20                cmp    $0x20,%dl
    0.00 :	  5fef85:       74 45                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fef87:       80 fa 0a                cmp    $0xa,%dl
    0.00 :	  5fef8a:       74 40                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fef8c:       80 fa 09                cmp    $0x9,%dl
    0.00 :	  5fef8f:       90                      nop
    0.00 :	  5fef90:       74 3a                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fef92:       80 fa 28                cmp    $0x28,%dl
    0.00 :	  5fef95:       74 35                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fef97:       80 fa 29                cmp    $0x29,%dl
    0.00 :	  5fef9a:       74 30                   je     5fefcc <pg_strtok+0x9c>
 /home/Computational/mark/src/postgres-andres/src/backend/nodes/read.c:138
  100.00 :	  5fef9c:       80 fa 7b                cmp    $0x7b,%dl
    0.00 :	  5fef9f:       90                      nop
    0.00 :	  5fefa0:       74 2a                   je     5fefcc <pg_strtok+0x9c>
    0.00 :	  5fefa2:       80 fa 7d                cmp    $0x7d,%dl
    0.00 :	  5fefa5:       74 25                   je     5fefcc <pg_strtok+0x9c>
         :	                           *local_str != ' ' && *local_str != '\n' &&
         :	                           *local_str != '\t' &&
         :	                           *local_str != '(' && *local_str != ')' &&
         :	                           *local_str != '{' && *local_str != '}')
         :	                {
         :	                        if (*local_str == '\\' && local_str[1] != '\0')
    0.00 :	  5fefa7:       80 fa 5c                cmp    $0x5c,%dl
    0.00 :	  5fefaa:       49 8d 70 01             lea    0x1(%r8),%rsi
    0.00 :	  5fefae:       66 90                   xchg   %ax,%ax
    0.00 :	  5fefb0:       75 c6                   jne    5fef78 <pg_strtok+0x48>
         :	                                local_str += 2;
    0.00 :	  5fefb2:       41 80 78 01 00          cmpb   $0x0,0x1(%r8)
         :	                           *local_str != ' ' && *local_str != '\n' &&
         :	                           *local_str != '\t' &&
         :	                           *local_str != '(' && *local_str != ')' &&
         :	                           *local_str != '{' && *local_str != '}')
         :	                {
         :	                        if (*local_str == '\\' && local_str[1] != '\0')
    0.00 :	  5fefb7:       49 8d 70 01             lea    0x1(%r8),%rsi
         :	                                local_str += 2;
    0.00 :	  5fefbb:       49 8d 40 02             lea    0x2(%r8),%rax
    0.00 :	  5fefbf:       48 0f 45 f0             cmovne %rax,%rsi
    0.00 :	  5fefc3:       eb b3                   jmp    5fef78 <pg_strtok+0x48>
    0.00 :	  5fefc5:       0f 1f 00                nopl   (%rax)
         :
         :	        if (*local_str == '(' || *local_str == ')' ||
         :	                *local_str == '{' || *local_str == '}')
         :	        {
         :	                /* special 1-character token */
         :	                local_str++;
    0.00 :	  5fefc8:       4c 8d 41 01             lea    0x1(%rcx),%r8
         :	                        else
         :	                                local_str++;
         :	                }
         :	        }
         :
         :	        *length = local_str - ret_str;
    0.00 :	  5fefcc:       44 89 c0                mov    %r8d,%eax
    0.00 :	  5fefcf:       29 c8                   sub    %ecx,%eax
         :
         :	        /* Recognize special case for "empty" token */
         :	        if (*length == 2 && ret_str[0] == '<' && ret_str[1] == '>')
    0.00 :	  5fefd1:       83 f8 02                cmp    $0x2,%eax
         :	                        else
         :	                                local_str++;
         :	                }
         :	        }
         :
         :	        *length = local_str - ret_str;
    0.00 :	  5fefd4:       89 07                   mov    %eax,(%rdi)
         :
         :	        /* Recognize special case for "empty" token */
         :	        if (*length == 2 && ret_str[0] == '<' && ret_str[1] == '>')
    0.00 :	  5fefd6:       74 10                   je     5fefe8 <pg_strtok+0xb8>
         :	                *length = 0;
         :
         :	        pg_strtok_ptr = local_str;
    0.00 :	  5fefd8:       4c 89 05 31 ca 57 00    mov    %r8,0x57ca31(%rip)        # b7ba10 <pg_strtok_ptr>
    0.00 :	  5fefdf:       48 89 c8                mov    %rcx,%rax
         :
         :	        return ret_str;
         :	}
    0.00 :	  5fefe2:       c9                      leaveq 
    0.00 :	  5fefe3:       c3                      retq   
    0.00 :	  5fefe4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        }
         :
         :	        *length = local_str - ret_str;
         :
         :	        /* Recognize special case for "empty" token */
         :	        if (*length == 2 && ret_str[0] == '<' && ret_str[1] == '>')
    0.00 :	  5fefe8:       80 39 3c                cmpb   $0x3c,(%rcx)
    0.00 :	  5fefeb:       75 eb                   jne    5fefd8 <pg_strtok+0xa8>
    0.00 :	  5fefed:       80 79 01 3e             cmpb   $0x3e,0x1(%rcx)
    0.00 :	  5feff1:       75 e5                   jne    5fefd8 <pg_strtok+0xa8>
         :	                *length = 0;
    0.00 :	  5feff3:       c7 07 00 00 00 00       movl   $0x0,(%rdi)
    0.00 :	  5feff9:       eb dd                   jmp    5fefd8 <pg_strtok+0xa8>
         :	        while (*local_str == ' ' || *local_str == '\n' || *local_str == '\t')
         :	                local_str++;
         :
         :	        if (*local_str == '\0')
         :	        {
         :	                *length = 0;
    0.00 :	  5feffb:       c7 07 00 00 00 00       movl   $0x0,(%rdi)
         :	                pg_strtok_ptr = local_str;
    0.00 :	  5ff001:       31 c0                   xor    %eax,%eax
    0.00 :	  5ff003:       48 89 0d 06 ca 57 00    mov    %rcx,0x57ca06(%rip)        # b7ba10 <pg_strtok_ptr>
         :	                *length = 0;
         :
         :	        pg_strtok_ptr = local_str;
         :
         :	        return ret_str;
         :	}
    0.00 :	  5ff00a:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/optimizer/path/pathkeys.c:1216
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000611ef0 <select_outer_pathkeys_for_merge>:
         :	 */
         :	List *
         :	select_outer_pathkeys_for_merge(PlannerInfo *root,
         :	                                                                List *mergeclauses,
         :	                                                                RelOptInfo *joinrel)
         :	{
    0.00 :	  611ef0:       55                      push   %rbp
    0.00 :	  611ef1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  611ef4:       41 57                   push   %r15
    0.00 :	  611ef6:       41 56                   push   %r14
    0.00 :	  611ef8:       41 55                   push   %r13
    0.00 :	  611efa:       41 54                   push   %r12
    0.00 :	  611efc:       49 89 f4                mov    %rsi,%r12
    0.00 :	  611eff:       53                      push   %rbx
    0.00 :	  611f00:       48 83 ec 28             sub    $0x28,%rsp
         :	}
         :
         :	STATIC_IF_INLINE int
         :	list_length(const List *l)
         :	{
         :	        return l ? l->length : 0;
    0.00 :	  611f04:       48 85 f6                test   %rsi,%rsi
    0.00 :	  611f07:       48 89 7d c0             mov    %rdi,-0x40(%rbp)
    0.00 :	  611f0b:       48 89 55 b8             mov    %rdx,-0x48(%rbp)
    0.00 :	  611f0f:       74 07                   je     611f18 <select_outer_pathkeys_for_merge+0x28>
    0.00 :	  611f11:       8b 46 04                mov    0x4(%rsi),%eax
         :	        int                     necs;
         :	        ListCell   *lc;
         :	        int                     j;
         :
         :	        /* Might have no mergeclauses */
         :	        if (nClauses == 0)
    0.00 :	  611f14:       85 c0                   test   %eax,%eax
    0.00 :	  611f16:       75 14                   jne    611f2c <select_outer_pathkeys_for_merge+0x3c>
         :	                Assert(!pathkey_is_redundant(pathkey, pathkeys));
         :	                pathkeys = lappend(pathkeys, pathkey);
         :	        }
         :
         :	        pfree(ecs);
         :	        pfree(scores);
    0.00 :	  611f18:       31 db                   xor    %ebx,%ebx
         :
         :	        return pathkeys;
         :	}
    0.00 :	  611f1a:       48 83 c4 28             add    $0x28,%rsp
    0.00 :	  611f1e:       48 89 d8                mov    %rbx,%rax
    0.00 :	  611f21:       5b                      pop    %rbx
    0.00 :	  611f22:       41 5c                   pop    %r12
    0.00 :	  611f24:       41 5d                   pop    %r13
    0.00 :	  611f26:       41 5e                   pop    %r14
    0.00 :	  611f28:       41 5f                   pop    %r15
    0.00 :	  611f2a:       c9                      leaveq 
    0.00 :	  611f2b:       c3                      retq   
         :
         :	        /*
         :	         * Make arrays of the ECs used by the mergeclauses (dropping any
         :	         * duplicates) and their "popularity" scores.
         :	         */
         :	        ecs = (EquivalenceClass **) palloc(nClauses * sizeof(EquivalenceClass *));
    0.00 :	  611f2c:       48 63 d8                movslq %eax,%rbx
         :	        scores = (int *) palloc(nClauses * sizeof(int));
         :	        necs = 0;
         :
         :	        foreach(lc, mergeclauses)
    0.00 :	  611f2f:       45 31 ed                xor    %r13d,%r13d
         :
         :	        /*
         :	         * Make arrays of the ECs used by the mergeclauses (dropping any
         :	         * duplicates) and their "popularity" scores.
         :	         */
         :	        ecs = (EquivalenceClass **) palloc(nClauses * sizeof(EquivalenceClass *));
    0.00 :	  611f32:       48 8d 3c dd 00 00 00    lea    0x0(,%rbx,8),%rdi
    0.00 :	  611f39:       00 
         :	        scores = (int *) palloc(nClauses * sizeof(int));
    0.00 :	  611f3a:       48 c1 e3 02             shl    $0x2,%rbx
         :
         :	        /*
         :	         * Make arrays of the ECs used by the mergeclauses (dropping any
         :	         * duplicates) and their "popularity" scores.
         :	         */
         :	        ecs = (EquivalenceClass **) palloc(nClauses * sizeof(EquivalenceClass *));
    0.00 :	  611f3e:       e8 0d 6e 18 00          callq  798d50 <palloc>
         :	        scores = (int *) palloc(nClauses * sizeof(int));
    0.00 :	  611f43:       48 89 df                mov    %rbx,%rdi
         :
         :	        /*
         :	         * Make arrays of the ECs used by the mergeclauses (dropping any
         :	         * duplicates) and their "popularity" scores.
         :	         */
         :	        ecs = (EquivalenceClass **) palloc(nClauses * sizeof(EquivalenceClass *));
    0.00 :	  611f46:       48 89 45 c8             mov    %rax,-0x38(%rbp)
         :	        scores = (int *) palloc(nClauses * sizeof(int));
    0.00 :	  611f4a:       e8 01 6e 18 00          callq  798d50 <palloc>
    0.00 :	  611f4f:       48 89 45 d0             mov    %rax,-0x30(%rbp)
         :	#endif   /* PG_USE_INLINE */
         :	#if defined(PG_USE_INLINE) || defined(PG_LIST_INCLUDE_DEFINITIONS)
         :	STATIC_IF_INLINE ListCell *
         :	list_head(const List *l)
         :	{
         :	        return l ? l->head : NULL;
    0.00 :	  611f53:       4d 8b 7c 24 08          mov    0x8(%r12),%r15
         :	        necs = 0;
         :
         :	        foreach(lc, mergeclauses)
    0.00 :	  611f58:       4d 85 ff                test   %r15,%r15
    0.00 :	  611f5b:       0f 84 11 01 00 00       je     612072 <select_outer_pathkeys_for_merge+0x182>
    0.00 :	  611f61:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        {
         :	                RestrictInfo *rinfo = (RestrictInfo *) lfirst(lc);
    0.00 :	  611f68:       49 8b 17                mov    (%r15),%rdx
         :	        /* ... with pointers already set */
         :	        Assert(restrictinfo->left_ec != NULL);
         :	        Assert(restrictinfo->right_ec != NULL);
         :
         :	        /* Chase up to the top as needed */
         :	        while (restrictinfo->left_ec->ec_merged)
    0.00 :	  611f6b:       48 8b 82 80 00 00 00    mov    0x80(%rdx),%rax
    0.00 :	  611f72:       48 8b 40 40             mov    0x40(%rax),%rax
    0.00 :	  611f76:       48 85 c0                test   %rax,%rax
    0.00 :	  611f79:       74 15                   je     611f90 <select_outer_pathkeys_for_merge+0xa0>
    0.00 :	  611f7b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                restrictinfo->left_ec = restrictinfo->left_ec->ec_merged;
    0.00 :	  611f80:       48 89 82 80 00 00 00    mov    %rax,0x80(%rdx)
         :	        /* ... with pointers already set */
         :	        Assert(restrictinfo->left_ec != NULL);
         :	        Assert(restrictinfo->right_ec != NULL);
         :
         :	        /* Chase up to the top as needed */
         :	        while (restrictinfo->left_ec->ec_merged)
    0.00 :	  611f87:       48 8b 40 40             mov    0x40(%rax),%rax
    0.00 :	  611f8b:       48 85 c0                test   %rax,%rax
    0.00 :	  611f8e:       75 f0                   jne    611f80 <select_outer_pathkeys_for_merge+0x90>
         :	                restrictinfo->left_ec = restrictinfo->left_ec->ec_merged;
         :	        while (restrictinfo->right_ec->ec_merged)
    0.00 :	  611f90:       48 8b 9a 88 00 00 00    mov    0x88(%rdx),%rbx
    0.00 :	  611f97:       48 8b 43 40             mov    0x40(%rbx),%rax
    0.00 :	  611f9b:       48 85 c0                test   %rax,%rax
    0.00 :	  611f9e:       74 13                   je     611fb3 <select_outer_pathkeys_for_merge+0xc3>
    0.00 :	  611fa0:       48 89 c3                mov    %rax,%rbx
         :	                restrictinfo->right_ec = restrictinfo->right_ec->ec_merged;
    0.00 :	  611fa3:       48 89 82 88 00 00 00    mov    %rax,0x88(%rdx)
         :	        Assert(restrictinfo->right_ec != NULL);
         :
         :	        /* Chase up to the top as needed */
         :	        while (restrictinfo->left_ec->ec_merged)
         :	                restrictinfo->left_ec = restrictinfo->left_ec->ec_merged;
         :	        while (restrictinfo->right_ec->ec_merged)
    0.00 :	  611faa:       48 8b 40 40             mov    0x40(%rax),%rax
    0.00 :	  611fae:       48 85 c0                test   %rax,%rax
    0.00 :	  611fb1:       75 ed                   jne    611fa0 <select_outer_pathkeys_for_merge+0xb0>
         :	                ListCell   *lc2;
         :
         :	                /* get the outer eclass */
         :	                update_mergeclause_eclasses(root, rinfo);
         :
         :	                if (rinfo->outer_is_left)
    0.00 :	  611fb3:       80 ba a8 00 00 00 00    cmpb   $0x0,0xa8(%rdx)
    0.00 :	  611fba:       74 07                   je     611fc3 <select_outer_pathkeys_for_merge+0xd3>
         :	                        oeclass = rinfo->left_ec;
    0.00 :	  611fbc:       48 8b 9a 80 00 00 00    mov    0x80(%rdx),%rbx
         :	                else
         :	                        oeclass = rinfo->right_ec;
         :
         :	                /* reject duplicates */
         :	                for (j = 0; j < necs; j++)
    0.00 :	  611fc3:       45 85 ed                test   %r13d,%r13d
    0.00 :	  611fc6:       7e 2d                   jle    611ff5 <select_outer_pathkeys_for_merge+0x105>
         :	                {
         :	                        if (ecs[j] == oeclass)
    0.00 :	  611fc8:       48 8b 4d c8             mov    -0x38(%rbp),%rcx
    0.00 :	  611fcc:       31 d2                   xor    %edx,%edx
    0.00 :	  611fce:       48 39 19                cmp    %rbx,(%rcx)
    0.00 :	  611fd1:       75 1a                   jne    611fed <select_outer_pathkeys_for_merge+0xfd>
    0.00 :	  611fd3:       e9 8d 00 00 00          jmpq   612065 <select_outer_pathkeys_for_merge+0x175>
    0.00 :	  611fd8:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :	  611fdf:       00 
    0.00 :	  611fe0:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  611fe4:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  611fe8:       48 39 d8                cmp    %rbx,%rax
    0.00 :	  611feb:       74 78                   je     612065 <select_outer_pathkeys_for_merge+0x175>
         :	                        oeclass = rinfo->left_ec;
         :	                else
         :	                        oeclass = rinfo->right_ec;
         :
         :	                /* reject duplicates */
         :	                for (j = 0; j < necs; j++)
    0.00 :	  611fed:       83 c2 01                add    $0x1,%edx
    0.00 :	  611ff0:       44 39 ea                cmp    %r13d,%edx
    0.00 :	  611ff3:       7c eb                   jl     611fe0 <select_outer_pathkeys_for_merge+0xf0>
         :	                if (j < necs)
         :	                        continue;
         :
         :	                /* compute score */
         :	                score = 0;
         :	                foreach(lc2, oeclass->ec_members)
    0.00 :	  611ff5:       48 8b 43 18             mov    0x18(%rbx),%rax
    0.00 :	  611ff9:       48 85 c0                test   %rax,%rax
    0.00 :	  611ffc:       0f 84 82 01 00 00       je     612184 <select_outer_pathkeys_for_merge+0x294>
    0.00 :	  612002:       4c 8b 60 08             mov    0x8(%rax),%r12
    0.00 :	  612006:       4d 85 e4                test   %r12,%r12
    0.00 :	  612009:       0f 84 75 01 00 00       je     612184 <select_outer_pathkeys_for_merge+0x294>
    0.00 :	  61200f:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  612012:       eb 0e                   jmp    612022 <select_outer_pathkeys_for_merge+0x132>
    0.00 :	  612014:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  612018:       4d 8b 64 24 08          mov    0x8(%r12),%r12
    0.00 :	  61201d:       4d 85 e4                test   %r12,%r12
    0.00 :	  612020:       74 2c                   je     61204e <select_outer_pathkeys_for_merge+0x15e>
         :	                {
         :	                        EquivalenceMember *em = (EquivalenceMember *) lfirst(lc2);
    0.00 :	  612022:       49 8b 04 24             mov    (%r12),%rax
         :
         :	                        /* Potential future join partner? */
         :	                        if (!em->em_is_const && !em->em_is_child &&
    0.00 :	  612026:       66 83 78 20 00          cmpw   $0x0,0x20(%rax)
    0.00 :	  61202b:       75 eb                   jne    612018 <select_outer_pathkeys_for_merge+0x128>
    0.00 :	  61202d:       48 8b 55 b8             mov    -0x48(%rbp),%rdx
    0.00 :	  612031:       48 8b 78 10             mov    0x10(%rax),%rdi
    0.00 :	  612035:       48 8b 72 08             mov    0x8(%rdx),%rsi
    0.00 :	  612039:       e8 42 09 fd ff          callq  5e2980 <bms_overlap>
         :	                if (j < necs)
         :	                        continue;
         :
         :	                /* compute score */
         :	                score = 0;
         :	                foreach(lc2, oeclass->ec_members)
    0.00 :	  61203e:       4d 8b 64 24 08          mov    0x8(%r12),%r12
         :	                        EquivalenceMember *em = (EquivalenceMember *) lfirst(lc2);
         :
         :	                        /* Potential future join partner? */
         :	                        if (!em->em_is_const && !em->em_is_child &&
         :	                                !bms_overlap(em->em_relids, joinrel->relids))
         :	                                score++;
    0.00 :	  612043:       3c 01                   cmp    $0x1,%al
    0.00 :	  612045:       41 83 d6 00             adc    $0x0,%r14d
         :	                if (j < necs)
         :	                        continue;
         :
         :	                /* compute score */
         :	                score = 0;
         :	                foreach(lc2, oeclass->ec_members)
    0.00 :	  612049:       4d 85 e4                test   %r12,%r12
    0.00 :	  61204c:       75 d4                   jne    612022 <select_outer_pathkeys_for_merge+0x132>
         :	                        if (!em->em_is_const && !em->em_is_child &&
         :	                                !bms_overlap(em->em_relids, joinrel->relids))
         :	                                score++;
         :	                }
         :
         :	                ecs[necs] = oeclass;
    0.00 :	  61204e:       48 8b 75 c8             mov    -0x38(%rbp),%rsi
    0.00 :	  612052:       49 63 c5                movslq %r13d,%rax
         :	                scores[necs] = score;
         :	                necs++;
    0.00 :	  612055:       41 83 c5 01             add    $0x1,%r13d
         :	                        if (!em->em_is_const && !em->em_is_child &&
         :	                                !bms_overlap(em->em_relids, joinrel->relids))
         :	                                score++;
         :	                }
         :
         :	                ecs[necs] = oeclass;
    0.00 :	  612059:       48 89 1c c6             mov    %rbx,(%rsi,%rax,8)
         :	                scores[necs] = score;
    0.00 :	  61205d:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  612061:       44 89 34 82             mov    %r14d,(%rdx,%rax,4)
         :	         */
         :	        ecs = (EquivalenceClass **) palloc(nClauses * sizeof(EquivalenceClass *));
         :	        scores = (int *) palloc(nClauses * sizeof(int));
         :	        necs = 0;
         :
         :	        foreach(lc, mergeclauses)
    0.00 :	  612065:       4d 8b 7f 08             mov    0x8(%r15),%r15
    0.00 :	  612069:       4d 85 ff                test   %r15,%r15
    0.00 :	  61206c:       0f 85 f6 fe ff ff       jne    611f68 <select_outer_pathkeys_for_merge+0x78>
         :	        /*
         :	         * Find out if we have all the ECs mentioned in query_pathkeys; if so we
         :	         * can generate a sort order that's also useful for final output. There is
         :	         * no percentage in a partial match, though, so we have to have 'em all.
         :	         */
         :	        if (root->query_pathkeys)
    0.00 :	  612072:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
    0.00 :	  612076:       48 8b be e0 00 00 00    mov    0xe0(%rsi),%rdi
    0.00 :	  61207d:       48 85 ff                test   %rdi,%rdi
    0.00 :	  612080:       74 47                   je     6120c9 <select_outer_pathkeys_for_merge+0x1d9>
    0.00 :	  612082:       4c 8b 47 08             mov    0x8(%rdi),%r8
         :	        {
         :	                foreach(lc, root->query_pathkeys)
    0.00 :	  612086:       4d 85 c0                test   %r8,%r8
    0.00 :	  612089:       0f 84 fd 00 00 00       je     61218c <select_outer_pathkeys_for_merge+0x29c>
         :	                {
         :	                        PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                        EquivalenceClass *query_ec = query_pathkey->pk_eclass;
    0.00 :	  61208f:       49 8b 00                mov    (%r8),%rax
         :
         :	                        for (j = 0; j < necs; j++)
    0.00 :	  612092:       45 85 ed                test   %r13d,%r13d
         :	        if (root->query_pathkeys)
         :	        {
         :	                foreach(lc, root->query_pathkeys)
         :	                {
         :	                        PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                        EquivalenceClass *query_ec = query_pathkey->pk_eclass;
    0.00 :	  612095:       48 8b 70 08             mov    0x8(%rax),%rsi
         :
         :	                        for (j = 0; j < necs; j++)
    0.00 :	  612099:       7e 2e                   jle    6120c9 <select_outer_pathkeys_for_merge+0x1d9>
         :	                        {
         :	                                if (ecs[j] == query_ec)
    0.00 :	  61209b:       48 8b 4d c8             mov    -0x38(%rbp),%rcx
    0.00 :	  61209f:       31 d2                   xor    %edx,%edx
    0.00 :	  6120a1:       48 39 31                cmp    %rsi,(%rcx)
    0.00 :	  6120a4:       75 1b                   jne    6120c1 <select_outer_pathkeys_for_merge+0x1d1>
    0.00 :	  6120a6:       e9 ad 00 00 00          jmpq   612158 <select_outer_pathkeys_for_merge+0x268>
    0.00 :	  6120ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6120b0:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  6120b4:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  6120b8:       48 39 f0                cmp    %rsi,%rax
    0.00 :	  6120bb:       0f 84 97 00 00 00       je     612158 <select_outer_pathkeys_for_merge+0x268>
         :	                foreach(lc, root->query_pathkeys)
         :	                {
         :	                        PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                        EquivalenceClass *query_ec = query_pathkey->pk_eclass;
         :
         :	                        for (j = 0; j < necs; j++)
    0.00 :	  6120c1:       83 c2 01                add    $0x1,%edx
    0.00 :	  6120c4:       44 39 ea                cmp    %r13d,%edx
    0.00 :	  6120c7:       7c e7                   jl     6120b0 <select_outer_pathkeys_for_merge+0x1c0>
         :	         * can generate a sort order that's also useful for final output. There is
         :	         * no percentage in a partial match, though, so we have to have 'em all.
         :	         */
         :	        if (root->query_pathkeys)
         :	        {
         :	                foreach(lc, root->query_pathkeys)
    0.00 :	  6120c9:       31 db                   xor    %ebx,%ebx
    0.00 :	  6120cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	                int                     best_score;
         :	                EquivalenceClass *ec;
         :	                PathKey    *pathkey;
         :
         :	                best_j = 0;
         :	                best_score = scores[0];
    0.00 :	  6120d0:       48 8b 75 d0             mov    -0x30(%rbp),%rsi
         :	                for (j = 1; j < necs; j++)
    0.00 :	  6120d4:       31 c0                   xor    %eax,%eax
    0.00 :	  6120d6:       41 83 fd 01             cmp    $0x1,%r13d
         :	                int                     best_score;
         :	                EquivalenceClass *ec;
         :	                PathKey    *pathkey;
         :
         :	                best_j = 0;
         :	                best_score = scores[0];
    0.00 :	  6120da:       8b 3e                   mov    (%rsi),%edi
         :	                for (j = 1; j < necs; j++)
    0.00 :	  6120dc:       7e 29                   jle    612107 <select_outer_pathkeys_for_merge+0x217>
    0.00 :	  6120de:       48 8b 75 d0             mov    -0x30(%rbp),%rsi
    0.00 :	  6120e2:       31 c0                   xor    %eax,%eax
    0.00 :	  6120e4:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  6120e9:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                {
         :	                        if (scores[j] > best_score)
    0.00 :	  6120f0:       8b 4e 04                mov    0x4(%rsi),%ecx
    0.00 :	  6120f3:       39 f9                   cmp    %edi,%ecx
    0.00 :	  6120f5:       7e 04                   jle    6120fb <select_outer_pathkeys_for_merge+0x20b>
    0.00 :	  6120f7:       89 d0                   mov    %edx,%eax
    0.00 :	  6120f9:       89 cf                   mov    %ecx,%edi
         :	                EquivalenceClass *ec;
         :	                PathKey    *pathkey;
         :
         :	                best_j = 0;
         :	                best_score = scores[0];
         :	                for (j = 1; j < necs; j++)
    0.00 :	  6120fb:       83 c2 01                add    $0x1,%edx
    0.00 :	  6120fe:       48 83 c6 04             add    $0x4,%rsi
    0.00 :	  612102:       44 39 ea                cmp    %r13d,%edx
    0.00 :	  612105:       7c e9                   jl     6120f0 <select_outer_pathkeys_for_merge+0x200>
         :	                        {
         :	                                best_j = j;
         :	                                best_score = scores[j];
         :	                        }
         :	                }
         :	                if (best_score < 0)
    0.00 :	  612107:       85 ff                   test   %edi,%edi
    0.00 :	  612109:       78 62                   js     61216d <select_outer_pathkeys_for_merge+0x27d>
         :	                        break;                          /* all done */
         :	                ec = ecs[best_j];
    0.00 :	  61210b:       48 8b 55 c8             mov    -0x38(%rbp),%rdx
    0.00 :	  61210f:       48 98                   cltq   
    0.00 :	  612111:       48 8b 34 c2             mov    (%rdx,%rax,8),%rsi
         :	                scores[best_j] = -1;
    0.00 :	  612115:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  612119:       c7 04 82 ff ff ff ff    movl   $0xffffffff,(%rdx,%rax,4)
         :	                pathkey = make_canonical_pathkey(root,
    0.00 :	  612120:       48 8b 46 08             mov    0x8(%rsi),%rax
    0.00 :	  612124:       31 d2                   xor    %edx,%edx
    0.00 :	  612126:       48 85 c0                test   %rax,%rax
    0.00 :	  612129:       74 04                   je     61212f <select_outer_pathkeys_for_merge+0x23f>
    0.00 :	  61212b:       48 8b 50 08             mov    0x8(%rax),%rdx
    0.00 :	  61212f:       8b 12                   mov    (%rdx),%edx
 /home/Computational/mark/src/postgres-andres/src/backend/optimizer/path/pathkeys.c:1216
  100.00 :	  612131:       48 8b 7d c0             mov    -0x40(%rbp),%rdi
    0.00 :	  612135:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  612138:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :	  61213d:       e8 de fa ff ff          callq  611c20 <make_canonical_pathkey>
         :	                                                                                 linitial_oid(ec->ec_opfamilies),
         :	                                                                                 BTLessStrategyNumber,
         :	                                                                                 false);
         :	                /* can't be redundant because no duplicate ECs */
         :	                Assert(!pathkey_is_redundant(pathkey, pathkeys));
         :	                pathkeys = lappend(pathkeys, pathkey);
    0.00 :	  612142:       48 89 df                mov    %rbx,%rdi
         :	                }
         :	                if (best_score < 0)
         :	                        break;                          /* all done */
         :	                ec = ecs[best_j];
         :	                scores[best_j] = -1;
         :	                pathkey = make_canonical_pathkey(root,
    0.00 :	  612145:       48 89 c6                mov    %rax,%rsi
         :	                                                                                 linitial_oid(ec->ec_opfamilies),
         :	                                                                                 BTLessStrategyNumber,
         :	                                                                                 false);
         :	                /* can't be redundant because no duplicate ECs */
         :	                Assert(!pathkey_is_redundant(pathkey, pathkeys));
         :	                pathkeys = lappend(pathkeys, pathkey);
    0.00 :	  612148:       e8 33 fd fc ff          callq  5e1e80 <lappend>
    0.00 :	  61214d:       48 89 c3                mov    %rax,%rbx
         :	        }
    0.00 :	  612150:       e9 7b ff ff ff          jmpq   6120d0 <select_outer_pathkeys_for_merge+0x1e0>
    0.00 :	  612155:       0f 1f 00                nopl   (%rax)
         :	         * can generate a sort order that's also useful for final output. There is
         :	         * no percentage in a partial match, though, so we have to have 'em all.
         :	         */
         :	        if (root->query_pathkeys)
         :	        {
         :	                foreach(lc, root->query_pathkeys)
    0.00 :	  612158:       4d 8b 40 08             mov    0x8(%r8),%r8
    0.00 :	  61215c:       4d 85 c0                test   %r8,%r8
    0.00 :	  61215f:       74 2b                   je     61218c <select_outer_pathkeys_for_merge+0x29c>
         :	                {
         :	                        PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                        EquivalenceClass *query_ec = query_pathkey->pk_eclass;
    0.00 :	  612161:       49 8b 00                mov    (%r8),%rax
    0.00 :	  612164:       48 8b 70 08             mov    0x8(%rax),%rsi
    0.00 :	  612168:       e9 2e ff ff ff          jmpq   61209b <select_outer_pathkeys_for_merge+0x1ab>
         :	                /* can't be redundant because no duplicate ECs */
         :	                Assert(!pathkey_is_redundant(pathkey, pathkeys));
         :	                pathkeys = lappend(pathkeys, pathkey);
         :	        }
         :
         :	        pfree(ecs);
    0.00 :	  61216d:       48 8b 7d c8             mov    -0x38(%rbp),%rdi
    0.00 :	  612171:       e8 0a 6a 18 00          callq  798b80 <pfree>
         :	        pfree(scores);
    0.00 :	  612176:       48 8b 7d d0             mov    -0x30(%rbp),%rdi
    0.00 :	  61217a:       e8 01 6a 18 00          callq  798b80 <pfree>
         :
         :	        return pathkeys;
         :	}
    0.00 :	  61217f:       e9 96 fd ff ff          jmpq   611f1a <select_outer_pathkeys_for_merge+0x2a>
         :	                if (j < necs)
         :	                        continue;
         :
         :	                /* compute score */
         :	                score = 0;
         :	                foreach(lc2, oeclass->ec_members)
    0.00 :	  612184:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  612187:       e9 c2 fe ff ff          jmpq   61204e <select_outer_pathkeys_for_merge+0x15e>
    0.00 :	  61218c:       0f 1f 40 00             nopl   0x0(%rax)
         :	                }
         :	                /* if we got to the end of the list, we have them all */
         :	                if (lc == NULL)
         :	                {
         :	                        /* copy query_pathkeys as starting point for our output */
         :	                        pathkeys = list_copy(root->query_pathkeys);
    0.00 :	  612190:       e8 6b f5 fc ff          callq  5e1700 <list_copy>
         :	                        /* mark their ECs as already-emitted */
         :	                        foreach(lc, root->query_pathkeys)
    0.00 :	  612195:       48 8b 75 c0             mov    -0x40(%rbp),%rsi
         :	                }
         :	                /* if we got to the end of the list, we have them all */
         :	                if (lc == NULL)
         :	                {
         :	                        /* copy query_pathkeys as starting point for our output */
         :	                        pathkeys = list_copy(root->query_pathkeys);
    0.00 :	  612199:       48 89 c3                mov    %rax,%rbx
         :	                        /* mark their ECs as already-emitted */
         :	                        foreach(lc, root->query_pathkeys)
    0.00 :	  61219c:       48 8b 86 e0 00 00 00    mov    0xe0(%rsi),%rax
    0.00 :	  6121a3:       48 85 c0                test   %rax,%rax
    0.00 :	  6121a6:       0f 84 24 ff ff ff       je     6120d0 <select_outer_pathkeys_for_merge+0x1e0>
    0.00 :	  6121ac:       4c 8b 40 08             mov    0x8(%rax),%r8
    0.00 :	  6121b0:       4d 85 c0                test   %r8,%r8
    0.00 :	  6121b3:       0f 84 17 ff ff ff       je     6120d0 <select_outer_pathkeys_for_merge+0x1e0>
         :	                        {
         :	                                PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                                EquivalenceClass *query_ec = query_pathkey->pk_eclass;
    0.00 :	  6121b9:       49 8b 00                mov    (%r8),%rax
         :
         :	                                for (j = 0; j < necs; j++)
    0.00 :	  6121bc:       45 85 ed                test   %r13d,%r13d
         :	                        pathkeys = list_copy(root->query_pathkeys);
         :	                        /* mark their ECs as already-emitted */
         :	                        foreach(lc, root->query_pathkeys)
         :	                        {
         :	                                PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                                EquivalenceClass *query_ec = query_pathkey->pk_eclass;
    0.00 :	  6121bf:       48 8b 78 08             mov    0x8(%rax),%rdi
         :
         :	                                for (j = 0; j < necs; j++)
    0.00 :	  6121c3:       7e 2b                   jle    6121f0 <select_outer_pathkeys_for_merge+0x300>
         :	                                {
         :	                                        if (ecs[j] == query_ec)
         :	                                        {
         :	                                                scores[j] = -1;
         :	                                                break;
    0.00 :	  6121c5:       48 8b 4d c8             mov    -0x38(%rbp),%rcx
    0.00 :	  6121c9:       31 d2                   xor    %edx,%edx
         :	                                PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                                EquivalenceClass *query_ec = query_pathkey->pk_eclass;
         :
         :	                                for (j = 0; j < necs; j++)
         :	                                {
         :	                                        if (ecs[j] == query_ec)
    0.00 :	  6121cb:       31 c0                   xor    %eax,%eax
    0.00 :	  6121cd:       48 39 39                cmp    %rdi,(%rcx)
    0.00 :	  6121d0:       75 16                   jne    6121e8 <select_outer_pathkeys_for_merge+0x2f8>
    0.00 :	  6121d2:       eb 34                   jmp    612208 <select_outer_pathkeys_for_merge+0x318>
    0.00 :	  6121d4:       0f 1f 40 00             nopl   0x0(%rax)
    0.00 :	  6121d8:       48 8b 41 08             mov    0x8(%rcx),%rax
    0.00 :	  6121dc:       48 83 c1 08             add    $0x8,%rcx
    0.00 :	  6121e0:       48 63 f2                movslq %edx,%rsi
    0.00 :	  6121e3:       48 39 f8                cmp    %rdi,%rax
    0.00 :	  6121e6:       74 18                   je     612200 <select_outer_pathkeys_for_merge+0x310>
         :	                        foreach(lc, root->query_pathkeys)
         :	                        {
         :	                                PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                                EquivalenceClass *query_ec = query_pathkey->pk_eclass;
         :
         :	                                for (j = 0; j < necs; j++)
    0.00 :	  6121e8:       83 c2 01                add    $0x1,%edx
    0.00 :	  6121eb:       44 39 ea                cmp    %r13d,%edx
    0.00 :	  6121ee:       7c e8                   jl     6121d8 <select_outer_pathkeys_for_merge+0x2e8>
         :	                if (lc == NULL)
         :	                {
         :	                        /* copy query_pathkeys as starting point for our output */
         :	                        pathkeys = list_copy(root->query_pathkeys);
         :	                        /* mark their ECs as already-emitted */
         :	                        foreach(lc, root->query_pathkeys)
    0.00 :	  6121f0:       4d 8b 40 08             mov    0x8(%r8),%r8
    0.00 :	  6121f4:       4d 85 c0                test   %r8,%r8
    0.00 :	  6121f7:       75 c0                   jne    6121b9 <select_outer_pathkeys_for_merge+0x2c9>
    0.00 :	  6121f9:       e9 d2 fe ff ff          jmpq   6120d0 <select_outer_pathkeys_for_merge+0x1e0>
    0.00 :	  6121fe:       66 90                   xchg   %ax,%ax
         :	                                PathKey    *query_pathkey = (PathKey *) lfirst(lc);
         :	                                EquivalenceClass *query_ec = query_pathkey->pk_eclass;
         :
         :	                                for (j = 0; j < necs; j++)
         :	                                {
         :	                                        if (ecs[j] == query_ec)
    0.00 :	  612200:       48 8d 04 b5 00 00 00    lea    0x0(,%rsi,4),%rax
    0.00 :	  612207:       00 
         :	                                        {
         :	                                                scores[j] = -1;
    0.00 :	  612208:       48 8b 55 d0             mov    -0x30(%rbp),%rdx
    0.00 :	  61220c:       c7 04 02 ff ff ff ff    movl   $0xffffffff,(%rdx,%rax,1)
         :	                if (lc == NULL)
         :	                {
         :	                        /* copy query_pathkeys as starting point for our output */
         :	                        pathkeys = list_copy(root->query_pathkeys);
         :	                        /* mark their ECs as already-emitted */
         :	                        foreach(lc, root->query_pathkeys)
    0.00 :	  612213:       4d 8b 40 08             mov    0x8(%r8),%r8
    0.00 :	  612217:       4d 85 c0                test   %r8,%r8
    0.00 :	  61221a:       75 9d                   jne    6121b9 <select_outer_pathkeys_for_merge+0x2c9>
    0.00 :	  61221c:       e9 af fe ff ff          jmpq   6120d0 <select_outer_pathkeys_for_merge+0x1e0>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/port/pg_latch.c:481
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000639150 <WaitLatchOrSocket>:
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  639150:       55                      push   %rbp
         :	        int                     hifd;
         :	#endif
         :
         :	        /* Ignore WL_SOCKET_* events if no valid socket is given */
         :	        if (sock == PGINVALID_SOCKET)
         :	                wakeEvents &= ~(WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE);
    0.00 :	  639151:       89 f0                   mov    %esi,%eax
    0.00 :	  639153:       83 e0 f9                and    $0xfffffff9,%eax
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  639156:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  639159:       41 57                   push   %r15
    0.00 :	  63915b:       49 89 cf                mov    %rcx,%r15
    0.00 :	  63915e:       41 56                   push   %r14
    0.00 :	  639160:       41 55                   push   %r13
    0.00 :	  639162:       41 54                   push   %r12
    0.00 :	  639164:       53                      push   %rbx
    0.00 :	  639165:       89 f3                   mov    %esi,%ebx
    0.00 :	  639167:       48 81 ec 88 00 00 00    sub    $0x88,%rsp
    0.00 :	  63916e:       89 95 6c ff ff ff       mov    %edx,-0x94(%rbp)
         :	        int                     hifd;
         :	#endif
         :
         :	        /* Ignore WL_SOCKET_* events if no valid socket is given */
         :	        if (sock == PGINVALID_SOCKET)
         :	                wakeEvents &= ~(WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE);
    0.00 :	  639174:       83 c2 01                add    $0x1,%edx
    0.00 :	  639177:       0f 44 d8                cmove  %eax,%ebx
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  63917a:       48 89 bd 70 ff ff ff    mov    %rdi,-0x90(%rbp)
         :
         :	        Assert(wakeEvents != 0);        /* must have at least one wake event */
         :	        /* Cannot specify WL_SOCKET_WRITEABLE without WL_SOCKET_READABLE */
         :	        Assert((wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE)) != WL_SOCKET_WRITEABLE);
         :
         :	        if ((wakeEvents & WL_LATCH_SET) && latch->owner_pid != MyProcPid)
    0.00 :	  639181:       89 d8                   mov    %ebx,%eax
    0.00 :	  639183:       83 e0 01                and    $0x1,%eax
    0.00 :	  639186:       89 85 78 ff ff ff       mov    %eax,-0x88(%rbp)
    0.00 :	  63918c:       74 0f                   je     63919d <WaitLatchOrSocket+0x4d>
    0.00 :	  63918e:       8b 47 08                mov    0x8(%rdi),%eax
    0.00 :	  639191:       3b 05 4d 6b 58 00       cmp    0x586b4d(%rip),%eax        # bbfce4 <MyProcPid>
    0.00 :	  639197:       0f 85 6b 03 00 00       jne    639508 <WaitLatchOrSocket+0x3b8>
         :	         * Initialize timeout if requested.  We must record the current time so
         :	         * that we can determine the remaining timeout if the poll() or select()
         :	         * is interrupted.  (On some platforms, select() will update the contents
         :	         * of "tv" for us, but unfortunately we can't rely on that.)
         :	         */
         :	        if (wakeEvents & WL_TIMEOUT)
    0.00 :	  63919d:       89 da                   mov    %ebx,%edx
    0.00 :	  63919f:       83 e2 08                and    $0x8,%edx
    0.00 :	  6391a2:       89 95 7c ff ff ff       mov    %edx,-0x84(%rbp)
    0.00 :	  6391a8:       0f 85 e2 02 00 00       jne    639490 <WaitLatchOrSocket+0x340>
    0.00 :	  6391ae:       49 c7 c6 ff ff ff ff    mov    $0xffffffffffffffff,%r14
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391b5:       89 d8                   mov    %ebx,%eax
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391b7:       89 da                   mov    %ebx,%edx
         :	#ifndef HAVE_POLL
         :	                tvp = NULL;
         :	#endif
         :	        }
         :
         :	        waiting = true;
    0.00 :	  6391b9:       c7 05 b5 28 54 00 01    movl   $0x1,0x5428b5(%rip)        # b7ba78 <waiting>
    0.00 :	  6391c0:       00 00 00 
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391c3:       83 e0 06                and    $0x6,%eax
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391c6:       83 e2 10                and    $0x10,%edx
         :	#ifndef HAVE_POLL
         :	                tvp = NULL;
         :	#endif
         :	        }
         :
         :	        waiting = true;
    0.00 :	  6391c9:       45 31 ed                xor    %r13d,%r13d
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  6391cc:       89 85 68 ff ff ff       mov    %eax,-0x98(%rbp)
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391d2:       89 d8                   mov    %ebx,%eax
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  6391d4:       83 e3 04                and    $0x4,%ebx
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391d7:       83 e0 02                and    $0x2,%eax
    0.00 :	  6391da:       4c 8d 65 a0             lea    -0x60(%rbp),%r12
         :	                pfds[nfds].fd = selfpipe_readfd;
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6391de:       89 95 64 ff ff ff       mov    %edx,-0x9c(%rbp)
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6391e4:       89 85 60 ff ff ff       mov    %eax,-0xa0(%rbp)
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  6391ea:       89 9d 5c ff ff ff       mov    %ebx,-0xa4(%rbp)
    0.00 :	  6391f0:       eb 11                   jmp    639203 <WaitLatchOrSocket+0xb3>
    0.00 :	  6391f2:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)
         :	                        {
         :	                                waiting = false;
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
         :	                        }
         :	                }
         :	                else if (rc == 0)
    0.00 :	  6391f8:       0f 84 54 02 00 00       je     639452 <WaitLatchOrSocket+0x302>
         :	                {
         :	                        waiting = false;
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
         :	                }
         :	                else if (rc < sizeof(buf))
    0.00 :	  6391fe:       83 f8 0f                cmp    $0xf,%eax
    0.00 :	  639201:       76 5d                   jbe    639260 <WaitLatchOrSocket+0x110>
         :	        char            buf[16];
         :	        int                     rc;
         :
         :	        for (;;)
         :	        {
         :	                rc = read(selfpipe_readfd, buf, sizeof(buf));
    0.00 :	  639203:       8b 3d bf f3 52 00       mov    0x52f3bf(%rip),%edi        # b685c8 <selfpipe_readfd>
    0.00 :	  639209:       ba 10 00 00 00          mov    $0x10,%edx
    0.00 :	  63920e:       4c 89 e6                mov    %r12,%rsi
    0.00 :	  639211:       e8 fa 03 e3 ff          callq  469610 <read@plt>
         :	                if (rc < 0)
    0.00 :	  639216:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  639219:       7d dd                   jge    6391f8 <WaitLatchOrSocket+0xa8>
         :	                {
         :	                        if (errno == EAGAIN || errno == EWOULDBLOCK)
    0.00 :	  63921b:       e8 a0 0a e3 ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  639220:       8b 00                   mov    (%rax),%eax
    0.00 :	  639222:       83 f8 0b                cmp    $0xb,%eax
    0.00 :	  639225:       74 39                   je     639260 <WaitLatchOrSocket+0x110>
         :	                                break;                  /* the pipe is empty */
         :	                        else if (errno == EINTR)
    0.00 :	  639227:       83 f8 04                cmp    $0x4,%eax
    0.00 :	  63922a:       74 d7                   je     639203 <WaitLatchOrSocket+0xb3>
         :	                                continue;               /* retry */
         :	                        else
         :	                        {
         :	                                waiting = false;
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
    0.00 :	  63922c:       ba 12 de 89 00          mov    $0x89de12,%edx
    0.00 :	  639231:       be 87 02 00 00          mov    $0x287,%esi
    0.00 :	  639236:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
         :	                                break;                  /* the pipe is empty */
         :	                        else if (errno == EINTR)
         :	                                continue;               /* retry */
         :	                        else
         :	                        {
         :	                                waiting = false;
    0.00 :	  63923b:       c7 05 33 28 54 00 00    movl   $0x0,0x542833(%rip)        # b7ba78 <waiting>
    0.00 :	  639242:       00 00 00 
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
    0.00 :	  639245:       e8 d6 21 14 00          callq  77b420 <elog_start>
    0.00 :	  63924a:       be 80 dd 89 00          mov    $0x89dd80,%esi
    0.00 :	  63924f:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  639254:       31 c0                   xor    %eax,%eax
    0.00 :	  639256:       e8 d5 1f 14 00          callq  77b230 <elog_finish>
    0.00 :	  63925b:       e8 70 02 e3 ff          callq  4694d0 <abort@plt>
         :	                 * with weak memory ordering, so that we cannot miss seeing is_set if
         :	                 * the signal byte is already in the pipe when we drain it.
         :	                 */
         :	                drainSelfPipe();
         :
         :	                if ((wakeEvents & WL_LATCH_SET) && latch->is_set)
    0.00 :	  639260:       44 8b 95 78 ff ff ff    mov    -0x88(%rbp),%r10d
    0.00 :	  639267:       45 85 d2                test   %r10d,%r10d
    0.00 :	  63926a:       74 11                   je     63927d <WaitLatchOrSocket+0x12d>
    0.00 :	  63926c:       48 8b 95 70 ff ff ff    mov    -0x90(%rbp),%rdx
    0.00 :	  639273:       8b 02                   mov    (%rdx),%eax
    0.00 :	  639275:       85 c0                   test   %eax,%eax
    0.00 :	  639277:       0f 85 b5 02 00 00       jne    639532 <WaitLatchOrSocket+0x3e2>
         :	                }
         :
         :	                /* Must wait ... we use poll(2) if available, otherwise select(2) */
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
    0.00 :	  63927d:       44 8b 8d 68 ff ff ff    mov    -0x98(%rbp),%r9d
    0.00 :	  639284:       31 c0                   xor    %eax,%eax
    0.00 :	  639286:       bb 01 00 00 00          mov    $0x1,%ebx
    0.00 :	  63928b:       45 85 c9                test   %r9d,%r9d
    0.00 :	  63928e:       74 45                   je     6392d5 <WaitLatchOrSocket+0x185>
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  639290:       44 8b 85 60 ff ff ff    mov    -0xa0(%rbp),%r8d
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
    0.00 :	  639297:       66 c7 45 84 00 00       movw   $0x0,-0x7c(%rbp)
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  63929d:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392a2:       8b bd 5c ff ff ff       mov    -0xa4(%rbp),%edi
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  6392a8:       45 85 c0                test   %r8d,%r8d
    0.00 :	  6392ab:       66 0f 44 45 84          cmove  -0x7c(%rbp),%ax
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392b0:       85 ff                   test   %edi,%edi
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
    0.00 :	  6392b2:       66 89 45 84             mov    %ax,-0x7c(%rbp)
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
    0.00 :	  6392b6:       0f 85 ca 01 00 00       jne    639486 <WaitLatchOrSocket+0x336>
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
    0.00 :	  6392bc:       8b 85 6c ff ff ff       mov    -0x94(%rbp),%eax
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
    0.00 :	  6392c2:       66 c7 45 86 00 00       movw   $0x0,-0x7a(%rbp)
    0.00 :	  6392c8:       bb 02 00 00 00          mov    $0x2,%ebx
         :	#ifdef HAVE_POLL
         :	                nfds = 0;
         :	                if (wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE))
         :	                {
         :	                        /* socket, if used, is always in pfds[0] */
         :	                        pfds[0].fd = sock;
    0.00 :	  6392cd:       89 45 80                mov    %eax,-0x80(%rbp)
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
    0.00 :	  6392d0:       b8 01 00 00 00          mov    $0x1,%eax
         :	                        nfds++;
         :	                }
         :
         :	                pfds[nfds].fd = selfpipe_readfd;
    0.00 :	  6392d5:       8b 15 ed f2 52 00       mov    0x52f2ed(%rip),%edx        # b685c8 <selfpipe_readfd>
    0.00 :	  6392db:       48 98                   cltq   
         :	                pfds[nfds].events = POLLIN;
    0.00 :	  6392dd:       66 c7 44 c5 84 01 00    movw   $0x1,-0x7c(%rbp,%rax,8)
         :	                pfds[nfds].revents = 0;
    0.00 :	  6392e4:       66 c7 44 c5 86 00 00    movw   $0x0,-0x7a(%rbp,%rax,8)
         :	                                pfds[0].events |= POLLOUT;
         :	                        pfds[0].revents = 0;
         :	                        nfds++;
         :	                }
         :
         :	                pfds[nfds].fd = selfpipe_readfd;
    0.00 :	  6392eb:       89 54 c5 80             mov    %edx,-0x80(%rbp,%rax,8)
         :	                pfds[nfds].events = POLLIN;
         :	                pfds[nfds].revents = 0;
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
    0.00 :	  6392ef:       8b b5 64 ff ff ff       mov    -0x9c(%rbp),%esi
    0.00 :	  6392f5:       85 f6                   test   %esi,%esi
    0.00 :	  6392f7:       74 1e                   je     639317 <WaitLatchOrSocket+0x1c7>
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
    0.00 :	  6392f9:       8b 15 29 f3 52 00       mov    0x52f329(%rip),%edx        # b68628 <postmaster_alive_fds>
    0.00 :	  6392ff:       48 63 c3                movslq %ebx,%rax
         :	                        pfds[nfds].events = POLLIN;
         :	                        pfds[nfds].revents = 0;
         :	                        nfds++;
    0.00 :	  639302:       83 c3 01                add    $0x1,%ebx
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
         :	                        pfds[nfds].events = POLLIN;
    0.00 :	  639305:       66 c7 44 c5 84 01 00    movw   $0x1,-0x7c(%rbp,%rax,8)
         :	                        pfds[nfds].revents = 0;
    0.00 :	  63930c:       66 c7 44 c5 86 00 00    movw   $0x0,-0x7a(%rbp,%rax,8)
         :	                nfds++;
         :
         :	                if (wakeEvents & WL_POSTMASTER_DEATH)
         :	                {
         :	                        /* postmaster fd, if used, is always in pfds[nfds - 1] */
         :	                        pfds[nfds].fd = postmaster_alive_fds[POSTMASTER_FD_WATCH];
    0.00 :	  639313:       89 54 c5 80             mov    %edx,-0x80(%rbp,%rax,8)
         :	                        pfds[nfds].revents = 0;
         :	                        nfds++;
         :	                }
         :
         :	                /* Sleep */
         :	                rc = poll(pfds, nfds, (int) cur_timeout);
    0.00 :	  639317:       48 8d 7d 80             lea    -0x80(%rbp),%rdi
    0.00 :	  63931b:       48 63 f3                movslq %ebx,%rsi
    0.00 :	  63931e:       44 89 f2                mov    %r14d,%edx
    0.00 :	  639321:       e8 2a 07 e3 ff          callq  469a50 <poll@plt>
         :
         :	                /* Check return code */
         :	                if (rc < 0)
    0.00 :	  639326:       83 f8 00                cmp    $0x0,%eax
    0.00 :	  639329:       0f 8c 74 01 00 00       jl     6394a3 <WaitLatchOrSocket+0x353>
         :	                                ereport(ERROR,
         :	                                                (errcode_for_socket_access(),
         :	                                                 errmsg("poll() failed: %m")));
         :	                        }
         :	                }
         :	                else if (rc == 0)
    0.00 :	  63932f:       0f 85 b5 00 00 00       jne    6393ea <WaitLatchOrSocket+0x29a>
         :	                {
         :	                        /* timeout exceeded */
         :	                        if (wakeEvents & WL_TIMEOUT)
         :	                                result |= WL_TIMEOUT;
    0.00 :	  639335:       44 0b ad 7c ff ff ff    or     -0x84(%rbp),%r13d
         :	                        }
         :	                }
         :	#endif   /* HAVE_POLL */
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
    0.00 :	  63933c:       45 85 ed                test   %r13d,%r13d
    0.00 :	  63933f:       90                      nop
    0.00 :	  639340:       74 26                   je     639368 <WaitLatchOrSocket+0x218>
         :	                        tv.tv_sec = cur_timeout / 1000L;
         :	                        tv.tv_usec = (cur_timeout % 1000L) * 1000L;
         :	#endif
         :	                }
         :	        } while (result == 0);
         :	        waiting = false;
    0.00 :	  639342:       c7 05 2c 27 54 00 00    movl   $0x0,0x54272c(%rip)        # b7ba78 <waiting>
    0.00 :	  639349:       00 00 00 
         :
         :	        return result;
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/port/pg_latch.c:481
  100.00 :	  63934c:       48 81 c4 88 00 00 00    add    $0x88,%rsp
    0.00 :	  639353:       44 89 e8                mov    %r13d,%eax
    0.00 :	  639356:       5b                      pop    %rbx
    0.00 :	  639357:       41 5c                   pop    %r12
    0.00 :	  639359:       41 5d                   pop    %r13
    0.00 :	  63935b:       41 5e                   pop    %r14
    0.00 :	  63935d:       41 5f                   pop    %r15
    0.00 :	  63935f:       c9                      leaveq 
    0.00 :	  639360:       c3                      retq   
    0.00 :	  639361:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	                        }
         :	                }
         :	#endif   /* HAVE_POLL */
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
    0.00 :	  639368:       4d 85 f6                test   %r14,%r14
    0.00 :	  63936b:       0f 88 92 fe ff ff       js     639203 <WaitLatchOrSocket+0xb3>
         :	                {
         :	                        INSTR_TIME_SET_CURRENT(cur_time);
    0.00 :	  639371:       48 8d 7d b0             lea    -0x50(%rbp),%rdi
    0.00 :	  639375:       31 f6                   xor    %esi,%esi
    0.00 :	  639377:       e8 44 02 e3 ff          callq  4695c0 <gettimeofday@plt>
         :	                        INSTR_TIME_SUBTRACT(cur_time, start_time);
    0.00 :	  63937c:       48 8b 45 b8             mov    -0x48(%rbp),%rax
    0.00 :	  639380:       48 2b 45 c8             sub    -0x38(%rbp),%rax
    0.00 :	  639384:       48 8b 55 b0             mov    -0x50(%rbp),%rdx
    0.00 :	  639388:       48 2b 55 c0             sub    -0x40(%rbp),%rdx
    0.00 :	  63938c:       48 85 c0                test   %rax,%rax
    0.00 :	  63938f:       48 89 45 b8             mov    %rax,-0x48(%rbp)
    0.00 :	  639393:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
    0.00 :	  639397:       79 1b                   jns    6393b4 <WaitLatchOrSocket+0x264>
    0.00 :	  639399:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	 * that EOF and error conditions are reported only via WL_SOCKET_READABLE.
         :	 */
         :	int
         :	WaitLatchOrSocket(volatile Latch *latch, int wakeEvents, pgsocket sock,
         :	                                  long timeout)
         :	{
    0.00 :	  6393a0:       48 83 ea 01             sub    $0x1,%rdx
         :
         :	                /* If we're not done, update cur_timeout for next iteration */
         :	                if (result == 0 && cur_timeout >= 0)
         :	                {
         :	                        INSTR_TIME_SET_CURRENT(cur_time);
         :	                        INSTR_TIME_SUBTRACT(cur_time, start_time);
    0.00 :	  6393a4:       48 05 40 42 0f 00       add    $0xf4240,%rax
    0.00 :	  6393aa:       78 f4                   js     6393a0 <WaitLatchOrSocket+0x250>
    0.00 :	  6393ac:       48 89 55 b0             mov    %rdx,-0x50(%rbp)
    0.00 :	  6393b0:       48 89 45 b8             mov    %rax,-0x48(%rbp)
         :	                        cur_timeout = timeout - (long) INSTR_TIME_GET_MILLISEC(cur_time);
    0.00 :	  6393b4:       f2 48 0f 2a c0          cvtsi2sd %rax,%xmm0
    0.00 :	  6393b9:       f2 48 0f 2a 4d b0       cvtsi2sdq -0x50(%rbp),%xmm1
    0.00 :	  6393bf:       f2 0f 59 0d 11 32 24    mulsd  0x243211(%rip),%xmm1        # 87c5d8 <__func__.18742+0x13>
    0.00 :	  6393c6:       00 
    0.00 :	  6393c7:       4c 89 fa                mov    %r15,%rdx
    0.00 :	  6393ca:       45 31 f6                xor    %r14d,%r14d
    0.00 :	  6393cd:       f2 0f 5e 05 03 32 24    divsd  0x243203(%rip),%xmm0        # 87c5d8 <__func__.18742+0x13>
    0.00 :	  6393d4:       00 
    0.00 :	  6393d5:       f2 0f 58 c8             addsd  %xmm0,%xmm1
    0.00 :	  6393d9:       f2 48 0f 2c c1          cvttsd2si %xmm1,%rax
    0.00 :	  6393de:       48 29 c2                sub    %rax,%rdx
    0.00 :	  6393e1:       4c 0f 49 f2             cmovns %rdx,%r14
    0.00 :	  6393e5:       e9 19 fe ff ff          jmpq   639203 <WaitLatchOrSocket+0xb3>
         :	                                result |= WL_TIMEOUT;
         :	                }
         :	                else
         :	                {
         :	                        /* at least one event occurred, so check revents values */
         :	                        if ((wakeEvents & WL_SOCKET_READABLE) &&
    0.00 :	  6393ea:       8b 8d 60 ff ff ff       mov    -0xa0(%rbp),%ecx
    0.00 :	  6393f0:       85 c9                   test   %ecx,%ecx
    0.00 :	  6393f2:       74 10                   je     639404 <WaitLatchOrSocket+0x2b4>
    0.00 :	  6393f4:       0f bf 45 86             movswl -0x7a(%rbp),%eax
         :	                                (pfds[0].revents & (POLLIN | POLLHUP | POLLERR | POLLNVAL)))
         :	                        {
         :	                                /* data available in socket, or EOF/error condition */
         :	                                result |= WL_SOCKET_READABLE;
    0.00 :	  6393f8:       44 89 ea                mov    %r13d,%edx
    0.00 :	  6393fb:       83 ca 02                or     $0x2,%edx
    0.00 :	  6393fe:       a8 39                   test   $0x39,%al
    0.00 :	  639400:       44 0f 45 ea             cmovne %edx,%r13d
         :	                        }
         :	                        if ((wakeEvents & WL_SOCKET_WRITEABLE) &&
    0.00 :	  639404:       8b 95 5c ff ff ff       mov    -0xa4(%rbp),%edx
    0.00 :	  63940a:       85 d2                   test   %edx,%edx
    0.00 :	  63940c:       74 0e                   je     63941c <WaitLatchOrSocket+0x2cc>
         :	                                (pfds[0].revents & POLLOUT))
         :	                        {
         :	                                result |= WL_SOCKET_WRITEABLE;
    0.00 :	  63940e:       44 89 e8                mov    %r13d,%eax
    0.00 :	  639411:       83 c8 04                or     $0x4,%eax
    0.00 :	  639414:       f6 45 86 04             testb  $0x4,-0x7a(%rbp)
    0.00 :	  639418:       44 0f 45 e8             cmovne %eax,%r13d
         :	                        /*
         :	                         * We expect a POLLHUP when the remote end is closed, but because
         :	                         * we don't expect the pipe to become readable or to have any
         :	                         * errors either, treat those cases as postmaster death, too.
         :	                         */
         :	                        if ((wakeEvents & WL_POSTMASTER_DEATH) &&
    0.00 :	  63941c:       8b 85 64 ff ff ff       mov    -0x9c(%rbp),%eax
    0.00 :	  639422:       85 c0                   test   %eax,%eax
    0.00 :	  639424:       0f 84 12 ff ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
    0.00 :	  63942a:       8d 43 ff                lea    -0x1(%rbx),%eax
    0.00 :	  63942d:       48 98                   cltq   
    0.00 :	  63942f:       0f bf 44 c5 86          movswl -0x7a(%rbp,%rax,8),%eax
    0.00 :	  639434:       a8 39                   test   $0x39,%al
    0.00 :	  639436:       0f 84 00 ff ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
         :	                                 * postmaster pipe, but since the consequences of falsely
         :	                                 * returning WL_POSTMASTER_DEATH could be pretty unpleasant,
         :	                                 * we take the trouble to positively verify EOF with
         :	                                 * PostmasterIsAlive().
         :	                                 */
         :	                                if (!PostmasterIsAlive())
    0.00 :	  63943c:       e8 4f 5e 04 00          callq  67f290 <PostmasterIsAlive>
         :	                                        result |= WL_POSTMASTER_DEATH;
    0.00 :	  639441:       44 89 ea                mov    %r13d,%edx
    0.00 :	  639444:       83 ca 10                or     $0x10,%edx
    0.00 :	  639447:       84 c0                   test   %al,%al
    0.00 :	  639449:       44 0f 44 ea             cmove  %edx,%r13d
    0.00 :	  63944d:       e9 ea fe ff ff          jmpq   63933c <WaitLatchOrSocket+0x1ec>
         :	                        }
         :	                }
         :	                else if (rc == 0)
         :	                {
         :	                        waiting = false;
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
    0.00 :	  639452:       ba 12 de 89 00          mov    $0x89de12,%edx
    0.00 :	  639457:       be 8d 02 00 00          mov    $0x28d,%esi
    0.00 :	  63945c:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
         :	                                elog(ERROR, "read() on self-pipe failed: %m");
         :	                        }
         :	                }
         :	                else if (rc == 0)
         :	                {
         :	                        waiting = false;
    0.00 :	  639461:       c7 05 0d 26 54 00 00    movl   $0x0,0x54260d(%rip)        # b7ba78 <waiting>
    0.00 :	  639468:       00 00 00 
         :	                        elog(ERROR, "unexpected EOF on self-pipe");
    0.00 :	  63946b:       e8 b0 1f 14 00          callq  77b420 <elog_start>
    0.00 :	  639470:       be 0f dd 89 00          mov    $0x89dd0f,%esi
    0.00 :	  639475:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  63947a:       31 c0                   xor    %eax,%eax
    0.00 :	  63947c:       e8 af 1d 14 00          callq  77b230 <elog_finish>
    0.00 :	  639481:       e8 4a 00 e3 ff          callq  4694d0 <abort@plt>
         :	                        pfds[0].fd = sock;
         :	                        pfds[0].events = 0;
         :	                        if (wakeEvents & WL_SOCKET_READABLE)
         :	                                pfds[0].events |= POLLIN;
         :	                        if (wakeEvents & WL_SOCKET_WRITEABLE)
         :	                                pfds[0].events |= POLLOUT;
    0.00 :	  639486:       66 83 4d 84 04          orw    $0x4,-0x7c(%rbp)
    0.00 :	  63948b:       e9 2c fe ff ff          jmpq   6392bc <WaitLatchOrSocket+0x16c>
         :	         * is interrupted.  (On some platforms, select() will update the contents
         :	         * of "tv" for us, but unfortunately we can't rely on that.)
         :	         */
         :	        if (wakeEvents & WL_TIMEOUT)
         :	        {
         :	                INSTR_TIME_SET_CURRENT(start_time);
    0.00 :	  639490:       48 8d 7d c0             lea    -0x40(%rbp),%rdi
    0.00 :	  639494:       31 f6                   xor    %esi,%esi
    0.00 :	  639496:       4d 89 fe                mov    %r15,%r14
    0.00 :	  639499:       e8 22 01 e3 ff          callq  4695c0 <gettimeofday@plt>
    0.00 :	  63949e:       e9 12 fd ff ff          jmpq   6391b5 <WaitLatchOrSocket+0x65>
         :
         :	                /* Check return code */
         :	                if (rc < 0)
         :	                {
         :	                        /* EINTR is okay, otherwise complain */
         :	                        if (errno != EINTR)
    0.00 :	  6394a3:       e8 18 08 e3 ff          callq  469cc0 <__errno_location@plt>
    0.00 :	  6394a8:       83 38 04                cmpl   $0x4,(%rax)
    0.00 :	  6394ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	  6394b0:       0f 84 86 fe ff ff       je     63933c <WaitLatchOrSocket+0x1ec>
         :	                        {
         :	                                waiting = false;
         :	                                ereport(ERROR,
    0.00 :	  6394b6:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6394b9:       b9 00 de 89 00          mov    $0x89de00,%ecx
    0.00 :	  6394be:       ba 50 01 00 00          mov    $0x150,%edx
    0.00 :	  6394c3:       be f0 dc 89 00          mov    $0x89dcf0,%esi
    0.00 :	  6394c8:       bf 14 00 00 00          mov    $0x14,%edi
         :	                if (rc < 0)
         :	                {
         :	                        /* EINTR is okay, otherwise complain */
         :	                        if (errno != EINTR)
         :	                        {
         :	                                waiting = false;
    0.00 :	  6394cd:       c7 05 a1 25 54 00 00    movl   $0x0,0x5425a1(%rip)        # b7ba78 <waiting>
    0.00 :	  6394d4:       00 00 00 
         :	                                ereport(ERROR,
    0.00 :	  6394d7:       e8 e4 15 14 00          callq  77aac0 <errstart>
    0.00 :	  6394dc:       84 c0                   test   %al,%al
    0.00 :	  6394de:       74 1e                   je     6394fe <WaitLatchOrSocket+0x3ae>
    0.00 :	  6394e0:       bf 2b dd 89 00          mov    $0x89dd2b,%edi
    0.00 :	  6394e5:       31 c0                   xor    %eax,%eax
    0.00 :	  6394e7:       e8 b4 33 14 00          callq  77c8a0 <errmsg>
    0.00 :	  6394ec:       89 c3                   mov    %eax,%ebx
    0.00 :	  6394ee:       e8 5d 35 14 00          callq  77ca50 <errcode_for_socket_access>
    0.00 :	  6394f3:       89 de                   mov    %ebx,%esi
    0.00 :	  6394f5:       89 c7                   mov    %eax,%edi
    0.00 :	  6394f7:       31 c0                   xor    %eax,%eax
    0.00 :	  6394f9:       e8 e2 10 14 00          callq  77a5e0 <errfinish>
    0.00 :	  6394fe:       e8 cd ff e2 ff          callq  4694d0 <abort@plt>
    0.00 :	  639503:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        Assert(wakeEvents != 0);        /* must have at least one wake event */
         :	        /* Cannot specify WL_SOCKET_WRITEABLE without WL_SOCKET_READABLE */
         :	        Assert((wakeEvents & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE)) != WL_SOCKET_WRITEABLE);
         :
         :	        if ((wakeEvents & WL_LATCH_SET) && latch->owner_pid != MyProcPid)
         :	                elog(ERROR, "cannot wait on a latch owned by another process");
    0.00 :	  639508:       ba 00 de 89 00          mov    $0x89de00,%edx
    0.00 :	  63950d:       be ed 00 00 00          mov    $0xed,%esi
    0.00 :	  639512:       bf f0 dc 89 00          mov    $0x89dcf0,%edi
    0.00 :	  639517:       e8 04 1f 14 00          callq  77b420 <elog_start>
    0.00 :	  63951c:       be 50 dd 89 00          mov    $0x89dd50,%esi
    0.00 :	  639521:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  639526:       31 c0                   xor    %eax,%eax
    0.00 :	  639528:       e8 03 1d 14 00          callq  77b230 <elog_finish>
    0.00 :	  63952d:       e8 9e ff e2 ff          callq  4694d0 <abort@plt>
         :	                 */
         :	                drainSelfPipe();
         :
         :	                if ((wakeEvents & WL_LATCH_SET) && latch->is_set)
         :	                {
         :	                        result |= WL_LATCH_SET;
    0.00 :	  639532:       41 83 cd 01             or     $0x1,%r13d
         :
         :	                        /*
         :	                         * Leave loop immediately, avoid blocking again. We don't attempt
         :	                         * to report any other events that might also be satisfied.
         :	                         */
         :	                        break;
    0.00 :	  639536:       e9 07 fe ff ff          jmpq   639342 <WaitLatchOrSocket+0x1f2>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:109
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000673da0 <BufTableInsert>:
         :	 *
         :	 * Caller must hold exclusive lock on BufMappingLock for tag's partition
         :	 */
         :	int
         :	BufTableInsert(BufferTag *tagPtr, int buf_id)
         :	{
    0.00 :	  673da0:       55                      push   %rbp
    0.00 :	  673da1:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  673da4:       48 83 ec 20             sub    $0x20,%rsp
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673da8:       48 8b 07                mov    (%rdi),%rax
    0.00 :	  673dab:       48 89 45 e0             mov    %rax,-0x20(%rbp)
    0.00 :	  673daf:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  673db3:       48 89 45 e8             mov    %rax,-0x18(%rbp)
    0.00 :	  673db7:       8b 47 10                mov    0x10(%rdi),%eax
         :	        ent.id = buf_id;
         :
         :	        Assert(buf_id >= 0);            /* -1 is reserved for not-in-table */
         :	        Assert(tagPtr->blockNum != P_NEW);      /* invalid tag */
         :
         :	        if (CHashInsert(SharedBufHash, &ent))
    0.00 :	  673dba:       48 8b 3d 97 92 50 00    mov    0x509297(%rip),%rdi        # b7d058 <SharedBufHash>
         :	BufTableInsert(BufferTag *tagPtr, int buf_id)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
         :	        ent.id = buf_id;
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/buf_table.c:109
  100.00 :	  673dc1:       89 75 f4                mov    %esi,-0xc(%rbp)
         :
         :	        Assert(buf_id >= 0);            /* -1 is reserved for not-in-table */
         :	        Assert(tagPtr->blockNum != P_NEW);      /* invalid tag */
         :
         :	        if (CHashInsert(SharedBufHash, &ent))
    0.00 :	  673dc4:       48 8d 75 e0             lea    -0x20(%rbp),%rsi
         :	int
         :	BufTableInsert(BufferTag *tagPtr, int buf_id)
         :	{
         :	        BufferLookupEnt ent;
         :
         :	        ent.key = *tagPtr;
    0.00 :	  673dc8:       89 45 f0                mov    %eax,-0x10(%rbp)
         :	        ent.id = buf_id;
         :
         :	        Assert(buf_id >= 0);            /* -1 is reserved for not-in-table */
         :	        Assert(tagPtr->blockNum != P_NEW);      /* invalid tag */
         :
         :	        if (CHashInsert(SharedBufHash, &ent))
    0.00 :	  673dcb:       e8 50 f1 10 00          callq  782f20 <CHashInsert>
    0.00 :	  673dd0:       89 c2                   mov    %eax,%edx
    0.00 :	  673dd2:       b8 ff ff ff ff          mov    $0xffffffff,%eax
    0.00 :	  673dd7:       84 d2                   test   %dl,%dl
    0.00 :	  673dd9:       0f 44 45 f4             cmove  -0xc(%rbp),%eax
         :	                return -1;
         :
         :	        return ent.id;
         :	}
    0.00 :	  673ddd:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1339
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000674bd0 <PinBuffer_Locked>:
         :	 * to save a spin lock/unlock cycle, because we need to pin a buffer before
         :	 * its state can change under us.
         :	 */
         :	static void
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
    0.00 :	  674bd0:       55                      push   %rbp
         :	        int                     b = buf->buf_id;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:1339
  100.00 :	  674bd1:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :	  674bd6:       be 01 00 00 00          mov    $0x1,%esi
         :	 * to save a spin lock/unlock cycle, because we need to pin a buffer before
         :	 * its state can change under us.
         :	 */
         :	static void
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
    0.00 :	  674bdb:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  674bde:       53                      push   %rbx
    0.00 :	  674bdf:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  674be2:       48 83 ec 08             sub    $0x8,%rsp
         :	        int                     b = buf->buf_id;
    0.00 :	  674be6:       8b 7f 24                mov    0x24(%rdi),%edi
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674be9:       83 c7 01                add    $0x1,%edi
    0.00 :	  674bec:       e8 2f f9 ff ff          callq  674520 <GetPrivateRefCountEntry>
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674bf1:       8b 48 04                mov    0x4(%rax),%ecx
         :	PinBuffer_Locked(volatile BufferDesc *buf)
         :	{
         :	        int                     b = buf->buf_id;
         :	        PrivateRefCountEntry *ref;
         :
         :	        ref = GetPrivateRefCountEntry(b + 1, true, true);
    0.00 :	  674bf4:       48 89 c2                mov    %rax,%rdx
         :
         :	        if (ref->refcount == 0)
    0.00 :	  674bf7:       85 c9                   test   %ecx,%ecx
    0.00 :	  674bf9:       75 09                   jne    674c04 <PinBuffer_Locked+0x34>
         :	                buf->refcount++;
    0.00 :	  674bfb:       8b 43 18                mov    0x18(%rbx),%eax
    0.00 :	  674bfe:       83 c0 01                add    $0x1,%eax
    0.00 :	  674c01:       89 43 18                mov    %eax,0x18(%rbx)
         :	        UnlockBufHdr(buf);
    0.00 :	  674c04:       c6 43 20 00             movb   $0x0,0x20(%rbx)
         :	        ref->refcount++;
    0.00 :	  674c08:       83 42 04 01             addl   $0x1,0x4(%rdx)
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674c0c:       8b 73 24                mov    0x24(%rbx),%esi
    0.00 :	  674c0f:       48 8b 3d aa 5c 54 00    mov    0x545caa(%rip),%rdi        # bba8c0 <CurrentResourceOwner>
         :	                                                                BufferDescriptorGetBuffer(buf));
         :	}
    0.00 :	  674c16:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	  674c1a:       5b                      pop    %rbx
    0.00 :	  674c1b:       c9                      leaveq 
         :	        if (ref->refcount == 0)
         :	                buf->refcount++;
         :	        UnlockBufHdr(buf);
         :	        ref->refcount++;
         :	        Assert(ref->refcount > 0);
         :	        ResourceOwnerRememberBuffer(CurrentResourceOwner,
    0.00 :	  674c1c:       83 c6 01                add    $0x1,%esi
    0.00 :	  674c1f:       e9 7c 55 12 00          jmpq   79a1a0 <ResourceOwnerRememberBuffer>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:468
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006766a0 <ReadBuffer>:
         :	 * ReadBuffer -- a shorthand for ReadBufferExtended, for reading from main
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
    0.00 :	  6766a0:       55                      push   %rbp
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
    0.00 :	  6766a1:       89 f2                   mov    %esi,%edx
    0.00 :	  6766a3:       45 31 c0                xor    %r8d,%r8d
    0.00 :	  6766a6:       31 c9                   xor    %ecx,%ecx
    0.00 :	  6766a8:       31 f6                   xor    %esi,%esi
         :	 * ReadBuffer -- a shorthand for ReadBufferExtended, for reading from main
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
    0.00 :	  6766aa:       48 89 e5                mov    %rsp,%rbp
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
         :	}
    0.00 :	  6766ad:       c9                      leaveq 
         :	 *              fork with RBM_NORMAL mode and default strategy.
         :	 */
         :	Buffer
         :	ReadBuffer(Relation reln, BlockNumber blockNum)
         :	{
         :	        return ReadBufferExtended(reln, MAIN_FORKNUM, blockNum, RBM_NORMAL, NULL);
 /home/Computational/mark/src/postgres-andres/src/backend/storage/buffer/bufmgr.c:468
  100.00 :	  6766ae:       e9 bd fe ff ff          jmpq   676570 <ReadBufferExtended>

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1259
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000679e90 <FilePrefetch>:
         :	 * this API is inappropriate for libaio, which wants to have a buffer provided
         :	 * to read into.
         :	 */
         :	int
         :	FilePrefetch(File file, off_t offset, int amount)
         :	{
    0.00 :	  679e90:       55                      push   %rbp
    0.00 :	  679e91:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  679e94:       48 89 5d e8             mov    %rbx,-0x18(%rbp)
    0.00 :	  679e98:       4c 89 65 f0             mov    %r12,-0x10(%rbp)
    0.00 :	  679e9c:       89 fb                   mov    %edi,%ebx
    0.00 :	  679e9e:       4c 89 6d f8             mov    %r13,-0x8(%rbp)
    0.00 :	  679ea2:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :	  679ea6:       49 89 f5                mov    %rsi,%r13
    0.00 :	  679ea9:       41 89 d4                mov    %edx,%r12d
         :
         :	        DO_DB(elog(LOG, "FilePrefetch: %d (%s) " INT64_FORMAT " %d",
         :	                           file, VfdCache[file].fileName,
         :	                           (int64) offset, amount));
         :
         :	        returnCode = FileAccess(file);
    0.00 :	  679eac:       e8 6f fa ff ff          callq  679920 <FileAccess>
         :	        if (returnCode < 0)
    0.00 :	  679eb1:       85 c0                   test   %eax,%eax
    0.00 :	  679eb3:       78 33                   js     679ee8 <FilePrefetch+0x58>
         :	                return returnCode;
         :
         :	        returnCode = posix_fadvise(VfdCache[file].fd, offset, amount,
    0.00 :	  679eb5:       48 8b 0d dc 32 50 00    mov    0x5032dc(%rip),%rcx        # b7d198 <VfdCache>
    0.00 :	  679ebc:       48 63 c3                movslq %ebx,%rax
    0.00 :	  679ebf:       49 63 d4                movslq %r12d,%rdx
    0.00 :	  679ec2:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :	  679ec6:       4c 89 ee                mov    %r13,%rsi
         :	        return returnCode;
         :	#else
         :	        Assert(FileIsValid(file));
         :	        return 0;
         :	#endif
         :	}
    0.00 :	  679ec9:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  679ecd:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  679ed1:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
         :
         :	        returnCode = FileAccess(file);
         :	        if (returnCode < 0)
         :	                return returnCode;
         :
         :	        returnCode = posix_fadvise(VfdCache[file].fd, offset, amount,
    0.00 :	  679ed5:       8b 3c 01                mov    (%rcx,%rax,1),%edi
         :	        return returnCode;
         :	#else
         :	        Assert(FileIsValid(file));
         :	        return 0;
         :	#endif
         :	}
    0.00 :	  679ed8:       c9                      leaveq 
         :
         :	        returnCode = FileAccess(file);
         :	        if (returnCode < 0)
         :	                return returnCode;
         :
         :	        returnCode = posix_fadvise(VfdCache[file].fd, offset, amount,
 /home/Computational/mark/src/postgres-andres/src/backend/storage/file/fd.c:1259
  100.00 :	  679ed9:       b9 03 00 00 00          mov    $0x3,%ecx
    0.00 :	  679ede:       e9 5d fc de ff          jmpq   469b40 <posix_fadvise@plt>
    0.00 :	  679ee3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :	        return returnCode;
         :	#else
         :	        Assert(FileIsValid(file));
         :	        return 0;
         :	#endif
         :	}
    0.00 :	  679ee8:       48 8b 5d e8             mov    -0x18(%rbp),%rbx
    0.00 :	  679eec:       4c 8b 65 f0             mov    -0x10(%rbp),%r12
    0.00 :	  679ef0:       4c 8b 6d f8             mov    -0x8(%rbp),%r13
    0.00 :	  679ef4:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:1016
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006d3160 <float8eq>:
         :	        }
         :	}
         :
         :	Datum
         :	float8eq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6d3160:       55                      push   %rbp
    0.00 :	  6d3161:       48 89 e5                mov    %rsp,%rbp
 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/float.c:1016
  100.00 :	  6d3164:       53                      push   %rbx
    0.00 :	  6d3165:       48 89 fb                mov    %rdi,%rbx
    0.00 :	  6d3168:       48 83 ec 08             sub    $0x8,%rsp
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
    0.00 :	  6d316c:       48 8b 7f 20             mov    0x20(%rdi),%rdi
    0.00 :	  6d3170:       e8 5b a8 0a 00          callq  77d9d0 <DatumGetFloat8>
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
    0.00 :	  6d3175:       48 8b 7b 28             mov    0x28(%rbx),%rdi
         :	}
         :
         :	Datum
         :	float8eq(PG_FUNCTION_ARGS)
         :	{
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
    0.00 :	  6d3179:       f2 0f 11 45 f0          movsd  %xmm0,-0x10(%rbp)
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
    0.00 :	  6d317e:       e8 4d a8 0a 00          callq  77d9d0 <DatumGetFloat8>
         :
         :	        PG_RETURN_BOOL(float8_cmp_internal(arg1, arg2) == 0);
    0.00 :	  6d3183:       66 0f 28 c8             movapd %xmm0,%xmm1
    0.00 :	  6d3187:       f2 0f 10 45 f0          movsd  -0x10(%rbp),%xmm0
    0.00 :	  6d318c:       e8 8f fd ff ff          callq  6d2f20 <float8_cmp_internal>
    0.00 :	  6d3191:       85 c0                   test   %eax,%eax
    0.00 :	  6d3193:       0f 94 c0                sete   %al
         :	}
    0.00 :	  6d3196:       48 83 c4 08             add    $0x8,%rsp
         :	float8eq(PG_FUNCTION_ARGS)
         :	{
         :	        float8          arg1 = PG_GETARG_FLOAT8(0);
         :	        float8          arg2 = PG_GETARG_FLOAT8(1);
         :
         :	        PG_RETURN_BOOL(float8_cmp_internal(arg1, arg2) == 0);
    0.00 :	  6d319a:       0f b6 c0                movzbl %al,%eax
         :	}
    0.00 :	  6d319d:       5b                      pop    %rbx
    0.00 :	  6d319e:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/adt/int.c:391
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000006ea7a0 <int4eq>:
         :	 *              intge                   - returns 1 iff arg1 >= arg2
         :	 */
         :
         :	Datum
         :	int4eq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6ea7a0:       48 8b 47 28             mov    0x28(%rdi),%rax
  100.00 :	  6ea7a4:       39 47 20                cmp    %eax,0x20(%rdi)
    0.00 :	  6ea7a7:       55                      push   %rbp
    0.00 :	  6ea7a8:       48 89 e5                mov    %rsp,%rbp
         :	        int32           arg1 = PG_GETARG_INT32(0);
         :	        int32           arg2 = PG_GETARG_INT32(1);
         :
         :	        PG_RETURN_BOOL(arg1 == arg2);
         :	}
    0.00 :	  6ea7ab:       c9                      leaveq 
         :	 *              intge                   - returns 1 iff arg1 >= arg2
         :	 */
         :
         :	Datum
         :	int4eq(PG_FUNCTION_ARGS)
         :	{
    0.00 :	  6ea7ac:       0f 94 c0                sete   %al
    0.00 :	  6ea7af:       0f b6 c0                movzbl %al,%eax

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:1307
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000783ac0 <hash_seq_search>:
         :	                register_seq_scan(hashp);
         :	}
         :
         :	void *
         :	hash_seq_search(HASH_SEQ_STATUS *status)
         :	{
    0.00 :	  783ac0:       55                      push   %rbp
         :	        long            segment_ndx;
         :	        HASHSEGMENT segp;
         :	        uint32          curBucket;
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
    0.00 :	  783ac1:       48 8b 57 10             mov    0x10(%rdi),%rdx
         :	                register_seq_scan(hashp);
         :	}
         :
         :	void *
         :	hash_seq_search(HASH_SEQ_STATUS *status)
         :	{
    0.00 :	  783ac5:       48 89 e5                mov    %rsp,%rbp
         :	        long            segment_ndx;
         :	        HASHSEGMENT segp;
         :	        uint32          curBucket;
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
    0.00 :	  783ac8:       48 85 d2                test   %rdx,%rdx
    0.00 :	  783acb:       74 1b                   je     783ae8 <hash_seq_search+0x28>
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
    0.00 :	  783acd:       48 8b 02                mov    (%rdx),%rax
         :	                if (status->curEntry == NULL)   /* end of this bucket */
    0.00 :	  783ad0:       48 85 c0                test   %rax,%rax
         :	        HASHELEMENT *curElem;
         :
         :	        if ((curElem = status->curEntry) != NULL)
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
    0.00 :	  783ad3:       48 89 47 10             mov    %rax,0x10(%rdi)
         :	                if (status->curEntry == NULL)   /* end of this bucket */
    0.00 :	  783ad7:       0f 84 8b 00 00 00       je     783b68 <hash_seq_search+0xa8>
         :	                        ++status->curBucket;
         :	                return (void *) ELEMENTKEY(curElem);
    0.00 :	  783add:       48 8d 42 10             lea    0x10(%rdx),%rax
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783ae1:       c9                      leaveq 
    0.00 :	  783ae2:       c3                      retq   
    0.00 :	  783ae3:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :
         :	        /*
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
         :	        hashp = status->hashp;
    0.00 :	  783ae8:       4c 8b 0f                mov    (%rdi),%r9
         :	        }
         :
         :	        /*
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
    0.00 :	  783aeb:       8b 77 08                mov    0x8(%rdi),%esi
         :	        hashp = status->hashp;
         :	        hctl = hashp->hctl;
         :	        ssize = hashp->ssize;
         :	        max_bucket = hctl->max_bucket;
    0.00 :	  783aee:       49 8b 01                mov    (%r9),%rax
         :	         * Search for next nonempty bucket starting at curBucket.
         :	         */
         :	        curBucket = status->curBucket;
         :	        hashp = status->hashp;
         :	        hctl = hashp->hctl;
         :	        ssize = hashp->ssize;
    0.00 :	  783af1:       4d 8b 59 50             mov    0x50(%r9),%r11
         :	        max_bucket = hctl->max_bucket;
    0.00 :	  783af5:       44 8b 50 28             mov    0x28(%rax),%r10d
         :
         :	        if (curBucket > max_bucket)
    0.00 :	  783af9:       44 39 d6                cmp    %r10d,%esi
    0.00 :	  783afc:       77 7d                   ja     783b7b <hash_seq_search+0xbb>
         :	        }
         :
         :	        /*
         :	         * first find the right segment in the table directory.
         :	         */
         :	        segment_num = curBucket >> hashp->sshift;
    0.00 :	  783afe:       41 8b 49 58             mov    0x58(%r9),%ecx
    0.00 :	  783b02:       89 f0                   mov    %esi,%eax
         :	        segment_ndx = MOD(curBucket, ssize);
    0.00 :	  783b04:       89 f2                   mov    %esi,%edx
         :	        }
         :
         :	        /*
         :	         * first find the right segment in the table directory.
         :	         */
         :	        segment_num = curBucket >> hashp->sshift;
    0.00 :	  783b06:       d3 e8                   shr    %cl,%eax
    0.00 :	  783b08:       41 89 c0                mov    %eax,%r8d
         :	        segment_ndx = MOD(curBucket, ssize);
    0.00 :	  783b0b:       49 8d 43 ff             lea    -0x1(%r11),%rax
    0.00 :	  783b0f:       21 c2                   and    %eax,%edx
         :
         :	        segp = hashp->dir[segment_num];
    0.00 :	  783b11:       49 8b 41 08             mov    0x8(%r9),%rax
    0.00 :	  783b15:       4e 8b 0c c0             mov    (%rax,%r8,8),%r9
    0.00 :	  783b19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	         * Pick up the first item in this bucket's chain.  If chain is not empty
         :	         * we can begin searching it.  Otherwise we have to advance to find the
         :	         * next nonempty bucket.  We try to optimize that case since searching a
         :	         * near-empty hashtable has to iterate this loop a lot.
         :	         */
         :	        while ((curElem = segp[segment_ndx]) == NULL)
    0.00 :	  783b20:       49 8b 0c d1             mov    (%r9,%rdx,8),%rcx
    0.00 :	  783b24:       48 85 c9                test   %rcx,%rcx
    0.00 :	  783b27:       75 24                   jne    783b4d <hash_seq_search+0x8d>
         :	        {
         :	                /* empty bucket, advance to next */
         :	                if (++curBucket > max_bucket)
    0.00 :	  783b29:       83 c6 01                add    $0x1,%esi
    0.00 :	  783b2c:       41 39 f2                cmp    %esi,%r10d
    0.00 :	  783b2f:       72 47                   jb     783b78 <hash_seq_search+0xb8>
         :	                {
         :	                        status->curBucket = curBucket;
         :	                        hash_seq_term(status);
         :	                        return NULL;            /* search is done */
         :	                }
         :	                if (++segment_ndx >= ssize)
    0.00 :	  783b31:       48 83 c2 01             add    $0x1,%rdx
    0.00 :	  783b35:       49 39 d3                cmp    %rdx,%r11
    0.00 :	  783b38:       7f e6                   jg     783b20 <hash_seq_search+0x60>
         :	                {
         :	                        segment_num++;
    0.00 :	  783b3a:       49 83 c0 01             add    $0x1,%r8
         :	                        segment_ndx = 0;
         :	                        segp = hashp->dir[segment_num];
    0.00 :	  783b3e:       31 d2                   xor    %edx,%edx
    0.00 :	  783b40:       4e 8b 0c c0             mov    (%rax,%r8,8),%r9
         :	         * Pick up the first item in this bucket's chain.  If chain is not empty
         :	         * we can begin searching it.  Otherwise we have to advance to find the
         :	         * next nonempty bucket.  We try to optimize that case since searching a
         :	         * near-empty hashtable has to iterate this loop a lot.
         :	         */
         :	        while ((curElem = segp[segment_ndx]) == NULL)
    0.00 :	  783b44:       49 8b 0c d1             mov    (%r9,%rdx,8),%rcx
    0.00 :	  783b48:       48 85 c9                test   %rcx,%rcx
    0.00 :	  783b4b:       74 dc                   je     783b29 <hash_seq_search+0x69>
         :	                        segp = hashp->dir[segment_num];
         :	                }
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
    0.00 :	  783b4d:       48 8b 01                mov    (%rcx),%rax
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/dynahash.c:1307
  100.00 :	  783b50:       48 83 f8 01             cmp    $0x1,%rax
         :	                        segp = hashp->dir[segment_num];
         :	                }
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
    0.00 :	  783b54:       48 89 47 10             mov    %rax,0x10(%rdi)
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
    0.00 :	  783b58:       48 8d 41 10             lea    0x10(%rcx),%rax
         :	        }
         :
         :	        /* Begin scan of curBucket... */
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
    0.00 :	  783b5c:       83 d6 00                adc    $0x0,%esi
         :	        status->curBucket = curBucket;
    0.00 :	  783b5f:       89 77 08                mov    %esi,0x8(%rdi)
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783b62:       c9                      leaveq 
    0.00 :	  783b63:       c3                      retq   
    0.00 :	  783b64:       0f 1f 40 00             nopl   0x0(%rax)
         :	        if ((curElem = status->curEntry) != NULL)
         :	        {
         :	                /* Continuing scan of curBucket... */
         :	                status->curEntry = curElem->link;
         :	                if (status->curEntry == NULL)   /* end of this bucket */
         :	                        ++status->curBucket;
    0.00 :	  783b68:       83 47 08 01             addl   $0x1,0x8(%rdi)
    0.00 :	  783b6c:       e9 6c ff ff ff          jmpq   783add <hash_seq_search+0x1d>
    0.00 :	  783b71:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :	        while ((curElem = segp[segment_ndx]) == NULL)
         :	        {
         :	                /* empty bucket, advance to next */
         :	                if (++curBucket > max_bucket)
         :	                {
         :	                        status->curBucket = curBucket;
    0.00 :	  783b78:       89 77 08                mov    %esi,0x8(%rdi)
         :	                        hash_seq_term(status);
    0.00 :	  783b7b:       e8 a0 fe ff ff          callq  783a20 <hash_seq_term>
    0.00 :	  783b80:       31 c0                   xor    %eax,%eax
         :	        status->curEntry = curElem->link;
         :	        if (status->curEntry == NULL)           /* end of this bucket */
         :	                ++curBucket;
         :	        status->curBucket = curBucket;
         :	        return (void *) ELEMENTKEY(curElem);
         :	}
    0.00 :	  783b82:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/hashfn.c:55
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000784f60 <tag_hash>:
         :	/*
         :	 * tag_hash: hash function for fixed-size tag values
         :	 */
         :	uint32
         :	tag_hash(const void *key, Size keysize)
         :	{
    0.00 :	  784f60:       55                      push   %rbp
    0.00 :	  784f61:       48 89 e5                mov    %rsp,%rbp
         :	        return DatumGetUInt32(hash_any((const unsigned char *) key,
    0.00 :	  784f64:       e8 e7 b3 d0 ff          callq  490350 <hash_any>
         :	                                                                   (int) keysize));
         :	}
 /home/Computational/mark/src/postgres-andres/src/backend/utils/hash/hashfn.c:55
  100.00 :	  784f69:       c9                      leaveq 

Sorted summary for file /home/Computational/mark/andres/bin/postgres
----------------------------------------------

  100.00 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:721
 Percent |	Source code & Disassembly of /home/Computational/mark/andres/bin/postgres
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000798f70 <palloc0>:
         :	        return ret;
         :	}
         :
         :	void *
         :	palloc0(Size size)
         :	{
    0.00 :	  798f70:       55                      push   %rbp
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798f71:       48 81 ff ff ff ff 3f    cmp    $0x3fffffff,%rdi
         :	        return ret;
         :	}
         :
         :	void *
         :	palloc0(Size size)
         :	{
    0.00 :	  798f78:       48 89 e5                mov    %rsp,%rbp
    0.00 :	  798f7b:       41 54                   push   %r12
    0.00 :	  798f7d:       53                      push   %rbx
    0.00 :	  798f7e:       48 89 fb                mov    %rdi,%rbx
         :	        void       *ret;
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
    0.00 :	  798f81:       77 6d                   ja     798ff0 <palloc0+0x80>
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798f83:       48 8b 05 d6 18 42 00    mov    0x4218d6(%rip),%rax        # bba860 <CurrentMemoryContext>
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798f8a:       48 89 de                mov    %rbx,%rsi
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
    0.00 :	  798f8d:       c6 40 30 00             movb   $0x0,0x30(%rax)
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
 /home/Computational/mark/src/postgres-andres/src/backend/utils/mmgr/mcxt.c:721
  100.00 :	  798f91:       48 8b 3d c8 18 42 00    mov    0x4218c8(%rip),%rdi        # bba860 <CurrentMemoryContext>
    0.00 :	  798f98:       48 8b 47 08             mov    0x8(%rdi),%rax
    0.00 :	  798f9c:       ff 10                   callq  *(%rax)
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798f9e:       f6 c3 07                test   $0x7,%bl
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
         :
         :	        CurrentMemoryContext->isReset = false;
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
    0.00 :	  798fa1:       49 89 c4                mov    %rax,%r12
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798fa4:       75 09                   jne    798faf <palloc0+0x3f>
    0.00 :	  798fa6:       48 81 fb 00 04 00 00    cmp    $0x400,%rbx
    0.00 :	  798fad:       76 19                   jbe    798fc8 <palloc0+0x58>
    0.00 :	  798faf:       48 89 da                mov    %rbx,%rdx
    0.00 :	  798fb2:       31 f6                   xor    %esi,%esi
    0.00 :	  798fb4:       4c 89 e7                mov    %r12,%rdi
    0.00 :	  798fb7:       e8 64 04 cd ff          callq  469420 <memset@plt>
         :
         :	        return ret;
         :	}
    0.00 :	  798fbc:       5b                      pop    %rbx
    0.00 :	  798fbd:       4c 89 e0                mov    %r12,%rax
    0.00 :	  798fc0:       41 5c                   pop    %r12
    0.00 :	  798fc2:       c9                      leaveq 
    0.00 :	  798fc3:       c3                      retq   
    0.00 :	  798fc4:       0f 1f 40 00             nopl   0x0(%rax)
         :	        CurrentMemoryContext->isReset = false;
         :
         :	        ret = (*CurrentMemoryContext->methods->alloc) (CurrentMemoryContext, size);
         :	        VALGRIND_MEMPOOL_ALLOC(CurrentMemoryContext, ret, size);
         :
         :	        MemSetAligned(ret, 0, size);
    0.00 :	  798fc8:       49 8d 14 1c             lea    (%r12,%rbx,1),%rdx
    0.00 :	  798fcc:       49 39 d4                cmp    %rdx,%r12
    0.00 :	  798fcf:       73 eb                   jae    798fbc <palloc0+0x4c>
    0.00 :	  798fd1:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)
    0.00 :	  798fd8:       48 c7 00 00 00 00 00    movq   $0x0,(%rax)
    0.00 :	  798fdf:       48 83 c0 08             add    $0x8,%rax
    0.00 :	  798fe3:       48 39 c2                cmp    %rax,%rdx
    0.00 :	  798fe6:       77 f0                   ja     798fd8 <palloc0+0x68>
         :
         :	        return ret;
         :	}
    0.00 :	  798fe8:       5b                      pop    %rbx
    0.00 :	  798fe9:       4c 89 e0                mov    %r12,%rax
    0.00 :	  798fec:       41 5c                   pop    %r12
    0.00 :	  798fee:       c9                      leaveq 
    0.00 :	  798fef:       c3                      retq   
         :
         :	        AssertArg(MemoryContextIsValid(CurrentMemoryContext));
         :	        AssertNotInCriticalSection(CurrentMemoryContext);
         :
         :	        if (!AllocSizeIsValid(size))
         :	                elog(ERROR, "invalid memory alloc request size %zu", size);
    0.00 :	  798ff0:       ba 10 20 8e 00          mov    $0x8e2010,%edx
    0.00 :	  798ff5:       be cd 02 00 00          mov    $0x2cd,%esi
    0.00 :	  798ffa:       bf 8e 1f 8e 00          mov    $0x8e1f8e,%edi
    0.00 :	  798fff:       e8 1c 24 fe ff          callq  77b420 <elog_start>
    0.00 :	  799004:       48 89 da                mov    %rbx,%rdx
    0.00 :	  799007:       be b8 1f 8e 00          mov    $0x8e1fb8,%esi
    0.00 :	  79900c:       bf 14 00 00 00          mov    $0x14,%edi
    0.00 :	  799011:       31 c0                   xor    %eax,%eax
    0.00 :	  799013:       e8 18 22 fe ff          callq  77b230 <elog_finish>
    0.00 :	  799018:       e8 b3 04 cd ff          callq  4694d0 <abort@plt>

Sorted summary for file /lib64/ld-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/ld-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000016660 <strcmp>:
 ??:0
  100.00 :	   16660:       8a 07                   mov    (%rdi),%al
    0.00 :	   16662:       3a 06                   cmp    (%rsi),%al
    0.00 :	   16664:       75 0d                   jne    16673 <strcmp+0x13>
    0.00 :	   16666:       48 ff c7                inc    %rdi
    0.00 :	   16669:       48 ff c6                inc    %rsi
    0.00 :	   1666c:       84 c0                   test   %al,%al
    0.00 :	   1666e:       75 f0                   jne    16660 <strcmp>
    0.00 :	   16670:       31 c0                   xor    %eax,%eax
    0.00 :	   16672:       c3                      retq   
    0.00 :	   16673:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	   16678:       b9 ff ff ff ff          mov    $0xffffffff,%ecx
    0.00 :	   1667d:       0f 42 c1                cmovb  %ecx,%eax

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib64/libpthread-2.11.3.so
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib64/libpthread-2.11.3.so
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000000e720 <__write>:
    0.00 :	    e720:       83 3d 31 dc 20 00 00    cmpl   $0x0,0x20dc31(%rip)        # 21c358 <__pthread_multiple_threads>
 ??:0
  100.00 :	    e727:       75 10                   jne    e739 <__write_nocancel+0x10>
         :
         :	000000000000e729 <__write_nocancel>:
    0.00 :	    e729:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	    e72e:       0f 05                   syscall 
    0.00 :	    e730:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	    e736:       73 31                   jae    e769 <__write_nocancel+0x40>
    0.00 :	    e738:       c3                      retq   
    0.00 :	    e739:       48 83 ec 08             sub    $0x8,%rsp
    0.00 :	    e73d:       e8 7e fa ff ff          callq  e1c0 <__pthread_enable_asynccancel>
    0.00 :	    e742:       48 89 04 24             mov    %rax,(%rsp)
    0.00 :	    e746:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :	    e74b:       0f 05                   syscall 
    0.00 :	    e74d:       48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :	    e751:       48 89 c2                mov    %rax,%rdx
    0.00 :	    e754:       e8 c7 fa ff ff          callq  e220 <__pthread_disable_asynccancel>
    0.00 :	    e759:       48 89 d0                mov    %rdx,%rax
    0.00 :	    e75c:       48 83 c4 08             add    $0x8,%rsp
    0.00 :	    e760:       48 3d 01 f0 ff ff       cmp    $0xfffffffffffff001,%rax
    0.00 :	    e766:       73 01                   jae    e769 <__write_nocancel+0x40>
    0.00 :	    e768:       c3                      retq   
    0.00 :	    e769:       48 8b 0d 30 98 20 00    mov    0x209830(%rip),%rcx        # 217fa0 <_DYNAMIC+0x1f0>
    0.00 :	    e770:       31 d2                   xor    %edx,%edx
    0.00 :	    e772:       48 29 c2                sub    %rax,%rdx
    0.00 :	    e775:       64 89 11                mov    %edx,%fs:(%rcx)
    0.00 :	    e778:       48 83 c8 ff             or     $0xffffffffffffffff,%rax
    0.00 :	    e77c:       eb ea                   jmp    e768 <__write_nocancel+0x3f>

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000000082a0 <journal_add_journal_head>:
    0.00 :	    82a0:       41 56                   push   %r14
    0.00 :	    82d2:       45 31 f6                test   $0x40,%ah
    0.00 :	    82d5:       41 55                   jne    8320 <journal_add_journal_head+0x50>
    0.00 :	    82d7:       41 bd 0e 00             mov    (%r12),%eax
    0.00 :	    82db:       00 00                   test   %eax,%eax
    0.00 :	    82dd:       41 54 4c 8d 67 60       jle    83d6 <journal_add_journal_head+0x106>
    0.00 :	    82e3:       55 48 8d                test   %rdx,%rdx
    0.00 :	    82e6:       6f 02                   jne    8350 <journal_add_journal_head+0x80>
    0.00 :	    82e8:       53 48 89 fb eb          lock andb $0xdf,0x0(%rbp)
    0.00 :	    82ed:       2f 66 90                mov    (%rbx),%rax
    0.00 :	    82f0:       f0 0f                   xor    %edx,%edx
    0.00 :	    82f2:       ba 2b 15                test   $0x40,%ah
    0.00 :	    82f5:       19 c0                   jne    82c0 <journal_next_log_block+0x50>
    0.00 :	    82f7:       85 c0 0f 85 f3 00 00    mov    0x0(%rip),%rdi        # 82fe <journal_add_journal_head+0x2e>
    0.00 :	    82fe:       00 48 8b 03 f6          mov    $0x50,%esi
    0.00 :	    8303:       c4 40 75 49 41          callq  8308 <journal_add_journal_head+0x38>
    0.00 :	    8308:       8b 04 24                test   %rax,%rax
    0.00 :	    830b:       85 c0 0f                mov    %rax,%rdx
    0.00 :	    830e:       8e f3                   je     8370 <journal_add_journal_head+0xa0>
    0.00 :	    8310:       00 00 00                mov    %rdx,%rdi
    0.00 :	    8313:       48 85 d2                mov    %r13,%rcx
    0.00 :	    8316:       75 68 f0                mov    %r14,%rax
    0.00 :	    8319:       80 65 00                rep stos %rax,%es:(%rdi)
    0.00 :	    831c:       df 48                   jmp    82c0 <journal_next_log_block+0x50>
    0.00 :	    831e:       8b 03                   xchg   %ax,%ax
    0.00 :	    8320:       31 d2 f6 c4             mov    0x40(%rbx),%rdi
    0.00 :	    8324:       40 75 c9 48             addl   $0x1,0x8(%rdi)
    0.00 :	    8328:       8b 3d 00 00 00          lock andb $0xdf,0x2(%rbx)
 ??:0
  100.00 :	    832d:       00 be 50                test   %rdx,%rdx
    0.00 :	    8330:       00 00                   je     8341 <journal_add_journal_head+0x71>
    0.00 :	    8332:       00 e8 00 00 00 00 48    mov    0x0(%rip),%rdi        # 8339 <journal_add_journal_head+0x69>
    0.00 :	    8339:       85 c0 48                mov    %rdx,%rsi
    0.00 :	    833c:       89 c2 74 60 48          callq  8341 <journal_add_journal_head+0x71>
    0.00 :	    8341:       89 d7 4c 89             mov    0x40(%rbx),%rax
    0.00 :	    8345:       e9                      pop    %rbx
    0.00 :	    8346:       4c                      pop    %rbp
    0.00 :	    8347:       89 f0                   pop    %r12
    0.00 :	    8349:       f3 48                   pop    %r13
    0.00 :	    834b:       ab eb                   pop    %r14
    0.00 :	    834d:       a2                      retq   
    0.00 :	    834e:       66 90                   xchg   %ax,%ax
    0.00 :	    8350:       48 8b 7b 40             lea    0x1(%rbx),%rax
    0.00 :	    8354:       83 47 08 01 f0          lock orb $0x40,0x1(%rbx)
    0.00 :	    8359:       80 63 02 df             mov    %rdx,0x40(%rbx)
    0.00 :	    835d:       48 85 d2                mov    %rbx,(%rdx)
    0.00 :	    8360:       74 0f 48 8b             lock incl 0x60(%rbx)
    0.00 :	    8364:       3d 00 00                mov    %rdx,%rdi
    0.00 :	    8367:       00 00                   xor    %edx,%edx
    0.00 :	    8369:       48 89                   jmp    8324 <journal_add_journal_head+0x54>
    0.00 :	    836b:       d6 e8 00 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    8370:       00 48 8b 43 40 5b 5d    mov    $0x0,%rsi
    0.00 :	    8377:       41 5c 41 5d 41 5e c3    mov    $0x0,%rdi
    0.00 :	    837e:       66 90 48 8d 43          callq  8383 <journal_add_journal_head+0xb3>
    0.00 :	    8383:       01 f0                   test   %eax,%eax
    0.00 :	    8385:       80 4b                   jne    83f0 <journal_add_journal_head+0x120>
    0.00 :	    8387:       01 40 48 89 53 40 48    nopw   0x0(%rax,%rax,1)
    0.00 :	    838e:       89 1a 
    0.00 :	    8390:       f0 ff 43 60 48          callq  8395 <journal_add_journal_head+0xc5>
    0.00 :	    8395:       89 d7 31 d2 eb b9 0f    mov    0x0(%rip),%rdi        # 839c <journal_add_journal_head+0xcc>
    0.00 :	    839c:       1f 44 00 00 48          mov    $0x50,%esi
    0.00 :	    83a1:       c7 c6 00 00 00          callq  83a6 <journal_add_journal_head+0xd6>
    0.00 :	    83a6:       00 48 c7                test   %rax,%rax
    0.00 :	    83a9:       c7 00 00                mov    %rax,%rdx
    0.00 :	    83ac:       00 00                   je     8390 <journal_add_journal_head+0xc0>
    0.00 :	    83ae:       e8 00 00 00 00          jmpq   8310 <journal_add_journal_head+0x40>
    0.00 :	    83b3:       85 c0 75 69 66          lock btsl $0x15,(%rbx)
    0.00 :	    83b8:       0f 1f                   sbb    %eax,%eax
    0.00 :	    83ba:       84 00                   test   %eax,%eax
    0.00 :	    83bc:       00 00 00 00 e8 00       je     82cf <journal_next_log_block+0x5f>
    0.00 :	    83c2:       00 00 00 48 8b 3d       nopw   0x0(%rax,%rax,1)
    0.00 :	    83c8:       00 00                   pause  
    0.00 :	    83ca:       00 00 be                mov    (%rbx),%rax
    0.00 :	    83cd:       50 00 00 00 e8          test   $0x200000,%eax
    0.00 :	    83d2:       00 00                   jne    83c8 <journal_add_journal_head+0xf8>
    0.00 :	    83d4:       00 00                   jmp    83b3 <journal_add_journal_head+0xe3>
    0.00 :	    83d6:       48 85 c0 48             mov    0x10(%rbx),%rax
    0.00 :	    83da:       89 c2 74                test   %rax,%rax
    0.00 :	    83dd:       e2 e9                   je     83ea <journal_add_journal_head+0x11a>
    0.00 :	    83df:       5d ff ff ff f0          cmpq   $0x0,0x18(%rax)
    0.00 :	    83e4:       0f ba 2b 15 19 c0       jne    82e3 <journal_add_journal_head+0x13>
    0.00 :	    83ea:       85 c0                   ud2    
    0.00 :	    83ec:       0f 84                   jmp    83ec <journal_add_journal_head+0x11c>
    0.00 :	    83ee:       0d ff                   xchg   %ax,%ax
    0.00 :	    83f0:       ff ff 66 0f 1f 44 00    mov    $0x0,%rsi
    0.00 :	    83f7:       00 f3 90 48 8b 03 a9    mov    $0x0,%rdi
    0.00 :	    83fe:       00 00                   xor    %eax,%eax
    0.00 :	    8400:       20 00 75 f4 eb          callq  8405 <journal_add_journal_head+0x135>
    0.00 :	    8405:       dd 48                   jmp    8390 <journal_add_journal_head+0xc0>
         :	    8407:       8b 43 10 48 85 c0 74    nopw   0x0(%rax,%rax,1)
         :	    840e:       0b 48 
         :	    8410:       83 78 18 00             sub    $0x28,%rsp
         :	    8414:       0f 85 f9 fe ff          lea    0x14(%rsp),%rsi
         :	    8419:       ff 0f 0b eb fe          mov    %rbx,0x18(%rsp)
         :	    841e:       66 90 48 c7 c6          mov    %rbp,0x20(%rsp)
         :	    8423:       00 00 00                mov    %rdi,%rbx
         :	    8426:       00 48 c7 c7 00          callq  842b <journal_add_journal_head+0x15b>
         :	    842b:       00 00                   test   %eax,%eax
         :	    842d:       00 31                   je     8440 <journal_get_descriptor_buffer>
         :	    842f:       c0 e8                   xor    %eax,%eax
         :	    8431:       00 00 00 00 eb          mov    0x18(%rsp),%rbx

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/ext3/ext3.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000004660 <ext3_get_inode_flags>:
 ??:0
  100.00 :	    4660:       8b 47 3c                mov    0x3c(%rdi),%eax
    0.00 :	    4693:       8b 97 04 01 00 00 25    orl    $0x80,0x3c(%rdi)
    0.00 :	    469a:       47 ff fe                and    $0x40,%edx
    0.00 :	    469d:       ff f6                   je     46a6 <ext3_rsv_window_add+0x3a66>
    0.00 :	    469f:       c2 01 89 47 3c 74 06    orl    $0x10000,0x3c(%rdi)
    0.00 :	    46a6:       83 c8                   repz retq 
         :	    46a8:       08 89 47 3c f6 c2 04    nopl   0x0(%rax,%rax,1)
         :	    46af:       74 
         :	    46b0:       04                      push   %rbp
         :	    46b1:       83 4f 3c                mov    %rdi,%rbp
         :	    46b4:       20                      push   %rbx
         :	    46b5:       f6 c2 08 74             sub    $0x8,%rsp
         :	    46b9:       04 83 4f 3c             mov    0x18(%rdi),%rdi
         :	    46bd:       10 f6 c2 02 74 07 81    mov    0x108(%rbp),%rdx
         :	    46c4:       4f 3c 80 00             movzbl 0x15(%rdi),%ecx
         :	    46c8:       00 00 83                sub    $0x9,%ecx
         :	    46cb:       e2 40 74                shr    %cl,%rdx
         :	    46ce:       07 81 4f 3c             cmp    $0x1,%rdx
         :	    46d2:       00 00                   jbe    4738 <ext3_rsv_window_add+0x3af8>
         :	    46d4:       01 00 f3 c3             cmp    $0x41,%rdx

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/net/netfilter/nf_conntrack.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000007700 <tcp_packet>:
    0.00 :	    7700:       41 57                   push   %r15
    0.00 :	    7732:       41 56 41                mov    0x68(%rsi),%eax
    0.00 :	    7735:       55 41 54                sub    0x6c(%rsi),%eax
    0.00 :	    7738:       55 53                   sub    %edx,%eax
    0.00 :	    773a:       48 89 fb                cmp    $0x13,%eax
    0.00 :	    773d:       48 81 ec 98 00 00       jle    7b60 <nf_conntrack_hash_insert+0x7a50>
    0.00 :	    7743:       00 48 89                movslq %edx,%r12
    0.00 :	    7746:       74 24 30 89 54 24 2c    add    0xe0(%rsi),%r12
    0.00 :	    774d:       89 4c 24                test   %r12,%r12
    0.00 :	    7750:       28 44 88 44 24 27       je     7f18 <nf_conntrack_hash_insert+0x7e08>
    0.00 :	    7756:       48 8b 87 e8             lea    0x4(%rbx),%rdx
    0.00 :	    775a:       00 00 00                xor    %r14d,%r14d
    0.00 :	    775d:       48 89 44                mov    %rdx,%rdi
    0.00 :	    7760:       24 38 8b 46 68          mov    %rdx,0x48(%rsp)
    0.00 :	    7765:       2b 46 6c 29 d0          callq  776a <nf_conntrack_hash_insert+0x765a>
    0.00 :	    776a:       83 f8 13 0f 8e 1d 04    movzbl 0x118(%rbx),%eax
 ??:0
  100.00 :	    7771:       00 00 4c 63 e2          cmpl   $0x2,0x28(%rsp)
    0.00 :	    7776:       4c 03 a6 e0 00 00       mov    $0x4,%r8d
    0.00 :	    777c:       00 4d 85 e4             mov    %eax,0x44(%rsp)
    0.00 :	    7780:       0f 84 c2 07 00 00       movzbl 0xd(%r12),%esi
    0.00 :	    7786:       48 8d 53 04             seta   %r14b
    0.00 :	    778a:       45 31 f6                and    %sil,%r8b
    0.00 :	    778d:       48 89 d7 48 89 54       je     7910 <nf_conntrack_hash_insert+0x7800>
    0.00 :	    7793:       24 48 e8 00 00          mov    $0x4,%ebp
    0.00 :	    7798:       00 00 0f                mov    %r14d,%r13d
    0.00 :	    779b:       b6 83                   mov    %ebp,%edx
    0.00 :	    779d:       18 01 00 00             mov    0x44(%rsp),%ecx
    0.00 :	    77a1:       83 7c 24 28 02 41 b8    lea    0x0(,%r13,4),%rdi
    0.00 :	    77a8:       04 
    0.00 :	    77a9:       00 00 00                mov    %r13,%rax
    0.00 :	    77ac:       89 44 24 44             lea    (%rdx,%rdx,4),%rdx
    0.00 :	    77b0:       41 0f b6 74             shl    $0x6,%rax
    0.00 :	    77b4:       24 0d 41                sub    %rdi,%rax
    0.00 :	    77b7:       0f 97 c6 41             lea    (%rax,%rdx,2),%rdx
    0.00 :	    77bb:       20 f0 0f 84 7d 01 00    movzbl 0x0(%rcx,%rdx,1),%eax
    0.00 :	    77c2:       00 
    0.00 :	    77c3:       bd 04                   cmp    $0x8,%al
    0.00 :	    77c5:       00 00 00 45             movzbl %al,%r15d
    0.00 :	    77c9:       89 f5 89 ea 8b 4c       je     7c08 <nf_conntrack_hash_insert+0x7af8>
    0.00 :	    77cf:       24 44 4a 8d 3c ad       ja     7930 <nf_conntrack_hash_insert+0x7820>
    0.00 :	    77d5:       00 00                   sub    $0x1,%al
    0.00 :	    77d7:       00 00 4c 89 e8 48       je     7c70 <nf_conntrack_hash_insert+0x7b60>
    0.00 :	    77dd:       8d 14 92 48 c1          movzbl 0x27(%rsp),%eax
    0.00 :	    77e2:       e0 06 48 29 f8          mov    0x2c(%rsp),%r9d
    0.00 :	    77e7:       48 8d 14 50 0f b6 84    lea    0xf0(%rbx),%rsi
    0.00 :	    77ee:       11 00 00 00 00          mov    0x30(%rsp),%r8
    0.00 :	    77f3:       3c 08 44                mov    %r14d,%edx
    0.00 :	    77f6:       0f b6                   mov    %ebp,%ecx
    0.00 :	    77f8:       f8 0f 84                mov    %rbx,%rdi
    0.00 :	    77fb:       39 04 00 00             mov    %r12,(%rsp)
    0.00 :	    77ff:       0f 87 5b 01             mov    %eax,0x8(%rsp)
    0.00 :	    7803:       00 00 2c 01 0f          callq  6a40 <nf_conntrack_hash_insert+0x6930>
    0.00 :	    7808:       84 93 04 00             lea    0x78(%rbx),%rdx
    0.00 :	    780c:       00 0f                   test   %al,%al
    0.00 :	    780e:       b6 44 24 27 44          mov    %rdx,0x18(%rsp)
    0.00 :	    7813:       8b 4c 24 2c 48 8d       je     7f00 <nf_conntrack_hash_insert+0x7df0>
    0.00 :	    7819:       b3 f0 00 00 00 4c 8b    mov    %bpl,0x11b(%rbx)
    0.00 :	    7820:       44 24 30 44 89 f2 89    mov    %r14b,0x119(%rbx)
    0.00 :	    7827:       e9 48 89 df 4c 89 24    cmpb   $0x0,0x0(%rip)        # 782e <nf_conntrack_hash_insert+0x771e>
    0.00 :	    782e:       24 89 44 24 08 e8       jne    7fa5 <nf_conntrack_hash_insert+0x7e95>
    0.00 :	    7834:       38 f2 ff ff 48 8d 53    cmpb   $0x0,0x0(%rip)        # 783b <nf_conntrack_hash_insert+0x772b>
    0.00 :	    783b:       78 84 c0 48 89 54       jne    7f1c <nf_conntrack_hash_insert+0x7e0c>
    0.00 :	    7841:       24 18 0f 84 e7          cmp    %r15d,0x44(%rsp)
    0.00 :	    7846:       06 00 00 40 88 ab 1b    mov    %r15b,0x118(%rbx)
    0.00 :	    784d:       01 00 00 44             setne  %r14b
    0.00 :	    7851:       88 b3                   je     785d <nf_conntrack_hash_insert+0x774d>
    0.00 :	    7853:       19 01 00 00             cmp    $0x4,%r15d
    0.00 :	    7857:       80 3d 00 00 00 00       je     7b40 <nf_conntrack_hash_insert+0x7a30>
    0.00 :	    785d:       00 0f 85 71 07 00 00    movzbl 0x11a(%rbx),%eax
    0.00 :	    7864:       80 3d 00 00 00 00       cmp    0x0(%rip),%eax        # 786a <nf_conntrack_hash_insert+0x775a>
    0.00 :	    786a:       00 0f 85 db 06 00       jl     7a60 <nf_conntrack_hash_insert+0x7950>
    0.00 :	    7870:       00 44 39                mov    %r15d,%eax
    0.00 :	    7873:       7c 24 44 44 88 bb 18    mov    0x0(,%rax,4),%edx
    0.00 :	    787a:       01 00 00 41 0f 95       mov    0x0(%rip),%eax        # 7880 <nf_conntrack_hash_insert+0x7770>
    0.00 :	    7880:       c6 74                   cmp    %eax,%edx
    0.00 :	    7882:       0a 41                   mov    %eax,%ebp
    0.00 :	    7884:       83 ff 04 0f 84 e3       jbe    7a6a <nf_conntrack_hash_insert+0x795a>
    0.00 :	    788a:       02 00 00 0f b6          mov    0x48(%rsp),%rdi
    0.00 :	    788f:       83 1a 01 00 00          callq  7894 <nf_conntrack_hash_insert+0x7784>
    0.00 :	    7894:       3b 05 00                test   %r14b,%r14b
    0.00 :	    7897:       00 00                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7899:       00 0f 8c f0 01 00 00    mov    0xe8(%rbx),%rax
    0.00 :	    78a0:       44 89 f8 8b 14 85 00    cmpq   $0x0,0x738(%rax)
    0.00 :	    78a7:       00 
    0.00 :	    78a8:       00 00                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    78aa:       8b 05 00 00 00 00 39    mov    0xe0(%rbx),%rdx
    0.00 :	    78b1:       c2 89 c5                test   %rdx,%rdx
    0.00 :	    78b4:       0f 86                   je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    78b6:       e0 01 00 00             movzbl 0x13(%rdx),%eax
    0.00 :	    78ba:       48 8b                   test   %al,%al
    0.00 :	    78bc:       7c 24 48 e8 00 00       jne    7d30 <nf_conntrack_hash_insert+0x7c20>
    0.00 :	    78c2:       00 00 45 84 f6          mov    0x18(%rsp),%rdx
    0.00 :	    78c7:       74 29 48                mov    (%rdx),%rax
    0.00 :	    78ca:       8b 83                   test   $0x2,%al
    0.00 :	    78cc:       e8 00 00 00 48 83       jne    7b90 <nf_conntrack_hash_insert+0x7a80>
    0.00 :	    78d2:       b8 38 07 00 00 00       testb  $0x4,0xd(%r12)
    0.00 :	    78d8:       74 18 48 8b 93 e0       jne    7dc0 <nf_conntrack_hash_insert+0x7cb0>
    0.00 :	    78de:       00 00 00 48 85          mov    0x30(%rsp),%rdx
    0.00 :	    78e3:       d2 74 0c 0f             mov    0x28(%rsp),%esi
    0.00 :	    78e7:       b6 42 13 84 c0 0f       mov    $0x1,%r8d
    0.00 :	    78ed:       85 6e 04                mov    %rbp,%rcx
    0.00 :	    78f0:       00 00 48                mov    %rbx,%rdi
    0.00 :	    78f3:       8b 54 24 18 48          callq  78f8 <nf_conntrack_hash_insert+0x77e8>
    0.00 :	    78f8:       8b 02 a8 02 0f          mov    $0x1,%eax
    0.00 :	    78fd:       85 be 02 00 00 41 f6    add    $0x98,%rsp
    0.00 :	    7904:       44                      pop    %rbx
    0.00 :	    7905:       24                      pop    %rbp
    0.00 :	    7906:       0d 04                   pop    %r12
    0.00 :	    7908:       0f 85                   pop    %r13
    0.00 :	    790a:       e2 04                   pop    %r14
    0.00 :	    790c:       00 00                   pop    %r15
    0.00 :	    790e:       48                      retq   
    0.00 :	    790f:       8b                      nop
    0.00 :	    7910:       54 24 30 8b             test   $0x2,%sil
    0.00 :	    7914:       74 24 28 41 b8 01       je     7a38 <nf_conntrack_hash_insert+0x7928>
    0.00 :	    791a:       00 00                   mov    %esi,%eax
    0.00 :	    791c:       00 48 89 e9 48          mov    $0x1,%ebp
    0.00 :	    7921:       89 df e8                shr    $0x4,%al
    0.00 :	    7924:       00 00                   and    %eax,%ebp
    0.00 :	    7926:       00 00 b8 01 00          jmpq   7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    792b:       00 00 48 81 c4          nopl   0x0(%rax,%rax,1)
    0.00 :	    7930:       98 00                   cmp    $0xa,%al
    0.00 :	    7932:       00 00 5b 5d 41 5c       je     7cd0 <nf_conntrack_hash_insert+0x7bc0>
    0.00 :	    7938:       41 5d                   cmp    $0xb,%al
    0.00 :	    793a:       41 5e 41 5f c3 90       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7940:       40 f6 c6                cmp    $0x1,%ebp
    0.00 :	    7943:       02 0f 84 1e 01 00       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7949:       00 89 f0 bd 01 00 00    cmpb   $0x0,0x11b(%rbx)
    0.00 :	    7950:       00 c0 e8 04 21 c5       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7956:       e9 6d fe ff ff 0f 1f    movzbl 0x119(%rbx),%ecx
    0.00 :	    795d:       44 00 00                movzbl %cl,%eax
    0.00 :	    7960:       3c 0a 0f                cmp    %r14d,%eax
    0.00 :	    7963:       84 98 03 00 00 3c       je     7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    7969:       0b 0f 85 9d fe ff       mov    0x124(%rbx),%edx
    0.00 :	    796f:       ff 83 fd 01 0f          mov    0x8(%r12),%eax
    0.00 :	    7974:       85 47                   bswap  %eax
    0.00 :	    7976:       01 00                   cmp    %eax,%edx
    0.00 :	    7978:       00 80 bb 1b 01 00       jne    7a90 <nf_conntrack_hash_insert+0x7980>
    0.00 :	    797e:       00 00 0f                movzbl %cl,%eax
    0.00 :	    7981:       85 3a 01 00 00 0f       mov    $0x2,%r15d
    0.00 :	    7987:       b6 8b 19 01             lea    (%rax,%rax,4),%rax
    0.00 :	    798b:       00 00 0f b6 c1 44 39    mov    %edx,0xf0(%rbx,%rax,4)
    0.00 :	    7992:       f0 0f 84 27 01 00 00    movzbl 0x119(%rbx),%eax
    0.00 :	    7999:       8b 93 24 01 00 00       mov    0x124(%rbx),%edx
    0.00 :	    799f:       41 8b 44 24             lea    (%rax,%rax,4),%rax
    0.00 :	    79a3:       08 0f c8 39 c2 0f 85    mov    %edx,0xf4(%rbx,%rax,4)
    0.00 :	    79aa:       12 01 00 00 0f b6 c1    movzwl 0x128(%rbx),%eax
    0.00 :	    79b1:       41 bf 02                test   %ax,%ax
    0.00 :	    79b4:       00 00 00                movzwl %ax,%edx
    0.00 :	    79b7:       48 8d 04 80 89 94 83    movzbl 0x119(%rbx),%eax
    0.00 :	    79be:       f0 00 00                cmove  %ebp,%edx
    0.00 :	    79c1:       00 0f b6 83             lea    (%rax,%rax,4),%rax
    0.00 :	    79c5:       19 01 00 00 8b 93 24    mov    %edx,0xf8(%rbx,%rax,4)
    0.00 :	    79cc:       01 00 00 48 8d 04 80    movzbl 0x119(%rbx),%eax
    0.00 :	    79d3:       89 94 83 f4 00 00 00    movzbl 0x12a(%rbx),%edx
    0.00 :	    79da:       0f b7 83 28             lea    (%rax,%rax,4),%rax
    0.00 :	    79de:       01 00 00 66 85 c0 0f    mov    %dl,0x100(%rbx,%rax,4)
    0.00 :	    79e5:       b7 d0 0f b6 83 19 01    movzbl 0x119(%rbx),%eax
    0.00 :	    79ec:       00 00 0f 44 d5 48 8d    movzbl 0x12b(%rbx),%edx
    0.00 :	    79f3:       04 80 89 94             lea    (%rax,%rax,4),%rax
    0.00 :	    79f7:       83 f8 00 00 00 0f b6    mov    %dl,0x101(%rbx,%rax,4)
    0.00 :	    79fe:       83 19 01 00 00 0f b6    lea    0x0(,%r13,4),%rax
    0.00 :	    7a05:       93 
    0.00 :	    7a06:       2a 01 00                add    %r13,%rax
    0.00 :	    7a09:       00 48 8d 04 80 88 94    lea    0xf0(%rbx,%rax,4),%rax
    0.00 :	    7a10:       83 
    0.00 :	    7a11:       00 01 00 00 0f b6 83    movq   $0x0,(%rax)
    0.00 :	    7a18:       19 01 00 00 0f b6 93    movq   $0x0,0x8(%rax)
    0.00 :	    7a1f:       2b 
    0.00 :	    7a20:       01 00 00 48 8d 04 80    movl   $0x0,0x10(%rax)
    0.00 :	    7a27:       88 94 83 01 01 00 00    movl   $0x1,0x44(%rsp)
    0.00 :	    7a2e:       4a 
    0.00 :	    7a2f:       8d 04 ad 00 00          jmpq   77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7a34:       00 00 4c 01             nopl   0x0(%rax)
    0.00 :	    7a38:       e8 48 8d 84             test   $0x1,%sil
    0.00 :	    7a3c:       83 f0 00 00 00          mov    $0x2,%ebp
    0.00 :	    7a41:       48 c7 00 00 00 00       jne    7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    7a47:       00 48                   mov    %esi,%eax
    0.00 :	    7a49:       c7 40 08                and    $0x10,%eax
    0.00 :	    7a4c:       00 00                   cmp    $0x1,%al
    0.00 :	    7a4e:       00 00                   sbb    %ebp,%ebp
    0.00 :	    7a50:       c7 40 10                and    $0x2,%ebp
    0.00 :	    7a53:       00 00 00                add    $0x3,%ebp
    0.00 :	    7a56:       00 c7 44 24 44          jmpq   7798 <nf_conntrack_hash_insert+0x7688>
    0.00 :	    7a5b:       01 00 00 00 e9          nopl   0x0(%rax,%rax,1)
    0.00 :	    7a60:       a9 fd ff                mov    %r15d,%eax
    0.00 :	    7a63:       ff 0f 1f 40 00 40 f6    mov    0x0(,%rax,4),%edx
    0.00 :	    7a6a:       c6 01 bd 02 00 00 00    movzbl 0x115(%rbx),%eax
    0.00 :	    7a71:       0f 85 51 fd ff ff       or     0x101(%rbx),%al
    0.00 :	    7a77:       89 f0                   test   $0x10,%al
    0.00 :	    7a79:       83 e0 10 3c 01 19       jne    7d10 <nf_conntrack_hash_insert+0x7c00>
    0.00 :	    7a7f:       ed 83                   mov    %edx,%ebp
    0.00 :	    7a81:       e5 02 83 c5 03          jmpq   788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7a86:       e9 3d fd ff ff 0f 1f    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7a8d:       44 00 00 
    0.00 :	    7a90:       44 89 f8 8b 14 85 00    mov    %bpl,0x11b(%rbx)
    0.00 :	    7a97:       00 00 00 0f b6 83 15    mov    %r14b,0x119(%rbx)
    0.00 :	    7a9e:       01 00 00 0a 83          mov    0x4(%r12),%eax
    0.00 :	    7aa3:       01 01                   bswap  %eax
    0.00 :	    7aa5:       00 00 a8 10 0f 85       mov    %eax,0x11c(%rbx)
    0.00 :	    7aab:       91 02 00 00 89 d5       movzbl 0xd(%r12),%eax
    0.00 :	    7ab1:       e9 04 fe ff ff          mov    0x4(%r12),%ecx
    0.00 :	    7ab6:       66 2e                   bswap  %ecx
    0.00 :	    7ab8:       0f 1f                   mov    %eax,%edx
    0.00 :	    7aba:       84 00 00                and    $0x1,%eax
    0.00 :	    7abd:       00 00                   shr    %dl
    0.00 :	    7abf:       00 40 88                and    $0x1,%edx
    0.00 :	    7ac2:       ab 1b                   add    %eax,%edx
    0.00 :	    7ac4:       01 00 00 44 88          mov    0x30(%rsp),%rax
    0.00 :	    7ac9:       b3 19 01                add    0x68(%rax),%edx
    0.00 :	    7acc:       00 00 41 8b 44 24       movzbl 0xc(%r12),%eax
    0.00 :	    7ad2:       04 0f c8                shr    $0x4,%al
    0.00 :	    7ad5:       89 83 1c                movzbl %al,%eax
    0.00 :	    7ad8:       01 00 00                shl    $0x2,%eax
    0.00 :	    7adb:       41 0f                   sub    %eax,%edx
    0.00 :	    7add:       b6 44 24 0d             sub    0x2c(%rsp),%edx
    0.00 :	    7ae1:       41 8b                   add    %edx,%ecx
    0.00 :	    7ae3:       4c 24 04 0f c9 89       mov    %ecx,0x124(%rbx)
    0.00 :	    7ae9:       c2 83 e0 01 d0 ea       movzwl 0xe(%r12),%eax
    0.00 :	    7aef:       83 e2 01 01             rol    $0x8,%ax
    0.00 :	    7af3:       c2 48 8b                or     %r14d,%ebp
    0.00 :	    7af6:       44 24 30 03 50 68 41    mov    %ax,0x128(%rbx)
    0.00 :	    7afd:       0f b6 44 24 0c c0       je     7d48 <nf_conntrack_hash_insert+0x7c38>
    0.00 :	    7b03:       e8 04 0f b6 c0          mov    0x48(%rsp),%rdi
    0.00 :	    7b08:       c1 e0 02 29 c2          callq  7b0d <nf_conntrack_hash_insert+0x79fd>
    0.00 :	    7b0d:       2b 54 24 2c 01          mov    0x38(%rsp),%rdx
    0.00 :	    7b12:       d1 89 8b 24 01 00       mov    0x75c(%rdx),%eax
    0.00 :	    7b18:       00 41 0f                cmp    $0x6,%eax
    0.00 :	    7b1b:       b7 44 24 0e 66 c1       je     7de0 <nf_conntrack_hash_insert+0x7cd0>
    0.00 :	    7b21:       c0 08 44 09 f5          cmp    $0xff,%eax
    0.00 :	    7b26:       66 89 83 28 01 00       je     7de0 <nf_conntrack_hash_insert+0x7cd0>
    0.00 :	    7b2c:       00 0f 84 45 02          mov    $0x1,%eax
    0.00 :	    7b31:       00 00 48 8b 7c          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7b36:       24 48 e8 00 00 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7b3d:       48 8b 54 
    0.00 :	    7b40:       24 38 8b 82 5c 07 00    lea    0x0(,%r13,4),%rax
    0.00 :	    7b47:       00 
    0.00 :	    7b48:       83 f8 06                add    %r13,%rax
    0.00 :	    7b4b:       0f 84 bf 02 00 00 3d    orb    $0x4,0x101(%rbx,%rax,4)
    0.00 :	    7b52:       ff 
    0.00 :	    7b53:       00 00 00 0f 84          jmpq   785d <nf_conntrack_hash_insert+0x774d>
    0.00 :	    7b58:       b4 02 00 00 b8 01 00    nopl   0x0(%rax,%rax,1)
    0.00 :	    7b5f:       00 
    0.00 :	    7b60:       00 e9 c7 fd ff          lea    0x70(%rsp),%rbp
    0.00 :	    7b65:       ff 66 2e 0f             mov    0x2c(%rsp),%esi
    0.00 :	    7b69:       1f 84 00 00 00          mov    0x30(%rsp),%rdi
    0.00 :	    7b6e:       00 00 4a 8d 04          mov    $0x14,%ecx
    0.00 :	    7b73:       ad 00 00                mov    %rbp,%rdx
    0.00 :	    7b76:       00 00 4c 01 e8          callq  7b7b <nf_conntrack_hash_insert+0x7a6b>
    0.00 :	    7b7b:       80 8c                   test   %eax,%eax
    0.00 :	    7b7d:       83 01 01 00 00 04       js     7f18 <nf_conntrack_hash_insert+0x7e08>
    0.00 :	    7b83:       e9 05 fd                mov    %rbp,%r12
    0.00 :	    7b86:       ff ff 0f 1f 84          jmpq   774d <nf_conntrack_hash_insert+0x763d>
    0.00 :	    7b8b:       00 00 00 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :	    7b90:       48 8d 6c 24 70          mov    0x18(%rsp),%rdx
    0.00 :	    7b95:       8b 74 24                mov    (%rdx),%rax
    0.00 :	    7b98:       2c 48                   test   $0x4,%al
    0.00 :	    7b9a:       8b 7c 24 30 b9 14       jne    78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7ba0:       00 00 00 48             mov    0x44(%rsp),%eax
    0.00 :	    7ba4:       89 ea e8                sub    $0x2,%eax
    0.00 :	    7ba7:       00 00 00                cmp    $0x1,%eax
    0.00 :	    7baa:       00 85 c0 0f 88 95       ja     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bb0:       03 00 00 49             cmp    $0x3,%r15d
    0.00 :	    7bb4:       89 ec e9 c2 fb ff       jne    78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bba:       ff 0f 1f 44             lock orb $0x4,(%rdx)
    0.00 :	    7bbe:       00 00 48 8b 54 24 18    mov    0xe8(%rbx),%rax
    0.00 :	    7bc5:       48 8b 02 a8 04 0f 85    cmpq   $0x0,0x738(%rax)
    0.00 :	    7bcc:       3e 
    0.00 :	    7bcd:       fd ff ff 8b 44 24       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bd3:       44 83 e8 02 83 f8 01    mov    0xe0(%rbx),%rdx
    0.00 :	    7bda:       0f 87 2e                test   %rdx,%rdx
    0.00 :	    7bdd:       fd ff ff 41 83 ff       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7be3:       03 0f 85 24             movzbl 0x13(%rdx),%eax
    0.00 :	    7be7:       fd ff                   test   %al,%al
    0.00 :	    7be9:       ff f0 80 0a 04 48       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bef:       8b 83 e8                movzbl %al,%eax
    0.00 :	    7bf2:       00 00 00                add    %rdx,%rax
    0.00 :	    7bf5:       48 83 b8 38 07 00       je     78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7bfb:       00 00 0f 84             lock orb $0x10,(%rax)
    0.00 :	    7bff:       0b fd ff ff 48          jmpq   78de <nf_conntrack_hash_insert+0x77ce>
    0.00 :	    7c04:       8b 93 e0 00             nopl   0x0(%rax)
    0.00 :	    7c08:       00 00 48                cmp    $0x4,%ebp
    0.00 :	    7c0b:       85 d2 0f 84 fb fc       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c11:       ff ff 0f                test   %r14d,%r14d
    0.00 :	    7c14:       b6 42 13                sete   %dl
    0.00 :	    7c17:       84 c0 0f                and    $0x1,%edx
    0.00 :	    7c1a:       84 ef fc ff ff 0f b6    lea    0x0(,%rdx,4),%rax
    0.00 :	    7c21:       c0 
    0.00 :	    7c22:       48 01 d0                add    %rdx,%rax
    0.00 :	    7c25:       0f 84 e3 fc             lea    (%rbx,%rax,4),%rdx
    0.00 :	    7c29:       ff ff f0 80 08 10 e9    testb  $0x20,0x101(%rdx)
    0.00 :	    7c30:       da fc ff ff 0f 1f       jne    7ea8 <nf_conntrack_hash_insert+0x7d98>
    0.00 :	    7c36:       40 00 83 fd             lea    0x78(%rbx),%rax
    0.00 :	    7c3a:       04 0f 85 cc fb          mov    %rax,0x18(%rsp)
    0.00 :	    7c3f:       ff ff 45 85             mov    0x78(%rbx),%rax
    0.00 :	    7c43:       f6 0f                   test   $0x2,%al
    0.00 :	    7c45:       94 c2 83 e2 01 48       je     7e20 <nf_conntrack_hash_insert+0x7d10>
    0.00 :	    7c4b:       8d 04 95 00 00 00 00    cmpb   $0x0,0x11b(%rbx)
    0.00 :	    7c52:       48 01 d0 48 8d 14       jne    7e20 <nf_conntrack_hash_insert+0x7d10>
    0.00 :	    7c58:       83 f6 82 01 01          mov    0x8(%r12),%eax
    0.00 :	    7c5d:       00 00                   bswap  %eax
    0.00 :	    7c5f:       20 0f 85 72 02 00       cmp    %eax,0x124(%rbx)
    0.00 :	    7c65:       00 48 8d 43 78 48       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c6b:       89 44 24 18 48          jmpq   7819 <nf_conntrack_hash_insert+0x7709>
    0.00 :	    7c70:       8b 43 78 a8 02          cmpl   $0x6,0x44(%rsp)
    0.00 :	    7c75:       0f 84 d5 01 00 00       jbe    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7c7b:       80 bb 1b 01             cmp    $0x1,%r14d
    0.00 :	    7c7f:       00 00 00 0f             lea    (%rdi,%r13,1),%rdx
    0.00 :	    7c83:       85 c8 01                sbb    %rax,%rax
    0.00 :	    7c86:       00 00 41                and    $0x14,%eax
    0.00 :	    7c89:       8b 44 24 08 0f c8 39    movzbl 0x101(%rbx,%rax,1),%eax
    0.00 :	    7c90:       83 
    0.00 :	    7c91:       24 01 00 00 0f 85 72    or     0x101(%rbx,%rdx,4),%al
    0.00 :	    7c98:       fb ff                   test   $0x4,%al
    0.00 :	    7c9a:       ff e9 a9 fb ff ff       je     7e40 <nf_conntrack_hash_insert+0x7d30>
    0.00 :	    7ca0:       83 7c 24 44 06          mov    0x48(%rsp),%rdi
    0.00 :	    7ca5:       0f 86 62 fb ff          callq  7caa <nf_conntrack_hash_insert+0x7b9a>
    0.00 :	    7caa:       ff 41                   xor    %ecx,%ecx
    0.00 :	    7cac:       83 fe                   xor    %edx,%edx
    0.00 :	    7cae:       01 4a                   xor    %esi,%esi
    0.00 :	    7cb0:       8d 14 2f                mov    %rbx,%rdi
    0.00 :	    7cb3:       48 19 c0 83 e0          callq  7cb8 <nf_conntrack_hash_insert+0x7ba8>
    0.00 :	    7cb8:       14 0f                   cmp    $0x1,%al
    0.00 :	    7cba:       b6 84                   sbb    %eax,%eax
    0.00 :	    7cbc:       03 01                   not    %eax
    0.00 :	    7cbe:       01 00 00                and    $0xfffffffc,%eax
    0.00 :	    7cc1:       0a 84 93 01 01          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7cc6:       00 00 a8 04 0f 84 a0    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	    7ccd:       01 00 00 
    0.00 :	    7cd0:       48 8b 7c 24 48 e8 00    cmpb   $0x0,0x0(%rip)        # 7cd7 <nf_conntrack_hash_insert+0x7bc7>
    0.00 :	    7cd7:       00 00 00 31 c9 31       jne    7f6a <nf_conntrack_hash_insert+0x7e5a>
    0.00 :	    7cdd:       d2 31 f6 48 89          mov    0x48(%rsp),%rdi
    0.00 :	    7ce2:       df e8 00 00 00          callq  7ce7 <nf_conntrack_hash_insert+0x7bd7>
    0.00 :	    7ce7:       00 3c 01 19 c0          mov    0x38(%rsp),%rdx
    0.00 :	    7cec:       f7 d0 83 e0 fc e9       mov    0x75c(%rdx),%eax
    0.00 :	    7cf2:       37 fc ff                cmp    $0x6,%eax
    0.00 :	    7cf5:       ff 66 2e 0f 1f 84       je     7e68 <nf_conntrack_hash_insert+0x7d58>
    0.00 :	    7cfb:       00 00 00 00 00          cmp    $0xff,%eax
    0.00 :	    7d00:       80 3d 00 00 00 00       je     7e68 <nf_conntrack_hash_insert+0x7d58>
    0.00 :	    7d06:       00 0f 85 8d 02          mov    $0xffffffff,%eax
    0.00 :	    7d0b:       00 00 48 8b 7c          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7d10:       24 48 e8 00 00 00       mov    0x0(%rip),%eax        # 7d16 <nf_conntrack_hash_insert+0x7c06>
    0.00 :	    7d16:       00 48                   cmp    %edx,%eax
    0.00 :	    7d18:       8b 54                   mov    %eax,%ebp
    0.00 :	    7d1a:       24 38 8b 82 5c 07       jb     788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7d20:       00 00                   mov    %edx,%ebp
    0.00 :	    7d22:       83 f8 06 0f 84          jmpq   788a <nf_conntrack_hash_insert+0x777a>
    0.00 :	    7d27:       6d 01 00 00 3d ff 00    nopw   0x0(%rax,%rax,1)
    0.00 :	    7d2e:       00 00 
    0.00 :	    7d30:       0f 84 62                movzbl %al,%eax
    0.00 :	    7d33:       01 00 00                add    %rdx,%rax
    0.00 :	    7d36:       b8 ff ff ff ff e9       je     78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7d3c:       ed fb ff ff             lock orb $0x20,(%rax)
    0.00 :	    7d40:       8b 05 00 00 00          jmpq   78c2 <nf_conntrack_hash_insert+0x77b2>
    0.00 :	    7d45:       00 39 d0                nopl   (%rax)
    0.00 :	    7d48:       89 c5 0f 82             mov    0x2c(%rsp),%esi
    0.00 :	    7d4c:       6a fb ff ff 89          mov    0x30(%rsp),%rdi
    0.00 :	    7d51:       d5 e9 63 fb ff          lea    0x50(%rsp),%rcx
    0.00 :	    7d56:       ff 66 0f                mov    %r12,%rdx
    0.00 :	    7d59:       1f 84 00 00 00 00 00    movb   $0x0,0x12a(%rbx)
    0.00 :	    7d60:       0f b6 c0 48 01 d0 0f    movb   $0x0,0x12b(%rbx)
    0.00 :	    7d67:       84 86 fb ff ff f0 80    movq   $0x0,0x50(%rsp)
    0.00 :	    7d6e:       08 20 
    0.00 :	    7d70:       e9 7d fb ff ff 0f 1f    movq   $0x0,0x58(%rsp)
    0.00 :	    7d77:       00 8b 
    0.00 :	    7d79:       74 24 2c 48 8b 7c 24    movl   $0x0,0x60(%rsp)
    0.00 :	    7d80:       30 
    0.00 :	    7d81:       48 8d 4c 24 50          callq  68c0 <nf_conntrack_hash_insert+0x67b0>
    0.00 :	    7d86:       4c 89 e2 c6 83          movzbl 0x61(%rsp),%edx
    0.00 :	    7d8b:       2a 01 00                test   $0x1,%dl
    0.00 :	    7d8e:       00 00                   je     7da2 <nf_conntrack_hash_insert+0x7c92>
    0.00 :	    7d90:       c6 83 2b 01 00          movzbl 0x60(%rsp),%eax
    0.00 :	    7d95:       00 00 48 c7 44 24 50    orb    $0x1,0x12b(%rbx)
    0.00 :	    7d9c:       00 00 00 00 48 c7       mov    %al,0x12a(%rbx)
    0.00 :	    7da2:       44 24 58                and    $0x2,%edx
    0.00 :	    7da5:       00 00 00 00 c7 44       je     7b03 <nf_conntrack_hash_insert+0x79f3>
    0.00 :	    7dab:       24 60 00 00 00 00 e8    orb    $0x2,0x12b(%rbx)
    0.00 :	    7db2:       3a eb ff ff 0f          jmpq   7b03 <nf_conntrack_hash_insert+0x79f3>
    0.00 :	    7db7:       b6 54 24 61 f6 c2 01    nopw   0x0(%rax,%rax,1)
    0.00 :	    7dbe:       74 12 
    0.00 :	    7dc0:       0f b6 44 24 60          mov    0x30(%rsp),%rdx
    0.00 :	    7dc5:       80 8b 2b 01             mov    0x28(%rsp),%esi
    0.00 :	    7dc9:       00 00 01 88 83          mov    $0x1,%ecx
    0.00 :	    7dce:       2a 01 00                mov    %rbx,%rdi
    0.00 :	    7dd1:       00 83 e2 02 0f          callq  7dd6 <nf_conntrack_hash_insert+0x7cc6>
    0.00 :	    7dd6:       84 58 fd ff ff          mov    $0x1,%eax
    0.00 :	    7ddb:       80 8b 2b 01 00          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7de0:       00 02 e9 4c fd          callq  7de5 <nf_conntrack_hash_insert+0x7cd5>
    0.00 :	    7de5:       ff ff                   test   %eax,%eax
    0.00 :	    7de7:       66 0f 1f 84 00 00       je     7b2c <nf_conntrack_hash_insert+0x7a1c>
    0.00 :	    7ded:       00 00 00 48 8b          movzbl 0x27(%rsp),%edi
    0.00 :	    7df2:       54 24 30 8b 74          mov    0x30(%rsp),%rdx
    0.00 :	    7df7:       24 28                   xor    %eax,%eax
    0.00 :	    7df9:       b9 01 00                xor    %r9d,%r9d
    0.00 :	    7dfc:       00 00 48                xor    %r8d,%r8d
    0.00 :	    7dff:       89 df                   xor    %ecx,%ecx
    0.00 :	    7e01:       e8 00                   xor    %esi,%esi
    0.00 :	    7e03:       00 00 00 b8 01 00 00    movq   $0x0,(%rsp)
    0.00 :	    7e0a:       00 
    0.00 :	    7e0b:       e9 1d fb ff ff          callq  7e10 <nf_conntrack_hash_insert+0x7d00>
    0.00 :	    7e10:       e8 00 00 00 00          mov    $0x1,%eax
    0.00 :	    7e15:       85 c0 0f 84 3f          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7e1a:       fd ff ff 0f b6 7c       nopw   0x0(%rax,%rax,1)
    0.00 :	    7e20:       24 27 48 8b             mov    0x78(%rbx),%rax
    0.00 :	    7e24:       54 24                   test   $0x4,%al
    0.00 :	    7e26:       30 31 c0 45 31 c9       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7e2c:       45 31 c0 31 c9 31 f6    cmpb   $0x3,0x11b(%rbx)
    0.00 :	    7e33:       48 c7 04 24 00 00       jne    77dd <nf_conntrack_hash_insert+0x76cd>
    0.00 :	    7e39:       00 00 e8 00 00          jmpq   7c58 <nf_conntrack_hash_insert+0x7b48>
    0.00 :	    7e3e:       00 00                   xchg   %ax,%ax
    0.00 :	    7e40:       b8 01 00 00 00 e9 e3    movzbl 0x119(%rbx),%eax
    0.00 :	    7e47:       fa ff ff                cmp    %r14d,%eax
    0.00 :	    7e4a:       66 0f 1f 44 00 00       jne    7940 <nf_conntrack_hash_insert+0x7830>
    0.00 :	    7e50:       48 8b 43 78 a8 04 0f    cmpb   $0x4,0x11b(%rbx)
    0.00 :	    7e57:       85 b1 f9 ff ff 80       jne    7940 <nf_conntrack_hash_insert+0x7830>
    0.00 :	    7e5d:       bb 1b 01 00 00          jmpq   7ca0 <nf_conntrack_hash_insert+0x7b90>
    0.00 :	    7e62:       03 0f 85 a4 f9 ff       nopw   0x0(%rax,%rax,1)
    0.00 :	    7e68:       ff e9 1a fe ff          callq  7e6d <nf_conntrack_hash_insert+0x7d5d>
    0.00 :	    7e6d:       ff 66                   test   %eax,%eax
    0.00 :	    7e6f:       90                      nop
    0.00 :	    7e70:       0f b6 83 19 01 00       je     7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7e76:       00 44 39 f0 0f          movzbl 0x27(%rsp),%edi
    0.00 :	    7e7b:       85 f0 fa ff ff 80 bb    movq   $0x0,(%rsp)
    0.00 :	    7e82:       1b 
    0.00 :	    7e83:       01 00 00 04 0f          mov    0x30(%rsp),%rdx
    0.00 :	    7e88:       85 e3                   xor    %eax,%eax
    0.00 :	    7e8a:       fa ff ff                xor    %r9d,%r9d
    0.00 :	    7e8d:       e9 3e fe                xor    %r8d,%r8d
    0.00 :	    7e90:       ff ff                   xor    %ecx,%ecx
    0.00 :	    7e92:       66 0f                   xor    %esi,%esi
    0.00 :	    7e94:       1f 44 00 00 e8          callq  7e99 <nf_conntrack_hash_insert+0x7d89>
    0.00 :	    7e99:       00 00 00 00 85          mov    $0xffffffff,%eax
    0.00 :	    7e9e:       c0 90 0f 84 90          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7ea3:       fe ff ff 0f b6          nopl   0x0(%rax,%rax,1)
    0.00 :	    7ea8:       7c 24 27 48 c7          mov    0x4(%r12),%eax
    0.00 :	    7ead:       04 24                   bswap  %eax
    0.00 :	    7eaf:       00 00 00 00 48 8b       cmp    0xfc(%rdx),%eax
    0.00 :	    7eb5:       54 24 30 31 c0 45       jns    7c36 <nf_conntrack_hash_insert+0x7b26>
    0.00 :	    7ebb:       31 c9 45 31 c0          mov    0x48(%rsp),%rdi
    0.00 :	    7ec0:       31 c9 31 f6 e8          callq  7ec5 <nf_conntrack_hash_insert+0x7db5>
    0.00 :	    7ec5:       00 00 00 00 b8          mov    0x38(%rsp),%rdx
    0.00 :	    7eca:       ff ff ff ff e9 5a       mov    0x75c(%rdx),%eax
    0.00 :	    7ed0:       fa ff ff                cmp    $0x6,%eax
    0.00 :	    7ed3:       0f 1f                   je     7ee0 <nf_conntrack_hash_insert+0x7dd0>
    0.00 :	    7ed5:       44 00 00 41 8b          cmp    $0xff,%eax
    0.00 :	    7eda:       44 24 04 0f c8 3b       jne    7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7ee0:       82 fc 00 00 00          callq  7ee5 <nf_conntrack_hash_insert+0x7dd5>
    0.00 :	    7ee5:       0f 89                   test   %eax,%eax
    0.00 :	    7ee7:       7b fd ff ff 48 8b       je     7d06 <nf_conntrack_hash_insert+0x7bf6>
    0.00 :	    7eed:       7c 24 48 e8 00          movzbl 0x27(%rsp),%edi
    0.00 :	    7ef2:       00 00 00 48 8b 54 24    movq   $0x0,(%rsp)
    0.00 :	    7ef9:       38 
    0.00 :	    7efa:       8b 82                   jmp    7e83 <nf_conntrack_hash_insert+0x7d73>
    0.00 :	    7efc:       5c 07 00 00             nopl   0x0(%rax)
    0.00 :	    7f00:       83 f8 06 74 0b          mov    0x48(%rsp),%rdi
    0.00 :	    7f05:       3d ff 00 00 00          callq  7f0a <nf_conntrack_hash_insert+0x7dfa>
    0.00 :	    7f0a:       0f 85 26 fe ff          mov    $0xffffffff,%eax
    0.00 :	    7f0f:       ff e8 00 00 00          jmpq   78fd <nf_conntrack_hash_insert+0x77ed>
    0.00 :	    7f14:       00 85 c0 0f             nopl   0x0(%rax)
    0.00 :	    7f18:       84 19                   ud2    
    0.00 :	    7f1a:       fe ff                   jmp    7f1a <nf_conntrack_hash_insert+0x7e0a>
    0.00 :	    7f1c:       ff 0f b6 7c 24 27       movzbl 0xd(%r12),%r8d
    0.00 :	    7f22:       48 c7 04 24 00 00 00    mov    $0x0,%rsi
    0.00 :	    7f29:       00 eb 87 0f 1f 40 00    mov    $0x0,%rdi
    0.00 :	    7f30:       48 8b 7c 24 48          mov    %r15d,0x8(%rsp)
    0.00 :	    7f35:       e8 00 00                mov    %r8d,%eax
    0.00 :	    7f38:       00 00 b8                mov    %r8d,%ecx
    0.00 :	    7f3b:       ff ff ff                mov    %r8d,%edx
    0.00 :	    7f3e:       ff e9 e9                shr    $0x2,%al
    0.00 :	    7f41:       f9 ff ff                shr    $0x4,%cl
    0.00 :	    7f44:       0f 1f                   shr    %dl
    0.00 :	    7f46:       40 00 0f                mov    %eax,%r9d
    0.00 :	    7f49:       0b eb fe 45             mov    0x44(%rsp),%eax
    0.00 :	    7f4d:       0f b6 44                and    $0x1,%ecx
    0.00 :	    7f50:       24 0d 48                and    $0x1,%edx
    0.00 :	    7f53:       c7 c6 00 00             and    $0x1,%r9d
    0.00 :	    7f57:       00 00 48 c7             and    $0x1,%r8d
    0.00 :	    7f5b:       c7 00 00                mov    %eax,(%rsp)
    0.00 :	    7f5e:       00 00                   xor    %eax,%eax
    0.00 :	    7f60:       44 89 7c 24 08          callq  7f65 <nf_conntrack_hash_insert+0x7e55>
    0.00 :	    7f65:       44 89 c0 44 89          jmpq   7841 <nf_conntrack_hash_insert+0x7731>
    0.00 :	    7f6a:       c1 44 89                test   %r8b,%r8b
    0.00 :	    7f6d:       c2 c0 e8 02 c0          mov    $0x4,%ecx
    0.00 :	    7f72:       e9 04                   jne    7f83 <nf_conntrack_hash_insert+0x7e73>
    0.00 :	    7f74:       d0 ea 41 89             test   $0x2,%sil
    0.00 :	    7f78:       c1 8b                   je     7fbf <nf_conntrack_hash_insert+0x7eaf>
    0.00 :	    7f7a:       44 24 44 83             shr    $0x4,%sil
    0.00 :	    7f7e:       e1 01                   mov    %esi,%ecx
    0.00 :	    7f80:       83 e2 01                and    $0x1,%ecx
    0.00 :	    7f83:       41 83 e1 01 41          mov    0x44(%rsp),%r8d
    0.00 :	    7f88:       83 e0 01                mov    %r14d,%edx
    0.00 :	    7f8b:       89 04 24 31 c0 e8 00    mov    $0x0,%rsi
    0.00 :	    7f92:       00 00 00 e9 d7 f8 ff    mov    $0x0,%rdi
    0.00 :	    7f99:       ff 45                   xor    %eax,%eax
    0.00 :	    7f9b:       84 c0 b9 04 00          callq  7fa0 <nf_conntrack_hash_insert+0x7e90>
    0.00 :	    7fa0:       00 00 75 0f 40          jmpq   7cdd <nf_conntrack_hash_insert+0x7bcd>
    0.00 :	    7fa5:       f6 c6 02 74 45 40 c0    mov    $0x0,%rsi
    0.00 :	    7fac:       ee 04 89 f1 83 e1 01    mov    $0x0,%rdi
    0.00 :	    7fb3:       44 8b                   xor    %eax,%eax
    0.00 :	    7fb5:       44 24 44 44 89          callq  7fba <nf_conntrack_hash_insert+0x7eaa>
    0.00 :	    7fba:       f2 48 c7 c6 00          jmpq   7834 <nf_conntrack_hash_insert+0x7724>
    0.00 :	    7fbf:       00 00 00 48             test   $0x1,%sil
    0.00 :	    7fc3:       c7 c7 00 00 00          mov    $0x2,%ecx
    0.00 :	    7fc8:       00 31                   jne    7f83 <nf_conntrack_hash_insert+0x7e73>
    0.00 :	    7fca:       c0 e8 00                and    $0x10,%esi
    0.00 :	    7fcd:       00 00 00 e9             cmp    $0x1,%sil
    0.00 :	    7fd1:       38 fd                   sbb    %ecx,%ecx
    0.00 :	    7fd3:       ff ff 48                and    $0x2,%ecx
    0.00 :	    7fd6:       c7 c6 00                add    $0x3,%ecx
    0.00 :	    7fd9:       00 00                   jmp    7f83 <nf_conntrack_hash_insert+0x7e73>
         :	    7fdb:       00 48 c7 c7 00          nopl   0x0(%rax,%rax,1)
         :	    7fe0:       00 00 00 31             movzwl 0x24(%rsi),%eax
         :	    7fe4:       c0 e8 00 00             mov    %ax,0x10(%rdi)
         :	    7fe8:       00 00 e9 75             movzwl 0x10(%rsi),%eax
         :	    7fec:       f8 ff ff 40             mov    %ax,0x24(%rdi)
         :	    7ff0:       f6 c6 01 b9 02          mov    $0x1,%eax
         :	    7ff5:       00                      retq   
         :	    7ff6:       00 00 75 b9 83 e6 10    nopw   %cs:0x0(%rax,%rax,1)
         :	    7ffd:       40 80 fe 
         :	    8000:       01 19 c9 83 e1          mov    $0x1,%eax
         :	    8005:       02                      retq   
         :	    8006:       83 c1 03 eb a8 0f 1f    nopw   %cs:0x0(%rax,%rax,1)
         :	    800d:       44 00 00 

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/drivers/cpufreq/mperf.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/drivers/cpufreq/mperf.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000000 <cpufreq_get_measured_perf>:
    0.00 :	   0:   55                      push   %rbp
    0.00 :	  31:   b9 01 00 00             mov    0x8(%rsp),%eax
    0.00 :	  35:   00 48 89 fd 53 89 f3    mov    0x0(,%rax,8),%rsi
    0.00 :	  3c:   48 
    0.00 :	  3d:   c7 c6 00                mov    %rdi,%rdx
    0.00 :	  40:   00 00 00 89             mov    (%rsp),%rcx
    0.00 :	  44:   df 48 83                add    %rsi,%rdx
    0.00 :	  47:   ec 18 48 89             sub    0x8(%rdx),%r8
 ??:0
  100.00 :	  4b:   e2 e8 00                sub    (%rdx),%rcx
    0.00 :	  4e:   00 00 00 31             shr    $0xa,%r8
    0.00 :	  52:   d2 85 c0                test   %r8,%r8
    0.00 :	  55:   75 53                   jne    88 <cpufreq_get_measured_perf+0x58>
    0.00 :	  57:   89 d8 48 c7             mov    (%rsp),%rdx
    0.00 :	  5b:   c7 00 00                mov    %rdi,%rax
    0.00 :	  5e:   00 00 4c 8b             mov    %rdx,(%rax,%rsi,1)
    0.00 :	  62:   44 24 08 48 8b          mov    0x8(%rsp),%rdx
    0.00 :	  67:   34 c5 00 00 00          mov    %rdx,0x8(%rax,%rsi,1)
    0.00 :	  6c:   00 48 89                mov    0x18(%rbp),%eax
    0.00 :	  6f:   fa 48 8b 0c             imul   %rax,%rcx
    0.00 :	  73:   24 48 01                mov    %rcx,%rdx
    0.00 :	  76:   f2 4c 2b 42             shr    $0xa,%rdx
    0.00 :	  7a:   08 48 2b 0a             add    $0x18,%rsp
    0.00 :	  7e:   49 c1                   mov    %edx,%eax
    0.00 :	  80:   e8                      pop    %rbx
    0.00 :	  81:   0a                      pop    %rbp
    0.00 :	  82:   4d                      retq   
    0.00 :	  83:   85 c0 75 31 48          nopl   0x0(%rax,%rax,1)
    0.00 :	  88:   8b 14 24                mov    %rcx,%rax
    0.00 :	  8b:   48 89                   xor    %edx,%edx
    0.00 :	  8d:   f8 48 89                div    %r8
    0.00 :	  90:   14 30 48                mov    %rax,%rcx
    0.00 :	  93:   8b 54                   jmp    57 <cpufreq_get_measured_perf+0x27>
         :	  95:   24 08 48 89 54 30 08    data32 nopw %cs:0x0(%rax,%rax,1)
         :	  9c:   8b 45 18 48 
         :	  a0:   0f af c8 48             sub    $0x38,%rsp
         :	  a4:   89 ca 48 c1 ea 0a 48    mov    0x0(%rip),%rdx        # ab <cpufreq_get_measured_perf+0x7b>
         :	  ab:   83 c4 18 89 d0 5b 5d    movabs $0x1000000000000000,%rax
         :	  b2:   c3 0f 1f 
         :	  b5:   44 00 00 48 89          mov    %rbx,0x18(%rsp)
         :	  ba:   c8 31 d2 49 f7          mov    %rbp,0x20(%rsp)
         :	  bf:   f0 48 89                mov    %rdi,%rbx
         :	  c2:   c1 eb c2 66 66          mov    %r12,0x28(%rsp)

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
----------------------------------------------

  100.00 ??:0
 Percent |	Source code & Disassembly of /lib/modules/3.0.101-0.15-default/kernel/fs/jbd/jbd.ko
------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000000040 <__journal_temp_unlink_buffer>:
    0.00 :	      40:       4c 8b 07                mov    (%rdi),%r8
    0.00 :	      73:       49 8b 00                cmp    $0x8,%eax
    0.00 :	      76:       a9 00                   ja     da <journal_release_buffer+0xaa>
    0.00 :	      78:       00 10                   test   %eax,%eax
    0.00 :	      7a:       00 74                   jne    85 <journal_release_buffer+0x55>
    0.00 :	      7c:       34 48 8b 77             nopl   0x0(%rax)
    0.00 :	      80:       28                      retq   
    0.00 :	      81:       48 85                   ud2    
    0.00 :	      83:       f6 74                   jmp    83 <journal_release_buffer+0x53>
    0.00 :	      85:       1a 48 8b                test   %rsi,%rsi
    0.00 :	      88:       06 8b                   je     d6 <journal_release_buffer+0xa6>
    0.00 :	      8a:       90 4c                   xor    %ecx,%ecx
    0.00 :	      8c:       01 00 00                cmp    $0x8,%eax
    0.00 :	      8f:       89 d0                   ja     9e <journal_release_buffer+0x6e>
    0.00 :	      91:       c1 f8                   mov    %eax,%eax
    0.00 :	      93:       10 66 39 d0 75 07 0f    jmpq   *0x0(,%rax,8)
    0.00 :	      9a:       0b eb fe 0f             lea    0x20(%rsi),%rcx
    0.00 :	      9e:       1f 00 8b                cmp    (%rcx),%rdi
    0.00 :	      a1:       47 0c                   je     de <journal_release_buffer+0xae>
    0.00 :	      a3:       83 f8 08 77             mov    0x40(%rdi),%rdx
    0.00 :	      a7:       62 85 c0 75             mov    0x38(%rdi),%rax
    0.00 :	      ab:       09 0f 1f 40             mov    %rax,0x38(%rdx)
    0.00 :	      af:       00 c3 0f 0b             mov    0x38(%rdi),%rdx
    0.00 :	      b3:       eb fe 48 85             mov    0x40(%rdi),%rax
    0.00 :	      b7:       f6 74 4c 31             mov    %rax,0x40(%rdx)
    0.00 :	      bb:       c9 83 f8 08 77 0d 89    movl   $0x0,0xc(%rdi)
    0.00 :	      c2:       c0 ff 24 c5 00 00       lock btrl $0x13,(%r8)
 ??:0
  100.00 :	      c8:       00 00                   sbb    %eax,%eax
    0.00 :	      ca:       48 8d                   test   %eax,%eax
    0.00 :	      cc:       4e 20                   je     7c <journal_release_buffer+0x4c>
    0.00 :	      ce:       48 3b 39                mov    %r8,%rdi
    0.00 :	      d1:       74 3b 48 8b 57          jmpq   d6 <journal_release_buffer+0xa6>
    0.00 :	      d6:       40 48                   ud2    
    0.00 :	      d8:       8b 47                   jmp    d8 <journal_release_buffer+0xa8>
    0.00 :	      da:       38 48                   ud2    
    0.00 :	      dc:       89 42                   jmp    dc <journal_release_buffer+0xac>
    0.00 :	      de:       38 48 8b 57             mov    0x38(%rdi),%rdx
    0.00 :	      e2:       38 48                   xor    %eax,%eax
    0.00 :	      e4:       8b 47 40                cmp    %rdx,%rdi
    0.00 :	      e7:       48 89 42 40             cmovne %rdx,%rax
    0.00 :	      eb:       c7 47 0c                mov    %rax,(%rcx)
    0.00 :	      ee:       00 00                   jmp    a3 <journal_release_buffer+0x73>
    0.00 :	      f0:       00 00 f0 41             lea    0x18(%rsi),%rcx
    0.00 :	      f4:       0f ba                   jmp    9e <journal_release_buffer+0x6e>
    0.00 :	      f6:       30 13 19 c0             lea    0x60(%rsi),%rcx
    0.00 :	      fa:       85 c0                   jmp    9e <journal_release_buffer+0x6e>
    0.00 :	      fc:       74 ae 4c 89             lea    0x58(%rsi),%rcx
    0.00 :	     100:       c7 e9                   jmp    9e <journal_release_buffer+0x6e>
    0.00 :	     102:       00 00 00 00             lea    0x50(%rsi),%rcx
    0.00 :	     106:       0f 0b                   jmp    9e <journal_release_buffer+0x6e>
    0.00 :	     108:       eb fe 0f 0b             lea    0x38(%rsi),%rcx
    0.00 :	     10c:       eb fe 48 8b             nopl   0x0(%rax)
    0.00 :	     110:       57 38                   jmp    9e <journal_release_buffer+0x6e>
    0.00 :	     112:       31 c0 48                mov    0x14(%rsi),%eax
    0.00 :	     115:       39 d7 48 0f             lea    0x28(%rsi),%rcx
    0.00 :	     119:       45 c2 48                sub    $0x1,%eax
    0.00 :	     11c:       89 01                   test   %eax,%eax
    0.00 :	     11e:       eb b3 48                mov    %eax,0x14(%rsi)
    0.00 :	     121:       8d 4e 18 eb a8 48       jns    9e <journal_release_buffer+0x6e>
    0.00 :	     127:       8d 4e                   ud2    
    0.00 :	     129:       60 eb                   jmp    129 <__journal_temp_unlink_buffer+0xb9>
    0.00 :	     12b:       a2 48 8d 4e             lea    0x30(%rsi),%rcx
    0.00 :	     12f:       58 eb 9c 48 8d          jmpq   9e <journal_release_buffer+0x6e>
         :	     134:       4e 50 eb 96 48 8d 4e    data32 data32 nopw %cs:0x0(%rax,%rax,1)
         :	     13b:       38 0f 1f 40 00 
         :	     140:       eb                      push   %rbx
         :	     141:       8c 8b 46                mov    %rdi,%rbx
         :	     144:       14 48 8d 4e 28          callq  40 <journal_release_buffer+0x10>
         :	     149:       83 e8 01 85 c0 89 46    movq   $0x0,0x28(%rbx)
         :	     150:       14 
         :	     151:       0f                      pop    %rbx
         :	     152:       89                      retq   
         :	     153:       77 ff ff ff 0f 0b eb    data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
         :	     15a:       fe 48 8d 4e 30 e9 
         :	     160:       6a ff                   push   %r14
         :	     162:       ff ff 66                mov    %edx,%r14d

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------

Sorted summary for file 
----------------------------------------------

 Nothing higher than 0.5%
 Percent |	Source code & Disassembly of 
------------------------------------------------
